/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// node_modules/handlebars/dist/cjs/handlebars/utils.js
var require_utils = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/utils.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.extend = extend;
    exports.indexOf = indexOf;
    exports.escapeExpression = escapeExpression;
    exports.isEmpty = isEmpty;
    exports.createFrame = createFrame;
    exports.blockParams = blockParams;
    exports.appendContextPath = appendContextPath;
    var escape = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;",
      "=": "&#x3D;"
    };
    var badChars = /[&<>"'`=]/g;
    var possible = /[&<>"'`=]/;
    function escapeChar(chr) {
      return escape[chr];
    }
    function extend(obj) {
      for (var i = 1; i < arguments.length; i++) {
        for (var key in arguments[i]) {
          if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
            obj[key] = arguments[i][key];
          }
        }
      }
      return obj;
    }
    var toString = Object.prototype.toString;
    exports.toString = toString;
    var isFunction = function isFunction2(value) {
      return typeof value === "function";
    };
    if (isFunction(/x/)) {
      exports.isFunction = isFunction = function(value) {
        return typeof value === "function" && toString.call(value) === "[object Function]";
      };
    }
    exports.isFunction = isFunction;
    var isArray2 = Array.isArray || function(value) {
      return value && typeof value === "object" ? toString.call(value) === "[object Array]" : false;
    };
    exports.isArray = isArray2;
    function indexOf(array, value) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (array[i] === value) {
          return i;
        }
      }
      return -1;
    }
    function escapeExpression(string) {
      if (typeof string !== "string") {
        if (string && string.toHTML) {
          return string.toHTML();
        } else if (string == null) {
          return "";
        } else if (!string) {
          return string + "";
        }
        string = "" + string;
      }
      if (!possible.test(string)) {
        return string;
      }
      return string.replace(badChars, escapeChar);
    }
    function isEmpty(value) {
      if (!value && value !== 0) {
        return true;
      } else if (isArray2(value) && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
    function createFrame(object) {
      var frame = extend({}, object);
      frame._parent = object;
      return frame;
    }
    function blockParams(params, ids) {
      params.path = ids;
      return params;
    }
    function appendContextPath(contextPath, id) {
      return (contextPath ? contextPath + "." : "") + id;
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/exception.js
var require_exception = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/exception.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    var errorProps = ["description", "fileName", "lineNumber", "endLineNumber", "message", "name", "number", "stack"];
    function Exception(message, node) {
      var loc = node && node.loc, line = void 0, endLineNumber = void 0, column = void 0, endColumn = void 0;
      if (loc) {
        line = loc.start.line;
        endLineNumber = loc.end.line;
        column = loc.start.column;
        endColumn = loc.end.column;
        message += " - " + line + ":" + column;
      }
      var tmp = Error.prototype.constructor.call(this, message);
      for (var idx = 0; idx < errorProps.length; idx++) {
        this[errorProps[idx]] = tmp[errorProps[idx]];
      }
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, Exception);
      }
      try {
        if (loc) {
          this.lineNumber = line;
          this.endLineNumber = endLineNumber;
          if (Object.defineProperty) {
            Object.defineProperty(this, "column", {
              value: column,
              enumerable: true
            });
            Object.defineProperty(this, "endColumn", {
              value: endColumn,
              enumerable: true
            });
          } else {
            this.column = column;
            this.endColumn = endColumn;
          }
        }
      } catch (nop) {
      }
    }
    Exception.prototype = new Error();
    exports["default"] = Exception;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js
var require_block_helper_missing = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    var _utils = require_utils();
    exports["default"] = function(instance) {
      instance.registerHelper("blockHelperMissing", function(context, options) {
        var inverse = options.inverse, fn = options.fn;
        if (context === true) {
          return fn(this);
        } else if (context === false || context == null) {
          return inverse(this);
        } else if (_utils.isArray(context)) {
          if (context.length > 0) {
            if (options.ids) {
              options.ids = [options.name];
            }
            return instance.helpers.each(context, options);
          } else {
            return inverse(this);
          }
        } else {
          if (options.data && options.ids) {
            var data = _utils.createFrame(options.data);
            data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
            options = { data };
          }
          return fn(context, options);
        }
      });
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/helpers/each.js
var require_each = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/helpers/each.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _utils = require_utils();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    exports["default"] = function(instance) {
      instance.registerHelper("each", function(context, options) {
        if (!options) {
          throw new _exception2["default"]("Must pass iterator to #each");
        }
        var fn = options.fn, inverse = options.inverse, i = 0, ret = "", data = void 0, contextPath = void 0;
        if (options.data && options.ids) {
          contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + ".";
        }
        if (_utils.isFunction(context)) {
          context = context.call(this);
        }
        if (options.data) {
          data = _utils.createFrame(options.data);
        }
        function execIteration(field, index, last) {
          if (data) {
            data.key = field;
            data.index = index;
            data.first = index === 0;
            data.last = !!last;
            if (contextPath) {
              data.contextPath = contextPath + field;
            }
          }
          ret = ret + fn(context[field], {
            data,
            blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
          });
        }
        if (context && typeof context === "object") {
          if (_utils.isArray(context)) {
            for (var j = context.length; i < j; i++) {
              if (i in context) {
                execIteration(i, i, i === context.length - 1);
              }
            }
          } else if (typeof Symbol === "function" && context[Symbol.iterator]) {
            var newContext = [];
            var iterator = context[Symbol.iterator]();
            for (var it = iterator.next(); !it.done; it = iterator.next()) {
              newContext.push(it.value);
            }
            context = newContext;
            for (var j = context.length; i < j; i++) {
              execIteration(i, i, i === context.length - 1);
            }
          } else {
            (function() {
              var priorKey = void 0;
              Object.keys(context).forEach(function(key) {
                if (priorKey !== void 0) {
                  execIteration(priorKey, i - 1);
                }
                priorKey = key;
                i++;
              });
              if (priorKey !== void 0) {
                execIteration(priorKey, i - 1, true);
              }
            })();
          }
        }
        if (i === 0) {
          ret = inverse(this);
        }
        return ret;
      });
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js
var require_helper_missing = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    exports["default"] = function(instance) {
      instance.registerHelper("helperMissing", function() {
        if (arguments.length === 1) {
          return void 0;
        } else {
          throw new _exception2["default"]('Missing helper: "' + arguments[arguments.length - 1].name + '"');
        }
      });
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/helpers/if.js
var require_if = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/helpers/if.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _utils = require_utils();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    exports["default"] = function(instance) {
      instance.registerHelper("if", function(conditional, options) {
        if (arguments.length != 2) {
          throw new _exception2["default"]("#if requires exactly one argument");
        }
        if (_utils.isFunction(conditional)) {
          conditional = conditional.call(this);
        }
        if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
          return options.inverse(this);
        } else {
          return options.fn(this);
        }
      });
      instance.registerHelper("unless", function(conditional, options) {
        if (arguments.length != 2) {
          throw new _exception2["default"]("#unless requires exactly one argument");
        }
        return instance.helpers["if"].call(this, conditional, {
          fn: options.inverse,
          inverse: options.fn,
          hash: options.hash
        });
      });
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/helpers/log.js
var require_log = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/helpers/log.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = function(instance) {
      instance.registerHelper("log", function() {
        var args = [void 0], options = arguments[arguments.length - 1];
        for (var i = 0; i < arguments.length - 1; i++) {
          args.push(arguments[i]);
        }
        var level = 1;
        if (options.hash.level != null) {
          level = options.hash.level;
        } else if (options.data && options.data.level != null) {
          level = options.data.level;
        }
        args[0] = level;
        instance.log.apply(instance, args);
      });
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js
var require_lookup = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = function(instance) {
      instance.registerHelper("lookup", function(obj, field, options) {
        if (!obj) {
          return obj;
        }
        return options.lookupProperty(obj, field);
      });
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/helpers/with.js
var require_with = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/helpers/with.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _utils = require_utils();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    exports["default"] = function(instance) {
      instance.registerHelper("with", function(context, options) {
        if (arguments.length != 2) {
          throw new _exception2["default"]("#with requires exactly one argument");
        }
        if (_utils.isFunction(context)) {
          context = context.call(this);
        }
        var fn = options.fn;
        if (!_utils.isEmpty(context)) {
          var data = options.data;
          if (options.data && options.ids) {
            data = _utils.createFrame(options.data);
            data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
          }
          return fn(context, {
            data,
            blockParams: _utils.blockParams([context], [data && data.contextPath])
          });
        } else {
          return options.inverse(this);
        }
      });
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/helpers.js
var require_helpers = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/helpers.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.registerDefaultHelpers = registerDefaultHelpers;
    exports.moveHelperToHooks = moveHelperToHooks;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _helpersBlockHelperMissing = require_block_helper_missing();
    var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);
    var _helpersEach = require_each();
    var _helpersEach2 = _interopRequireDefault(_helpersEach);
    var _helpersHelperMissing = require_helper_missing();
    var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);
    var _helpersIf = require_if();
    var _helpersIf2 = _interopRequireDefault(_helpersIf);
    var _helpersLog = require_log();
    var _helpersLog2 = _interopRequireDefault(_helpersLog);
    var _helpersLookup = require_lookup();
    var _helpersLookup2 = _interopRequireDefault(_helpersLookup);
    var _helpersWith = require_with();
    var _helpersWith2 = _interopRequireDefault(_helpersWith);
    function registerDefaultHelpers(instance) {
      _helpersBlockHelperMissing2["default"](instance);
      _helpersEach2["default"](instance);
      _helpersHelperMissing2["default"](instance);
      _helpersIf2["default"](instance);
      _helpersLog2["default"](instance);
      _helpersLookup2["default"](instance);
      _helpersWith2["default"](instance);
    }
    function moveHelperToHooks(instance, helperName, keepHelper) {
      if (instance.helpers[helperName]) {
        instance.hooks[helperName] = instance.helpers[helperName];
        if (!keepHelper) {
          delete instance.helpers[helperName];
        }
      }
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js
var require_inline = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    var _utils = require_utils();
    exports["default"] = function(instance) {
      instance.registerDecorator("inline", function(fn, props, container, options) {
        var ret = fn;
        if (!props.partials) {
          props.partials = {};
          ret = function(context, options2) {
            var original = container.partials;
            container.partials = _utils.extend({}, original, props.partials);
            var ret2 = fn(context, options2);
            container.partials = original;
            return ret2;
          };
        }
        props.partials[options.args[0]] = options.fn;
        return ret;
      });
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/decorators.js
var require_decorators = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/decorators.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.registerDefaultDecorators = registerDefaultDecorators;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _decoratorsInline = require_inline();
    var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
    function registerDefaultDecorators(instance) {
      _decoratorsInline2["default"](instance);
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/logger.js
var require_logger = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/logger.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    var _utils = require_utils();
    var logger2 = {
      methodMap: ["debug", "info", "warn", "error"],
      level: "info",
      // Maps a given level value to the `methodMap` indexes above.
      lookupLevel: function lookupLevel(level) {
        if (typeof level === "string") {
          var levelMap = _utils.indexOf(logger2.methodMap, level.toLowerCase());
          if (levelMap >= 0) {
            level = levelMap;
          } else {
            level = parseInt(level, 10);
          }
        }
        return level;
      },
      // Can be overridden in the host environment
      log: function log(level) {
        level = logger2.lookupLevel(level);
        if (typeof console !== "undefined" && logger2.lookupLevel(logger2.level) <= level) {
          var method = logger2.methodMap[level];
          if (!console[method]) {
            method = "log";
          }
          for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            message[_key - 1] = arguments[_key];
          }
          console[method].apply(console, message);
        }
      }
    };
    exports["default"] = logger2;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js
var require_create_new_lookup_object = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.createNewLookupObject = createNewLookupObject;
    var _utils = require_utils();
    function createNewLookupObject() {
      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
        sources[_key] = arguments[_key];
      }
      return _utils.extend.apply(void 0, [/* @__PURE__ */ Object.create(null)].concat(sources));
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js
var require_proto_access = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.createProtoAccessControl = createProtoAccessControl;
    exports.resultIsAllowed = resultIsAllowed;
    exports.resetLoggedProperties = resetLoggedProperties;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _createNewLookupObject = require_create_new_lookup_object();
    var _logger = require_logger();
    var _logger2 = _interopRequireDefault(_logger);
    var loggedProperties = /* @__PURE__ */ Object.create(null);
    function createProtoAccessControl(runtimeOptions) {
      var defaultMethodWhiteList = /* @__PURE__ */ Object.create(null);
      defaultMethodWhiteList["constructor"] = false;
      defaultMethodWhiteList["__defineGetter__"] = false;
      defaultMethodWhiteList["__defineSetter__"] = false;
      defaultMethodWhiteList["__lookupGetter__"] = false;
      var defaultPropertyWhiteList = /* @__PURE__ */ Object.create(null);
      defaultPropertyWhiteList["__proto__"] = false;
      return {
        properties: {
          whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),
          defaultValue: runtimeOptions.allowProtoPropertiesByDefault
        },
        methods: {
          whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),
          defaultValue: runtimeOptions.allowProtoMethodsByDefault
        }
      };
    }
    function resultIsAllowed(result, protoAccessControl, propertyName) {
      if (typeof result === "function") {
        return checkWhiteList(protoAccessControl.methods, propertyName);
      } else {
        return checkWhiteList(protoAccessControl.properties, propertyName);
      }
    }
    function checkWhiteList(protoAccessControlForType, propertyName) {
      if (protoAccessControlForType.whitelist[propertyName] !== void 0) {
        return protoAccessControlForType.whitelist[propertyName] === true;
      }
      if (protoAccessControlForType.defaultValue !== void 0) {
        return protoAccessControlForType.defaultValue;
      }
      logUnexpecedPropertyAccessOnce(propertyName);
      return false;
    }
    function logUnexpecedPropertyAccessOnce(propertyName) {
      if (loggedProperties[propertyName] !== true) {
        loggedProperties[propertyName] = true;
        _logger2["default"].log("error", 'Handlebars: Access has been denied to resolve the property "' + propertyName + '" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');
      }
    }
    function resetLoggedProperties() {
      Object.keys(loggedProperties).forEach(function(propertyName) {
        delete loggedProperties[propertyName];
      });
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/base.js
var require_base = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/base.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.HandlebarsEnvironment = HandlebarsEnvironment;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _utils = require_utils();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    var _helpers = require_helpers();
    var _decorators = require_decorators();
    var _logger = require_logger();
    var _logger2 = _interopRequireDefault(_logger);
    var _internalProtoAccess = require_proto_access();
    var VERSION = "4.7.8";
    exports.VERSION = VERSION;
    var COMPILER_REVISION = 8;
    exports.COMPILER_REVISION = COMPILER_REVISION;
    var LAST_COMPATIBLE_COMPILER_REVISION = 7;
    exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
    var REVISION_CHANGES = {
      1: "<= 1.0.rc.2",
      // 1.0.rc.2 is actually rev2 but doesn't report it
      2: "== 1.0.0-rc.3",
      3: "== 1.0.0-rc.4",
      4: "== 1.x.x",
      5: "== 2.0.0-alpha.x",
      6: ">= 2.0.0-beta.1",
      7: ">= 4.0.0 <4.3.0",
      8: ">= 4.3.0"
    };
    exports.REVISION_CHANGES = REVISION_CHANGES;
    var objectType = "[object Object]";
    function HandlebarsEnvironment(helpers, partials, decorators) {
      this.helpers = helpers || {};
      this.partials = partials || {};
      this.decorators = decorators || {};
      _helpers.registerDefaultHelpers(this);
      _decorators.registerDefaultDecorators(this);
    }
    HandlebarsEnvironment.prototype = {
      constructor: HandlebarsEnvironment,
      logger: _logger2["default"],
      log: _logger2["default"].log,
      registerHelper: function registerHelper(name, fn) {
        if (_utils.toString.call(name) === objectType) {
          if (fn) {
            throw new _exception2["default"]("Arg not supported with multiple helpers");
          }
          _utils.extend(this.helpers, name);
        } else {
          this.helpers[name] = fn;
        }
      },
      unregisterHelper: function unregisterHelper(name) {
        delete this.helpers[name];
      },
      registerPartial: function registerPartial(name, partial) {
        if (_utils.toString.call(name) === objectType) {
          _utils.extend(this.partials, name);
        } else {
          if (typeof partial === "undefined") {
            throw new _exception2["default"]('Attempting to register a partial called "' + name + '" as undefined');
          }
          this.partials[name] = partial;
        }
      },
      unregisterPartial: function unregisterPartial(name) {
        delete this.partials[name];
      },
      registerDecorator: function registerDecorator(name, fn) {
        if (_utils.toString.call(name) === objectType) {
          if (fn) {
            throw new _exception2["default"]("Arg not supported with multiple decorators");
          }
          _utils.extend(this.decorators, name);
        } else {
          this.decorators[name] = fn;
        }
      },
      unregisterDecorator: function unregisterDecorator(name) {
        delete this.decorators[name];
      },
      /**
       * Reset the memory of illegal property accesses that have already been logged.
       * @deprecated should only be used in handlebars test-cases
       */
      resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {
        _internalProtoAccess.resetLoggedProperties();
      }
    };
    var log = _logger2["default"].log;
    exports.log = log;
    exports.createFrame = _utils.createFrame;
    exports.logger = _logger2["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/safe-string.js
var require_safe_string = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/safe-string.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function SafeString(string) {
      this.string = string;
    }
    SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
      return "" + this.string;
    };
    exports["default"] = SafeString;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js
var require_wrapHelper = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.wrapHelper = wrapHelper;
    function wrapHelper(helper, transformOptionsFn) {
      if (typeof helper !== "function") {
        return helper;
      }
      var wrapper = function wrapper2() {
        var options = arguments[arguments.length - 1];
        arguments[arguments.length - 1] = transformOptionsFn(options);
        return helper.apply(this, arguments);
      };
      return wrapper;
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/runtime.js
var require_runtime = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/runtime.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.checkRevision = checkRevision;
    exports.template = template;
    exports.wrapProgram = wrapProgram;
    exports.resolvePartial = resolvePartial;
    exports.invokePartial = invokePartial;
    exports.noop = noop;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    var _utils = require_utils();
    var Utils = _interopRequireWildcard(_utils);
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    var _base = require_base();
    var _helpers = require_helpers();
    var _internalWrapHelper = require_wrapHelper();
    var _internalProtoAccess = require_proto_access();
    function checkRevision(compilerInfo) {
      var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = _base.COMPILER_REVISION;
      if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
        return;
      }
      if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
        var runtimeVersions = _base.REVISION_CHANGES[currentRevision], compilerVersions = _base.REVISION_CHANGES[compilerRevision];
        throw new _exception2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").");
      } else {
        throw new _exception2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + compilerInfo[1] + ").");
      }
    }
    function template(templateSpec, env) {
      if (!env) {
        throw new _exception2["default"]("No environment passed to template");
      }
      if (!templateSpec || !templateSpec.main) {
        throw new _exception2["default"]("Unknown template object: " + typeof templateSpec);
      }
      templateSpec.main.decorator = templateSpec.main_d;
      env.VM.checkRevision(templateSpec.compiler);
      var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;
      function invokePartialWrapper(partial, context, options) {
        if (options.hash) {
          context = Utils.extend({}, context, options.hash);
          if (options.ids) {
            options.ids[0] = true;
          }
        }
        partial = env.VM.resolvePartial.call(this, partial, context, options);
        var extendedOptions = Utils.extend({}, options, {
          hooks: this.hooks,
          protoAccessControl: this.protoAccessControl
        });
        var result = env.VM.invokePartial.call(this, partial, context, extendedOptions);
        if (result == null && env.compile) {
          options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
          result = options.partials[options.name](context, extendedOptions);
        }
        if (result != null) {
          if (options.indent) {
            var lines = result.split("\n");
            for (var i = 0, l2 = lines.length; i < l2; i++) {
              if (!lines[i] && i + 1 === l2) {
                break;
              }
              lines[i] = options.indent + lines[i];
            }
            result = lines.join("\n");
          }
          return result;
        } else {
          throw new _exception2["default"]("The partial " + options.name + " could not be compiled when running in runtime-only mode");
        }
      }
      var container = {
        strict: function strict(obj, name, loc) {
          if (!obj || !(name in obj)) {
            throw new _exception2["default"]('"' + name + '" not defined in ' + obj, {
              loc
            });
          }
          return container.lookupProperty(obj, name);
        },
        lookupProperty: function lookupProperty(parent, propertyName) {
          var result = parent[propertyName];
          if (result == null) {
            return result;
          }
          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
            return result;
          }
          if (_internalProtoAccess.resultIsAllowed(result, container.protoAccessControl, propertyName)) {
            return result;
          }
          return void 0;
        },
        lookup: function lookup(depths, name) {
          var len = depths.length;
          for (var i = 0; i < len; i++) {
            var result = depths[i] && container.lookupProperty(depths[i], name);
            if (result != null) {
              return depths[i][name];
            }
          }
        },
        lambda: function lambda(current, context) {
          return typeof current === "function" ? current.call(context) : current;
        },
        escapeExpression: Utils.escapeExpression,
        invokePartial: invokePartialWrapper,
        fn: function fn(i) {
          var ret2 = templateSpec[i];
          ret2.decorator = templateSpec[i + "_d"];
          return ret2;
        },
        programs: [],
        program: function program(i, data, declaredBlockParams, blockParams, depths) {
          var programWrapper = this.programs[i], fn = this.fn(i);
          if (data || depths || blockParams || declaredBlockParams) {
            programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
          } else if (!programWrapper) {
            programWrapper = this.programs[i] = wrapProgram(this, i, fn);
          }
          return programWrapper;
        },
        data: function data(value, depth) {
          while (value && depth--) {
            value = value._parent;
          }
          return value;
        },
        mergeIfNeeded: function mergeIfNeeded(param, common2) {
          var obj = param || common2;
          if (param && common2 && param !== common2) {
            obj = Utils.extend({}, common2, param);
          }
          return obj;
        },
        // An empty object to use as replacement for null-contexts
        nullContext: Object.seal({}),
        noop: env.VM.noop,
        compilerInfo: templateSpec.compiler
      };
      function ret(context) {
        var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
        var data = options.data;
        ret._setup(options);
        if (!options.partial && templateSpec.useData) {
          data = initData(context, data);
        }
        var depths = void 0, blockParams = templateSpec.useBlockParams ? [] : void 0;
        if (templateSpec.useDepths) {
          if (options.depths) {
            depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
          } else {
            depths = [context];
          }
        }
        function main(context2) {
          return "" + templateSpec.main(container, context2, container.helpers, container.partials, data, blockParams, depths);
        }
        main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
        return main(context, options);
      }
      ret.isTop = true;
      ret._setup = function(options) {
        if (!options.partial) {
          var mergedHelpers = Utils.extend({}, env.helpers, options.helpers);
          wrapHelpersToPassLookupProperty(mergedHelpers, container);
          container.helpers = mergedHelpers;
          if (templateSpec.usePartial) {
            container.partials = container.mergeIfNeeded(options.partials, env.partials);
          }
          if (templateSpec.usePartial || templateSpec.useDecorators) {
            container.decorators = Utils.extend({}, env.decorators, options.decorators);
          }
          container.hooks = {};
          container.protoAccessControl = _internalProtoAccess.createProtoAccessControl(options);
          var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
          _helpers.moveHelperToHooks(container, "helperMissing", keepHelperInHelpers);
          _helpers.moveHelperToHooks(container, "blockHelperMissing", keepHelperInHelpers);
        } else {
          container.protoAccessControl = options.protoAccessControl;
          container.helpers = options.helpers;
          container.partials = options.partials;
          container.decorators = options.decorators;
          container.hooks = options.hooks;
        }
      };
      ret._child = function(i, data, blockParams, depths) {
        if (templateSpec.useBlockParams && !blockParams) {
          throw new _exception2["default"]("must pass block params");
        }
        if (templateSpec.useDepths && !depths) {
          throw new _exception2["default"]("must pass parent depths");
        }
        return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
      };
      return ret;
    }
    function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
      function prog(context) {
        var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
        var currentDepths = depths;
        if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
          currentDepths = [context].concat(depths);
        }
        return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
      }
      prog = executeDecorators(fn, prog, container, depths, data, blockParams);
      prog.program = i;
      prog.depth = depths ? depths.length : 0;
      prog.blockParams = declaredBlockParams || 0;
      return prog;
    }
    function resolvePartial(partial, context, options) {
      if (!partial) {
        if (options.name === "@partial-block") {
          partial = options.data["partial-block"];
        } else {
          partial = options.partials[options.name];
        }
      } else if (!partial.call && !options.name) {
        options.name = partial;
        partial = options.partials[partial];
      }
      return partial;
    }
    function invokePartial(partial, context, options) {
      var currentPartialBlock = options.data && options.data["partial-block"];
      options.partial = true;
      if (options.ids) {
        options.data.contextPath = options.ids[0] || options.data.contextPath;
      }
      var partialBlock = void 0;
      if (options.fn && options.fn !== noop) {
        (function() {
          options.data = _base.createFrame(options.data);
          var fn = options.fn;
          partialBlock = options.data["partial-block"] = function partialBlockWrapper(context2) {
            var options2 = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
            options2.data = _base.createFrame(options2.data);
            options2.data["partial-block"] = currentPartialBlock;
            return fn(context2, options2);
          };
          if (fn.partials) {
            options.partials = Utils.extend({}, options.partials, fn.partials);
          }
        })();
      }
      if (partial === void 0 && partialBlock) {
        partial = partialBlock;
      }
      if (partial === void 0) {
        throw new _exception2["default"]("The partial " + options.name + " could not be found");
      } else if (partial instanceof Function) {
        return partial(context, options);
      }
    }
    function noop() {
      return "";
    }
    function initData(context, data) {
      if (!data || !("root" in data)) {
        data = data ? _base.createFrame(data) : {};
        data.root = context;
      }
      return data;
    }
    function executeDecorators(fn, prog, container, depths, data, blockParams) {
      if (fn.decorator) {
        var props = {};
        prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
        Utils.extend(prog, props);
      }
      return prog;
    }
    function wrapHelpersToPassLookupProperty(mergedHelpers, container) {
      Object.keys(mergedHelpers).forEach(function(helperName) {
        var helper = mergedHelpers[helperName];
        mergedHelpers[helperName] = passLookupPropertyOption(helper, container);
      });
    }
    function passLookupPropertyOption(helper, container) {
      var lookupProperty = container.lookupProperty;
      return _internalWrapHelper.wrapHelper(helper, function(options) {
        return Utils.extend({ lookupProperty }, options);
      });
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/no-conflict.js
var require_no_conflict = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/no-conflict.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = function(Handlebars5) {
      (function() {
        if (typeof globalThis === "object") return;
        Object.prototype.__defineGetter__("__magic__", function() {
          return this;
        });
        __magic__.globalThis = __magic__;
        delete Object.prototype.__magic__;
      })();
      var $Handlebars = globalThis.Handlebars;
      Handlebars5.noConflict = function() {
        if (globalThis.Handlebars === Handlebars5) {
          globalThis.Handlebars = $Handlebars;
        }
        return Handlebars5;
      };
    };
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars.runtime.js
var require_handlebars_runtime = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars.runtime.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    var _handlebarsBase = require_base();
    var base = _interopRequireWildcard(_handlebarsBase);
    var _handlebarsSafeString = require_safe_string();
    var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);
    var _handlebarsException = require_exception();
    var _handlebarsException2 = _interopRequireDefault(_handlebarsException);
    var _handlebarsUtils = require_utils();
    var Utils = _interopRequireWildcard(_handlebarsUtils);
    var _handlebarsRuntime = require_runtime();
    var runtime = _interopRequireWildcard(_handlebarsRuntime);
    var _handlebarsNoConflict = require_no_conflict();
    var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
    function create() {
      var hb = new base.HandlebarsEnvironment();
      Utils.extend(hb, base);
      hb.SafeString = _handlebarsSafeString2["default"];
      hb.Exception = _handlebarsException2["default"];
      hb.Utils = Utils;
      hb.escapeExpression = Utils.escapeExpression;
      hb.VM = runtime;
      hb.template = function(spec) {
        return runtime.template(spec, hb);
      };
      return hb;
    }
    var inst = create();
    inst.create = create;
    _handlebarsNoConflict2["default"](inst);
    inst["default"] = inst;
    exports["default"] = inst;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js
var require_ast = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    var AST = {
      // Public API used to evaluate derived attributes regarding AST nodes
      helpers: {
        // a mustache is definitely a helper if:
        // * it is an eligible helper, and
        // * it has at least one parameter or hash segment
        helperExpression: function helperExpression(node) {
          return node.type === "SubExpression" || (node.type === "MustacheStatement" || node.type === "BlockStatement") && !!(node.params && node.params.length || node.hash);
        },
        scopedId: function scopedId(path) {
          return /^\.|this\b/.test(path.original);
        },
        // an ID is simple if it only has one part, and that part is not
        // `..` or `this`.
        simpleId: function simpleId(path) {
          return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
        }
      }
    };
    exports["default"] = AST;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js
var require_parser = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    var handlebars = function() {
      var parser = {
        trace: function trace() {
        },
        yy: {},
        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
          var $0 = $$.length - 1;
          switch (yystate) {
            case 1:
              return $$[$0 - 1];
              break;
            case 2:
              this.$ = yy.prepareProgram($$[$0]);
              break;
            case 3:
              this.$ = $$[$0];
              break;
            case 4:
              this.$ = $$[$0];
              break;
            case 5:
              this.$ = $$[$0];
              break;
            case 6:
              this.$ = $$[$0];
              break;
            case 7:
              this.$ = $$[$0];
              break;
            case 8:
              this.$ = $$[$0];
              break;
            case 9:
              this.$ = {
                type: "CommentStatement",
                value: yy.stripComment($$[$0]),
                strip: yy.stripFlags($$[$0], $$[$0]),
                loc: yy.locInfo(this._$)
              };
              break;
            case 10:
              this.$ = {
                type: "ContentStatement",
                original: $$[$0],
                value: $$[$0],
                loc: yy.locInfo(this._$)
              };
              break;
            case 11:
              this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
              break;
            case 12:
              this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
              break;
            case 13:
              this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
              break;
            case 14:
              this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
              break;
            case 15:
              this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
              break;
            case 16:
              this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
              break;
            case 17:
              this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
              break;
            case 18:
              this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
              break;
            case 19:
              var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$), program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
              program.chained = true;
              this.$ = { strip: $$[$0 - 2].strip, program, chain: true };
              break;
            case 20:
              this.$ = $$[$0];
              break;
            case 21:
              this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
              break;
            case 22:
              this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
              break;
            case 23:
              this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
              break;
            case 24:
              this.$ = {
                type: "PartialStatement",
                name: $$[$0 - 3],
                params: $$[$0 - 2],
                hash: $$[$0 - 1],
                indent: "",
                strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                loc: yy.locInfo(this._$)
              };
              break;
            case 25:
              this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
              break;
            case 26:
              this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
              break;
            case 27:
              this.$ = $$[$0];
              break;
            case 28:
              this.$ = $$[$0];
              break;
            case 29:
              this.$ = {
                type: "SubExpression",
                path: $$[$0 - 3],
                params: $$[$0 - 2],
                hash: $$[$0 - 1],
                loc: yy.locInfo(this._$)
              };
              break;
            case 30:
              this.$ = { type: "Hash", pairs: $$[$0], loc: yy.locInfo(this._$) };
              break;
            case 31:
              this.$ = { type: "HashPair", key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
              break;
            case 32:
              this.$ = yy.id($$[$0 - 1]);
              break;
            case 33:
              this.$ = $$[$0];
              break;
            case 34:
              this.$ = $$[$0];
              break;
            case 35:
              this.$ = { type: "StringLiteral", value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
              break;
            case 36:
              this.$ = { type: "NumberLiteral", value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
              break;
            case 37:
              this.$ = { type: "BooleanLiteral", value: $$[$0] === "true", original: $$[$0] === "true", loc: yy.locInfo(this._$) };
              break;
            case 38:
              this.$ = { type: "UndefinedLiteral", original: void 0, value: void 0, loc: yy.locInfo(this._$) };
              break;
            case 39:
              this.$ = { type: "NullLiteral", original: null, value: null, loc: yy.locInfo(this._$) };
              break;
            case 40:
              this.$ = $$[$0];
              break;
            case 41:
              this.$ = $$[$0];
              break;
            case 42:
              this.$ = yy.preparePath(true, $$[$0], this._$);
              break;
            case 43:
              this.$ = yy.preparePath(false, $$[$0], this._$);
              break;
            case 44:
              $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });
              this.$ = $$[$0 - 2];
              break;
            case 45:
              this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
              break;
            case 46:
              this.$ = [];
              break;
            case 47:
              $$[$0 - 1].push($$[$0]);
              break;
            case 48:
              this.$ = [];
              break;
            case 49:
              $$[$0 - 1].push($$[$0]);
              break;
            case 50:
              this.$ = [];
              break;
            case 51:
              $$[$0 - 1].push($$[$0]);
              break;
            case 58:
              this.$ = [];
              break;
            case 59:
              $$[$0 - 1].push($$[$0]);
              break;
            case 64:
              this.$ = [];
              break;
            case 65:
              $$[$0 - 1].push($$[$0]);
              break;
            case 70:
              this.$ = [];
              break;
            case 71:
              $$[$0 - 1].push($$[$0]);
              break;
            case 78:
              this.$ = [];
              break;
            case 79:
              $$[$0 - 1].push($$[$0]);
              break;
            case 82:
              this.$ = [];
              break;
            case 83:
              $$[$0 - 1].push($$[$0]);
              break;
            case 86:
              this.$ = [];
              break;
            case 87:
              $$[$0 - 1].push($$[$0]);
              break;
            case 90:
              this.$ = [];
              break;
            case 91:
              $$[$0 - 1].push($$[$0]);
              break;
            case 94:
              this.$ = [];
              break;
            case 95:
              $$[$0 - 1].push($$[$0]);
              break;
            case 98:
              this.$ = [$$[$0]];
              break;
            case 99:
              $$[$0 - 1].push($$[$0]);
              break;
            case 100:
              this.$ = [$$[$0]];
              break;
            case 101:
              $$[$0 - 1].push($$[$0]);
              break;
          }
        },
        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 15: [2, 48], 17: 39, 18: [2, 48] }, { 20: 41, 56: 40, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 44, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 45, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 41, 56: 48, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 49, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 50] }, { 72: [1, 35], 86: 51 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 52, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 53, 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 54, 47: [2, 54] }, { 28: 59, 43: 60, 44: [1, 58], 47: [2, 56] }, { 13: 62, 15: [1, 20], 18: [1, 61] }, { 33: [2, 86], 57: 63, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 64, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 65, 47: [1, 66] }, { 30: 67, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 68, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 69, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 70, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 74, 33: [2, 80], 50: 71, 63: 72, 64: 75, 65: [1, 43], 69: 73, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 79] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 50] }, { 20: 74, 53: 80, 54: [2, 84], 63: 81, 64: 75, 65: [1, 43], 69: 82, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 83, 47: [1, 66] }, { 47: [2, 55] }, { 4: 84, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 85, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 86, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 87, 47: [1, 66] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 74, 33: [2, 88], 58: 88, 63: 89, 64: 75, 65: [1, 43], 69: 90, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 91, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 92, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 31: 93, 33: [2, 60], 63: 94, 64: 75, 65: [1, 43], 69: 95, 70: 76, 71: 77, 72: [1, 78], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 66], 36: 96, 63: 97, 64: 75, 65: [1, 43], 69: 98, 70: 76, 71: 77, 72: [1, 78], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 22: 99, 23: [2, 52], 63: 100, 64: 75, 65: [1, 43], 69: 101, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 92], 62: 102, 63: 103, 64: 75, 65: [1, 43], 69: 104, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 105] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 106, 72: [1, 107], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 108], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 109] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 111, 46: 110, 47: [2, 76] }, { 33: [2, 70], 40: 112, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 113] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 74, 63: 115, 64: 75, 65: [1, 43], 67: 114, 68: [2, 96], 69: 116, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 117] }, { 32: 118, 33: [2, 62], 74: 119, 75: [1, 120] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 121, 74: 122, 75: [1, 120] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 123] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 124] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 108] }, { 20: 74, 63: 125, 64: 75, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 74, 33: [2, 72], 41: 126, 63: 127, 64: 75, 65: [1, 43], 69: 128, 70: 76, 71: 77, 72: [1, 78], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 129] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 130] }, { 33: [2, 63] }, { 72: [1, 132], 76: 131 }, { 33: [1, 133] }, { 33: [2, 69] }, { 15: [2, 12], 18: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 134, 74: 135, 75: [1, 120] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 137], 77: [1, 136] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 138] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
        defaultActions: { 4: [2, 1], 54: [2, 55], 56: [2, 20], 60: [2, 57], 73: [2, 81], 82: [2, 85], 86: [2, 18], 90: [2, 89], 101: [2, 53], 104: [2, 93], 110: [2, 19], 111: [2, 77], 116: [2, 97], 119: [2, 63], 122: [2, 69], 135: [2, 75], 136: [2, 32] },
        parseError: function parseError(str, hash) {
          throw new Error(str);
        },
        parse: function parse2(input) {
          var self2 = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
          this.lexer.setInput(input);
          this.lexer.yy = this.yy;
          this.yy.lexer = this.lexer;
          this.yy.parser = this;
          if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
          var yyloc = this.lexer.yylloc;
          lstack.push(yyloc);
          var ranges = this.lexer.options && this.lexer.options.ranges;
          if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
          function popStack(n2) {
            stack.length = stack.length - 2 * n2;
            vstack.length = vstack.length - n2;
            lstack.length = lstack.length - n2;
          }
          function lex() {
            var token;
            token = self2.lexer.lex() || 1;
            if (typeof token !== "number") {
              token = self2.symbols_[token] || token;
            }
            return token;
          }
          var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
          while (true) {
            state = stack[stack.length - 1];
            if (this.defaultActions[state]) {
              action = this.defaultActions[state];
            } else {
              if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
              }
              action = table[state] && table[state][symbol];
            }
            if (typeof action === "undefined" || !action.length || !action[0]) {
              var errStr = "";
              if (!recovering) {
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                  expected.push("'" + this.terminals_[p] + "'");
                }
                if (this.lexer.showPosition) {
                  errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                  errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected });
              }
            }
            if (action[0] instanceof Array && action.length > 1) {
              throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
            }
            switch (action[0]) {
              case 1:
                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]);
                symbol = null;
                if (!preErrorSymbol) {
                  yyleng = this.lexer.yyleng;
                  yytext = this.lexer.yytext;
                  yylineno = this.lexer.yylineno;
                  yyloc = this.lexer.yylloc;
                  if (recovering > 0) recovering--;
                } else {
                  symbol = preErrorSymbol;
                  preErrorSymbol = null;
                }
                break;
              case 2:
                len = this.productions_[action[1]][1];
                yyval.$ = vstack[vstack.length - len];
                yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                }
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                if (typeof r !== "undefined") {
                  return r;
                }
                if (len) {
                  stack = stack.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
                }
                stack.push(this.productions_[action[1]][0]);
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                break;
              case 3:
                return true;
            }
          }
          return true;
        }
      };
      var lexer = function() {
        var lexer2 = {
          EOF: 1,
          parseError: function parseError(str, hash) {
            if (this.yy.parser) {
              this.yy.parser.parseError(str, hash);
            } else {
              throw new Error(str);
            }
          },
          setInput: function setInput(input) {
            this._input = input;
            this._more = this._less = this.done = false;
            this.yylineno = this.yyleng = 0;
            this.yytext = this.matched = this.match = "";
            this.conditionStack = ["INITIAL"];
            this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
            if (this.options.ranges) this.yylloc.range = [0, 0];
            this.offset = 0;
            return this;
          },
          input: function input() {
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            var lines = ch.match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
            } else {
              this.yylloc.last_column++;
            }
            if (this.options.ranges) this.yylloc.range[1]++;
            this._input = this._input.slice(1);
            return ch;
          },
          unput: function unput(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);
            if (lines.length - 1) this.yylineno -= lines.length - 1;
            var r = this.yylloc.range;
            this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
            };
            if (this.options.ranges) {
              this.yylloc.range = [r[0], r[0] + this.yyleng - len];
            }
            return this;
          },
          more: function more() {
            this._more = true;
            return this;
          },
          less: function less(n2) {
            this.unput(this.match.slice(n2));
          },
          pastInput: function pastInput() {
            var past = this.matched.substr(0, this.matched.length - this.match.length);
            return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
          },
          upcomingInput: function upcomingInput() {
            var next = this.match;
            if (next.length < 20) {
              next += this._input.substr(0, 20 - next.length);
            }
            return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
          },
          showPosition: function showPosition() {
            var pre = this.pastInput();
            var c = new Array(pre.length + 1).join("-");
            return pre + this.upcomingInput() + "\n" + c + "^";
          },
          next: function next() {
            if (this.done) {
              return this.EOF;
            }
            if (!this._input) this.done = true;
            var token, match2, tempMatch, index, col, lines;
            if (!this._more) {
              this.yytext = "";
              this.match = "";
            }
            var rules = this._currentRules();
            for (var i = 0; i < rules.length; i++) {
              tempMatch = this._input.match(this.rules[rules[i]]);
              if (tempMatch && (!match2 || tempMatch[0].length > match2[0].length)) {
                match2 = tempMatch;
                index = i;
                if (!this.options.flex) break;
              }
            }
            if (match2) {
              lines = match2[0].match(/(?:\r\n?|\n).*/g);
              if (lines) this.yylineno += lines.length;
              this.yylloc = {
                first_line: this.yylloc.last_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.last_column,
                last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match2[0].length
              };
              this.yytext += match2[0];
              this.match += match2[0];
              this.matches = match2;
              this.yyleng = this.yytext.length;
              if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
              }
              this._more = false;
              this._input = this._input.slice(match2[0].length);
              this.matched += match2[0];
              token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
              if (this.done && this._input) this.done = false;
              if (token) return token;
              else return;
            }
            if (this._input === "") {
              return this.EOF;
            } else {
              return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), { text: "", token: null, line: this.yylineno });
            }
          },
          lex: function lex() {
            var r = this.next();
            if (typeof r !== "undefined") {
              return r;
            } else {
              return this.lex();
            }
          },
          begin: function begin(condition) {
            this.conditionStack.push(condition);
          },
          popState: function popState() {
            return this.conditionStack.pop();
          },
          _currentRules: function _currentRules() {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          },
          topState: function topState() {
            return this.conditionStack[this.conditionStack.length - 2];
          },
          pushState: function begin(condition) {
            this.begin(condition);
          }
        };
        lexer2.options = {};
        lexer2.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
          function strip(start, end) {
            return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);
          }
          var YYSTATE = YY_START;
          switch ($avoiding_name_collisions) {
            case 0:
              if (yy_.yytext.slice(-2) === "\\\\") {
                strip(0, 1);
                this.begin("mu");
              } else if (yy_.yytext.slice(-1) === "\\") {
                strip(0, 1);
                this.begin("emu");
              } else {
                this.begin("mu");
              }
              if (yy_.yytext) return 15;
              break;
            case 1:
              return 15;
              break;
            case 2:
              this.popState();
              return 15;
              break;
            case 3:
              this.begin("raw");
              return 15;
              break;
            case 4:
              this.popState();
              if (this.conditionStack[this.conditionStack.length - 1] === "raw") {
                return 15;
              } else {
                strip(5, 9);
                return "END_RAW_BLOCK";
              }
              break;
            case 5:
              return 15;
              break;
            case 6:
              this.popState();
              return 14;
              break;
            case 7:
              return 65;
              break;
            case 8:
              return 68;
              break;
            case 9:
              return 19;
              break;
            case 10:
              this.popState();
              this.begin("raw");
              return 23;
              break;
            case 11:
              return 55;
              break;
            case 12:
              return 60;
              break;
            case 13:
              return 29;
              break;
            case 14:
              return 47;
              break;
            case 15:
              this.popState();
              return 44;
              break;
            case 16:
              this.popState();
              return 44;
              break;
            case 17:
              return 34;
              break;
            case 18:
              return 39;
              break;
            case 19:
              return 51;
              break;
            case 20:
              return 48;
              break;
            case 21:
              this.unput(yy_.yytext);
              this.popState();
              this.begin("com");
              break;
            case 22:
              this.popState();
              return 14;
              break;
            case 23:
              return 48;
              break;
            case 24:
              return 73;
              break;
            case 25:
              return 72;
              break;
            case 26:
              return 72;
              break;
            case 27:
              return 87;
              break;
            case 28:
              break;
            case 29:
              this.popState();
              return 54;
              break;
            case 30:
              this.popState();
              return 33;
              break;
            case 31:
              yy_.yytext = strip(1, 2).replace(/\\"/g, '"');
              return 80;
              break;
            case 32:
              yy_.yytext = strip(1, 2).replace(/\\'/g, "'");
              return 80;
              break;
            case 33:
              return 85;
              break;
            case 34:
              return 82;
              break;
            case 35:
              return 82;
              break;
            case 36:
              return 83;
              break;
            case 37:
              return 84;
              break;
            case 38:
              return 81;
              break;
            case 39:
              return 75;
              break;
            case 40:
              return 77;
              break;
            case 41:
              return 72;
              break;
            case 42:
              yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, "$1");
              return 72;
              break;
            case 43:
              return "INVALID";
              break;
            case 44:
              return 5;
              break;
          }
        };
        lexer2.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]+?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
        lexer2.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
        return lexer2;
      }();
      parser.lexer = lexer;
      function Parser2() {
        this.yy = {};
      }
      Parser2.prototype = parser;
      parser.Parser = Parser2;
      return new Parser2();
    }();
    exports["default"] = handlebars;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js
var require_visitor = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    function Visitor() {
      this.parents = [];
    }
    Visitor.prototype = {
      constructor: Visitor,
      mutating: false,
      // Visits a given value. If mutating, will replace the value if necessary.
      acceptKey: function acceptKey(node, name) {
        var value = this.accept(node[name]);
        if (this.mutating) {
          if (value && !Visitor.prototype[value.type]) {
            throw new _exception2["default"]('Unexpected node type "' + value.type + '" found when accepting ' + name + " on " + node.type);
          }
          node[name] = value;
        }
      },
      // Performs an accept operation with added sanity check to ensure
      // required keys are not removed.
      acceptRequired: function acceptRequired(node, name) {
        this.acceptKey(node, name);
        if (!node[name]) {
          throw new _exception2["default"](node.type + " requires " + name);
        }
      },
      // Traverses a given array. If mutating, empty respnses will be removed
      // for child elements.
      acceptArray: function acceptArray(array) {
        for (var i = 0, l2 = array.length; i < l2; i++) {
          this.acceptKey(array, i);
          if (!array[i]) {
            array.splice(i, 1);
            i--;
            l2--;
          }
        }
      },
      accept: function accept(object) {
        if (!object) {
          return;
        }
        if (!this[object.type]) {
          throw new _exception2["default"]("Unknown type: " + object.type, object);
        }
        if (this.current) {
          this.parents.unshift(this.current);
        }
        this.current = object;
        var ret = this[object.type](object);
        this.current = this.parents.shift();
        if (!this.mutating || ret) {
          return ret;
        } else if (ret !== false) {
          return object;
        }
      },
      Program: function Program(program) {
        this.acceptArray(program.body);
      },
      MustacheStatement: visitSubExpression,
      Decorator: visitSubExpression,
      BlockStatement: visitBlock,
      DecoratorBlock: visitBlock,
      PartialStatement: visitPartial,
      PartialBlockStatement: function PartialBlockStatement(partial) {
        visitPartial.call(this, partial);
        this.acceptKey(partial, "program");
      },
      ContentStatement: function ContentStatement() {
      },
      CommentStatement: function CommentStatement() {
      },
      SubExpression: visitSubExpression,
      PathExpression: function PathExpression() {
      },
      StringLiteral: function StringLiteral() {
      },
      NumberLiteral: function NumberLiteral() {
      },
      BooleanLiteral: function BooleanLiteral() {
      },
      UndefinedLiteral: function UndefinedLiteral() {
      },
      NullLiteral: function NullLiteral() {
      },
      Hash: function Hash(hash) {
        this.acceptArray(hash.pairs);
      },
      HashPair: function HashPair(pair) {
        this.acceptRequired(pair, "value");
      }
    };
    function visitSubExpression(mustache) {
      this.acceptRequired(mustache, "path");
      this.acceptArray(mustache.params);
      this.acceptKey(mustache, "hash");
    }
    function visitBlock(block) {
      visitSubExpression.call(this, block);
      this.acceptKey(block, "program");
      this.acceptKey(block, "inverse");
    }
    function visitPartial(partial) {
      this.acceptRequired(partial, "name");
      this.acceptArray(partial.params);
      this.acceptKey(partial, "hash");
    }
    exports["default"] = Visitor;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js
var require_whitespace_control = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _visitor = require_visitor();
    var _visitor2 = _interopRequireDefault(_visitor);
    function WhitespaceControl() {
      var options = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];
      this.options = options;
    }
    WhitespaceControl.prototype = new _visitor2["default"]();
    WhitespaceControl.prototype.Program = function(program) {
      var doStandalone = !this.options.ignoreStandalone;
      var isRoot = !this.isRootSeen;
      this.isRootSeen = true;
      var body = program.body;
      for (var i = 0, l2 = body.length; i < l2; i++) {
        var current = body[i], strip = this.accept(current);
        if (!strip) {
          continue;
        }
        var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot), _isNextWhitespace = isNextWhitespace(body, i, isRoot), openStandalone = strip.openStandalone && _isPrevWhitespace, closeStandalone = strip.closeStandalone && _isNextWhitespace, inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
        if (strip.close) {
          omitRight(body, i, true);
        }
        if (strip.open) {
          omitLeft(body, i, true);
        }
        if (doStandalone && inlineStandalone) {
          omitRight(body, i);
          if (omitLeft(body, i)) {
            if (current.type === "PartialStatement") {
              current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
            }
          }
        }
        if (doStandalone && openStandalone) {
          omitRight((current.program || current.inverse).body);
          omitLeft(body, i);
        }
        if (doStandalone && closeStandalone) {
          omitRight(body, i);
          omitLeft((current.inverse || current.program).body);
        }
      }
      return program;
    };
    WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(block) {
      this.accept(block.program);
      this.accept(block.inverse);
      var program = block.program || block.inverse, inverse = block.program && block.inverse, firstInverse = inverse, lastInverse = inverse;
      if (inverse && inverse.chained) {
        firstInverse = inverse.body[0].program;
        while (lastInverse.chained) {
          lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
        }
      }
      var strip = {
        open: block.openStrip.open,
        close: block.closeStrip.close,
        // Determine the standalone candiacy. Basically flag our content as being possibly standalone
        // so our parent can determine if we actually are standalone
        openStandalone: isNextWhitespace(program.body),
        closeStandalone: isPrevWhitespace((firstInverse || program).body)
      };
      if (block.openStrip.close) {
        omitRight(program.body, null, true);
      }
      if (inverse) {
        var inverseStrip = block.inverseStrip;
        if (inverseStrip.open) {
          omitLeft(program.body, null, true);
        }
        if (inverseStrip.close) {
          omitRight(firstInverse.body, null, true);
        }
        if (block.closeStrip.open) {
          omitLeft(lastInverse.body, null, true);
        }
        if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
          omitLeft(program.body);
          omitRight(firstInverse.body);
        }
      } else if (block.closeStrip.open) {
        omitLeft(program.body, null, true);
      }
      return strip;
    };
    WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(mustache) {
      return mustache.strip;
    };
    WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(node) {
      var strip = node.strip || {};
      return {
        inlineStandalone: true,
        open: strip.open,
        close: strip.close
      };
    };
    function isPrevWhitespace(body, i, isRoot) {
      if (i === void 0) {
        i = body.length;
      }
      var prev = body[i - 1], sibling = body[i - 2];
      if (!prev) {
        return isRoot;
      }
      if (prev.type === "ContentStatement") {
        return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
      }
    }
    function isNextWhitespace(body, i, isRoot) {
      if (i === void 0) {
        i = -1;
      }
      var next = body[i + 1], sibling = body[i + 2];
      if (!next) {
        return isRoot;
      }
      if (next.type === "ContentStatement") {
        return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
      }
    }
    function omitRight(body, i, multiple) {
      var current = body[i == null ? 0 : i + 1];
      if (!current || current.type !== "ContentStatement" || !multiple && current.rightStripped) {
        return;
      }
      var original = current.value;
      current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, "");
      current.rightStripped = current.value !== original;
    }
    function omitLeft(body, i, multiple) {
      var current = body[i == null ? body.length - 1 : i - 1];
      if (!current || current.type !== "ContentStatement" || !multiple && current.leftStripped) {
        return;
      }
      var original = current.value;
      current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, "");
      current.leftStripped = current.value !== original;
      return current.leftStripped;
    }
    exports["default"] = WhitespaceControl;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js
var require_helpers2 = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.SourceLocation = SourceLocation;
    exports.id = id;
    exports.stripFlags = stripFlags;
    exports.stripComment = stripComment;
    exports.preparePath = preparePath;
    exports.prepareMustache = prepareMustache;
    exports.prepareRawBlock = prepareRawBlock;
    exports.prepareBlock = prepareBlock;
    exports.prepareProgram = prepareProgram;
    exports.preparePartialBlock = preparePartialBlock;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    function validateClose(open, close) {
      close = close.path ? close.path.original : close;
      if (open.path.original !== close) {
        var errorNode = { loc: open.path.loc };
        throw new _exception2["default"](open.path.original + " doesn't match " + close, errorNode);
      }
    }
    function SourceLocation(source, locInfo) {
      this.source = source;
      this.start = {
        line: locInfo.first_line,
        column: locInfo.first_column
      };
      this.end = {
        line: locInfo.last_line,
        column: locInfo.last_column
      };
    }
    function id(token) {
      if (/^\[.*\]$/.test(token)) {
        return token.substring(1, token.length - 1);
      } else {
        return token;
      }
    }
    function stripFlags(open, close) {
      return {
        open: open.charAt(2) === "~",
        close: close.charAt(close.length - 3) === "~"
      };
    }
    function stripComment(comment) {
      return comment.replace(/^\{\{~?!-?-?/, "").replace(/-?-?~?\}\}$/, "");
    }
    function preparePath(data, parts, loc) {
      loc = this.locInfo(loc);
      var original = data ? "@" : "", dig = [], depth = 0;
      for (var i = 0, l2 = parts.length; i < l2; i++) {
        var part = parts[i].part, isLiteral = parts[i].original !== part;
        original += (parts[i].separator || "") + part;
        if (!isLiteral && (part === ".." || part === "." || part === "this")) {
          if (dig.length > 0) {
            throw new _exception2["default"]("Invalid path: " + original, { loc });
          } else if (part === "..") {
            depth++;
          }
        } else {
          dig.push(part);
        }
      }
      return {
        type: "PathExpression",
        data,
        depth,
        parts: dig,
        original,
        loc
      };
    }
    function prepareMustache(path, params, hash, open, strip, locInfo) {
      var escapeFlag = open.charAt(3) || open.charAt(2), escaped = escapeFlag !== "{" && escapeFlag !== "&";
      var decorator = /\*/.test(open);
      return {
        type: decorator ? "Decorator" : "MustacheStatement",
        path,
        params,
        hash,
        escaped,
        strip,
        loc: this.locInfo(locInfo)
      };
    }
    function prepareRawBlock(openRawBlock, contents, close, locInfo) {
      validateClose(openRawBlock, close);
      locInfo = this.locInfo(locInfo);
      var program = {
        type: "Program",
        body: contents,
        strip: {},
        loc: locInfo
      };
      return {
        type: "BlockStatement",
        path: openRawBlock.path,
        params: openRawBlock.params,
        hash: openRawBlock.hash,
        program,
        openStrip: {},
        inverseStrip: {},
        closeStrip: {},
        loc: locInfo
      };
    }
    function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
      if (close && close.path) {
        validateClose(openBlock, close);
      }
      var decorator = /\*/.test(openBlock.open);
      program.blockParams = openBlock.blockParams;
      var inverse = void 0, inverseStrip = void 0;
      if (inverseAndProgram) {
        if (decorator) {
          throw new _exception2["default"]("Unexpected inverse block on decorator", inverseAndProgram);
        }
        if (inverseAndProgram.chain) {
          inverseAndProgram.program.body[0].closeStrip = close.strip;
        }
        inverseStrip = inverseAndProgram.strip;
        inverse = inverseAndProgram.program;
      }
      if (inverted) {
        inverted = inverse;
        inverse = program;
        program = inverted;
      }
      return {
        type: decorator ? "DecoratorBlock" : "BlockStatement",
        path: openBlock.path,
        params: openBlock.params,
        hash: openBlock.hash,
        program,
        inverse,
        openStrip: openBlock.strip,
        inverseStrip,
        closeStrip: close && close.strip,
        loc: this.locInfo(locInfo)
      };
    }
    function prepareProgram(statements, loc) {
      if (!loc && statements.length) {
        var firstLoc = statements[0].loc, lastLoc = statements[statements.length - 1].loc;
        if (firstLoc && lastLoc) {
          loc = {
            source: firstLoc.source,
            start: {
              line: firstLoc.start.line,
              column: firstLoc.start.column
            },
            end: {
              line: lastLoc.end.line,
              column: lastLoc.end.column
            }
          };
        }
      }
      return {
        type: "Program",
        body: statements,
        strip: {},
        loc
      };
    }
    function preparePartialBlock(open, program, close, locInfo) {
      validateClose(open, close);
      return {
        type: "PartialBlockStatement",
        name: open.path,
        params: open.params,
        hash: open.hash,
        program,
        openStrip: open.strip,
        closeStrip: close && close.strip,
        loc: this.locInfo(locInfo)
      };
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/base.js
var require_base2 = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/base.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.parseWithoutProcessing = parseWithoutProcessing;
    exports.parse = parse2;
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _parser = require_parser();
    var _parser2 = _interopRequireDefault(_parser);
    var _whitespaceControl = require_whitespace_control();
    var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);
    var _helpers = require_helpers2();
    var Helpers = _interopRequireWildcard(_helpers);
    var _utils = require_utils();
    exports.parser = _parser2["default"];
    var yy = {};
    _utils.extend(yy, Helpers);
    function parseWithoutProcessing(input, options) {
      if (input.type === "Program") {
        return input;
      }
      _parser2["default"].yy = yy;
      yy.locInfo = function(locInfo) {
        return new yy.SourceLocation(options && options.srcName, locInfo);
      };
      var ast = _parser2["default"].parse(input);
      return ast;
    }
    function parse2(input, options) {
      var ast = parseWithoutProcessing(input, options);
      var strip = new _whitespaceControl2["default"](options);
      return strip.accept(ast);
    }
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js
var require_compiler = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Compiler = Compiler;
    exports.precompile = precompile;
    exports.compile = compile;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    var _utils = require_utils();
    var _ast = require_ast();
    var _ast2 = _interopRequireDefault(_ast);
    var slice = [].slice;
    function Compiler() {
    }
    Compiler.prototype = {
      compiler: Compiler,
      equals: function equals(other) {
        var len = this.opcodes.length;
        if (other.opcodes.length !== len) {
          return false;
        }
        for (var i = 0; i < len; i++) {
          var opcode = this.opcodes[i], otherOpcode = other.opcodes[i];
          if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
            return false;
          }
        }
        len = this.children.length;
        for (var i = 0; i < len; i++) {
          if (!this.children[i].equals(other.children[i])) {
            return false;
          }
        }
        return true;
      },
      guid: 0,
      compile: function compile2(program, options) {
        this.sourceNode = [];
        this.opcodes = [];
        this.children = [];
        this.options = options;
        this.stringParams = options.stringParams;
        this.trackIds = options.trackIds;
        options.blockParams = options.blockParams || [];
        options.knownHelpers = _utils.extend(/* @__PURE__ */ Object.create(null), {
          helperMissing: true,
          blockHelperMissing: true,
          each: true,
          "if": true,
          unless: true,
          "with": true,
          log: true,
          lookup: true
        }, options.knownHelpers);
        return this.accept(program);
      },
      compileProgram: function compileProgram(program) {
        var childCompiler = new this.compiler(), result = childCompiler.compile(program, this.options), guid = this.guid++;
        this.usePartial = this.usePartial || result.usePartial;
        this.children[guid] = result;
        this.useDepths = this.useDepths || result.useDepths;
        return guid;
      },
      accept: function accept(node) {
        if (!this[node.type]) {
          throw new _exception2["default"]("Unknown type: " + node.type, node);
        }
        this.sourceNode.unshift(node);
        var ret = this[node.type](node);
        this.sourceNode.shift();
        return ret;
      },
      Program: function Program(program) {
        this.options.blockParams.unshift(program.blockParams);
        var body = program.body, bodyLength = body.length;
        for (var i = 0; i < bodyLength; i++) {
          this.accept(body[i]);
        }
        this.options.blockParams.shift();
        this.isSimple = bodyLength === 1;
        this.blockParams = program.blockParams ? program.blockParams.length : 0;
        return this;
      },
      BlockStatement: function BlockStatement(block) {
        transformLiteralToPath(block);
        var program = block.program, inverse = block.inverse;
        program = program && this.compileProgram(program);
        inverse = inverse && this.compileProgram(inverse);
        var type = this.classifySexpr(block);
        if (type === "helper") {
          this.helperSexpr(block, program, inverse);
        } else if (type === "simple") {
          this.simpleSexpr(block);
          this.opcode("pushProgram", program);
          this.opcode("pushProgram", inverse);
          this.opcode("emptyHash");
          this.opcode("blockValue", block.path.original);
        } else {
          this.ambiguousSexpr(block, program, inverse);
          this.opcode("pushProgram", program);
          this.opcode("pushProgram", inverse);
          this.opcode("emptyHash");
          this.opcode("ambiguousBlockValue");
        }
        this.opcode("append");
      },
      DecoratorBlock: function DecoratorBlock(decorator) {
        var program = decorator.program && this.compileProgram(decorator.program);
        var params = this.setupFullMustacheParams(decorator, program, void 0), path = decorator.path;
        this.useDecorators = true;
        this.opcode("registerDecorator", params.length, path.original);
      },
      PartialStatement: function PartialStatement(partial) {
        this.usePartial = true;
        var program = partial.program;
        if (program) {
          program = this.compileProgram(partial.program);
        }
        var params = partial.params;
        if (params.length > 1) {
          throw new _exception2["default"]("Unsupported number of partial arguments: " + params.length, partial);
        } else if (!params.length) {
          if (this.options.explicitPartialContext) {
            this.opcode("pushLiteral", "undefined");
          } else {
            params.push({ type: "PathExpression", parts: [], depth: 0 });
          }
        }
        var partialName = partial.name.original, isDynamic = partial.name.type === "SubExpression";
        if (isDynamic) {
          this.accept(partial.name);
        }
        this.setupFullMustacheParams(partial, program, void 0, true);
        var indent = partial.indent || "";
        if (this.options.preventIndent && indent) {
          this.opcode("appendContent", indent);
          indent = "";
        }
        this.opcode("invokePartial", isDynamic, partialName, indent);
        this.opcode("append");
      },
      PartialBlockStatement: function PartialBlockStatement(partialBlock) {
        this.PartialStatement(partialBlock);
      },
      MustacheStatement: function MustacheStatement(mustache) {
        this.SubExpression(mustache);
        if (mustache.escaped && !this.options.noEscape) {
          this.opcode("appendEscaped");
        } else {
          this.opcode("append");
        }
      },
      Decorator: function Decorator(decorator) {
        this.DecoratorBlock(decorator);
      },
      ContentStatement: function ContentStatement(content) {
        if (content.value) {
          this.opcode("appendContent", content.value);
        }
      },
      CommentStatement: function CommentStatement() {
      },
      SubExpression: function SubExpression(sexpr) {
        transformLiteralToPath(sexpr);
        var type = this.classifySexpr(sexpr);
        if (type === "simple") {
          this.simpleSexpr(sexpr);
        } else if (type === "helper") {
          this.helperSexpr(sexpr);
        } else {
          this.ambiguousSexpr(sexpr);
        }
      },
      ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
        var path = sexpr.path, name = path.parts[0], isBlock = program != null || inverse != null;
        this.opcode("getContext", path.depth);
        this.opcode("pushProgram", program);
        this.opcode("pushProgram", inverse);
        path.strict = true;
        this.accept(path);
        this.opcode("invokeAmbiguous", name, isBlock);
      },
      simpleSexpr: function simpleSexpr(sexpr) {
        var path = sexpr.path;
        path.strict = true;
        this.accept(path);
        this.opcode("resolvePossibleLambda");
      },
      helperSexpr: function helperSexpr(sexpr, program, inverse) {
        var params = this.setupFullMustacheParams(sexpr, program, inverse), path = sexpr.path, name = path.parts[0];
        if (this.options.knownHelpers[name]) {
          this.opcode("invokeKnownHelper", params.length, name);
        } else if (this.options.knownHelpersOnly) {
          throw new _exception2["default"]("You specified knownHelpersOnly, but used the unknown helper " + name, sexpr);
        } else {
          path.strict = true;
          path.falsy = true;
          this.accept(path);
          this.opcode("invokeHelper", params.length, path.original, _ast2["default"].helpers.simpleId(path));
        }
      },
      PathExpression: function PathExpression(path) {
        this.addDepth(path.depth);
        this.opcode("getContext", path.depth);
        var name = path.parts[0], scoped = _ast2["default"].helpers.scopedId(path), blockParamId = !path.depth && !scoped && this.blockParamIndex(name);
        if (blockParamId) {
          this.opcode("lookupBlockParam", blockParamId, path.parts);
        } else if (!name) {
          this.opcode("pushContext");
        } else if (path.data) {
          this.options.data = true;
          this.opcode("lookupData", path.depth, path.parts, path.strict);
        } else {
          this.opcode("lookupOnContext", path.parts, path.falsy, path.strict, scoped);
        }
      },
      StringLiteral: function StringLiteral(string) {
        this.opcode("pushString", string.value);
      },
      NumberLiteral: function NumberLiteral(number) {
        this.opcode("pushLiteral", number.value);
      },
      BooleanLiteral: function BooleanLiteral(bool) {
        this.opcode("pushLiteral", bool.value);
      },
      UndefinedLiteral: function UndefinedLiteral() {
        this.opcode("pushLiteral", "undefined");
      },
      NullLiteral: function NullLiteral() {
        this.opcode("pushLiteral", "null");
      },
      Hash: function Hash(hash) {
        var pairs = hash.pairs, i = 0, l2 = pairs.length;
        this.opcode("pushHash");
        for (; i < l2; i++) {
          this.pushParam(pairs[i].value);
        }
        while (i--) {
          this.opcode("assignToHash", pairs[i].key);
        }
        this.opcode("popHash");
      },
      // HELPERS
      opcode: function opcode(name) {
        this.opcodes.push({
          opcode: name,
          args: slice.call(arguments, 1),
          loc: this.sourceNode[0].loc
        });
      },
      addDepth: function addDepth(depth) {
        if (!depth) {
          return;
        }
        this.useDepths = true;
      },
      classifySexpr: function classifySexpr(sexpr) {
        var isSimple = _ast2["default"].helpers.simpleId(sexpr.path);
        var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);
        var isHelper = !isBlockParam && _ast2["default"].helpers.helperExpression(sexpr);
        var isEligible = !isBlockParam && (isHelper || isSimple);
        if (isEligible && !isHelper) {
          var _name = sexpr.path.parts[0], options = this.options;
          if (options.knownHelpers[_name]) {
            isHelper = true;
          } else if (options.knownHelpersOnly) {
            isEligible = false;
          }
        }
        if (isHelper) {
          return "helper";
        } else if (isEligible) {
          return "ambiguous";
        } else {
          return "simple";
        }
      },
      pushParams: function pushParams(params) {
        for (var i = 0, l2 = params.length; i < l2; i++) {
          this.pushParam(params[i]);
        }
      },
      pushParam: function pushParam(val) {
        var value = val.value != null ? val.value : val.original || "";
        if (this.stringParams) {
          if (value.replace) {
            value = value.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".");
          }
          if (val.depth) {
            this.addDepth(val.depth);
          }
          this.opcode("getContext", val.depth || 0);
          this.opcode("pushStringParam", value, val.type);
          if (val.type === "SubExpression") {
            this.accept(val);
          }
        } else {
          if (this.trackIds) {
            var blockParamIndex = void 0;
            if (val.parts && !_ast2["default"].helpers.scopedId(val) && !val.depth) {
              blockParamIndex = this.blockParamIndex(val.parts[0]);
            }
            if (blockParamIndex) {
              var blockParamChild = val.parts.slice(1).join(".");
              this.opcode("pushId", "BlockParam", blockParamIndex, blockParamChild);
            } else {
              value = val.original || value;
              if (value.replace) {
                value = value.replace(/^this(?:\.|$)/, "").replace(/^\.\//, "").replace(/^\.$/, "");
              }
              this.opcode("pushId", val.type, value);
            }
          }
          this.accept(val);
        }
      },
      setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
        var params = sexpr.params;
        this.pushParams(params);
        this.opcode("pushProgram", program);
        this.opcode("pushProgram", inverse);
        if (sexpr.hash) {
          this.accept(sexpr.hash);
        } else {
          this.opcode("emptyHash", omitEmpty);
        }
        return params;
      },
      blockParamIndex: function blockParamIndex(name) {
        for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
          var blockParams = this.options.blockParams[depth], param = blockParams && _utils.indexOf(blockParams, name);
          if (blockParams && param >= 0) {
            return [depth, param];
          }
        }
      }
    };
    function precompile(input, options, env) {
      if (input == null || typeof input !== "string" && input.type !== "Program") {
        throw new _exception2["default"]("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
      }
      options = options || {};
      if (!("data" in options)) {
        options.data = true;
      }
      if (options.compat) {
        options.useDepths = true;
      }
      var ast = env.parse(input, options), environment = new env.Compiler().compile(ast, options);
      return new env.JavaScriptCompiler().compile(environment, options);
    }
    function compile(input, options, env) {
      if (options === void 0) options = {};
      if (input == null || typeof input !== "string" && input.type !== "Program") {
        throw new _exception2["default"]("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
      }
      options = _utils.extend({}, options);
      if (!("data" in options)) {
        options.data = true;
      }
      if (options.compat) {
        options.useDepths = true;
      }
      var compiled = void 0;
      function compileInput() {
        var ast = env.parse(input, options), environment = new env.Compiler().compile(ast, options), templateSpec = new env.JavaScriptCompiler().compile(environment, options, void 0, true);
        return env.template(templateSpec);
      }
      function ret(context, execOptions) {
        if (!compiled) {
          compiled = compileInput();
        }
        return compiled.call(this, context, execOptions);
      }
      ret._setup = function(setupOptions) {
        if (!compiled) {
          compiled = compileInput();
        }
        return compiled._setup(setupOptions);
      };
      ret._child = function(i, data, blockParams, depths) {
        if (!compiled) {
          compiled = compileInput();
        }
        return compiled._child(i, data, blockParams, depths);
      };
      return ret;
    }
    function argEquals(a, b) {
      if (a === b) {
        return true;
      }
      if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
        for (var i = 0; i < a.length; i++) {
          if (!argEquals(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
    }
    function transformLiteralToPath(sexpr) {
      if (!sexpr.path.parts) {
        var literal = sexpr.path;
        sexpr.path = {
          type: "PathExpression",
          data: false,
          depth: 0,
          parts: [literal.original + ""],
          original: literal.original + "",
          loc: literal.loc
        };
      }
    }
  }
});

// node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/source-map/lib/base64.js"(exports) {
    var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    exports.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
});

// node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  "node_modules/source-map/lib/base64-vlq.js"(exports) {
    var base64 = require_base64();
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports.encode = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };
  }
});

// node_modules/source-map/lib/util.js
var require_util = __commonJS({
  "node_modules/source-map/lib/util.js"(exports) {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match2 = aUrl.match(urlRegexp);
      if (!match2) {
        return null;
      }
      return {
        scheme: match2[1],
        auth: match2[2],
        host: match2[3],
        port: match2[4],
        path: match2[5]
      };
    }
    exports.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = "";
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ":";
      }
      url += "//";
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + "@";
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports.urlGenerate = urlGenerate;
    function normalize(aPath) {
      var path = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path = url.path;
      }
      var isAbsolute = exports.isAbsolute(path);
      var parts = path.split(/\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === ".") {
          parts.splice(i, 1);
        } else if (part === "..") {
          up++;
        } else if (up > 0) {
          if (part === "") {
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path = parts.join("/");
      if (path === "") {
        path = isAbsolute ? "/" : ".";
      }
      if (url) {
        url.path = path;
        return urlGenerate(url);
      }
      return path;
    }
    exports.normalize = normalize;
    function join(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || "/";
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports.join = join;
    exports.isAbsolute = function(aPath) {
      return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    };
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, "");
      var level = 0;
      while (aPath.indexOf(aRoot + "/") !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;
    var supportsNullProto = function() {
      var obj = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in obj);
    }();
    function identity(s2) {
      return s2;
    }
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return "$" + aStr;
      }
      return aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s2) {
      if (!s2) {
        return false;
      }
      var length = s2.length;
      if (length < 9) {
        return false;
      }
      if (s2.charCodeAt(length - 1) !== 95 || s2.charCodeAt(length - 2) !== 95 || s2.charCodeAt(length - 3) !== 111 || s2.charCodeAt(length - 4) !== 116 || s2.charCodeAt(length - 5) !== 111 || s2.charCodeAt(length - 6) !== 114 || s2.charCodeAt(length - 7) !== 112 || s2.charCodeAt(length - 8) !== 95 || s2.charCodeAt(length - 9) !== 95) {
        return false;
      }
      for (var i = length - 10; i >= 0; i--) {
        if (s2.charCodeAt(i) !== 36) {
          return false;
        }
      }
      return true;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 === null) {
        return 1;
      }
      if (aStr2 === null) {
        return -1;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    }
    exports.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || "";
      if (sourceRoot) {
        if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
          sourceRoot += "/";
        }
        sourceURL = sourceRoot + sourceURL;
      }
      if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          var index = parsed.path.lastIndexOf("/");
          if (index >= 0) {
            parsed.path = parsed.path.substring(0, index + 1);
          }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
      }
      return normalize(sourceURL);
    }
    exports.computeSourceURL = computeSourceURL;
  }
});

// node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  "node_modules/source-map/lib/array-set.js"(exports) {
    var util = require_util();
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";
    function ArraySet() {
      this._array = [];
      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };
    exports.ArraySet = ArraySet;
  }
});

// node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  "node_modules/source-map/lib/mapping-list.js"(exports) {
    var util = require_util();
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
      this._array = [];
      this._sorted = true;
      this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    exports.MappingList = MappingList;
  }
});

// node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  "node_modules/source-map/lib/source-map-generator.js"(exports) {
    var base64VLQ = require_base64_vlq();
    var util = require_util();
    var ArraySet = require_array_set().ArraySet;
    var MappingList = require_mapping_list().MappingList;
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util.getArg(aArgs, "file", null);
      this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
      this._skipValidation = util.getArg(aArgs, "skipValidation", false);
      this._sources = new ArraySet();
      this._names = new ArraySet();
      this._mappings = new MappingList();
      this._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, "generated");
      var original = util.getArg(aArgs, "original", null);
      var source = util.getArg(aArgs, "source", null);
      var name = util.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet();
      var newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error(
          "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
        );
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = "";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result += next;
      }
      return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }
      return map;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };
    exports.SourceMapGenerator = SourceMapGenerator;
  }
});

// node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({
  "node_modules/source-map/lib/binary-search.js"(exports) {
    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        return mid;
      } else if (cmp > 0) {
        if (aHigh - mid > 1) {
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        if (mid - aLow > 1) {
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }
    exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index = recursiveSearch(
        -1,
        aHaystack.length,
        aNeedle,
        aHaystack,
        aCompare,
        aBias || exports.GREATEST_LOWER_BOUND
      );
      if (index < 0) {
        return -1;
      }
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }
      return index;
    };
  }
});

// node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({
  "node_modules/source-map/lib/quick-sort.js"(exports) {
    function swap(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y];
      ary[y] = temp;
    }
    function randomIntInRange(low, high) {
      return Math.round(low + Math.random() * (high - low));
    }
    function doQuickSort(ary, comparator, p, r) {
      if (p < r) {
        var pivotIndex = randomIntInRange(p, r);
        var i = p - 1;
        swap(ary, pivotIndex, r);
        var pivot = ary[r];
        for (var j = p; j < r; j++) {
          if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap(ary, i, j);
          }
        }
        swap(ary, i + 1, j);
        var q = i + 1;
        doQuickSort(ary, comparator, p, q - 1);
        doQuickSort(ary, comparator, q + 1, r);
      }
    }
    exports.quickSort = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
  }
});

// node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({
  "node_modules/source-map/lib/source-map-consumer.js"(exports) {
    var util = require_util();
    var binarySearch = require_binary_search();
    var ArraySet = require_array_set().ArraySet;
    var base64VLQ = require_base64_vlq();
    var quickSort = require_quick_sort().quickSort;
    function SourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
    }
    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };
    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, "line");
      var needle = {
        source: util.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util.getArg(aArgs, "column", 0)
      };
      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }
      var mappings = [];
      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        binarySearch.LEAST_UPPER_BOUND
      );
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    exports.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      var version = util.getArg(sourceMap, "version");
      var sources = util.getArg(sourceMap, "sources");
      var names = util.getArg(sourceMap, "names", []);
      var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
      var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
      var mappings = util.getArg(sourceMap, "mappings");
      var file = util.getArg(sourceMap, "file", null);
      if (version != this._version) {
        throw new Error("Unsupported version: " + version);
      }
      if (sourceRoot) {
        sourceRoot = util.normalize(sourceRoot);
      }
      sources = sources.map(String).map(util.normalize).map(function(source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
      });
      this._names = ArraySet.fromArray(names.map(String), true);
      this._sources = ArraySet.fromArray(sources, true);
      this._absoluteSources = this._sources.toArray().map(function(s2) {
        return util.computeSourceURL(sourceRoot, s2, aSourceMapURL);
      });
      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this._sourceMapURL = aSourceMapURL;
      this.file = file;
    }
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }
      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }
      var i;
      for (i = 0; i < this._absoluteSources.length; ++i) {
        if (this._absoluteSources[i] == aSource) {
          return i;
        }
      }
      return -1;
    };
    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);
      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(
        smc._sources.toArray(),
        smc.sourceRoot
      );
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function(s2) {
        return util.computeSourceURL(smc.sourceRoot, s2, aSourceMapURL);
      });
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort(smc.__originalMappings, util.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
      get: function() {
        return this._absoluteSources.slice();
      }
    });
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }
    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;
      while (index < length) {
        if (aStr.charAt(index) === ";") {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ",") {
          index++;
        } else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);
          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error("Found a source, but no line and column");
            }
            if (segment.length === 3) {
              throw new Error("Found a source and line, but no column");
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === "number") {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      }
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      };
      var index = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util.compareByGeneratedPositionsDeflated,
        util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
      );
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, "source", null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name = util.getArg(mapping, "name", null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source,
            line: util.getArg(mapping, "originalLine", null),
            column: util.getArg(mapping, "originalColumn", null),
            name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }
      var url;
      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, "source");
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      var needle = {
        source,
        originalLine: util.getArg(aArgs, "line"),
        originalColumn: util.getArg(aArgs, "column")
      };
      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
      );
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      var version = util.getArg(sourceMap, "version");
      var sections = util.getArg(sourceMap, "sections");
      if (version != this._version) {
        throw new Error("Unsupported version: " + version);
      }
      this._sources = new ArraySet();
      this._names = new ArraySet();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s2) {
        if (s2.url) {
          throw new Error("Support for url field in sections not implemented.");
        }
        var offset2 = util.getArg(s2, "offset");
        var offsetLine = util.getArg(offset2, "line");
        var offsetColumn = util.getArg(offset2, "column");
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
          throw new Error("Section offsets must be ordered and non-overlapping.");
        }
        lastOffset = offset2;
        return {
          generatedOffset: {
            // The offset fields are 0-based, but we use 1-based indices when
            // encoding/decoding from VLQ.
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util.getArg(s2, "map"), aSourceMapURL)
        };
      });
    }
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
      get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      };
      var sectionIndex = binarySearch.search(
        needle,
        this._sections,
        function(needle2, section2) {
          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }
          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
        }
      );
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function(s2) {
        return s2.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name = null;
          if (mapping.name) {
            name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);
          }
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === "number") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };
    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  }
});

// node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({
  "node_modules/source-map/lib/source-node.js"(exports) {
    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    var util = require_util();
    var REGEX_NEWLINE = /(\r?\n)/;
    var NEWLINE_CODE = 10;
    var isSourceNode = "$$$isSourceNode$$$";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode] = true;
      if (aChunks != null) this.add(aChunks);
    }
    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node = new SourceNode();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      };
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });
      return node;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node.add(code);
        } else {
          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
          node.add(new SourceNode(
            mapping.originalLine,
            mapping.originalColumn,
            source,
            code,
            mapping.name
          ));
        }
      }
    };
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      }
      return this;
    };
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      }
      return this;
    };
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== "") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode.prototype.join = function SourceNode_join(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === "string") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push("".replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode.prototype.toString = function SourceNode_toString() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map = new SourceMapGenerator(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length = chunk.length; idx < length; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map };
    };
    exports.SourceNode = SourceNode;
  }
});

// node_modules/source-map/source-map.js
var require_source_map = __commonJS({
  "node_modules/source-map/source-map.js"(exports) {
    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
    exports.SourceNode = require_source_node().SourceNode;
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js
var require_code_gen = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    var _utils = require_utils();
    var SourceNode = void 0;
    try {
      if (typeof define !== "function" || !define.amd) {
        SourceMap = require_source_map();
        SourceNode = SourceMap.SourceNode;
      }
    } catch (err) {
    }
    var SourceMap;
    if (!SourceNode) {
      SourceNode = function(line, column, srcFile, chunks) {
        this.src = "";
        if (chunks) {
          this.add(chunks);
        }
      };
      SourceNode.prototype = {
        add: function add(chunks) {
          if (_utils.isArray(chunks)) {
            chunks = chunks.join("");
          }
          this.src += chunks;
        },
        prepend: function prepend(chunks) {
          if (_utils.isArray(chunks)) {
            chunks = chunks.join("");
          }
          this.src = chunks + this.src;
        },
        toStringWithSourceMap: function toStringWithSourceMap() {
          return { code: this.toString() };
        },
        toString: function toString() {
          return this.src;
        }
      };
    }
    function castChunk(chunk, codeGen, loc) {
      if (_utils.isArray(chunk)) {
        var ret = [];
        for (var i = 0, len = chunk.length; i < len; i++) {
          ret.push(codeGen.wrap(chunk[i], loc));
        }
        return ret;
      } else if (typeof chunk === "boolean" || typeof chunk === "number") {
        return chunk + "";
      }
      return chunk;
    }
    function CodeGen(srcFile) {
      this.srcFile = srcFile;
      this.source = [];
    }
    CodeGen.prototype = {
      isEmpty: function isEmpty() {
        return !this.source.length;
      },
      prepend: function prepend(source, loc) {
        this.source.unshift(this.wrap(source, loc));
      },
      push: function push(source, loc) {
        this.source.push(this.wrap(source, loc));
      },
      merge: function merge() {
        var source = this.empty();
        this.each(function(line) {
          source.add(["  ", line, "\n"]);
        });
        return source;
      },
      each: function each(iter2) {
        for (var i = 0, len = this.source.length; i < len; i++) {
          iter2(this.source[i]);
        }
      },
      empty: function empty2() {
        var loc = this.currentLocation || { start: {} };
        return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
      },
      wrap: function wrap(chunk) {
        var loc = arguments.length <= 1 || arguments[1] === void 0 ? this.currentLocation || { start: {} } : arguments[1];
        if (chunk instanceof SourceNode) {
          return chunk;
        }
        chunk = castChunk(chunk, this, loc);
        return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
      },
      functionCall: function functionCall(fn, type, params) {
        params = this.generateList(params);
        return this.wrap([fn, type ? "." + type + "(" : "(", params, ")"]);
      },
      quotedString: function quotedString(str) {
        return '"' + (str + "").replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
      },
      objectLiteral: function objectLiteral(obj) {
        var _this = this;
        var pairs = [];
        Object.keys(obj).forEach(function(key) {
          var value = castChunk(obj[key], _this);
          if (value !== "undefined") {
            pairs.push([_this.quotedString(key), ":", value]);
          }
        });
        var ret = this.generateList(pairs);
        ret.prepend("{");
        ret.add("}");
        return ret;
      },
      generateList: function generateList(entries) {
        var ret = this.empty();
        for (var i = 0, len = entries.length; i < len; i++) {
          if (i) {
            ret.add(",");
          }
          ret.add(castChunk(entries[i], this));
        }
        return ret;
      },
      generateArray: function generateArray(entries) {
        var ret = this.generateList(entries);
        ret.prepend("[");
        ret.add("]");
        return ret;
      }
    };
    exports["default"] = CodeGen;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js
var require_javascript_compiler = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _base = require_base();
    var _exception = require_exception();
    var _exception2 = _interopRequireDefault(_exception);
    var _utils = require_utils();
    var _codeGen = require_code_gen();
    var _codeGen2 = _interopRequireDefault(_codeGen);
    function Literal(value) {
      this.value = value;
    }
    function JavaScriptCompiler() {
    }
    JavaScriptCompiler.prototype = {
      // PUBLIC API: You can override these methods in a subclass to provide
      // alternative compiled forms for name lookup and buffering semantics
      nameLookup: function nameLookup(parent, name) {
        return this.internalNameLookup(parent, name);
      },
      depthedLookup: function depthedLookup(name) {
        return [this.aliasable("container.lookup"), "(depths, ", JSON.stringify(name), ")"];
      },
      compilerInfo: function compilerInfo() {
        var revision = _base.COMPILER_REVISION, versions = _base.REVISION_CHANGES[revision];
        return [revision, versions];
      },
      appendToBuffer: function appendToBuffer(source, location, explicit) {
        if (!_utils.isArray(source)) {
          source = [source];
        }
        source = this.source.wrap(source, location);
        if (this.environment.isSimple) {
          return ["return ", source, ";"];
        } else if (explicit) {
          return ["buffer += ", source, ";"];
        } else {
          source.appendToBuffer = true;
          return source;
        }
      },
      initializeBuffer: function initializeBuffer() {
        return this.quotedString("");
      },
      // END PUBLIC API
      internalNameLookup: function internalNameLookup(parent, name) {
        this.lookupPropertyFunctionIsUsed = true;
        return ["lookupProperty(", parent, ",", JSON.stringify(name), ")"];
      },
      lookupPropertyFunctionIsUsed: false,
      compile: function compile(environment, options, context, asObject) {
        this.environment = environment;
        this.options = options;
        this.stringParams = this.options.stringParams;
        this.trackIds = this.options.trackIds;
        this.precompile = !asObject;
        this.name = this.environment.name;
        this.isChild = !!context;
        this.context = context || {
          decorators: [],
          programs: [],
          environments: []
        };
        this.preamble();
        this.stackSlot = 0;
        this.stackVars = [];
        this.aliases = {};
        this.registers = { list: [] };
        this.hashes = [];
        this.compileStack = [];
        this.inlineStack = [];
        this.blockParams = [];
        this.compileChildren(environment, options);
        this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
        this.useBlockParams = this.useBlockParams || environment.useBlockParams;
        var opcodes = environment.opcodes, opcode = void 0, firstLoc = void 0, i = void 0, l2 = void 0;
        for (i = 0, l2 = opcodes.length; i < l2; i++) {
          opcode = opcodes[i];
          this.source.currentLocation = opcode.loc;
          firstLoc = firstLoc || opcode.loc;
          this[opcode.opcode].apply(this, opcode.args);
        }
        this.source.currentLocation = firstLoc;
        this.pushSource("");
        if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
          throw new _exception2["default"]("Compile completed with content left on stack");
        }
        if (!this.decorators.isEmpty()) {
          this.useDecorators = true;
          this.decorators.prepend(["var decorators = container.decorators, ", this.lookupPropertyFunctionVarDeclaration(), ";\n"]);
          this.decorators.push("return fn;");
          if (asObject) {
            this.decorators = Function.apply(this, ["fn", "props", "container", "depth0", "data", "blockParams", "depths", this.decorators.merge()]);
          } else {
            this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n");
            this.decorators.push("}\n");
            this.decorators = this.decorators.merge();
          }
        } else {
          this.decorators = void 0;
        }
        var fn = this.createFunctionContext(asObject);
        if (!this.isChild) {
          var ret = {
            compiler: this.compilerInfo(),
            main: fn
          };
          if (this.decorators) {
            ret.main_d = this.decorators;
            ret.useDecorators = true;
          }
          var _context = this.context;
          var programs = _context.programs;
          var decorators = _context.decorators;
          for (i = 0, l2 = programs.length; i < l2; i++) {
            if (programs[i]) {
              ret[i] = programs[i];
              if (decorators[i]) {
                ret[i + "_d"] = decorators[i];
                ret.useDecorators = true;
              }
            }
          }
          if (this.environment.usePartial) {
            ret.usePartial = true;
          }
          if (this.options.data) {
            ret.useData = true;
          }
          if (this.useDepths) {
            ret.useDepths = true;
          }
          if (this.useBlockParams) {
            ret.useBlockParams = true;
          }
          if (this.options.compat) {
            ret.compat = true;
          }
          if (!asObject) {
            ret.compiler = JSON.stringify(ret.compiler);
            this.source.currentLocation = { start: { line: 1, column: 0 } };
            ret = this.objectLiteral(ret);
            if (options.srcName) {
              ret = ret.toStringWithSourceMap({ file: options.destName });
              ret.map = ret.map && ret.map.toString();
            } else {
              ret = ret.toString();
            }
          } else {
            ret.compilerOptions = this.options;
          }
          return ret;
        } else {
          return fn;
        }
      },
      preamble: function preamble() {
        this.lastContext = 0;
        this.source = new _codeGen2["default"](this.options.srcName);
        this.decorators = new _codeGen2["default"](this.options.srcName);
      },
      createFunctionContext: function createFunctionContext(asObject) {
        var _this = this;
        var varDeclarations = "";
        var locals = this.stackVars.concat(this.registers.list);
        if (locals.length > 0) {
          varDeclarations += ", " + locals.join(", ");
        }
        var aliasCount = 0;
        Object.keys(this.aliases).forEach(function(alias) {
          var node = _this.aliases[alias];
          if (node.children && node.referenceCount > 1) {
            varDeclarations += ", alias" + ++aliasCount + "=" + alias;
            node.children[0] = "alias" + aliasCount;
          }
        });
        if (this.lookupPropertyFunctionIsUsed) {
          varDeclarations += ", " + this.lookupPropertyFunctionVarDeclaration();
        }
        var params = ["container", "depth0", "helpers", "partials", "data"];
        if (this.useBlockParams || this.useDepths) {
          params.push("blockParams");
        }
        if (this.useDepths) {
          params.push("depths");
        }
        var source = this.mergeSource(varDeclarations);
        if (asObject) {
          params.push(source);
          return Function.apply(this, params);
        } else {
          return this.source.wrap(["function(", params.join(","), ") {\n  ", source, "}"]);
        }
      },
      mergeSource: function mergeSource(varDeclarations) {
        var isSimple = this.environment.isSimple, appendOnly = !this.forceBuffer, appendFirst = void 0, sourceSeen = void 0, bufferStart = void 0, bufferEnd = void 0;
        this.source.each(function(line) {
          if (line.appendToBuffer) {
            if (bufferStart) {
              line.prepend("  + ");
            } else {
              bufferStart = line;
            }
            bufferEnd = line;
          } else {
            if (bufferStart) {
              if (!sourceSeen) {
                appendFirst = true;
              } else {
                bufferStart.prepend("buffer += ");
              }
              bufferEnd.add(";");
              bufferStart = bufferEnd = void 0;
            }
            sourceSeen = true;
            if (!isSimple) {
              appendOnly = false;
            }
          }
        });
        if (appendOnly) {
          if (bufferStart) {
            bufferStart.prepend("return ");
            bufferEnd.add(";");
          } else if (!sourceSeen) {
            this.source.push('return "";');
          }
        } else {
          varDeclarations += ", buffer = " + (appendFirst ? "" : this.initializeBuffer());
          if (bufferStart) {
            bufferStart.prepend("return buffer + ");
            bufferEnd.add(";");
          } else {
            this.source.push("return buffer;");
          }
        }
        if (varDeclarations) {
          this.source.prepend("var " + varDeclarations.substring(2) + (appendFirst ? "" : ";\n"));
        }
        return this.source.merge();
      },
      lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {
        return "\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    ".trim();
      },
      // [blockValue]
      //
      // On stack, before: hash, inverse, program, value
      // On stack, after: return value of blockHelperMissing
      //
      // The purpose of this opcode is to take a block of the form
      // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
      // replace it on the stack with the result of properly
      // invoking blockHelperMissing.
      blockValue: function blockValue(name) {
        var blockHelperMissing = this.aliasable("container.hooks.blockHelperMissing"), params = [this.contextName(0)];
        this.setupHelperArgs(name, 0, params);
        var blockName = this.popStack();
        params.splice(1, 0, blockName);
        this.push(this.source.functionCall(blockHelperMissing, "call", params));
      },
      // [ambiguousBlockValue]
      //
      // On stack, before: hash, inverse, program, value
      // Compiler value, before: lastHelper=value of last found helper, if any
      // On stack, after, if no lastHelper: same as [blockValue]
      // On stack, after, if lastHelper: value
      ambiguousBlockValue: function ambiguousBlockValue() {
        var blockHelperMissing = this.aliasable("container.hooks.blockHelperMissing"), params = [this.contextName(0)];
        this.setupHelperArgs("", 0, params, true);
        this.flushInline();
        var current = this.topStack();
        params.splice(1, 0, current);
        this.pushSource(["if (!", this.lastHelper, ") { ", current, " = ", this.source.functionCall(blockHelperMissing, "call", params), "}"]);
      },
      // [appendContent]
      //
      // On stack, before: ...
      // On stack, after: ...
      //
      // Appends the string value of `content` to the current buffer
      appendContent: function appendContent(content) {
        if (this.pendingContent) {
          content = this.pendingContent + content;
        } else {
          this.pendingLocation = this.source.currentLocation;
        }
        this.pendingContent = content;
      },
      // [append]
      //
      // On stack, before: value, ...
      // On stack, after: ...
      //
      // Coerces `value` to a String and appends it to the current buffer.
      //
      // If `value` is truthy, or 0, it is coerced into a string and appended
      // Otherwise, the empty string is appended
      append: function append() {
        if (this.isInline()) {
          this.replaceStack(function(current) {
            return [" != null ? ", current, ' : ""'];
          });
          this.pushSource(this.appendToBuffer(this.popStack()));
        } else {
          var local = this.popStack();
          this.pushSource(["if (", local, " != null) { ", this.appendToBuffer(local, void 0, true), " }"]);
          if (this.environment.isSimple) {
            this.pushSource(["else { ", this.appendToBuffer("''", void 0, true), " }"]);
          }
        }
      },
      // [appendEscaped]
      //
      // On stack, before: value, ...
      // On stack, after: ...
      //
      // Escape `value` and append it to the buffer
      appendEscaped: function appendEscaped() {
        this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"), "(", this.popStack(), ")"]));
      },
      // [getContext]
      //
      // On stack, before: ...
      // On stack, after: ...
      // Compiler value, after: lastContext=depth
      //
      // Set the value of the `lastContext` compiler value to the depth
      getContext: function getContext(depth) {
        this.lastContext = depth;
      },
      // [pushContext]
      //
      // On stack, before: ...
      // On stack, after: currentContext, ...
      //
      // Pushes the value of the current context onto the stack.
      pushContext: function pushContext() {
        this.pushStackLiteral(this.contextName(this.lastContext));
      },
      // [lookupOnContext]
      //
      // On stack, before: ...
      // On stack, after: currentContext[name], ...
      //
      // Looks up the value of `name` on the current context and pushes
      // it onto the stack.
      lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
        var i = 0;
        if (!scoped && this.options.compat && !this.lastContext) {
          this.push(this.depthedLookup(parts[i++]));
        } else {
          this.pushContext();
        }
        this.resolvePath("context", parts, i, falsy, strict);
      },
      // [lookupBlockParam]
      //
      // On stack, before: ...
      // On stack, after: blockParam[name], ...
      //
      // Looks up the value of `parts` on the given block param and pushes
      // it onto the stack.
      lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
        this.useBlockParams = true;
        this.push(["blockParams[", blockParamId[0], "][", blockParamId[1], "]"]);
        this.resolvePath("context", parts, 1);
      },
      // [lookupData]
      //
      // On stack, before: ...
      // On stack, after: data, ...
      //
      // Push the data lookup operator
      lookupData: function lookupData(depth, parts, strict) {
        if (!depth) {
          this.pushStackLiteral("data");
        } else {
          this.pushStackLiteral("container.data(data, " + depth + ")");
        }
        this.resolvePath("data", parts, 0, true, strict);
      },
      resolvePath: function resolvePath(type, parts, i, falsy, strict) {
        var _this2 = this;
        if (this.options.strict || this.options.assumeObjects) {
          this.push(strictLookup(this.options.strict && strict, this, parts, i, type));
          return;
        }
        var len = parts.length;
        for (; i < len; i++) {
          this.replaceStack(function(current) {
            var lookup = _this2.nameLookup(current, parts[i], type);
            if (!falsy) {
              return [" != null ? ", lookup, " : ", current];
            } else {
              return [" && ", lookup];
            }
          });
        }
      },
      // [resolvePossibleLambda]
      //
      // On stack, before: value, ...
      // On stack, after: resolved value, ...
      //
      // If the `value` is a lambda, replace it on the stack by
      // the return value of the lambda
      resolvePossibleLambda: function resolvePossibleLambda() {
        this.push([this.aliasable("container.lambda"), "(", this.popStack(), ", ", this.contextName(0), ")"]);
      },
      // [pushStringParam]
      //
      // On stack, before: ...
      // On stack, after: string, currentContext, ...
      //
      // This opcode is designed for use in string mode, which
      // provides the string value of a parameter along with its
      // depth rather than resolving it immediately.
      pushStringParam: function pushStringParam(string, type) {
        this.pushContext();
        this.pushString(type);
        if (type !== "SubExpression") {
          if (typeof string === "string") {
            this.pushString(string);
          } else {
            this.pushStackLiteral(string);
          }
        }
      },
      emptyHash: function emptyHash(omitEmpty) {
        if (this.trackIds) {
          this.push("{}");
        }
        if (this.stringParams) {
          this.push("{}");
          this.push("{}");
        }
        this.pushStackLiteral(omitEmpty ? "undefined" : "{}");
      },
      pushHash: function pushHash() {
        if (this.hash) {
          this.hashes.push(this.hash);
        }
        this.hash = { values: {}, types: [], contexts: [], ids: [] };
      },
      popHash: function popHash() {
        var hash = this.hash;
        this.hash = this.hashes.pop();
        if (this.trackIds) {
          this.push(this.objectLiteral(hash.ids));
        }
        if (this.stringParams) {
          this.push(this.objectLiteral(hash.contexts));
          this.push(this.objectLiteral(hash.types));
        }
        this.push(this.objectLiteral(hash.values));
      },
      // [pushString]
      //
      // On stack, before: ...
      // On stack, after: quotedString(string), ...
      //
      // Push a quoted version of `string` onto the stack
      pushString: function pushString(string) {
        this.pushStackLiteral(this.quotedString(string));
      },
      // [pushLiteral]
      //
      // On stack, before: ...
      // On stack, after: value, ...
      //
      // Pushes a value onto the stack. This operation prevents
      // the compiler from creating a temporary variable to hold
      // it.
      pushLiteral: function pushLiteral(value) {
        this.pushStackLiteral(value);
      },
      // [pushProgram]
      //
      // On stack, before: ...
      // On stack, after: program(guid), ...
      //
      // Push a program expression onto the stack. This takes
      // a compile-time guid and converts it into a runtime-accessible
      // expression.
      pushProgram: function pushProgram(guid) {
        if (guid != null) {
          this.pushStackLiteral(this.programExpression(guid));
        } else {
          this.pushStackLiteral(null);
        }
      },
      // [registerDecorator]
      //
      // On stack, before: hash, program, params..., ...
      // On stack, after: ...
      //
      // Pops off the decorator's parameters, invokes the decorator,
      // and inserts the decorator into the decorators list.
      registerDecorator: function registerDecorator(paramSize, name) {
        var foundDecorator = this.nameLookup("decorators", name, "decorator"), options = this.setupHelperArgs(name, paramSize);
        this.decorators.push(["fn = ", this.decorators.functionCall(foundDecorator, "", ["fn", "props", "container", options]), " || fn;"]);
      },
      // [invokeHelper]
      //
      // On stack, before: hash, inverse, program, params..., ...
      // On stack, after: result of helper invocation
      //
      // Pops off the helper's parameters, invokes the helper,
      // and pushes the helper's return value onto the stack.
      //
      // If the helper is not found, `helperMissing` is called.
      invokeHelper: function invokeHelper(paramSize, name, isSimple) {
        var nonHelper = this.popStack(), helper = this.setupHelper(paramSize, name);
        var possibleFunctionCalls = [];
        if (isSimple) {
          possibleFunctionCalls.push(helper.name);
        }
        possibleFunctionCalls.push(nonHelper);
        if (!this.options.strict) {
          possibleFunctionCalls.push(this.aliasable("container.hooks.helperMissing"));
        }
        var functionLookupCode = ["(", this.itemsSeparatedBy(possibleFunctionCalls, "||"), ")"];
        var functionCall = this.source.functionCall(functionLookupCode, "call", helper.callParams);
        this.push(functionCall);
      },
      itemsSeparatedBy: function itemsSeparatedBy(items, separator) {
        var result = [];
        result.push(items[0]);
        for (var i = 1; i < items.length; i++) {
          result.push(separator, items[i]);
        }
        return result;
      },
      // [invokeKnownHelper]
      //
      // On stack, before: hash, inverse, program, params..., ...
      // On stack, after: result of helper invocation
      //
      // This operation is used when the helper is known to exist,
      // so a `helperMissing` fallback is not required.
      invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
        var helper = this.setupHelper(paramSize, name);
        this.push(this.source.functionCall(helper.name, "call", helper.callParams));
      },
      // [invokeAmbiguous]
      //
      // On stack, before: hash, inverse, program, params..., ...
      // On stack, after: result of disambiguation
      //
      // This operation is used when an expression like `{{foo}}`
      // is provided, but we don't know at compile-time whether it
      // is a helper or a path.
      //
      // This operation emits more code than the other options,
      // and can be avoided by passing the `knownHelpers` and
      // `knownHelpersOnly` flags at compile-time.
      invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
        this.useRegister("helper");
        var nonHelper = this.popStack();
        this.emptyHash();
        var helper = this.setupHelper(0, name, helperCall);
        var helperName = this.lastHelper = this.nameLookup("helpers", name, "helper");
        var lookup = ["(", "(helper = ", helperName, " || ", nonHelper, ")"];
        if (!this.options.strict) {
          lookup[0] = "(helper = ";
          lookup.push(" != null ? helper : ", this.aliasable("container.hooks.helperMissing"));
        }
        this.push(["(", lookup, helper.paramsInit ? ["),(", helper.paramsInit] : [], "),", "(typeof helper === ", this.aliasable('"function"'), " ? ", this.source.functionCall("helper", "call", helper.callParams), " : helper))"]);
      },
      // [invokePartial]
      //
      // On stack, before: context, ...
      // On stack after: result of partial invocation
      //
      // This operation pops off a context, invokes a partial with that context,
      // and pushes the result of the invocation back.
      invokePartial: function invokePartial(isDynamic, name, indent) {
        var params = [], options = this.setupParams(name, 1, params);
        if (isDynamic) {
          name = this.popStack();
          delete options.name;
        }
        if (indent) {
          options.indent = JSON.stringify(indent);
        }
        options.helpers = "helpers";
        options.partials = "partials";
        options.decorators = "container.decorators";
        if (!isDynamic) {
          params.unshift(this.nameLookup("partials", name, "partial"));
        } else {
          params.unshift(name);
        }
        if (this.options.compat) {
          options.depths = "depths";
        }
        options = this.objectLiteral(options);
        params.push(options);
        this.push(this.source.functionCall("container.invokePartial", "", params));
      },
      // [assignToHash]
      //
      // On stack, before: value, ..., hash, ...
      // On stack, after: ..., hash, ...
      //
      // Pops a value off the stack and assigns it to the current hash
      assignToHash: function assignToHash(key) {
        var value = this.popStack(), context = void 0, type = void 0, id = void 0;
        if (this.trackIds) {
          id = this.popStack();
        }
        if (this.stringParams) {
          type = this.popStack();
          context = this.popStack();
        }
        var hash = this.hash;
        if (context) {
          hash.contexts[key] = context;
        }
        if (type) {
          hash.types[key] = type;
        }
        if (id) {
          hash.ids[key] = id;
        }
        hash.values[key] = value;
      },
      pushId: function pushId(type, name, child) {
        if (type === "BlockParam") {
          this.pushStackLiteral("blockParams[" + name[0] + "].path[" + name[1] + "]" + (child ? " + " + JSON.stringify("." + child) : ""));
        } else if (type === "PathExpression") {
          this.pushString(name);
        } else if (type === "SubExpression") {
          this.pushStackLiteral("true");
        } else {
          this.pushStackLiteral("null");
        }
      },
      // HELPERS
      compiler: JavaScriptCompiler,
      compileChildren: function compileChildren(environment, options) {
        var children = environment.children, child = void 0, compiler = void 0;
        for (var i = 0, l2 = children.length; i < l2; i++) {
          child = children[i];
          compiler = new this.compiler();
          var existing = this.matchExistingProgram(child);
          if (existing == null) {
            this.context.programs.push("");
            var index = this.context.programs.length;
            child.index = index;
            child.name = "program" + index;
            this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
            this.context.decorators[index] = compiler.decorators;
            this.context.environments[index] = child;
            this.useDepths = this.useDepths || compiler.useDepths;
            this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
            child.useDepths = this.useDepths;
            child.useBlockParams = this.useBlockParams;
          } else {
            child.index = existing.index;
            child.name = "program" + existing.index;
            this.useDepths = this.useDepths || existing.useDepths;
            this.useBlockParams = this.useBlockParams || existing.useBlockParams;
          }
        }
      },
      matchExistingProgram: function matchExistingProgram(child) {
        for (var i = 0, len = this.context.environments.length; i < len; i++) {
          var environment = this.context.environments[i];
          if (environment && environment.equals(child)) {
            return environment;
          }
        }
      },
      programExpression: function programExpression(guid) {
        var child = this.environment.children[guid], programParams = [child.index, "data", child.blockParams];
        if (this.useBlockParams || this.useDepths) {
          programParams.push("blockParams");
        }
        if (this.useDepths) {
          programParams.push("depths");
        }
        return "container.program(" + programParams.join(", ") + ")";
      },
      useRegister: function useRegister(name) {
        if (!this.registers[name]) {
          this.registers[name] = true;
          this.registers.list.push(name);
        }
      },
      push: function push(expr) {
        if (!(expr instanceof Literal)) {
          expr = this.source.wrap(expr);
        }
        this.inlineStack.push(expr);
        return expr;
      },
      pushStackLiteral: function pushStackLiteral(item) {
        this.push(new Literal(item));
      },
      pushSource: function pushSource(source) {
        if (this.pendingContent) {
          this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
          this.pendingContent = void 0;
        }
        if (source) {
          this.source.push(source);
        }
      },
      replaceStack: function replaceStack(callback) {
        var prefix = ["("], stack = void 0, createdStack = void 0, usedLiteral = void 0;
        if (!this.isInline()) {
          throw new _exception2["default"]("replaceStack on non-inline");
        }
        var top = this.popStack(true);
        if (top instanceof Literal) {
          stack = [top.value];
          prefix = ["(", stack];
          usedLiteral = true;
        } else {
          createdStack = true;
          var _name = this.incrStack();
          prefix = ["((", this.push(_name), " = ", top, ")"];
          stack = this.topStack();
        }
        var item = callback.call(this, stack);
        if (!usedLiteral) {
          this.popStack();
        }
        if (createdStack) {
          this.stackSlot--;
        }
        this.push(prefix.concat(item, ")"));
      },
      incrStack: function incrStack() {
        this.stackSlot++;
        if (this.stackSlot > this.stackVars.length) {
          this.stackVars.push("stack" + this.stackSlot);
        }
        return this.topStackName();
      },
      topStackName: function topStackName() {
        return "stack" + this.stackSlot;
      },
      flushInline: function flushInline() {
        var inlineStack = this.inlineStack;
        this.inlineStack = [];
        for (var i = 0, len = inlineStack.length; i < len; i++) {
          var entry = inlineStack[i];
          if (entry instanceof Literal) {
            this.compileStack.push(entry);
          } else {
            var stack = this.incrStack();
            this.pushSource([stack, " = ", entry, ";"]);
            this.compileStack.push(stack);
          }
        }
      },
      isInline: function isInline() {
        return this.inlineStack.length;
      },
      popStack: function popStack(wrapped) {
        var inline = this.isInline(), item = (inline ? this.inlineStack : this.compileStack).pop();
        if (!wrapped && item instanceof Literal) {
          return item.value;
        } else {
          if (!inline) {
            if (!this.stackSlot) {
              throw new _exception2["default"]("Invalid stack pop");
            }
            this.stackSlot--;
          }
          return item;
        }
      },
      topStack: function topStack() {
        var stack = this.isInline() ? this.inlineStack : this.compileStack, item = stack[stack.length - 1];
        if (item instanceof Literal) {
          return item.value;
        } else {
          return item;
        }
      },
      contextName: function contextName(context) {
        if (this.useDepths && context) {
          return "depths[" + context + "]";
        } else {
          return "depth" + context;
        }
      },
      quotedString: function quotedString(str) {
        return this.source.quotedString(str);
      },
      objectLiteral: function objectLiteral(obj) {
        return this.source.objectLiteral(obj);
      },
      aliasable: function aliasable(name) {
        var ret = this.aliases[name];
        if (ret) {
          ret.referenceCount++;
          return ret;
        }
        ret = this.aliases[name] = this.source.wrap(name);
        ret.aliasable = true;
        ret.referenceCount = 1;
        return ret;
      },
      setupHelper: function setupHelper(paramSize, name, blockHelper) {
        var params = [], paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
        var foundHelper = this.nameLookup("helpers", name, "helper"), callContext = this.aliasable(this.contextName(0) + " != null ? " + this.contextName(0) + " : (container.nullContext || {})");
        return {
          params,
          paramsInit,
          name: foundHelper,
          callParams: [callContext].concat(params)
        };
      },
      setupParams: function setupParams(helper, paramSize, params) {
        var options = {}, contexts = [], types = [], ids = [], objectArgs = !params, param = void 0;
        if (objectArgs) {
          params = [];
        }
        options.name = this.quotedString(helper);
        options.hash = this.popStack();
        if (this.trackIds) {
          options.hashIds = this.popStack();
        }
        if (this.stringParams) {
          options.hashTypes = this.popStack();
          options.hashContexts = this.popStack();
        }
        var inverse = this.popStack(), program = this.popStack();
        if (program || inverse) {
          options.fn = program || "container.noop";
          options.inverse = inverse || "container.noop";
        }
        var i = paramSize;
        while (i--) {
          param = this.popStack();
          params[i] = param;
          if (this.trackIds) {
            ids[i] = this.popStack();
          }
          if (this.stringParams) {
            types[i] = this.popStack();
            contexts[i] = this.popStack();
          }
        }
        if (objectArgs) {
          options.args = this.source.generateArray(params);
        }
        if (this.trackIds) {
          options.ids = this.source.generateArray(ids);
        }
        if (this.stringParams) {
          options.types = this.source.generateArray(types);
          options.contexts = this.source.generateArray(contexts);
        }
        if (this.options.data) {
          options.data = "data";
        }
        if (this.useBlockParams) {
          options.blockParams = "blockParams";
        }
        return options;
      },
      setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
        var options = this.setupParams(helper, paramSize, params);
        options.loc = JSON.stringify(this.source.currentLocation);
        options = this.objectLiteral(options);
        if (useRegister) {
          this.useRegister("options");
          params.push("options");
          return ["options=", options];
        } else if (params) {
          params.push(options);
          return "";
        } else {
          return options;
        }
      }
    };
    (function() {
      var reservedWords = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" ");
      var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
      for (var i = 0, l2 = reservedWords.length; i < l2; i++) {
        compilerWords[reservedWords[i]] = true;
      }
    })();
    JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
      return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
    };
    function strictLookup(requireTerminal, compiler, parts, i, type) {
      var stack = compiler.popStack(), len = parts.length;
      if (requireTerminal) {
        len--;
      }
      for (; i < len; i++) {
        stack = compiler.nameLookup(stack, parts[i], type);
      }
      if (requireTerminal) {
        return [compiler.aliasable("container.strict"), "(", stack, ", ", compiler.quotedString(parts[i]), ", ", JSON.stringify(compiler.source.currentLocation), " )"];
      } else {
        return stack;
      }
    }
    exports["default"] = JavaScriptCompiler;
    module2.exports = exports["default"];
  }
});

// node_modules/handlebars/dist/cjs/handlebars.js
var require_handlebars = __commonJS({
  "node_modules/handlebars/dist/cjs/handlebars.js"(exports, module2) {
    "use strict";
    exports.__esModule = true;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _handlebarsRuntime = require_handlebars_runtime();
    var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);
    var _handlebarsCompilerAst = require_ast();
    var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);
    var _handlebarsCompilerBase = require_base2();
    var _handlebarsCompilerCompiler = require_compiler();
    var _handlebarsCompilerJavascriptCompiler = require_javascript_compiler();
    var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);
    var _handlebarsCompilerVisitor = require_visitor();
    var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);
    var _handlebarsNoConflict = require_no_conflict();
    var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
    var _create = _handlebarsRuntime2["default"].create;
    function create() {
      var hb = _create();
      hb.compile = function(input, options) {
        return _handlebarsCompilerCompiler.compile(input, options, hb);
      };
      hb.precompile = function(input, options) {
        return _handlebarsCompilerCompiler.precompile(input, options, hb);
      };
      hb.AST = _handlebarsCompilerAst2["default"];
      hb.Compiler = _handlebarsCompilerCompiler.Compiler;
      hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2["default"];
      hb.Parser = _handlebarsCompilerBase.parser;
      hb.parse = _handlebarsCompilerBase.parse;
      hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;
      return hb;
    }
    var inst = create();
    inst.create = create;
    _handlebarsNoConflict2["default"](inst);
    inst.Visitor = _handlebarsCompilerVisitor2["default"];
    inst["default"] = inst;
    exports["default"] = inst;
    module2.exports = exports["default"];
  }
});

// node_modules/logform/dist/format.js
var require_format = __commonJS({
  "node_modules/logform/dist/format.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _wrapNativeSuper(t) {
      var r = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
      return _wrapNativeSuper = function _wrapNativeSuper2(t2) {
        if (null === t2 || !_isNativeFunction(t2)) return t2;
        if ("function" != typeof t2) throw new TypeError("Super expression must either be null or a function");
        if (void 0 !== r) {
          if (r.has(t2)) return r.get(t2);
          r.set(t2, Wrapper);
        }
        function Wrapper() {
          return _construct(t2, arguments, _getPrototypeOf(this).constructor);
        }
        return Wrapper.prototype = Object.create(t2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }), _setPrototypeOf(Wrapper, t2);
      }, _wrapNativeSuper(t);
    }
    function _construct(t, e, r) {
      if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
      var o = [null];
      o.push.apply(o, e);
      var p = new (t.bind.apply(t, o))();
      return r && _setPrototypeOf(p, r.prototype), p;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _isNativeFunction(t) {
      try {
        return -1 !== Function.toString.call(t).indexOf("[native code]");
      } catch (n2) {
        return "function" == typeof t;
      }
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    var InvalidFormatError = /* @__PURE__ */ function(_Error) {
      function InvalidFormatError2(formatFn) {
        var _this;
        _classCallCheck(this, InvalidFormatError2);
        _this = _callSuper(this, InvalidFormatError2, ["Format functions must be synchronous taking a two arguments: (info, opts)\nFound: ".concat(formatFn.toString().split("\n")[0], "\n")]);
        Error.captureStackTrace(_this, InvalidFormatError2);
        return _this;
      }
      _inherits(InvalidFormatError2, _Error);
      return _createClass(InvalidFormatError2);
    }(/* @__PURE__ */ _wrapNativeSuper(Error));
    module2.exports = function(formatFn) {
      if (formatFn.length > 2) {
        throw new InvalidFormatError(formatFn);
      }
      function Format() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        this.options = options;
      }
      Format.prototype.transform = formatFn;
      function createFormatWrap(opts) {
        return new Format(opts);
      }
      createFormatWrap.Format = Format;
      return createFormatWrap;
    };
  }
});

// node_modules/@colors/colors/lib/styles.js
var require_styles = __commonJS({
  "node_modules/@colors/colors/lib/styles.js"(exports, module2) {
    var styles = {};
    module2["exports"] = styles;
    var codes = {
      reset: [0, 0],
      bold: [1, 22],
      dim: [2, 22],
      italic: [3, 23],
      underline: [4, 24],
      inverse: [7, 27],
      hidden: [8, 28],
      strikethrough: [9, 29],
      black: [30, 39],
      red: [31, 39],
      green: [32, 39],
      yellow: [33, 39],
      blue: [34, 39],
      magenta: [35, 39],
      cyan: [36, 39],
      white: [37, 39],
      gray: [90, 39],
      grey: [90, 39],
      brightRed: [91, 39],
      brightGreen: [92, 39],
      brightYellow: [93, 39],
      brightBlue: [94, 39],
      brightMagenta: [95, 39],
      brightCyan: [96, 39],
      brightWhite: [97, 39],
      bgBlack: [40, 49],
      bgRed: [41, 49],
      bgGreen: [42, 49],
      bgYellow: [43, 49],
      bgBlue: [44, 49],
      bgMagenta: [45, 49],
      bgCyan: [46, 49],
      bgWhite: [47, 49],
      bgGray: [100, 49],
      bgGrey: [100, 49],
      bgBrightRed: [101, 49],
      bgBrightGreen: [102, 49],
      bgBrightYellow: [103, 49],
      bgBrightBlue: [104, 49],
      bgBrightMagenta: [105, 49],
      bgBrightCyan: [106, 49],
      bgBrightWhite: [107, 49],
      // legacy styles for colors pre v1.0.0
      blackBG: [40, 49],
      redBG: [41, 49],
      greenBG: [42, 49],
      yellowBG: [43, 49],
      blueBG: [44, 49],
      magentaBG: [45, 49],
      cyanBG: [46, 49],
      whiteBG: [47, 49]
    };
    Object.keys(codes).forEach(function(key) {
      var val = codes[key];
      var style = styles[key] = [];
      style.open = "\x1B[" + val[0] + "m";
      style.close = "\x1B[" + val[1] + "m";
    });
  }
});

// node_modules/@colors/colors/lib/system/has-flag.js
var require_has_flag = __commonJS({
  "node_modules/@colors/colors/lib/system/has-flag.js"(exports, module2) {
    "use strict";
    module2.exports = function(flag, argv) {
      argv = argv || process.argv || [];
      var terminatorPos = argv.indexOf("--");
      var prefix = /^-{1,2}/.test(flag) ? "" : "--";
      var pos = argv.indexOf(prefix + flag);
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

// node_modules/@colors/colors/lib/system/supports-colors.js
var require_supports_colors = __commonJS({
  "node_modules/@colors/colors/lib/system/supports-colors.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var hasFlag = require_has_flag();
    var env = process.env;
    var forceColor = void 0;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
      forceColor = false;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = true;
    }
    if ("FORCE_COLOR" in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }
      var min = forceColor ? 1 : 0;
      if (process.platform === "win32") {
        var osRelease = os.release().split(".");
        if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(sign) {
          return sign in env;
        }) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if ("TERM_PROGRAM" in env) {
        var version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Hyper":
            return 3;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      if (env.TERM === "dumb") {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream) {
      var level = supportsColor(stream);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

// node_modules/@colors/colors/lib/custom/trap.js
var require_trap = __commonJS({
  "node_modules/@colors/colors/lib/custom/trap.js"(exports, module2) {
    module2["exports"] = function runTheTrap(text, options) {
      var result = "";
      text = text || "Run the trap, drop the bass";
      text = text.split("");
      var trap = {
        a: ["@", "\u0104", "\u023A", "\u0245", "\u0394", "\u039B", "\u0414"],
        b: ["\xDF", "\u0181", "\u0243", "\u026E", "\u03B2", "\u0E3F"],
        c: ["\xA9", "\u023B", "\u03FE"],
        d: ["\xD0", "\u018A", "\u0500", "\u0501", "\u0502", "\u0503"],
        e: [
          "\xCB",
          "\u0115",
          "\u018E",
          "\u0258",
          "\u03A3",
          "\u03BE",
          "\u04BC",
          "\u0A6C"
        ],
        f: ["\u04FA"],
        g: ["\u0262"],
        h: ["\u0126", "\u0195", "\u04A2", "\u04BA", "\u04C7", "\u050A"],
        i: ["\u0F0F"],
        j: ["\u0134"],
        k: ["\u0138", "\u04A0", "\u04C3", "\u051E"],
        l: ["\u0139"],
        m: ["\u028D", "\u04CD", "\u04CE", "\u0520", "\u0521", "\u0D69"],
        n: ["\xD1", "\u014B", "\u019D", "\u0376", "\u03A0", "\u048A"],
        o: [
          "\xD8",
          "\xF5",
          "\xF8",
          "\u01FE",
          "\u0298",
          "\u047A",
          "\u05DD",
          "\u06DD",
          "\u0E4F"
        ],
        p: ["\u01F7", "\u048E"],
        q: ["\u09CD"],
        r: ["\xAE", "\u01A6", "\u0210", "\u024C", "\u0280", "\u042F"],
        s: ["\xA7", "\u03DE", "\u03DF", "\u03E8"],
        t: ["\u0141", "\u0166", "\u0373"],
        u: ["\u01B1", "\u054D"],
        v: ["\u05D8"],
        w: ["\u0428", "\u0460", "\u047C", "\u0D70"],
        x: ["\u04B2", "\u04FE", "\u04FC", "\u04FD"],
        y: ["\xA5", "\u04B0", "\u04CB"],
        z: ["\u01B5", "\u0240"]
      };
      text.forEach(function(c) {
        c = c.toLowerCase();
        var chars = trap[c] || [" "];
        var rand = Math.floor(Math.random() * chars.length);
        if (typeof trap[c] !== "undefined") {
          result += trap[c][rand];
        } else {
          result += c;
        }
      });
      return result;
    };
  }
});

// node_modules/@colors/colors/lib/custom/zalgo.js
var require_zalgo = __commonJS({
  "node_modules/@colors/colors/lib/custom/zalgo.js"(exports, module2) {
    module2["exports"] = function zalgo(text, options) {
      text = text || "   he is here   ";
      var soul = {
        "up": [
          "\u030D",
          "\u030E",
          "\u0304",
          "\u0305",
          "\u033F",
          "\u0311",
          "\u0306",
          "\u0310",
          "\u0352",
          "\u0357",
          "\u0351",
          "\u0307",
          "\u0308",
          "\u030A",
          "\u0342",
          "\u0313",
          "\u0308",
          "\u034A",
          "\u034B",
          "\u034C",
          "\u0303",
          "\u0302",
          "\u030C",
          "\u0350",
          "\u0300",
          "\u0301",
          "\u030B",
          "\u030F",
          "\u0312",
          "\u0313",
          "\u0314",
          "\u033D",
          "\u0309",
          "\u0363",
          "\u0364",
          "\u0365",
          "\u0366",
          "\u0367",
          "\u0368",
          "\u0369",
          "\u036A",
          "\u036B",
          "\u036C",
          "\u036D",
          "\u036E",
          "\u036F",
          "\u033E",
          "\u035B",
          "\u0346",
          "\u031A"
        ],
        "down": [
          "\u0316",
          "\u0317",
          "\u0318",
          "\u0319",
          "\u031C",
          "\u031D",
          "\u031E",
          "\u031F",
          "\u0320",
          "\u0324",
          "\u0325",
          "\u0326",
          "\u0329",
          "\u032A",
          "\u032B",
          "\u032C",
          "\u032D",
          "\u032E",
          "\u032F",
          "\u0330",
          "\u0331",
          "\u0332",
          "\u0333",
          "\u0339",
          "\u033A",
          "\u033B",
          "\u033C",
          "\u0345",
          "\u0347",
          "\u0348",
          "\u0349",
          "\u034D",
          "\u034E",
          "\u0353",
          "\u0354",
          "\u0355",
          "\u0356",
          "\u0359",
          "\u035A",
          "\u0323"
        ],
        "mid": [
          "\u0315",
          "\u031B",
          "\u0300",
          "\u0301",
          "\u0358",
          "\u0321",
          "\u0322",
          "\u0327",
          "\u0328",
          "\u0334",
          "\u0335",
          "\u0336",
          "\u035C",
          "\u035D",
          "\u035E",
          "\u035F",
          "\u0360",
          "\u0362",
          "\u0338",
          "\u0337",
          "\u0361",
          " \u0489"
        ]
      };
      var all = [].concat(soul.up, soul.down, soul.mid);
      function randomNumber(range2) {
        var r = Math.floor(Math.random() * range2);
        return r;
      }
      function isChar(character) {
        var bool = false;
        all.filter(function(i) {
          bool = i === character;
        });
        return bool;
      }
      function heComes(text2, options2) {
        var result = "";
        var counts;
        var l2;
        options2 = options2 || {};
        options2["up"] = typeof options2["up"] !== "undefined" ? options2["up"] : true;
        options2["mid"] = typeof options2["mid"] !== "undefined" ? options2["mid"] : true;
        options2["down"] = typeof options2["down"] !== "undefined" ? options2["down"] : true;
        options2["size"] = typeof options2["size"] !== "undefined" ? options2["size"] : "maxi";
        text2 = text2.split("");
        for (l2 in text2) {
          if (isChar(l2)) {
            continue;
          }
          result = result + text2[l2];
          counts = { "up": 0, "down": 0, "mid": 0 };
          switch (options2.size) {
            case "mini":
              counts.up = randomNumber(8);
              counts.mid = randomNumber(2);
              counts.down = randomNumber(8);
              break;
            case "maxi":
              counts.up = randomNumber(16) + 3;
              counts.mid = randomNumber(4) + 1;
              counts.down = randomNumber(64) + 3;
              break;
            default:
              counts.up = randomNumber(8) + 1;
              counts.mid = randomNumber(6) / 2;
              counts.down = randomNumber(8) + 1;
              break;
          }
          var arr = ["up", "mid", "down"];
          for (var d in arr) {
            var index = arr[d];
            for (var i = 0; i <= counts[index]; i++) {
              if (options2[index]) {
                result = result + soul[index][randomNumber(soul[index].length)];
              }
            }
          }
        }
        return result;
      }
      return heComes(text, options);
    };
  }
});

// node_modules/@colors/colors/lib/maps/america.js
var require_america = __commonJS({
  "node_modules/@colors/colors/lib/maps/america.js"(exports, module2) {
    module2["exports"] = function(colors) {
      return function(letter, i, exploded) {
        if (letter === " ") return letter;
        switch (i % 3) {
          case 0:
            return colors.red(letter);
          case 1:
            return colors.white(letter);
          case 2:
            return colors.blue(letter);
        }
      };
    };
  }
});

// node_modules/@colors/colors/lib/maps/zebra.js
var require_zebra = __commonJS({
  "node_modules/@colors/colors/lib/maps/zebra.js"(exports, module2) {
    module2["exports"] = function(colors) {
      return function(letter, i, exploded) {
        return i % 2 === 0 ? letter : colors.inverse(letter);
      };
    };
  }
});

// node_modules/@colors/colors/lib/maps/rainbow.js
var require_rainbow = __commonJS({
  "node_modules/@colors/colors/lib/maps/rainbow.js"(exports, module2) {
    module2["exports"] = function(colors) {
      var rainbowColors = ["red", "yellow", "green", "blue", "magenta"];
      return function(letter, i, exploded) {
        if (letter === " ") {
          return letter;
        } else {
          return colors[rainbowColors[i++ % rainbowColors.length]](letter);
        }
      };
    };
  }
});

// node_modules/@colors/colors/lib/maps/random.js
var require_random = __commonJS({
  "node_modules/@colors/colors/lib/maps/random.js"(exports, module2) {
    module2["exports"] = function(colors) {
      var available = [
        "underline",
        "inverse",
        "grey",
        "yellow",
        "red",
        "green",
        "blue",
        "white",
        "cyan",
        "magenta",
        "brightYellow",
        "brightRed",
        "brightGreen",
        "brightBlue",
        "brightWhite",
        "brightCyan",
        "brightMagenta"
      ];
      return function(letter, i, exploded) {
        return letter === " " ? letter : colors[available[Math.round(Math.random() * (available.length - 2))]](letter);
      };
    };
  }
});

// node_modules/@colors/colors/lib/colors.js
var require_colors = __commonJS({
  "node_modules/@colors/colors/lib/colors.js"(exports, module2) {
    var colors = {};
    module2["exports"] = colors;
    colors.themes = {};
    var util = require("util");
    var ansiStyles = colors.styles = require_styles();
    var defineProps = Object.defineProperties;
    var newLineRegex = new RegExp(/[\r\n]+/g);
    colors.supportsColor = require_supports_colors().supportsColor;
    if (typeof colors.enabled === "undefined") {
      colors.enabled = colors.supportsColor() !== false;
    }
    colors.enable = function() {
      colors.enabled = true;
    };
    colors.disable = function() {
      colors.enabled = false;
    };
    colors.stripColors = colors.strip = function(str) {
      return ("" + str).replace(/\x1B\[\d+m/g, "");
    };
    var stylize = colors.stylize = function stylize2(str, style) {
      if (!colors.enabled) {
        return str + "";
      }
      var styleMap = ansiStyles[style];
      if (!styleMap && style in colors) {
        return colors[style](str);
      }
      return styleMap.open + str + styleMap.close;
    };
    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
    var escapeStringRegexp = function(str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      return str.replace(matchOperatorsRe, "\\$&");
    };
    function build(_styles) {
      var builder = function builder2() {
        return applyStyle.apply(builder2, arguments);
      };
      builder._styles = _styles;
      builder.__proto__ = proto;
      return builder;
    }
    var styles = function() {
      var ret = {};
      ansiStyles.grey = ansiStyles.gray;
      Object.keys(ansiStyles).forEach(function(key) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
        ret[key] = {
          get: function() {
            return build(this._styles.concat(key));
          }
        };
      });
      return ret;
    }();
    var proto = defineProps(function colors2() {
    }, styles);
    function applyStyle() {
      var args = Array.prototype.slice.call(arguments);
      var str = args.map(function(arg) {
        if (arg != null && arg.constructor === String) {
          return arg;
        } else {
          return util.inspect(arg);
        }
      }).join(" ");
      if (!colors.enabled || !str) {
        return str;
      }
      var newLinesPresent = str.indexOf("\n") != -1;
      var nestedStyles = this._styles;
      var i = nestedStyles.length;
      while (i--) {
        var code = ansiStyles[nestedStyles[i]];
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
        if (newLinesPresent) {
          str = str.replace(newLineRegex, function(match2) {
            return code.close + match2 + code.open;
          });
        }
      }
      return str;
    }
    colors.setTheme = function(theme) {
      if (typeof theme === "string") {
        console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
        return;
      }
      for (var style in theme) {
        (function(style2) {
          colors[style2] = function(str) {
            if (typeof theme[style2] === "object") {
              var out = str;
              for (var i in theme[style2]) {
                out = colors[theme[style2][i]](out);
              }
              return out;
            }
            return colors[theme[style2]](str);
          };
        })(style);
      }
    };
    function init() {
      var ret = {};
      Object.keys(styles).forEach(function(name) {
        ret[name] = {
          get: function() {
            return build([name]);
          }
        };
      });
      return ret;
    }
    var sequencer = function sequencer2(map2, str) {
      var exploded = str.split("");
      exploded = exploded.map(map2);
      return exploded.join("");
    };
    colors.trap = require_trap();
    colors.zalgo = require_zalgo();
    colors.maps = {};
    colors.maps.america = require_america()(colors);
    colors.maps.zebra = require_zebra()(colors);
    colors.maps.rainbow = require_rainbow()(colors);
    colors.maps.random = require_random()(colors);
    for (map in colors.maps) {
      (function(map2) {
        colors[map2] = function(str) {
          return sequencer(colors.maps[map2], str);
        };
      })(map);
    }
    var map;
    defineProps(colors, init());
  }
});

// node_modules/@colors/colors/safe.js
var require_safe = __commonJS({
  "node_modules/@colors/colors/safe.js"(exports, module2) {
    var colors = require_colors();
    module2["exports"] = colors;
  }
});

// node_modules/triple-beam/config/cli.js
var require_cli = __commonJS({
  "node_modules/triple-beam/config/cli.js"(exports) {
    "use strict";
    exports.levels = {
      error: 0,
      warn: 1,
      help: 2,
      data: 3,
      info: 4,
      debug: 5,
      prompt: 6,
      verbose: 7,
      input: 8,
      silly: 9
    };
    exports.colors = {
      error: "red",
      warn: "yellow",
      help: "cyan",
      data: "grey",
      info: "green",
      debug: "blue",
      prompt: "grey",
      verbose: "cyan",
      input: "grey",
      silly: "magenta"
    };
  }
});

// node_modules/triple-beam/config/npm.js
var require_npm = __commonJS({
  "node_modules/triple-beam/config/npm.js"(exports) {
    "use strict";
    exports.levels = {
      error: 0,
      warn: 1,
      info: 2,
      http: 3,
      verbose: 4,
      debug: 5,
      silly: 6
    };
    exports.colors = {
      error: "red",
      warn: "yellow",
      info: "green",
      http: "green",
      verbose: "cyan",
      debug: "blue",
      silly: "magenta"
    };
  }
});

// node_modules/triple-beam/config/syslog.js
var require_syslog = __commonJS({
  "node_modules/triple-beam/config/syslog.js"(exports) {
    "use strict";
    exports.levels = {
      emerg: 0,
      alert: 1,
      crit: 2,
      error: 3,
      warning: 4,
      notice: 5,
      info: 6,
      debug: 7
    };
    exports.colors = {
      emerg: "red",
      alert: "yellow",
      crit: "red",
      error: "red",
      warning: "red",
      notice: "yellow",
      info: "green",
      debug: "blue"
    };
  }
});

// node_modules/triple-beam/config/index.js
var require_config = __commonJS({
  "node_modules/triple-beam/config/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "cli", {
      value: require_cli()
    });
    Object.defineProperty(exports, "npm", {
      value: require_npm()
    });
    Object.defineProperty(exports, "syslog", {
      value: require_syslog()
    });
  }
});

// node_modules/triple-beam/index.js
var require_triple_beam = __commonJS({
  "node_modules/triple-beam/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "LEVEL", {
      value: Symbol.for("level")
    });
    Object.defineProperty(exports, "MESSAGE", {
      value: Symbol.for("message")
    });
    Object.defineProperty(exports, "SPLAT", {
      value: Symbol.for("splat")
    });
    Object.defineProperty(exports, "configs", {
      value: require_config()
    });
  }
});

// node_modules/logform/dist/colorize.js
var require_colorize = __commonJS({
  "node_modules/logform/dist/colorize.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var colors = require_safe();
    var _require = require_triple_beam();
    var LEVEL = _require.LEVEL;
    var MESSAGE = _require.MESSAGE;
    colors.enabled = true;
    var hasSpace = /\s+/;
    var Colorizer = /* @__PURE__ */ function() {
      function Colorizer2() {
        var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Colorizer2);
        if (opts.colors) {
          this.addColors(opts.colors);
        }
        this.options = opts;
      }
      return _createClass(Colorizer2, [{
        key: "addColors",
        value: (
          /*
           * Adds the colors Object to the set of allColors
           * known by the Colorizer
           *
           * @param {Object} colors Set of color mappings to add.
           */
          function addColors(clrs) {
            return Colorizer2.addColors(clrs);
          }
        )
        /*
         * function colorize (lookup, level, message)
         * Performs multi-step colorization using @colors/colors/safe
         */
      }, {
        key: "colorize",
        value: function colorize(lookup, level, message) {
          if (typeof message === "undefined") {
            message = level;
          }
          if (!Array.isArray(Colorizer2.allColors[lookup])) {
            return colors[Colorizer2.allColors[lookup]](message);
          }
          for (var i = 0, len = Colorizer2.allColors[lookup].length; i < len; i++) {
            message = colors[Colorizer2.allColors[lookup][i]](message);
          }
          return message;
        }
        /*
         * function transform (info, opts)
         * Attempts to colorize the { level, message } of the given
         * `logform` info object.
         */
      }, {
        key: "transform",
        value: function transform(info, opts) {
          if (opts.all && typeof info[MESSAGE] === "string") {
            info[MESSAGE] = this.colorize(info[LEVEL], info.level, info[MESSAGE]);
          }
          if (opts.level || opts.all || !opts.message) {
            info.level = this.colorize(info[LEVEL], info.level);
          }
          if (opts.all || opts.message) {
            info.message = this.colorize(info[LEVEL], info.level, info.message);
          }
          return info;
        }
      }], [{
        key: "addColors",
        value: function addColors(clrs) {
          var nextColors = Object.keys(clrs).reduce(function(acc, level) {
            acc[level] = hasSpace.test(clrs[level]) ? clrs[level].split(hasSpace) : clrs[level];
            return acc;
          }, {});
          Colorizer2.allColors = Object.assign({}, Colorizer2.allColors || {}, nextColors);
          return Colorizer2.allColors;
        }
      }]);
    }();
    module2.exports = function(opts) {
      return new Colorizer(opts);
    };
    module2.exports.Colorizer = module2.exports.Format = Colorizer;
  }
});

// node_modules/logform/dist/levels.js
var require_levels = __commonJS({
  "node_modules/logform/dist/levels.js"(exports, module2) {
    "use strict";
    var _require = require_colorize();
    var Colorizer = _require.Colorizer;
    module2.exports = function(config) {
      Colorizer.addColors(config.colors || config);
      return config;
    };
  }
});

// node_modules/logform/dist/align.js
var require_align = __commonJS({
  "node_modules/logform/dist/align.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    module2.exports = format2(function(info) {
      info.message = "	".concat(info.message);
      return info;
    });
  }
});

// node_modules/logform/dist/pad-levels.js
var require_pad_levels = __commonJS({
  "node_modules/logform/dist/pad-levels.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _toConsumableArray(r) {
      return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
      }
    }
    function _iterableToArray(r) {
      if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
    }
    function _arrayWithoutHoles(r) {
      if (Array.isArray(r)) return _arrayLikeToArray(r);
    }
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n2 = Array(a); e < a; e++) n2[e] = r[e];
      return n2;
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var _require = require_triple_beam();
    var configs = _require.configs;
    var LEVEL = _require.LEVEL;
    var MESSAGE = _require.MESSAGE;
    var Padder = /* @__PURE__ */ function() {
      function Padder2() {
        var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          levels: configs.npm.levels
        };
        _classCallCheck(this, Padder2);
        this.paddings = Padder2.paddingForLevels(opts.levels, opts.filler);
        this.options = opts;
      }
      return _createClass(Padder2, [{
        key: "transform",
        value: (
          /**
           * Prepends the padding onto the `message` based on the `LEVEL` of
           * the `info`. This is based on the behavior of `winston@2` which also
           * prepended the level onto the message.
           *
           * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201
           *
           * @param  {Info} info Logform info object
           * @param  {Object} opts Options passed along to this instance.
           * @returns {Info} Modified logform info object.
           */
          function transform(info, opts) {
            info.message = "".concat(this.paddings[info[LEVEL]]).concat(info.message);
            if (info[MESSAGE]) {
              info[MESSAGE] = "".concat(this.paddings[info[LEVEL]]).concat(info[MESSAGE]);
            }
            return info;
          }
        )
      }], [{
        key: "getLongestLevel",
        value: function getLongestLevel(levels) {
          var lvls = Object.keys(levels).map(function(level) {
            return level.length;
          });
          return Math.max.apply(Math, _toConsumableArray(lvls));
        }
        /**
         * Returns the padding for the specified `level` assuming that the
         * maximum length of all levels it's associated with is `maxLength`.
         * @param  {String} level Level to calculate padding for.
         * @param  {String} filler Repeatable text to use for padding.
         * @param  {Number} maxLength Length of the longest level
         * @returns {String} Padding string for the `level`
         */
      }, {
        key: "paddingForLevel",
        value: function paddingForLevel(level, filler, maxLength) {
          var targetLen = maxLength + 1 - level.length;
          var rep = Math.floor(targetLen / filler.length);
          var padding = "".concat(filler).concat(filler.repeat(rep));
          return padding.slice(0, targetLen);
        }
        /**
         * Returns an object with the string paddings for the given `levels`
         * using the specified `filler`.
         * @param  {Object} levels Set of all levels to calculate padding for.
         * @param  {String} filler Repeatable text to use for padding.
         * @returns {Object} Mapping of level to desired padding.
         */
      }, {
        key: "paddingForLevels",
        value: function paddingForLevels(levels) {
          var filler = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : " ";
          var maxLength = Padder2.getLongestLevel(levels);
          return Object.keys(levels).reduce(function(acc, level) {
            acc[level] = Padder2.paddingForLevel(level, filler, maxLength);
            return acc;
          }, {});
        }
      }]);
    }();
    module2.exports = function(opts) {
      return new Padder(opts);
    };
    module2.exports.Padder = module2.exports.Format = Padder;
  }
});

// node_modules/logform/dist/cli.js
var require_cli2 = __commonJS({
  "node_modules/logform/dist/cli.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var _require = require_colorize();
    var Colorizer = _require.Colorizer;
    var _require2 = require_pad_levels();
    var Padder = _require2.Padder;
    var _require3 = require_triple_beam();
    var configs = _require3.configs;
    var MESSAGE = _require3.MESSAGE;
    var CliFormat = /* @__PURE__ */ function() {
      function CliFormat2() {
        var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, CliFormat2);
        if (!opts.levels) {
          opts.levels = configs.cli.levels;
        }
        this.colorizer = new Colorizer(opts);
        this.padder = new Padder(opts);
        this.options = opts;
      }
      return _createClass(CliFormat2, [{
        key: "transform",
        value: function transform(info, opts) {
          this.colorizer.transform(this.padder.transform(info, opts), opts);
          info[MESSAGE] = "".concat(info.level, ":").concat(info.message);
          return info;
        }
      }]);
    }();
    module2.exports = function(opts) {
      return new CliFormat(opts);
    };
    module2.exports.Format = CliFormat;
  }
});

// node_modules/logform/dist/combine.js
var require_combine = __commonJS({
  "node_modules/logform/dist/combine.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    function cascade(formats) {
      if (!formats.every(isValidFormat)) {
        return;
      }
      return function(info) {
        var obj = info;
        for (var i = 0; i < formats.length; i++) {
          obj = formats[i].transform(obj, formats[i].options);
          if (!obj) {
            return false;
          }
        }
        return obj;
      };
    }
    function isValidFormat(fmt) {
      if (typeof fmt.transform !== "function") {
        throw new Error(["No transform function found on format. Did you create a format instance?", "const myFormat = format(formatFn);", "const instance = myFormat();"].join("\n"));
      }
      return true;
    }
    module2.exports = function() {
      for (var _len = arguments.length, formats = new Array(_len), _key = 0; _key < _len; _key++) {
        formats[_key] = arguments[_key];
      }
      var combinedFormat = format2(cascade(formats));
      var instance = combinedFormat();
      instance.Format = combinedFormat.Format;
      return instance;
    };
    module2.exports.cascade = cascade;
  }
});

// node_modules/logform/dist/errors.js
var require_errors = __commonJS({
  "node_modules/logform/dist/errors.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperty(e, r, t) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var format2 = require_format();
    var _require = require_triple_beam();
    var LEVEL = _require.LEVEL;
    var MESSAGE = _require.MESSAGE;
    module2.exports = format2(function(einfo, _ref) {
      var stack = _ref.stack, cause = _ref.cause;
      if (einfo instanceof Error) {
        var info = Object.assign({}, einfo, _defineProperty(_defineProperty(_defineProperty({
          level: einfo.level
        }, LEVEL, einfo[LEVEL] || einfo.level), "message", einfo.message), MESSAGE, einfo[MESSAGE] || einfo.message));
        if (stack) info.stack = einfo.stack;
        if (cause) info.cause = einfo.cause;
        return info;
      }
      if (!(einfo.message instanceof Error)) return einfo;
      var err = einfo.message;
      Object.assign(einfo, err);
      einfo.message = err.message;
      einfo[MESSAGE] = err.message;
      if (stack) einfo.stack = err.stack;
      if (cause) einfo.cause = err.cause;
      return einfo;
    });
  }
});

// node_modules/safe-stable-stringify/index.js
var require_safe_stable_stringify = __commonJS({
  "node_modules/safe-stable-stringify/index.js"(exports, module2) {
    "use strict";
    var { hasOwnProperty: hasOwnProperty2 } = Object.prototype;
    var stringify = configure();
    stringify.configure = configure;
    stringify.stringify = stringify;
    stringify.default = stringify;
    exports.stringify = stringify;
    exports.configure = configure;
    module2.exports = stringify;
    var strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]/;
    function strEscape(str) {
      if (str.length < 5e3 && !strEscapeSequencesRegExp.test(str)) {
        return `"${str}"`;
      }
      return JSON.stringify(str);
    }
    function sort2(array, comparator) {
      if (array.length > 200 || comparator) {
        return array.sort(comparator);
      }
      for (let i = 1; i < array.length; i++) {
        const currentValue = array[i];
        let position = i;
        while (position !== 0 && array[position - 1] > currentValue) {
          array[position] = array[position - 1];
          position--;
        }
        array[position] = currentValue;
      }
      return array;
    }
    var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(
      Object.getPrototypeOf(
        Object.getPrototypeOf(
          new Int8Array()
        )
      ),
      Symbol.toStringTag
    ).get;
    function isTypedArrayWithEntries(value) {
      return typedArrayPrototypeGetSymbolToStringTag.call(value) !== void 0 && value.length !== 0;
    }
    function stringifyTypedArray(array, separator, maximumBreadth) {
      if (array.length < maximumBreadth) {
        maximumBreadth = array.length;
      }
      const whitespace = separator === "," ? "" : " ";
      let res = `"0":${whitespace}${array[0]}`;
      for (let i = 1; i < maximumBreadth; i++) {
        res += `${separator}"${i}":${whitespace}${array[i]}`;
      }
      return res;
    }
    function getCircularValueOption(options) {
      if (hasOwnProperty2.call(options, "circularValue")) {
        const circularValue = options.circularValue;
        if (typeof circularValue === "string") {
          return `"${circularValue}"`;
        }
        if (circularValue == null) {
          return circularValue;
        }
        if (circularValue === Error || circularValue === TypeError) {
          return {
            toString() {
              throw new TypeError("Converting circular structure to JSON");
            }
          };
        }
        throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined');
      }
      return '"[Circular]"';
    }
    function getDeterministicOption(options) {
      let value;
      if (hasOwnProperty2.call(options, "deterministic")) {
        value = options.deterministic;
        if (typeof value !== "boolean" && typeof value !== "function") {
          throw new TypeError('The "deterministic" argument must be of type boolean or comparator function');
        }
      }
      return value === void 0 ? true : value;
    }
    function getBooleanOption(options, key) {
      let value;
      if (hasOwnProperty2.call(options, key)) {
        value = options[key];
        if (typeof value !== "boolean") {
          throw new TypeError(`The "${key}" argument must be of type boolean`);
        }
      }
      return value === void 0 ? true : value;
    }
    function getPositiveIntegerOption(options, key) {
      let value;
      if (hasOwnProperty2.call(options, key)) {
        value = options[key];
        if (typeof value !== "number") {
          throw new TypeError(`The "${key}" argument must be of type number`);
        }
        if (!Number.isInteger(value)) {
          throw new TypeError(`The "${key}" argument must be an integer`);
        }
        if (value < 1) {
          throw new RangeError(`The "${key}" argument must be >= 1`);
        }
      }
      return value === void 0 ? Infinity : value;
    }
    function getItemCount(number) {
      if (number === 1) {
        return "1 item";
      }
      return `${number} items`;
    }
    function getUniqueReplacerSet(replacerArray) {
      const replacerSet = /* @__PURE__ */ new Set();
      for (const value of replacerArray) {
        if (typeof value === "string" || typeof value === "number") {
          replacerSet.add(String(value));
        }
      }
      return replacerSet;
    }
    function getStrictOption(options) {
      if (hasOwnProperty2.call(options, "strict")) {
        const value = options.strict;
        if (typeof value !== "boolean") {
          throw new TypeError('The "strict" argument must be of type boolean');
        }
        if (value) {
          return (value2) => {
            let message = `Object can not safely be stringified. Received type ${typeof value2}`;
            if (typeof value2 !== "function") message += ` (${value2.toString()})`;
            throw new Error(message);
          };
        }
      }
    }
    function configure(options) {
      options = { ...options };
      const fail = getStrictOption(options);
      if (fail) {
        if (options.bigint === void 0) {
          options.bigint = false;
        }
        if (!("circularValue" in options)) {
          options.circularValue = Error;
        }
      }
      const circularValue = getCircularValueOption(options);
      const bigint = getBooleanOption(options, "bigint");
      const deterministic = getDeterministicOption(options);
      const comparator = typeof deterministic === "function" ? deterministic : void 0;
      const maximumDepth = getPositiveIntegerOption(options, "maximumDepth");
      const maximumBreadth = getPositiveIntegerOption(options, "maximumBreadth");
      function stringifyFnReplacer(key, parent, stack, replacer, spacer, indentation) {
        let value = parent[key];
        if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        value = replacer.call(parent, key, value);
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            let res = "";
            let join = ",";
            const originalIndentation = indentation;
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              if (spacer !== "") {
                indentation += spacer;
                res += `
${indentation}`;
                join = `,
${indentation}`;
              }
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += join;
              }
              const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              if (spacer !== "") {
                res += `
${originalIndentation}`;
              }
              stack.pop();
              return `[${res}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            let whitespace = "";
            let separator = "";
            if (spacer !== "") {
              indentation += spacer;
              join = `,
${indentation}`;
              whitespace = " ";
            }
            const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (deterministic && !isTypedArrayWithEntries(value)) {
              keys = sort2(keys, comparator);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifyFnReplacer(key2, value, stack, replacer, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
                separator = join;
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
              separator = join;
            }
            if (spacer !== "" && separator.length > 1) {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          // fallthrough
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifyArrayReplacer(key, value, stack, replacer, spacer, indentation) {
        if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            const originalIndentation = indentation;
            let res = "";
            let join = ",";
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              if (spacer !== "") {
                indentation += spacer;
                res += `
${indentation}`;
                join = `,
${indentation}`;
              }
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += join;
              }
              const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              if (spacer !== "") {
                res += `
${originalIndentation}`;
              }
              stack.pop();
              return `[${res}]`;
            }
            stack.push(value);
            let whitespace = "";
            if (spacer !== "") {
              indentation += spacer;
              join = `,
${indentation}`;
              whitespace = " ";
            }
            let separator = "";
            for (const key2 of replacer) {
              const tmp = stringifyArrayReplacer(key2, value[key2], stack, replacer, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
                separator = join;
              }
            }
            if (spacer !== "" && separator.length > 1) {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          // fallthrough
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifyIndent(key, value, stack, spacer, indentation) {
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (typeof value.toJSON === "function") {
              value = value.toJSON(key);
              if (typeof value !== "object") {
                return stringifyIndent(key, value, stack, spacer, indentation);
              }
              if (value === null) {
                return "null";
              }
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            const originalIndentation = indentation;
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              indentation += spacer;
              let res2 = `
${indentation}`;
              const join2 = `,
${indentation}`;
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyIndent(String(i), value[i], stack, spacer, indentation);
                res2 += tmp2 !== void 0 ? tmp2 : "null";
                res2 += join2;
              }
              const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);
              res2 += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res2 += `${join2}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              res2 += `
${originalIndentation}`;
              stack.pop();
              return `[${res2}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            indentation += spacer;
            const join = `,
${indentation}`;
            let res = "";
            let separator = "";
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, join, maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = join;
            }
            if (deterministic) {
              keys = sort2(keys, comparator);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifyIndent(key2, value[key2], stack, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}: ${tmp}`;
                separator = join;
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
              separator = join;
            }
            if (separator !== "") {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          // fallthrough
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifySimple(key, value, stack) {
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (typeof value.toJSON === "function") {
              value = value.toJSON(key);
              if (typeof value !== "object") {
                return stringifySimple(key, value, stack);
              }
              if (value === null) {
                return "null";
              }
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            let res = "";
            const hasLength = value.length !== void 0;
            if (hasLength && Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifySimple(String(i), value[i], stack);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += ",";
              }
              const tmp = stringifySimple(String(i), value[i], stack);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `,"... ${getItemCount(removedKeys)} not stringified"`;
              }
              stack.pop();
              return `[${res}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            let separator = "";
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (hasLength && isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, ",", maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = ",";
            }
            if (deterministic) {
              keys = sort2(keys, comparator);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifySimple(key2, value[key2], stack);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${tmp}`;
                separator = ",";
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          // fallthrough
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringify2(value, replacer, space) {
        if (arguments.length > 1) {
          let spacer = "";
          if (typeof space === "number") {
            spacer = " ".repeat(Math.min(space, 10));
          } else if (typeof space === "string") {
            spacer = space.slice(0, 10);
          }
          if (replacer != null) {
            if (typeof replacer === "function") {
              return stringifyFnReplacer("", { "": value }, [], replacer, spacer, "");
            }
            if (Array.isArray(replacer)) {
              return stringifyArrayReplacer("", value, [], getUniqueReplacerSet(replacer), spacer, "");
            }
          }
          if (spacer.length !== 0) {
            return stringifyIndent("", value, [], spacer, "");
          }
        }
        return stringifySimple("", value, []);
      }
      return stringify2;
    }
  }
});

// node_modules/logform/dist/json.js
var require_json = __commonJS({
  "node_modules/logform/dist/json.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    var _require = require_triple_beam();
    var MESSAGE = _require.MESSAGE;
    var stringify = require_safe_stable_stringify();
    function replacer(key, value) {
      if (typeof value === "bigint") return value.toString();
      return value;
    }
    module2.exports = format2(function(info, opts) {
      var jsonStringify = stringify.configure(opts);
      info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);
      return info;
    });
  }
});

// node_modules/logform/dist/label.js
var require_label = __commonJS({
  "node_modules/logform/dist/label.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    module2.exports = format2(function(info, opts) {
      if (opts.message) {
        info.message = "[".concat(opts.label, "] ").concat(info.message);
        return info;
      }
      info.label = opts.label;
      return info;
    });
  }
});

// node_modules/logform/dist/logstash.js
var require_logstash = __commonJS({
  "node_modules/logform/dist/logstash.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    var _require = require_triple_beam();
    var MESSAGE = _require.MESSAGE;
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = format2(function(info) {
      var logstash = {};
      if (info.message) {
        logstash["@message"] = info.message;
        delete info.message;
      }
      if (info.timestamp) {
        logstash["@timestamp"] = info.timestamp;
        delete info.timestamp;
      }
      logstash["@fields"] = info;
      info[MESSAGE] = jsonStringify(logstash);
      return info;
    });
  }
});

// node_modules/logform/dist/metadata.js
var require_metadata = __commonJS({
  "node_modules/logform/dist/metadata.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperty(e, r, t) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var format2 = require_format();
    function fillExcept(info, fillExceptKeys, metadataKey) {
      var savedKeys = fillExceptKeys.reduce(function(acc, key) {
        acc[key] = info[key];
        delete info[key];
        return acc;
      }, {});
      var metadata = Object.keys(info).reduce(function(acc, key) {
        acc[key] = info[key];
        delete info[key];
        return acc;
      }, {});
      Object.assign(info, savedKeys, _defineProperty({}, metadataKey, metadata));
      return info;
    }
    function fillWith(info, fillWithKeys, metadataKey) {
      info[metadataKey] = fillWithKeys.reduce(function(acc, key) {
        acc[key] = info[key];
        delete info[key];
        return acc;
      }, {});
      return info;
    }
    module2.exports = format2(function(info) {
      var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var metadataKey = "metadata";
      if (opts.key) {
        metadataKey = opts.key;
      }
      var fillExceptKeys = [];
      if (!opts.fillExcept && !opts.fillWith) {
        fillExceptKeys.push("level");
        fillExceptKeys.push("message");
      }
      if (opts.fillExcept) {
        fillExceptKeys = opts.fillExcept;
      }
      if (fillExceptKeys.length > 0) {
        return fillExcept(info, fillExceptKeys, metadataKey);
      }
      if (opts.fillWith) {
        return fillWith(info, opts.fillWith, metadataKey);
      }
      return info;
    });
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module2) {
    var s2 = 1e3;
    var m = s2 * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match2) {
        return;
      }
      var n2 = parseFloat(match2[1]);
      var type = (match2[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n2 * y;
        case "weeks":
        case "week":
        case "w":
          return n2 * w;
        case "days":
        case "day":
        case "d":
          return n2 * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n2 * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n2 * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n2 * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n2;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n2, name) {
      var isPlural = msAbs >= n2 * 1.5;
      return Math.round(ms / n2) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/logform/dist/ms.js
var require_ms2 = __commonJS({
  "node_modules/logform/dist/ms.js"(exports, module2) {
    "use strict";
    var _this = void 0;
    var format2 = require_format();
    var ms = require_ms();
    module2.exports = format2(function(info) {
      var curr = +/* @__PURE__ */ new Date();
      _this.diff = curr - (_this.prevTime || curr);
      _this.prevTime = curr;
      info.ms = "+".concat(ms(_this.diff));
      return info;
    });
  }
});

// node_modules/logform/dist/pretty-print.js
var require_pretty_print = __commonJS({
  "node_modules/logform/dist/pretty-print.js"(exports, module2) {
    "use strict";
    var inspect = require("util").inspect;
    var format2 = require_format();
    var _require = require_triple_beam();
    var LEVEL = _require.LEVEL;
    var MESSAGE = _require.MESSAGE;
    var SPLAT = _require.SPLAT;
    module2.exports = format2(function(info) {
      var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var stripped = Object.assign({}, info);
      delete stripped[LEVEL];
      delete stripped[MESSAGE];
      delete stripped[SPLAT];
      info[MESSAGE] = inspect(stripped, false, opts.depth || null, opts.colorize);
      return info;
    });
  }
});

// node_modules/logform/dist/printf.js
var require_printf = __commonJS({
  "node_modules/logform/dist/printf.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var _require = require_triple_beam();
    var MESSAGE = _require.MESSAGE;
    var Printf = /* @__PURE__ */ function() {
      function Printf2(templateFn) {
        _classCallCheck(this, Printf2);
        this.template = templateFn;
      }
      return _createClass(Printf2, [{
        key: "transform",
        value: function transform(info) {
          info[MESSAGE] = this.template(info);
          return info;
        }
      }]);
    }();
    module2.exports = function(opts) {
      return new Printf(opts);
    };
    module2.exports.Printf = module2.exports.Format = Printf;
  }
});

// node_modules/logform/dist/simple.js
var require_simple = __commonJS({
  "node_modules/logform/dist/simple.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    var _require = require_triple_beam();
    var MESSAGE = _require.MESSAGE;
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = format2(function(info) {
      var stringifiedRest = jsonStringify(Object.assign({}, info, {
        level: void 0,
        message: void 0,
        splat: void 0
      }));
      var padding = info.padding && info.padding[info.level] || "";
      if (stringifiedRest !== "{}") {
        info[MESSAGE] = "".concat(info.level, ":").concat(padding, " ").concat(info.message, " ").concat(stringifiedRest);
      } else {
        info[MESSAGE] = "".concat(info.level, ":").concat(padding, " ").concat(info.message);
      }
      return info;
    });
  }
});

// node_modules/logform/dist/splat.js
var require_splat = __commonJS({
  "node_modules/logform/dist/splat.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _toConsumableArray(r) {
      return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
      }
    }
    function _iterableToArray(r) {
      if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
    }
    function _arrayWithoutHoles(r) {
      if (Array.isArray(r)) return _arrayLikeToArray(r);
    }
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n2 = Array(a); e < a; e++) n2[e] = r[e];
      return n2;
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var util = require("util");
    var _require = require_triple_beam();
    var SPLAT = _require.SPLAT;
    var formatRegExp = /%[scdjifoO%]/g;
    var escapedPercent = /%%/g;
    var Splatter = /* @__PURE__ */ function() {
      function Splatter2(opts) {
        _classCallCheck(this, Splatter2);
        this.options = opts;
      }
      return _createClass(Splatter2, [{
        key: "_splat",
        value: function _splat(info, tokens) {
          var msg = info.message;
          var splat = info[SPLAT] || info.splat || [];
          var percents = msg.match(escapedPercent);
          var escapes = percents && percents.length || 0;
          var expectedSplat = tokens.length - escapes;
          var extraSplat = expectedSplat - splat.length;
          var metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : [];
          var metalen = metas.length;
          if (metalen) {
            for (var i = 0; i < metalen; i++) {
              Object.assign(info, metas[i]);
            }
          }
          info.message = util.format.apply(util, [msg].concat(_toConsumableArray(splat)));
          return info;
        }
        /**
          * Transforms the `info` message by using `util.format` to complete
          * any `info.message` provided it has string interpolation tokens.
          * If no tokens exist then `info` is immutable.
          *
          * @param  {Info} info Logform info message.
          * @param  {Object} opts Options for this instance.
          * @returns {Info} Modified info message
          */
      }, {
        key: "transform",
        value: function transform(info) {
          var msg = info.message;
          var splat = info[SPLAT] || info.splat;
          if (!splat || !splat.length) {
            return info;
          }
          var tokens = msg && msg.match && msg.match(formatRegExp);
          if (!tokens && (splat || splat.length)) {
            var metas = splat.length > 1 ? splat.splice(0) : splat;
            var metalen = metas.length;
            if (metalen) {
              for (var i = 0; i < metalen; i++) {
                Object.assign(info, metas[i]);
              }
            }
            return info;
          }
          if (tokens) {
            return this._splat(info, tokens);
          }
          return info;
        }
      }]);
    }();
    module2.exports = function(opts) {
      return new Splatter(opts);
    };
  }
});

// node_modules/fecha/lib/fecha.umd.js
var require_fecha_umd = __commonJS({
  "node_modules/fecha/lib/fecha.umd.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.fecha = {});
    })(exports, function(exports2) {
      "use strict";
      var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
      var twoDigitsOptional = "\\d\\d?";
      var twoDigits = "\\d\\d";
      var threeDigits = "\\d{3}";
      var fourDigits = "\\d{4}";
      var word = "[^\\s]+";
      var literal = /\[([^]*?)\]/gm;
      function shorten(arr, sLen) {
        var newArr = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          newArr.push(arr[i].substr(0, sLen));
        }
        return newArr;
      }
      var monthUpdate = function(arrName) {
        return function(v, i18n) {
          var lowerCaseArr = i18n[arrName].map(function(v2) {
            return v2.toLowerCase();
          });
          var index = lowerCaseArr.indexOf(v.toLowerCase());
          if (index > -1) {
            return index;
          }
          return null;
        };
      };
      function assign(origObj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
          var obj = args_1[_a];
          for (var key in obj) {
            origObj[key] = obj[key];
          }
        }
        return origObj;
      }
      var dayNames = [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ];
      var monthNames = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ];
      var monthNamesShort = shorten(monthNames, 3);
      var dayNamesShort = shorten(dayNames, 3);
      var defaultI18n = {
        dayNamesShort,
        dayNames,
        monthNamesShort,
        monthNames,
        amPm: ["am", "pm"],
        DoFn: function(dayOfMonth) {
          return dayOfMonth + ["th", "st", "nd", "rd"][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];
        }
      };
      var globalI18n = assign({}, defaultI18n);
      var setGlobalDateI18n = function(i18n) {
        return globalI18n = assign(globalI18n, i18n);
      };
      var regexEscape = function(str) {
        return str.replace(/[|\\{()[^$+*?.-]/g, "\\$&");
      };
      var pad = function(val, len) {
        if (len === void 0) {
          len = 2;
        }
        val = String(val);
        while (val.length < len) {
          val = "0" + val;
        }
        return val;
      };
      var formatFlags = {
        D: function(dateObj) {
          return String(dateObj.getDate());
        },
        DD: function(dateObj) {
          return pad(dateObj.getDate());
        },
        Do: function(dateObj, i18n) {
          return i18n.DoFn(dateObj.getDate());
        },
        d: function(dateObj) {
          return String(dateObj.getDay());
        },
        dd: function(dateObj) {
          return pad(dateObj.getDay());
        },
        ddd: function(dateObj, i18n) {
          return i18n.dayNamesShort[dateObj.getDay()];
        },
        dddd: function(dateObj, i18n) {
          return i18n.dayNames[dateObj.getDay()];
        },
        M: function(dateObj) {
          return String(dateObj.getMonth() + 1);
        },
        MM: function(dateObj) {
          return pad(dateObj.getMonth() + 1);
        },
        MMM: function(dateObj, i18n) {
          return i18n.monthNamesShort[dateObj.getMonth()];
        },
        MMMM: function(dateObj, i18n) {
          return i18n.monthNames[dateObj.getMonth()];
        },
        YY: function(dateObj) {
          return pad(String(dateObj.getFullYear()), 4).substr(2);
        },
        YYYY: function(dateObj) {
          return pad(dateObj.getFullYear(), 4);
        },
        h: function(dateObj) {
          return String(dateObj.getHours() % 12 || 12);
        },
        hh: function(dateObj) {
          return pad(dateObj.getHours() % 12 || 12);
        },
        H: function(dateObj) {
          return String(dateObj.getHours());
        },
        HH: function(dateObj) {
          return pad(dateObj.getHours());
        },
        m: function(dateObj) {
          return String(dateObj.getMinutes());
        },
        mm: function(dateObj) {
          return pad(dateObj.getMinutes());
        },
        s: function(dateObj) {
          return String(dateObj.getSeconds());
        },
        ss: function(dateObj) {
          return pad(dateObj.getSeconds());
        },
        S: function(dateObj) {
          return String(Math.round(dateObj.getMilliseconds() / 100));
        },
        SS: function(dateObj) {
          return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
        },
        SSS: function(dateObj) {
          return pad(dateObj.getMilliseconds(), 3);
        },
        a: function(dateObj, i18n) {
          return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
        },
        A: function(dateObj, i18n) {
          return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
        },
        ZZ: function(dateObj) {
          var offset2 = dateObj.getTimezoneOffset();
          return (offset2 > 0 ? "-" : "+") + pad(Math.floor(Math.abs(offset2) / 60) * 100 + Math.abs(offset2) % 60, 4);
        },
        Z: function(dateObj) {
          var offset2 = dateObj.getTimezoneOffset();
          return (offset2 > 0 ? "-" : "+") + pad(Math.floor(Math.abs(offset2) / 60), 2) + ":" + pad(Math.abs(offset2) % 60, 2);
        }
      };
      var monthParse = function(v) {
        return +v - 1;
      };
      var emptyDigits = [null, twoDigitsOptional];
      var emptyWord = [null, word];
      var amPm = [
        "isPm",
        word,
        function(v, i18n) {
          var val = v.toLowerCase();
          if (val === i18n.amPm[0]) {
            return 0;
          } else if (val === i18n.amPm[1]) {
            return 1;
          }
          return null;
        }
      ];
      var timezoneOffset = [
        "timezoneOffset",
        "[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z?",
        function(v) {
          var parts = (v + "").match(/([+-]|\d\d)/gi);
          if (parts) {
            var minutes = +parts[1] * 60 + parseInt(parts[2], 10);
            return parts[0] === "+" ? minutes : -minutes;
          }
          return 0;
        }
      ];
      var parseFlags = {
        D: ["day", twoDigitsOptional],
        DD: ["day", twoDigits],
        Do: ["day", twoDigitsOptional + word, function(v) {
          return parseInt(v, 10);
        }],
        M: ["month", twoDigitsOptional, monthParse],
        MM: ["month", twoDigits, monthParse],
        YY: [
          "year",
          twoDigits,
          function(v) {
            var now2 = /* @__PURE__ */ new Date();
            var cent = +("" + now2.getFullYear()).substr(0, 2);
            return +("" + (+v > 68 ? cent - 1 : cent) + v);
          }
        ],
        h: ["hour", twoDigitsOptional, void 0, "isPm"],
        hh: ["hour", twoDigits, void 0, "isPm"],
        H: ["hour", twoDigitsOptional],
        HH: ["hour", twoDigits],
        m: ["minute", twoDigitsOptional],
        mm: ["minute", twoDigits],
        s: ["second", twoDigitsOptional],
        ss: ["second", twoDigits],
        YYYY: ["year", fourDigits],
        S: ["millisecond", "\\d", function(v) {
          return +v * 100;
        }],
        SS: ["millisecond", twoDigits, function(v) {
          return +v * 10;
        }],
        SSS: ["millisecond", threeDigits],
        d: emptyDigits,
        dd: emptyDigits,
        ddd: emptyWord,
        dddd: emptyWord,
        MMM: ["month", word, monthUpdate("monthNamesShort")],
        MMMM: ["month", word, monthUpdate("monthNames")],
        a: amPm,
        A: amPm,
        ZZ: timezoneOffset,
        Z: timezoneOffset
      };
      var globalMasks = {
        default: "ddd MMM DD YYYY HH:mm:ss",
        shortDate: "M/D/YY",
        mediumDate: "MMM D, YYYY",
        longDate: "MMMM D, YYYY",
        fullDate: "dddd, MMMM D, YYYY",
        isoDate: "YYYY-MM-DD",
        isoDateTime: "YYYY-MM-DDTHH:mm:ssZ",
        shortTime: "HH:mm",
        mediumTime: "HH:mm:ss",
        longTime: "HH:mm:ss.SSS"
      };
      var setGlobalDateMasks = function(masks) {
        return assign(globalMasks, masks);
      };
      var format2 = function(dateObj, mask, i18n) {
        if (mask === void 0) {
          mask = globalMasks["default"];
        }
        if (i18n === void 0) {
          i18n = {};
        }
        if (typeof dateObj === "number") {
          dateObj = new Date(dateObj);
        }
        if (Object.prototype.toString.call(dateObj) !== "[object Date]" || isNaN(dateObj.getTime())) {
          throw new Error("Invalid Date pass to format");
        }
        mask = globalMasks[mask] || mask;
        var literals = [];
        mask = mask.replace(literal, function($0, $1) {
          literals.push($1);
          return "@@@";
        });
        var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
        mask = mask.replace(token, function($0) {
          return formatFlags[$0](dateObj, combinedI18nSettings);
        });
        return mask.replace(/@@@/g, function() {
          return literals.shift();
        });
      };
      function parse2(dateStr, format3, i18n) {
        if (i18n === void 0) {
          i18n = {};
        }
        if (typeof format3 !== "string") {
          throw new Error("Invalid format in fecha parse");
        }
        format3 = globalMasks[format3] || format3;
        if (dateStr.length > 1e3) {
          return null;
        }
        var today = /* @__PURE__ */ new Date();
        var dateInfo = {
          year: today.getFullYear(),
          month: 0,
          day: 1,
          hour: 0,
          minute: 0,
          second: 0,
          millisecond: 0,
          isPm: null,
          timezoneOffset: null
        };
        var parseInfo = [];
        var literals = [];
        var newFormat = format3.replace(literal, function($0, $1) {
          literals.push(regexEscape($1));
          return "@@@";
        });
        var specifiedFields = {};
        var requiredFields = {};
        newFormat = regexEscape(newFormat).replace(token, function($0) {
          var info = parseFlags[$0];
          var field2 = info[0], regex = info[1], requiredField = info[3];
          if (specifiedFields[field2]) {
            throw new Error("Invalid format. " + field2 + " specified twice in format");
          }
          specifiedFields[field2] = true;
          if (requiredField) {
            requiredFields[requiredField] = true;
          }
          parseInfo.push(info);
          return "(" + regex + ")";
        });
        Object.keys(requiredFields).forEach(function(field2) {
          if (!specifiedFields[field2]) {
            throw new Error("Invalid format. " + field2 + " is required in specified format");
          }
        });
        newFormat = newFormat.replace(/@@@/g, function() {
          return literals.shift();
        });
        var matches = dateStr.match(new RegExp(newFormat, "i"));
        if (!matches) {
          return null;
        }
        var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
        for (var i = 1; i < matches.length; i++) {
          var _a = parseInfo[i - 1], field = _a[0], parser = _a[2];
          var value = parser ? parser(matches[i], combinedI18nSettings) : +matches[i];
          if (value == null) {
            return null;
          }
          dateInfo[field] = value;
        }
        if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {
          dateInfo.hour = +dateInfo.hour + 12;
        } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {
          dateInfo.hour = 0;
        }
        var dateTZ;
        if (dateInfo.timezoneOffset == null) {
          dateTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);
          var validateFields = [
            ["month", "getMonth"],
            ["day", "getDate"],
            ["hour", "getHours"],
            ["minute", "getMinutes"],
            ["second", "getSeconds"]
          ];
          for (var i = 0, len = validateFields.length; i < len; i++) {
            if (specifiedFields[validateFields[i][0]] && dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()) {
              return null;
            }
          }
        } else {
          dateTZ = new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));
          if (dateInfo.month > 11 || dateInfo.month < 0 || dateInfo.day > 31 || dateInfo.day < 1 || dateInfo.hour > 23 || dateInfo.hour < 0 || dateInfo.minute > 59 || dateInfo.minute < 0 || dateInfo.second > 59 || dateInfo.second < 0) {
            return null;
          }
        }
        return dateTZ;
      }
      var fecha = {
        format: format2,
        parse: parse2,
        defaultI18n,
        setGlobalDateI18n,
        setGlobalDateMasks
      };
      exports2.assign = assign;
      exports2.default = fecha;
      exports2.format = format2;
      exports2.parse = parse2;
      exports2.defaultI18n = defaultI18n;
      exports2.setGlobalDateI18n = setGlobalDateI18n;
      exports2.setGlobalDateMasks = setGlobalDateMasks;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/logform/dist/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/logform/dist/timestamp.js"(exports, module2) {
    "use strict";
    var fecha = require_fecha_umd();
    var format2 = require_format();
    module2.exports = format2(function(info) {
      var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (opts.format) {
        info.timestamp = typeof opts.format === "function" ? opts.format() : fecha.format(/* @__PURE__ */ new Date(), opts.format);
      }
      if (!info.timestamp) {
        info.timestamp = (/* @__PURE__ */ new Date()).toISOString();
      }
      if (opts.alias) {
        info[opts.alias] = info.timestamp;
      }
      return info;
    });
  }
});

// node_modules/logform/dist/uncolorize.js
var require_uncolorize = __commonJS({
  "node_modules/logform/dist/uncolorize.js"(exports, module2) {
    "use strict";
    var colors = require_safe();
    var format2 = require_format();
    var _require = require_triple_beam();
    var MESSAGE = _require.MESSAGE;
    module2.exports = format2(function(info, opts) {
      if (opts.level !== false) {
        info.level = colors.strip(info.level);
      }
      if (opts.message !== false) {
        info.message = colors.strip(String(info.message));
      }
      if (opts.raw !== false && info[MESSAGE]) {
        info[MESSAGE] = colors.strip(String(info[MESSAGE]));
      }
      return info;
    });
  }
});

// node_modules/logform/dist/browser.js
var require_browser = __commonJS({
  "node_modules/logform/dist/browser.js"(exports) {
    "use strict";
    var format2 = exports.format = require_format();
    exports.levels = require_levels();
    Object.defineProperty(format2, "align", {
      value: require_align()
    });
    Object.defineProperty(format2, "cli", {
      value: require_cli2()
    });
    Object.defineProperty(format2, "colorize", {
      value: require_colorize()
    });
    Object.defineProperty(format2, "combine", {
      value: require_combine()
    });
    Object.defineProperty(format2, "errors", {
      value: require_errors()
    });
    Object.defineProperty(format2, "json", {
      value: require_json()
    });
    Object.defineProperty(format2, "label", {
      value: require_label()
    });
    Object.defineProperty(format2, "logstash", {
      value: require_logstash()
    });
    Object.defineProperty(format2, "metadata", {
      value: require_metadata()
    });
    Object.defineProperty(format2, "ms", {
      value: require_ms2()
    });
    Object.defineProperty(format2, "padLevels", {
      value: require_pad_levels()
    });
    Object.defineProperty(format2, "prettyPrint", {
      value: require_pretty_print()
    });
    Object.defineProperty(format2, "printf", {
      value: require_printf()
    });
    Object.defineProperty(format2, "simple", {
      value: require_simple()
    });
    Object.defineProperty(format2, "splat", {
      value: require_splat()
    });
    Object.defineProperty(format2, "timestamp", {
      value: require_timestamp()
    });
    Object.defineProperty(format2, "uncolorize", {
      value: require_uncolorize()
    });
  }
});

// node_modules/winston/dist/winston/common.js
var require_common = __commonJS({
  "node_modules/winston/dist/winston/common.js"(exports) {
    "use strict";
    var _require = require("util");
    var format2 = _require.format;
    exports.warn = {
      deprecated: function deprecated(prop) {
        return function() {
          throw new Error(format2("{ %s } was removed in winston@3.0.0.", prop));
        };
      },
      useFormat: function useFormat(prop) {
        return function() {
          throw new Error([format2("{ %s } was removed in winston@3.0.0.", prop), "Use a custom winston.format = winston.format(function) instead."].join("\n"));
        };
      },
      forFunctions: function forFunctions(obj, type, props) {
        props.forEach(function(prop) {
          obj[prop] = exports.warn[type](prop);
        });
      },
      forProperties: function forProperties(obj, type, props) {
        props.forEach(function(prop) {
          var notice = exports.warn[type](prop);
          Object.defineProperty(obj, prop, {
            get: notice,
            set: notice
          });
        });
      }
    };
  }
});

// node_modules/winston/package.json
var require_package = __commonJS({
  "node_modules/winston/package.json"(exports, module2) {
    module2.exports = {
      name: "winston",
      description: "A logger for just about everything.",
      version: "3.17.0",
      author: "Charlie Robbins <charlie.robbins@gmail.com>",
      maintainers: [
        "David Hyde <dabh@alumni.stanford.edu>"
      ],
      repository: {
        type: "git",
        url: "https://github.com/winstonjs/winston.git"
      },
      keywords: [
        "winston",
        "logger",
        "logging",
        "logs",
        "sysadmin",
        "bunyan",
        "pino",
        "loglevel",
        "tools",
        "json",
        "stream"
      ],
      dependencies: {
        "@dabh/diagnostics": "^2.0.2",
        "@colors/colors": "^1.6.0",
        async: "^3.2.3",
        "is-stream": "^2.0.0",
        logform: "^2.7.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.9.0"
      },
      devDependencies: {
        "@babel/cli": "^7.23.9",
        "@babel/core": "^7.24.0",
        "@babel/preset-env": "^7.24.0",
        "@dabh/eslint-config-populist": "^4.4.0",
        "@types/node": "^20.11.24",
        "abstract-winston-transport": "^0.5.1",
        assume: "^2.2.0",
        "cross-spawn-async": "^2.2.5",
        eslint: "^8.57.0",
        hock: "^1.4.1",
        mocha: "^10.3.0",
        nyc: "^17.1.0",
        rimraf: "5.0.1",
        split2: "^4.1.0",
        "std-mocks": "^2.0.0",
        through2: "^4.0.2",
        "winston-compat": "^0.1.5"
      },
      main: "./lib/winston.js",
      browser: "./dist/winston",
      types: "./index.d.ts",
      scripts: {
        lint: "eslint lib/*.js lib/winston/*.js lib/winston/**/*.js --resolve-plugins-relative-to ./node_modules/@dabh/eslint-config-populist",
        test: "rimraf test/fixtures/logs/* && mocha",
        "test:coverage": "nyc npm run test:unit",
        "test:unit": "mocha test/unit",
        "test:integration": "mocha test/integration",
        build: "rimraf dist && babel lib -d dist",
        prepublishOnly: "npm run build"
      },
      engines: {
        node: ">= 12.0.0"
      },
      license: "MIT"
    };
  }
});

// node_modules/util-deprecate/browser.js
var require_browser2 = __commonJS({
  "node_modules/util-deprecate/browser.js"(exports, module2) {
    module2.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name) {
      try {
        if (!global.localStorage) return false;
      } catch (_) {
        return false;
      }
      var val = global.localStorage[name];
      if (null == val) return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module2) {
    module2.exports = require("events").EventEmitter;
  }
});

// node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module2) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose) return;
      if (self2._readableState && !self2._readableState.emitClose) return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
      else stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/readable-stream/errors-browser.js"(exports, module2) {
    "use strict";
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = /* @__PURE__ */ function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf2(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes2(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf2(expected, "type"));
      } else {
        var type = includes2(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf2(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/state.js"(exports, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module2) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var _require = require("buffer");
    var Buffer2 = _require.Buffer;
    var _require2 = require("util");
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset2) {
      Buffer2.prototype.copy.call(src, target, offset2);
    }
    module2.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;
          else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;
          else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s2) {
          if (this.length === 0) return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) ret += s2 + p.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n2) {
          if (this.length === 0) return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n2 >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n2, hasStrings) {
          var ret;
          if (n2 < this.head.data.length) {
            ret = this.head.data.slice(0, n2);
            this.head.data = this.head.data.slice(n2);
          } else if (n2 === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n2) : this._getBuffer(n2);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n2) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n2 -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n2 > str.length ? str.length : n2;
            if (nb === str.length) ret += str;
            else ret += str.slice(0, n2);
            n2 -= nb;
            if (n2 === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;
                else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n2) {
          var ret = Buffer2.allocUnsafe(n2);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n2 -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n2 > buf.length ? buf.length : n2;
            buf.copy(ret, ret.length - n2, 0, nb);
            n2 -= nb;
            if (n2 === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;
                else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called) return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function") return eos(stream, null, opts);
      if (!opts) opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable) onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false) stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter2) {
      var resolve = iter2[kLastResolve];
      if (resolve !== null) {
        var data = iter2[kStream].read();
        if (data !== null) {
          iter2[kLastPromise] = null;
          iter2[kLastResolve] = null;
          iter2[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter2) {
      process.nextTick(readAndResolve, iter2);
    }
    function wrapForNext(lastPromise, iter2) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter2[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter2[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module2) {
    module2.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/readable-stream/lib/_stream_readable.js"(exports, module2) {
    "use strict";
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require("events").EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require("util");
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
      else emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable)) return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
              else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "") this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n2) {
      if (n2 >= MAX_HWM) {
        n2 = MAX_HWM;
      } else {
        n2--;
        n2 |= n2 >>> 1;
        n2 |= n2 >>> 2;
        n2 |= n2 >>> 4;
        n2 |= n2 >>> 8;
        n2 |= n2 >>> 16;
        n2++;
      }
      return n2;
    }
    function howMuchToRead(n2, state) {
      if (n2 <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n2 !== n2) {
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
      }
      if (n2 > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n2);
      if (n2 <= state.length) return n2;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n2) {
      debug("read", n2);
      n2 = parseInt(n2, 10);
      var state = this._readableState;
      var nOrig = n2;
      if (n2 !== 0) state.emittedReadable = false;
      if (n2 === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
      }
      n2 = howMuchToRead(n2, state);
      if (n2 === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n2 < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0) state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading) n2 = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n2 > 0) ret = fromList(n2, state);
      else ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n2 = 0;
      } else {
        state.length -= n2;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended) state.needReadable = true;
        if (nOrig !== n2 && state.ended) endReadable(this);
      }
      if (ret !== null) this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n2) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) process.nextTick(endFn);
      else src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0) return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) dests[i].emit("unpipe", this, {
          hasUnpiped: false
        });
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false) this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) ;
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = /* @__PURE__ */ function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n2 = 0; n2 < kProxyEvents.length; n2++) {
        stream.on(kProxyEvents[n2], this.emit.bind(this, kProxyEvents[n2]));
      }
      this._read = function(n3) {
        debug("wrapped _read", n3);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n2, state) {
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();
      else if (!n2 || n2 >= state.length) {
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n2, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l2 = xs.length; i < l2; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }
  }
});

// node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/readable-stream/lib/_stream_duplex.js"(exports, module2) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) keys2.push(key);
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits_browser()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended) return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/readable-stream/lib/_stream_writable.js"(exports, module2) {
    "use strict";
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser2()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf) encoding = "buffer";
      else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== "function") cb = nop;
      if (state.ending) writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string") encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret) state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev) stream._writev(chunk, state.onwrite);
      else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er) onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l2 = state.bufferedRequestCount;
        var buffer = new Array(l2);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null) state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending) endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/winston-transport/dist/modern.js
var require_modern = __commonJS({
  "node_modules/winston-transport/dist/modern.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var Writable = require_stream_writable();
    var _require = require_triple_beam();
    var LEVEL = _require.LEVEL;
    var TransportStream = module2.exports = function TransportStream2() {
      var _this = this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });
      this.format = options.format;
      this.level = options.level;
      this.handleExceptions = options.handleExceptions;
      this.handleRejections = options.handleRejections;
      this.silent = options.silent;
      if (options.log) this.log = options.log;
      if (options.logv) this.logv = options.logv;
      if (options.close) this.close = options.close;
      this.once("pipe", function(logger2) {
        _this.levels = logger2.levels;
        _this.parent = logger2;
      });
      this.once("unpipe", function(src) {
        if (src === _this.parent) {
          _this.parent = null;
          if (_this.close) {
            _this.close();
          }
        }
      });
    };
    util.inherits(TransportStream, Writable);
    TransportStream.prototype._write = function _write(info, enc, callback) {
      if (this.silent || info.exception === true && !this.handleExceptions) {
        return callback(null);
      }
      var level = this.level || this.parent && this.parent.level;
      if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {
        if (info && !this.format) {
          return this.log(info, callback);
        }
        var errState = void 0;
        var transformed = void 0;
        try {
          transformed = this.format.transform(Object.assign({}, info), this.format.options);
        } catch (err) {
          errState = err;
        }
        if (errState || !transformed) {
          callback();
          if (errState) throw errState;
          return;
        }
        return this.log(transformed, callback);
      }
      this._writableState.sync = false;
      return callback(null);
    };
    TransportStream.prototype._writev = function _writev(chunks, callback) {
      if (this.logv) {
        var infos = chunks.filter(this._accept, this);
        if (!infos.length) {
          return callback(null);
        }
        return this.logv(infos, callback);
      }
      for (var i = 0; i < chunks.length; i++) {
        if (!this._accept(chunks[i])) continue;
        if (chunks[i].chunk && !this.format) {
          this.log(chunks[i].chunk, chunks[i].callback);
          continue;
        }
        var errState = void 0;
        var transformed = void 0;
        try {
          transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);
        } catch (err) {
          errState = err;
        }
        if (errState || !transformed) {
          chunks[i].callback();
          if (errState) {
            callback(null);
            throw errState;
          }
        } else {
          this.log(transformed, chunks[i].callback);
        }
      }
      return callback(null);
    };
    TransportStream.prototype._accept = function _accept(write) {
      var info = write.chunk;
      if (this.silent) {
        return false;
      }
      var level = this.level || this.parent && this.parent.level;
      if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {
        if (this.handleExceptions || info.exception !== true) {
          return true;
        }
      }
      return false;
    };
    TransportStream.prototype._nop = function _nop() {
      return void 0;
    };
  }
});

// node_modules/winston-transport/dist/legacy.js
var require_legacy = __commonJS({
  "node_modules/winston-transport/dist/legacy.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var _require = require_triple_beam();
    var LEVEL = _require.LEVEL;
    var TransportStream = require_modern();
    var LegacyTransportStream = module2.exports = function LegacyTransportStream2() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      TransportStream.call(this, options);
      if (!options.transport || typeof options.transport.log !== "function") {
        throw new Error("Invalid transport, must be an object with a log method.");
      }
      this.transport = options.transport;
      this.level = this.level || options.transport.level;
      this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;
      this._deprecated();
      function transportError(err) {
        this.emit("error", err, this.transport);
      }
      if (!this.transport.__winstonError) {
        this.transport.__winstonError = transportError.bind(this);
        this.transport.on("error", this.transport.__winstonError);
      }
    };
    util.inherits(LegacyTransportStream, TransportStream);
    LegacyTransportStream.prototype._write = function _write(info, enc, callback) {
      if (this.silent || info.exception === true && !this.handleExceptions) {
        return callback(null);
      }
      if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {
        this.transport.log(info[LEVEL], info.message, info, this._nop);
      }
      callback(null);
    };
    LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {
      for (var i = 0; i < chunks.length; i++) {
        if (this._accept(chunks[i])) {
          this.transport.log(chunks[i].chunk[LEVEL], chunks[i].chunk.message, chunks[i].chunk, this._nop);
          chunks[i].callback();
        }
      }
      return callback(null);
    };
    LegacyTransportStream.prototype._deprecated = function _deprecated() {
      console.error([this.transport.name + " is a legacy winston transport. Consider upgrading: ", "- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"].join("\n"));
    };
    LegacyTransportStream.prototype.close = function close() {
      if (this.transport.close) {
        this.transport.close();
      }
      if (this.transport.__winstonError) {
        this.transport.removeListener("error", this.transport.__winstonError);
        this.transport.__winstonError = null;
      }
    };
  }
});

// node_modules/winston-transport/dist/index.js
var require_dist = __commonJS({
  "node_modules/winston-transport/dist/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_modern();
    module2.exports.LegacyTransportStream = require_legacy();
  }
});

// node_modules/winston/dist/winston/transports/console.js
var require_console = __commonJS({
  "node_modules/winston/dist/winston/transports/console.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    var os = require("os");
    var _require = require_triple_beam();
    var LEVEL = _require.LEVEL;
    var MESSAGE = _require.MESSAGE;
    var TransportStream = require_dist();
    module2.exports = /* @__PURE__ */ function(_TransportStream) {
      function Console() {
        var _this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Console);
        _this = _callSuper(this, Console, [options]);
        _this.name = options.name || "console";
        _this.stderrLevels = _this._stringArrayToSet(options.stderrLevels);
        _this.consoleWarnLevels = _this._stringArrayToSet(options.consoleWarnLevels);
        _this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
        _this.forceConsole = options.forceConsole || false;
        _this._consoleLog = console.log.bind(console);
        _this._consoleWarn = console.warn.bind(console);
        _this._consoleError = console.error.bind(console);
        _this.setMaxListeners(30);
        return _this;
      }
      _inherits(Console, _TransportStream);
      return _createClass(Console, [{
        key: "log",
        value: function log(info, callback) {
          var _this2 = this;
          setImmediate(function() {
            return _this2.emit("logged", info);
          });
          if (this.stderrLevels[info[LEVEL]]) {
            if (console._stderr && !this.forceConsole) {
              console._stderr.write("".concat(info[MESSAGE]).concat(this.eol));
            } else {
              this._consoleError(info[MESSAGE]);
            }
            if (callback) {
              callback();
            }
            return;
          } else if (this.consoleWarnLevels[info[LEVEL]]) {
            if (console._stderr && !this.forceConsole) {
              console._stderr.write("".concat(info[MESSAGE]).concat(this.eol));
            } else {
              this._consoleWarn(info[MESSAGE]);
            }
            if (callback) {
              callback();
            }
            return;
          }
          if (console._stdout && !this.forceConsole) {
            console._stdout.write("".concat(info[MESSAGE]).concat(this.eol));
          } else {
            this._consoleLog(info[MESSAGE]);
          }
          if (callback) {
            callback();
          }
        }
        /**
         * Returns a Set-like object with strArray's elements as keys (each with the
         * value true).
         * @param {Array} strArray - Array of Set-elements as strings.
         * @param {?string} [errMsg] - Custom error message thrown on invalid input.
         * @returns {Object} - TODO: add return description.
         * @private
         */
      }, {
        key: "_stringArrayToSet",
        value: function _stringArrayToSet(strArray, errMsg) {
          if (!strArray) return {};
          errMsg = errMsg || "Cannot make set from type other than Array of string elements";
          if (!Array.isArray(strArray)) {
            throw new Error(errMsg);
          }
          return strArray.reduce(function(set, el) {
            if (typeof el !== "string") {
              throw new Error(errMsg);
            }
            set[el] = true;
            return set;
          }, {});
        }
      }]);
    }(TransportStream);
  }
});

// node_modules/async/internal/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/async/internal/isArrayLike.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isArrayLike;
    function isArrayLike(value) {
      return value && typeof value.length === "number" && value.length >= 0 && value.length % 1 === 0;
    }
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/initialParams.js
var require_initialParams = __commonJS({
  "node_modules/async/internal/initialParams.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(fn) {
      return function(...args) {
        var callback = args.pop();
        return fn.call(this, args, callback);
      };
    };
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/setImmediate.js
var require_setImmediate = __commonJS({
  "node_modules/async/internal/setImmediate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.fallback = fallback;
    exports.wrap = wrap;
    var hasQueueMicrotask = exports.hasQueueMicrotask = typeof queueMicrotask === "function" && queueMicrotask;
    var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === "function" && setImmediate;
    var hasNextTick = exports.hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
    function fallback(fn) {
      setTimeout(fn, 0);
    }
    function wrap(defer) {
      return (fn, ...args) => defer(() => fn(...args));
    }
    var _defer;
    if (hasQueueMicrotask) {
      _defer = queueMicrotask;
    } else if (hasSetImmediate) {
      _defer = setImmediate;
    } else if (hasNextTick) {
      _defer = process.nextTick;
    } else {
      _defer = fallback;
    }
    exports.default = wrap(_defer);
  }
});

// node_modules/async/asyncify.js
var require_asyncify = __commonJS({
  "node_modules/async/asyncify.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = asyncify;
    var _initialParams = require_initialParams();
    var _initialParams2 = _interopRequireDefault(_initialParams);
    var _setImmediate = require_setImmediate();
    var _setImmediate2 = _interopRequireDefault(_setImmediate);
    var _wrapAsync = require_wrapAsync();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncify(func) {
      if ((0, _wrapAsync.isAsync)(func)) {
        return function(...args) {
          const callback = args.pop();
          const promise = func.apply(this, args);
          return handlePromise(promise, callback);
        };
      }
      return (0, _initialParams2.default)(function(args, callback) {
        var result;
        try {
          result = func.apply(this, args);
        } catch (e) {
          return callback(e);
        }
        if (result && typeof result.then === "function") {
          return handlePromise(result, callback);
        } else {
          callback(null, result);
        }
      });
    }
    function handlePromise(promise, callback) {
      return promise.then((value) => {
        invokeCallback(callback, null, value);
      }, (err) => {
        invokeCallback(callback, err && (err instanceof Error || err.message) ? err : new Error(err));
      });
    }
    function invokeCallback(callback, error, value) {
      try {
        callback(error, value);
      } catch (err) {
        (0, _setImmediate2.default)((e) => {
          throw e;
        }, err);
      }
    }
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/wrapAsync.js
var require_wrapAsync = __commonJS({
  "node_modules/async/internal/wrapAsync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = void 0;
    var _asyncify = require_asyncify();
    var _asyncify2 = _interopRequireDefault(_asyncify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAsync(fn) {
      return fn[Symbol.toStringTag] === "AsyncFunction";
    }
    function isAsyncGenerator(fn) {
      return fn[Symbol.toStringTag] === "AsyncGenerator";
    }
    function isAsyncIterable(obj) {
      return typeof obj[Symbol.asyncIterator] === "function";
    }
    function wrapAsync(asyncFn) {
      if (typeof asyncFn !== "function") throw new Error("expected a function");
      return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
    }
    exports.default = wrapAsync;
    exports.isAsync = isAsync;
    exports.isAsyncGenerator = isAsyncGenerator;
    exports.isAsyncIterable = isAsyncIterable;
  }
});

// node_modules/async/internal/awaitify.js
var require_awaitify = __commonJS({
  "node_modules/async/internal/awaitify.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = awaitify;
    function awaitify(asyncFn, arity) {
      if (!arity) arity = asyncFn.length;
      if (!arity) throw new Error("arity is undefined");
      function awaitable(...args) {
        if (typeof args[arity - 1] === "function") {
          return asyncFn.apply(this, args);
        }
        return new Promise((resolve, reject) => {
          args[arity - 1] = (err, ...cbArgs) => {
            if (err) return reject(err);
            resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
          };
          asyncFn.apply(this, args);
        });
      }
      return awaitable;
    }
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/parallel.js
var require_parallel = __commonJS({
  "node_modules/async/internal/parallel.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = (0, _awaitify2.default)((eachfn, tasks, callback) => {
      var results = (0, _isArrayLike2.default)(tasks) ? [] : {};
      eachfn(tasks, (task, key, taskCb) => {
        (0, _wrapAsync2.default)(task)((err, ...result) => {
          if (result.length < 2) {
            [result] = result;
          }
          results[key] = result;
          taskCb(err);
        });
      }, (err) => callback(err, results));
    }, 3);
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/once.js
var require_once = __commonJS({
  "node_modules/async/internal/once.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = once;
    function once(fn) {
      function wrapper(...args) {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
      }
      Object.assign(wrapper, fn);
      return wrapper;
    }
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/getIterator.js
var require_getIterator = __commonJS({
  "node_modules/async/internal/getIterator.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(coll) {
      return coll[Symbol.iterator] && coll[Symbol.iterator]();
    };
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/iterator.js
var require_iterator = __commonJS({
  "node_modules/async/internal/iterator.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createIterator;
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _getIterator = require_getIterator();
    var _getIterator2 = _interopRequireDefault(_getIterator);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
        return ++i < len ? { value: coll[i], key: i } : null;
      };
    }
    function createES2015Iterator(iterator) {
      var i = -1;
      return function next() {
        var item = iterator.next();
        if (item.done) return null;
        i++;
        return { value: item.value, key: i };
      };
    }
    function createObjectIterator(obj) {
      var okeys = obj ? Object.keys(obj) : [];
      var i = -1;
      var len = okeys.length;
      return function next() {
        var key = okeys[++i];
        if (key === "__proto__") {
          return next();
        }
        return i < len ? { value: obj[key], key } : null;
      };
    }
    function createIterator(coll) {
      if ((0, _isArrayLike2.default)(coll)) {
        return createArrayIterator(coll);
      }
      var iterator = (0, _getIterator2.default)(coll);
      return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
    }
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/onlyOnce.js
var require_onlyOnce = __commonJS({
  "node_modules/async/internal/onlyOnce.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = onlyOnce;
    function onlyOnce(fn) {
      return function(...args) {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
      };
    }
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/breakLoop.js
var require_breakLoop = __commonJS({
  "node_modules/async/internal/breakLoop.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var breakLoop = {};
    exports.default = breakLoop;
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/asyncEachOfLimit.js
var require_asyncEachOfLimit = __commonJS({
  "node_modules/async/internal/asyncEachOfLimit.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = asyncEachOfLimit;
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncEachOfLimit(generator, limit, iteratee, callback) {
      let done = false;
      let canceled = false;
      let awaiting = false;
      let running = 0;
      let idx = 0;
      function replenish() {
        if (running >= limit || awaiting || done) return;
        awaiting = true;
        generator.next().then(({ value, done: iterDone }) => {
          if (canceled || done) return;
          awaiting = false;
          if (iterDone) {
            done = true;
            if (running <= 0) {
              callback(null);
            }
            return;
          }
          running++;
          iteratee(value, idx, iterateeCallback);
          idx++;
          replenish();
        }).catch(handleError);
      }
      function iterateeCallback(err, result) {
        running -= 1;
        if (canceled) return;
        if (err) return handleError(err);
        if (err === false) {
          done = true;
          canceled = true;
          return;
        }
        if (result === _breakLoop2.default || done && running <= 0) {
          done = true;
          return callback(null);
        }
        replenish();
      }
      function handleError(err) {
        if (canceled) return;
        awaiting = false;
        done = true;
        callback(err);
      }
      replenish();
    }
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/eachOfLimit.js
var require_eachOfLimit = __commonJS({
  "node_modules/async/internal/eachOfLimit.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _iterator = require_iterator();
    var _iterator2 = _interopRequireDefault(_iterator);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _asyncEachOfLimit = require_asyncEachOfLimit();
    var _asyncEachOfLimit2 = _interopRequireDefault(_asyncEachOfLimit);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = (limit) => {
      return (obj, iteratee, callback) => {
        callback = (0, _once2.default)(callback);
        if (limit <= 0) {
          throw new RangeError("concurrency limit cannot be less than 1");
        }
        if (!obj) {
          return callback(null);
        }
        if ((0, _wrapAsync.isAsyncGenerator)(obj)) {
          return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);
        }
        if ((0, _wrapAsync.isAsyncIterable)(obj)) {
          return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);
        }
        var nextElem = (0, _iterator2.default)(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err, value) {
          if (canceled) return;
          running -= 1;
          if (err) {
            done = true;
            callback(err);
          } else if (err === false) {
            done = true;
            canceled = true;
          } else if (value === _breakLoop2.default || done && running <= 0) {
            done = true;
            return callback(null);
          } else if (!looping) {
            replenish();
          }
        }
        function replenish() {
          looping = true;
          while (running < limit && !done) {
            var elem = nextElem();
            if (elem === null) {
              done = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running += 1;
            iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
          }
          looping = false;
        }
        replenish();
      };
    };
    module2.exports = exports.default;
  }
});

// node_modules/async/eachOfLimit.js
var require_eachOfLimit2 = __commonJS({
  "node_modules/async/eachOfLimit.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _eachOfLimit2 = require_eachOfLimit();
    var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfLimit(coll, limit, iteratee, callback) {
      return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
    }
    exports.default = (0, _awaitify2.default)(eachOfLimit, 4);
    module2.exports = exports.default;
  }
});

// node_modules/async/eachOfSeries.js
var require_eachOfSeries = __commonJS({
  "node_modules/async/eachOfSeries.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _eachOfLimit = require_eachOfLimit2();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfSeries(coll, iteratee, callback) {
      return (0, _eachOfLimit2.default)(coll, 1, iteratee, callback);
    }
    exports.default = (0, _awaitify2.default)(eachOfSeries, 3);
    module2.exports = exports.default;
  }
});

// node_modules/async/series.js
var require_series = __commonJS({
  "node_modules/async/series.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = series;
    var _parallel2 = require_parallel();
    var _parallel3 = _interopRequireDefault(_parallel2);
    var _eachOfSeries = require_eachOfSeries();
    var _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function series(tasks, callback) {
      return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);
    }
    module2.exports = exports.default;
  }
});

// node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/readable-stream/lib/_stream_transform.js"(exports, module2) {
    "use strict";
    module2.exports = Transform;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits_browser()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n2) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er) return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module2) {
    "use strict";
    module2.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits_browser()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module2) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err) throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0) eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length) return noop;
      if (typeof streams[streams.length - 1] !== "function") return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error) error = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/readable-stream/readable-browser.js"(exports, module2) {
    exports = module2.exports = require_stream_readable();
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require_stream_writable();
    exports.Duplex = require_stream_duplex();
    exports.Transform = require_stream_transform();
    exports.PassThrough = require_stream_passthrough();
    exports.finished = require_end_of_stream();
    exports.pipeline = require_pipeline();
  }
});

// node_modules/@dabh/diagnostics/diagnostics.js
var require_diagnostics = __commonJS({
  "node_modules/@dabh/diagnostics/diagnostics.js"(exports, module2) {
    var adapters = [];
    var modifiers = [];
    var logger2 = function devnull() {
    };
    function use(adapter) {
      if (~adapters.indexOf(adapter)) return false;
      adapters.push(adapter);
      return true;
    }
    function set(custom) {
      logger2 = custom;
    }
    function enabled(namespace) {
      var async = [];
      for (var i = 0; i < adapters.length; i++) {
        if (adapters[i].async) {
          async.push(adapters[i]);
          continue;
        }
        if (adapters[i](namespace)) return true;
      }
      if (!async.length) return false;
      return new Promise(function pinky(resolve) {
        Promise.all(
          async.map(function prebind(fn) {
            return fn(namespace);
          })
        ).then(function resolved(values) {
          resolve(values.some(Boolean));
        });
      });
    }
    function modify(fn) {
      if (~modifiers.indexOf(fn)) return false;
      modifiers.push(fn);
      return true;
    }
    function write() {
      logger2.apply(logger2, arguments);
    }
    function process2(message) {
      for (var i = 0; i < modifiers.length; i++) {
        message = modifiers[i].apply(modifiers[i], arguments);
      }
      return message;
    }
    function introduce(fn, options) {
      var has = Object.prototype.hasOwnProperty;
      for (var key in options) {
        if (has.call(options, key)) {
          fn[key] = options[key];
        }
      }
      return fn;
    }
    function nope(options) {
      options.enabled = false;
      options.modify = modify;
      options.set = set;
      options.use = use;
      return introduce(function diagnopes() {
        return false;
      }, options);
    }
    function yep(options) {
      function diagnostics() {
        var args = Array.prototype.slice.call(arguments, 0);
        write.call(write, options, process2(args, options));
        return true;
      }
      options.enabled = true;
      options.modify = modify;
      options.set = set;
      options.use = use;
      return introduce(diagnostics, options);
    }
    module2.exports = function create(diagnostics) {
      diagnostics.introduce = introduce;
      diagnostics.enabled = enabled;
      diagnostics.process = process2;
      diagnostics.modify = modify;
      diagnostics.write = write;
      diagnostics.nope = nope;
      diagnostics.yep = yep;
      diagnostics.set = set;
      diagnostics.use = use;
      return diagnostics;
    };
  }
});

// node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/color-name/index.js"(exports, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/simple-swizzle/node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS({
  "node_modules/simple-swizzle/node_modules/is-arrayish/index.js"(exports, module2) {
    module2.exports = function isArrayish(obj) {
      if (!obj || typeof obj === "string") {
        return false;
      }
      return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
    };
  }
});

// node_modules/simple-swizzle/index.js
var require_simple_swizzle = __commonJS({
  "node_modules/simple-swizzle/index.js"(exports, module2) {
    "use strict";
    var isArrayish = require_is_arrayish();
    var concat = Array.prototype.concat;
    var slice = Array.prototype.slice;
    var swizzle = module2.exports = function swizzle2(args) {
      var results = [];
      for (var i = 0, len = args.length; i < len; i++) {
        var arg = args[i];
        if (isArrayish(arg)) {
          results = concat.call(results, slice.call(arg));
        } else {
          results.push(arg);
        }
      }
      return results;
    };
    swizzle.wrap = function(fn) {
      return function() {
        return fn(swizzle(arguments));
      };
    };
  }
});

// node_modules/color-string/index.js
var require_color_string = __commonJS({
  "node_modules/color-string/index.js"(exports, module2) {
    var colorNames = require_color_name();
    var swizzle = require_simple_swizzle();
    var hasOwnProperty2 = Object.hasOwnProperty;
    var reverseNames = /* @__PURE__ */ Object.create(null);
    for (name in colorNames) {
      if (hasOwnProperty2.call(colorNames, name)) {
        reverseNames[colorNames[name]] = name;
      }
    }
    var name;
    var cs = module2.exports = {
      to: {},
      get: {}
    };
    cs.get = function(string) {
      var prefix = string.substring(0, 3).toLowerCase();
      var val;
      var model;
      switch (prefix) {
        case "hsl":
          val = cs.get.hsl(string);
          model = "hsl";
          break;
        case "hwb":
          val = cs.get.hwb(string);
          model = "hwb";
          break;
        default:
          val = cs.get.rgb(string);
          model = "rgb";
          break;
      }
      if (!val) {
        return null;
      }
      return { model, value: val };
    };
    cs.get.rgb = function(string) {
      if (!string) {
        return null;
      }
      var abbr = /^#([a-f0-9]{3,4})$/i;
      var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
      var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
      var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
      var keyword = /^(\w+)$/;
      var rgb = [0, 0, 0, 1];
      var match2;
      var i;
      var hexAlpha;
      if (match2 = string.match(hex)) {
        hexAlpha = match2[2];
        match2 = match2[1];
        for (i = 0; i < 3; i++) {
          var i2 = i * 2;
          rgb[i] = parseInt(match2.slice(i2, i2 + 2), 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha, 16) / 255;
        }
      } else if (match2 = string.match(abbr)) {
        match2 = match2[1];
        hexAlpha = match2[3];
        for (i = 0; i < 3; i++) {
          rgb[i] = parseInt(match2[i] + match2[i], 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
        }
      } else if (match2 = string.match(rgba)) {
        for (i = 0; i < 3; i++) {
          rgb[i] = parseInt(match2[i + 1], 0);
        }
        if (match2[4]) {
          if (match2[5]) {
            rgb[3] = parseFloat(match2[4]) * 0.01;
          } else {
            rgb[3] = parseFloat(match2[4]);
          }
        }
      } else if (match2 = string.match(per)) {
        for (i = 0; i < 3; i++) {
          rgb[i] = Math.round(parseFloat(match2[i + 1]) * 2.55);
        }
        if (match2[4]) {
          if (match2[5]) {
            rgb[3] = parseFloat(match2[4]) * 0.01;
          } else {
            rgb[3] = parseFloat(match2[4]);
          }
        }
      } else if (match2 = string.match(keyword)) {
        if (match2[1] === "transparent") {
          return [0, 0, 0, 0];
        }
        if (!hasOwnProperty2.call(colorNames, match2[1])) {
          return null;
        }
        rgb = colorNames[match2[1]];
        rgb[3] = 1;
        return rgb;
      } else {
        return null;
      }
      for (i = 0; i < 3; i++) {
        rgb[i] = clamp(rgb[i], 0, 255);
      }
      rgb[3] = clamp(rgb[3], 0, 1);
      return rgb;
    };
    cs.get.hsl = function(string) {
      if (!string) {
        return null;
      }
      var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
      var match2 = string.match(hsl);
      if (match2) {
        var alpha = parseFloat(match2[4]);
        var h = (parseFloat(match2[1]) % 360 + 360) % 360;
        var s2 = clamp(parseFloat(match2[2]), 0, 100);
        var l2 = clamp(parseFloat(match2[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, s2, l2, a];
      }
      return null;
    };
    cs.get.hwb = function(string) {
      if (!string) {
        return null;
      }
      var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
      var match2 = string.match(hwb);
      if (match2) {
        var alpha = parseFloat(match2[4]);
        var h = (parseFloat(match2[1]) % 360 + 360) % 360;
        var w = clamp(parseFloat(match2[2]), 0, 100);
        var b = clamp(parseFloat(match2[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, w, b, a];
      }
      return null;
    };
    cs.to.hex = function() {
      var rgba = swizzle(arguments);
      return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
    };
    cs.to.rgb = function() {
      var rgba = swizzle(arguments);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
    };
    cs.to.rgb.percent = function() {
      var rgba = swizzle(arguments);
      var r = Math.round(rgba[0] / 255 * 100);
      var g = Math.round(rgba[1] / 255 * 100);
      var b = Math.round(rgba[2] / 255 * 100);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
    };
    cs.to.hsl = function() {
      var hsla = swizzle(arguments);
      return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
    };
    cs.to.hwb = function() {
      var hwba = swizzle(arguments);
      var a = "";
      if (hwba.length >= 4 && hwba[3] !== 1) {
        a = ", " + hwba[3];
      }
      return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
    };
    cs.to.keyword = function(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    };
    function clamp(num, min, max) {
      return Math.min(Math.max(min, num), max);
    }
    function hexDouble(num) {
      var str = Math.round(num).toString(16).toUpperCase();
      return str.length < 2 ? "0" + str : str;
    }
  }
});

// node_modules/color/node_modules/color-name/index.js
var require_color_name2 = __commonJS({
  "node_modules/color/node_modules/color-name/index.js"(exports, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/color/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/color/node_modules/color-convert/conversions.js"(exports, module2) {
    var cssKeywords = require_color_name2();
    var reverseKeywords = {};
    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }
    var key;
    var convert = module2.exports = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s2;
      var l2;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      l2 = (min + max) / 2;
      if (max === min) {
        s2 = 0;
      } else if (l2 <= 0.5) {
        s2 = delta / (max + min);
      } else {
        s2 = delta / (2 - max - min);
      }
      return [h, s2 * 100, l2 * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s2;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);
      var diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = s2 = 0;
      } else {
        s2 = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s2 * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l2;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l2 = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l2, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      var h = hsl[0] / 360;
      var s2 = hsl[1] / 100;
      var l2 = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s2 === 0) {
        val = l2 * 255;
        return [val, val, val];
      }
      if (l2 < 0.5) {
        t2 = l2 * (1 + s2);
      } else {
        t2 = l2 + s2 - l2 * s2;
      }
      t1 = 2 * l2 - t2;
      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h = hsl[0];
      var s2 = hsl[1] / 100;
      var l2 = hsl[2] / 100;
      var smin = s2;
      var lmin = Math.max(l2, 0.01);
      var sv;
      var v;
      l2 *= 2;
      s2 *= l2 <= 1 ? l2 : 2 - l2;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l2 + s2) / 2;
      sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l2 + s2);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h = hsv[0] / 60;
      var s2 = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s2);
      var q = 255 * v * (1 - s2 * f);
      var t = 255 * v * (1 - s2 * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h = hsv[0];
      var s2 = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l2;
      l2 = (2 - s2) * v;
      lmin = (2 - s2) * vmin;
      sl = s2 * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l2 /= 2;
      return [h, sl * 100, l2 * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v;
      var f;
      var n2;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      n2 = wh + f * (v - wh);
      var r;
      var g;
      var b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n2;
          b = wh;
          break;
        case 1:
          r = n2;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n2;
          break;
        case 3:
          r = wh;
          g = n2;
          b = v;
          break;
        case 4:
          r = n2;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n2;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l2;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l2 = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l2, a, b];
    };
    convert.lab.xyz = function(lab) {
      var l2 = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l2 + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      var l2 = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l2, c, h];
    };
    convert.lch.lab = function(lch) {
      var l2 = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l2, a, b];
    };
    convert.rgb.ansi16 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      var match2 = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match2) {
        return [0, 0, 0];
      }
      var colorString = match2[0];
      if (match2[0].length === 3) {
        colorString = colorString.split("").map(function(char) {
          return char + char;
        }).join("");
      }
      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s2 = hsl[1] / 100;
      var l2 = hsl[2] / 100;
      var c = 1;
      var f = 0;
      if (l2 < 0.5) {
        c = 2 * s2 * l2;
      } else {
        c = 2 * s2 * (1 - l2);
      }
      if (c < 1) {
        f = (l2 - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s2 = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s2 * v;
      var f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      var f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l2 = g * (1 - c) + 0.5 * c;
      var s2 = 0;
      if (l2 > 0 && l2 < 0.5) {
        s2 = c / (2 * l2);
      } else if (l2 >= 0.5 && l2 < 1) {
        s2 = c / (2 * (1 - l2));
      }
      return [hcg[0], s2 * 100, l2 * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/color/node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/color/node_modules/color-convert/route.js"(exports, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    module2.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/color/node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/color/node_modules/color-convert/index.js"(exports, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === "object") {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

// node_modules/color/index.js
var require_color = __commonJS({
  "node_modules/color/index.js"(exports, module2) {
    "use strict";
    var colorString = require_color_string();
    var convert = require_color_convert();
    var _slice = [].slice;
    var skippedModels = [
      // to be honest, I don't really feel like keyword belongs in color convert, but eh.
      "keyword",
      // gray conflicts with some method names, and has its own method defined.
      "gray",
      // shouldn't really be in color-convert either...
      "hex"
    ];
    var hashedModelKeys = {};
    Object.keys(convert).forEach(function(model) {
      hashedModelKeys[_slice.call(convert[model].labels).sort().join("")] = model;
    });
    var limiters = {};
    function Color(obj, model) {
      if (!(this instanceof Color)) {
        return new Color(obj, model);
      }
      if (model && model in skippedModels) {
        model = null;
      }
      if (model && !(model in convert)) {
        throw new Error("Unknown model: " + model);
      }
      var i;
      var channels;
      if (obj == null) {
        this.model = "rgb";
        this.color = [0, 0, 0];
        this.valpha = 1;
      } else if (obj instanceof Color) {
        this.model = obj.model;
        this.color = obj.color.slice();
        this.valpha = obj.valpha;
      } else if (typeof obj === "string") {
        var result = colorString.get(obj);
        if (result === null) {
          throw new Error("Unable to parse color from string: " + obj);
        }
        this.model = result.model;
        channels = convert[this.model].channels;
        this.color = result.value.slice(0, channels);
        this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
      } else if (obj.length) {
        this.model = model || "rgb";
        channels = convert[this.model].channels;
        var newArr = _slice.call(obj, 0, channels);
        this.color = zeroArray(newArr, channels);
        this.valpha = typeof obj[channels] === "number" ? obj[channels] : 1;
      } else if (typeof obj === "number") {
        obj &= 16777215;
        this.model = "rgb";
        this.color = [
          obj >> 16 & 255,
          obj >> 8 & 255,
          obj & 255
        ];
        this.valpha = 1;
      } else {
        this.valpha = 1;
        var keys = Object.keys(obj);
        if ("alpha" in obj) {
          keys.splice(keys.indexOf("alpha"), 1);
          this.valpha = typeof obj.alpha === "number" ? obj.alpha : 0;
        }
        var hashedKeys = keys.sort().join("");
        if (!(hashedKeys in hashedModelKeys)) {
          throw new Error("Unable to parse color from object: " + JSON.stringify(obj));
        }
        this.model = hashedModelKeys[hashedKeys];
        var labels = convert[this.model].labels;
        var color = [];
        for (i = 0; i < labels.length; i++) {
          color.push(obj[labels[i]]);
        }
        this.color = zeroArray(color);
      }
      if (limiters[this.model]) {
        channels = convert[this.model].channels;
        for (i = 0; i < channels; i++) {
          var limit = limiters[this.model][i];
          if (limit) {
            this.color[i] = limit(this.color[i]);
          }
        }
      }
      this.valpha = Math.max(0, Math.min(1, this.valpha));
      if (Object.freeze) {
        Object.freeze(this);
      }
    }
    Color.prototype = {
      toString: function() {
        return this.string();
      },
      toJSON: function() {
        return this[this.model]();
      },
      string: function(places) {
        var self2 = this.model in colorString.to ? this : this.rgb();
        self2 = self2.round(typeof places === "number" ? places : 1);
        var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
        return colorString.to[self2.model](args);
      },
      percentString: function(places) {
        var self2 = this.rgb().round(typeof places === "number" ? places : 1);
        var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
        return colorString.to.rgb.percent(args);
      },
      array: function() {
        return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
      },
      object: function() {
        var result = {};
        var channels = convert[this.model].channels;
        var labels = convert[this.model].labels;
        for (var i = 0; i < channels; i++) {
          result[labels[i]] = this.color[i];
        }
        if (this.valpha !== 1) {
          result.alpha = this.valpha;
        }
        return result;
      },
      unitArray: function() {
        var rgb = this.rgb().color;
        rgb[0] /= 255;
        rgb[1] /= 255;
        rgb[2] /= 255;
        if (this.valpha !== 1) {
          rgb.push(this.valpha);
        }
        return rgb;
      },
      unitObject: function() {
        var rgb = this.rgb().object();
        rgb.r /= 255;
        rgb.g /= 255;
        rgb.b /= 255;
        if (this.valpha !== 1) {
          rgb.alpha = this.valpha;
        }
        return rgb;
      },
      round: function(places) {
        places = Math.max(places || 0, 0);
        return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
      },
      alpha: function(val) {
        if (arguments.length) {
          return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
        }
        return this.valpha;
      },
      // rgb
      red: getset("rgb", 0, maxfn(255)),
      green: getset("rgb", 1, maxfn(255)),
      blue: getset("rgb", 2, maxfn(255)),
      hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, function(val) {
        return (val % 360 + 360) % 360;
      }),
      // eslint-disable-line brace-style
      saturationl: getset("hsl", 1, maxfn(100)),
      lightness: getset("hsl", 2, maxfn(100)),
      saturationv: getset("hsv", 1, maxfn(100)),
      value: getset("hsv", 2, maxfn(100)),
      chroma: getset("hcg", 1, maxfn(100)),
      gray: getset("hcg", 2, maxfn(100)),
      white: getset("hwb", 1, maxfn(100)),
      wblack: getset("hwb", 2, maxfn(100)),
      cyan: getset("cmyk", 0, maxfn(100)),
      magenta: getset("cmyk", 1, maxfn(100)),
      yellow: getset("cmyk", 2, maxfn(100)),
      black: getset("cmyk", 3, maxfn(100)),
      x: getset("xyz", 0, maxfn(100)),
      y: getset("xyz", 1, maxfn(100)),
      z: getset("xyz", 2, maxfn(100)),
      l: getset("lab", 0, maxfn(100)),
      a: getset("lab", 1),
      b: getset("lab", 2),
      keyword: function(val) {
        if (arguments.length) {
          return new Color(val);
        }
        return convert[this.model].keyword(this.color);
      },
      hex: function(val) {
        if (arguments.length) {
          return new Color(val);
        }
        return colorString.to.hex(this.rgb().round().color);
      },
      rgbNumber: function() {
        var rgb = this.rgb().color;
        return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
      },
      luminosity: function() {
        var rgb = this.rgb().color;
        var lum = [];
        for (var i = 0; i < rgb.length; i++) {
          var chan = rgb[i] / 255;
          lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },
      contrast: function(color2) {
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();
        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05);
        }
        return (lum2 + 0.05) / (lum1 + 0.05);
      },
      level: function(color2) {
        var contrastRatio = this.contrast(color2);
        if (contrastRatio >= 7.1) {
          return "AAA";
        }
        return contrastRatio >= 4.5 ? "AA" : "";
      },
      isDark: function() {
        var rgb = this.rgb().color;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
        return yiq < 128;
      },
      isLight: function() {
        return !this.isDark();
      },
      negate: function() {
        var rgb = this.rgb();
        for (var i = 0; i < 3; i++) {
          rgb.color[i] = 255 - rgb.color[i];
        }
        return rgb;
      },
      lighten: function(ratio) {
        var hsl = this.hsl();
        hsl.color[2] += hsl.color[2] * ratio;
        return hsl;
      },
      darken: function(ratio) {
        var hsl = this.hsl();
        hsl.color[2] -= hsl.color[2] * ratio;
        return hsl;
      },
      saturate: function(ratio) {
        var hsl = this.hsl();
        hsl.color[1] += hsl.color[1] * ratio;
        return hsl;
      },
      desaturate: function(ratio) {
        var hsl = this.hsl();
        hsl.color[1] -= hsl.color[1] * ratio;
        return hsl;
      },
      whiten: function(ratio) {
        var hwb = this.hwb();
        hwb.color[1] += hwb.color[1] * ratio;
        return hwb;
      },
      blacken: function(ratio) {
        var hwb = this.hwb();
        hwb.color[2] += hwb.color[2] * ratio;
        return hwb;
      },
      grayscale: function() {
        var rgb = this.rgb().color;
        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        return Color.rgb(val, val, val);
      },
      fade: function(ratio) {
        return this.alpha(this.valpha - this.valpha * ratio);
      },
      opaquer: function(ratio) {
        return this.alpha(this.valpha + this.valpha * ratio);
      },
      rotate: function(degrees) {
        var hsl = this.hsl();
        var hue = hsl.color[0];
        hue = (hue + degrees) % 360;
        hue = hue < 0 ? 360 + hue : hue;
        hsl.color[0] = hue;
        return hsl;
      },
      mix: function(mixinColor, weight) {
        if (!mixinColor || !mixinColor.rgb) {
          throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
        }
        var color1 = mixinColor.rgb();
        var color2 = this.rgb();
        var p = weight === void 0 ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
        var w2 = 1 - w1;
        return Color.rgb(
          w1 * color1.red() + w2 * color2.red(),
          w1 * color1.green() + w2 * color2.green(),
          w1 * color1.blue() + w2 * color2.blue(),
          color1.alpha() * p + color2.alpha() * (1 - p)
        );
      }
    };
    Object.keys(convert).forEach(function(model) {
      if (skippedModels.indexOf(model) !== -1) {
        return;
      }
      var channels = convert[model].channels;
      Color.prototype[model] = function() {
        if (this.model === model) {
          return new Color(this);
        }
        if (arguments.length) {
          return new Color(arguments, model);
        }
        var newAlpha = typeof arguments[channels] === "number" ? channels : this.valpha;
        return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
      };
      Color[model] = function(color) {
        if (typeof color === "number") {
          color = zeroArray(_slice.call(arguments), channels);
        }
        return new Color(color, model);
      };
    });
    function roundTo2(num, places) {
      return Number(num.toFixed(places));
    }
    function roundToPlace(places) {
      return function(num) {
        return roundTo2(num, places);
      };
    }
    function getset(model, channel, modifier) {
      model = Array.isArray(model) ? model : [model];
      model.forEach(function(m) {
        (limiters[m] || (limiters[m] = []))[channel] = modifier;
      });
      model = model[0];
      return function(val) {
        var result;
        if (arguments.length) {
          if (modifier) {
            val = modifier(val);
          }
          result = this[model]();
          result.color[channel] = val;
          return result;
        }
        result = this[model]().color[channel];
        if (modifier) {
          result = modifier(result);
        }
        return result;
      };
    }
    function maxfn(max) {
      return function(v) {
        return Math.max(0, Math.min(max, v));
      };
    }
    function assertArray(val) {
      return Array.isArray(val) ? val : [val];
    }
    function zeroArray(arr, length) {
      for (var i = 0; i < length; i++) {
        if (typeof arr[i] !== "number") {
          arr[i] = 0;
        }
      }
      return arr;
    }
    module2.exports = Color;
  }
});

// node_modules/text-hex/index.js
var require_text_hex = __commonJS({
  "node_modules/text-hex/index.js"(exports, module2) {
    "use strict";
    module2.exports = function hex(str) {
      for (var i = 0, hash = 0; i < str.length; hash = str.charCodeAt(i++) + ((hash << 5) - hash)) ;
      var color = Math.floor(
        Math.abs(
          Math.sin(hash) * 1e4 % 1 * 16777216
        )
      ).toString(16);
      return "#" + Array(6 - color.length + 1).join("0") + color;
    };
  }
});

// node_modules/colorspace/index.js
var require_colorspace = __commonJS({
  "node_modules/colorspace/index.js"(exports, module2) {
    "use strict";
    var color = require_color();
    var hex = require_text_hex();
    module2.exports = function colorspace(namespace, delimiter) {
      var split2 = namespace.split(delimiter || ":");
      var base = hex(split2[0]);
      if (!split2.length) return base;
      for (var i = 0, l2 = split2.length - 1; i < l2; i++) {
        base = color(base).mix(color(hex(split2[i + 1]))).saturate(1).hex();
      }
      return base;
    };
  }
});

// node_modules/@dabh/diagnostics/modifiers/namespace.js
var require_namespace = __commonJS({
  "node_modules/@dabh/diagnostics/modifiers/namespace.js"(exports, module2) {
    var colorspace = require_colorspace();
    module2.exports = function colorNamespace(args, options) {
      var namespace = options.namespace;
      if (options.colors === false) {
        args[0] = namespace + ": " + args[0];
        return args;
      }
      var color = colorspace(namespace);
      args[0] = "%c" + namespace + ":%c " + args[0];
      args.splice(1, 0, "color:" + color, "color:inherit");
      return args;
    };
  }
});

// node_modules/enabled/index.js
var require_enabled = __commonJS({
  "node_modules/enabled/index.js"(exports, module2) {
    "use strict";
    module2.exports = function enabled(name, variable) {
      if (!variable) return false;
      var variables = variable.split(/[\s,]+/), i = 0;
      for (; i < variables.length; i++) {
        variable = variables[i].replace("*", ".*?");
        if ("-" === variable.charAt(0)) {
          if (new RegExp("^" + variable.substr(1) + "$").test(name)) {
            return false;
          }
          continue;
        }
        if (new RegExp("^" + variable + "$").test(name)) {
          return true;
        }
      }
      return false;
    };
  }
});

// node_modules/@dabh/diagnostics/adapters/index.js
var require_adapters = __commonJS({
  "node_modules/@dabh/diagnostics/adapters/index.js"(exports, module2) {
    var enabled = require_enabled();
    module2.exports = function create(fn) {
      return function adapter(namespace) {
        try {
          return enabled(namespace, fn());
        } catch (e) {
        }
        return false;
      };
    };
  }
});

// node_modules/@dabh/diagnostics/adapters/localstorage.js
var require_localstorage = __commonJS({
  "node_modules/@dabh/diagnostics/adapters/localstorage.js"(exports, module2) {
    var adapter = require_adapters();
    module2.exports = adapter(function storage() {
      return localStorage.getItem("debug") || localStorage.getItem("diagnostics");
    });
  }
});

// node_modules/@dabh/diagnostics/adapters/hash.js
var require_hash = __commonJS({
  "node_modules/@dabh/diagnostics/adapters/hash.js"(exports, module2) {
    var adapter = require_adapters();
    module2.exports = adapter(function hash() {
      return /(debug|diagnostics)=([^&]+)/i.exec(window.location.hash)[2];
    });
  }
});

// node_modules/@dabh/diagnostics/logger/console.js
var require_console2 = __commonJS({
  "node_modules/@dabh/diagnostics/logger/console.js"(exports, module2) {
    module2.exports = function(meta, messages) {
      try {
        Function.prototype.apply.call(console.log, console, messages);
      } catch (e) {
      }
    };
  }
});

// node_modules/@dabh/diagnostics/browser/development.js
var require_development = __commonJS({
  "node_modules/@dabh/diagnostics/browser/development.js"(exports, module2) {
    var create = require_diagnostics();
    var diagnostics = create(function dev(namespace, options) {
      options = options || {};
      options.namespace = namespace;
      options.prod = false;
      options.dev = true;
      if (!dev.enabled(namespace) && !(options.force || dev.force)) {
        return dev.nope(options);
      }
      return dev.yep(options);
    });
    diagnostics.modify(require_namespace());
    diagnostics.use(require_localstorage());
    diagnostics.use(require_hash());
    diagnostics.set(require_console2());
    module2.exports = diagnostics;
  }
});

// node_modules/@dabh/diagnostics/browser/index.js
var require_browser3 = __commonJS({
  "node_modules/@dabh/diagnostics/browser/index.js"(exports, module2) {
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_development();
    }
  }
});

// node_modules/winston/dist/winston/tail-file.js
var require_tail_file = __commonJS({
  "node_modules/winston/dist/winston/tail-file.js"(exports, module2) {
    "use strict";
    var fs = require("fs");
    var _require = require("string_decoder");
    var StringDecoder = _require.StringDecoder;
    var _require2 = require_readable_browser();
    var Stream = _require2.Stream;
    function noop() {
    }
    module2.exports = function(options, iter2) {
      var buffer = Buffer.alloc(64 * 1024);
      var decode = new StringDecoder("utf8");
      var stream = new Stream();
      var buff = "";
      var pos = 0;
      var row = 0;
      if (options.start === -1) {
        delete options.start;
      }
      stream.readable = true;
      stream.destroy = function() {
        stream.destroyed = true;
        stream.emit("end");
        stream.emit("close");
      };
      fs.open(options.file, "a+", "0644", function(err, fd) {
        if (err) {
          if (!iter2) {
            stream.emit("error", err);
          } else {
            iter2(err);
          }
          stream.destroy();
          return;
        }
        (function read() {
          if (stream.destroyed) {
            fs.close(fd, noop);
            return;
          }
          return fs.read(fd, buffer, 0, buffer.length, pos, function(error, bytes) {
            if (error) {
              if (!iter2) {
                stream.emit("error", error);
              } else {
                iter2(error);
              }
              stream.destroy();
              return;
            }
            if (!bytes) {
              if (buff) {
                if (options.start == null || row > options.start) {
                  if (!iter2) {
                    stream.emit("line", buff);
                  } else {
                    iter2(null, buff);
                  }
                }
                row++;
                buff = "";
              }
              return setTimeout(read, 1e3);
            }
            var data = decode.write(buffer.slice(0, bytes));
            if (!iter2) {
              stream.emit("data", data);
            }
            data = (buff + data).split(/\n+/);
            var l2 = data.length - 1;
            var i = 0;
            for (; i < l2; i++) {
              if (options.start == null || row > options.start) {
                if (!iter2) {
                  stream.emit("line", data[i]);
                } else {
                  iter2(null, data[i]);
                }
              }
              row++;
            }
            buff = data[l2];
            pos += bytes;
            return read();
          });
        })();
      });
      if (!iter2) {
        return stream;
      }
      return stream.destroy;
    };
  }
});

// node_modules/winston/dist/winston/transports/file.js
var require_file = __commonJS({
  "node_modules/winston/dist/winston/transports/file.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    var fs = require("fs");
    var path = require("path");
    var asyncSeries = require_series();
    var zlib = require("zlib");
    var _require = require_triple_beam();
    var MESSAGE = _require.MESSAGE;
    var _require2 = require_readable_browser();
    var Stream = _require2.Stream;
    var PassThrough = _require2.PassThrough;
    var TransportStream = require_dist();
    var debug = require_browser3()("winston:file");
    var os = require("os");
    var tailFile = require_tail_file();
    module2.exports = /* @__PURE__ */ function(_TransportStream) {
      function File() {
        var _this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, File);
        _this = _callSuper(this, File, [options]);
        _this.name = options.name || "file";
        function throwIf(target) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          args.slice(1).forEach(function(name) {
            if (options[name]) {
              throw new Error("Cannot set ".concat(name, " and ").concat(target, " together"));
            }
          });
        }
        _this._stream = new PassThrough();
        _this._stream.setMaxListeners(30);
        _this._onError = _this._onError.bind(_this);
        if (options.filename || options.dirname) {
          throwIf("filename or dirname", "stream");
          _this._basename = _this.filename = options.filename ? path.basename(options.filename) : "winston.log";
          _this.dirname = options.dirname || path.dirname(options.filename);
          _this.options = options.options || {
            flags: "a"
          };
        } else if (options.stream) {
          console.warn("options.stream will be removed in winston@4. Use winston.transports.Stream");
          throwIf("stream", "filename", "maxsize");
          _this._dest = _this._stream.pipe(_this._setupStream(options.stream));
          _this.dirname = path.dirname(_this._dest.path);
        } else {
          throw new Error("Cannot log to file without filename or stream.");
        }
        _this.maxsize = options.maxsize || null;
        _this.rotationFormat = options.rotationFormat || false;
        _this.zippedArchive = options.zippedArchive || false;
        _this.maxFiles = options.maxFiles || null;
        _this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
        _this.tailable = options.tailable || false;
        _this.lazy = options.lazy || false;
        _this._size = 0;
        _this._pendingSize = 0;
        _this._created = 0;
        _this._drain = false;
        _this._opening = false;
        _this._ending = false;
        _this._fileExist = false;
        if (_this.dirname) _this._createLogDirIfNotExist(_this.dirname);
        if (!_this.lazy) _this.open();
        return _this;
      }
      _inherits(File, _TransportStream);
      return _createClass(File, [{
        key: "finishIfEnding",
        value: function finishIfEnding() {
          var _this2 = this;
          if (this._ending) {
            if (this._opening) {
              this.once("open", function() {
                _this2._stream.once("finish", function() {
                  return _this2.emit("finish");
                });
                setImmediate(function() {
                  return _this2._stream.end();
                });
              });
            } else {
              this._stream.once("finish", function() {
                return _this2.emit("finish");
              });
              setImmediate(function() {
                return _this2._stream.end();
              });
            }
          }
        }
        /**
         * Core logging method exposed to Winston. Metadata is optional.
         * @param {Object} info - TODO: add param description.
         * @param {Function} callback - TODO: add param description.
         * @returns {undefined}
         */
      }, {
        key: "log",
        value: function log(info) {
          var _this3 = this;
          var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
          };
          if (this.silent) {
            callback();
            return true;
          }
          if (this._drain) {
            this._stream.once("drain", function() {
              _this3._drain = false;
              _this3.log(info, callback);
            });
            return;
          }
          if (this._rotate) {
            this._stream.once("rotate", function() {
              _this3._rotate = false;
              _this3.log(info, callback);
            });
            return;
          }
          if (this.lazy) {
            if (!this._fileExist) {
              if (!this._opening) {
                this.open();
              }
              this.once("open", function() {
                _this3._fileExist = true;
                _this3.log(info, callback);
                return;
              });
              return;
            }
            if (this._needsNewFile(this._pendingSize)) {
              this._dest.once("close", function() {
                if (!_this3._opening) {
                  _this3.open();
                }
                _this3.once("open", function() {
                  _this3.log(info, callback);
                  return;
                });
                return;
              });
              return;
            }
          }
          var output = "".concat(info[MESSAGE]).concat(this.eol);
          var bytes = Buffer.byteLength(output);
          function logged() {
            var _this4 = this;
            this._size += bytes;
            this._pendingSize -= bytes;
            debug("logged %s %s", this._size, output);
            this.emit("logged", info);
            if (this._rotate) {
              return;
            }
            if (this._opening) {
              return;
            }
            if (!this._needsNewFile()) {
              return;
            }
            if (this.lazy) {
              this._endStream(function() {
                _this4.emit("fileclosed");
              });
              return;
            }
            this._rotate = true;
            this._endStream(function() {
              return _this4._rotateFile();
            });
          }
          this._pendingSize += bytes;
          if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) {
            this.rotatedWhileOpening = true;
          }
          var written = this._stream.write(output, logged.bind(this));
          if (!written) {
            this._drain = true;
            this._stream.once("drain", function() {
              _this3._drain = false;
              callback();
            });
          } else {
            callback();
          }
          debug("written", written, this._drain);
          this.finishIfEnding();
          return written;
        }
        /**
         * Query the transport. Options object is optional.
         * @param {Object} options - Loggly-like query options for this instance.
         * @param {function} callback - Continuation to respond to when complete.
         * TODO: Refactor me.
         */
      }, {
        key: "query",
        value: function query(options, callback) {
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          options = normalizeQuery(options);
          var file = path.join(this.dirname, this.filename);
          var buff = "";
          var results = [];
          var row = 0;
          var stream = fs.createReadStream(file, {
            encoding: "utf8"
          });
          stream.on("error", function(err) {
            if (stream.readable) {
              stream.destroy();
            }
            if (!callback) {
              return;
            }
            return err.code !== "ENOENT" ? callback(err) : callback(null, results);
          });
          stream.on("data", function(data) {
            data = (buff + data).split(/\n+/);
            var l2 = data.length - 1;
            var i = 0;
            for (; i < l2; i++) {
              if (!options.start || row >= options.start) {
                add(data[i]);
              }
              row++;
            }
            buff = data[l2];
          });
          stream.on("close", function() {
            if (buff) {
              add(buff, true);
            }
            if (options.order === "desc") {
              results = results.reverse();
            }
            if (callback) callback(null, results);
          });
          function add(buff2, attempt) {
            try {
              var log = JSON.parse(buff2);
              if (check(log)) {
                push(log);
              }
            } catch (e) {
              if (!attempt) {
                stream.emit("error", e);
              }
            }
          }
          function push(log) {
            if (options.rows && results.length >= options.rows && options.order !== "desc") {
              if (stream.readable) {
                stream.destroy();
              }
              return;
            }
            if (options.fields) {
              log = options.fields.reduce(function(obj, key) {
                obj[key] = log[key];
                return obj;
              }, {});
            }
            if (options.order === "desc") {
              if (results.length >= options.rows) {
                results.shift();
              }
            }
            results.push(log);
          }
          function check(log) {
            if (!log) {
              return;
            }
            if (_typeof(log) !== "object") {
              return;
            }
            var time = new Date(log.timestamp);
            if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log.level) {
              return;
            }
            return true;
          }
          function normalizeQuery(options2) {
            options2 = options2 || {};
            options2.rows = options2.rows || options2.limit || 10;
            options2.start = options2.start || 0;
            options2.until = options2.until || /* @__PURE__ */ new Date();
            if (_typeof(options2.until) !== "object") {
              options2.until = new Date(options2.until);
            }
            options2.from = options2.from || options2.until - 24 * 60 * 60 * 1e3;
            if (_typeof(options2.from) !== "object") {
              options2.from = new Date(options2.from);
            }
            options2.order = options2.order || "desc";
            return options2;
          }
        }
        /**
         * Returns a log stream for this transport. Options object is optional.
         * @param {Object} options - Stream options for this instance.
         * @returns {Stream} - TODO: add return description.
         * TODO: Refactor me.
         */
      }, {
        key: "stream",
        value: function stream() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var file = path.join(this.dirname, this.filename);
          var stream2 = new Stream();
          var tail = {
            file,
            start: options.start
          };
          stream2.destroy = tailFile(tail, function(err, line) {
            if (err) {
              return stream2.emit("error", err);
            }
            try {
              stream2.emit("data", line);
              line = JSON.parse(line);
              stream2.emit("log", line);
            } catch (e) {
              stream2.emit("error", e);
            }
          });
          return stream2;
        }
        /**
         * Checks to see the filesize of.
         * @returns {undefined}
         */
      }, {
        key: "open",
        value: function open() {
          var _this5 = this;
          if (!this.filename) return;
          if (this._opening) return;
          this._opening = true;
          this.stat(function(err, size) {
            if (err) {
              return _this5.emit("error", err);
            }
            debug("stat done: %s { size: %s }", _this5.filename, size);
            _this5._size = size;
            _this5._dest = _this5._createStream(_this5._stream);
            _this5._opening = false;
            _this5.once("open", function() {
              if (!_this5._stream.emit("rotate")) {
                _this5._rotate = false;
              }
            });
          });
        }
        /**
         * Stat the file and assess information in order to create the proper stream.
         * @param {function} callback - TODO: add param description.
         * @returns {undefined}
         */
      }, {
        key: "stat",
        value: function stat(callback) {
          var _this6 = this;
          var target = this._getFile();
          var fullpath = path.join(this.dirname, target);
          fs.stat(fullpath, function(err, stat2) {
            if (err && err.code === "ENOENT") {
              debug("ENOENT\xA0ok", fullpath);
              _this6.filename = target;
              return callback(null, 0);
            }
            if (err) {
              debug("err ".concat(err.code, " ").concat(fullpath));
              return callback(err);
            }
            if (!stat2 || _this6._needsNewFile(stat2.size)) {
              return _this6._incFile(function() {
                return _this6.stat(callback);
              });
            }
            _this6.filename = target;
            callback(null, stat2.size);
          });
        }
        /**
         * Closes the stream associated with this instance.
         * @param {function} cb - TODO: add param description.
         * @returns {undefined}
         */
      }, {
        key: "close",
        value: function close(cb) {
          var _this7 = this;
          if (!this._stream) {
            return;
          }
          this._stream.end(function() {
            if (cb) {
              cb();
            }
            _this7.emit("flush");
            _this7.emit("closed");
          });
        }
        /**
         * TODO: add method description.
         * @param {number} size - TODO: add param description.
         * @returns {undefined}
         */
      }, {
        key: "_needsNewFile",
        value: function _needsNewFile(size) {
          size = size || this._size;
          return this.maxsize && size >= this.maxsize;
        }
        /**
         * TODO: add method description.
         * @param {Error} err - TODO: add param description.
         * @returns {undefined}
         */
      }, {
        key: "_onError",
        value: function _onError(err) {
          this.emit("error", err);
        }
        /**
         * TODO: add method description.
         * @param {Stream} stream - TODO: add param description.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "_setupStream",
        value: function _setupStream(stream) {
          stream.on("error", this._onError);
          return stream;
        }
        /**
         * TODO: add method description.
         * @param {Stream} stream - TODO: add param description.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "_cleanupStream",
        value: function _cleanupStream(stream) {
          stream.removeListener("error", this._onError);
          stream.destroy();
          return stream;
        }
        /**
         * TODO: add method description.
         */
      }, {
        key: "_rotateFile",
        value: function _rotateFile() {
          var _this8 = this;
          this._incFile(function() {
            return _this8.open();
          });
        }
        /**
         * Unpipe from the stream that has been marked as full and end it so it
         * flushes to disk.
         *
         * @param {function} callback - Callback for when the current file has closed.
         * @private
         */
      }, {
        key: "_endStream",
        value: function _endStream() {
          var _this9 = this;
          var callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
          };
          if (this._dest) {
            this._stream.unpipe(this._dest);
            this._dest.end(function() {
              _this9._cleanupStream(_this9._dest);
              callback();
            });
          } else {
            callback();
          }
        }
        /**
         * Returns the WritableStream for the active file on this instance. If we
         * should gzip the file then a zlib stream is returned.
         *
         * @param {ReadableStream} source –PassThrough to pipe to the file when open.
         * @returns {WritableStream} Stream that writes to disk for the active file.
         */
      }, {
        key: "_createStream",
        value: function _createStream(source) {
          var _this10 = this;
          var fullpath = path.join(this.dirname, this.filename);
          debug("create stream start", fullpath, this.options);
          var dest = fs.createWriteStream(fullpath, this.options).on("error", function(err) {
            return debug(err);
          }).on("close", function() {
            return debug("close", dest.path, dest.bytesWritten);
          }).on("open", function() {
            debug("file open ok", fullpath);
            _this10.emit("open", fullpath);
            source.pipe(dest);
            if (_this10.rotatedWhileOpening) {
              _this10._stream = new PassThrough();
              _this10._stream.setMaxListeners(30);
              _this10._rotateFile();
              _this10.rotatedWhileOpening = false;
              _this10._cleanupStream(dest);
              source.end();
            }
          });
          debug("create stream ok", fullpath);
          return dest;
        }
        /**
         * TODO: add method description.
         * @param {function} callback - TODO: add param description.
         * @returns {undefined}
         */
      }, {
        key: "_incFile",
        value: function _incFile(callback) {
          debug("_incFile", this.filename);
          var ext = path.extname(this._basename);
          var basename = path.basename(this._basename, ext);
          var tasks = [];
          if (this.zippedArchive) {
            tasks.push(function(cb) {
              var num = this._created > 0 && !this.tailable ? this._created : "";
              this._compressFile(path.join(this.dirname, "".concat(basename).concat(num).concat(ext)), path.join(this.dirname, "".concat(basename).concat(num).concat(ext, ".gz")), cb);
            }.bind(this));
          }
          tasks.push(function(cb) {
            if (!this.tailable) {
              this._created += 1;
              this._checkMaxFilesIncrementing(ext, basename, cb);
            } else {
              this._checkMaxFilesTailable(ext, basename, cb);
            }
          }.bind(this));
          asyncSeries(tasks, callback);
        }
        /**
         * Gets the next filename to use for this instance in the case that log
         * filesizes are being capped.
         * @returns {string} - TODO: add return description.
         * @private
         */
      }, {
        key: "_getFile",
        value: function _getFile() {
          var ext = path.extname(this._basename);
          var basename = path.basename(this._basename, ext);
          var isRotation = this.rotationFormat ? this.rotationFormat() : this._created;
          return !this.tailable && this._created ? "".concat(basename).concat(isRotation).concat(ext) : "".concat(basename).concat(ext);
        }
        /**
         * Increment the number of files created or checked by this instance.
         * @param {mixed} ext - TODO: add param description.
         * @param {mixed} basename - TODO: add param description.
         * @param {mixed} callback - TODO: add param description.
         * @returns {undefined}
         * @private
         */
      }, {
        key: "_checkMaxFilesIncrementing",
        value: function _checkMaxFilesIncrementing(ext, basename, callback) {
          if (!this.maxFiles || this._created < this.maxFiles) {
            return setImmediate(callback);
          }
          var oldest = this._created - this.maxFiles;
          var isOldest = oldest !== 0 ? oldest : "";
          var isZipped = this.zippedArchive ? ".gz" : "";
          var filePath = "".concat(basename).concat(isOldest).concat(ext).concat(isZipped);
          var target = path.join(this.dirname, filePath);
          fs.unlink(target, callback);
        }
        /**
         * Roll files forward based on integer, up to maxFiles. e.g. if base if
         * file.log and it becomes oversized, roll to file1.log, and allow file.log
         * to be re-used. If file is oversized again, roll file1.log to file2.log,
         * roll file.log to file1.log, and so on.
         * @param {mixed} ext - TODO: add param description.
         * @param {mixed} basename - TODO: add param description.
         * @param {mixed} callback - TODO: add param description.
         * @returns {undefined}
         * @private
         */
      }, {
        key: "_checkMaxFilesTailable",
        value: function _checkMaxFilesTailable(ext, basename, callback) {
          var _this12 = this;
          var tasks = [];
          if (!this.maxFiles) {
            return;
          }
          var isZipped = this.zippedArchive ? ".gz" : "";
          for (var x = this.maxFiles - 1; x > 1; x--) {
            tasks.push(function(i, cb) {
              var _this11 = this;
              var fileName = "".concat(basename).concat(i - 1).concat(ext).concat(isZipped);
              var tmppath = path.join(this.dirname, fileName);
              fs.exists(tmppath, function(exists) {
                if (!exists) {
                  return cb(null);
                }
                fileName = "".concat(basename).concat(i).concat(ext).concat(isZipped);
                fs.rename(tmppath, path.join(_this11.dirname, fileName), cb);
              });
            }.bind(this, x));
          }
          asyncSeries(tasks, function() {
            fs.rename(path.join(_this12.dirname, "".concat(basename).concat(ext).concat(isZipped)), path.join(_this12.dirname, "".concat(basename, "1").concat(ext).concat(isZipped)), callback);
          });
        }
        /**
         * Compresses src to dest with gzip and unlinks src
         * @param {string} src - path to source file.
         * @param {string} dest - path to zipped destination file.
         * @param {Function} callback - callback called after file has been compressed.
         * @returns {undefined}
         * @private
         */
      }, {
        key: "_compressFile",
        value: function _compressFile(src, dest, callback) {
          fs.access(src, fs.F_OK, function(err) {
            if (err) {
              return callback();
            }
            var gzip = zlib.createGzip();
            var inp = fs.createReadStream(src);
            var out = fs.createWriteStream(dest);
            out.on("finish", function() {
              fs.unlink(src, callback);
            });
            inp.pipe(gzip).pipe(out);
          });
        }
      }, {
        key: "_createLogDirIfNotExist",
        value: function _createLogDirIfNotExist(dirPath) {
          if (!fs.existsSync(dirPath)) {
            fs.mkdirSync(dirPath, {
              recursive: true
            });
          }
        }
      }]);
    }(TransportStream);
  }
});

// node_modules/winston/dist/winston/transports/http.js
var require_http = __commonJS({
  "node_modules/winston/dist/winston/transports/http.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function ownKeys(e, r) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r2) {
          return Object.getOwnPropertyDescriptor(e, r2).enumerable;
        })), t.push.apply(t, o);
      }
      return t;
    }
    function _objectSpread(e) {
      for (var r = 1; r < arguments.length; r++) {
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
          _defineProperty(e, r2, t[r2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
          Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
        });
      }
      return e;
    }
    function _defineProperty(e, r, t) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    var http = require("http");
    var https = require("https");
    var _require = require_readable_browser();
    var Stream = _require.Stream;
    var TransportStream = require_dist();
    var _require2 = require_safe_stable_stringify();
    var configure = _require2.configure;
    module2.exports = /* @__PURE__ */ function(_TransportStream) {
      function Http() {
        var _this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Http);
        _this = _callSuper(this, Http, [options]);
        _this.options = options;
        _this.name = options.name || "http";
        _this.ssl = !!options.ssl;
        _this.host = options.host || "localhost";
        _this.port = options.port;
        _this.auth = options.auth;
        _this.path = options.path || "";
        _this.maximumDepth = options.maximumDepth;
        _this.agent = options.agent;
        _this.headers = options.headers || {};
        _this.headers["content-type"] = "application/json";
        _this.batch = options.batch || false;
        _this.batchInterval = options.batchInterval || 5e3;
        _this.batchCount = options.batchCount || 10;
        _this.batchOptions = [];
        _this.batchTimeoutID = -1;
        _this.batchCallback = {};
        if (!_this.port) {
          _this.port = _this.ssl ? 443 : 80;
        }
        return _this;
      }
      _inherits(Http, _TransportStream);
      return _createClass(Http, [{
        key: "log",
        value: function log(info, callback) {
          var _this2 = this;
          this._request(info, null, null, function(err, res) {
            if (res && res.statusCode !== 200) {
              err = new Error("Invalid HTTP Status Code: ".concat(res.statusCode));
            }
            if (err) {
              _this2.emit("warn", err);
            } else {
              _this2.emit("logged", info);
            }
          });
          if (callback) {
            setImmediate(callback);
          }
        }
        /**
         * Query the transport. Options object is optional.
         * @param {Object} options -  Loggly-like query options for this instance.
         * @param {function} callback - Continuation to respond to when complete.
         * @returns {undefined}
         */
      }, {
        key: "query",
        value: function query(options, callback) {
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          options = {
            method: "query",
            params: this.normalizeQuery(options)
          };
          var auth = options.params.auth || null;
          delete options.params.auth;
          var path = options.params.path || null;
          delete options.params.path;
          this._request(options, auth, path, function(err, res, body) {
            if (res && res.statusCode !== 200) {
              err = new Error("Invalid HTTP Status Code: ".concat(res.statusCode));
            }
            if (err) {
              return callback(err);
            }
            if (typeof body === "string") {
              try {
                body = JSON.parse(body);
              } catch (e) {
                return callback(e);
              }
            }
            callback(null, body);
          });
        }
        /**
         * Returns a log stream for this transport. Options object is optional.
         * @param {Object} options - Stream options for this instance.
         * @returns {Stream} - TODO: add return description
         */
      }, {
        key: "stream",
        value: function stream() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var stream2 = new Stream();
          options = {
            method: "stream",
            params: options
          };
          var path = options.params.path || null;
          delete options.params.path;
          var auth = options.params.auth || null;
          delete options.params.auth;
          var buff = "";
          var req = this._request(options, auth, path);
          stream2.destroy = function() {
            return req.destroy();
          };
          req.on("data", function(data) {
            data = (buff + data).split(/\n+/);
            var l2 = data.length - 1;
            var i = 0;
            for (; i < l2; i++) {
              try {
                stream2.emit("log", JSON.parse(data[i]));
              } catch (e) {
                stream2.emit("error", e);
              }
            }
            buff = data[l2];
          });
          req.on("error", function(err) {
            return stream2.emit("error", err);
          });
          return stream2;
        }
        /**
         * Make a request to a winstond server or any http server which can
         * handle json-rpc.
         * @param {function} options - Options to sent the request.
         * @param {Object?} auth - authentication options
         * @param {string} path - request path
         * @param {function} callback - Continuation to respond to when complete.
         */
      }, {
        key: "_request",
        value: function _request(options, auth, path, callback) {
          options = options || {};
          auth = auth || this.auth;
          path = path || this.path || "";
          if (this.batch) {
            this._doBatch(options, callback, auth, path);
          } else {
            this._doRequest(options, callback, auth, path);
          }
        }
        /**
         * Send or memorize the options according to batch configuration
         * @param {function} options - Options to sent the request.
         * @param {function} callback - Continuation to respond to when complete.
         * @param {Object?} auth - authentication options
         * @param {string} path - request path
         */
      }, {
        key: "_doBatch",
        value: function _doBatch(options, callback, auth, path) {
          this.batchOptions.push(options);
          if (this.batchOptions.length === 1) {
            var me = this;
            this.batchCallback = callback;
            this.batchTimeoutID = setTimeout(function() {
              me.batchTimeoutID = -1;
              me._doBatchRequest(me.batchCallback, auth, path);
            }, this.batchInterval);
          }
          if (this.batchOptions.length === this.batchCount) {
            this._doBatchRequest(this.batchCallback, auth, path);
          }
        }
        /**
         * Initiate a request with the memorized batch options, stop the batch timeout
         * @param {function} callback - Continuation to respond to when complete.
         * @param {Object?} auth - authentication options
         * @param {string} path - request path
         */
      }, {
        key: "_doBatchRequest",
        value: function _doBatchRequest(callback, auth, path) {
          if (this.batchTimeoutID > 0) {
            clearTimeout(this.batchTimeoutID);
            this.batchTimeoutID = -1;
          }
          var batchOptionsCopy = this.batchOptions.slice();
          this.batchOptions = [];
          this._doRequest(batchOptionsCopy, callback, auth, path);
        }
        /**
         * Make a request to a winstond server or any http server which can
         * handle json-rpc.
         * @param {function} options - Options to sent the request.
         * @param {function} callback - Continuation to respond to when complete.
         * @param {Object?} auth - authentication options
         * @param {string} path - request path
         */
      }, {
        key: "_doRequest",
        value: function _doRequest(options, callback, auth, path) {
          var headers = Object.assign({}, this.headers);
          if (auth && auth.bearer) {
            headers.Authorization = "Bearer ".concat(auth.bearer);
          }
          var req = (this.ssl ? https : http).request(_objectSpread(_objectSpread({}, this.options), {}, {
            method: "POST",
            host: this.host,
            port: this.port,
            path: "/".concat(path.replace(/^\//, "")),
            headers,
            auth: auth && auth.username && auth.password ? "".concat(auth.username, ":").concat(auth.password) : "",
            agent: this.agent
          }));
          req.on("error", callback);
          req.on("response", function(res) {
            return res.on("end", function() {
              return callback(null, res);
            }).resume();
          });
          var jsonStringify = configure(_objectSpread({}, this.maximumDepth && {
            maximumDepth: this.maximumDepth
          }));
          req.end(Buffer.from(jsonStringify(options, this.options.replacer), "utf8"));
        }
      }]);
    }(TransportStream);
  }
});

// node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "node_modules/is-stream/index.js"(exports, module2) {
    "use strict";
    var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
    isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function";
    module2.exports = isStream;
  }
});

// node_modules/winston/dist/winston/transports/stream.js
var require_stream = __commonJS({
  "node_modules/winston/dist/winston/transports/stream.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    var isStream = require_is_stream();
    var _require = require_triple_beam();
    var MESSAGE = _require.MESSAGE;
    var os = require("os");
    var TransportStream = require_dist();
    module2.exports = /* @__PURE__ */ function(_TransportStream) {
      function Stream() {
        var _this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Stream);
        _this = _callSuper(this, Stream, [options]);
        if (!options.stream || !isStream(options.stream)) {
          throw new Error("options.stream is required.");
        }
        _this._stream = options.stream;
        _this._stream.setMaxListeners(Infinity);
        _this.isObjectMode = options.stream._writableState.objectMode;
        _this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
        return _this;
      }
      _inherits(Stream, _TransportStream);
      return _createClass(Stream, [{
        key: "log",
        value: function log(info, callback) {
          var _this2 = this;
          setImmediate(function() {
            return _this2.emit("logged", info);
          });
          if (this.isObjectMode) {
            this._stream.write(info);
            if (callback) {
              callback();
            }
            return;
          }
          this._stream.write("".concat(info[MESSAGE]).concat(this.eol));
          if (callback) {
            callback();
          }
          return;
        }
      }]);
    }(TransportStream);
  }
});

// node_modules/winston/dist/winston/transports/index.js
var require_transports = __commonJS({
  "node_modules/winston/dist/winston/transports/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "Console", {
      configurable: true,
      enumerable: true,
      get: function get() {
        return require_console();
      }
    });
    Object.defineProperty(exports, "File", {
      configurable: true,
      enumerable: true,
      get: function get() {
        return require_file();
      }
    });
    Object.defineProperty(exports, "Http", {
      configurable: true,
      enumerable: true,
      get: function get() {
        return require_http();
      }
    });
    Object.defineProperty(exports, "Stream", {
      configurable: true,
      enumerable: true,
      get: function get() {
        return require_stream();
      }
    });
  }
});

// node_modules/winston/dist/winston/config/index.js
var require_config2 = __commonJS({
  "node_modules/winston/dist/winston/config/index.js"(exports) {
    "use strict";
    var logform = require_browser();
    var _require = require_triple_beam();
    var configs = _require.configs;
    exports.cli = logform.levels(configs.cli);
    exports.npm = logform.levels(configs.npm);
    exports.syslog = logform.levels(configs.syslog);
    exports.addColors = logform.levels;
  }
});

// node_modules/async/eachOf.js
var require_eachOf = __commonJS({
  "node_modules/async/eachOf.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    var _eachOfLimit = require_eachOfLimit2();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfArrayLike(coll, iteratee, callback) {
      callback = (0, _once2.default)(callback);
      var index = 0, completed = 0, { length } = coll, canceled = false;
      if (length === 0) {
        callback(null);
      }
      function iteratorCallback(err, value) {
        if (err === false) {
          canceled = true;
        }
        if (canceled === true) return;
        if (err) {
          callback(err);
        } else if (++completed === length || value === _breakLoop2.default) {
          callback(null);
        }
      }
      for (; index < length; index++) {
        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
      }
    }
    function eachOfGeneric(coll, iteratee, callback) {
      return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);
    }
    function eachOf(coll, iteratee, callback) {
      var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
      return eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
    }
    exports.default = (0, _awaitify2.default)(eachOf, 3);
    module2.exports = exports.default;
  }
});

// node_modules/async/internal/withoutIndex.js
var require_withoutIndex = __commonJS({
  "node_modules/async/internal/withoutIndex.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _withoutIndex;
    function _withoutIndex(iteratee) {
      return (value, index, callback) => iteratee(value, callback);
    }
    module2.exports = exports.default;
  }
});

// node_modules/async/forEach.js
var require_forEach = __commonJS({
  "node_modules/async/forEach.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _eachOf = require_eachOf();
    var _eachOf2 = _interopRequireDefault(_eachOf);
    var _withoutIndex = require_withoutIndex();
    var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachLimit(coll, iteratee, callback) {
      return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
    }
    exports.default = (0, _awaitify2.default)(eachLimit, 3);
    module2.exports = exports.default;
  }
});

// node_modules/fn.name/index.js
var require_fn = __commonJS({
  "node_modules/fn.name/index.js"(exports, module2) {
    "use strict";
    var toString = Object.prototype.toString;
    module2.exports = function name(fn) {
      if ("string" === typeof fn.displayName && fn.constructor.name) {
        return fn.displayName;
      } else if ("string" === typeof fn.name && fn.name) {
        return fn.name;
      }
      if ("object" === typeof fn && fn.constructor && "string" === typeof fn.constructor.name) return fn.constructor.name;
      var named = fn.toString(), type = toString.call(fn).slice(8, -1);
      if ("Function" === type) {
        named = named.substring(named.indexOf("(") + 1, named.indexOf(")"));
      } else {
        named = type;
      }
      return named || "anonymous";
    };
  }
});

// node_modules/one-time/index.js
var require_one_time = __commonJS({
  "node_modules/one-time/index.js"(exports, module2) {
    "use strict";
    var name = require_fn();
    module2.exports = function one(fn) {
      var called = 0, value;
      function onetime() {
        if (called) return value;
        called = 1;
        value = fn.apply(this, arguments);
        fn = null;
        return value;
      }
      onetime.displayName = name(fn);
      return onetime;
    };
  }
});

// node_modules/stack-trace/lib/stack-trace.js
var require_stack_trace = __commonJS({
  "node_modules/stack-trace/lib/stack-trace.js"(exports) {
    exports.get = function(belowFn) {
      var oldLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = Infinity;
      var dummyObject = {};
      var v8Handler = Error.prepareStackTrace;
      Error.prepareStackTrace = function(dummyObject2, v8StackTrace2) {
        return v8StackTrace2;
      };
      Error.captureStackTrace(dummyObject, belowFn || exports.get);
      var v8StackTrace = dummyObject.stack;
      Error.prepareStackTrace = v8Handler;
      Error.stackTraceLimit = oldLimit;
      return v8StackTrace;
    };
    exports.parse = function(err) {
      if (!err.stack) {
        return [];
      }
      var self2 = this;
      var lines = err.stack.split("\n").slice(1);
      return lines.map(function(line) {
        if (line.match(/^\s*[-]{4,}$/)) {
          return self2._createParsedCallSite({
            fileName: line,
            lineNumber: null,
            functionName: null,
            typeName: null,
            methodName: null,
            columnNumber: null,
            "native": null
          });
        }
        var lineMatch = line.match(/at (?:(.+)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);
        if (!lineMatch) {
          return;
        }
        var object = null;
        var method = null;
        var functionName = null;
        var typeName = null;
        var methodName = null;
        var isNative = lineMatch[5] === "native";
        if (lineMatch[1]) {
          functionName = lineMatch[1];
          var methodStart = functionName.lastIndexOf(".");
          if (functionName[methodStart - 1] == ".")
            methodStart--;
          if (methodStart > 0) {
            object = functionName.substr(0, methodStart);
            method = functionName.substr(methodStart + 1);
            var objectEnd = object.indexOf(".Module");
            if (objectEnd > 0) {
              functionName = functionName.substr(objectEnd + 1);
              object = object.substr(0, objectEnd);
            }
          }
          typeName = null;
        }
        if (method) {
          typeName = object;
          methodName = method;
        }
        if (method === "<anonymous>") {
          methodName = null;
          functionName = null;
        }
        var properties = {
          fileName: lineMatch[2] || null,
          lineNumber: parseInt(lineMatch[3], 10) || null,
          functionName,
          typeName,
          methodName,
          columnNumber: parseInt(lineMatch[4], 10) || null,
          "native": isNative
        };
        return self2._createParsedCallSite(properties);
      }).filter(function(callSite) {
        return !!callSite;
      });
    };
    function CallSite(properties) {
      for (var property in properties) {
        this[property] = properties[property];
      }
    }
    var strProperties = [
      "this",
      "typeName",
      "functionName",
      "methodName",
      "fileName",
      "lineNumber",
      "columnNumber",
      "function",
      "evalOrigin"
    ];
    var boolProperties = [
      "topLevel",
      "eval",
      "native",
      "constructor"
    ];
    strProperties.forEach(function(property) {
      CallSite.prototype[property] = null;
      CallSite.prototype["get" + property[0].toUpperCase() + property.substr(1)] = function() {
        return this[property];
      };
    });
    boolProperties.forEach(function(property) {
      CallSite.prototype[property] = false;
      CallSite.prototype["is" + property[0].toUpperCase() + property.substr(1)] = function() {
        return this[property];
      };
    });
    exports._createParsedCallSite = function(properties) {
      return new CallSite(properties);
    };
  }
});

// node_modules/winston/dist/winston/exception-stream.js
var require_exception_stream = __commonJS({
  "node_modules/winston/dist/winston/exception-stream.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    var _require = require_readable_browser();
    var Writable = _require.Writable;
    module2.exports = /* @__PURE__ */ function(_Writable) {
      function ExceptionStream(transport) {
        var _this;
        _classCallCheck(this, ExceptionStream);
        _this = _callSuper(this, ExceptionStream, [{
          objectMode: true
        }]);
        if (!transport) {
          throw new Error("ExceptionStream requires a TransportStream instance.");
        }
        _this.handleExceptions = true;
        _this.transport = transport;
        return _this;
      }
      _inherits(ExceptionStream, _Writable);
      return _createClass(ExceptionStream, [{
        key: "_write",
        value: function _write(info, enc, callback) {
          if (info.exception) {
            return this.transport.log(info, callback);
          }
          callback();
          return true;
        }
      }]);
    }(Writable);
  }
});

// node_modules/winston/dist/winston/exception-handler.js
var require_exception_handler = __commonJS({
  "node_modules/winston/dist/winston/exception-handler.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var os = require("os");
    var asyncForEach = require_forEach();
    var debug = require_browser3()("winston:exception");
    var once = require_one_time();
    var stackTrace = require_stack_trace();
    var ExceptionStream = require_exception_stream();
    module2.exports = /* @__PURE__ */ function() {
      function ExceptionHandler(logger2) {
        _classCallCheck(this, ExceptionHandler);
        if (!logger2) {
          throw new Error("Logger is required to handle exceptions");
        }
        this.logger = logger2;
        this.handlers = /* @__PURE__ */ new Map();
      }
      return _createClass(ExceptionHandler, [{
        key: "handle",
        value: function handle() {
          var _this = this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          args.forEach(function(arg) {
            if (Array.isArray(arg)) {
              return arg.forEach(function(handler) {
                return _this._addHandler(handler);
              });
            }
            _this._addHandler(arg);
          });
          if (!this.catcher) {
            this.catcher = this._uncaughtException.bind(this);
            process.on("uncaughtException", this.catcher);
          }
        }
        /**
         * Removes any handlers to `uncaughtException` events for the current
         * process. This does not modify the state of the `this.handlers` set.
         * @returns {undefined}
         */
      }, {
        key: "unhandle",
        value: function unhandle() {
          var _this2 = this;
          if (this.catcher) {
            process.removeListener("uncaughtException", this.catcher);
            this.catcher = false;
            Array.from(this.handlers.values()).forEach(function(wrapper) {
              return _this2.logger.unpipe(wrapper);
            });
          }
        }
        /**
         * TODO: add method description
         * @param {Error} err - Error to get information about.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "getAllInfo",
        value: function getAllInfo(err) {
          var message = null;
          if (err) {
            message = typeof err === "string" ? err : err.message;
          }
          return {
            error: err,
            // TODO (indexzero): how do we configure this?
            level: "error",
            message: ["uncaughtException: ".concat(message || "(no error message)"), err && err.stack || "  No stack trace"].join("\n"),
            stack: err && err.stack,
            exception: true,
            date: (/* @__PURE__ */ new Date()).toString(),
            process: this.getProcessInfo(),
            os: this.getOsInfo(),
            trace: this.getTrace(err)
          };
        }
        /**
         * Gets all relevant process information for the currently running process.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "getProcessInfo",
        value: function getProcessInfo() {
          return {
            pid: process.pid,
            uid: process.getuid ? process.getuid() : null,
            gid: process.getgid ? process.getgid() : null,
            cwd: process.cwd(),
            execPath: process.execPath,
            version: process.version,
            argv: process.argv,
            memoryUsage: process.memoryUsage()
          };
        }
        /**
         * Gets all relevant OS information for the currently running process.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "getOsInfo",
        value: function getOsInfo() {
          return {
            loadavg: os.loadavg(),
            uptime: os.uptime()
          };
        }
        /**
         * Gets a stack trace for the specified error.
         * @param {mixed} err - TODO: add param description.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "getTrace",
        value: function getTrace(err) {
          var trace = err ? stackTrace.parse(err) : stackTrace.get();
          return trace.map(function(site) {
            return {
              column: site.getColumnNumber(),
              file: site.getFileName(),
              "function": site.getFunctionName(),
              line: site.getLineNumber(),
              method: site.getMethodName(),
              "native": site.isNative()
            };
          });
        }
        /**
         * Helper method to add a transport as an exception handler.
         * @param {Transport} handler - The transport to add as an exception handler.
         * @returns {void}
         */
      }, {
        key: "_addHandler",
        value: function _addHandler(handler) {
          if (!this.handlers.has(handler)) {
            handler.handleExceptions = true;
            var wrapper = new ExceptionStream(handler);
            this.handlers.set(handler, wrapper);
            this.logger.pipe(wrapper);
          }
        }
        /**
         * Logs all relevant information around the `err` and exits the current
         * process.
         * @param {Error} err - Error to handle
         * @returns {mixed} - TODO: add return description.
         * @private
         */
      }, {
        key: "_uncaughtException",
        value: function _uncaughtException(err) {
          var info = this.getAllInfo(err);
          var handlers = this._getExceptionHandlers();
          var doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err) : this.logger.exitOnError;
          var timeout;
          if (!handlers.length && doExit) {
            console.warn("winston: exitOnError cannot be true with no exception handlers.");
            console.warn("winston: not exiting process.");
            doExit = false;
          }
          function gracefulExit() {
            debug("doExit", doExit);
            debug("process._exiting", process._exiting);
            if (doExit && !process._exiting) {
              if (timeout) {
                clearTimeout(timeout);
              }
              process.exit(1);
            }
          }
          if (!handlers || handlers.length === 0) {
            return process.nextTick(gracefulExit);
          }
          asyncForEach(handlers, function(handler, next) {
            var done = once(next);
            var transport = handler.transport || handler;
            function onDone(event) {
              return function() {
                debug(event);
                done();
              };
            }
            transport._ending = true;
            transport.once("finish", onDone("finished"));
            transport.once("error", onDone("error"));
          }, function() {
            return doExit && gracefulExit();
          });
          this.logger.log(info);
          if (doExit) {
            timeout = setTimeout(gracefulExit, 3e3);
          }
        }
        /**
         * Returns the list of transports and exceptionHandlers for this instance.
         * @returns {Array} - List of transports and exceptionHandlers for this
         * instance.
         * @private
         */
      }, {
        key: "_getExceptionHandlers",
        value: function _getExceptionHandlers() {
          return this.logger.transports.filter(function(wrap) {
            var transport = wrap.transport || wrap;
            return transport.handleExceptions;
          });
        }
      }]);
    }();
  }
});

// node_modules/winston/dist/winston/rejection-stream.js
var require_rejection_stream = __commonJS({
  "node_modules/winston/dist/winston/rejection-stream.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    var _require = require_readable_browser();
    var Writable = _require.Writable;
    module2.exports = /* @__PURE__ */ function(_Writable) {
      function RejectionStream(transport) {
        var _this;
        _classCallCheck(this, RejectionStream);
        _this = _callSuper(this, RejectionStream, [{
          objectMode: true
        }]);
        if (!transport) {
          throw new Error("RejectionStream requires a TransportStream instance.");
        }
        _this.handleRejections = true;
        _this.transport = transport;
        return _this;
      }
      _inherits(RejectionStream, _Writable);
      return _createClass(RejectionStream, [{
        key: "_write",
        value: function _write(info, enc, callback) {
          if (info.rejection) {
            return this.transport.log(info, callback);
          }
          callback();
          return true;
        }
      }]);
    }(Writable);
  }
});

// node_modules/winston/dist/winston/rejection-handler.js
var require_rejection_handler = __commonJS({
  "node_modules/winston/dist/winston/rejection-handler.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var os = require("os");
    var asyncForEach = require_forEach();
    var debug = require_browser3()("winston:rejection");
    var once = require_one_time();
    var stackTrace = require_stack_trace();
    var RejectionStream = require_rejection_stream();
    module2.exports = /* @__PURE__ */ function() {
      function RejectionHandler(logger2) {
        _classCallCheck(this, RejectionHandler);
        if (!logger2) {
          throw new Error("Logger is required to handle rejections");
        }
        this.logger = logger2;
        this.handlers = /* @__PURE__ */ new Map();
      }
      return _createClass(RejectionHandler, [{
        key: "handle",
        value: function handle() {
          var _this = this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          args.forEach(function(arg) {
            if (Array.isArray(arg)) {
              return arg.forEach(function(handler) {
                return _this._addHandler(handler);
              });
            }
            _this._addHandler(arg);
          });
          if (!this.catcher) {
            this.catcher = this._unhandledRejection.bind(this);
            process.on("unhandledRejection", this.catcher);
          }
        }
        /**
         * Removes any handlers to `unhandledRejection` events for the current
         * process. This does not modify the state of the `this.handlers` set.
         * @returns {undefined}
         */
      }, {
        key: "unhandle",
        value: function unhandle() {
          var _this2 = this;
          if (this.catcher) {
            process.removeListener("unhandledRejection", this.catcher);
            this.catcher = false;
            Array.from(this.handlers.values()).forEach(function(wrapper) {
              return _this2.logger.unpipe(wrapper);
            });
          }
        }
        /**
         * TODO: add method description
         * @param {Error} err - Error to get information about.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "getAllInfo",
        value: function getAllInfo(err) {
          var message = null;
          if (err) {
            message = typeof err === "string" ? err : err.message;
          }
          return {
            error: err,
            // TODO (indexzero): how do we configure this?
            level: "error",
            message: ["unhandledRejection: ".concat(message || "(no error message)"), err && err.stack || "  No stack trace"].join("\n"),
            stack: err && err.stack,
            rejection: true,
            date: (/* @__PURE__ */ new Date()).toString(),
            process: this.getProcessInfo(),
            os: this.getOsInfo(),
            trace: this.getTrace(err)
          };
        }
        /**
         * Gets all relevant process information for the currently running process.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "getProcessInfo",
        value: function getProcessInfo() {
          return {
            pid: process.pid,
            uid: process.getuid ? process.getuid() : null,
            gid: process.getgid ? process.getgid() : null,
            cwd: process.cwd(),
            execPath: process.execPath,
            version: process.version,
            argv: process.argv,
            memoryUsage: process.memoryUsage()
          };
        }
        /**
         * Gets all relevant OS information for the currently running process.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "getOsInfo",
        value: function getOsInfo() {
          return {
            loadavg: os.loadavg(),
            uptime: os.uptime()
          };
        }
        /**
         * Gets a stack trace for the specified error.
         * @param {mixed} err - TODO: add param description.
         * @returns {mixed} - TODO: add return description.
         */
      }, {
        key: "getTrace",
        value: function getTrace(err) {
          var trace = err ? stackTrace.parse(err) : stackTrace.get();
          return trace.map(function(site) {
            return {
              column: site.getColumnNumber(),
              file: site.getFileName(),
              "function": site.getFunctionName(),
              line: site.getLineNumber(),
              method: site.getMethodName(),
              "native": site.isNative()
            };
          });
        }
        /**
         * Helper method to add a transport as an exception handler.
         * @param {Transport} handler - The transport to add as an exception handler.
         * @returns {void}
         */
      }, {
        key: "_addHandler",
        value: function _addHandler(handler) {
          if (!this.handlers.has(handler)) {
            handler.handleRejections = true;
            var wrapper = new RejectionStream(handler);
            this.handlers.set(handler, wrapper);
            this.logger.pipe(wrapper);
          }
        }
        /**
         * Logs all relevant information around the `err` and exits the current
         * process.
         * @param {Error} err - Error to handle
         * @returns {mixed} - TODO: add return description.
         * @private
         */
      }, {
        key: "_unhandledRejection",
        value: function _unhandledRejection(err) {
          var info = this.getAllInfo(err);
          var handlers = this._getRejectionHandlers();
          var doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err) : this.logger.exitOnError;
          var timeout;
          if (!handlers.length && doExit) {
            console.warn("winston: exitOnError cannot be true with no rejection handlers.");
            console.warn("winston: not exiting process.");
            doExit = false;
          }
          function gracefulExit() {
            debug("doExit", doExit);
            debug("process._exiting", process._exiting);
            if (doExit && !process._exiting) {
              if (timeout) {
                clearTimeout(timeout);
              }
              process.exit(1);
            }
          }
          if (!handlers || handlers.length === 0) {
            return process.nextTick(gracefulExit);
          }
          asyncForEach(handlers, function(handler, next) {
            var done = once(next);
            var transport = handler.transport || handler;
            function onDone(event) {
              return function() {
                debug(event);
                done();
              };
            }
            transport._ending = true;
            transport.once("finish", onDone("finished"));
            transport.once("error", onDone("error"));
          }, function() {
            return doExit && gracefulExit();
          });
          this.logger.log(info);
          if (doExit) {
            timeout = setTimeout(gracefulExit, 3e3);
          }
        }
        /**
         * Returns the list of transports and exceptionHandlers for this instance.
         * @returns {Array} - List of transports and exceptionHandlers for this
         * instance.
         * @private
         */
      }, {
        key: "_getRejectionHandlers",
        value: function _getRejectionHandlers() {
          return this.logger.transports.filter(function(wrap) {
            var transport = wrap.transport || wrap;
            return transport.handleRejections;
          });
        }
      }]);
    }();
  }
});

// node_modules/winston-transport/modern.js
var require_modern2 = __commonJS({
  "node_modules/winston-transport/modern.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var Writable = require_stream_writable();
    var { LEVEL } = require_triple_beam();
    var TransportStream = module2.exports = function TransportStream2(options = {}) {
      Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });
      this.format = options.format;
      this.level = options.level;
      this.handleExceptions = options.handleExceptions;
      this.handleRejections = options.handleRejections;
      this.silent = options.silent;
      if (options.log) this.log = options.log;
      if (options.logv) this.logv = options.logv;
      if (options.close) this.close = options.close;
      this.once("pipe", (logger2) => {
        this.levels = logger2.levels;
        this.parent = logger2;
      });
      this.once("unpipe", (src) => {
        if (src === this.parent) {
          this.parent = null;
          if (this.close) {
            this.close();
          }
        }
      });
    };
    util.inherits(TransportStream, Writable);
    TransportStream.prototype._write = function _write(info, enc, callback) {
      if (this.silent || info.exception === true && !this.handleExceptions) {
        return callback(null);
      }
      const level = this.level || this.parent && this.parent.level;
      if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {
        if (info && !this.format) {
          return this.log(info, callback);
        }
        let errState;
        let transformed;
        try {
          transformed = this.format.transform(Object.assign({}, info), this.format.options);
        } catch (err) {
          errState = err;
        }
        if (errState || !transformed) {
          callback();
          if (errState) throw errState;
          return;
        }
        return this.log(transformed, callback);
      }
      this._writableState.sync = false;
      return callback(null);
    };
    TransportStream.prototype._writev = function _writev(chunks, callback) {
      if (this.logv) {
        const infos = chunks.filter(this._accept, this);
        if (!infos.length) {
          return callback(null);
        }
        return this.logv(infos, callback);
      }
      for (let i = 0; i < chunks.length; i++) {
        if (!this._accept(chunks[i])) continue;
        if (chunks[i].chunk && !this.format) {
          this.log(chunks[i].chunk, chunks[i].callback);
          continue;
        }
        let errState;
        let transformed;
        try {
          transformed = this.format.transform(
            Object.assign({}, chunks[i].chunk),
            this.format.options
          );
        } catch (err) {
          errState = err;
        }
        if (errState || !transformed) {
          chunks[i].callback();
          if (errState) {
            callback(null);
            throw errState;
          }
        } else {
          this.log(transformed, chunks[i].callback);
        }
      }
      return callback(null);
    };
    TransportStream.prototype._accept = function _accept(write) {
      const info = write.chunk;
      if (this.silent) {
        return false;
      }
      const level = this.level || this.parent && this.parent.level;
      if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {
        if (this.handleExceptions || info.exception !== true) {
          return true;
        }
      }
      return false;
    };
    TransportStream.prototype._nop = function _nop() {
      return void 0;
    };
  }
});

// node_modules/winston-transport/legacy.js
var require_legacy2 = __commonJS({
  "node_modules/winston-transport/legacy.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var { LEVEL } = require_triple_beam();
    var TransportStream = require_modern2();
    var LegacyTransportStream = module2.exports = function LegacyTransportStream2(options = {}) {
      TransportStream.call(this, options);
      if (!options.transport || typeof options.transport.log !== "function") {
        throw new Error("Invalid transport, must be an object with a log method.");
      }
      this.transport = options.transport;
      this.level = this.level || options.transport.level;
      this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;
      this._deprecated();
      function transportError(err) {
        this.emit("error", err, this.transport);
      }
      if (!this.transport.__winstonError) {
        this.transport.__winstonError = transportError.bind(this);
        this.transport.on("error", this.transport.__winstonError);
      }
    };
    util.inherits(LegacyTransportStream, TransportStream);
    LegacyTransportStream.prototype._write = function _write(info, enc, callback) {
      if (this.silent || info.exception === true && !this.handleExceptions) {
        return callback(null);
      }
      if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {
        this.transport.log(info[LEVEL], info.message, info, this._nop);
      }
      callback(null);
    };
    LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {
      for (let i = 0; i < chunks.length; i++) {
        if (this._accept(chunks[i])) {
          this.transport.log(
            chunks[i].chunk[LEVEL],
            chunks[i].chunk.message,
            chunks[i].chunk,
            this._nop
          );
          chunks[i].callback();
        }
      }
      return callback(null);
    };
    LegacyTransportStream.prototype._deprecated = function _deprecated() {
      console.error([
        `${this.transport.name} is a legacy winston transport. Consider upgrading: `,
        "- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"
      ].join("\n"));
    };
    LegacyTransportStream.prototype.close = function close() {
      if (this.transport.close) {
        this.transport.close();
      }
      if (this.transport.__winstonError) {
        this.transport.removeListener("error", this.transport.__winstonError);
        this.transport.__winstonError = null;
      }
    };
  }
});

// node_modules/winston/dist/winston/profiler.js
var require_profiler = __commonJS({
  "node_modules/winston/dist/winston/profiler.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var Profiler = /* @__PURE__ */ function() {
      function Profiler2(logger2) {
        _classCallCheck(this, Profiler2);
        var Logger = require_logger2();
        if (_typeof(logger2) !== "object" || Array.isArray(logger2) || !(logger2 instanceof Logger)) {
          throw new Error("Logger is required for profiling");
        } else {
          this.logger = logger2;
          this.start = Date.now();
        }
      }
      return _createClass(Profiler2, [{
        key: "done",
        value: function done() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (typeof args[args.length - 1] === "function") {
            console.warn("Callback function no longer supported as of winston@3.0.0");
            args.pop();
          }
          var info = _typeof(args[args.length - 1]) === "object" ? args.pop() : {};
          info.level = info.level || "info";
          info.durationMs = Date.now() - this.start;
          return this.logger.write(info);
        }
      }]);
    }();
    module2.exports = Profiler;
  }
});

// node_modules/logform/format.js
var require_format2 = __commonJS({
  "node_modules/logform/format.js"(exports, module2) {
    "use strict";
    var InvalidFormatError = class _InvalidFormatError extends Error {
      constructor(formatFn) {
        super(`Format functions must be synchronous taking a two arguments: (info, opts)
Found: ${formatFn.toString().split("\n")[0]}
`);
        Error.captureStackTrace(this, _InvalidFormatError);
      }
    };
    module2.exports = (formatFn) => {
      if (formatFn.length > 2) {
        throw new InvalidFormatError(formatFn);
      }
      function Format(options = {}) {
        this.options = options;
      }
      Format.prototype.transform = formatFn;
      function createFormatWrap(opts) {
        return new Format(opts);
      }
      createFormatWrap.Format = Format;
      return createFormatWrap;
    };
  }
});

// node_modules/logform/json.js
var require_json2 = __commonJS({
  "node_modules/logform/json.js"(exports, module2) {
    "use strict";
    var format2 = require_format2();
    var { MESSAGE } = require_triple_beam();
    var stringify = require_safe_stable_stringify();
    function replacer(key, value) {
      if (typeof value === "bigint")
        return value.toString();
      return value;
    }
    module2.exports = format2((info, opts) => {
      const jsonStringify = stringify.configure(opts);
      info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);
      return info;
    });
  }
});

// node_modules/winston/dist/winston/logger.js
var require_logger2 = __commonJS({
  "node_modules/winston/dist/winston/logger.js"(exports, module2) {
    "use strict";
    function _defineProperty(e, r, t) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    var _require = require_readable_browser();
    var Stream = _require.Stream;
    var Transform = _require.Transform;
    var asyncForEach = require_forEach();
    var _require2 = require_triple_beam();
    var LEVEL = _require2.LEVEL;
    var SPLAT = _require2.SPLAT;
    var isStream = require_is_stream();
    var ExceptionHandler = require_exception_handler();
    var RejectionHandler = require_rejection_handler();
    var LegacyTransportStream = require_legacy2();
    var Profiler = require_profiler();
    var _require3 = require_common();
    var warn = _require3.warn;
    var config = require_config2();
    var formatRegExp = /%[scdjifoO%]/g;
    var Logger = /* @__PURE__ */ function(_Transform) {
      function Logger2(options) {
        var _this;
        _classCallCheck(this, Logger2);
        _this = _callSuper(this, Logger2, [{
          objectMode: true
        }]);
        _this.configure(options);
        return _this;
      }
      _inherits(Logger2, _Transform);
      return _createClass(Logger2, [{
        key: "child",
        value: function child(defaultRequestMetadata) {
          var logger2 = this;
          return Object.create(logger2, {
            write: {
              value: function value(info) {
                var infoClone = Object.assign({}, defaultRequestMetadata, info);
                if (info instanceof Error) {
                  infoClone.stack = info.stack;
                  infoClone.message = info.message;
                }
                logger2.write(infoClone);
              }
            }
          });
        }
        /**
         * This will wholesale reconfigure this instance by:
         * 1. Resetting all transports. Older transports will be removed implicitly.
         * 2. Set all other options including levels, colors, rewriters, filters,
         *    exceptionHandlers, etc.
         * @param {!Object} options - TODO: add param description.
         * @returns {undefined}
         */
      }, {
        key: "configure",
        value: function configure() {
          var _this2 = this;
          var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, silent = _ref.silent, format2 = _ref.format, defaultMeta = _ref.defaultMeta, levels = _ref.levels, _ref$level = _ref.level, level = _ref$level === void 0 ? "info" : _ref$level, _ref$exitOnError = _ref.exitOnError, exitOnError = _ref$exitOnError === void 0 ? true : _ref$exitOnError, transports2 = _ref.transports, colors = _ref.colors, emitErrs = _ref.emitErrs, formatters = _ref.formatters, padLevels = _ref.padLevels, rewriters = _ref.rewriters, stripColors = _ref.stripColors, exceptionHandlers = _ref.exceptionHandlers, rejectionHandlers = _ref.rejectionHandlers;
          if (this.transports.length) {
            this.clear();
          }
          this.silent = silent;
          this.format = format2 || this.format || require_json2()();
          this.defaultMeta = defaultMeta || null;
          this.levels = levels || this.levels || config.npm.levels;
          this.level = level;
          if (this.exceptions) {
            this.exceptions.unhandle();
          }
          if (this.rejections) {
            this.rejections.unhandle();
          }
          this.exceptions = new ExceptionHandler(this);
          this.rejections = new RejectionHandler(this);
          this.profilers = {};
          this.exitOnError = exitOnError;
          if (transports2) {
            transports2 = Array.isArray(transports2) ? transports2 : [transports2];
            transports2.forEach(function(transport) {
              return _this2.add(transport);
            });
          }
          if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {
            throw new Error(["{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.", "Use a custom winston.format(function) instead.", "See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"].join("\n"));
          }
          if (exceptionHandlers) {
            this.exceptions.handle(exceptionHandlers);
          }
          if (rejectionHandlers) {
            this.rejections.handle(rejectionHandlers);
          }
        }
      }, {
        key: "isLevelEnabled",
        value: function isLevelEnabled(level) {
          var _this3 = this;
          var givenLevelValue = getLevelValue(this.levels, level);
          if (givenLevelValue === null) {
            return false;
          }
          var configuredLevelValue = getLevelValue(this.levels, this.level);
          if (configuredLevelValue === null) {
            return false;
          }
          if (!this.transports || this.transports.length === 0) {
            return configuredLevelValue >= givenLevelValue;
          }
          var index = this.transports.findIndex(function(transport) {
            var transportLevelValue = getLevelValue(_this3.levels, transport.level);
            if (transportLevelValue === null) {
              transportLevelValue = configuredLevelValue;
            }
            return transportLevelValue >= givenLevelValue;
          });
          return index !== -1;
        }
        /* eslint-disable valid-jsdoc */
        /**
         * Ensure backwards compatibility with a `log` method
         * @param {mixed} level - Level the log message is written at.
         * @param {mixed} msg - TODO: add param description.
         * @param {mixed} meta - TODO: add param description.
         * @returns {Logger} - TODO: add return description.
         *
         * @example
         *    // Supports the existing API:
         *    logger.log('info', 'Hello world', { custom: true });
         *    logger.log('info', new Error('Yo, it\'s on fire'));
         *
         *    // Requires winston.format.splat()
         *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });
         *
         *    // And the new API with a single JSON literal:
         *    logger.log({ level: 'info', message: 'Hello world', custom: true });
         *    logger.log({ level: 'info', message: new Error('Yo, it\'s on fire') });
         *
         *    // Also requires winston.format.splat()
         *    logger.log({
         *      level: 'info',
         *      message: '%s %d%%',
         *      [SPLAT]: ['A string', 50],
         *      meta: { thisIsMeta: true }
         *    });
         *
         */
        /* eslint-enable valid-jsdoc */
      }, {
        key: "log",
        value: function log(level, msg) {
          for (var _len = arguments.length, splat = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            splat[_key - 2] = arguments[_key];
          }
          if (arguments.length === 1) {
            level[LEVEL] = level.level;
            this._addDefaultMeta(level);
            this.write(level);
            return this;
          }
          if (arguments.length === 2) {
            if (msg && _typeof(msg) === "object") {
              msg[LEVEL] = msg.level = level;
              this._addDefaultMeta(msg);
              this.write(msg);
              return this;
            }
            msg = _defineProperty(_defineProperty(_defineProperty({}, LEVEL, level), "level", level), "message", msg);
            this._addDefaultMeta(msg);
            this.write(msg);
            return this;
          }
          var meta = splat[0];
          if (_typeof(meta) === "object" && meta !== null) {
            var tokens = msg && msg.match && msg.match(formatRegExp);
            if (!tokens) {
              var info = Object.assign({}, this.defaultMeta, meta, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, LEVEL, level), SPLAT, splat), "level", level), "message", msg));
              if (meta.message) info.message = "".concat(info.message, " ").concat(meta.message);
              if (meta.stack) info.stack = meta.stack;
              if (meta.cause) info.cause = meta.cause;
              this.write(info);
              return this;
            }
          }
          this.write(Object.assign({}, this.defaultMeta, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, LEVEL, level), SPLAT, splat), "level", level), "message", msg)));
          return this;
        }
        /**
         * Pushes data so that it can be picked up by all of our pipe targets.
         * @param {mixed} info - TODO: add param description.
         * @param {mixed} enc - TODO: add param description.
         * @param {mixed} callback - Continues stream processing.
         * @returns {undefined}
         * @private
         */
      }, {
        key: "_transform",
        value: function _transform(info, enc, callback) {
          if (this.silent) {
            return callback();
          }
          if (!info[LEVEL]) {
            info[LEVEL] = info.level;
          }
          if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {
            console.error("[winston] Unknown logger level: %s", info[LEVEL]);
          }
          if (!this._readableState.pipes) {
            console.error("[winston] Attempt to write logs with no transports, which can increase memory usage: %j", info);
          }
          try {
            this.push(this.format.transform(info, this.format.options));
          } finally {
            this._writableState.sync = false;
            callback();
          }
        }
        /**
         * Delays the 'finish' event until all transport pipe targets have
         * also emitted 'finish' or are already finished.
         * @param {mixed} callback - Continues stream processing.
         */
      }, {
        key: "_final",
        value: function _final(callback) {
          var transports2 = this.transports.slice();
          asyncForEach(transports2, function(transport, next) {
            if (!transport || transport.finished) return setImmediate(next);
            transport.once("finish", next);
            transport.end();
          }, callback);
        }
        /**
         * Adds the transport to this logger instance by piping to it.
         * @param {mixed} transport - TODO: add param description.
         * @returns {Logger} - TODO: add return description.
         */
      }, {
        key: "add",
        value: function add(transport) {
          var target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({
            transport
          }) : transport;
          if (!target._writableState || !target._writableState.objectMode) {
            throw new Error("Transports must WritableStreams in objectMode. Set { objectMode: true }.");
          }
          this._onEvent("error", target);
          this._onEvent("warn", target);
          this.pipe(target);
          if (transport.handleExceptions) {
            this.exceptions.handle();
          }
          if (transport.handleRejections) {
            this.rejections.handle();
          }
          return this;
        }
        /**
         * Removes the transport from this logger instance by unpiping from it.
         * @param {mixed} transport - TODO: add param description.
         * @returns {Logger} - TODO: add return description.
         */
      }, {
        key: "remove",
        value: function remove(transport) {
          if (!transport) return this;
          var target = transport;
          if (!isStream(transport) || transport.log.length > 2) {
            target = this.transports.filter(function(match2) {
              return match2.transport === transport;
            })[0];
          }
          if (target) {
            this.unpipe(target);
          }
          return this;
        }
        /**
         * Removes all transports from this logger instance.
         * @returns {Logger} - TODO: add return description.
         */
      }, {
        key: "clear",
        value: function clear() {
          this.unpipe();
          return this;
        }
        /**
         * Cleans up resources (streams, event listeners) for all transports
         * associated with this instance (if necessary).
         * @returns {Logger} - TODO: add return description.
         */
      }, {
        key: "close",
        value: function close() {
          this.exceptions.unhandle();
          this.rejections.unhandle();
          this.clear();
          this.emit("close");
          return this;
        }
        /**
         * Sets the `target` levels specified on this instance.
         * @param {Object} Target levels to use on this instance.
         */
      }, {
        key: "setLevels",
        value: function setLevels() {
          warn.deprecated("setLevels");
        }
        /**
         * Queries the all transports for this instance with the specified `options`.
         * This will aggregate each transport's results into one object containing
         * a property per transport.
         * @param {Object} options - Query options for this instance.
         * @param {function} callback - Continuation to respond to when complete.
         */
      }, {
        key: "query",
        value: function query(options, callback) {
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          options = options || {};
          var results = {};
          var queryObject = Object.assign({}, options.query || {});
          function queryTransport(transport, next) {
            if (options.query && typeof transport.formatQuery === "function") {
              options.query = transport.formatQuery(queryObject);
            }
            transport.query(options, function(err, res) {
              if (err) {
                return next(err);
              }
              if (typeof transport.formatResults === "function") {
                res = transport.formatResults(res, options.format);
              }
              next(null, res);
            });
          }
          function addResults(transport, next) {
            queryTransport(transport, function(err, result) {
              if (next) {
                result = err || result;
                if (result) {
                  results[transport.name] = result;
                }
                next();
              }
              next = null;
            });
          }
          asyncForEach(this.transports.filter(function(transport) {
            return !!transport.query;
          }), addResults, function() {
            return callback(null, results);
          });
        }
        /**
         * Returns a log stream for all transports. Options object is optional.
         * @param{Object} options={} - Stream options for this instance.
         * @returns {Stream} - TODO: add return description.
         */
      }, {
        key: "stream",
        value: function stream() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var out = new Stream();
          var streams = [];
          out._streams = streams;
          out.destroy = function() {
            var i = streams.length;
            while (i--) {
              streams[i].destroy();
            }
          };
          this.transports.filter(function(transport) {
            return !!transport.stream;
          }).forEach(function(transport) {
            var str = transport.stream(options);
            if (!str) {
              return;
            }
            streams.push(str);
            str.on("log", function(log) {
              log.transport = log.transport || [];
              log.transport.push(transport.name);
              out.emit("log", log);
            });
            str.on("error", function(err) {
              err.transport = err.transport || [];
              err.transport.push(transport.name);
              out.emit("error", err);
            });
          });
          return out;
        }
        /**
         * Returns an object corresponding to a specific timing. When done is called
         * the timer will finish and log the duration. e.g.:
         * @returns {Profile} - TODO: add return description.
         * @example
         *    const timer = winston.startTimer()
         *    setTimeout(() => {
         *      timer.done({
         *        message: 'Logging message'
         *      });
         *    }, 1000);
         */
      }, {
        key: "startTimer",
        value: function startTimer() {
          return new Profiler(this);
        }
        /**
         * Tracks the time inbetween subsequent calls to this method with the same
         * `id` parameter. The second call to this method will log the difference in
         * milliseconds along with the message.
         * @param {string} id Unique id of the profiler
         * @returns {Logger} - TODO: add return description.
         */
      }, {
        key: "profile",
        value: function profile(id) {
          var time = Date.now();
          if (this.profilers[id]) {
            var timeEnd = this.profilers[id];
            delete this.profilers[id];
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            if (typeof args[args.length - 2] === "function") {
              console.warn("Callback function no longer supported as of winston@3.0.0");
              args.pop();
            }
            var info = _typeof(args[args.length - 1]) === "object" ? args.pop() : {};
            info.level = info.level || "info";
            info.durationMs = time - timeEnd;
            info.message = info.message || id;
            return this.write(info);
          }
          this.profilers[id] = time;
          return this;
        }
        /**
         * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
         * @returns {undefined}
         * @deprecated
         */
      }, {
        key: "handleExceptions",
        value: function handleExceptions() {
          var _this$exceptions;
          console.warn("Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()");
          (_this$exceptions = this.exceptions).handle.apply(_this$exceptions, arguments);
        }
        /**
         * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
         * @returns {undefined}
         * @deprecated
         */
      }, {
        key: "unhandleExceptions",
        value: function unhandleExceptions() {
          var _this$exceptions2;
          console.warn("Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()");
          (_this$exceptions2 = this.exceptions).unhandle.apply(_this$exceptions2, arguments);
        }
        /**
         * Throw a more meaningful deprecation notice
         * @throws {Error} - TODO: add throws description.
         */
      }, {
        key: "cli",
        value: function cli() {
          throw new Error(["Logger.cli() was removed in winston@3.0.0", "Use a custom winston.formats.cli() instead.", "See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"].join("\n"));
        }
        /**
         * Bubbles the `event` that occured on the specified `transport` up
         * from this instance.
         * @param {string} event - The event that occured
         * @param {Object} transport - Transport on which the event occured
         * @private
         */
      }, {
        key: "_onEvent",
        value: function _onEvent(event, transport) {
          function transportEvent(err) {
            if (event === "error" && !this.transports.includes(transport)) {
              this.add(transport);
            }
            this.emit(event, err, transport);
          }
          if (!transport["__winston" + event]) {
            transport["__winston" + event] = transportEvent.bind(this);
            transport.on(event, transport["__winston" + event]);
          }
        }
      }, {
        key: "_addDefaultMeta",
        value: function _addDefaultMeta(msg) {
          if (this.defaultMeta) {
            Object.assign(msg, this.defaultMeta);
          }
        }
      }]);
    }(Transform);
    function getLevelValue(levels, level) {
      var value = levels[level];
      if (!value && value !== 0) {
        return null;
      }
      return value;
    }
    Object.defineProperty(Logger.prototype, "transports", {
      configurable: false,
      enumerable: true,
      get: function get() {
        var pipes = this._readableState.pipes;
        return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;
      }
    });
    module2.exports = Logger;
  }
});

// node_modules/winston/dist/winston/create-logger.js
var require_create_logger = __commonJS({
  "node_modules/winston/dist/winston/create-logger.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _callSuper(t, o, e) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
    }
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t);
    }
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(t) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, _getPrototypeOf(t);
    }
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, _setPrototypeOf(t, e);
    }
    var _require = require_triple_beam();
    var LEVEL = _require.LEVEL;
    var config = require_config2();
    var Logger = require_logger2();
    var debug = require_browser3()("winston:create-logger");
    function isLevelEnabledFunctionName(level) {
      return "is" + level.charAt(0).toUpperCase() + level.slice(1) + "Enabled";
    }
    module2.exports = function() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      opts.levels = opts.levels || config.npm.levels;
      var DerivedLogger = /* @__PURE__ */ function(_Logger) {
        function DerivedLogger2(options) {
          _classCallCheck(this, DerivedLogger2);
          return _callSuper(this, DerivedLogger2, [options]);
        }
        _inherits(DerivedLogger2, _Logger);
        return _createClass(DerivedLogger2);
      }(Logger);
      var logger2 = new DerivedLogger(opts);
      Object.keys(opts.levels).forEach(function(level) {
        debug('Define prototype method for "%s"', level);
        if (level === "log") {
          console.warn('Level "log" not defined: conflicts with the method "log". Use a different level name.');
          return;
        }
        DerivedLogger.prototype[level] = function() {
          var self2 = this || logger2;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (args.length === 1) {
            var msg = args[0];
            var info = msg && msg.message && msg || {
              message: msg
            };
            info.level = info[LEVEL] = level;
            self2._addDefaultMeta(info);
            self2.write(info);
            return this || logger2;
          }
          if (args.length === 0) {
            self2.log(level, "");
            return self2;
          }
          return self2.log.apply(self2, [level].concat(args));
        };
        DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function() {
          return (this || logger2).isLevelEnabled(level);
        };
      });
      return logger2;
    };
  }
});

// node_modules/winston/dist/winston/container.js
var require_container = __commonJS({
  "node_modules/winston/dist/winston/container.js"(exports, module2) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _classCallCheck(a, n2) {
      if (!(a instanceof n2)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    function _toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    var createLogger2 = require_create_logger();
    module2.exports = /* @__PURE__ */ function() {
      function Container() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Container);
        this.loggers = /* @__PURE__ */ new Map();
        this.options = options;
      }
      return _createClass(Container, [{
        key: "add",
        value: function add(id, options) {
          var _this = this;
          if (!this.loggers.has(id)) {
            options = Object.assign({}, options || this.options);
            var existing = options.transports || this.options.transports;
            if (existing) {
              options.transports = Array.isArray(existing) ? existing.slice() : [existing];
            } else {
              options.transports = [];
            }
            var logger2 = createLogger2(options);
            logger2.on("close", function() {
              return _this._delete(id);
            });
            this.loggers.set(id, logger2);
          }
          return this.loggers.get(id);
        }
        /**
         * Retreives a `winston.Logger` instance for the specified `id`. If
         * an instance does not exist, one is created.
         * @param {!string} id - The id of the Logger to get.
         * @param {?Object} [options] - Options for the Logger instance.
         * @returns {Logger} - A configured Logger instance with a specified id.
         */
      }, {
        key: "get",
        value: function get(id, options) {
          return this.add(id, options);
        }
        /**
         * Check if the container has a logger with the id.
         * @param {?string} id - The id of the Logger instance to find.
         * @returns {boolean} - Boolean value indicating if this instance has a
         * logger with the specified `id`.
         */
      }, {
        key: "has",
        value: function has(id) {
          return !!this.loggers.has(id);
        }
        /**
         * Closes a `Logger` instance with the specified `id` if it exists.
         * If no `id` is supplied then all Loggers are closed.
         * @param {?string} id - The id of the Logger instance to close.
         * @returns {undefined}
         */
      }, {
        key: "close",
        value: function close(id) {
          var _this2 = this;
          if (id) {
            return this._removeLogger(id);
          }
          this.loggers.forEach(function(val, key) {
            return _this2._removeLogger(key);
          });
        }
        /**
         * Remove a logger based on the id.
         * @param {!string} id - The id of the logger to remove.
         * @returns {undefined}
         * @private
         */
      }, {
        key: "_removeLogger",
        value: function _removeLogger(id) {
          if (!this.loggers.has(id)) {
            return;
          }
          var logger2 = this.loggers.get(id);
          logger2.close();
          this._delete(id);
        }
        /**
         * Deletes a `Logger` instance with the specified `id`.
         * @param {!string} id - The id of the Logger instance to delete from
         * container.
         * @returns {undefined}
         * @private
         */
      }, {
        key: "_delete",
        value: function _delete(id) {
          this.loggers["delete"](id);
        }
      }]);
    }();
  }
});

// node_modules/winston/dist/winston.js
var require_winston = __commonJS({
  "node_modules/winston/dist/winston.js"(exports) {
    "use strict";
    var logform = require_browser();
    var _require = require_common();
    var warn = _require.warn;
    exports.version = require_package().version;
    exports.transports = require_transports();
    exports.config = require_config2();
    exports.addColors = logform.levels;
    exports.format = logform.format;
    exports.createLogger = require_create_logger();
    exports.Logger = require_logger2();
    exports.ExceptionHandler = require_exception_handler();
    exports.RejectionHandler = require_rejection_handler();
    exports.Container = require_container();
    exports.Transport = require_dist();
    exports.loggers = new exports.Container();
    var defaultLogger = exports.createLogger();
    Object.keys(exports.config.npm.levels).concat(["log", "query", "stream", "add", "remove", "clear", "profile", "startTimer", "handleExceptions", "unhandleExceptions", "handleRejections", "unhandleRejections", "configure", "child"]).forEach(function(method) {
      return exports[method] = function() {
        return defaultLogger[method].apply(defaultLogger, arguments);
      };
    });
    Object.defineProperty(exports, "level", {
      get: function get() {
        return defaultLogger.level;
      },
      set: function set(val) {
        defaultLogger.level = val;
      }
    });
    Object.defineProperty(exports, "exceptions", {
      get: function get() {
        return defaultLogger.exceptions;
      }
    });
    Object.defineProperty(exports, "rejections", {
      get: function get() {
        return defaultLogger.rejections;
      }
    });
    ["exitOnError"].forEach(function(prop) {
      Object.defineProperty(exports, prop, {
        get: function get() {
          return defaultLogger[prop];
        },
        set: function set(val) {
          defaultLogger[prop] = val;
        }
      });
    });
    Object.defineProperty(exports, "default", {
      get: function get() {
        return {
          exceptionHandlers: defaultLogger.exceptionHandlers,
          rejectionHandlers: defaultLogger.rejectionHandlers,
          transports: defaultLogger.transports
        };
      }
    });
    warn.deprecated(exports, "setLevels");
    warn.forFunctions(exports, "useFormat", ["cli"]);
    warn.forProperties(exports, "useFormat", ["padLevels", "stripColors"]);
    warn.forFunctions(exports, "deprecated", ["addRewriter", "addFilter", "clone", "extend"]);
    warn.forProperties(exports, "deprecated", ["emitErrs", "levelLength"]);
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianAgenda
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/views/base-view.ts
var import_obsidian = require("obsidian");
var import_handlebars = __toESM(require_handlebars());

// node_modules/luxon/src/errors.js
var LuxonError = class extends Error {
};
var InvalidDateTimeError = class extends LuxonError {
  constructor(reason) {
    super(`Invalid DateTime: ${reason.toMessage()}`);
  }
};
var InvalidIntervalError = class extends LuxonError {
  constructor(reason) {
    super(`Invalid Interval: ${reason.toMessage()}`);
  }
};
var InvalidDurationError = class extends LuxonError {
  constructor(reason) {
    super(`Invalid Duration: ${reason.toMessage()}`);
  }
};
var ConflictingSpecificationError = class extends LuxonError {
};
var InvalidUnitError = class extends LuxonError {
  constructor(unit) {
    super(`Invalid unit ${unit}`);
  }
};
var InvalidArgumentError = class extends LuxonError {
};
var ZoneIsAbstractError = class extends LuxonError {
  constructor() {
    super("Zone is an abstract class");
  }
};

// node_modules/luxon/src/impl/formats.js
var n = "numeric";
var s = "short";
var l = "long";
var DATE_SHORT = {
  year: n,
  month: n,
  day: n
};
var DATE_MED = {
  year: n,
  month: s,
  day: n
};
var DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s
};
var DATE_FULL = {
  year: n,
  month: l,
  day: n
};
var DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l
};
var TIME_SIMPLE = {
  hour: n,
  minute: n
};
var TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n
};
var TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};
var TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: s
};
var TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: l
};
var DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n
};
var DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s
};
var DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};

// node_modules/luxon/src/zone.js
var Zone = class {
  /**
   * The type of zone
   * @abstract
   * @type {string}
   */
  get type() {
    throw new ZoneIsAbstractError();
  }
  /**
   * The name of this zone.
   * @abstract
   * @type {string}
   */
  get name() {
    throw new ZoneIsAbstractError();
  }
  /**
   * The IANA name of this zone.
   * Defaults to `name` if not overwritten by a subclass.
   * @abstract
   * @type {string}
   */
  get ianaName() {
    return this.name;
  }
  /**
   * Returns whether the offset is known to be fixed for the whole year.
   * @abstract
   * @type {boolean}
   */
  get isUniversal() {
    throw new ZoneIsAbstractError();
  }
  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  formatOffset(ts, format2) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  offset(ts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  equals(otherZone) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */
  get isValid() {
    throw new ZoneIsAbstractError();
  }
};

// node_modules/luxon/src/zones/systemZone.js
var singleton = null;
var SystemZone = class _SystemZone extends Zone {
  /**
   * Get a singleton instance of the local zone
   * @return {SystemZone}
   */
  static get instance() {
    if (singleton === null) {
      singleton = new _SystemZone();
    }
    return singleton;
  }
  /** @override **/
  get type() {
    return "system";
  }
  /** @override **/
  get name() {
    return new Intl.DateTimeFormat().resolvedOptions().timeZone;
  }
  /** @override **/
  get isUniversal() {
    return false;
  }
  /** @override **/
  offsetName(ts, { format: format2, locale }) {
    return parseZoneInfo(ts, format2, locale);
  }
  /** @override **/
  formatOffset(ts, format2) {
    return formatOffset(this.offset(ts), format2);
  }
  /** @override **/
  offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }
  /** @override **/
  equals(otherZone) {
    return otherZone.type === "system";
  }
  /** @override **/
  get isValid() {
    return true;
  }
};

// node_modules/luxon/src/zones/IANAZone.js
var dtfCache = /* @__PURE__ */ new Map();
function makeDTF(zoneName) {
  let dtf = dtfCache.get(zoneName);
  if (dtf === void 0) {
    dtf = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zoneName,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short"
    });
    dtfCache.set(zoneName, dtf);
  }
  return dtf;
}
var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  era: 3,
  hour: 4,
  minute: 5,
  second: 6
};
function hackyOffset(dtf, date) {
  const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
}
function partsOffset(dtf, date) {
  const formatted = dtf.formatToParts(date);
  const filled = [];
  for (let i = 0; i < formatted.length; i++) {
    const { type, value } = formatted[i];
    const pos = typeToPos[type];
    if (type === "era") {
      filled[pos] = value;
    } else if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }
  return filled;
}
var ianaZoneCache = /* @__PURE__ */ new Map();
var IANAZone = class _IANAZone extends Zone {
  /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */
  static create(name) {
    let zone = ianaZoneCache.get(name);
    if (zone === void 0) {
      ianaZoneCache.set(name, zone = new _IANAZone(name));
    }
    return zone;
  }
  /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  static resetCache() {
    ianaZoneCache.clear();
    dtfCache.clear();
  }
  /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.
   * @return {boolean}
   */
  static isValidSpecifier(s2) {
    return this.isValidZone(s2);
  }
  /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */
  static isValidZone(zone) {
    if (!zone) {
      return false;
    }
    try {
      new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
      return true;
    } catch (e) {
      return false;
    }
  }
  constructor(name) {
    super();
    this.zoneName = name;
    this.valid = _IANAZone.isValidZone(name);
  }
  /**
   * The type of zone. `iana` for all instances of `IANAZone`.
   * @override
   * @type {string}
   */
  get type() {
    return "iana";
  }
  /**
   * The name of this zone (i.e. the IANA zone name).
   * @override
   * @type {string}
   */
  get name() {
    return this.zoneName;
  }
  /**
   * Returns whether the offset is known to be fixed for the whole year:
   * Always returns false for all IANA zones.
   * @override
   * @type {boolean}
   */
  get isUniversal() {
    return false;
  }
  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @override
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  offsetName(ts, { format: format2, locale }) {
    return parseZoneInfo(ts, format2, locale, this.name);
  }
  /**
   * Returns the offset's value as a string
   * @override
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  formatOffset(ts, format2) {
    return formatOffset(this.offset(ts), format2);
  }
  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @override
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  offset(ts) {
    if (!this.valid) return NaN;
    const date = new Date(ts);
    if (isNaN(date)) return NaN;
    const dtf = makeDTF(this.name);
    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
    if (adOrBc === "BC") {
      year = -Math.abs(year) + 1;
    }
    const adjustedHour = hour === 24 ? 0 : hour;
    const asUTC = objToLocalTS({
      year,
      month,
      day,
      hour: adjustedHour,
      minute,
      second,
      millisecond: 0
    });
    let asTS = +date;
    const over = asTS % 1e3;
    asTS -= over >= 0 ? over : 1e3 + over;
    return (asUTC - asTS) / (60 * 1e3);
  }
  /**
   * Return whether this Zone is equal to another zone
   * @override
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }
  /**
   * Return whether this Zone is valid.
   * @override
   * @type {boolean}
   */
  get isValid() {
    return this.valid;
  }
};

// node_modules/luxon/src/impl/locale.js
var intlLFCache = {};
function getCachedLF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
}
var intlDTCache = /* @__PURE__ */ new Map();
function getCachedDTF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlDTCache.get(key);
  if (dtf === void 0) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache.set(key, dtf);
  }
  return dtf;
}
var intlNumCache = /* @__PURE__ */ new Map();
function getCachedINF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let inf = intlNumCache.get(key);
  if (inf === void 0) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache.set(key, inf);
  }
  return inf;
}
var intlRelCache = /* @__PURE__ */ new Map();
function getCachedRTF(locString, opts = {}) {
  const { base, ...cacheKeyOpts } = opts;
  const key = JSON.stringify([locString, cacheKeyOpts]);
  let inf = intlRelCache.get(key);
  if (inf === void 0) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache.set(key, inf);
  }
  return inf;
}
var sysLocaleCache = null;
function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}
var intlResolvedOptionsCache = /* @__PURE__ */ new Map();
function getCachedIntResolvedOptions(locString) {
  let opts = intlResolvedOptionsCache.get(locString);
  if (opts === void 0) {
    opts = new Intl.DateTimeFormat(locString).resolvedOptions();
    intlResolvedOptionsCache.set(locString, opts);
  }
  return opts;
}
var weekInfoCache = /* @__PURE__ */ new Map();
function getCachedWeekInfo(locString) {
  let data = weekInfoCache.get(locString);
  if (!data) {
    const locale = new Intl.Locale(locString);
    data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
    if (!("minimalDays" in data)) {
      data = { ...fallbackWeekSettings, ...data };
    }
    weekInfoCache.set(locString, data);
  }
  return data;
}
function parseLocaleString(localeStr) {
  const xIndex = localeStr.indexOf("-x-");
  if (xIndex !== -1) {
    localeStr = localeStr.substring(0, xIndex);
  }
  const uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [localeStr];
  } else {
    let options;
    let selectedStr;
    try {
      options = getCachedDTF(localeStr).resolvedOptions();
      selectedStr = localeStr;
    } catch (e) {
      const smaller = localeStr.substring(0, uIndex);
      options = getCachedDTF(smaller).resolvedOptions();
      selectedStr = smaller;
    }
    const { numberingSystem, calendar } = options;
    return [selectedStr, numberingSystem, calendar];
  }
}
function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    if (!localeStr.includes("-u-")) {
      localeStr += "-u";
    }
    if (outputCalendar) {
      localeStr += `-ca-${outputCalendar}`;
    }
    if (numberingSystem) {
      localeStr += `-nu-${numberingSystem}`;
    }
    return localeStr;
  } else {
    return localeStr;
  }
}
function mapMonths(f) {
  const ms = [];
  for (let i = 1; i <= 12; i++) {
    const dt = DateTime.utc(2009, i, 1);
    ms.push(f(dt));
  }
  return ms;
}
function mapWeekdays(f) {
  const ms = [];
  for (let i = 1; i <= 7; i++) {
    const dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }
  return ms;
}
function listStuff(loc, length, englishFn, intlFn) {
  const mode = loc.listingMode();
  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}
function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || getCachedIntResolvedOptions(loc.locale).numberingSystem === "latn";
  }
}
var PolyNumberFormatter = class {
  constructor(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;
    const { padTo, floor, ...otherOpts } = opts;
    if (!forceSimple || Object.keys(otherOpts).length > 0) {
      const intlOpts = { useGrouping: false, ...opts };
      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }
  format(i) {
    if (this.inf) {
      const fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
      return padStart(fixed, this.padTo);
    }
  }
};
var PolyDateFormatter = class {
  constructor(dt, intl, opts) {
    this.opts = opts;
    this.originalZone = void 0;
    let z = void 0;
    if (this.opts.timeZone) {
      this.dt = dt;
    } else if (dt.zone.type === "fixed") {
      const gmtOffset = -1 * (dt.offset / 60);
      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
        z = offsetZ;
        this.dt = dt;
      } else {
        z = "UTC";
        this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
        this.originalZone = dt.zone;
      }
    } else if (dt.zone.type === "system") {
      this.dt = dt;
    } else if (dt.zone.type === "iana") {
      this.dt = dt;
      z = dt.zone.name;
    } else {
      z = "UTC";
      this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
      this.originalZone = dt.zone;
    }
    const intlOpts = { ...this.opts };
    intlOpts.timeZone = intlOpts.timeZone || z;
    this.dtf = getCachedDTF(intl, intlOpts);
  }
  format() {
    if (this.originalZone) {
      return this.formatToParts().map(({ value }) => value).join("");
    }
    return this.dtf.format(this.dt.toJSDate());
  }
  formatToParts() {
    const parts = this.dtf.formatToParts(this.dt.toJSDate());
    if (this.originalZone) {
      return parts.map((part) => {
        if (part.type === "timeZoneName") {
          const offsetName = this.originalZone.offsetName(this.dt.ts, {
            locale: this.dt.locale,
            format: this.opts.timeZoneName
          });
          return {
            ...part,
            value: offsetName
          };
        } else {
          return part;
        }
      });
    }
    return parts;
  }
  resolvedOptions() {
    return this.dtf.resolvedOptions();
  }
};
var PolyRelFormatter = class {
  constructor(intl, isEnglish, opts) {
    this.opts = { style: "long", ...opts };
    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }
  format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  }
  formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  }
};
var fallbackWeekSettings = {
  firstDay: 1,
  minimalDays: 4,
  weekend: [6, 7]
};
var Locale = class _Locale {
  static fromOpts(opts) {
    return _Locale.create(
      opts.locale,
      opts.numberingSystem,
      opts.outputCalendar,
      opts.weekSettings,
      opts.defaultToEN
    );
  }
  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
    const specifiedLocale = locale || Settings.defaultLocale;
    const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
    return new _Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
  }
  static resetCache() {
    sysLocaleCache = null;
    intlDTCache.clear();
    intlNumCache.clear();
    intlRelCache.clear();
    intlResolvedOptionsCache.clear();
    weekInfoCache.clear();
  }
  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
    return _Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
  }
  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);
    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.weekSettings = weekSettings;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = { format: {}, standalone: {} };
    this.monthsCache = { format: {}, standalone: {} };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }
  get fastNumbers() {
    if (this.fastNumbersCached == null) {
      this.fastNumbersCached = supportsFastNumbers(this);
    }
    return this.fastNumbersCached;
  }
  listingMode() {
    const isActuallyEn = this.isEnglish();
    const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
  }
  clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return _Locale.create(
        alts.locale || this.specifiedLocale,
        alts.numberingSystem || this.numberingSystem,
        alts.outputCalendar || this.outputCalendar,
        validateWeekSettings(alts.weekSettings) || this.weekSettings,
        alts.defaultToEN || false
      );
    }
  }
  redefaultToEN(alts = {}) {
    return this.clone({ ...alts, defaultToEN: true });
  }
  redefaultToSystem(alts = {}) {
    return this.clone({ ...alts, defaultToEN: false });
  }
  months(length, format2 = false) {
    return listStuff(this, length, months, () => {
      const intl = format2 ? { month: length, day: "numeric" } : { month: length }, formatStr = format2 ? "format" : "standalone";
      if (!this.monthsCache[formatStr][length]) {
        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
      }
      return this.monthsCache[formatStr][length];
    });
  }
  weekdays(length, format2 = false) {
    return listStuff(this, length, weekdays, () => {
      const intl = format2 ? { weekday: length, year: "numeric", month: "long", day: "numeric" } : { weekday: length }, formatStr = format2 ? "format" : "standalone";
      if (!this.weekdaysCache[formatStr][length]) {
        this.weekdaysCache[formatStr][length] = mapWeekdays(
          (dt) => this.extract(dt, intl, "weekday")
        );
      }
      return this.weekdaysCache[formatStr][length];
    });
  }
  meridiems() {
    return listStuff(
      this,
      void 0,
      () => meridiems,
      () => {
        if (!this.meridiemCache) {
          const intl = { hour: "numeric", hourCycle: "h12" };
          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
            (dt) => this.extract(dt, intl, "dayperiod")
          );
        }
        return this.meridiemCache;
      }
    );
  }
  eras(length) {
    return listStuff(this, length, eras, () => {
      const intl = { era: length };
      if (!this.eraCache[length]) {
        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(
          (dt) => this.extract(dt, intl, "era")
        );
      }
      return this.eraCache[length];
    });
  }
  extract(dt, intlOpts, field) {
    const df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching = results.find((m) => m.type.toLowerCase() === field);
    return matching ? matching.value : null;
  }
  numberFormatter(opts = {}) {
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  }
  dtFormatter(dt, intlOpts = {}) {
    return new PolyDateFormatter(dt, this.intl, intlOpts);
  }
  relFormatter(opts = {}) {
    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  }
  listFormatter(opts = {}) {
    return getCachedLF(this.intl, opts);
  }
  isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || getCachedIntResolvedOptions(this.intl).locale.startsWith("en-us");
  }
  getWeekSettings() {
    if (this.weekSettings) {
      return this.weekSettings;
    } else if (!hasLocaleWeekInfo()) {
      return fallbackWeekSettings;
    } else {
      return getCachedWeekInfo(this.locale);
    }
  }
  getStartOfWeek() {
    return this.getWeekSettings().firstDay;
  }
  getMinDaysInFirstWeek() {
    return this.getWeekSettings().minimalDays;
  }
  getWeekendDays() {
    return this.getWeekSettings().weekend;
  }
  equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  }
  toString() {
    return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;
  }
};

// node_modules/luxon/src/zones/fixedOffsetZone.js
var singleton2 = null;
var FixedOffsetZone = class _FixedOffsetZone extends Zone {
  /**
   * Get a singleton instance of UTC
   * @return {FixedOffsetZone}
   */
  static get utcInstance() {
    if (singleton2 === null) {
      singleton2 = new _FixedOffsetZone(0);
    }
    return singleton2;
  }
  /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */
  static instance(offset2) {
    return offset2 === 0 ? _FixedOffsetZone.utcInstance : new _FixedOffsetZone(offset2);
  }
  /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */
  static parseSpecifier(s2) {
    if (s2) {
      const r = s2.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
      if (r) {
        return new _FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }
    return null;
  }
  constructor(offset2) {
    super();
    this.fixed = offset2;
  }
  /**
   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.
   * @override
   * @type {string}
   */
  get type() {
    return "fixed";
  }
  /**
   * The name of this zone.
   * All fixed zones' names always start with "UTC" (plus optional offset)
   * @override
   * @type {string}
   */
  get name() {
    return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
  }
  /**
   * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`
   *
   * @override
   * @type {string}
   */
  get ianaName() {
    if (this.fixed === 0) {
      return "Etc/UTC";
    } else {
      return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
    }
  }
  /**
   * Returns the offset's common name at the specified timestamp.
   *
   * For fixed offset zones this equals to the zone name.
   * @override
   */
  offsetName() {
    return this.name;
  }
  /**
   * Returns the offset's value as a string
   * @override
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  formatOffset(ts, format2) {
    return formatOffset(this.fixed, format2);
  }
  /**
   * Returns whether the offset is known to be fixed for the whole year:
   * Always returns true for all fixed offset zones.
   * @override
   * @type {boolean}
   */
  get isUniversal() {
    return true;
  }
  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   *
   * For fixed offset zones, this is constant and does not depend on a timestamp.
   * @override
   * @return {number}
   */
  offset() {
    return this.fixed;
  }
  /**
   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)
   * @override
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }
  /**
   * Return whether this Zone is valid:
   * All fixed offset zones are valid.
   * @override
   * @type {boolean}
   */
  get isValid() {
    return true;
  }
};

// node_modules/luxon/src/zones/invalidZone.js
var InvalidZone = class extends Zone {
  constructor(zoneName) {
    super();
    this.zoneName = zoneName;
  }
  /** @override **/
  get type() {
    return "invalid";
  }
  /** @override **/
  get name() {
    return this.zoneName;
  }
  /** @override **/
  get isUniversal() {
    return false;
  }
  /** @override **/
  offsetName() {
    return null;
  }
  /** @override **/
  formatOffset() {
    return "";
  }
  /** @override **/
  offset() {
    return NaN;
  }
  /** @override **/
  equals() {
    return false;
  }
  /** @override **/
  get isValid() {
    return false;
  }
};

// node_modules/luxon/src/impl/zoneUtil.js
function normalizeZone(input, defaultZone2) {
  let offset2;
  if (isUndefined(input) || input === null) {
    return defaultZone2;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    const lowered = input.toLowerCase();
    if (lowered === "default") return defaultZone2;
    else if (lowered === "local" || lowered === "system") return SystemZone.instance;
    else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
    return input;
  } else {
    return new InvalidZone(input);
  }
}

// node_modules/luxon/src/impl/digits.js
var numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
var numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
};
var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
  let value = parseInt(str, 10);
  if (isNaN(value)) {
    value = "";
    for (let i = 0; i < str.length; i++) {
      const code = str.charCodeAt(i);
      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (const key in numberingSystemsUTF16) {
          const [min, max] = numberingSystemsUTF16[key];
          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }
    return parseInt(value, 10);
  } else {
    return value;
  }
}
var digitRegexCache = /* @__PURE__ */ new Map();
function resetDigitRegexCache() {
  digitRegexCache.clear();
}
function digitRegex({ numberingSystem }, append = "") {
  const ns = numberingSystem || "latn";
  let appendCache = digitRegexCache.get(ns);
  if (appendCache === void 0) {
    appendCache = /* @__PURE__ */ new Map();
    digitRegexCache.set(ns, appendCache);
  }
  let regex = appendCache.get(append);
  if (regex === void 0) {
    regex = new RegExp(`${numberingSystems[ns]}${append}`);
    appendCache.set(append, regex);
  }
  return regex;
}

// node_modules/luxon/src/settings.js
var now = () => Date.now();
var defaultZone = "system";
var defaultLocale = null;
var defaultNumberingSystem = null;
var defaultOutputCalendar = null;
var twoDigitCutoffYear = 60;
var throwOnInvalid;
var defaultWeekSettings = null;
var Settings = class {
  /**
   * Get the callback for returning the current timestamp.
   * @type {function}
   */
  static get now() {
    return now;
  }
  /**
   * Set the callback for returning the current timestamp.
   * The function should return a number, which will be interpreted as an Epoch millisecond count
   * @type {function}
   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
   */
  static set now(n2) {
    now = n2;
  }
  /**
   * Set the default time zone to create DateTimes in. Does not affect existing instances.
   * Use the value "system" to reset this value to the system's time zone.
   * @type {string}
   */
  static set defaultZone(zone) {
    defaultZone = zone;
  }
  /**
   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
   * The default value is the system's time zone (the one set on the machine that runs this code).
   * @type {Zone}
   */
  static get defaultZone() {
    return normalizeZone(defaultZone, SystemZone.instance);
  }
  /**
   * Get the default locale to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultLocale() {
    return defaultLocale;
  }
  /**
   * Set the default locale to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultLocale(locale) {
    defaultLocale = locale;
  }
  /**
   * Get the default numbering system to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultNumberingSystem() {
    return defaultNumberingSystem;
  }
  /**
   * Set the default numbering system to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultNumberingSystem(numberingSystem) {
    defaultNumberingSystem = numberingSystem;
  }
  /**
   * Get the default output calendar to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultOutputCalendar() {
    return defaultOutputCalendar;
  }
  /**
   * Set the default output calendar to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultOutputCalendar(outputCalendar) {
    defaultOutputCalendar = outputCalendar;
  }
  /**
   * @typedef {Object} WeekSettings
   * @property {number} firstDay
   * @property {number} minimalDays
   * @property {number[]} weekend
   */
  /**
   * @return {WeekSettings|null}
   */
  static get defaultWeekSettings() {
    return defaultWeekSettings;
  }
  /**
   * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
   * how many days are required in the first week of a year.
   * Does not affect existing instances.
   *
   * @param {WeekSettings|null} weekSettings
   */
  static set defaultWeekSettings(weekSettings) {
    defaultWeekSettings = validateWeekSettings(weekSettings);
  }
  /**
   * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
   * @type {number}
   */
  static get twoDigitCutoffYear() {
    return twoDigitCutoffYear;
  }
  /**
   * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
   * @type {number}
   * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century
   * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century
   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950
   * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
   */
  static set twoDigitCutoffYear(cutoffYear) {
    twoDigitCutoffYear = cutoffYear % 100;
  }
  /**
   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
   * @type {boolean}
   */
  static get throwOnInvalid() {
    return throwOnInvalid;
  }
  /**
   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
   * @type {boolean}
   */
  static set throwOnInvalid(t) {
    throwOnInvalid = t;
  }
  /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  static resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
    DateTime.resetCache();
    resetDigitRegexCache();
  }
};

// node_modules/luxon/src/impl/invalid.js
var Invalid = class {
  constructor(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }
  toMessage() {
    if (this.explanation) {
      return `${this.reason}: ${this.explanation}`;
    } else {
      return this.reason;
    }
  }
};

// node_modules/luxon/src/impl/conversions.js
var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
var leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
function unitOutOfRange(unit, value) {
  return new Invalid(
    "unit out of range",
    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
  );
}
function dayOfWeek(year, month, day) {
  const d = new Date(Date.UTC(year, month - 1, day));
  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }
  const js = d.getUTCDay();
  return js === 0 ? 7 : js;
}
function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}
function uncomputeOrdinal(year, ordinal) {
  const table = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table.findIndex((i) => i < ordinal), day = ordinal - table[month0];
  return { month: month0 + 1, day };
}
function isoWeekdayToLocal(isoWeekday, startOfWeek) {
  return (isoWeekday - startOfWeek + 7) % 7 + 1;
}
function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);
  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7), weekYear;
  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }
  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
}
function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek), yearInDays = daysInYear(weekYear);
  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek, year;
  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(weekData) };
}
function gregorianToOrdinal(gregData) {
  const { year, month, day } = gregData;
  const ordinal = computeOrdinal(year, month, day);
  return { year, ordinal, ...timeObject(gregData) };
}
function ordinalToGregorian(ordinalData) {
  const { year, ordinal } = ordinalData;
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(ordinalData) };
}
function usesLocalWeekValues(obj, loc) {
  const hasLocaleWeekData = !isUndefined(obj.localWeekday) || !isUndefined(obj.localWeekNumber) || !isUndefined(obj.localWeekYear);
  if (hasLocaleWeekData) {
    const hasIsoWeekData = !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);
    if (hasIsoWeekData) {
      throw new ConflictingSpecificationError(
        "Cannot mix locale-based week fields with ISO-based week fields"
      );
    }
    if (!isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;
    if (!isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;
    if (!isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;
    delete obj.localWeekday;
    delete obj.localWeekNumber;
    delete obj.localWeekYear;
    return {
      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
      startOfWeek: loc.getStartOfWeek()
    };
  } else {
    return { minDaysInFirstWeek: 4, startOfWeek: 1 };
  }
}
function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const validYear = isInteger(obj.weekYear), validWeek = integerBetween(
    obj.weekNumber,
    1,
    weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)
  ), validWeekday = integerBetween(obj.weekday, 1, 7);
  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.weekNumber);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}
function hasInvalidOrdinalData(obj) {
  const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}
function hasInvalidGregorianData(obj) {
  const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}
function hasInvalidTimeData(obj) {
  const { hour, minute, second, millisecond } = obj;
  const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}

// node_modules/luxon/src/impl/util.js
function isUndefined(o) {
  return typeof o === "undefined";
}
function isNumber(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
}
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
}
function hasLocaleWeekInfo() {
  try {
    return typeof Intl !== "undefined" && !!Intl.Locale && ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype);
  } catch (e) {
    return false;
  }
}
function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return void 0;
  }
  return arr.reduce((best, next) => {
    const pair = [by(next), next];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce((a, k) => {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function validateWeekSettings(settings) {
  if (settings == null) {
    return null;
  } else if (typeof settings !== "object") {
    throw new InvalidArgumentError("Week settings must be an object");
  } else {
    if (!integerBetween(settings.firstDay, 1, 7) || !integerBetween(settings.minimalDays, 1, 7) || !Array.isArray(settings.weekend) || settings.weekend.some((v) => !integerBetween(v, 1, 7))) {
      throw new InvalidArgumentError("Invalid week settings");
    }
    return {
      firstDay: settings.firstDay,
      minimalDays: settings.minimalDays,
      weekend: Array.from(settings.weekend)
    };
  }
}
function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
}
function floorMod(x, n2) {
  return x - n2 * Math.floor(x / n2);
}
function padStart(input, n2 = 2) {
  const isNeg = input < 0;
  let padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n2, "0");
  } else {
    padded = ("" + input).padStart(n2, "0");
  }
  return padded;
}
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return void 0;
  } else {
    return parseInt(string, 10);
  }
}
function parseFloating(string) {
  if (isUndefined(string) || string === null || string === "") {
    return void 0;
  } else {
    return parseFloat(string);
  }
}
function parseMillis(fraction) {
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return void 0;
  } else {
    const f = parseFloat("0." + fraction) * 1e3;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero = false) {
  const factor = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}
function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
}
function objToLocalTS(obj) {
  let d = Date.UTC(
    obj.year,
    obj.month - 1,
    obj.day,
    obj.hour,
    obj.minute,
    obj.second,
    obj.millisecond
  );
  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
  }
  return +d;
}
function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
  return -fwdlw + minDaysInFirstWeek - 1;
}
function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2e3 + year;
}
function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
  const date = new Date(ts), intlOpts = {
    hourCycle: "h23",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };
  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }
  const modified = { timeZoneName: offsetFormat, ...intlOpts };
  const parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find((m) => m.type.toLowerCase() === "timezonename");
  return parsed ? parsed.value : null;
}
function signedOffset(offHourStr, offMinuteStr) {
  let offHour = parseInt(offHourStr, 10);
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }
  const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}
function asNumber(value) {
  const numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
    throw new InvalidArgumentError(`Invalid unit value ${value}`);
  return numericValue;
}
function normalizeObject(obj, normalizer) {
  const normalized = {};
  for (const u in obj) {
    if (hasOwnProperty(obj, u)) {
      const v = obj[u];
      if (v === void 0 || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }
  return normalized;
}
function formatOffset(offset2, format2) {
  const hours = Math.trunc(Math.abs(offset2 / 60)), minutes = Math.trunc(Math.abs(offset2 % 60)), sign = offset2 >= 0 ? "+" : "-";
  switch (format2) {
    case "short":
      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
    case "narrow":
      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
    case "techie":
      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
    default:
      throw new RangeError(`Value format ${format2} is out of range for property format`);
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}

// node_modules/luxon/src/impl/english.js
var monthsLong = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December"
];
var monthsShort = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function months(length) {
  switch (length) {
    case "narrow":
      return [...monthsNarrow];
    case "short":
      return [...monthsShort];
    case "long":
      return [...monthsLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}
var weekdaysLong = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday"
];
var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
function weekdays(length) {
  switch (length) {
    case "narrow":
      return [...weekdaysNarrow];
    case "short":
      return [...weekdaysShort];
    case "long":
      return [...weekdaysLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}
var meridiems = ["AM", "PM"];
var erasLong = ["Before Christ", "Anno Domini"];
var erasShort = ["BC", "AD"];
var erasNarrow = ["B", "A"];
function eras(length) {
  switch (length) {
    case "narrow":
      return [...erasNarrow];
    case "short":
      return [...erasShort];
    case "long":
      return [...erasLong];
    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
  const units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
  if (numeric === "auto" && lastable) {
    const isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
      case -1:
        return isDay ? "yesterday" : `last ${units[unit][0]}`;
      case 0:
        return isDay ? "today" : `this ${units[unit][0]}`;
      default:
    }
  }
  const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}

// node_modules/luxon/src/impl/formatter.js
function stringifyTokens(splits, tokenToString) {
  let s2 = "";
  for (const token of splits) {
    if (token.literal) {
      s2 += token.val;
    } else {
      s2 += tokenToString(token.val);
    }
  }
  return s2;
}
var macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};
var Formatter = class _Formatter {
  static create(locale, opts = {}) {
    return new _Formatter(locale, opts);
  }
  static parseFormat(fmt) {
    let current = null, currentFull = "", bracketed = false;
    const splits = [];
    for (let i = 0; i < fmt.length; i++) {
      const c = fmt.charAt(i);
      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
        }
        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
        }
        currentFull = c;
        current = c;
      }
    }
    if (currentFull.length > 0) {
      splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
    }
    return splits;
  }
  static macroTokenToFormatOpts(token) {
    return macroTokenToFormatOpts[token];
  }
  constructor(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }
  formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }
    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
    return df.format();
  }
  dtFormatter(dt, opts = {}) {
    return this.loc.dtFormatter(dt, { ...this.opts, ...opts });
  }
  formatDateTime(dt, opts) {
    return this.dtFormatter(dt, opts).format();
  }
  formatDateTimeParts(dt, opts) {
    return this.dtFormatter(dt, opts).formatToParts();
  }
  formatInterval(interval, opts) {
    const df = this.dtFormatter(interval.start, opts);
    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
  }
  resolvedOptions(dt, opts) {
    return this.dtFormatter(dt, opts).resolvedOptions();
  }
  num(n2, p = 0) {
    if (this.opts.forceSimple) {
      return padStart(n2, p);
    }
    const opts = { ...this.opts };
    if (p > 0) {
      opts.padTo = p;
    }
    return this.loc.numberFormatter(opts).format(n2);
  }
  formatDateTimeFromString(dt, fmt) {
    const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string = (opts, extract) => this.loc.extract(dt, opts, extract), formatOffset2 = (opts) => {
      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
        return "Z";
      }
      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
    }, meridiem = () => knownEnglish ? meridiemForDateTime(dt) : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"), month = (length, standalone) => knownEnglish ? monthForDateTime(dt, length) : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"), weekday = (length, standalone) => knownEnglish ? weekdayForDateTime(dt, length) : string(
      standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
      "weekday"
    ), maybeMacro = (token) => {
      const formatOpts = _Formatter.macroTokenToFormatOpts(token);
      if (formatOpts) {
        return this.formatWithSystemDefault(dt, formatOpts);
      } else {
        return token;
      }
    }, era = (length) => knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"), tokenToString = (token) => {
      switch (token) {
        // ms
        case "S":
          return this.num(dt.millisecond);
        case "u":
        // falls through
        case "SSS":
          return this.num(dt.millisecond, 3);
        // seconds
        case "s":
          return this.num(dt.second);
        case "ss":
          return this.num(dt.second, 2);
        // fractional seconds
        case "uu":
          return this.num(Math.floor(dt.millisecond / 10), 2);
        case "uuu":
          return this.num(Math.floor(dt.millisecond / 100));
        // minutes
        case "m":
          return this.num(dt.minute);
        case "mm":
          return this.num(dt.minute, 2);
        // hours
        case "h":
          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
        case "hh":
          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
        case "H":
          return this.num(dt.hour);
        case "HH":
          return this.num(dt.hour, 2);
        // offset
        case "Z":
          return formatOffset2({ format: "narrow", allowZ: this.opts.allowZ });
        case "ZZ":
          return formatOffset2({ format: "short", allowZ: this.opts.allowZ });
        case "ZZZ":
          return formatOffset2({ format: "techie", allowZ: this.opts.allowZ });
        case "ZZZZ":
          return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
        case "ZZZZZ":
          return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
        // zone
        case "z":
          return dt.zoneName;
        // meridiems
        case "a":
          return meridiem();
        // dates
        case "d":
          return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
        case "dd":
          return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
        // weekdays - standalone
        case "c":
          return this.num(dt.weekday);
        case "ccc":
          return weekday("short", true);
        case "cccc":
          return weekday("long", true);
        case "ccccc":
          return weekday("narrow", true);
        // weekdays - format
        case "E":
          return this.num(dt.weekday);
        case "EEE":
          return weekday("short", false);
        case "EEEE":
          return weekday("long", false);
        case "EEEEE":
          return weekday("narrow", false);
        // months - standalone
        case "L":
          return useDateTimeFormatter ? string({ month: "numeric", day: "numeric" }, "month") : this.num(dt.month);
        case "LL":
          return useDateTimeFormatter ? string({ month: "2-digit", day: "numeric" }, "month") : this.num(dt.month, 2);
        case "LLL":
          return month("short", true);
        case "LLLL":
          return month("long", true);
        case "LLLLL":
          return month("narrow", true);
        // months - format
        case "M":
          return useDateTimeFormatter ? string({ month: "numeric" }, "month") : this.num(dt.month);
        case "MM":
          return useDateTimeFormatter ? string({ month: "2-digit" }, "month") : this.num(dt.month, 2);
        case "MMM":
          return month("short", false);
        case "MMMM":
          return month("long", false);
        case "MMMMM":
          return month("narrow", false);
        // years
        case "y":
          return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
        case "yy":
          return useDateTimeFormatter ? string({ year: "2-digit" }, "year") : this.num(dt.year.toString().slice(-2), 2);
        case "yyyy":
          return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year, 4);
        case "yyyyyy":
          return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year, 6);
        // eras
        case "G":
          return era("short");
        case "GG":
          return era("long");
        case "GGGGG":
          return era("narrow");
        case "kk":
          return this.num(dt.weekYear.toString().slice(-2), 2);
        case "kkkk":
          return this.num(dt.weekYear, 4);
        case "W":
          return this.num(dt.weekNumber);
        case "WW":
          return this.num(dt.weekNumber, 2);
        case "n":
          return this.num(dt.localWeekNumber);
        case "nn":
          return this.num(dt.localWeekNumber, 2);
        case "ii":
          return this.num(dt.localWeekYear.toString().slice(-2), 2);
        case "iiii":
          return this.num(dt.localWeekYear, 4);
        case "o":
          return this.num(dt.ordinal);
        case "ooo":
          return this.num(dt.ordinal, 3);
        case "q":
          return this.num(dt.quarter);
        case "qq":
          return this.num(dt.quarter, 2);
        case "X":
          return this.num(Math.floor(dt.ts / 1e3));
        case "x":
          return this.num(dt.ts);
        default:
          return maybeMacro(token);
      }
    };
    return stringifyTokens(_Formatter.parseFormat(fmt), tokenToString);
  }
  formatDurationFromString(dur, fmt) {
    const tokenToField = (token) => {
      switch (token[0]) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
          return "hour";
        case "d":
          return "day";
        case "w":
          return "week";
        case "M":
          return "month";
        case "y":
          return "year";
        default:
          return null;
      }
    }, tokenToString = (lildur) => (token) => {
      const mapped = tokenToField(token);
      if (mapped) {
        return this.num(lildur.get(mapped), token.length);
      } else {
        return token;
      }
    }, tokens = _Formatter.parseFormat(fmt), realTokens = tokens.reduce(
      (found, { literal, val }) => literal ? found : found.concat(val),
      []
    ), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
    return stringifyTokens(tokens, tokenToString(collapsed));
  }
};

// node_modules/luxon/src/impl/regexParser.js
var ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
function combineRegexes(...regexes) {
  const full = regexes.reduce((f, r) => f + r.source, "");
  return RegExp(`^${full}$`);
}
function combineExtractors(...extractors) {
  return (m) => extractors.reduce(
    ([mergedVals, mergedZone, cursor], ex) => {
      const [val, zone, next] = ex(m, cursor);
      return [{ ...mergedVals, ...val }, zone || mergedZone, next];
    },
    [{}, null, 1]
  ).slice(0, 2);
}
function parse(s2, ...patterns) {
  if (s2 == null) {
    return [null, null];
  }
  for (const [regex, extractor] of patterns) {
    const m = regex.exec(s2);
    if (m) {
      return extractor(m);
    }
  }
  return [null, null];
}
function simpleParse(...keys) {
  return (match2, cursor) => {
    const ret = {};
    let i;
    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match2[cursor + i]);
    }
    return [ret, null, cursor + i];
  };
}
var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
var isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
var isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
var isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
var extractISOOrdinalData = simpleParse("year", "ordinal");
var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/;
var sqlTimeRegex = RegExp(
  `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
);
var sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
function int(match2, pos, fallback) {
  const m = match2[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}
function extractISOYmd(match2, cursor) {
  const item = {
    year: int(match2, cursor),
    month: int(match2, cursor + 1, 1),
    day: int(match2, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}
function extractISOTime(match2, cursor) {
  const item = {
    hours: int(match2, cursor, 0),
    minutes: int(match2, cursor + 1, 0),
    seconds: int(match2, cursor + 2, 0),
    milliseconds: parseMillis(match2[cursor + 3])
  };
  return [item, null, cursor + 4];
}
function extractISOOffset(match2, cursor) {
  const local = !match2[cursor] && !match2[cursor + 1], fullOffset = signedOffset(match2[cursor + 1], match2[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}
function extractIANAZone(match2, cursor) {
  const zone = match2[cursor] ? IANAZone.create(match2[cursor]) : null;
  return [{}, zone, cursor + 1];
}
var isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
var isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
function extractISODuration(match2) {
  const [s2, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match2;
  const hasNegativePrefix = s2[0] === "-";
  const negativeSeconds = secondStr && secondStr[0] === "-";
  const maybeNegate = (num, force = false) => num !== void 0 && (force || num && hasNegativePrefix) ? -num : num;
  return [
    {
      years: maybeNegate(parseFloating(yearStr)),
      months: maybeNegate(parseFloating(monthStr)),
      weeks: maybeNegate(parseFloating(weekStr)),
      days: maybeNegate(parseFloating(dayStr)),
      hours: maybeNegate(parseFloating(hourStr)),
      minutes: maybeNegate(parseFloating(minuteStr)),
      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
    }
  ];
}
var obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  const result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr) result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }
  return result;
}
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
function extractRFC2822(match2) {
  const [
    ,
    weekdayStr,
    dayStr,
    monthStr,
    yearStr,
    hourStr,
    minuteStr,
    secondStr,
    obsOffset,
    milOffset,
    offHourStr,
    offMinuteStr
  ] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  let offset2;
  if (obsOffset) {
    offset2 = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset2 = 0;
  } else {
    offset2 = signedOffset(offHourStr, offMinuteStr);
  }
  return [result, new FixedOffsetZone(offset2)];
}
function preprocessRFC2822(s2) {
  return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}
var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
var rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
var ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
function extractRFC1123Or850(match2) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
function extractASCII(match2) {
  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(
  extractISOYmd,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
var extractISOWeekTimeAndOffset = combineExtractors(
  extractISOWeekData,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
var extractISOOrdinalDateAndTime = combineExtractors(
  extractISOOrdinalData,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
var extractISOTimeAndOffset = combineExtractors(
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
function parseISODate(s2) {
  return parse(
    s2,
    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
    [isoTimeCombinedRegex, extractISOTimeAndOffset]
  );
}
function parseRFC2822Date(s2) {
  return parse(preprocessRFC2822(s2), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s2) {
  return parse(
    s2,
    [rfc1123, extractRFC1123Or850],
    [rfc850, extractRFC1123Or850],
    [ascii, extractASCII]
  );
}
function parseISODuration(s2) {
  return parse(s2, [isoDuration, extractISODuration]);
}
var extractISOTimeOnly = combineExtractors(extractISOTime);
function parseISOTimeOnly(s2) {
  return parse(s2, [isoTimeOnly, extractISOTimeOnly]);
}
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOTimeOffsetAndIANAZone = combineExtractors(
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
function parseSQL(s2) {
  return parse(
    s2,
    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
  );
}

// node_modules/luxon/src/duration.js
var INVALID = "Invalid Duration";
var lowOrderMatrix = {
  weeks: {
    days: 7,
    hours: 7 * 24,
    minutes: 7 * 24 * 60,
    seconds: 7 * 24 * 60 * 60,
    milliseconds: 7 * 24 * 60 * 60 * 1e3
  },
  days: {
    hours: 24,
    minutes: 24 * 60,
    seconds: 24 * 60 * 60,
    milliseconds: 24 * 60 * 60 * 1e3
  },
  hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1e3 },
  minutes: { seconds: 60, milliseconds: 60 * 1e3 },
  seconds: { milliseconds: 1e3 }
};
var casualMatrix = {
  years: {
    quarters: 4,
    months: 12,
    weeks: 52,
    days: 365,
    hours: 365 * 24,
    minutes: 365 * 24 * 60,
    seconds: 365 * 24 * 60 * 60,
    milliseconds: 365 * 24 * 60 * 60 * 1e3
  },
  quarters: {
    months: 3,
    weeks: 13,
    days: 91,
    hours: 91 * 24,
    minutes: 91 * 24 * 60,
    seconds: 91 * 24 * 60 * 60,
    milliseconds: 91 * 24 * 60 * 60 * 1e3
  },
  months: {
    weeks: 4,
    days: 30,
    hours: 30 * 24,
    minutes: 30 * 24 * 60,
    seconds: 30 * 24 * 60 * 60,
    milliseconds: 30 * 24 * 60 * 60 * 1e3
  },
  ...lowOrderMatrix
};
var daysInYearAccurate = 146097 / 400;
var daysInMonthAccurate = 146097 / 4800;
var accurateMatrix = {
  years: {
    quarters: 4,
    months: 12,
    weeks: daysInYearAccurate / 7,
    days: daysInYearAccurate,
    hours: daysInYearAccurate * 24,
    minutes: daysInYearAccurate * 24 * 60,
    seconds: daysInYearAccurate * 24 * 60 * 60,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3
  },
  quarters: {
    months: 3,
    weeks: daysInYearAccurate / 28,
    days: daysInYearAccurate / 4,
    hours: daysInYearAccurate * 24 / 4,
    minutes: daysInYearAccurate * 24 * 60 / 4,
    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3 / 4
  },
  months: {
    weeks: daysInMonthAccurate / 7,
    days: daysInMonthAccurate,
    hours: daysInMonthAccurate * 24,
    minutes: daysInMonthAccurate * 24 * 60,
    seconds: daysInMonthAccurate * 24 * 60 * 60,
    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1e3
  },
  ...lowOrderMatrix
};
var orderedUnits = [
  "years",
  "quarters",
  "months",
  "weeks",
  "days",
  "hours",
  "minutes",
  "seconds",
  "milliseconds"
];
var reverseUnits = orderedUnits.slice(0).reverse();
function clone(dur, alts, clear = false) {
  const conf = {
    values: clear ? alts.values : { ...dur.values, ...alts.values || {} },
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
    matrix: alts.matrix || dur.matrix
  };
  return new Duration(conf);
}
function durationToMillis(matrix, vals) {
  let sum = vals.milliseconds ?? 0;
  for (const unit of reverseUnits.slice(1)) {
    if (vals[unit]) {
      sum += vals[unit] * matrix[unit]["milliseconds"];
    }
  }
  return sum;
}
function normalizeValues(matrix, vals) {
  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;
  orderedUnits.reduceRight((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const previousVal = vals[previous] * factor;
        const conv = matrix[current][previous];
        const rollUp = Math.floor(previousVal / conv);
        vals[current] += rollUp * factor;
        vals[previous] -= rollUp * conv * factor;
      }
      return current;
    } else {
      return previous;
    }
  }, null);
  orderedUnits.reduce((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const fraction = vals[previous] % 1;
        vals[previous] -= fraction;
        vals[current] += fraction * matrix[previous][current];
      }
      return current;
    } else {
      return previous;
    }
  }, null);
}
function removeZeroes(vals) {
  const newVals = {};
  for (const [key, value] of Object.entries(vals)) {
    if (value !== 0) {
      newVals[key] = value;
    }
  }
  return newVals;
}
var Duration = class _Duration {
  /**
   * @private
   */
  constructor(config) {
    const accurate = config.conversionAccuracy === "longterm" || false;
    let matrix = accurate ? accurateMatrix : casualMatrix;
    if (config.matrix) {
      matrix = config.matrix;
    }
    this.values = config.values;
    this.loc = config.loc || Locale.create();
    this.conversionAccuracy = accurate ? "longterm" : "casual";
    this.invalid = config.invalid || null;
    this.matrix = matrix;
    this.isLuxonDuration = true;
  }
  /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  static fromMillis(count, opts) {
    return _Duration.fromObject({ milliseconds: count }, opts);
  }
  /**
   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {Object} [opts=[]] - options for creating this Duration
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the custom conversion system to use
   * @return {Duration}
   */
  static fromObject(obj, opts = {}) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError(
        `Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`
      );
    }
    return new _Duration({
      values: normalizeObject(obj, _Duration.normalizeUnit),
      loc: Locale.fromObject(opts),
      conversionAccuracy: opts.conversionAccuracy,
      matrix: opts.matrix
    });
  }
  /**
   * Create a Duration from DurationLike.
   *
   * @param {Object | number | Duration} durationLike
   * One of:
   * - object with keys like 'years' and 'hours'.
   * - number representing milliseconds
   * - Duration instance
   * @return {Duration}
   */
  static fromDurationLike(durationLike) {
    if (isNumber(durationLike)) {
      return _Duration.fromMillis(durationLike);
    } else if (_Duration.isDuration(durationLike)) {
      return durationLike;
    } else if (typeof durationLike === "object") {
      return _Duration.fromObject(durationLike);
    } else {
      throw new InvalidArgumentError(
        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
      );
    }
  }
  /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the preset conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */
  static fromISO(text, opts) {
    const [parsed] = parseISODuration(text);
    if (parsed) {
      return _Duration.fromObject(parsed, opts);
    } else {
      return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }
  /**
   * Create a Duration from an ISO 8601 time string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @return {Duration}
   */
  static fromISOTime(text, opts) {
    const [parsed] = parseISOTimeOnly(text);
    if (parsed) {
      return _Duration.fromObject(parsed, opts);
    } else {
      return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }
  /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new _Duration({ invalid });
    }
  }
  /**
   * @private
   */
  static normalizeUnit(unit) {
    const normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  }
  /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isDuration(o) {
    return o && o.isLuxonDuration || false;
  }
  /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }
  /**
   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
   *
   * @type {string}
   */
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }
  /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `w` for weeks
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * Tokens can be escaped by wrapping with single quotes.
   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */
  toFormat(fmt, opts = {}) {
    const fmtOpts = {
      ...opts,
      floor: opts.round !== false && opts.floor !== false
    };
    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
  }
  /**
   * Returns a string representation of a Duration with all units included.
   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
   * @example
   * ```js
   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
   * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
   * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
   * ```
   */
  toHuman(opts = {}) {
    if (!this.isValid) return INVALID;
    const l2 = orderedUnits.map((unit) => {
      const val = this.values[unit];
      if (isUndefined(val)) {
        return null;
      }
      return this.loc.numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) }).format(val);
    }).filter((n2) => n2);
    return this.loc.listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts }).format(l2);
  }
  /**
   * Returns a JavaScript object with this Duration's values.
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */
  toObject() {
    if (!this.isValid) return {};
    return { ...this.values };
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */
  toISO() {
    if (!this.isValid) return null;
    let s2 = "P";
    if (this.years !== 0) s2 += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s2 += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s2 += this.weeks + "W";
    if (this.days !== 0) s2 += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
      s2 += "T";
    if (this.hours !== 0) s2 += this.hours + "H";
    if (this.minutes !== 0) s2 += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0)
      s2 += roundTo(this.seconds + this.milliseconds / 1e3, 3) + "S";
    if (s2 === "P") s2 += "T0S";
    return s2;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
   * @return {string}
   */
  toISOTime(opts = {}) {
    if (!this.isValid) return null;
    const millis = this.toMillis();
    if (millis < 0 || millis >= 864e5) return null;
    opts = {
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended",
      ...opts,
      includeOffset: false
    };
    const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
    return dateTime.toISOTime(opts);
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */
  toJSON() {
    return this.toISO();
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */
  toString() {
    return this.toISO();
  }
  /**
   * Returns a string representation of this Duration appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Duration { values: ${JSON.stringify(this.values)} }`;
    } else {
      return `Duration { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */
  toMillis() {
    if (!this.isValid) return NaN;
    return durationToMillis(this.matrix, this.values);
  }
  /**
   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
   * @return {number}
   */
  valueOf() {
    return this.toMillis();
  }
  /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  plus(duration) {
    if (!this.isValid) return this;
    const dur = _Duration.fromDurationLike(duration), result = {};
    for (const k of orderedUnits) {
      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }
    return clone(this, { values: result }, true);
  }
  /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  minus(duration) {
    if (!this.isValid) return this;
    const dur = _Duration.fromDurationLike(duration);
    return this.plus(dur.negate());
  }
  /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */
  mapUnits(fn) {
    if (!this.isValid) return this;
    const result = {};
    for (const k of Object.keys(this.values)) {
      result[k] = asNumber(fn(this.values[k], k));
    }
    return clone(this, { values: result }, true);
  }
  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
   * @return {number}
   */
  get(unit) {
    return this[_Duration.normalizeUnit(unit)];
  }
  /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */
  set(values) {
    if (!this.isValid) return this;
    const mixed = { ...this.values, ...normalizeObject(values, _Duration.normalizeUnit) };
    return clone(this, { values: mixed });
  }
  /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */
  reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
    const loc = this.loc.clone({ locale, numberingSystem });
    const opts = { loc, matrix, conversionAccuracy };
    return clone(this, opts);
  }
  /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */
  as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }
  /**
   * Reduce this Duration to its canonical representation in its current units.
   * Assuming the overall value of the Duration is positive, this means:
   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
   *   the overall value would be negative, see third example)
   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
   *
   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
   * @return {Duration}
   */
  normalize() {
    if (!this.isValid) return this;
    const vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone(this, { values: vals }, true);
  }
  /**
   * Rescale units to its largest representation
   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
   * @return {Duration}
   */
  rescale() {
    if (!this.isValid) return this;
    const vals = removeZeroes(this.normalize().shiftToAll().toObject());
    return clone(this, { values: vals }, true);
  }
  /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */
  shiftTo(...units) {
    if (!this.isValid) return this;
    if (units.length === 0) {
      return this;
    }
    units = units.map((u) => _Duration.normalizeUnit(u));
    const built = {}, accumulated = {}, vals = this.toObject();
    let lastUnit;
    for (const k of orderedUnits) {
      if (units.indexOf(k) >= 0) {
        lastUnit = k;
        let own = 0;
        for (const ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        }
        if (isNumber(vals[k])) {
          own += vals[k];
        }
        const i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = (own * 1e3 - i * 1e3) / 1e3;
      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    }
    for (const key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }
    normalizeValues(this.matrix, built);
    return clone(this, { values: built }, true);
  }
  /**
   * Shift this Duration to all available units.
   * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
   * @return {Duration}
   */
  shiftToAll() {
    if (!this.isValid) return this;
    return this.shiftTo(
      "years",
      "months",
      "weeks",
      "days",
      "hours",
      "minutes",
      "seconds",
      "milliseconds"
    );
  }
  /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */
  negate() {
    if (!this.isValid) return this;
    const negated = {};
    for (const k of Object.keys(this.values)) {
      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
    }
    return clone(this, { values: negated }, true);
  }
  /**
   * Get the years.
   * @type {number}
   */
  get years() {
    return this.isValid ? this.values.years || 0 : NaN;
  }
  /**
   * Get the quarters.
   * @type {number}
   */
  get quarters() {
    return this.isValid ? this.values.quarters || 0 : NaN;
  }
  /**
   * Get the months.
   * @type {number}
   */
  get months() {
    return this.isValid ? this.values.months || 0 : NaN;
  }
  /**
   * Get the weeks
   * @type {number}
   */
  get weeks() {
    return this.isValid ? this.values.weeks || 0 : NaN;
  }
  /**
   * Get the days.
   * @type {number}
   */
  get days() {
    return this.isValid ? this.values.days || 0 : NaN;
  }
  /**
   * Get the hours.
   * @type {number}
   */
  get hours() {
    return this.isValid ? this.values.hours || 0 : NaN;
  }
  /**
   * Get the minutes.
   * @type {number}
   */
  get minutes() {
    return this.isValid ? this.values.minutes || 0 : NaN;
  }
  /**
   * Get the seconds.
   * @return {number}
   */
  get seconds() {
    return this.isValid ? this.values.seconds || 0 : NaN;
  }
  /**
   * Get the milliseconds.
   * @return {number}
   */
  get milliseconds() {
    return this.isValid ? this.values.milliseconds || 0 : NaN;
  }
  /**
   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
   * on invalid DateTimes or Intervals.
   * @return {boolean}
   */
  get isValid() {
    return this.invalid === null;
  }
  /**
   * Returns an error code if this Duration became invalid, or null if the Duration is valid
   * @return {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  /**
   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    if (!this.loc.equals(other.loc)) {
      return false;
    }
    function eq(v1, v2) {
      if (v1 === void 0 || v1 === 0) return v2 === void 0 || v2 === 0;
      return v1 === v2;
    }
    for (const u of orderedUnits) {
      if (!eq(this.values[u], other.values[u])) {
        return false;
      }
    }
    return true;
  }
};

// node_modules/luxon/src/interval.js
var INVALID2 = "Invalid Interval";
function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid(
      "end before start",
      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
    );
  } else {
    return null;
  }
}
var Interval = class _Interval {
  /**
   * @private
   */
  constructor(config) {
    this.s = config.start;
    this.e = config.end;
    this.invalid = config.invalid || null;
    this.isLuxonInterval = true;
  }
  /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new _Interval({ invalid });
    }
  }
  /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */
  static fromDateTimes(start, end) {
    const builtStart = friendlyDateTime(start), builtEnd = friendlyDateTime(end);
    const validateError = validateStartEnd(builtStart, builtEnd);
    if (validateError == null) {
      return new _Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }
  /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  static after(start, duration) {
    const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(start);
    return _Interval.fromDateTimes(dt, dt.plus(dur));
  }
  /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  static before(end, duration) {
    const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(end);
    return _Interval.fromDateTimes(dt.minus(dur), dt);
  }
  /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */
  static fromISO(text, opts) {
    const [s2, e] = (text || "").split("/", 2);
    if (s2 && e) {
      let start, startIsValid;
      try {
        start = DateTime.fromISO(s2, opts);
        startIsValid = start.isValid;
      } catch (e2) {
        startIsValid = false;
      }
      let end, endIsValid;
      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e2) {
        endIsValid = false;
      }
      if (startIsValid && endIsValid) {
        return _Interval.fromDateTimes(start, end);
      }
      if (startIsValid) {
        const dur = Duration.fromISO(e, opts);
        if (dur.isValid) {
          return _Interval.after(start, dur);
        }
      } else if (endIsValid) {
        const dur = Duration.fromISO(s2, opts);
        if (dur.isValid) {
          return _Interval.before(end, dur);
        }
      }
    }
    return _Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
  }
  /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isInterval(o) {
    return o && o.isLuxonInterval || false;
  }
  /**
   * Returns the start of the Interval
   * @type {DateTime}
   */
  get start() {
    return this.isValid ? this.s : null;
  }
  /**
   * Returns the end of the Interval
   * @type {DateTime}
   */
  get end() {
    return this.isValid ? this.e : null;
  }
  /**
   * Returns the last DateTime included in the interval (since end is not part of the interval)
   * @type {DateTime}
   */
  get lastDateTime() {
    return this.isValid ? this.e ? this.e.minus(1) : null : null;
  }
  /**
   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
   * @type {boolean}
   */
  get isValid() {
    return this.invalidReason === null;
  }
  /**
   * Returns an error code if this Interval is invalid, or null if the Interval is valid
   * @type {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  /**
   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */
  length(unit = "milliseconds") {
    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
  }
  /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
   * @return {number}
   */
  count(unit = "milliseconds", opts) {
    if (!this.isValid) return NaN;
    const start = this.start.startOf(unit, opts);
    let end;
    if (opts?.useLocaleWeeks) {
      end = this.end.reconfigure({ locale: start.locale });
    } else {
      end = this.end;
    }
    end = end.startOf(unit, opts);
    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
  }
  /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */
  hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }
  /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */
  isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }
  /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }
  /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }
  /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }
  /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */
  set({ start, end } = {}) {
    if (!this.isValid) return this;
    return _Interval.fromDateTimes(start || this.s, end || this.e);
  }
  /**
   * Split this Interval at each of the specified DateTimes
   * @param {...DateTime} dateTimes - the unit of time to count.
   * @return {Array}
   */
  splitAt(...dateTimes) {
    if (!this.isValid) return [];
    const sorted = dateTimes.map(friendlyDateTime).filter((d) => this.contains(d)).sort((a, b) => a.toMillis() - b.toMillis()), results = [];
    let { s: s2 } = this, i = 0;
    while (s2 < this.e) {
      const added = sorted[i] || this.e, next = +added > +this.e ? this.e : added;
      results.push(_Interval.fromDateTimes(s2, next));
      s2 = next;
      i += 1;
    }
    return results;
  }
  /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {Array}
   */
  splitBy(duration) {
    const dur = Duration.fromDurationLike(duration);
    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }
    let { s: s2 } = this, idx = 1, next;
    const results = [];
    while (s2 < this.e) {
      const added = this.start.plus(dur.mapUnits((x) => x * idx));
      next = +added > +this.e ? this.e : added;
      results.push(_Interval.fromDateTimes(s2, next));
      s2 = next;
      idx += 1;
    }
    return results;
  }
  /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {Array}
   */
  divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }
  /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */
  overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }
  /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */
  abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }
  /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */
  abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }
  /**
   * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.
   * @param {Interval} other
   * @return {boolean}
   */
  engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }
  /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    return this.s.equals(other.s) && this.e.equals(other.e);
  }
  /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */
  intersection(other) {
    if (!this.isValid) return this;
    const s2 = this.s > other.s ? this.s : other.s, e = this.e < other.e ? this.e : other.e;
    if (s2 >= e) {
      return null;
    } else {
      return _Interval.fromDateTimes(s2, e);
    }
  }
  /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */
  union(other) {
    if (!this.isValid) return this;
    const s2 = this.s < other.s ? this.s : other.s, e = this.e > other.e ? this.e : other.e;
    return _Interval.fromDateTimes(s2, e);
  }
  /**
   * Merge an array of Intervals into an equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * The resulting array will contain the Intervals in ascending order, that is, starting with the earliest Interval
   * and ending with the latest.
   *
   * @param {Array} intervals
   * @return {Array}
   */
  static merge(intervals) {
    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(
      ([sofar, current], item) => {
        if (!current) {
          return [sofar, item];
        } else if (current.overlaps(item) || current.abutsStart(item)) {
          return [sofar, current.union(item)];
        } else {
          return [sofar.concat([current]), item];
        }
      },
      [[], null]
    );
    if (final) {
      found.push(final);
    }
    return found;
  }
  /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {Array} intervals
   * @return {Array}
   */
  static xor(intervals) {
    let start = null, currentCount = 0;
    const results = [], ends = intervals.map((i) => [
      { time: i.s, type: "s" },
      { time: i.e, type: "e" }
    ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a, b) => a.time - b.time);
    for (const i of arr) {
      currentCount += i.type === "s" ? 1 : -1;
      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(_Interval.fromDateTimes(start, i.time));
        }
        start = null;
      }
    }
    return _Interval.merge(results);
  }
  /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {Array}
   */
  difference(...intervals) {
    return _Interval.xor([this].concat(intervals)).map((i) => this.intersection(i)).filter((i) => i && !i.isEmpty());
  }
  /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */
  toString() {
    if (!this.isValid) return INVALID2;
    return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;
  }
  /**
   * Returns a string representation of this Interval appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
    } else {
      return `Interval { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  /**
   * Returns a localized string representing this Interval. Accepts the same options as the
   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
   * is browser-specific, but in general it will return an appropriate representation of the
   * Interval in the assigned locale. Defaults to the system's locale if no locale has been
   * specified.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
   * Intl.DateTimeFormat constructor options.
   * @param {Object} opts - Options to override the configuration of the start DateTime.
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
   * @return {string}
   */
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID2;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */
  toISO(opts) {
    if (!this.isValid) return INVALID2;
    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
  }
  /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */
  toISODate() {
    if (!this.isValid) return INVALID2;
    return `${this.s.toISODate()}/${this.e.toISODate()}`;
  }
  /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */
  toISOTime(opts) {
    if (!this.isValid) return INVALID2;
    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
  }
  /**
   * Returns a string representation of this Interval formatted according to the specified format
   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
   * formatting tool.
   * @param {string} dateFormat - The format string. This string formats the start and end time.
   * See {@link DateTime#toFormat} for details.
   * @param {Object} opts - Options.
   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
   * representations.
   * @return {string}
   */
  toFormat(dateFormat, { separator = " \u2013 " } = {}) {
    if (!this.isValid) return INVALID2;
    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
  }
  /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */
  toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }
    return this.e.diff(this.s, unit, opts);
  }
  /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */
  mapEndpoints(mapFn) {
    return _Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  }
};

// node_modules/luxon/src/info.js
var Info = class {
  /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */
  static hasDST(zone = Settings.defaultZone) {
    const proto = DateTime.now().setZone(zone).set({ month: 12 });
    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
  }
  /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */
  static isValidIANAZone(zone) {
    return IANAZone.isValidZone(zone);
  }
  /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone#isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */
  static normalizeZone(input) {
    return normalizeZone(input, Settings.defaultZone);
  }
  /**
   * Get the weekday on which the week starts according to the given locale.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
   */
  static getStartOfWeek({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getStartOfWeek();
  }
  /**
   * Get the minimum number of days necessary in a week before it is considered part of the next year according
   * to the given locale.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number}
   */
  static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();
  }
  /**
   * Get the weekdays, which are considered the weekend according to the given locale
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
   */
  static getWeekendWeekdays({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getWeekendDays().slice();
  }
  /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {Array}
   */
  static months(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
  }
  /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link Info#months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {Array}
   */
  static monthsFormat(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
  }
  /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {Array}
   */
  static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
  }
  /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link Info#weekdays}
   * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @return {Array}
   */
  static weekdaysFormat(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
  }
  /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {Array}
   */
  static meridiems({ locale = null } = {}) {
    return Locale.create(locale).meridiems();
  }
  /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {Array}
   */
  static eras(length = "short", { locale = null } = {}) {
    return Locale.create(locale, null, "gregory").eras(length);
  }
  /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `relative`: whether this environment supports relative time formatting
   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
   * @example Info.features() //=> { relative: false, localeWeek: true }
   * @return {Object}
   */
  static features() {
    return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
  }
};

// node_modules/luxon/src/impl/diff.js
function dayDiff(earlier, later) {
  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(), ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
}
function highOrderDiffs(cursor, later, units) {
  const differs = [
    ["years", (a, b) => b.year - a.year],
    ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
    ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
    [
      "weeks",
      (a, b) => {
        const days = dayDiff(a, b);
        return (days - days % 7) / 7;
      }
    ],
    ["days", dayDiff]
  ];
  const results = {};
  const earlier = cursor;
  let lowestOrder, highWater;
  for (const [unit, differ] of differs) {
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;
      results[unit] = differ(cursor, later);
      highWater = earlier.plus(results);
      if (highWater > later) {
        results[unit]--;
        cursor = earlier.plus(results);
        if (cursor > later) {
          highWater = cursor;
          results[unit]--;
          cursor = earlier.plus(results);
        }
      } else {
        cursor = highWater;
      }
    }
  }
  return [cursor, results, highWater, lowestOrder];
}
function diff_default(earlier, later, units, opts) {
  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
  const remainingMillis = later - cursor;
  const lowerOrderUnits = units.filter(
    (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
  );
  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      highWater = cursor.plus({ [lowestOrder]: 1 });
    }
    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }
  const duration = Duration.fromObject(results, opts);
  if (lowerOrderUnits.length > 0) {
    return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}

// node_modules/luxon/src/impl/tokenParser.js
var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
function intUnit(regex, post = (i) => i) {
  return { regex, deser: ([s2]) => post(parseDigits(s2)) };
}
var NBSP = String.fromCharCode(160);
var spaceOrNBSP = `[ ${NBSP}]`;
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
function fixListRegex(s2) {
  return s2.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}
function stripInsensitivities(s2) {
  return s2.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
}
function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: ([s2]) => strings.findIndex((i) => stripInsensitivities(s2) === stripInsensitivities(i)) + startIndex
    };
  }
}
function offset(regex, groups) {
  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
}
function simple(regex) {
  return { regex, deser: ([s2]) => s2 };
}
function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function unitForToken(token, loc) {
  const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s2]) => s2, literal: true }), unitate = (t) => {
    if (token.literal) {
      return literal(t);
    }
    switch (t.val) {
      // era
      case "G":
        return oneOf(loc.eras("short"), 0);
      case "GG":
        return oneOf(loc.eras("long"), 0);
      // years
      case "y":
        return intUnit(oneToSix);
      case "yy":
        return intUnit(twoToFour, untruncateYear);
      case "yyyy":
        return intUnit(four);
      case "yyyyy":
        return intUnit(fourToSix);
      case "yyyyyy":
        return intUnit(six);
      // months
      case "M":
        return intUnit(oneOrTwo);
      case "MM":
        return intUnit(two);
      case "MMM":
        return oneOf(loc.months("short", true), 1);
      case "MMMM":
        return oneOf(loc.months("long", true), 1);
      case "L":
        return intUnit(oneOrTwo);
      case "LL":
        return intUnit(two);
      case "LLL":
        return oneOf(loc.months("short", false), 1);
      case "LLLL":
        return oneOf(loc.months("long", false), 1);
      // dates
      case "d":
        return intUnit(oneOrTwo);
      case "dd":
        return intUnit(two);
      // ordinals
      case "o":
        return intUnit(oneToThree);
      case "ooo":
        return intUnit(three);
      // time
      case "HH":
        return intUnit(two);
      case "H":
        return intUnit(oneOrTwo);
      case "hh":
        return intUnit(two);
      case "h":
        return intUnit(oneOrTwo);
      case "mm":
        return intUnit(two);
      case "m":
        return intUnit(oneOrTwo);
      case "q":
        return intUnit(oneOrTwo);
      case "qq":
        return intUnit(two);
      case "s":
        return intUnit(oneOrTwo);
      case "ss":
        return intUnit(two);
      case "S":
        return intUnit(oneToThree);
      case "SSS":
        return intUnit(three);
      case "u":
        return simple(oneToNine);
      case "uu":
        return simple(oneOrTwo);
      case "uuu":
        return intUnit(one);
      // meridiem
      case "a":
        return oneOf(loc.meridiems(), 0);
      // weekYear (k)
      case "kkkk":
        return intUnit(four);
      case "kk":
        return intUnit(twoToFour, untruncateYear);
      // weekNumber (W)
      case "W":
        return intUnit(oneOrTwo);
      case "WW":
        return intUnit(two);
      // weekdays
      case "E":
      case "c":
        return intUnit(one);
      case "EEE":
        return oneOf(loc.weekdays("short", false), 1);
      case "EEEE":
        return oneOf(loc.weekdays("long", false), 1);
      case "ccc":
        return oneOf(loc.weekdays("short", true), 1);
      case "cccc":
        return oneOf(loc.weekdays("long", true), 1);
      // offset/zone
      case "Z":
      case "ZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
      case "ZZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
      // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
      // because we don't have any way to figure out what they are
      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);
      // this special-case "token" represents a place where a macro-token expanded into a white-space literal
      // in this case we accept any non-newline white-space
      case " ":
        return simple(/[^\S\n\r]/);
      default:
        return literal(t);
    }
  };
  const unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}
var partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour12: {
    numeric: "h",
    "2-digit": "hh"
  },
  hour24: {
    numeric: "H",
    "2-digit": "HH"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  },
  timeZoneName: {
    long: "ZZZZZ",
    short: "ZZZ"
  }
};
function tokenForPart(part, formatOpts, resolvedOpts) {
  const { type, value } = part;
  if (type === "literal") {
    const isSpace = /^\s+$/.test(value);
    return {
      literal: !isSpace,
      val: isSpace ? " " : value
    };
  }
  const style = formatOpts[type];
  let actualType = type;
  if (type === "hour") {
    if (formatOpts.hour12 != null) {
      actualType = formatOpts.hour12 ? "hour12" : "hour24";
    } else if (formatOpts.hourCycle != null) {
      if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
        actualType = "hour12";
      } else {
        actualType = "hour24";
      }
    } else {
      actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
    }
  }
  let val = partTypeStyleToTokenVal[actualType];
  if (typeof val === "object") {
    val = val[style];
  }
  if (val) {
    return {
      literal: false,
      val
    };
  }
  return void 0;
}
function buildRegex(units) {
  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
  return [`^${re}$`, units];
}
function match(input, regex, handlers) {
  const matches = input.match(regex);
  if (matches) {
    const all = {};
    let matchIndex = 1;
    for (const i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        const h = handlers[i], groups = h.groups ? h.groups + 1 : 1;
        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [matches, all];
  } else {
    return [matches, {}];
  }
}
function dateTimeFromMatches(matches) {
  const toField = (token) => {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  };
  let zone = null;
  let specificOffset;
  if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  }
  if (!isUndefined(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }
  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }
  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }
  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }
  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }
  const vals = Object.keys(matches).reduce((r, k) => {
    const f = toField(k);
    if (f) {
      r[f] = matches[k];
    }
    return r;
  }, {});
  return [vals, zone, specificOffset];
}
var dummyDateTimeCache = null;
function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }
  return dummyDateTimeCache;
}
function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }
  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  const tokens = formatOptsToTokens(formatOpts, locale);
  if (tokens == null || tokens.includes(void 0)) {
    return token;
  }
  return tokens;
}
function expandMacroTokens(tokens, locale) {
  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
}
var TokenParser = class {
  constructor(locale, format2) {
    this.locale = locale;
    this.format = format2;
    this.tokens = expandMacroTokens(Formatter.parseFormat(format2), locale);
    this.units = this.tokens.map((t) => unitForToken(t, locale));
    this.disqualifyingUnit = this.units.find((t) => t.invalidReason);
    if (!this.disqualifyingUnit) {
      const [regexString, handlers] = buildRegex(this.units);
      this.regex = RegExp(regexString, "i");
      this.handlers = handlers;
    }
  }
  explainFromTokens(input) {
    if (!this.isValid) {
      return { input, tokens: this.tokens, invalidReason: this.invalidReason };
    } else {
      const [rawMatches, matches] = match(input, this.regex, this.handlers), [result, zone, specificOffset] = matches ? dateTimeFromMatches(matches) : [null, null, void 0];
      if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
        throw new ConflictingSpecificationError(
          "Can't include meridiem when specifying 24-hour format"
        );
      }
      return {
        input,
        tokens: this.tokens,
        regex: this.regex,
        rawMatches,
        matches,
        result,
        zone,
        specificOffset
      };
    }
  }
  get isValid() {
    return !this.disqualifyingUnit;
  }
  get invalidReason() {
    return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;
  }
};
function explainFromTokens(locale, input, format2) {
  const parser = new TokenParser(locale, format2);
  return parser.explainFromTokens(input);
}
function parseFromTokens(locale, input, format2) {
  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format2);
  return [result, zone, specificOffset, invalidReason];
}
function formatOptsToTokens(formatOpts, locale) {
  if (!formatOpts) {
    return null;
  }
  const formatter = Formatter.create(locale, formatOpts);
  const df = formatter.dtFormatter(getDummyDateTime());
  const parts = df.formatToParts();
  const resolvedOpts = df.resolvedOptions();
  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
}

// node_modules/luxon/src/datetime.js
var INVALID3 = "Invalid DateTime";
var MAX_DATE = 864e13;
function unsupportedZone(zone) {
  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
}
function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
}
function possiblyCachedLocalWeekData(dt) {
  if (dt.localWeekData === null) {
    dt.localWeekData = gregorianToWeek(
      dt.c,
      dt.loc.getMinDaysInFirstWeek(),
      dt.loc.getStartOfWeek()
    );
  }
  return dt.localWeekData;
}
function clone2(inst, alts) {
  const current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime({ ...current, ...alts, old: current });
}
function fixOffset(localTS, o, tz) {
  let utcGuess = localTS - o * 60 * 1e3;
  const o2 = tz.offset(utcGuess);
  if (o === o2) {
    return [utcGuess, o];
  }
  utcGuess -= (o2 - o) * 60 * 1e3;
  const o3 = tz.offset(utcGuess);
  if (o2 === o3) {
    return [utcGuess, o2];
  }
  return [localTS - Math.min(o2, o3) * 60 * 1e3, Math.max(o2, o3)];
}
function tsToObj(ts, offset2) {
  ts += offset2 * 60 * 1e3;
  const d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
}
function objToTS(obj, offset2, zone) {
  return fixOffset(objToLocalTS(obj), offset2, zone);
}
function adjustTime(inst, dur) {
  const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = {
    ...inst.c,
    year,
    month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }, millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"), localTS = objToLocalTS(c);
  let [ts, o] = fixOffset(localTS, oPre, inst.zone);
  if (millisToAdd !== 0) {
    ts += millisToAdd;
    o = inst.zone.offset(ts);
  }
  return { ts, o };
}
function parseDataToDateTime(parsed, parsedZone, opts, format2, text, specificOffset) {
  const { setZone, zone } = opts;
  if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
    const interpretationZone = parsedZone || zone, inst = DateTime.fromObject(parsed, {
      ...opts,
      zone: interpretationZone,
      specificOffset
    });
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(
      new Invalid("unparsable", `the input "${text}" can't be parsed as ${format2}`)
    );
  }
}
function toTechFormat(dt, format2, allowZ = true) {
  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format2) : null;
}
function toISODate(o, extended) {
  const longFormat = o.c.year > 9999 || o.c.year < 0;
  let c = "";
  if (longFormat && o.c.year >= 0) c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);
  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }
  return c;
}
function toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
  let c = padStart(o.c.hour);
  if (extended) {
    c += ":";
    c += padStart(o.c.minute);
    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }
  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);
    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }
  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }
  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }
  return c;
}
var defaultUnitValues = {
  month: 1,
  day: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var defaultWeekUnitValues = {
  weekNumber: 1,
  weekday: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var defaultOrdinalUnitValues = {
  ordinal: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var orderedUnits2 = ["year", "month", "day", "hour", "minute", "second", "millisecond"];
var orderedWeekUnits = [
  "weekYear",
  "weekNumber",
  "weekday",
  "hour",
  "minute",
  "second",
  "millisecond"
];
var orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];
function normalizeUnit(unit) {
  const normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized) throw new InvalidUnitError(unit);
  return normalized;
}
function normalizeUnitWithLocalWeeks(unit) {
  switch (unit.toLowerCase()) {
    case "localweekday":
    case "localweekdays":
      return "localWeekday";
    case "localweeknumber":
    case "localweeknumbers":
      return "localWeekNumber";
    case "localweekyear":
    case "localweekyears":
      return "localWeekYear";
    default:
      return normalizeUnit(unit);
  }
}
function guessOffsetForZone(zone) {
  if (zoneOffsetTs === void 0) {
    zoneOffsetTs = Settings.now();
  }
  if (zone.type !== "iana") {
    return zone.offset(zoneOffsetTs);
  }
  const zoneName = zone.name;
  let offsetGuess = zoneOffsetGuessCache.get(zoneName);
  if (offsetGuess === void 0) {
    offsetGuess = zone.offset(zoneOffsetTs);
    zoneOffsetGuessCache.set(zoneName, offsetGuess);
  }
  return offsetGuess;
}
function quickDT(obj, opts) {
  const zone = normalizeZone(opts.zone, Settings.defaultZone);
  if (!zone.isValid) {
    return DateTime.invalid(unsupportedZone(zone));
  }
  const loc = Locale.fromObject(opts);
  let ts, o;
  if (!isUndefined(obj.year)) {
    for (const u of orderedUnits2) {
      if (isUndefined(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }
    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid) {
      return DateTime.invalid(invalid);
    }
    const offsetProvis = guessOffsetForZone(zone);
    [ts, o] = objToTS(obj, offsetProvis, zone);
  } else {
    ts = Settings.now();
  }
  return new DateTime({ ts, zone, loc, o });
}
function diffRelative(start, end, opts) {
  const round = isUndefined(opts.round) ? true : opts.round, format2 = (c, unit) => {
    c = roundTo(c, round || opts.calendary ? 0 : 2, true);
    const formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c, unit);
  }, differ = (unit) => {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  };
  if (opts.unit) {
    return format2(differ(opts.unit), opts.unit);
  }
  for (const unit of opts.units) {
    const count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format2(count, unit);
    }
  }
  return format2(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}
function lastOpts(argList) {
  let opts = {}, args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [opts, args];
}
var zoneOffsetTs;
var zoneOffsetGuessCache = /* @__PURE__ */ new Map();
var DateTime = class _DateTime {
  /**
   * @access private
   */
  constructor(config) {
    const zone = config.zone || Settings.defaultZone;
    let invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
    let c = null, o = null;
    if (!invalid) {
      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);
      if (unchanged) {
        [c, o] = [config.old.c, config.old.o];
      } else {
        const ot = isNumber(config.o) && !config.old ? config.o : zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }
    this._zone = zone;
    this.loc = config.loc || Locale.create();
    this.invalid = invalid;
    this.weekData = null;
    this.localWeekData = null;
    this.c = c;
    this.o = o;
    this.isLuxonDateTime = true;
  }
  // CONSTRUCT
  /**
   * Create a DateTime for the current instant, in the system's time zone.
   *
   * Use Settings to override these default values if needed.
   * @example DateTime.now().toISO() //~> now in the ISO format
   * @return {DateTime}
   */
  static now() {
    return new _DateTime({});
  }
  /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month, 1-indexed
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                                  //~> now
   * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */
  static local() {
    const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }
  /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @param {Object} options - configuration options for the DateTime
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
   * @example DateTime.utc()                                              //~> now
   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
   * @return {DateTime}
   */
  static utc() {
    const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
    opts.zone = FixedOffsetZone.utcInstance;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }
  /**
   * Create a DateTime from a JavaScript Date object. Uses the default zone.
   * @param {Date} date - a JavaScript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */
  static fromJSDate(date, options = {}) {
    const ts = isDate(date) ? date.valueOf() : NaN;
    if (Number.isNaN(ts)) {
      return _DateTime.invalid("invalid input");
    }
    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return _DateTime.invalid(unsupportedZone(zoneToUse));
    }
    return new _DateTime({
      ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options)
    });
  }
  /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromMillis(milliseconds, options = {}) {
    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError(
        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
      );
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      return _DateTime.invalid("Timestamp out of range");
    } else {
      return new _DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromSeconds(seconds, options = {}) {
    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new _DateTime({
        ts: seconds * 1e3,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.localWeekYear - a week year, according to the locale
   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {Object} opts - options for creating this DateTime
   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
   * @return {DateTime}
   */
  static fromObject(obj, opts = {}) {
    obj = obj || {};
    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return _DateTime.invalid(unsupportedZone(zoneToUse));
    }
    const loc = Locale.fromObject(opts);
    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);
    const tsNow = Settings.now(), offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError(
        "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
      );
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
    let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits2;
      defaultValues = defaultUnitValues;
    }
    let foundFirst = false;
    for (const u of units) {
      const v = normalized[u];
      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    }
    const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
    if (invalid) {
      return _DateTime.invalid(invalid);
    }
    const gregorian = useWeekData ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new _DateTime({
      ts: tsFinal,
      zone: zoneToUse,
      o: offsetFinal,
      loc
    });
    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return _DateTime.invalid(
        "mismatched weekday",
        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
      );
    }
    if (!inst.isValid) {
      return _DateTime.invalid(inst.invalid);
    }
    return inst;
  }
  /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */
  static fromISO(text, opts = {}) {
    const [vals, parsedZone] = parseISODate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }
  /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */
  static fromRFC2822(text, opts = {}) {
    const [vals, parsedZone] = parseRFC2822Date(text);
    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }
  /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */
  static fromHTTP(text, opts = {}) {
    const [vals, parsedZone] = parseHTTPDate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }
  /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromFormat(text, fmt, opts = {}) {
    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }
    const { locale = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
    if (invalid) {
      return _DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
    }
  }
  /**
   * @deprecated use fromFormat instead
   */
  static fromString(text, fmt, opts = {}) {
    return _DateTime.fromFormat(text, fmt, opts);
  }
  /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */
  static fromSQL(text, opts = {}) {
    const [vals, parsedZone] = parseSQL(text);
    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }
  /**
   * Create an invalid DateTime.
   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new _DateTime({ invalid });
    }
  }
  /**
   * Check if an object is an instance of DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isDateTime(o) {
    return o && o.isLuxonDateTime || false;
  }
  /**
   * Produce the format string for a set of options
   * @param formatOpts
   * @param localeOpts
   * @returns {string}
   */
  static parseFormatForOpts(formatOpts, localeOpts = {}) {
    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
    return !tokenList ? null : tokenList.map((t) => t ? t.val : null).join("");
  }
  /**
   * Produce the the fully expanded format token for the locale
   * Does NOT quote characters, so quoted tokens will not round trip correctly
   * @param fmt
   * @param localeOpts
   * @returns {string}
   */
  static expandFormat(fmt, localeOpts = {}) {
    const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
    return expanded.map((t) => t.val).join("");
  }
  static resetCache() {
    zoneOffsetTs = void 0;
    zoneOffsetGuessCache.clear();
  }
  // INFO
  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */
  get(unit) {
    return this[unit];
  }
  /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */
  get isValid() {
    return this.invalid === null;
  }
  /**
   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
   * @type {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  /**
   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  /**
   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
   *
   * @type {string}
   */
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }
  /**
   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
   *
   * @type {string}
   */
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }
  /**
   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
   *
   * @type {string}
   */
  get outputCalendar() {
    return this.isValid ? this.loc.outputCalendar : null;
  }
  /**
   * Get the time zone associated with this DateTime.
   * @type {Zone}
   */
  get zone() {
    return this._zone;
  }
  /**
   * Get the name of the time zone.
   * @type {string}
   */
  get zoneName() {
    return this.isValid ? this.zone.name : null;
  }
  /**
   * Get the year
   * @example DateTime.local(2017, 5, 25).year //=> 2017
   * @type {number}
   */
  get year() {
    return this.isValid ? this.c.year : NaN;
  }
  /**
   * Get the quarter
   * @example DateTime.local(2017, 5, 25).quarter //=> 2
   * @type {number}
   */
  get quarter() {
    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
  }
  /**
   * Get the month (1-12).
   * @example DateTime.local(2017, 5, 25).month //=> 5
   * @type {number}
   */
  get month() {
    return this.isValid ? this.c.month : NaN;
  }
  /**
   * Get the day of the month (1-30ish).
   * @example DateTime.local(2017, 5, 25).day //=> 25
   * @type {number}
   */
  get day() {
    return this.isValid ? this.c.day : NaN;
  }
  /**
   * Get the hour of the day (0-23).
   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
   * @type {number}
   */
  get hour() {
    return this.isValid ? this.c.hour : NaN;
  }
  /**
   * Get the minute of the hour (0-59).
   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
   * @type {number}
   */
  get minute() {
    return this.isValid ? this.c.minute : NaN;
  }
  /**
   * Get the second of the minute (0-59).
   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
   * @type {number}
   */
  get second() {
    return this.isValid ? this.c.second : NaN;
  }
  /**
   * Get the millisecond of the second (0-999).
   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
   * @type {number}
   */
  get millisecond() {
    return this.isValid ? this.c.millisecond : NaN;
  }
  /**
   * Get the week year
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
   * @type {number}
   */
  get weekYear() {
    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
  }
  /**
   * Get the week number of the week year (1-52ish).
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
   * @type {number}
   */
  get weekNumber() {
    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
  }
  /**
   * Get the day of the week.
   * 1 is Monday and 7 is Sunday
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2014, 11, 31).weekday //=> 4
   * @type {number}
   */
  get weekday() {
    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
  }
  /**
   * Returns true if this date is on a weekend according to the locale, false otherwise
   * @returns {boolean}
   */
  get isWeekend() {
    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
  }
  /**
   * Get the day of the week according to the locale.
   * 1 is the first day of the week and 7 is the last day of the week.
   * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
   * @returns {number}
   */
  get localWeekday() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
  }
  /**
   * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
   * because the week can start on different days of the week (see localWeekday) and because a different number of days
   * is required for a week to count as the first week of a year.
   * @returns {number}
   */
  get localWeekNumber() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
  }
  /**
   * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
   * differently, see localWeekNumber.
   * @returns {number}
   */
  get localWeekYear() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
  }
  /**
   * Get the ordinal (meaning the day of the year)
   * @example DateTime.local(2017, 5, 25).ordinal //=> 145
   * @type {number|DateTime}
   */
  get ordinal() {
    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
  }
  /**
   * Get the human readable short month name, such as 'Oct'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
   * @type {string}
   */
  get monthShort() {
    return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
  }
  /**
   * Get the human readable long month name, such as 'October'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).monthLong //=> October
   * @type {string}
   */
  get monthLong() {
    return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
  }
  /**
   * Get the human readable short weekday, such as 'Mon'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
   * @type {string}
   */
  get weekdayShort() {
    return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
  }
  /**
   * Get the human readable long weekday, such as 'Monday'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
   * @type {string}
   */
  get weekdayLong() {
    return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
  }
  /**
   * Get the UTC offset of this DateTime in minutes
   * @example DateTime.now().offset //=> -240
   * @example DateTime.utc().offset //=> 0
   * @type {number}
   */
  get offset() {
    return this.isValid ? +this.o : NaN;
  }
  /**
   * Get the short human name for the zone's current offset, for example "EST" or "EDT".
   * Defaults to the system's locale if no locale has been specified
   * @type {string}
   */
  get offsetNameShort() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "short",
        locale: this.locale
      });
    } else {
      return null;
    }
  }
  /**
   * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
   * Defaults to the system's locale if no locale has been specified
   * @type {string}
   */
  get offsetNameLong() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "long",
        locale: this.locale
      });
    } else {
      return null;
    }
  }
  /**
   * Get whether this zone's offset ever changes, as in a DST.
   * @type {boolean}
   */
  get isOffsetFixed() {
    return this.isValid ? this.zone.isUniversal : null;
  }
  /**
   * Get whether the DateTime is in a DST.
   * @type {boolean}
   */
  get isInDST() {
    if (this.isOffsetFixed) {
      return false;
    } else {
      return this.offset > this.set({ month: 1, day: 1 }).offset || this.offset > this.set({ month: 5 }).offset;
    }
  }
  /**
   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
   * in this DateTime's zone. During DST changes local time can be ambiguous, for example
   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
   * @returns {DateTime[]}
   */
  getPossibleOffsets() {
    if (!this.isValid || this.isOffsetFixed) {
      return [this];
    }
    const dayMs = 864e5;
    const minuteMs = 6e4;
    const localTS = objToLocalTS(this.c);
    const oEarlier = this.zone.offset(localTS - dayMs);
    const oLater = this.zone.offset(localTS + dayMs);
    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
    const o2 = this.zone.offset(localTS - oLater * minuteMs);
    if (o1 === o2) {
      return [this];
    }
    const ts1 = localTS - o1 * minuteMs;
    const ts2 = localTS - o2 * minuteMs;
    const c1 = tsToObj(ts1, o1);
    const c2 = tsToObj(ts2, o2);
    if (c1.hour === c2.hour && c1.minute === c2.minute && c1.second === c2.second && c1.millisecond === c2.millisecond) {
      return [clone2(this, { ts: ts1 }), clone2(this, { ts: ts2 })];
    }
    return [this];
  }
  /**
   * Returns true if this DateTime is in a leap year, false otherwise
   * @example DateTime.local(2016).isInLeapYear //=> true
   * @example DateTime.local(2013).isInLeapYear //=> false
   * @type {boolean}
   */
  get isInLeapYear() {
    return isLeapYear(this.year);
  }
  /**
   * Returns the number of days in this DateTime's month
   * @example DateTime.local(2016, 2).daysInMonth //=> 29
   * @example DateTime.local(2016, 3).daysInMonth //=> 31
   * @type {number}
   */
  get daysInMonth() {
    return daysInMonth(this.year, this.month);
  }
  /**
   * Returns the number of days in this DateTime's year
   * @example DateTime.local(2016).daysInYear //=> 366
   * @example DateTime.local(2013).daysInYear //=> 365
   * @type {number}
   */
  get daysInYear() {
    return this.isValid ? daysInYear(this.year) : NaN;
  }
  /**
   * Returns the number of weeks in this DateTime's year
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2004).weeksInWeekYear //=> 53
   * @example DateTime.local(2013).weeksInWeekYear //=> 52
   * @type {number}
   */
  get weeksInWeekYear() {
    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
  }
  /**
   * Returns the number of weeks in this DateTime's local week year
   * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
   * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
   * @type {number}
   */
  get weeksInLocalWeekYear() {
    return this.isValid ? weeksInWeekYear(
      this.localWeekYear,
      this.loc.getMinDaysInFirstWeek(),
      this.loc.getStartOfWeek()
    ) : NaN;
  }
  /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */
  resolvedLocaleOptions(opts = {}) {
    const { locale, numberingSystem, calendar } = Formatter.create(
      this.loc.clone(opts),
      opts
    ).resolvedOptions(this);
    return { locale, numberingSystem, outputCalendar: calendar };
  }
  // TRANSFORM
  /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link DateTime#setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */
  toUTC(offset2 = 0, opts = {}) {
    return this.setZone(FixedOffsetZone.instance(offset2), opts);
  }
  /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */
  toLocal() {
    return this.setZone(Settings.defaultZone);
  }
  /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */
  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
    zone = normalizeZone(zone, Settings.defaultZone);
    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return _DateTime.invalid(unsupportedZone(zone));
    } else {
      let newTS = this.ts;
      if (keepLocalTime || keepCalendarTime) {
        const offsetGuess = zone.offset(this.ts);
        const asObj = this.toObject();
        [newTS] = objToTS(asObj, offsetGuess, zone);
      }
      return clone2(this, { ts: newTS, zone });
    }
  }
  /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */
  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
    return clone2(this, { loc });
  }
  /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */
  setLocale(locale) {
    return this.reconfigure({ locale });
  }
  /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
   *
   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
   * They cannot be mixed with ISO-week units like `weekday`.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */
  set(values) {
    if (!this.isValid) return this;
    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);
    const settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError(
        "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
      );
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    let mixed;
    if (settingWeekStuff) {
      mixed = weekToGregorian(
        { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },
        minDaysInFirstWeek,
        startOfWeek
      );
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
    } else {
      mixed = { ...this.toObject(), ...normalized };
      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }
    const [ts, o] = objToTS(mixed, this.o, this.zone);
    return clone2(this, { ts, o });
  }
  /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.now().plus(123) //~> in 123 milliseconds
   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */
  plus(duration) {
    if (!this.isValid) return this;
    const dur = Duration.fromDurationLike(duration);
    return clone2(this, adjustTime(this, dur));
  }
  /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link DateTime#plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
   */
  minus(duration) {
    if (!this.isValid) return this;
    const dur = Duration.fromDurationLike(duration).negate();
    return clone2(this, adjustTime(this, dur));
  }
  /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */
  startOf(unit, { useLocaleWeeks = false } = {}) {
    if (!this.isValid) return this;
    const o = {}, normalizedUnit = Duration.normalizeUnit(unit);
    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through
      case "quarters":
      case "months":
        o.day = 1;
      // falls through
      case "weeks":
      case "days":
        o.hour = 0;
      // falls through
      case "hours":
        o.minute = 0;
      // falls through
      case "minutes":
        o.second = 0;
      // falls through
      case "seconds":
        o.millisecond = 0;
        break;
      case "milliseconds":
        break;
    }
    if (normalizedUnit === "weeks") {
      if (useLocaleWeeks) {
        const startOfWeek = this.loc.getStartOfWeek();
        const { weekday } = this;
        if (weekday < startOfWeek) {
          o.weekNumber = this.weekNumber - 1;
        }
        o.weekday = startOfWeek;
      } else {
        o.weekday = 1;
      }
    }
    if (normalizedUnit === "quarters") {
      const q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }
    return this.set(o);
  }
  /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */
  endOf(unit, opts) {
    return this.isValid ? this.plus({ [unit]: 1 }).startOf(unit, opts).minus(1) : this;
  }
  // OUTPUT
  /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */
  toFormat(fmt, opts = {}) {
    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID3;
  }
  /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
   * @return {string}
   */
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID3;
  }
  /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.now().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */
  toLocaleParts(opts = {}) {
    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string|null}
   */
  toISO({
    format: format2 = "extended",
    suppressSeconds = false,
    suppressMilliseconds = false,
    includeOffset = true,
    extendedZone = false
  } = {}) {
    if (!this.isValid) {
      return null;
    }
    const ext = format2 === "extended";
    let c = toISODate(this, ext);
    c += "T";
    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    return c;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string|null}
   */
  toISODate({ format: format2 = "extended" } = {}) {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, format2 === "extended");
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */
  toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
   * @return {string}
   */
  toISOTime({
    suppressMilliseconds = false,
    suppressSeconds = false,
    includeOffset = true,
    includePrefix = false,
    extendedZone = false,
    format: format2 = "extended"
  } = {}) {
    if (!this.isValid) {
      return null;
    }
    let c = includePrefix ? "T" : "";
    return c + toISOTime(
      this,
      format2 === "extended",
      suppressSeconds,
      suppressMilliseconds,
      includeOffset,
      extendedZone
    );
  }
  /**
   * Returns an RFC 2822-compatible string representation of this DateTime
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */
  toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */
  toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string|null}
   */
  toSQLDate() {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, true);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */
  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
    let fmt = "HH:mm:ss.SSS";
    if (includeZone || includeOffset) {
      if (includeOffsetSpace) {
        fmt += " ";
      }
      if (includeZone) {
        fmt += "z";
      } else if (includeOffset) {
        fmt += "ZZ";
      }
    }
    return toTechFormat(this, fmt, true);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */
  toSQL(opts = {}) {
    if (!this.isValid) {
      return null;
    }
    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
  }
  /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */
  toString() {
    return this.isValid ? this.toISO() : INVALID3;
  }
  /**
   * Returns a string representation of this DateTime appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
    } else {
      return `DateTime { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
   * @return {number}
   */
  valueOf() {
    return this.toMillis();
  }
  /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */
  toMillis() {
    return this.isValid ? this.ts : NaN;
  }
  /**
   * Returns the epoch seconds (including milliseconds in the fractional part) of this DateTime.
   * @return {number}
   */
  toSeconds() {
    return this.isValid ? this.ts / 1e3 : NaN;
  }
  /**
   * Returns the epoch seconds (as a whole number) of this DateTime.
   * @return {number}
   */
  toUnixInteger() {
    return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
  }
  /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */
  toJSON() {
    return this.toISO();
  }
  /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */
  toBSON() {
    return this.toJSDate();
  }
  /**
   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */
  toObject(opts = {}) {
    if (!this.isValid) return {};
    const base = { ...this.c };
    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }
    return base;
  }
  /**
   * Returns a JavaScript Date equivalent to this DateTime.
   * @return {Date}
   */
  toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  }
  // COMPARE
  /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */
  diff(otherDateTime, unit = "milliseconds", opts = {}) {
    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid("created by diffing an invalid DateTime");
    }
    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };
    const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default(earlier, later, units, durOpts);
    return otherIsLater ? diffed.negate() : diffed;
  }
  /**
   * Return the difference between this DateTime and right now.
   * See {@link DateTime#diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  diffNow(unit = "milliseconds", opts = {}) {
    return this.diff(_DateTime.now(), unit, opts);
  }
  /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval|DateTime}
   */
  until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }
  /**
   * Return whether this DateTime is in the same unit of time as another DateTime.
   * Higher-order units must also be identical for this function to return `true`.
   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
   * @return {boolean}
   */
  hasSame(otherDateTime, unit, opts) {
    if (!this.isValid) return false;
    const inputMs = otherDateTime.valueOf();
    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
    return adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts);
  }
  /**
   * Equality check
   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */
  equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }
  /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */
  toRelative(options = {}) {
    if (!this.isValid) return null;
    const base = options.base || _DateTime.fromObject({}, { zone: this.zone }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
    let units = ["years", "months", "days", "hours", "minutes", "seconds"];
    let unit = options.unit;
    if (Array.isArray(options.unit)) {
      units = options.unit;
      unit = void 0;
    }
    return diffRelative(base, this.plus(padding), {
      ...options,
      numeric: "always",
      units,
      unit
    });
  }
  /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */
  toRelativeCalendar(options = {}) {
    if (!this.isValid) return null;
    return diffRelative(options.base || _DateTime.fromObject({}, { zone: this.zone }), this, {
      ...options,
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true
    });
  }
  /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */
  static min(...dateTimes) {
    if (!dateTimes.every(_DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
  }
  /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */
  static max(...dateTimes) {
    if (!dateTimes.every(_DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
  }
  // MISC
  /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */
  static fromFormatExplain(text, fmt, options = {}) {
    const { locale = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    });
    return explainFromTokens(localeToUse, text, fmt);
  }
  /**
   * @deprecated use fromFormatExplain instead
   */
  static fromStringExplain(text, fmt, options = {}) {
    return _DateTime.fromFormatExplain(text, fmt, options);
  }
  /**
   * Build a parser for `fmt` using the given locale. This parser can be passed
   * to {@link DateTime.fromFormatParser} to a parse a date in this format. This
   * can be used to optimize cases where many dates need to be parsed in a
   * specific format.
   *
   * @param {String} fmt - the format the string is expected to be in (see
   * description)
   * @param {Object} options - options used to set locale and numberingSystem
   * for parser
   * @returns {TokenParser} - opaque object to be used
   */
  static buildFormatParser(fmt, options = {}) {
    const { locale = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    });
    return new TokenParser(localeToUse, fmt);
  }
  /**
   * Create a DateTime from an input string and format parser.
   *
   * The format parser must have been created with the same locale as this call.
   *
   * @param {String} text - the string to parse
   * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}
   * @param {Object} opts - options taken by fromFormat()
   * @returns {DateTime}
   */
  static fromFormatParser(text, formatParser, opts = {}) {
    if (isUndefined(text) || isUndefined(formatParser)) {
      throw new InvalidArgumentError(
        "fromFormatParser requires an input string and a format parser"
      );
    }
    const { locale = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    });
    if (!localeToUse.equals(formatParser.locale)) {
      throw new InvalidArgumentError(
        `fromFormatParser called with a locale of ${localeToUse}, but the format parser was created for ${formatParser.locale}`
      );
    }
    const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);
    if (invalidReason) {
      return _DateTime.invalid(invalidReason);
    } else {
      return parseDataToDateTime(
        result,
        zone,
        opts,
        `format ${formatParser.format}`,
        text,
        specificOffset
      );
    }
  }
  // FORMAT PRESETS
  /**
   * {@link DateTime#toLocaleString} format like 10/14/1983
   * @type {Object}
   */
  static get DATE_SHORT() {
    return DATE_SHORT;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
   * @type {Object}
   */
  static get DATE_MED() {
    return DATE_MED;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
   * @type {Object}
   */
  static get DATE_MED_WITH_WEEKDAY() {
    return DATE_MED_WITH_WEEKDAY;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983'
   * @type {Object}
   */
  static get DATE_FULL() {
    return DATE_FULL;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
   * @type {Object}
   */
  static get DATE_HUGE() {
    return DATE_HUGE;
  }
  /**
   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_SIMPLE() {
    return TIME_SIMPLE;
  }
  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_SECONDS() {
    return TIME_WITH_SECONDS;
  }
  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_SHORT_OFFSET() {
    return TIME_WITH_SHORT_OFFSET;
  }
  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_LONG_OFFSET() {
    return TIME_WITH_LONG_OFFSET;
  }
  /**
   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_SIMPLE() {
    return TIME_24_SIMPLE;
  }
  /**
   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_SECONDS() {
    return TIME_24_WITH_SECONDS;
  }
  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_SHORT_OFFSET() {
    return TIME_24_WITH_SHORT_OFFSET;
  }
  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_LONG_OFFSET() {
    return TIME_24_WITH_LONG_OFFSET;
  }
  /**
   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_SHORT() {
    return DATETIME_SHORT;
  }
  /**
   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_SHORT_WITH_SECONDS() {
    return DATETIME_SHORT_WITH_SECONDS;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED() {
    return DATETIME_MED;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED_WITH_SECONDS() {
    return DATETIME_MED_WITH_SECONDS;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED_WITH_WEEKDAY() {
    return DATETIME_MED_WITH_WEEKDAY;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_FULL() {
    return DATETIME_FULL;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_FULL_WITH_SECONDS() {
    return DATETIME_FULL_WITH_SECONDS;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_HUGE() {
    return DATETIME_HUGE;
  }
  /**
   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_HUGE_WITH_SECONDS() {
    return DATETIME_HUGE_WITH_SECONDS;
  }
};
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError(
      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
    );
  }
}

// src/types/enums.ts
var CoreTaskStatus = /* @__PURE__ */ ((CoreTaskStatus2) => {
  CoreTaskStatus2["Todo"] = " ";
  CoreTaskStatus2["InProgress"] = "/";
  CoreTaskStatus2["Done"] = "x";
  CoreTaskStatus2["Cancelled"] = "-";
  CoreTaskStatus2["nonTask"] = "~";
  return CoreTaskStatus2;
})(CoreTaskStatus || {});
var TaskPriorityIcon = /* @__PURE__ */ ((TaskPriorityIcon2) => {
  TaskPriorityIcon2["Lowest"] = "\u23EC";
  TaskPriorityIcon2["Low"] = "\u{1F53D}";
  TaskPriorityIcon2["Normal"] = "\u25B6\uFE0F";
  TaskPriorityIcon2["Medium"] = "\u{1F53C}";
  TaskPriorityIcon2["High"] = "\u23EB";
  TaskPriorityIcon2["Highest"] = "\u{1F53A}";
  return TaskPriorityIcon2;
})(TaskPriorityIcon || {});
var TaskDateType = /* @__PURE__ */ ((TaskDateType2) => {
  TaskDateType2["Created"] = "\u2795";
  TaskDateType2["Start"] = "\u{1F6EB}";
  TaskDateType2["Scheduled"] = "\u23F3";
  TaskDateType2["Due"] = "\u{1F4C5}";
  TaskDateType2["Done"] = "\u2705";
  TaskDateType2["Cancelled"] = "\u274C";
  return TaskDateType2;
})(TaskDateType || {});

// src/views/base-view.ts
var BaseView = class extends import_obsidian.ItemView {
  constructor() {
    super(...arguments);
    __publicField(this, "pathHbs", ".obsidian/plugins/obsidian-agenda/templates/");
    __publicField(this, "hbs", ".hbs");
    // Extensión de los archivos de plantilla
    // Añadir esta propiedad para el caché:
    __publicField(this, "templateCache", {});
    __publicField(this, "helpersRegistered", false);
  }
  // Flag para verificar si los helpers ya están registrados
  async getAllTasks(taskManager) {
    return await taskManager.getAllTasks();
  }
  async getTodayTasks(taskManager) {
    return await taskManager.getTodayTasks();
  }
  groupTasksByFolder(tasks) {
    const rootFolders = {};
    tasks.forEach((task) => {
      if (!task.filePath) return;
      const pathParts = task.filePath.split("/");
      if (pathParts.length === 1) {
        if (!rootFolders["Root"]) {
          rootFolders["Root"] = {
            name: "Root",
            fullPath: "Root",
            tasks: [],
            subfolders: {}
          };
        }
        rootFolders["Root"].tasks.push(task);
        return;
      }
      let currentLevel = rootFolders;
      let currentPath = "";
      for (let i = 0; i < pathParts.length - 1; i++) {
        const folderName = pathParts[i];
        currentPath = currentPath ? `${currentPath}/${folderName}` : folderName;
        if (i === 0) {
          if (!currentLevel[folderName]) {
            currentLevel[folderName] = {
              name: folderName,
              fullPath: folderName,
              tasks: [],
              subfolders: {}
            };
          }
          if (i === pathParts.length - 2) {
            currentLevel[folderName].tasks.push(task);
          }
          currentLevel = currentLevel[folderName].subfolders;
        } else {
          if (!currentLevel[folderName]) {
            currentLevel[folderName] = {
              name: folderName,
              fullPath: currentPath,
              tasks: [],
              subfolders: {}
            };
          }
          if (i === pathParts.length - 2) {
            currentLevel[folderName].tasks.push(task);
          }
          currentLevel = currentLevel[folderName].subfolders;
        }
      }
    });
    return rootFolders;
  }
  /**
   * Convierte una fecha a objeto Date de JavaScript manteniendo el día correcto en la zona horaria local
   */
  toLocalMidnight(dateInput) {
    if (!dateInput) return null;
    try {
      let date;
      if (typeof dateInput === "string") {
        return DateTime.fromISO(dateInput).startOf("day").toJSDate();
      }
      if (dateInput instanceof Date) {
        return DateTime.fromJSDate(dateInput).startOf("day").toJSDate();
      }
      if (dateInput && typeof dateInput.toJSDate === "function") {
        return DateTime.fromJSDate(dateInput.toJSDate()).startOf("day").toJSDate();
      }
      date = new Date(dateInput);
      return DateTime.fromJSDate(date).startOf("day").toJSDate();
    } catch (error) {
      console.error("Error al convertir fecha:", error, dateInput);
      return null;
    }
  }
  registerHandlebarsHelpers(i18n) {
    if (this.helpersRegistered) return;
    this.registerCommonHelpers(i18n);
    this.registerViewSpecificHelpers(i18n);
    this.helpersRegistered = true;
  }
  /**
   * Registra todos los helpers de Handlebars de una sola vez
   * @param i18n Servicio de internacionalización
   */
  registerCommonHelpers(i18n) {
    import_handlebars.default.registerHelper("t", (key) => i18n.t(key));
    import_handlebars.default.registerHelper("formatDate", function(date) {
      if (!date) return "";
      if (typeof date === "string") {
        return DateTime.fromISO(date).toFormat("dd MMM yyyy");
      }
      if (date.isLuxonDateTime) {
        return date.toFormat("dd MMM yyyy");
      }
      if (date instanceof Date) {
        return DateTime.fromJSDate(date).toFormat("dd MMM yyyy");
      }
      return DateTime.fromISO(date.toString()).toFormat("dd MMM yyyy");
    });
    import_handlebars.default.registerHelper("priorityIcon", function(priority) {
      if (!priority) return "";
      if (Object.values(TaskPriorityIcon).includes(priority)) {
        return priority;
      }
      const uppercasePriority = priority.toUpperCase?.() || priority;
      for (const key in TaskPriorityIcon) {
        if (key.toUpperCase() === uppercasePriority) {
          return TaskPriorityIcon[key];
        }
      }
      return " ";
    });
    import_handlebars.default.registerHelper("multiply", function(a, b) {
      return a * b;
    });
    import_handlebars.default.registerHelper("add", function(a, b) {
      return a + b;
    });
  }
  /**
  * Método para registrar helpers específicos para cada vista.
  * Las clases hijas pueden sobrescribir este método para registrar sus propios helpers.
  */
  registerViewSpecificHelpers(i18n) {
  }
  async renderHeader(container, i18n) {
    let headerTemplate = this.templateCache["header"];
    if (!headerTemplate) {
      const headerPath = this.app.vault.adapter.getResourcePath(this.pathHbs + "header.hbs");
      const headerResponse = await fetch(headerPath);
      if (!headerResponse.ok) {
        console.error("Error al cargar la plantilla del encabezado:", headerResponse.statusText);
        return;
      }
      const headerSource = await headerResponse.text();
      headerTemplate = import_handlebars.default.compile(headerSource);
      this.templateCache["header"] = headerTemplate;
    }
    const headerHtml = headerTemplate({});
    container.innerHTML = headerHtml;
    const activeViewType = this.getViewType();
    const tabs = container.querySelectorAll(".c-tab");
    tabs.forEach((tab) => {
      const tabId = tab.getAttribute("id");
      const isCalendarView = activeViewType.startsWith("calendar-") && tabId === "calendar-view-tab";
      const isExactMatch = tabId === `${activeViewType}-tab`;
      if (isExactMatch || isCalendarView) {
        tab.classList.add("active");
      } else {
        tab.classList.remove("active");
      }
    });
    const tabContainers = container.querySelectorAll(".c-tab-container");
    tabContainers.forEach((buttonContainer) => {
      const divId = buttonContainer.getAttribute("id");
      const isCalendarContainer = activeViewType.startsWith("calendar-") && divId === "calendar-view-container";
      const isExactMatch = divId === `${activeViewType}-container`;
      if (isExactMatch || isCalendarContainer) {
        buttonContainer.classList.add("active");
      } else {
        buttonContainer.classList.remove("active");
      }
    });
  }
  async renderTemplate(container, templatePath, data) {
    try {
      let template = this.templateCache[templatePath];
      if (!template) {
        const fullPath = this.app.vault.adapter.getResourcePath(this.pathHbs + templatePath + this.hbs);
        const response = await fetch(fullPath);
        if (!response.ok) {
          throw new Error(`Error al cargar la plantilla: ${response.statusText}`);
        }
        const templateSource = await response.text();
        template = import_handlebars.default.compile(templateSource);
        this.templateCache[templatePath] = template;
      }
      const html = template(data);
      container.innerHTML += html;
    } catch (error) {
      console.error(`Error renderizando template ${templatePath}:`, error);
      container.innerHTML += `<div class="error">Error al cargar la plantilla: ${error.message}</div>`;
    }
  }
  attachEventTabs(container, plugin, leaf) {
    const activeViewType = this.getViewType();
    const tabs = [
      { id: "overview-view-tab", view: "overview-view" },
      { id: "list-view-tab", view: "list-view" },
      { id: "table-view-tab", view: "table-view" },
      { id: "calendar-view-tab", view: "calendar-month-view" },
      { id: "timeline-view-tab", view: "timeline-view" },
      { id: "gantt-view-tab", view: "gantt-view" }
    ];
    tabs.forEach((tab) => {
      if (tab.view === activeViewType) {
        return;
      }
      const element = container.querySelector(`#${tab.id}`);
      element?.addEventListener("click", () => {
        plugin.viewManager.activateView(tab.view, leaf);
      });
    });
  }
  // Añadir método para manejar eventos de los grupos de carpetas
  addFolderToggleListeners(container) {
    const folderHeaders = container.querySelectorAll(".folder-name");
    folderHeaders.forEach((header) => {
      header.addEventListener("click", () => {
        const folderGroup = header.closest(".folder-group");
        folderGroup?.classList.toggle("collapsed");
        if (folderGroup) {
          const folderPath = folderGroup.getAttribute("data-folder-path");
          if (folderPath) {
            const isCollapsed = folderGroup.classList.contains("collapsed");
            localStorage.setItem(`folder_${folderPath}_collapsed`, isCollapsed.toString());
          }
        }
      });
    });
    const folderGroups = container.querySelectorAll(".folder-group");
    folderGroups.forEach((group) => {
      const folderPath = group.getAttribute("data-folder-path");
      if (folderPath) {
        const isCollapsed = localStorage.getItem(`folder_${folderPath}_collapsed`) === "true";
        if (isCollapsed) {
          group.classList.add("collapsed");
        }
      }
    });
  }
  // Añadir método para manejar eventos de doble clic en los elementos de tarea
  addTaskItemClickListeners(container) {
    const taskItems = container.querySelectorAll(".task-item");
    taskItems.forEach((item) => {
      item.addClass("clickable");
      item.addEventListener("dblclick", (event) => {
        const filePath = item.getAttribute("data-file-path");
        const lineNumber = item.getAttribute("data-line-number");
        if (filePath) {
          this.openTaskFile(filePath, lineNumber ? parseInt(lineNumber) : void 0);
        }
      });
    });
  }
  async openTaskFile(filePath, lineNumber) {
    try {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file || file instanceof import_obsidian.TFolder) {
        console.error(`No se pudo encontrar el archivo: ${filePath}`);
        return;
      }
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
      if (lineNumber !== void 0) {
        const editor = this.app.workspace.activeEditor?.editor;
        if (editor) {
          const position = { line: lineNumber, ch: 0 };
          editor.setCursor(position);
          editor.scrollIntoView({ from: position, to: position }, true);
        }
      }
    } catch (error) {
      console.error(`Error al abrir el archivo: ${error}`);
    }
  }
  async render(viewType, data, i18n, plugin, leaf) {
    console.log(`Dibuja vista: ${viewType}`);
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("agenda-container");
    const headerContainer = container.createDiv({ cls: "agenda-header-container" });
    const contentContainer = container.createDiv({ cls: "agenda-content-container" });
    this.registerHandlebarsHelpers(i18n || null);
    try {
      await Promise.all([
        this.renderHeader(headerContainer, i18n),
        this.renderTemplate(contentContainer, viewType, data)
      ]);
      this.attachEventTabs(headerContainer, plugin, leaf);
      this.setupViewSpecificEventListeners(contentContainer, data);
    } catch (error) {
      console.error(`Error renderizando vista ${viewType}:`, error);
      contentContainer.innerHTML = `<div class="error-message">Error al cargar: ${error.message}</div>`;
    }
  }
  /**
   * Método para configurar eventos específicos de la vista
   * Las clases hijas pueden sobrescribir este método para implementar sus propios listeners
   * @param container El contenedor donde se aplican los listeners
   * @param data Los datos utilizados para el renderizado
   */
  setupViewSpecificEventListeners(container, data) {
  }
};

// src/views/overview-view.ts
var OVERVIEW_VIEW_TYPE = "overview-view";
var OverviewView = class extends BaseView {
  // Tareas de la semana pasada (para comparaciones)
  constructor(leaf, plugin, i18n, taskManager) {
    super(leaf);
    this.plugin = plugin;
    this.i18n = i18n;
    this.taskManager = taskManager;
    __publicField(this, "tasks", []);
    // Lista de tareas
    __publicField(this, "tasksLastWeek", []);
    this.i18n = i18n;
  }
  getViewType() {
    return OVERVIEW_VIEW_TYPE;
  }
  getDisplayText() {
    return this.i18n.t("overview_view_title");
  }
  getIcon() {
    return "calendar-check";
  }
  async onOpen() {
    this.tasks = await this.getAllTasks(this.taskManager);
    console.log("Tareas obtenidas overview:", this.tasks);
    const templateData = {
      tasks: this.tasks,
      totalTasks: this.tasks.length,
      completedTasks: this.getCompletedTasksCount(),
      pendingTasks: this.getPendingTasksCount(),
      inProgressTasks: this.getInProgressTasksCount(),
      productivity: this.calculateProductivity(),
      highPriorityTasks: this.getHighPriorityTasksCount(),
      totalEstimatedTime: this.calculateTotalEstimatedTime(),
      // Nuevos widgets
      noDateTasks: this.getNoDateTasksCount(),
      completedThisWeek: this.getCompletedThisWeekCount(),
      completionTrend: this.calculateCompletionTrend(),
      completionRatio: this.calculateCompletionRatio(),
      consistency: this.calculateConsistency(),
      systemHealth: this.calculateSystemHealth(),
      // Listas de tareas
      todayTasks: this.getTodayTasksList(),
      overdueTasks: this.getOverdueTasksList(),
      upcomingTasks: this.getUpcomingTasksList(),
      // Nuevas listas de tareas
      invalidTasks: this.getInvalidTasksList(),
      oldestTasks: this.getOldestTasksList(),
      projectTasks: this.getTasksByProjectList()
    };
    await this.render(OVERVIEW_VIEW_TYPE, templateData, this.i18n, this.plugin, this.leaf);
  }
  /**
   * Carga datos históricos para cálculos comparativos
   * En una implementación real, esto cargaría desde un almacén persistente
   */
  async loadHistoricalData() {
    this.tasksLastWeek = [...this.tasks];
    this.tasksLastWeek = this.tasksLastWeek.slice(0, Math.floor(this.tasksLastWeek.length * 0.8));
  }
  /**
   * Calcula el número de tareas completadas
   */
  getCompletedTasksCount() {
    return this.tasks.filter((task) => task.statusText === "Done").length;
  }
  /**
   * Calcula el número de tareas pendientes
   */
  getPendingTasksCount() {
    return this.tasks.filter((task) => task.statusText === "Todo").length;
  }
  /**
   * Calcula el número de tareas en progreso
   */
  getInProgressTasksCount() {
    return this.tasks.filter((task) => task.statusText === "InProgress").length;
  }
  /**
   * Calcula el porcentaje de productividad
   */
  calculateProductivity() {
    const completedCount = this.getCompletedTasksCount();
    return this.tasks.length > 0 ? Math.round(completedCount / this.tasks.length * 100) : 0;
  }
  /**
   * Calcula el número de tareas de alta prioridad
   */
  getHighPriorityTasksCount() {
    return this.tasks.filter(
      (task) => task.priority === "highest" /* Highest */ || task.priority === "high" /* High */
    ).length;
  }
  /**
   * Calcula el tiempo estimado total y lo formatea
   */
  calculateTotalEstimatedTime() {
    const totalEstimatedMinutes = this.tasks.filter((task) => task.statusText !== "Done" && task.dueDate - task.startDate > 0).reduce((total, task) => total + (task.dueDate - task.startDate || 0), 0);
    const hours = Math.floor(totalEstimatedMinutes / 60);
    const minutes = totalEstimatedMinutes % 60;
    if (hours > 0) {
      return `${hours}h ${minutes > 0 ? minutes + "m" : ""}`;
    } else {
      return minutes > 0 ? `${minutes}m` : "0m";
    }
  }
  /**
   * Calcula el número de tareas sin fecha asignada
   */
  getNoDateTasksCount() {
    return this.tasks.filter((task) => !task.dueDate && !task.startDate && !task.doneDate && !task.scheduledDate && !task.cancelledDate).length;
  }
  /**
   * Calcula el número de tareas completadas en la última semana
   */
  getCompletedThisWeekCount() {
    const oneWeekAgo = DateTime.now().minus({ days: 7 }).toJSDate();
    return this.tasks.filter((task) => {
      if (task.statusText !== "Done") return false;
      if (!task.doneDate) return false;
      try {
        const taskDoneDate = this.toLocalMidnight(task.doneDate);
        if (!taskDoneDate) return false;
        return taskDoneDate >= oneWeekAgo;
      } catch (error) {
        console.error("Error al comparar fechas:", error, task);
        return false;
      }
    }).length;
  }
  getCompletedLastWeekCount() {
    const oneWeekAgo = DateTime.now().minus({ weeks: 1 }).toJSDate();
    const oneWeekBefore = DateTime.now().minus({ weeks: 2 }).toJSDate();
    return this.tasks.filter((task) => {
      if (task.statusText !== "Done") return false;
      if (!task.doneDate) return false;
      try {
        const taskDoneDate = this.toLocalMidnight(task.doneDate);
        if (!taskDoneDate) return false;
        return taskDoneDate < oneWeekAgo && taskDoneDate >= oneWeekBefore;
      } catch (error) {
        console.error("Error al comparar fechas:", error, task);
        return false;
      }
    }).length;
  }
  /**
   * Calcula la tendencia de completado (% de cambio respecto a semana anterior)
   */
  calculateCompletionTrend() {
    const completedThisWeek = this.getCompletedThisWeekCount();
    const completedLastWeek = this.getCompletedLastWeekCount();
    if (completedLastWeek === 0) return "+0%";
    const trend = (completedThisWeek - completedLastWeek) / completedLastWeek * 100;
    const trendRounded = Math.round(trend);
    return (trend >= 0 ? "+" : "") + trendRounded + "%" + (trendRounded > 0 ? "\u2191" : trendRounded < 0 ? "\u2193" : "");
  }
  /**
   * Calcula el promedio de tareas completadas por día en la última semana
   */
  calculateCompletionRatio() {
    const completedThisWeek = this.getCompletedThisWeekCount();
    const ratio = completedThisWeek / 7;
    return ratio.toFixed(1) + "/d\xEDa";
  }
  /**
   * Calcula el porcentaje de días activos en la última semana
   */
  calculateConsistency() {
    const activeDays = /* @__PURE__ */ new Map();
    const now2 = DateTime.now();
    this.tasks.forEach((task) => {
      if (task.statusText === "Done" && task.doneDate) {
        const doneDate = this.toLocalMidnight(task.doneDate);
        if (!doneDate) return false;
        const doneDateLuxon = DateTime.fromJSDate(doneDate);
        const daysAgo = now2.diff(doneDateLuxon, "days").days;
        if (daysAgo <= 7) {
          const dateKey = doneDateLuxon.toFormat("yyyy-MM-dd");
          activeDays.set(dateKey, true);
        }
      }
    });
    const daysActiveCount = activeDays.size;
    return Math.round(daysActiveCount / 7 * 100);
  }
  /**
   * Calcula el porcentaje de tareas correctamente configuradas
   */
  calculateSystemHealth() {
    const healthyTasks = this.tasks.filter((task) => {
      return task.isValid;
    }).length;
    return this.tasks.length > 0 ? Math.round(healthyTasks / this.tasks.length * 100) : 100;
  }
  registerViewSpecificHelpers(i18n) {
  }
  setupViewSpecificEventListeners(container, data) {
    this.addTaskItemClickListeners(container);
    this.setupWidgetFilterListeners(container);
  }
  /**
  * Configura los listeners para el filtrado de widgets
  */
  setupWidgetFilterListeners(container) {
    const filterButton = container.querySelector("#widgets-filter-button");
    const filterPanel = container.querySelector("#widgets-filter-panel");
    const closeFilterButton = container.querySelector("#close-filter-panel");
    const applyButton = container.querySelector("#apply-widget-filters");
    const resetButton = container.querySelector("#reset-widget-filters");
    const checkboxes = container.querySelectorAll('.widget-checkboxes input[type="checkbox"]');
    if (!filterButton || !filterPanel || !closeFilterButton || !applyButton || !resetButton) return;
    this.loadWidgetFiltersState(checkboxes);
    this.applyWidgetFilters(container, checkboxes);
    filterButton.addEventListener("click", () => {
      filterPanel.classList.toggle("hidden");
    });
    closeFilterButton.addEventListener("click", () => {
      filterPanel.classList.add("hidden");
    });
    applyButton.addEventListener("click", () => {
      this.applyWidgetFilters(container, checkboxes);
      this.saveWidgetFiltersState(checkboxes);
      filterPanel.classList.add("hidden");
    });
    resetButton.addEventListener("click", () => {
      checkboxes.forEach((checkbox) => {
        checkbox.checked = true;
      });
      this.applyWidgetFilters(container, checkboxes);
      this.saveWidgetFiltersState(checkboxes);
    });
  }
  /**
   * Aplica los filtros de widgets según las casillas seleccionadas
   */
  applyWidgetFilters(container, checkboxes) {
    checkboxes.forEach((checkbox) => {
      const cb = checkbox;
      const widgetType = cb.dataset.widget;
      if (widgetType) {
        const widgets = container.querySelectorAll(`[data-widget-type="${widgetType}"]`);
        if (widgets.length === 0) {
          console.warn(`No se encontraron widgets para: ${widgetType}`);
        }
        widgets.forEach((widget) => {
          console.log(`Aplicando ${cb.checked ? "mostrar" : "ocultar"} a widget: ${widgetType}`);
          if (cb.checked) {
            widget.classList.remove("hidden");
          } else {
            widget.classList.add("hidden");
          }
        });
      }
    });
  }
  /**
   * Guarda el estado de los filtros
   */
  saveWidgetFiltersState(checkboxes) {
    const state = {};
    checkboxes.forEach((checkbox) => {
      const cb = checkbox;
      const widgetClass = cb.dataset.widget;
      if (widgetClass) {
        state[widgetClass] = cb.checked;
      }
    });
    localStorage.setItem("obsidian-agenda-widget-filters", JSON.stringify(state));
  }
  /**
   * Carga el estado guardado de los filtros
   */
  loadWidgetFiltersState(checkboxes) {
    const savedState = localStorage.getItem("obsidian-agenda-widget-filters");
    if (!savedState) return;
    try {
      const state = JSON.parse(savedState);
      checkboxes.forEach((checkbox) => {
        const cb = checkbox;
        const widgetClass = cb.dataset.widget;
        if (widgetClass && state[widgetClass] !== void 0) {
          cb.checked = state[widgetClass];
        }
      });
    } catch (error) {
      console.error("Error al cargar la configuraci\xF3n de widgets:", error);
    }
  }
  /**
   * Obtiene la lista de tareas programadas para hoy
   */
  getTodayTasksList() {
    const today = DateTime.now().startOf("day");
    const tomorrow = today.plus({ days: 1 });
    return this.tasks.filter((task) => {
      if (task.statusText === "Done" || task.statusText === "Cancelled") return false;
      if (task.scheduledDate) {
        const scheduledDate = this.toLocalMidnight(task.scheduledDate);
        if (!scheduledDate) return false;
        const scheduledDateTime = DateTime.fromJSDate(scheduledDate);
        return scheduledDateTime >= today && scheduledDateTime < tomorrow;
      }
      if (task.dueDate) {
        const dueDate = this.toLocalMidnight(task.dueDate);
        if (!dueDate) return false;
        const dueDateTime = DateTime.fromJSDate(dueDate).startOf("day");
        return dueDateTime.equals(today);
      }
      return false;
    }).sort((a, b) => {
      if (a.priority !== b.priority) {
        return Number(b.priority || 0) - Number(a.priority || 0);
      }
      const aDate = a.dueDate ? new Date(a.dueDate) : null;
      const bDate = b.dueDate ? new Date(b.dueDate) : null;
      if (aDate && bDate) return aDate.getTime() - bDate.getTime();
      if (aDate) return -1;
      if (bDate) return 1;
      return 0;
    }).slice(0, 5);
  }
  /**
   * Obtiene la lista de tareas vencidas
   */
  getOverdueTasksList() {
    const today = DateTime.now().startOf("day");
    return this.tasks.filter((task) => {
      if (task.statusText === "Done" || task.statusText === "Cancelled") return false;
      if (task.dueDate) {
        const dueDate = this.toLocalMidnight(task.dueDate);
        if (!dueDate) return false;
        const dueDateTime = DateTime.fromJSDate(dueDate).startOf("day");
        return dueDateTime < today;
      }
      return false;
    }).sort((a, b) => {
      const aDate = a.dueDate ? new Date(a.dueDate) : null;
      const bDate = b.dueDate ? new Date(b.dueDate) : null;
      if (aDate && bDate) return aDate.getTime() - bDate.getTime();
      if (aDate) return -1;
      if (bDate) return 1;
      return 0;
    }).slice(0, 5);
  }
  /**
   * Obtiene la lista de tareas próximas a vencer
   */
  getUpcomingTasksList() {
    const today = DateTime.now().startOf("day");
    const nextWeek = today.plus({ days: 7 });
    return this.tasks.filter((task) => {
      if (task.statusText === "Done" || task.statusText === "Cancelled") return false;
      if (task.dueDate) {
        const dueDate = this.toLocalMidnight(task.dueDate);
        if (!dueDate) return false;
        const dueDateTime = DateTime.fromJSDate(dueDate).startOf("day");
        return dueDateTime >= today && dueDateTime <= nextWeek;
      }
      return false;
    }).sort((a, b) => {
      const aDate = a.dueDate ? new Date(a.dueDate) : null;
      const bDate = b.dueDate ? new Date(b.dueDate) : null;
      if (aDate && bDate) return aDate.getTime() - bDate.getTime();
      if (aDate) return -1;
      if (bDate) return 1;
      return 0;
    }).slice(0, 5);
  }
  /**
  * Obtiene la lista de tareas no válidas (isValid = false)
  */
  getInvalidTasksList() {
    return this.tasks.filter((task) => {
      return !task.isValid && task.statusText !== "Done" && task.statusText !== "Cancelled";
    }).map((task) => {
      if (task.tasksFields) {
        const errorMessages = [];
        for (const index in task.tasksFields) {
          const field = task.tasksFields[index];
          if (field) {
            errorMessages.push(`${field}`);
          }
        }
        task["errorMessages"] = errorMessages.length > 0 ? errorMessages : ["Error desconocido"];
      } else {
        task["errorMessages"] = ["Campo inv\xE1lido"];
      }
      return task;
    }).sort((a, b) => {
      const aDate = a.createdDate ? new Date(a.createdDate) : null;
      const bDate = b.createdDate ? new Date(b.createdDate) : null;
      if (aDate && bDate) return bDate.getTime() - aDate.getTime();
      if (aDate) return 1;
      if (bDate) return -1;
      return 0;
    }).slice(0, 5);
  }
  /**
   * Obtiene la lista de tareas más antiguas (tiempo sin completar)
   */
  getOldestTasksList() {
    const now2 = DateTime.now();
    return this.tasks.filter((task) => {
      return task.statusText !== "Done" && task.statusText !== "Cancelled" && task.createdDate;
    }).sort((a, b) => {
      const aDate = a.createdDate ? new Date(a.createdDate) : null;
      const bDate = b.createdDate ? new Date(b.createdDate) : null;
      if (aDate && bDate) return aDate.getTime() - bDate.getTime();
      if (aDate) return -1;
      if (bDate) return 1;
      return 0;
    }).slice(0, 5).map((task) => {
      if (task.createdDate) {
        const createdDate = this.toLocalMidnight(task.createdDate);
        if (createdDate) {
          const createdLuxon = DateTime.fromJSDate(createdDate);
          const daysOld = Math.floor(now2.diff(createdLuxon, "days").days);
          task["daysOld"] = daysOld;
        }
      }
      return task;
    });
  }
  /**
   * Obtiene tareas agrupadas por proyecto/carpeta
   */
  getTasksByProjectList() {
    const projectMap = /* @__PURE__ */ new Map();
    this.tasks.filter((task) => task.statusText !== "Done" && task.statusText !== "Cancelled").forEach((task) => {
      const projectName = task.rootFolder || "Sin proyecto";
      if (!projectMap.has(projectName)) {
        projectMap.set(projectName, []);
      }
      projectMap.get(projectName).push(task);
    });
    const result = Array.from(projectMap.entries()).map(([project, tasks]) => ({
      project,
      tasks: tasks.slice(0, 3)
      // Limitar a 3 tareas por proyecto para el widget
    })).sort((a, b) => b.tasks.length - a.tasks.length).slice(0, 5);
    return result;
  }
  async onClose() {
  }
};

// src/views/calendar-view.ts
var import_handlebars2 = __toESM(require_handlebars());
var CalendarView = class extends BaseView {
  constructor(leaf, plugin, i18n, taskManager) {
    super(leaf);
    this.plugin = plugin;
    this.i18n = i18n;
    this.taskManager = taskManager;
    __publicField(this, "tasks", []);
    __publicField(this, "currentDate", DateTime.now());
  }
  getDisplayText() {
    return this.i18n.t("calendar_view_title");
  }
  getIcon() {
    return "calendar-check";
  }
  async onOpen() {
    this.tasks = await this.getAllTasks(this.taskManager);
    await this.refreshView();
  }
  async refreshView() {
    const viewData = {
      tasks: this.tasks,
      currentDate: this.currentDate,
      calendar: this.generateViewData()
    };
    await this.render(this.getViewType(), viewData, this.i18n, this.plugin, this.leaf);
  }
  /**
   * Formatea una hora en formato 12 horas con AM/PM
   */
  formatHour(hour) {
    return DateTime.fromObject({ hour }).toFormat("h a");
  }
  /**
   * Obtiene los nombres localizados de los días de la semana
   */
  getLocalizedDayNames() {
    return [
      this.i18n.t("day_sun"),
      this.i18n.t("day_mon"),
      this.i18n.t("day_tue"),
      this.i18n.t("day_wed"),
      this.i18n.t("day_thu"),
      this.i18n.t("day_fri"),
      this.i18n.t("day_sat")
    ];
  }
  /**
   * Gets tasks for a specific date
   */
  getTasksForDate(date) {
    const dayUnit = "day";
    return this.tasks.filter((task) => {
      if (!task.dueDate) return false;
      const taskDate = typeof task.dueDate === "string" ? DateTime.fromISO(task.dueDate) : task.dueDate;
      return taskDate.hasSame(date, dayUnit);
    });
  }
  // Método que todas las vistas utilizarán para ir a la fecha actual
  navigateToToday() {
    this.currentDate = DateTime.now();
    this.refreshView();
  }
  /**
   * Sobrescribe el método de BaseView para registrar helpers específicos de CalendarView
   * @param i18n Instancia de I18n para la internacionalización
   */
  registerViewSpecificHelpers(i18n) {
    import_handlebars2.default.registerHelper("formatDateHeader", (date) => {
      if (!date) return "";
      if (typeof date === "string") {
        return DateTime.fromISO(date).toFormat("ccc d");
      }
      return date.toFormat("ccc d");
    });
    import_handlebars2.default.registerHelper("formatMonth", (date) => {
      if (!date) return "";
      if (typeof date === "string") {
        return DateTime.fromISO(date).toFormat("MMMM yyyy");
      }
      return date.toFormat("MMMM yyyy");
    });
    import_handlebars2.default.registerHelper("formatHour", (hour) => {
      return DateTime.fromObject({ hour }).toFormat("h a");
    });
    import_handlebars2.default.registerHelper("formatFullDate", (date) => {
      if (!date) return "";
      if (typeof date === "string") {
        return DateTime.fromISO(date).toFormat("EEEE, MMMM d, yyyy");
      }
      return date.toFormat("EEEE, MMMM d, yyyy");
    });
    import_handlebars2.default.registerHelper("equals", function(arg1, arg2, options) {
      return arg1 === arg2 ? options.fn(this) : options.inverse(this);
    });
    import_handlebars2.default.registerHelper("toISODate", (date) => {
      if (!date) return "";
      if (typeof date === "string") {
        return DateTime.fromISO(date).toISODate();
      }
      try {
        return typeof date.toISODate === "function" ? date.toISODate() : "";
      } catch (e) {
        return "";
      }
    });
    import_handlebars2.default.registerHelper("getDayOfMonth", (date) => {
      if (!date) return "";
      return date.day;
    });
  }
  /**
   * Sobrescribe el método de BaseView para implementar event listeners específicos de CalendarView
   * @param container Contenedor donde se aplican los listeners
   * @param data Datos utilizados para renderizar la vista
   */
  setupViewSpecificEventListeners(container, data) {
    const prevButton = container.querySelector(".calendar-prev");
    const nextButton = container.querySelector(".calendar-next");
    const todayButton = container.querySelector(".calendar-today");
    if (prevButton) {
      prevButton.addEventListener("click", () => {
        this.navigateToPrevious();
      });
    }
    if (nextButton) {
      nextButton.addEventListener("click", () => {
        this.navigateToNext();
      });
    }
    if (todayButton) {
      todayButton.addEventListener("click", () => this.navigateToToday());
    }
    const viewDropdown = container.querySelector("#calendar-view-dropdown");
    if (viewDropdown) {
      viewDropdown.addEventListener("change", () => {
        const selectedViewType = this.getCalendarViewTypeFromString(viewDropdown.value);
        this.switchToViewType(selectedViewType);
      });
    }
    const taskItems = container.querySelectorAll(".calendar-task");
    taskItems.forEach((item) => {
      item.addEventListener("click", (e) => {
        const target = e.currentTarget;
        const filePath = target.getAttribute("data-file-path");
        const lineNumber = target.getAttribute("data-line-number");
        if (filePath) {
          this.openTaskFile(filePath, lineNumber ? parseInt(lineNumber) : void 0);
        }
      });
    });
  }
  getCalendarViewTypeFromString(viewTypeString) {
    console.log(`Convirtiendo ${viewTypeString} a CalendarViewType`);
    switch (viewTypeString) {
      case "month":
        return "month" /* Month */;
      case "week":
        return "week" /* Week */;
      case "workweek":
        return "workweek" /* WorkWeek */;
      case "day":
        return "day" /* Day */;
      default:
        return "month" /* Month */;
    }
  }
  /**
   * Cambia el tipo de vista actual
   * @param viewType El tipo de vista al que cambiar
   */
  switchToViewType(viewType) {
    localStorage.setItem("calendar_view_type", viewType);
    let viewId;
    switch (viewType) {
      case "month" /* Month */:
        viewId = "calendar-month-view";
        break;
      case "week" /* Week */:
        viewId = "calendar-week-view";
        break;
      case "workweek" /* WorkWeek */:
        viewId = "calendar-workweek-view";
        break;
      case "day" /* Day */:
        viewId = "calendar-day-view";
        break;
      default:
        viewId = "calendar-month-view";
    }
    if (this.plugin && this.plugin.app) {
      const leaf = this.plugin.app.workspace.activeLeaf;
      if (leaf) {
        leaf.setViewState({ type: viewId });
      }
    }
  }
  async onClose() {
  }
};

// src/views/calendar-month-view.ts
var CALENDAR_MONTH_VIEW_TYPE = "calendar-month-view";
var CalendarMonthView = class extends CalendarView {
  constructor(leaf, plugin, i18n, taskManager) {
    super(leaf, plugin, i18n, taskManager);
  }
  getViewType() {
    return CALENDAR_MONTH_VIEW_TYPE;
  }
  getDisplayText() {
    return this.i18n.t("month_view_title");
  }
  getIcon() {
    return "calendar-check";
  }
  /**
    * Genera datos para la vista mensual del calendario
    */
  generateViewData() {
    const startOfMonth = this.currentDate.startOf("month");
    const endOfMonth = this.currentDate.endOf("month");
    let startDate = startOfMonth.startOf("week");
    let endDate = endOfMonth.endOf("week");
    const weeks = [];
    let currentWeekDays = [];
    let currentDay = startDate;
    while (currentDay <= endDate) {
      const dayData = {
        date: currentDay,
        isCurrentMonth: currentDay.month === startOfMonth.month,
        isToday: currentDay.hasSame(DateTime.now(), "day"),
        dayOfMonth: currentDay.day,
        tasksForDay: this.getTasksForDate(currentDay)
      };
      currentWeekDays.push(dayData);
      if (currentWeekDays.length === 7) {
        const weekNumber = currentWeekDays[0].date.weekNumber;
        weeks.push({
          days: [...currentWeekDays],
          weekNumber
        });
        currentWeekDays = [];
      }
      currentDay = currentDay.plus({ days: 1 });
    }
    return {
      viewType: "month" /* Month */,
      weeks,
      monthName: startOfMonth.toFormat("MMMM yyyy"),
      dayNames: this.getLocalizedDayNames(),
      periodName: startOfMonth.toFormat("MMMM yyyy")
    };
  }
  navigateToPrevious() {
    this.currentDate = this.currentDate.minus({ months: 1 });
    this.refreshView();
  }
  navigateToNext() {
    this.currentDate = this.currentDate.plus({ months: 1 });
    this.refreshView();
  }
  async onClose() {
  }
};

// src/views/calendar-week-view.ts
var CALENDAR_WEEK_VIEW_TYPE = "calendar-week-view";
var CalendarWeekView = class extends CalendarView {
  constructor(leaf, plugin, i18n, taskManager) {
    super(leaf, plugin, i18n, taskManager);
  }
  getViewType() {
    return CALENDAR_WEEK_VIEW_TYPE;
  }
  getDisplayText() {
    return this.i18n.t("week_view_title");
  }
  getIcon() {
    return "calendar-check";
  }
  /**
   * Genera datos para la vista semanal del calendario
   */
  generateViewData() {
    const startOfWeek = this.currentDate.startOf("week");
    const daysToGenerate = 7;
    const localizedDayNames = this.getLocalizedDayNames();
    const days = [];
    let currentDay = startOfWeek;
    for (let i = 0; i < daysToGenerate; i++) {
      const dayTasks = this.getTasksForDate(currentDay);
      const dayIndex = currentDay.weekday % 7;
      days.push({
        date: currentDay,
        isToday: currentDay.hasSame(DateTime.now(), "day"),
        dayOfMonth: currentDay.day,
        dayOfWeek: currentDay.weekday,
        // Usar el nombre localizado del día en lugar de toFormat()
        dayName: localizedDayNames[dayIndex],
        formattedDate: `${localizedDayNames[dayIndex]} ${currentDay.day}`,
        tasksForDay: dayTasks
      });
      currentDay = currentDay.plus({ days: 1 });
    }
    const weekEnd = startOfWeek.plus({ days: daysToGenerate - 1 });
    const periodName = `${startOfWeek.toFormat("MMM d")} - ${weekEnd.toFormat("MMM d, yyyy")}`;
    return {
      viewType: "week" /* Week */,
      weekNumber: startOfWeek.weekNumber,
      days,
      dayNames: localizedDayNames,
      periodName
    };
  }
  navigateToPrevious() {
    this.currentDate = this.currentDate.minus({ weeks: 1 });
    this.refreshView();
  }
  navigateToNext() {
    this.currentDate = this.currentDate.plus({ weeks: 1 });
    this.refreshView();
  }
  /**
   * Sobrescribe el método de CalendarView para implementar event listeners específicos
   * @param container Contenedor donde se aplican los listeners
   * @param data Datos utilizados para renderizar la vista
   */
  setupViewSpecificEventListeners(container, data) {
    super.setupViewSpecificEventListeners(container, data);
    const gridStyleSelector = container.querySelector("#calendar-grid-style");
    if (gridStyleSelector) {
      gridStyleSelector.addEventListener("change", () => {
        const selectedStyle = gridStyleSelector.value;
        const weekDaysRow = container.querySelector(".calendar-week-days-row");
        if (weekDaysRow) {
          for (let i = 1; i <= 11; i++) {
            weekDaysRow.classList.remove(`style${i}`);
          }
          if (selectedStyle !== "default") {
            weekDaysRow.classList.add(selectedStyle);
          }
          localStorage.setItem("calendar-grid-style", selectedStyle);
        }
      });
      const savedStyle = localStorage.getItem("calendar-grid-style");
      if (savedStyle) {
        gridStyleSelector.value = savedStyle;
        const event = new Event("change");
        gridStyleSelector.dispatchEvent(event);
      }
    }
  }
  async onClose() {
  }
};

// src/views/calendar-day-view.ts
var CALENDAR_DAY_VIEW_TYPE = "calendar-day-view";
var CalendarDayView = class extends CalendarView {
  constructor(leaf, plugin, i18n, taskManager) {
    super(leaf, plugin, i18n, taskManager);
    // Añadir una propiedad para rastrear el mes mostrado en el mini calendario
    __publicField(this, "miniCalendarMonth");
    this.miniCalendarMonth = this.currentDate;
  }
  getViewType() {
    return CALENDAR_DAY_VIEW_TYPE;
  }
  getDisplayText() {
    return this.i18n.t("day_view_title");
  }
  getIcon() {
    return "calendar-check";
  }
  /**
   * Genera datos para la vista diaria del calendario
   */
  generateViewData() {
    const dayTasks = this.getTasksForDate(this.currentDate);
    const hourSlots = [];
    for (let hour = 0; hour < 24; hour++) {
      const hourTasks = dayTasks.filter((task) => {
        if (!task.dueDate) return false;
        const taskDate = typeof task.dueDate === "string" ? DateTime.fromISO(task.dueDate) : task.dueDate;
        return taskDate.hour === hour;
      });
      hourSlots.push({
        hour,
        formattedHour: this.formatHour(hour),
        tasks: hourTasks
      });
    }
    const miniCalendar = this.generateMiniCalendarData(this.miniCalendarMonth);
    return {
      viewType: "day" /* Day */,
      date: this.currentDate,
      weekday: this.currentDate.weekday,
      dayName: this.currentDate.toFormat("cccc"),
      // Nombre completo del día
      isToday: this.currentDate.hasSame(DateTime.now(), "day"),
      tasksForDay: dayTasks,
      hourSlots,
      periodName: this.currentDate.toFormat("EEEE, MMMM d, yyyy"),
      miniCalendar
    };
  }
  /**
   * Genera datos para el mini calendario
   * Optimizado para rendimiento
   */
  generateMiniCalendarData(currentDate) {
    const today = DateTime.now().startOf("day");
    const firstOfMonth = currentDate.startOf("month");
    const lastOfMonth = currentDate.endOf("month");
    let firstDayOfWeek = firstOfMonth.weekday % 7;
    if (firstDayOfWeek === 0) firstDayOfWeek = 7;
    const weekdays2 = ["L", "M", "X", "J", "V", "S", "D"];
    const datesWithTasks = /* @__PURE__ */ new Set();
    this.tasks.forEach((task) => {
      if (task.dueDate) {
        const dateString = typeof task.dueDate === "string" ? task.dueDate.split("T")[0] : DateTime.fromJSDate(task.dueDate).toISODate();
        if (dateString) datesWithTasks.add(dateString);
      }
      if (task.scheduledDate) {
        const dateString = typeof task.scheduledDate === "string" ? task.scheduledDate.split("T")[0] : DateTime.fromJSDate(task.scheduledDate).toISODate();
        if (dateString) datesWithTasks.add(dateString);
      }
    });
    const currentMonthStr = currentDate.toFormat("yyyy-MM");
    const prevMonthStr = firstOfMonth.minus({ months: 1 }).toFormat("yyyy-MM");
    const nextMonthStr = firstOfMonth.plus({ months: 1 }).toFormat("yyyy-MM");
    const weeks = [];
    let currentWeek = [];
    const daysInPrevMonth = firstOfMonth.minus({ months: 1 }).daysInMonth || 30;
    for (let i = 1; i < firstDayOfWeek; i++) {
      const day = daysInPrevMonth - firstDayOfWeek + i + 1;
      const paddedDay = day.toString().padStart(2, "0");
      const dateStr = `${prevMonthStr}-${paddedDay}`;
      currentWeek.push({
        day,
        date: dateStr,
        isCurrentMonth: false,
        isToday: false,
        isSelected: false,
        hasTasks: datesWithTasks.has(dateStr)
      });
    }
    const daysInMonth2 = lastOfMonth.day;
    for (let day = 1; day <= daysInMonth2; day++) {
      const paddedDay = day.toString().padStart(2, "0");
      const dateStr = `${currentMonthStr}-${paddedDay}`;
      const isToday = today.toISODate() === dateStr;
      const isSelected = currentDate.day === day && currentDate.month === firstOfMonth.month;
      currentWeek.push({
        day,
        date: dateStr,
        isCurrentMonth: true,
        isToday,
        isSelected,
        hasTasks: datesWithTasks.has(dateStr)
      });
      if (currentWeek.length === 7) {
        weeks.push(currentWeek);
        currentWeek = [];
      }
    }
    if (currentWeek.length > 0) {
      let day = 1;
      while (currentWeek.length < 7) {
        const paddedDay = day.toString().padStart(2, "0");
        const dateStr = `${nextMonthStr}-${paddedDay}`;
        currentWeek.push({
          day,
          date: dateStr,
          isCurrentMonth: false,
          isToday: false,
          isSelected: false,
          hasTasks: datesWithTasks.has(dateStr)
        });
        day++;
      }
      weeks.push(currentWeek);
    }
    return {
      monthName: currentDate.toFormat("MMMM yyyy"),
      weekdays: weekdays2,
      weeks
    };
  }
  /**
   * Navega al mes anterior en el mini calendario
   */
  navigateToPreviousMonth() {
    this.miniCalendarMonth = this.miniCalendarMonth.minus({ months: 1 });
    this.refreshView();
  }
  /**
   * Navega al mes siguiente en el mini calendario
   */
  navigateToNextMonth() {
    this.miniCalendarMonth = this.miniCalendarMonth.plus({ months: 1 });
    this.refreshView();
  }
  navigateToPrevious() {
    this.currentDate = this.currentDate.minus({ days: 1 });
    this.miniCalendarMonth = this.currentDate;
    this.refreshView();
  }
  navigateToNext() {
    this.currentDate = this.currentDate.plus({ days: 1 });
    this.miniCalendarMonth = this.currentDate;
    this.refreshView();
  }
  navigateToToday() {
    this.currentDate = DateTime.now();
    this.miniCalendarMonth = this.currentDate;
    this.refreshView();
  }
  /**
   * Configura event listeners específicos para esta vista
   */
  setupViewSpecificEventListeners(container, data) {
    super.setupViewSpecificEventListeners(container, data);
    const miniDays = container.querySelectorAll(".calendar-mini-day");
    miniDays.forEach((day) => {
      day.addEventListener("click", (e) => {
        const dateStr = day.getAttribute("data-date");
        if (dateStr) {
          this.currentDate = DateTime.fromISO(dateStr);
          this.miniCalendarMonth = this.currentDate;
          this.refreshView();
        }
      });
    });
    const miniPrevButton = container.querySelector(".mini-calendar-prev");
    const miniNextButton = container.querySelector(".mini-calendar-next");
    if (miniPrevButton) {
      miniPrevButton.addEventListener("click", () => {
        this.navigateToPreviousMonth();
      });
    }
    if (miniNextButton) {
      miniNextButton.addEventListener("click", () => {
        this.navigateToNextMonth();
      });
    }
  }
  async onClose() {
  }
};

// src/views/calendar-workweek-view.ts
var CALENDAR_WORK_WEEK_VIEW_TYPE = "calendar-workweek-view";
var CalendarWorkWeekView = class extends CalendarView {
  constructor(leaf, plugin, i18n, taskManager) {
    super(leaf, plugin, i18n, taskManager);
  }
  getViewType() {
    return CALENDAR_WORK_WEEK_VIEW_TYPE;
  }
  getDisplayText() {
    return this.i18n.t("week_view_title");
  }
  getIcon() {
    return "calendar-check";
  }
  /**
    * Genera datos para la vista mensual del calendario
    */
  generateViewData() {
    const currentDate = this.currentDate;
    const currentWeekday = currentDate.weekday;
    const daysToPreviousMonday = currentWeekday === 1 ? 0 : currentWeekday === 7 ? 6 : currentWeekday - 1;
    const mondayOfWeek = currentDate.minus({ days: daysToPreviousMonday });
    const weekStartDate = mondayOfWeek;
    const daysToGenerate = 5;
    const localizedDayNames = this.getLocalizedDayNames();
    const days = [];
    let currentDay = weekStartDate;
    for (let i = 0; i < daysToGenerate; i++) {
      const dayTasks = this.getTasksForDate(currentDay);
      const dayIndex = currentDay.weekday % 7;
      days.push({
        date: currentDay,
        isToday: currentDay.hasSame(DateTime.now(), "day"),
        dayOfMonth: currentDay.day,
        dayOfWeek: currentDay.weekday,
        dayName: localizedDayNames[dayIndex],
        formattedDate: `${localizedDayNames[dayIndex]} ${currentDay.day}`,
        tasksForDay: dayTasks
      });
      currentDay = currentDay.plus({ days: 1 });
    }
    const weekEnd = weekStartDate.plus({ days: daysToGenerate - 1 });
    const periodName = `${weekStartDate.toFormat("MMM d")} - ${weekEnd.toFormat("MMM d, yyyy")}`;
    return {
      viewType: "workweek" /* WorkWeek */,
      weekNumber: weekStartDate.weekNumber,
      days,
      dayNames: localizedDayNames,
      // Solo lunes a viernes
      periodName
    };
  }
  navigateToPrevious() {
    this.currentDate = this.currentDate.minus({ weeks: 1 });
    this.refreshView();
  }
  navigateToNext() {
    this.currentDate = this.currentDate.plus({ weeks: 1 });
    this.refreshView();
  }
  /**
  * Sobrescribe el método de CalendarView para implementar event listeners específicos
  * @param container Contenedor donde se aplican los listeners
  * @param data Datos utilizados para renderizar la vista
  */
  setupViewSpecificEventListeners(container, data) {
    super.setupViewSpecificEventListeners(container, data);
    const gridStyleSelector = container.querySelector("#calendar-grid-style");
    if (gridStyleSelector) {
      gridStyleSelector.addEventListener("change", () => {
        const selectedStyle = gridStyleSelector.value;
        const weekDaysRow = container.querySelector(".calendar-week-days-row");
        if (weekDaysRow) {
          for (let i = 1; i <= 11; i++) {
            weekDaysRow.classList.remove(`style${i}`);
          }
          if (selectedStyle !== "default") {
            weekDaysRow.classList.add(selectedStyle);
          }
          localStorage.setItem("calendar-workweek-grid-style", selectedStyle);
        }
      });
      const savedStyle = localStorage.getItem("calendar-workweek-grid-style");
      if (savedStyle) {
        gridStyleSelector.value = savedStyle;
        const event = new Event("change");
        gridStyleSelector.dispatchEvent(event);
      }
    }
    this.setupTaskInteractionListeners(container);
  }
  /**
   * Configura los listeners para interacción con tareas
   * @param container Contenedor donde se aplican los listeners
   */
  setupTaskInteractionListeners(container) {
    const taskElements = container.querySelectorAll(".calendar-task");
    taskElements.forEach((taskEl) => {
      taskEl.addEventListener("click", (event) => {
        const target = event.currentTarget;
        const filePath = target.dataset.filePath;
        const lineNumber = parseInt(target.dataset.lineNumber || "0", 10);
        if (filePath) {
          this.plugin.app.workspace.openLinkText(filePath, "", false, { line: lineNumber });
        }
      });
    });
  }
  async onClose() {
  }
};

// src/views/list-view.ts
var import_handlebars3 = __toESM(require_handlebars());
var LIST_VIEW_TYPE = "list-view";
var ListView = class extends BaseView {
  // Modo predeterminado: jerárquico
  constructor(leaf, plugin, i18n, taskManager) {
    super(leaf);
    this.plugin = plugin;
    this.i18n = i18n;
    this.taskManager = taskManager;
    __publicField(this, "tasks", []);
    // Lista de tareas
    __publicField(this, "isHierarchicalView", true);
    this.i18n = i18n;
  }
  getViewType() {
    return LIST_VIEW_TYPE;
  }
  getDisplayText() {
    return this.i18n.t("list_view_title");
  }
  getIcon() {
    return "calendar-check";
  }
  /**
   * Alternar entre vista jerárquica y plana
   */
  toggleViewMode() {
    this.isHierarchicalView = !this.isHierarchicalView;
    this.onOpen();
  }
  async onOpen() {
    this.tasks = await this.getAllTasks(this.taskManager);
    const hierarchicalTasks = this.groupTasksByFolder(this.tasks);
    const flattenedTasks = this.isHierarchicalView ? null : this.flattenTaskHierarchy(hierarchicalTasks);
    await this.render(LIST_VIEW_TYPE, {
      tasks: this.tasks,
      groupedTasks: hierarchicalTasks,
      flattenedTasks,
      isHierarchicalView: this.isHierarchicalView
    }, this.i18n, this.plugin, this.leaf);
  }
  registerViewSpecificHelpers(i18n) {
    import_handlebars3.default.registerHelper("totalTaskCount", function(folder) {
      if (!folder) return 0;
      function countAllTasks(folderNode) {
        let count = folderNode.tasks ? folderNode.tasks.length : 0;
        if (folderNode.subfolders) {
          Object.values(folderNode.subfolders).forEach((subfolder) => {
            count += countAllTasks(subfolder);
          });
        }
        return count;
      }
      return countAllTasks(folder);
    });
    import_handlebars3.default.registerHelper("renderFolderHierarchy", function(folder, options) {
      let output = "";
      if (!folder) return output;
      if (folder.tasks && folder.tasks.length > 0) {
        output += options.fn({ folderName: folder.name, fullPath: folder.fullPath, tasks: folder.tasks, level: 0 });
      }
      if (folder.subfolders) {
        Object.values(folder.subfolders).forEach((subfolder) => {
          output += import_handlebars3.default.helpers.renderFolderHierarchy(subfolder, options);
        });
      }
      return new import_handlebars3.default.SafeString(output);
    });
  }
  /**
   * Sobrescribe el método de BaseView para implementar event listeners específicos de ListView
   * @param container Contenedor donde se aplican los listeners
   * @param data Datos utilizados para renderizar la vista
   */
  setupViewSpecificEventListeners(container, data) {
    const viewToggleButton = container.querySelector(".view-toggle-button");
    if (viewToggleButton) {
      viewToggleButton.addEventListener("click", () => {
        this.toggleViewMode();
      });
    }
    this.addFolderToggleListeners(container);
    const taskItems = container.querySelectorAll(".task-item");
    taskItems.forEach((item) => {
      item.addClass("clickable");
      item.addEventListener("dblclick", (event) => {
        const filePath = item.getAttribute("data-file-path");
        const lineNumber = item.getAttribute("data-line-number");
        if (filePath) {
          this.openTaskFile(filePath, lineNumber ? parseInt(lineNumber) : void 0);
        }
      });
      item.addEventListener("click", (event) => {
        container.querySelectorAll(".task-item.selected").forEach((el) => {
          el.removeClass("selected");
        });
        item.addClass("selected");
      });
    });
  }
  /**
   * Crea una estructura plana agrupando todas las tareas por carpeta principal
   * @param groupedTasks Estructura jerárquica de tareas
   * @returns Estructura plana con tareas agrupadas solo por carpeta principal
   */
  flattenTaskHierarchy(groupedTasks) {
    const flattenedStructure = {};
    const processFolderRecursive = (folder, parentFolder) => {
      const rootFolder = parentFolder || folder.name || "Sin carpeta";
      if (!flattenedStructure[rootFolder]) {
        flattenedStructure[rootFolder] = {
          tasks: [],
          name: rootFolder,
          fullPath: rootFolder
        };
      }
      if (folder.tasks && folder.tasks.length > 0) {
        flattenedStructure[rootFolder].tasks.push(...folder.tasks);
      }
      if (folder.subfolders) {
        Object.values(folder.subfolders).forEach((subfolder) => {
          processFolderRecursive(subfolder, rootFolder);
        });
      }
    };
    Object.values(groupedTasks).forEach((folder) => {
      processFolderRecursive(folder);
    });
    return flattenedStructure;
  }
  async onClose() {
  }
};

// src/core/task-manager.ts
var import_obsidian2 = require("obsidian");

// src/core/logger.ts
var import_winston = __toESM(require_winston());
var logger = (0, import_winston.createLogger)({
  level: "debug",
  // Nivel mínimo de logging (puede ser 'error', 'warn', 'info', 'debug', etc.)
  format: import_winston.format.combine(
    import_winston.format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }),
    import_winston.format.printf(({ timestamp, level, message }) => {
      return `[${timestamp}] [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new import_winston.transports.Console(),
    // Log en la consola
    new import_winston.transports.File({
      filename: "obsidian-agenda.log",
      level: "error",
      format: import_winston.format.json()
    })
    // Log en un archivo
  ]
});
var logger_default = logger;

// node_modules/rrule/dist/esm/weekday.js
var ALL_WEEKDAYS = [
  "MO",
  "TU",
  "WE",
  "TH",
  "FR",
  "SA",
  "SU"
];
var Weekday = (
  /** @class */
  function() {
    function Weekday2(weekday, n2) {
      if (n2 === 0)
        throw new Error("Can't create weekday with n == 0");
      this.weekday = weekday;
      this.n = n2;
    }
    Weekday2.fromStr = function(str) {
      return new Weekday2(ALL_WEEKDAYS.indexOf(str));
    };
    Weekday2.prototype.nth = function(n2) {
      return this.n === n2 ? this : new Weekday2(this.weekday, n2);
    };
    Weekday2.prototype.equals = function(other) {
      return this.weekday === other.weekday && this.n === other.n;
    };
    Weekday2.prototype.toString = function() {
      var s2 = ALL_WEEKDAYS[this.weekday];
      if (this.n)
        s2 = (this.n > 0 ? "+" : "") + String(this.n) + s2;
      return s2;
    };
    Weekday2.prototype.getJsWeekday = function() {
      return this.weekday === 6 ? 0 : this.weekday + 1;
    };
    return Weekday2;
  }()
);

// node_modules/rrule/dist/esm/helpers.js
var isPresent = function(value) {
  return value !== null && value !== void 0;
};
var isNumber2 = function(value) {
  return typeof value === "number";
};
var isWeekdayStr = function(value) {
  return typeof value === "string" && ALL_WEEKDAYS.includes(value);
};
var isArray = Array.isArray;
var range = function(start, end) {
  if (end === void 0) {
    end = start;
  }
  if (arguments.length === 1) {
    end = start;
    start = 0;
  }
  var rang = [];
  for (var i = start; i < end; i++)
    rang.push(i);
  return rang;
};
var repeat = function(value, times) {
  var i = 0;
  var array = [];
  if (isArray(value)) {
    for (; i < times; i++)
      array[i] = [].concat(value);
  } else {
    for (; i < times; i++)
      array[i] = value;
  }
  return array;
};
var toArray = function(item) {
  if (isArray(item)) {
    return item;
  }
  return [item];
};
function padStart2(item, targetLength, padString) {
  if (padString === void 0) {
    padString = " ";
  }
  var str = String(item);
  targetLength = targetLength >> 0;
  if (str.length > targetLength) {
    return String(str);
  }
  targetLength = targetLength - str.length;
  if (targetLength > padString.length) {
    padString += repeat(padString, targetLength / padString.length);
  }
  return padString.slice(0, targetLength) + String(str);
}
var split = function(str, sep, num) {
  var splits = str.split(sep);
  return num ? splits.slice(0, num).concat([splits.slice(num).join(sep)]) : splits;
};
var pymod = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
var divmod = function(a, b) {
  return { div: Math.floor(a / b), mod: pymod(a, b) };
};
var empty = function(obj) {
  return !isPresent(obj) || obj.length === 0;
};
var notEmpty = function(obj) {
  return !empty(obj);
};
var includes = function(arr, val) {
  return notEmpty(arr) && arr.indexOf(val) !== -1;
};

// node_modules/rrule/dist/esm/dateutil.js
var datetime = function(y, m, d, h, i, s2) {
  if (h === void 0) {
    h = 0;
  }
  if (i === void 0) {
    i = 0;
  }
  if (s2 === void 0) {
    s2 = 0;
  }
  return new Date(Date.UTC(y, m - 1, d, h, i, s2));
};
var MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var ONE_DAY = 1e3 * 60 * 60 * 24;
var MAXYEAR = 9999;
var ORDINAL_BASE = datetime(1970, 1, 1);
var PY_WEEKDAYS = [6, 0, 1, 2, 3, 4, 5];
var isLeapYear2 = function(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
};
var isDate2 = function(value) {
  return value instanceof Date;
};
var isValidDate = function(value) {
  return isDate2(value) && !isNaN(value.getTime());
};
var daysBetween = function(date1, date2) {
  var date1ms = date1.getTime();
  var date2ms = date2.getTime();
  var differencems = date1ms - date2ms;
  return Math.round(differencems / ONE_DAY);
};
var toOrdinal = function(date) {
  return daysBetween(date, ORDINAL_BASE);
};
var fromOrdinal = function(ordinal) {
  return new Date(ORDINAL_BASE.getTime() + ordinal * ONE_DAY);
};
var getMonthDays = function(date) {
  var month = date.getUTCMonth();
  return month === 1 && isLeapYear2(date.getUTCFullYear()) ? 29 : MONTH_DAYS[month];
};
var getWeekday = function(date) {
  return PY_WEEKDAYS[date.getUTCDay()];
};
var monthRange = function(year, month) {
  var date = datetime(year, month + 1, 1);
  return [getWeekday(date), getMonthDays(date)];
};
var combine = function(date, time) {
  time = time || date;
  return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()));
};
var clone3 = function(date) {
  var dolly = new Date(date.getTime());
  return dolly;
};
var cloneDates = function(dates) {
  var clones = [];
  for (var i = 0; i < dates.length; i++) {
    clones.push(clone3(dates[i]));
  }
  return clones;
};
var sort = function(dates) {
  dates.sort(function(a, b) {
    return a.getTime() - b.getTime();
  });
};
var timeToUntilString = function(time, utc) {
  if (utc === void 0) {
    utc = true;
  }
  var date = new Date(time);
  return [
    padStart2(date.getUTCFullYear().toString(), 4, "0"),
    padStart2(date.getUTCMonth() + 1, 2, "0"),
    padStart2(date.getUTCDate(), 2, "0"),
    "T",
    padStart2(date.getUTCHours(), 2, "0"),
    padStart2(date.getUTCMinutes(), 2, "0"),
    padStart2(date.getUTCSeconds(), 2, "0"),
    utc ? "Z" : ""
  ].join("");
};
var untilStringToDate = function(until) {
  var re = /^(\d{4})(\d{2})(\d{2})(T(\d{2})(\d{2})(\d{2})Z?)?$/;
  var bits = re.exec(until);
  if (!bits)
    throw new Error("Invalid UNTIL value: ".concat(until));
  return new Date(Date.UTC(parseInt(bits[1], 10), parseInt(bits[2], 10) - 1, parseInt(bits[3], 10), parseInt(bits[5], 10) || 0, parseInt(bits[6], 10) || 0, parseInt(bits[7], 10) || 0));
};
var dateTZtoISO8601 = function(date, timeZone) {
  var dateStr = date.toLocaleString("sv-SE", { timeZone });
  return dateStr.replace(" ", "T") + "Z";
};
var dateInTimeZone = function(date, timeZone) {
  var localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  var dateInLocalTZ = new Date(dateTZtoISO8601(date, localTimeZone));
  var dateInTargetTZ = new Date(dateTZtoISO8601(date, timeZone !== null && timeZone !== void 0 ? timeZone : "UTC"));
  var tzOffset = dateInTargetTZ.getTime() - dateInLocalTZ.getTime();
  return new Date(date.getTime() - tzOffset);
};

// node_modules/rrule/dist/esm/iterresult.js
var IterResult = (
  /** @class */
  function() {
    function IterResult2(method, args) {
      this.minDate = null;
      this.maxDate = null;
      this._result = [];
      this.total = 0;
      this.method = method;
      this.args = args;
      if (method === "between") {
        this.maxDate = args.inc ? args.before : new Date(args.before.getTime() - 1);
        this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);
      } else if (method === "before") {
        this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);
      } else if (method === "after") {
        this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);
      }
    }
    IterResult2.prototype.accept = function(date) {
      ++this.total;
      var tooEarly = this.minDate && date < this.minDate;
      var tooLate = this.maxDate && date > this.maxDate;
      if (this.method === "between") {
        if (tooEarly)
          return true;
        if (tooLate)
          return false;
      } else if (this.method === "before") {
        if (tooLate)
          return false;
      } else if (this.method === "after") {
        if (tooEarly)
          return true;
        this.add(date);
        return false;
      }
      return this.add(date);
    };
    IterResult2.prototype.add = function(date) {
      this._result.push(date);
      return true;
    };
    IterResult2.prototype.getValue = function() {
      var res = this._result;
      switch (this.method) {
        case "all":
        case "between":
          return res;
        case "before":
        case "after":
        default:
          return res.length ? res[res.length - 1] : null;
      }
    };
    IterResult2.prototype.clone = function() {
      return new IterResult2(this.method, this.args);
    };
    return IterResult2;
  }()
);
var iterresult_default = IterResult;

// node_modules/tslib/tslib.es6.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s2, i = 1, n2 = arguments.length; i < n2; i++) {
      s2 = arguments[i];
      for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p)) t[p] = s2[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l2 = from.length, ar; i < l2; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/rrule/dist/esm/callbackiterresult.js
var CallbackIterResult = (
  /** @class */
  function(_super) {
    __extends(CallbackIterResult2, _super);
    function CallbackIterResult2(method, args, iterator) {
      var _this = _super.call(this, method, args) || this;
      _this.iterator = iterator;
      return _this;
    }
    CallbackIterResult2.prototype.add = function(date) {
      if (this.iterator(date, this._result.length)) {
        this._result.push(date);
        return true;
      }
      return false;
    };
    return CallbackIterResult2;
  }(iterresult_default)
);
var callbackiterresult_default = CallbackIterResult;

// node_modules/rrule/dist/esm/nlp/i18n.js
var ENGLISH = {
  dayNames: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  monthNames: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  tokens: {
    SKIP: /^[ \r\n\t]+|^\.$/,
    number: /^[1-9][0-9]*/,
    numberAsText: /^(one|two|three)/i,
    every: /^every/i,
    "day(s)": /^days?/i,
    "weekday(s)": /^weekdays?/i,
    "week(s)": /^weeks?/i,
    "hour(s)": /^hours?/i,
    "minute(s)": /^minutes?/i,
    "month(s)": /^months?/i,
    "year(s)": /^years?/i,
    on: /^(on|in)/i,
    at: /^(at)/i,
    the: /^the/i,
    first: /^first/i,
    second: /^second/i,
    third: /^third/i,
    nth: /^([1-9][0-9]*)(\.|th|nd|rd|st)/i,
    last: /^last/i,
    for: /^for/i,
    "time(s)": /^times?/i,
    until: /^(un)?til/i,
    monday: /^mo(n(day)?)?/i,
    tuesday: /^tu(e(s(day)?)?)?/i,
    wednesday: /^we(d(n(esday)?)?)?/i,
    thursday: /^th(u(r(sday)?)?)?/i,
    friday: /^fr(i(day)?)?/i,
    saturday: /^sa(t(urday)?)?/i,
    sunday: /^su(n(day)?)?/i,
    january: /^jan(uary)?/i,
    february: /^feb(ruary)?/i,
    march: /^mar(ch)?/i,
    april: /^apr(il)?/i,
    may: /^may/i,
    june: /^june?/i,
    july: /^july?/i,
    august: /^aug(ust)?/i,
    september: /^sep(t(ember)?)?/i,
    october: /^oct(ober)?/i,
    november: /^nov(ember)?/i,
    december: /^dec(ember)?/i,
    comma: /^(,\s*|(and|or)\s*)+/i
  }
};
var i18n_default = ENGLISH;

// node_modules/rrule/dist/esm/nlp/totext.js
var contains = function(arr, val) {
  return arr.indexOf(val) !== -1;
};
var defaultGetText = function(id) {
  return id.toString();
};
var defaultDateFormatter = function(year, month, day) {
  return "".concat(month, " ").concat(day, ", ").concat(year);
};
var ToText = (
  /** @class */
  function() {
    function ToText2(rrule, gettext, language, dateFormatter) {
      if (gettext === void 0) {
        gettext = defaultGetText;
      }
      if (language === void 0) {
        language = i18n_default;
      }
      if (dateFormatter === void 0) {
        dateFormatter = defaultDateFormatter;
      }
      this.text = [];
      this.language = language || i18n_default;
      this.gettext = gettext;
      this.dateFormatter = dateFormatter;
      this.rrule = rrule;
      this.options = rrule.options;
      this.origOptions = rrule.origOptions;
      if (this.origOptions.bymonthday) {
        var bymonthday = [].concat(this.options.bymonthday);
        var bynmonthday = [].concat(this.options.bynmonthday);
        bymonthday.sort(function(a, b) {
          return a - b;
        });
        bynmonthday.sort(function(a, b) {
          return b - a;
        });
        this.bymonthday = bymonthday.concat(bynmonthday);
        if (!this.bymonthday.length)
          this.bymonthday = null;
      }
      if (isPresent(this.origOptions.byweekday)) {
        var byweekday = !isArray(this.origOptions.byweekday) ? [this.origOptions.byweekday] : this.origOptions.byweekday;
        var days = String(byweekday);
        this.byweekday = {
          allWeeks: byweekday.filter(function(weekday) {
            return !weekday.n;
          }),
          someWeeks: byweekday.filter(function(weekday) {
            return Boolean(weekday.n);
          }),
          isWeekdays: days.indexOf("MO") !== -1 && days.indexOf("TU") !== -1 && days.indexOf("WE") !== -1 && days.indexOf("TH") !== -1 && days.indexOf("FR") !== -1 && days.indexOf("SA") === -1 && days.indexOf("SU") === -1,
          isEveryDay: days.indexOf("MO") !== -1 && days.indexOf("TU") !== -1 && days.indexOf("WE") !== -1 && days.indexOf("TH") !== -1 && days.indexOf("FR") !== -1 && days.indexOf("SA") !== -1 && days.indexOf("SU") !== -1
        };
        var sortWeekDays = function(a, b) {
          return a.weekday - b.weekday;
        };
        this.byweekday.allWeeks.sort(sortWeekDays);
        this.byweekday.someWeeks.sort(sortWeekDays);
        if (!this.byweekday.allWeeks.length)
          this.byweekday.allWeeks = null;
        if (!this.byweekday.someWeeks.length)
          this.byweekday.someWeeks = null;
      } else {
        this.byweekday = null;
      }
    }
    ToText2.isFullyConvertible = function(rrule) {
      var canConvert = true;
      if (!(rrule.options.freq in ToText2.IMPLEMENTED))
        return false;
      if (rrule.origOptions.until && rrule.origOptions.count)
        return false;
      for (var key in rrule.origOptions) {
        if (contains(["dtstart", "tzid", "wkst", "freq"], key))
          return true;
        if (!contains(ToText2.IMPLEMENTED[rrule.options.freq], key))
          return false;
      }
      return canConvert;
    };
    ToText2.prototype.isFullyConvertible = function() {
      return ToText2.isFullyConvertible(this.rrule);
    };
    ToText2.prototype.toString = function() {
      var gettext = this.gettext;
      if (!(this.options.freq in ToText2.IMPLEMENTED)) {
        return gettext("RRule error: Unable to fully convert this rrule to text");
      }
      this.text = [gettext("every")];
      this[RRule.FREQUENCIES[this.options.freq]]();
      if (this.options.until) {
        this.add(gettext("until"));
        var until = this.options.until;
        this.add(this.dateFormatter(until.getUTCFullYear(), this.language.monthNames[until.getUTCMonth()], until.getUTCDate()));
      } else if (this.options.count) {
        this.add(gettext("for")).add(this.options.count.toString()).add(this.plural(this.options.count) ? gettext("times") : gettext("time"));
      }
      if (!this.isFullyConvertible())
        this.add(gettext("(~ approximate)"));
      return this.text.join("");
    };
    ToText2.prototype.HOURLY = function() {
      var gettext = this.gettext;
      if (this.options.interval !== 1)
        this.add(this.options.interval.toString());
      this.add(this.plural(this.options.interval) ? gettext("hours") : gettext("hour"));
    };
    ToText2.prototype.MINUTELY = function() {
      var gettext = this.gettext;
      if (this.options.interval !== 1)
        this.add(this.options.interval.toString());
      this.add(this.plural(this.options.interval) ? gettext("minutes") : gettext("minute"));
    };
    ToText2.prototype.DAILY = function() {
      var gettext = this.gettext;
      if (this.options.interval !== 1)
        this.add(this.options.interval.toString());
      if (this.byweekday && this.byweekday.isWeekdays) {
        this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
      } else {
        this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
      }
      if (this.origOptions.bymonth) {
        this.add(gettext("in"));
        this._bymonth();
      }
      if (this.bymonthday) {
        this._bymonthday();
      } else if (this.byweekday) {
        this._byweekday();
      } else if (this.origOptions.byhour) {
        this._byhour();
      }
    };
    ToText2.prototype.WEEKLY = function() {
      var gettext = this.gettext;
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString()).add(this.plural(this.options.interval) ? gettext("weeks") : gettext("week"));
      }
      if (this.byweekday && this.byweekday.isWeekdays) {
        if (this.options.interval === 1) {
          this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
        } else {
          this.add(gettext("on")).add(gettext("weekdays"));
        }
      } else if (this.byweekday && this.byweekday.isEveryDay) {
        this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
      } else {
        if (this.options.interval === 1)
          this.add(gettext("week"));
        if (this.origOptions.bymonth) {
          this.add(gettext("in"));
          this._bymonth();
        }
        if (this.bymonthday) {
          this._bymonthday();
        } else if (this.byweekday) {
          this._byweekday();
        }
        if (this.origOptions.byhour) {
          this._byhour();
        }
      }
    };
    ToText2.prototype.MONTHLY = function() {
      var gettext = this.gettext;
      if (this.origOptions.bymonth) {
        if (this.options.interval !== 1) {
          this.add(this.options.interval.toString()).add(gettext("months"));
          if (this.plural(this.options.interval))
            this.add(gettext("in"));
        } else {
        }
        this._bymonth();
      } else {
        if (this.options.interval !== 1) {
          this.add(this.options.interval.toString());
        }
        this.add(this.plural(this.options.interval) ? gettext("months") : gettext("month"));
      }
      if (this.bymonthday) {
        this._bymonthday();
      } else if (this.byweekday && this.byweekday.isWeekdays) {
        this.add(gettext("on")).add(gettext("weekdays"));
      } else if (this.byweekday) {
        this._byweekday();
      }
    };
    ToText2.prototype.YEARLY = function() {
      var gettext = this.gettext;
      if (this.origOptions.bymonth) {
        if (this.options.interval !== 1) {
          this.add(this.options.interval.toString());
          this.add(gettext("years"));
        } else {
        }
        this._bymonth();
      } else {
        if (this.options.interval !== 1) {
          this.add(this.options.interval.toString());
        }
        this.add(this.plural(this.options.interval) ? gettext("years") : gettext("year"));
      }
      if (this.bymonthday) {
        this._bymonthday();
      } else if (this.byweekday) {
        this._byweekday();
      }
      if (this.options.byyearday) {
        this.add(gettext("on the")).add(this.list(this.options.byyearday, this.nth, gettext("and"))).add(gettext("day"));
      }
      if (this.options.byweekno) {
        this.add(gettext("in")).add(this.plural(this.options.byweekno.length) ? gettext("weeks") : gettext("week")).add(this.list(this.options.byweekno, void 0, gettext("and")));
      }
    };
    ToText2.prototype._bymonthday = function() {
      var gettext = this.gettext;
      if (this.byweekday && this.byweekday.allWeeks) {
        this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext, gettext("or"))).add(gettext("the")).add(this.list(this.bymonthday, this.nth, gettext("or")));
      } else {
        this.add(gettext("on the")).add(this.list(this.bymonthday, this.nth, gettext("and")));
      }
    };
    ToText2.prototype._byweekday = function() {
      var gettext = this.gettext;
      if (this.byweekday.allWeeks && !this.byweekday.isWeekdays) {
        this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext));
      }
      if (this.byweekday.someWeeks) {
        if (this.byweekday.allWeeks)
          this.add(gettext("and"));
        this.add(gettext("on the")).add(this.list(this.byweekday.someWeeks, this.weekdaytext, gettext("and")));
      }
    };
    ToText2.prototype._byhour = function() {
      var gettext = this.gettext;
      this.add(gettext("at")).add(this.list(this.origOptions.byhour, void 0, gettext("and")));
    };
    ToText2.prototype._bymonth = function() {
      this.add(this.list(this.options.bymonth, this.monthtext, this.gettext("and")));
    };
    ToText2.prototype.nth = function(n2) {
      n2 = parseInt(n2.toString(), 10);
      var nth;
      var gettext = this.gettext;
      if (n2 === -1)
        return gettext("last");
      var npos = Math.abs(n2);
      switch (npos) {
        case 1:
        case 21:
        case 31:
          nth = npos + gettext("st");
          break;
        case 2:
        case 22:
          nth = npos + gettext("nd");
          break;
        case 3:
        case 23:
          nth = npos + gettext("rd");
          break;
        default:
          nth = npos + gettext("th");
      }
      return n2 < 0 ? nth + " " + gettext("last") : nth;
    };
    ToText2.prototype.monthtext = function(m) {
      return this.language.monthNames[m - 1];
    };
    ToText2.prototype.weekdaytext = function(wday) {
      var weekday = isNumber2(wday) ? (wday + 1) % 7 : wday.getJsWeekday();
      return (wday.n ? this.nth(wday.n) + " " : "") + this.language.dayNames[weekday];
    };
    ToText2.prototype.plural = function(n2) {
      return n2 % 100 !== 1;
    };
    ToText2.prototype.add = function(s2) {
      this.text.push(" ");
      this.text.push(s2);
      return this;
    };
    ToText2.prototype.list = function(arr, callback, finalDelim, delim) {
      var _this = this;
      if (delim === void 0) {
        delim = ",";
      }
      if (!isArray(arr)) {
        arr = [arr];
      }
      var delimJoin = function(array, delimiter, finalDelimiter) {
        var list = "";
        for (var i = 0; i < array.length; i++) {
          if (i !== 0) {
            if (i === array.length - 1) {
              list += " " + finalDelimiter + " ";
            } else {
              list += delimiter + " ";
            }
          }
          list += array[i];
        }
        return list;
      };
      callback = callback || function(o) {
        return o.toString();
      };
      var realCallback = function(arg) {
        return callback && callback.call(_this, arg);
      };
      if (finalDelim) {
        return delimJoin(arr.map(realCallback), delim, finalDelim);
      } else {
        return arr.map(realCallback).join(delim + " ");
      }
    };
    return ToText2;
  }()
);
var totext_default = ToText;

// node_modules/rrule/dist/esm/nlp/parsetext.js
var Parser = (
  /** @class */
  function() {
    function Parser2(rules) {
      this.done = true;
      this.rules = rules;
    }
    Parser2.prototype.start = function(text) {
      this.text = text;
      this.done = false;
      return this.nextSymbol();
    };
    Parser2.prototype.isDone = function() {
      return this.done && this.symbol === null;
    };
    Parser2.prototype.nextSymbol = function() {
      var best;
      var bestSymbol;
      this.symbol = null;
      this.value = null;
      do {
        if (this.done)
          return false;
        var rule = void 0;
        best = null;
        for (var name_1 in this.rules) {
          rule = this.rules[name_1];
          var match2 = rule.exec(this.text);
          if (match2) {
            if (best === null || match2[0].length > best[0].length) {
              best = match2;
              bestSymbol = name_1;
            }
          }
        }
        if (best != null) {
          this.text = this.text.substr(best[0].length);
          if (this.text === "")
            this.done = true;
        }
        if (best == null) {
          this.done = true;
          this.symbol = null;
          this.value = null;
          return;
        }
      } while (bestSymbol === "SKIP");
      this.symbol = bestSymbol;
      this.value = best;
      return true;
    };
    Parser2.prototype.accept = function(name) {
      if (this.symbol === name) {
        if (this.value) {
          var v = this.value;
          this.nextSymbol();
          return v;
        }
        this.nextSymbol();
        return true;
      }
      return false;
    };
    Parser2.prototype.acceptNumber = function() {
      return this.accept("number");
    };
    Parser2.prototype.expect = function(name) {
      if (this.accept(name))
        return true;
      throw new Error("expected " + name + " but found " + this.symbol);
    };
    return Parser2;
  }()
);
function parseText(text, language) {
  if (language === void 0) {
    language = i18n_default;
  }
  var options = {};
  var ttr = new Parser(language.tokens);
  if (!ttr.start(text))
    return null;
  S();
  return options;
  function S() {
    ttr.expect("every");
    var n2 = ttr.acceptNumber();
    if (n2)
      options.interval = parseInt(n2[0], 10);
    if (ttr.isDone())
      throw new Error("Unexpected end");
    switch (ttr.symbol) {
      case "day(s)":
        options.freq = RRule.DAILY;
        if (ttr.nextSymbol()) {
          AT();
          F();
        }
        break;
      // FIXME Note: every 2 weekdays != every two weeks on weekdays.
      // DAILY on weekdays is not a valid rule
      case "weekday(s)":
        options.freq = RRule.WEEKLY;
        options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];
        ttr.nextSymbol();
        AT();
        F();
        break;
      case "week(s)":
        options.freq = RRule.WEEKLY;
        if (ttr.nextSymbol()) {
          ON();
          AT();
          F();
        }
        break;
      case "hour(s)":
        options.freq = RRule.HOURLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "minute(s)":
        options.freq = RRule.MINUTELY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "month(s)":
        options.freq = RRule.MONTHLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "year(s)":
        options.freq = RRule.YEARLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        options.freq = RRule.WEEKLY;
        var key = ttr.symbol.substr(0, 2).toUpperCase();
        options.byweekday = [RRule[key]];
        if (!ttr.nextSymbol())
          return;
        while (ttr.accept("comma")) {
          if (ttr.isDone())
            throw new Error("Unexpected end");
          var wkd = decodeWKD();
          if (!wkd) {
            throw new Error("Unexpected symbol " + ttr.symbol + ", expected weekday");
          }
          options.byweekday.push(RRule[wkd]);
          ttr.nextSymbol();
        }
        AT();
        MDAYs();
        F();
        break;
      case "january":
      case "february":
      case "march":
      case "april":
      case "may":
      case "june":
      case "july":
      case "august":
      case "september":
      case "october":
      case "november":
      case "december":
        options.freq = RRule.YEARLY;
        options.bymonth = [decodeM()];
        if (!ttr.nextSymbol())
          return;
        while (ttr.accept("comma")) {
          if (ttr.isDone())
            throw new Error("Unexpected end");
          var m = decodeM();
          if (!m) {
            throw new Error("Unexpected symbol " + ttr.symbol + ", expected month");
          }
          options.bymonth.push(m);
          ttr.nextSymbol();
        }
        ON();
        F();
        break;
      default:
        throw new Error("Unknown symbol");
    }
  }
  function ON() {
    var on = ttr.accept("on");
    var the = ttr.accept("the");
    if (!(on || the))
      return;
    do {
      var nth = decodeNTH();
      var wkd = decodeWKD();
      var m = decodeM();
      if (nth) {
        if (wkd) {
          ttr.nextSymbol();
          if (!options.byweekday)
            options.byweekday = [];
          options.byweekday.push(RRule[wkd].nth(nth));
        } else {
          if (!options.bymonthday)
            options.bymonthday = [];
          options.bymonthday.push(nth);
          ttr.accept("day(s)");
        }
      } else if (wkd) {
        ttr.nextSymbol();
        if (!options.byweekday)
          options.byweekday = [];
        options.byweekday.push(RRule[wkd]);
      } else if (ttr.symbol === "weekday(s)") {
        ttr.nextSymbol();
        if (!options.byweekday) {
          options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];
        }
      } else if (ttr.symbol === "week(s)") {
        ttr.nextSymbol();
        var n2 = ttr.acceptNumber();
        if (!n2) {
          throw new Error("Unexpected symbol " + ttr.symbol + ", expected week number");
        }
        options.byweekno = [parseInt(n2[0], 10)];
        while (ttr.accept("comma")) {
          n2 = ttr.acceptNumber();
          if (!n2) {
            throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
          }
          options.byweekno.push(parseInt(n2[0], 10));
        }
      } else if (m) {
        ttr.nextSymbol();
        if (!options.bymonth)
          options.bymonth = [];
        options.bymonth.push(m);
      } else {
        return;
      }
    } while (ttr.accept("comma") || ttr.accept("the") || ttr.accept("on"));
  }
  function AT() {
    var at = ttr.accept("at");
    if (!at)
      return;
    do {
      var n2 = ttr.acceptNumber();
      if (!n2) {
        throw new Error("Unexpected symbol " + ttr.symbol + ", expected hour");
      }
      options.byhour = [parseInt(n2[0], 10)];
      while (ttr.accept("comma")) {
        n2 = ttr.acceptNumber();
        if (!n2) {
          throw new Error("Unexpected symbol " + ttr.symbol + "; expected hour");
        }
        options.byhour.push(parseInt(n2[0], 10));
      }
    } while (ttr.accept("comma") || ttr.accept("at"));
  }
  function decodeM() {
    switch (ttr.symbol) {
      case "january":
        return 1;
      case "february":
        return 2;
      case "march":
        return 3;
      case "april":
        return 4;
      case "may":
        return 5;
      case "june":
        return 6;
      case "july":
        return 7;
      case "august":
        return 8;
      case "september":
        return 9;
      case "october":
        return 10;
      case "november":
        return 11;
      case "december":
        return 12;
      default:
        return false;
    }
  }
  function decodeWKD() {
    switch (ttr.symbol) {
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        return ttr.symbol.substr(0, 2).toUpperCase();
      default:
        return false;
    }
  }
  function decodeNTH() {
    switch (ttr.symbol) {
      case "last":
        ttr.nextSymbol();
        return -1;
      case "first":
        ttr.nextSymbol();
        return 1;
      case "second":
        ttr.nextSymbol();
        return ttr.accept("last") ? -2 : 2;
      case "third":
        ttr.nextSymbol();
        return ttr.accept("last") ? -3 : 3;
      case "nth":
        var v = parseInt(ttr.value[1], 10);
        if (v < -366 || v > 366)
          throw new Error("Nth out of range: " + v);
        ttr.nextSymbol();
        return ttr.accept("last") ? -v : v;
      default:
        return false;
    }
  }
  function MDAYs() {
    ttr.accept("on");
    ttr.accept("the");
    var nth = decodeNTH();
    if (!nth)
      return;
    options.bymonthday = [nth];
    ttr.nextSymbol();
    while (ttr.accept("comma")) {
      nth = decodeNTH();
      if (!nth) {
        throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
      }
      options.bymonthday.push(nth);
      ttr.nextSymbol();
    }
  }
  function F() {
    if (ttr.symbol === "until") {
      var date = Date.parse(ttr.text);
      if (!date)
        throw new Error("Cannot parse until date:" + ttr.text);
      options.until = new Date(date);
    } else if (ttr.accept("for")) {
      options.count = parseInt(ttr.value[0], 10);
      ttr.expect("number");
    }
  }
}

// node_modules/rrule/dist/esm/types.js
var Frequency;
(function(Frequency2) {
  Frequency2[Frequency2["YEARLY"] = 0] = "YEARLY";
  Frequency2[Frequency2["MONTHLY"] = 1] = "MONTHLY";
  Frequency2[Frequency2["WEEKLY"] = 2] = "WEEKLY";
  Frequency2[Frequency2["DAILY"] = 3] = "DAILY";
  Frequency2[Frequency2["HOURLY"] = 4] = "HOURLY";
  Frequency2[Frequency2["MINUTELY"] = 5] = "MINUTELY";
  Frequency2[Frequency2["SECONDLY"] = 6] = "SECONDLY";
})(Frequency || (Frequency = {}));
function freqIsDailyOrGreater(freq) {
  return freq < Frequency.HOURLY;
}

// node_modules/rrule/dist/esm/nlp/index.js
var fromText = function(text, language) {
  if (language === void 0) {
    language = i18n_default;
  }
  return new RRule(parseText(text, language) || void 0);
};
var common = [
  "count",
  "until",
  "interval",
  "byweekday",
  "bymonthday",
  "bymonth"
];
totext_default.IMPLEMENTED = [];
totext_default.IMPLEMENTED[Frequency.HOURLY] = common;
totext_default.IMPLEMENTED[Frequency.MINUTELY] = common;
totext_default.IMPLEMENTED[Frequency.DAILY] = ["byhour"].concat(common);
totext_default.IMPLEMENTED[Frequency.WEEKLY] = common;
totext_default.IMPLEMENTED[Frequency.MONTHLY] = common;
totext_default.IMPLEMENTED[Frequency.YEARLY] = ["byweekno", "byyearday"].concat(common);
var toText = function(rrule, gettext, language, dateFormatter) {
  return new totext_default(rrule, gettext, language, dateFormatter).toString();
};
var isFullyConvertible = totext_default.isFullyConvertible;

// node_modules/rrule/dist/esm/datetime.js
var Time = (
  /** @class */
  function() {
    function Time2(hour, minute, second, millisecond) {
      this.hour = hour;
      this.minute = minute;
      this.second = second;
      this.millisecond = millisecond || 0;
    }
    Time2.prototype.getHours = function() {
      return this.hour;
    };
    Time2.prototype.getMinutes = function() {
      return this.minute;
    };
    Time2.prototype.getSeconds = function() {
      return this.second;
    };
    Time2.prototype.getMilliseconds = function() {
      return this.millisecond;
    };
    Time2.prototype.getTime = function() {
      return (this.hour * 60 * 60 + this.minute * 60 + this.second) * 1e3 + this.millisecond;
    };
    return Time2;
  }()
);
var DateTime2 = (
  /** @class */
  function(_super) {
    __extends(DateTime3, _super);
    function DateTime3(year, month, day, hour, minute, second, millisecond) {
      var _this = _super.call(this, hour, minute, second, millisecond) || this;
      _this.year = year;
      _this.month = month;
      _this.day = day;
      return _this;
    }
    DateTime3.fromDate = function(date) {
      return new this(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.valueOf() % 1e3);
    };
    DateTime3.prototype.getWeekday = function() {
      return getWeekday(new Date(this.getTime()));
    };
    DateTime3.prototype.getTime = function() {
      return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();
    };
    DateTime3.prototype.getDay = function() {
      return this.day;
    };
    DateTime3.prototype.getMonth = function() {
      return this.month;
    };
    DateTime3.prototype.getYear = function() {
      return this.year;
    };
    DateTime3.prototype.addYears = function(years) {
      this.year += years;
    };
    DateTime3.prototype.addMonths = function(months2) {
      this.month += months2;
      if (this.month > 12) {
        var yearDiv = Math.floor(this.month / 12);
        var monthMod = pymod(this.month, 12);
        this.month = monthMod;
        this.year += yearDiv;
        if (this.month === 0) {
          this.month = 12;
          --this.year;
        }
      }
    };
    DateTime3.prototype.addWeekly = function(days, wkst) {
      if (wkst > this.getWeekday()) {
        this.day += -(this.getWeekday() + 1 + (6 - wkst)) + days * 7;
      } else {
        this.day += -(this.getWeekday() - wkst) + days * 7;
      }
      this.fixDay();
    };
    DateTime3.prototype.addDaily = function(days) {
      this.day += days;
      this.fixDay();
    };
    DateTime3.prototype.addHours = function(hours, filtered, byhour) {
      if (filtered) {
        this.hour += Math.floor((23 - this.hour) / hours) * hours;
      }
      for (; ; ) {
        this.hour += hours;
        var _a = divmod(this.hour, 24), dayDiv = _a.div, hourMod = _a.mod;
        if (dayDiv) {
          this.hour = hourMod;
          this.addDaily(dayDiv);
        }
        if (empty(byhour) || includes(byhour, this.hour))
          break;
      }
    };
    DateTime3.prototype.addMinutes = function(minutes, filtered, byhour, byminute) {
      if (filtered) {
        this.minute += Math.floor((1439 - (this.hour * 60 + this.minute)) / minutes) * minutes;
      }
      for (; ; ) {
        this.minute += minutes;
        var _a = divmod(this.minute, 60), hourDiv = _a.div, minuteMod = _a.mod;
        if (hourDiv) {
          this.minute = minuteMod;
          this.addHours(hourDiv, false, byhour);
        }
        if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute))) {
          break;
        }
      }
    };
    DateTime3.prototype.addSeconds = function(seconds, filtered, byhour, byminute, bysecond) {
      if (filtered) {
        this.second += Math.floor((86399 - (this.hour * 3600 + this.minute * 60 + this.second)) / seconds) * seconds;
      }
      for (; ; ) {
        this.second += seconds;
        var _a = divmod(this.second, 60), minuteDiv = _a.div, secondMod = _a.mod;
        if (minuteDiv) {
          this.second = secondMod;
          this.addMinutes(minuteDiv, false, byhour, byminute);
        }
        if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute)) && (empty(bysecond) || includes(bysecond, this.second))) {
          break;
        }
      }
    };
    DateTime3.prototype.fixDay = function() {
      if (this.day <= 28) {
        return;
      }
      var daysinmonth = monthRange(this.year, this.month - 1)[1];
      if (this.day <= daysinmonth) {
        return;
      }
      while (this.day > daysinmonth) {
        this.day -= daysinmonth;
        ++this.month;
        if (this.month === 13) {
          this.month = 1;
          ++this.year;
          if (this.year > MAXYEAR) {
            return;
          }
        }
        daysinmonth = monthRange(this.year, this.month - 1)[1];
      }
    };
    DateTime3.prototype.add = function(options, filtered) {
      var freq = options.freq, interval = options.interval, wkst = options.wkst, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
      switch (freq) {
        case Frequency.YEARLY:
          return this.addYears(interval);
        case Frequency.MONTHLY:
          return this.addMonths(interval);
        case Frequency.WEEKLY:
          return this.addWeekly(interval, wkst);
        case Frequency.DAILY:
          return this.addDaily(interval);
        case Frequency.HOURLY:
          return this.addHours(interval, filtered, byhour);
        case Frequency.MINUTELY:
          return this.addMinutes(interval, filtered, byhour, byminute);
        case Frequency.SECONDLY:
          return this.addSeconds(interval, filtered, byhour, byminute, bysecond);
      }
    };
    return DateTime3;
  }(Time)
);

// node_modules/rrule/dist/esm/parseoptions.js
function initializeOptions(options) {
  var invalid = [];
  var keys = Object.keys(options);
  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
    var key = keys_1[_i];
    if (!includes(defaultKeys, key))
      invalid.push(key);
    if (isDate2(options[key]) && !isValidDate(options[key])) {
      invalid.push(key);
    }
  }
  if (invalid.length) {
    throw new Error("Invalid options: " + invalid.join(", "));
  }
  return __assign({}, options);
}
function parseOptions(options) {
  var opts = __assign(__assign({}, DEFAULT_OPTIONS), initializeOptions(options));
  if (isPresent(opts.byeaster))
    opts.freq = RRule.YEARLY;
  if (!(isPresent(opts.freq) && RRule.FREQUENCIES[opts.freq])) {
    throw new Error("Invalid frequency: ".concat(opts.freq, " ").concat(options.freq));
  }
  if (!opts.dtstart)
    opts.dtstart = new Date((/* @__PURE__ */ new Date()).setMilliseconds(0));
  if (!isPresent(opts.wkst)) {
    opts.wkst = RRule.MO.weekday;
  } else if (isNumber2(opts.wkst)) {
  } else {
    opts.wkst = opts.wkst.weekday;
  }
  if (isPresent(opts.bysetpos)) {
    if (isNumber2(opts.bysetpos))
      opts.bysetpos = [opts.bysetpos];
    for (var i = 0; i < opts.bysetpos.length; i++) {
      var v = opts.bysetpos[i];
      if (v === 0 || !(v >= -366 && v <= 366)) {
        throw new Error("bysetpos must be between 1 and 366, or between -366 and -1");
      }
    }
  }
  if (!(Boolean(opts.byweekno) || notEmpty(opts.byweekno) || notEmpty(opts.byyearday) || Boolean(opts.bymonthday) || notEmpty(opts.bymonthday) || isPresent(opts.byweekday) || isPresent(opts.byeaster))) {
    switch (opts.freq) {
      case RRule.YEARLY:
        if (!opts.bymonth)
          opts.bymonth = opts.dtstart.getUTCMonth() + 1;
        opts.bymonthday = opts.dtstart.getUTCDate();
        break;
      case RRule.MONTHLY:
        opts.bymonthday = opts.dtstart.getUTCDate();
        break;
      case RRule.WEEKLY:
        opts.byweekday = [getWeekday(opts.dtstart)];
        break;
    }
  }
  if (isPresent(opts.bymonth) && !isArray(opts.bymonth)) {
    opts.bymonth = [opts.bymonth];
  }
  if (isPresent(opts.byyearday) && !isArray(opts.byyearday) && isNumber2(opts.byyearday)) {
    opts.byyearday = [opts.byyearday];
  }
  if (!isPresent(opts.bymonthday)) {
    opts.bymonthday = [];
    opts.bynmonthday = [];
  } else if (isArray(opts.bymonthday)) {
    var bymonthday = [];
    var bynmonthday = [];
    for (var i = 0; i < opts.bymonthday.length; i++) {
      var v = opts.bymonthday[i];
      if (v > 0) {
        bymonthday.push(v);
      } else if (v < 0) {
        bynmonthday.push(v);
      }
    }
    opts.bymonthday = bymonthday;
    opts.bynmonthday = bynmonthday;
  } else if (opts.bymonthday < 0) {
    opts.bynmonthday = [opts.bymonthday];
    opts.bymonthday = [];
  } else {
    opts.bynmonthday = [];
    opts.bymonthday = [opts.bymonthday];
  }
  if (isPresent(opts.byweekno) && !isArray(opts.byweekno)) {
    opts.byweekno = [opts.byweekno];
  }
  if (!isPresent(opts.byweekday)) {
    opts.bynweekday = null;
  } else if (isNumber2(opts.byweekday)) {
    opts.byweekday = [opts.byweekday];
    opts.bynweekday = null;
  } else if (isWeekdayStr(opts.byweekday)) {
    opts.byweekday = [Weekday.fromStr(opts.byweekday).weekday];
    opts.bynweekday = null;
  } else if (opts.byweekday instanceof Weekday) {
    if (!opts.byweekday.n || opts.freq > RRule.MONTHLY) {
      opts.byweekday = [opts.byweekday.weekday];
      opts.bynweekday = null;
    } else {
      opts.bynweekday = [[opts.byweekday.weekday, opts.byweekday.n]];
      opts.byweekday = null;
    }
  } else {
    var byweekday = [];
    var bynweekday = [];
    for (var i = 0; i < opts.byweekday.length; i++) {
      var wday = opts.byweekday[i];
      if (isNumber2(wday)) {
        byweekday.push(wday);
        continue;
      } else if (isWeekdayStr(wday)) {
        byweekday.push(Weekday.fromStr(wday).weekday);
        continue;
      }
      if (!wday.n || opts.freq > RRule.MONTHLY) {
        byweekday.push(wday.weekday);
      } else {
        bynweekday.push([wday.weekday, wday.n]);
      }
    }
    opts.byweekday = notEmpty(byweekday) ? byweekday : null;
    opts.bynweekday = notEmpty(bynweekday) ? bynweekday : null;
  }
  if (!isPresent(opts.byhour)) {
    opts.byhour = opts.freq < RRule.HOURLY ? [opts.dtstart.getUTCHours()] : null;
  } else if (isNumber2(opts.byhour)) {
    opts.byhour = [opts.byhour];
  }
  if (!isPresent(opts.byminute)) {
    opts.byminute = opts.freq < RRule.MINUTELY ? [opts.dtstart.getUTCMinutes()] : null;
  } else if (isNumber2(opts.byminute)) {
    opts.byminute = [opts.byminute];
  }
  if (!isPresent(opts.bysecond)) {
    opts.bysecond = opts.freq < RRule.SECONDLY ? [opts.dtstart.getUTCSeconds()] : null;
  } else if (isNumber2(opts.bysecond)) {
    opts.bysecond = [opts.bysecond];
  }
  return { parsedOptions: opts };
}
function buildTimeset(opts) {
  var millisecondModulo = opts.dtstart.getTime() % 1e3;
  if (!freqIsDailyOrGreater(opts.freq)) {
    return [];
  }
  var timeset = [];
  opts.byhour.forEach(function(hour) {
    opts.byminute.forEach(function(minute) {
      opts.bysecond.forEach(function(second) {
        timeset.push(new Time(hour, minute, second, millisecondModulo));
      });
    });
  });
  return timeset;
}

// node_modules/rrule/dist/esm/parsestring.js
function parseString(rfcString) {
  var options = rfcString.split("\n").map(parseLine).filter(function(x) {
    return x !== null;
  });
  return __assign(__assign({}, options[0]), options[1]);
}
function parseDtstart(line) {
  var options = {};
  var dtstartWithZone = /DTSTART(?:;TZID=([^:=]+?))?(?::|=)([^;\s]+)/i.exec(line);
  if (!dtstartWithZone) {
    return options;
  }
  var tzid = dtstartWithZone[1], dtstart = dtstartWithZone[2];
  if (tzid) {
    options.tzid = tzid;
  }
  options.dtstart = untilStringToDate(dtstart);
  return options;
}
function parseLine(rfcString) {
  rfcString = rfcString.replace(/^\s+|\s+$/, "");
  if (!rfcString.length)
    return null;
  var header = /^([A-Z]+?)[:;]/.exec(rfcString.toUpperCase());
  if (!header) {
    return parseRrule(rfcString);
  }
  var key = header[1];
  switch (key.toUpperCase()) {
    case "RRULE":
    case "EXRULE":
      return parseRrule(rfcString);
    case "DTSTART":
      return parseDtstart(rfcString);
    default:
      throw new Error("Unsupported RFC prop ".concat(key, " in ").concat(rfcString));
  }
}
function parseRrule(line) {
  var strippedLine = line.replace(/^RRULE:/i, "");
  var options = parseDtstart(strippedLine);
  var attrs = line.replace(/^(?:RRULE|EXRULE):/i, "").split(";");
  attrs.forEach(function(attr) {
    var _a = attr.split("="), key = _a[0], value = _a[1];
    switch (key.toUpperCase()) {
      case "FREQ":
        options.freq = Frequency[value.toUpperCase()];
        break;
      case "WKST":
        options.wkst = Days[value.toUpperCase()];
        break;
      case "COUNT":
      case "INTERVAL":
      case "BYSETPOS":
      case "BYMONTH":
      case "BYMONTHDAY":
      case "BYYEARDAY":
      case "BYWEEKNO":
      case "BYHOUR":
      case "BYMINUTE":
      case "BYSECOND":
        var num = parseNumber(value);
        var optionKey = key.toLowerCase();
        options[optionKey] = num;
        break;
      case "BYWEEKDAY":
      case "BYDAY":
        options.byweekday = parseWeekday(value);
        break;
      case "DTSTART":
      case "TZID":
        var dtstart = parseDtstart(line);
        options.tzid = dtstart.tzid;
        options.dtstart = dtstart.dtstart;
        break;
      case "UNTIL":
        options.until = untilStringToDate(value);
        break;
      case "BYEASTER":
        options.byeaster = Number(value);
        break;
      default:
        throw new Error("Unknown RRULE property '" + key + "'");
    }
  });
  return options;
}
function parseNumber(value) {
  if (value.indexOf(",") !== -1) {
    var values = value.split(",");
    return values.map(parseIndividualNumber);
  }
  return parseIndividualNumber(value);
}
function parseIndividualNumber(value) {
  if (/^[+-]?\d+$/.test(value)) {
    return Number(value);
  }
  return value;
}
function parseWeekday(value) {
  var days = value.split(",");
  return days.map(function(day) {
    if (day.length === 2) {
      return Days[day];
    }
    var parts = day.match(/^([+-]?\d{1,2})([A-Z]{2})$/);
    if (!parts || parts.length < 3) {
      throw new SyntaxError("Invalid weekday string: ".concat(day));
    }
    var n2 = Number(parts[1]);
    var wdaypart = parts[2];
    var wday = Days[wdaypart].weekday;
    return new Weekday(wday, n2);
  });
}

// node_modules/rrule/dist/esm/datewithzone.js
var DateWithZone = (
  /** @class */
  function() {
    function DateWithZone2(date, tzid) {
      if (isNaN(date.getTime())) {
        throw new RangeError("Invalid date passed to DateWithZone");
      }
      this.date = date;
      this.tzid = tzid;
    }
    Object.defineProperty(DateWithZone2.prototype, "isUTC", {
      get: function() {
        return !this.tzid || this.tzid.toUpperCase() === "UTC";
      },
      enumerable: false,
      configurable: true
    });
    DateWithZone2.prototype.toString = function() {
      var datestr = timeToUntilString(this.date.getTime(), this.isUTC);
      if (!this.isUTC) {
        return ";TZID=".concat(this.tzid, ":").concat(datestr);
      }
      return ":".concat(datestr);
    };
    DateWithZone2.prototype.getTime = function() {
      return this.date.getTime();
    };
    DateWithZone2.prototype.rezonedDate = function() {
      if (this.isUTC) {
        return this.date;
      }
      return dateInTimeZone(this.date, this.tzid);
    };
    return DateWithZone2;
  }()
);

// node_modules/rrule/dist/esm/optionstostring.js
function optionsToString(options) {
  var rrule = [];
  var dtstart = "";
  var keys = Object.keys(options);
  var defaultKeys2 = Object.keys(DEFAULT_OPTIONS);
  for (var i = 0; i < keys.length; i++) {
    if (keys[i] === "tzid")
      continue;
    if (!includes(defaultKeys2, keys[i]))
      continue;
    var key = keys[i].toUpperCase();
    var value = options[keys[i]];
    var outValue = "";
    if (!isPresent(value) || isArray(value) && !value.length)
      continue;
    switch (key) {
      case "FREQ":
        outValue = RRule.FREQUENCIES[options.freq];
        break;
      case "WKST":
        if (isNumber2(value)) {
          outValue = new Weekday(value).toString();
        } else {
          outValue = value.toString();
        }
        break;
      case "BYWEEKDAY":
        key = "BYDAY";
        outValue = toArray(value).map(function(wday) {
          if (wday instanceof Weekday) {
            return wday;
          }
          if (isArray(wday)) {
            return new Weekday(wday[0], wday[1]);
          }
          return new Weekday(wday);
        }).toString();
        break;
      case "DTSTART":
        dtstart = buildDtstart(value, options.tzid);
        break;
      case "UNTIL":
        outValue = timeToUntilString(value, !options.tzid);
        break;
      default:
        if (isArray(value)) {
          var strValues = [];
          for (var j = 0; j < value.length; j++) {
            strValues[j] = String(value[j]);
          }
          outValue = strValues.toString();
        } else {
          outValue = String(value);
        }
    }
    if (outValue) {
      rrule.push([key, outValue]);
    }
  }
  var rules = rrule.map(function(_a) {
    var key2 = _a[0], value2 = _a[1];
    return "".concat(key2, "=").concat(value2.toString());
  }).join(";");
  var ruleString = "";
  if (rules !== "") {
    ruleString = "RRULE:".concat(rules);
  }
  return [dtstart, ruleString].filter(function(x) {
    return !!x;
  }).join("\n");
}
function buildDtstart(dtstart, tzid) {
  if (!dtstart) {
    return "";
  }
  return "DTSTART" + new DateWithZone(new Date(dtstart), tzid).toString();
}

// node_modules/rrule/dist/esm/cache.js
function argsMatch(left, right) {
  if (Array.isArray(left)) {
    if (!Array.isArray(right))
      return false;
    if (left.length !== right.length)
      return false;
    return left.every(function(date, i) {
      return date.getTime() === right[i].getTime();
    });
  }
  if (left instanceof Date) {
    return right instanceof Date && left.getTime() === right.getTime();
  }
  return left === right;
}
var Cache = (
  /** @class */
  function() {
    function Cache2() {
      this.all = false;
      this.before = [];
      this.after = [];
      this.between = [];
    }
    Cache2.prototype._cacheAdd = function(what, value, args) {
      if (value) {
        value = value instanceof Date ? clone3(value) : cloneDates(value);
      }
      if (what === "all") {
        this.all = value;
      } else {
        args._value = value;
        this[what].push(args);
      }
    };
    Cache2.prototype._cacheGet = function(what, args) {
      var cached = false;
      var argsKeys = args ? Object.keys(args) : [];
      var findCacheDiff = function(item2) {
        for (var i2 = 0; i2 < argsKeys.length; i2++) {
          var key = argsKeys[i2];
          if (!argsMatch(args[key], item2[key])) {
            return true;
          }
        }
        return false;
      };
      var cachedObject = this[what];
      if (what === "all") {
        cached = this.all;
      } else if (isArray(cachedObject)) {
        for (var i = 0; i < cachedObject.length; i++) {
          var item = cachedObject[i];
          if (argsKeys.length && findCacheDiff(item))
            continue;
          cached = item._value;
          break;
        }
      }
      if (!cached && this.all) {
        var iterResult = new iterresult_default(what, args);
        for (var i = 0; i < this.all.length; i++) {
          if (!iterResult.accept(this.all[i]))
            break;
        }
        cached = iterResult.getValue();
        this._cacheAdd(what, cached, args);
      }
      return isArray(cached) ? cloneDates(cached) : cached instanceof Date ? clone3(cached) : cached;
    };
    return Cache2;
  }()
);

// node_modules/rrule/dist/esm/masks.js
var M365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], repeat(1, 31), true), repeat(2, 28), true), repeat(3, 31), true), repeat(4, 30), true), repeat(5, 31), true), repeat(6, 30), true), repeat(7, 31), true), repeat(8, 31), true), repeat(9, 30), true), repeat(10, 31), true), repeat(11, 30), true), repeat(12, 31), true), repeat(1, 7), true);
var M366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], repeat(1, 31), true), repeat(2, 29), true), repeat(3, 31), true), repeat(4, 30), true), repeat(5, 31), true), repeat(6, 30), true), repeat(7, 31), true), repeat(8, 31), true), repeat(9, 30), true), repeat(10, 31), true), repeat(11, 30), true), repeat(12, 31), true), repeat(1, 7), true);
var M28 = range(1, 29);
var M29 = range(1, 30);
var M30 = range(1, 31);
var M31 = range(1, 32);
var MDAY366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], M31, true), M29, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31.slice(0, 7), true);
var MDAY365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], M31, true), M28, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31.slice(0, 7), true);
var NM28 = range(-28, 0);
var NM29 = range(-29, 0);
var NM30 = range(-30, 0);
var NM31 = range(-31, 0);
var NMDAY366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], NM31, true), NM29, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31.slice(0, 7), true);
var NMDAY365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], NM31, true), NM28, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31.slice(0, 7), true);
var M366RANGE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
var M365RANGE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
var WDAYMASK = function() {
  var wdaymask = [];
  for (var i = 0; i < 55; i++)
    wdaymask = wdaymask.concat(range(7));
  return wdaymask;
}();

// node_modules/rrule/dist/esm/iterinfo/yearinfo.js
function rebuildYear(year, options) {
  var firstyday = datetime(year, 1, 1);
  var yearlen = isLeapYear2(year) ? 366 : 365;
  var nextyearlen = isLeapYear2(year + 1) ? 366 : 365;
  var yearordinal = toOrdinal(firstyday);
  var yearweekday = getWeekday(firstyday);
  var result = __assign(__assign({ yearlen, nextyearlen, yearordinal, yearweekday }, baseYearMasks(year)), { wnomask: null });
  if (empty(options.byweekno)) {
    return result;
  }
  result.wnomask = repeat(0, yearlen + 7);
  var firstwkst;
  var wyearlen;
  var no1wkst = firstwkst = pymod(7 - yearweekday + options.wkst, 7);
  if (no1wkst >= 4) {
    no1wkst = 0;
    wyearlen = result.yearlen + pymod(yearweekday - options.wkst, 7);
  } else {
    wyearlen = yearlen - no1wkst;
  }
  var div = Math.floor(wyearlen / 7);
  var mod = pymod(wyearlen, 7);
  var numweeks = Math.floor(div + mod / 4);
  for (var j = 0; j < options.byweekno.length; j++) {
    var n2 = options.byweekno[j];
    if (n2 < 0) {
      n2 += numweeks + 1;
    }
    if (!(n2 > 0 && n2 <= numweeks)) {
      continue;
    }
    var i = void 0;
    if (n2 > 1) {
      i = no1wkst + (n2 - 1) * 7;
      if (no1wkst !== firstwkst) {
        i -= 7 - firstwkst;
      }
    } else {
      i = no1wkst;
    }
    for (var k = 0; k < 7; k++) {
      result.wnomask[i] = 1;
      i++;
      if (result.wdaymask[i] === options.wkst)
        break;
    }
  }
  if (includes(options.byweekno, 1)) {
    var i = no1wkst + numweeks * 7;
    if (no1wkst !== firstwkst)
      i -= 7 - firstwkst;
    if (i < yearlen) {
      for (var j = 0; j < 7; j++) {
        result.wnomask[i] = 1;
        i += 1;
        if (result.wdaymask[i] === options.wkst)
          break;
      }
    }
  }
  if (no1wkst) {
    var lnumweeks = void 0;
    if (!includes(options.byweekno, -1)) {
      var lyearweekday = getWeekday(datetime(year - 1, 1, 1));
      var lno1wkst = pymod(7 - lyearweekday.valueOf() + options.wkst, 7);
      var lyearlen = isLeapYear2(year - 1) ? 366 : 365;
      var weekst = void 0;
      if (lno1wkst >= 4) {
        lno1wkst = 0;
        weekst = lyearlen + pymod(lyearweekday - options.wkst, 7);
      } else {
        weekst = yearlen - no1wkst;
      }
      lnumweeks = Math.floor(52 + pymod(weekst, 7) / 4);
    } else {
      lnumweeks = -1;
    }
    if (includes(options.byweekno, lnumweeks)) {
      for (var i = 0; i < no1wkst; i++)
        result.wnomask[i] = 1;
    }
  }
  return result;
}
function baseYearMasks(year) {
  var yearlen = isLeapYear2(year) ? 366 : 365;
  var firstyday = datetime(year, 1, 1);
  var wday = getWeekday(firstyday);
  if (yearlen === 365) {
    return {
      mmask: M365MASK,
      mdaymask: MDAY365MASK,
      nmdaymask: NMDAY365MASK,
      wdaymask: WDAYMASK.slice(wday),
      mrange: M365RANGE
    };
  }
  return {
    mmask: M366MASK,
    mdaymask: MDAY366MASK,
    nmdaymask: NMDAY366MASK,
    wdaymask: WDAYMASK.slice(wday),
    mrange: M366RANGE
  };
}

// node_modules/rrule/dist/esm/iterinfo/monthinfo.js
function rebuildMonth(year, month, yearlen, mrange, wdaymask, options) {
  var result = {
    lastyear: year,
    lastmonth: month,
    nwdaymask: []
  };
  var ranges = [];
  if (options.freq === RRule.YEARLY) {
    if (empty(options.bymonth)) {
      ranges = [[0, yearlen]];
    } else {
      for (var j = 0; j < options.bymonth.length; j++) {
        month = options.bymonth[j];
        ranges.push(mrange.slice(month - 1, month + 1));
      }
    }
  } else if (options.freq === RRule.MONTHLY) {
    ranges = [mrange.slice(month - 1, month + 1)];
  }
  if (empty(ranges)) {
    return result;
  }
  result.nwdaymask = repeat(0, yearlen);
  for (var j = 0; j < ranges.length; j++) {
    var rang = ranges[j];
    var first = rang[0];
    var last = rang[1] - 1;
    for (var k = 0; k < options.bynweekday.length; k++) {
      var i = void 0;
      var _a = options.bynweekday[k], wday = _a[0], n2 = _a[1];
      if (n2 < 0) {
        i = last + (n2 + 1) * 7;
        i -= pymod(wdaymask[i] - wday, 7);
      } else {
        i = first + (n2 - 1) * 7;
        i += pymod(7 - wdaymask[i] + wday, 7);
      }
      if (first <= i && i <= last)
        result.nwdaymask[i] = 1;
    }
  }
  return result;
}

// node_modules/rrule/dist/esm/iterinfo/easter.js
function easter(y, offset2) {
  if (offset2 === void 0) {
    offset2 = 0;
  }
  var a = y % 19;
  var b = Math.floor(y / 100);
  var c = y % 100;
  var d = Math.floor(b / 4);
  var e = b % 4;
  var f = Math.floor((b + 8) / 25);
  var g = Math.floor((b - f + 1) / 3);
  var h = Math.floor(19 * a + b - d - g + 15) % 30;
  var i = Math.floor(c / 4);
  var k = c % 4;
  var l2 = Math.floor(32 + 2 * e + 2 * i - h - k) % 7;
  var m = Math.floor((a + 11 * h + 22 * l2) / 451);
  var month = Math.floor((h + l2 - 7 * m + 114) / 31);
  var day = (h + l2 - 7 * m + 114) % 31 + 1;
  var date = Date.UTC(y, month - 1, day + offset2);
  var yearStart = Date.UTC(y, 0, 1);
  return [Math.ceil((date - yearStart) / (1e3 * 60 * 60 * 24))];
}

// node_modules/rrule/dist/esm/iterinfo/index.js
var Iterinfo = (
  /** @class */
  function() {
    function Iterinfo2(options) {
      this.options = options;
    }
    Iterinfo2.prototype.rebuild = function(year, month) {
      var options = this.options;
      if (year !== this.lastyear) {
        this.yearinfo = rebuildYear(year, options);
      }
      if (notEmpty(options.bynweekday) && (month !== this.lastmonth || year !== this.lastyear)) {
        var _a = this.yearinfo, yearlen = _a.yearlen, mrange = _a.mrange, wdaymask = _a.wdaymask;
        this.monthinfo = rebuildMonth(year, month, yearlen, mrange, wdaymask, options);
      }
      if (isPresent(options.byeaster)) {
        this.eastermask = easter(year, options.byeaster);
      }
    };
    Object.defineProperty(Iterinfo2.prototype, "lastyear", {
      get: function() {
        return this.monthinfo ? this.monthinfo.lastyear : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "lastmonth", {
      get: function() {
        return this.monthinfo ? this.monthinfo.lastmonth : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "yearlen", {
      get: function() {
        return this.yearinfo.yearlen;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "yearordinal", {
      get: function() {
        return this.yearinfo.yearordinal;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "mrange", {
      get: function() {
        return this.yearinfo.mrange;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "wdaymask", {
      get: function() {
        return this.yearinfo.wdaymask;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "mmask", {
      get: function() {
        return this.yearinfo.mmask;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "wnomask", {
      get: function() {
        return this.yearinfo.wnomask;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "nwdaymask", {
      get: function() {
        return this.monthinfo ? this.monthinfo.nwdaymask : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "nextyearlen", {
      get: function() {
        return this.yearinfo.nextyearlen;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "mdaymask", {
      get: function() {
        return this.yearinfo.mdaymask;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Iterinfo2.prototype, "nmdaymask", {
      get: function() {
        return this.yearinfo.nmdaymask;
      },
      enumerable: false,
      configurable: true
    });
    Iterinfo2.prototype.ydayset = function() {
      return [range(this.yearlen), 0, this.yearlen];
    };
    Iterinfo2.prototype.mdayset = function(_, month) {
      var start = this.mrange[month - 1];
      var end = this.mrange[month];
      var set = repeat(null, this.yearlen);
      for (var i = start; i < end; i++)
        set[i] = i;
      return [set, start, end];
    };
    Iterinfo2.prototype.wdayset = function(year, month, day) {
      var set = repeat(null, this.yearlen + 7);
      var i = toOrdinal(datetime(year, month, day)) - this.yearordinal;
      var start = i;
      for (var j = 0; j < 7; j++) {
        set[i] = i;
        ++i;
        if (this.wdaymask[i] === this.options.wkst)
          break;
      }
      return [set, start, i];
    };
    Iterinfo2.prototype.ddayset = function(year, month, day) {
      var set = repeat(null, this.yearlen);
      var i = toOrdinal(datetime(year, month, day)) - this.yearordinal;
      set[i] = i;
      return [set, i, i + 1];
    };
    Iterinfo2.prototype.htimeset = function(hour, _, second, millisecond) {
      var _this = this;
      var set = [];
      this.options.byminute.forEach(function(minute) {
        set = set.concat(_this.mtimeset(hour, minute, second, millisecond));
      });
      sort(set);
      return set;
    };
    Iterinfo2.prototype.mtimeset = function(hour, minute, _, millisecond) {
      var set = this.options.bysecond.map(function(second) {
        return new Time(hour, minute, second, millisecond);
      });
      sort(set);
      return set;
    };
    Iterinfo2.prototype.stimeset = function(hour, minute, second, millisecond) {
      return [new Time(hour, minute, second, millisecond)];
    };
    Iterinfo2.prototype.getdayset = function(freq) {
      switch (freq) {
        case Frequency.YEARLY:
          return this.ydayset.bind(this);
        case Frequency.MONTHLY:
          return this.mdayset.bind(this);
        case Frequency.WEEKLY:
          return this.wdayset.bind(this);
        case Frequency.DAILY:
          return this.ddayset.bind(this);
        default:
          return this.ddayset.bind(this);
      }
    };
    Iterinfo2.prototype.gettimeset = function(freq) {
      switch (freq) {
        case Frequency.HOURLY:
          return this.htimeset.bind(this);
        case Frequency.MINUTELY:
          return this.mtimeset.bind(this);
        case Frequency.SECONDLY:
          return this.stimeset.bind(this);
      }
    };
    return Iterinfo2;
  }()
);
var iterinfo_default = Iterinfo;

// node_modules/rrule/dist/esm/iter/poslist.js
function buildPoslist(bysetpos, timeset, start, end, ii, dayset) {
  var poslist = [];
  for (var j = 0; j < bysetpos.length; j++) {
    var daypos = void 0;
    var timepos = void 0;
    var pos = bysetpos[j];
    if (pos < 0) {
      daypos = Math.floor(pos / timeset.length);
      timepos = pymod(pos, timeset.length);
    } else {
      daypos = Math.floor((pos - 1) / timeset.length);
      timepos = pymod(pos - 1, timeset.length);
    }
    var tmp = [];
    for (var k = start; k < end; k++) {
      var val = dayset[k];
      if (!isPresent(val))
        continue;
      tmp.push(val);
    }
    var i = void 0;
    if (daypos < 0) {
      i = tmp.slice(daypos)[0];
    } else {
      i = tmp[daypos];
    }
    var time = timeset[timepos];
    var date = fromOrdinal(ii.yearordinal + i);
    var res = combine(date, time);
    if (!includes(poslist, res))
      poslist.push(res);
  }
  sort(poslist);
  return poslist;
}

// node_modules/rrule/dist/esm/iter/index.js
function iter(iterResult, options) {
  var dtstart = options.dtstart, freq = options.freq, interval = options.interval, until = options.until, bysetpos = options.bysetpos;
  var count = options.count;
  if (count === 0 || interval === 0) {
    return emitResult(iterResult);
  }
  var counterDate = DateTime2.fromDate(dtstart);
  var ii = new iterinfo_default(options);
  ii.rebuild(counterDate.year, counterDate.month);
  var timeset = makeTimeset(ii, counterDate, options);
  for (; ; ) {
    var _a = ii.getdayset(freq)(counterDate.year, counterDate.month, counterDate.day), dayset = _a[0], start = _a[1], end = _a[2];
    var filtered = removeFilteredDays(dayset, start, end, ii, options);
    if (notEmpty(bysetpos)) {
      var poslist = buildPoslist(bysetpos, timeset, start, end, ii, dayset);
      for (var j = 0; j < poslist.length; j++) {
        var res = poslist[j];
        if (until && res > until) {
          return emitResult(iterResult);
        }
        if (res >= dtstart) {
          var rezonedDate = rezoneIfNeeded(res, options);
          if (!iterResult.accept(rezonedDate)) {
            return emitResult(iterResult);
          }
          if (count) {
            --count;
            if (!count) {
              return emitResult(iterResult);
            }
          }
        }
      }
    } else {
      for (var j = start; j < end; j++) {
        var currentDay = dayset[j];
        if (!isPresent(currentDay)) {
          continue;
        }
        var date = fromOrdinal(ii.yearordinal + currentDay);
        for (var k = 0; k < timeset.length; k++) {
          var time = timeset[k];
          var res = combine(date, time);
          if (until && res > until) {
            return emitResult(iterResult);
          }
          if (res >= dtstart) {
            var rezonedDate = rezoneIfNeeded(res, options);
            if (!iterResult.accept(rezonedDate)) {
              return emitResult(iterResult);
            }
            if (count) {
              --count;
              if (!count) {
                return emitResult(iterResult);
              }
            }
          }
        }
      }
    }
    if (options.interval === 0) {
      return emitResult(iterResult);
    }
    counterDate.add(options, filtered);
    if (counterDate.year > MAXYEAR) {
      return emitResult(iterResult);
    }
    if (!freqIsDailyOrGreater(freq)) {
      timeset = ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, 0);
    }
    ii.rebuild(counterDate.year, counterDate.month);
  }
}
function isFiltered(ii, currentDay, options) {
  var bymonth = options.bymonth, byweekno = options.byweekno, byweekday = options.byweekday, byeaster = options.byeaster, bymonthday = options.bymonthday, bynmonthday = options.bynmonthday, byyearday = options.byyearday;
  return notEmpty(bymonth) && !includes(bymonth, ii.mmask[currentDay]) || notEmpty(byweekno) && !ii.wnomask[currentDay] || notEmpty(byweekday) && !includes(byweekday, ii.wdaymask[currentDay]) || notEmpty(ii.nwdaymask) && !ii.nwdaymask[currentDay] || byeaster !== null && !includes(ii.eastermask, currentDay) || (notEmpty(bymonthday) || notEmpty(bynmonthday)) && !includes(bymonthday, ii.mdaymask[currentDay]) && !includes(bynmonthday, ii.nmdaymask[currentDay]) || notEmpty(byyearday) && (currentDay < ii.yearlen && !includes(byyearday, currentDay + 1) && !includes(byyearday, -ii.yearlen + currentDay) || currentDay >= ii.yearlen && !includes(byyearday, currentDay + 1 - ii.yearlen) && !includes(byyearday, -ii.nextyearlen + currentDay - ii.yearlen));
}
function rezoneIfNeeded(date, options) {
  return new DateWithZone(date, options.tzid).rezonedDate();
}
function emitResult(iterResult) {
  return iterResult.getValue();
}
function removeFilteredDays(dayset, start, end, ii, options) {
  var filtered = false;
  for (var dayCounter = start; dayCounter < end; dayCounter++) {
    var currentDay = dayset[dayCounter];
    filtered = isFiltered(ii, currentDay, options);
    if (filtered)
      dayset[currentDay] = null;
  }
  return filtered;
}
function makeTimeset(ii, counterDate, options) {
  var freq = options.freq, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
  if (freqIsDailyOrGreater(freq)) {
    return buildTimeset(options);
  }
  if (freq >= RRule.HOURLY && notEmpty(byhour) && !includes(byhour, counterDate.hour) || freq >= RRule.MINUTELY && notEmpty(byminute) && !includes(byminute, counterDate.minute) || freq >= RRule.SECONDLY && notEmpty(bysecond) && !includes(bysecond, counterDate.second)) {
    return [];
  }
  return ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, counterDate.millisecond);
}

// node_modules/rrule/dist/esm/rrule.js
var Days = {
  MO: new Weekday(0),
  TU: new Weekday(1),
  WE: new Weekday(2),
  TH: new Weekday(3),
  FR: new Weekday(4),
  SA: new Weekday(5),
  SU: new Weekday(6)
};
var DEFAULT_OPTIONS = {
  freq: Frequency.YEARLY,
  dtstart: null,
  interval: 1,
  wkst: Days.MO,
  count: null,
  until: null,
  tzid: null,
  bysetpos: null,
  bymonth: null,
  bymonthday: null,
  bynmonthday: null,
  byyearday: null,
  byweekno: null,
  byweekday: null,
  bynweekday: null,
  byhour: null,
  byminute: null,
  bysecond: null,
  byeaster: null
};
var defaultKeys = Object.keys(DEFAULT_OPTIONS);
var RRule = (
  /** @class */
  function() {
    function RRule3(options, noCache) {
      if (options === void 0) {
        options = {};
      }
      if (noCache === void 0) {
        noCache = false;
      }
      this._cache = noCache ? null : new Cache();
      this.origOptions = initializeOptions(options);
      var parsedOptions = parseOptions(options).parsedOptions;
      this.options = parsedOptions;
    }
    RRule3.parseText = function(text, language) {
      return parseText(text, language);
    };
    RRule3.fromText = function(text, language) {
      return fromText(text, language);
    };
    RRule3.fromString = function(str) {
      return new RRule3(RRule3.parseString(str) || void 0);
    };
    RRule3.prototype._iter = function(iterResult) {
      return iter(iterResult, this.options);
    };
    RRule3.prototype._cacheGet = function(what, args) {
      if (!this._cache)
        return false;
      return this._cache._cacheGet(what, args);
    };
    RRule3.prototype._cacheAdd = function(what, value, args) {
      if (!this._cache)
        return;
      return this._cache._cacheAdd(what, value, args);
    };
    RRule3.prototype.all = function(iterator) {
      if (iterator) {
        return this._iter(new callbackiterresult_default("all", {}, iterator));
      }
      var result = this._cacheGet("all");
      if (result === false) {
        result = this._iter(new iterresult_default("all", {}));
        this._cacheAdd("all", result);
      }
      return result;
    };
    RRule3.prototype.between = function(after, before, inc, iterator) {
      if (inc === void 0) {
        inc = false;
      }
      if (!isValidDate(after) || !isValidDate(before)) {
        throw new Error("Invalid date passed in to RRule.between");
      }
      var args = {
        before,
        after,
        inc
      };
      if (iterator) {
        return this._iter(new callbackiterresult_default("between", args, iterator));
      }
      var result = this._cacheGet("between", args);
      if (result === false) {
        result = this._iter(new iterresult_default("between", args));
        this._cacheAdd("between", result, args);
      }
      return result;
    };
    RRule3.prototype.before = function(dt, inc) {
      if (inc === void 0) {
        inc = false;
      }
      if (!isValidDate(dt)) {
        throw new Error("Invalid date passed in to RRule.before");
      }
      var args = { dt, inc };
      var result = this._cacheGet("before", args);
      if (result === false) {
        result = this._iter(new iterresult_default("before", args));
        this._cacheAdd("before", result, args);
      }
      return result;
    };
    RRule3.prototype.after = function(dt, inc) {
      if (inc === void 0) {
        inc = false;
      }
      if (!isValidDate(dt)) {
        throw new Error("Invalid date passed in to RRule.after");
      }
      var args = { dt, inc };
      var result = this._cacheGet("after", args);
      if (result === false) {
        result = this._iter(new iterresult_default("after", args));
        this._cacheAdd("after", result, args);
      }
      return result;
    };
    RRule3.prototype.count = function() {
      return this.all().length;
    };
    RRule3.prototype.toString = function() {
      return optionsToString(this.origOptions);
    };
    RRule3.prototype.toText = function(gettext, language, dateFormatter) {
      return toText(this, gettext, language, dateFormatter);
    };
    RRule3.prototype.isFullyConvertibleToText = function() {
      return isFullyConvertible(this);
    };
    RRule3.prototype.clone = function() {
      return new RRule3(this.origOptions);
    };
    RRule3.FREQUENCIES = [
      "YEARLY",
      "MONTHLY",
      "WEEKLY",
      "DAILY",
      "HOURLY",
      "MINUTELY",
      "SECONDLY"
    ];
    RRule3.YEARLY = Frequency.YEARLY;
    RRule3.MONTHLY = Frequency.MONTHLY;
    RRule3.WEEKLY = Frequency.WEEKLY;
    RRule3.DAILY = Frequency.DAILY;
    RRule3.HOURLY = Frequency.HOURLY;
    RRule3.MINUTELY = Frequency.MINUTELY;
    RRule3.SECONDLY = Frequency.SECONDLY;
    RRule3.MO = Days.MO;
    RRule3.TU = Days.TU;
    RRule3.WE = Days.WE;
    RRule3.TH = Days.TH;
    RRule3.FR = Days.FR;
    RRule3.SA = Days.SA;
    RRule3.SU = Days.SU;
    RRule3.parseString = parseString;
    RRule3.optionsToString = optionsToString;
    return RRule3;
  }()
);

// node_modules/rrule/dist/esm/iterset.js
function iterSet(iterResult, _rrule, _exrule, _rdate, _exdate, tzid) {
  var _exdateHash = {};
  var _accept = iterResult.accept;
  function evalExdate(after, before) {
    _exrule.forEach(function(rrule) {
      rrule.between(after, before, true).forEach(function(date) {
        _exdateHash[Number(date)] = true;
      });
    });
  }
  _exdate.forEach(function(date) {
    var zonedDate2 = new DateWithZone(date, tzid).rezonedDate();
    _exdateHash[Number(zonedDate2)] = true;
  });
  iterResult.accept = function(date) {
    var dt = Number(date);
    if (isNaN(dt))
      return _accept.call(this, date);
    if (!_exdateHash[dt]) {
      evalExdate(new Date(dt - 1), new Date(dt + 1));
      if (!_exdateHash[dt]) {
        _exdateHash[dt] = true;
        return _accept.call(this, date);
      }
    }
    return true;
  };
  if (iterResult.method === "between") {
    evalExdate(iterResult.args.after, iterResult.args.before);
    iterResult.accept = function(date) {
      var dt = Number(date);
      if (!_exdateHash[dt]) {
        _exdateHash[dt] = true;
        return _accept.call(this, date);
      }
      return true;
    };
  }
  for (var i = 0; i < _rdate.length; i++) {
    var zonedDate = new DateWithZone(_rdate[i], tzid).rezonedDate();
    if (!iterResult.accept(new Date(zonedDate.getTime())))
      break;
  }
  _rrule.forEach(function(rrule) {
    iter(iterResult, rrule.options);
  });
  var res = iterResult._result;
  sort(res);
  switch (iterResult.method) {
    case "all":
    case "between":
      return res;
    case "before":
      return res.length && res[res.length - 1] || null;
    case "after":
    default:
      return res.length && res[0] || null;
  }
}

// node_modules/rrule/dist/esm/rrulestr.js
var DEFAULT_OPTIONS2 = {
  dtstart: null,
  cache: false,
  unfold: false,
  forceset: false,
  compatible: false,
  tzid: null
};
function parseInput(s2, options) {
  var rrulevals = [];
  var rdatevals = [];
  var exrulevals = [];
  var exdatevals = [];
  var parsedDtstart = parseDtstart(s2);
  var dtstart = parsedDtstart.dtstart;
  var tzid = parsedDtstart.tzid;
  var lines = splitIntoLines(s2, options.unfold);
  lines.forEach(function(line) {
    var _a;
    if (!line)
      return;
    var _b = breakDownLine(line), name = _b.name, parms = _b.parms, value = _b.value;
    switch (name.toUpperCase()) {
      case "RRULE":
        if (parms.length) {
          throw new Error("unsupported RRULE parm: ".concat(parms.join(",")));
        }
        rrulevals.push(parseString(line));
        break;
      case "RDATE":
        var _c = (_a = /RDATE(?:;TZID=([^:=]+))?/i.exec(line)) !== null && _a !== void 0 ? _a : [], rdateTzid = _c[1];
        if (rdateTzid && !tzid) {
          tzid = rdateTzid;
        }
        rdatevals = rdatevals.concat(parseRDate(value, parms));
        break;
      case "EXRULE":
        if (parms.length) {
          throw new Error("unsupported EXRULE parm: ".concat(parms.join(",")));
        }
        exrulevals.push(parseString(value));
        break;
      case "EXDATE":
        exdatevals = exdatevals.concat(parseRDate(value, parms));
        break;
      case "DTSTART":
        break;
      default:
        throw new Error("unsupported property: " + name);
    }
  });
  return {
    dtstart,
    tzid,
    rrulevals,
    rdatevals,
    exrulevals,
    exdatevals
  };
}
function buildRule(s2, options) {
  var _a = parseInput(s2, options), rrulevals = _a.rrulevals, rdatevals = _a.rdatevals, exrulevals = _a.exrulevals, exdatevals = _a.exdatevals, dtstart = _a.dtstart, tzid = _a.tzid;
  var noCache = options.cache === false;
  if (options.compatible) {
    options.forceset = true;
    options.unfold = true;
  }
  if (options.forceset || rrulevals.length > 1 || rdatevals.length || exrulevals.length || exdatevals.length) {
    var rset_1 = new RRuleSet(noCache);
    rset_1.dtstart(dtstart);
    rset_1.tzid(tzid || void 0);
    rrulevals.forEach(function(val2) {
      rset_1.rrule(new RRule(groomRruleOptions(val2, dtstart, tzid), noCache));
    });
    rdatevals.forEach(function(date) {
      rset_1.rdate(date);
    });
    exrulevals.forEach(function(val2) {
      rset_1.exrule(new RRule(groomRruleOptions(val2, dtstart, tzid), noCache));
    });
    exdatevals.forEach(function(date) {
      rset_1.exdate(date);
    });
    if (options.compatible && options.dtstart)
      rset_1.rdate(dtstart);
    return rset_1;
  }
  var val = rrulevals[0] || {};
  return new RRule(groomRruleOptions(val, val.dtstart || options.dtstart || dtstart, val.tzid || options.tzid || tzid), noCache);
}
function rrulestr(s2, options) {
  if (options === void 0) {
    options = {};
  }
  return buildRule(s2, initializeOptions2(options));
}
function groomRruleOptions(val, dtstart, tzid) {
  return __assign(__assign({}, val), { dtstart, tzid });
}
function initializeOptions2(options) {
  var invalid = [];
  var keys = Object.keys(options);
  var defaultKeys2 = Object.keys(DEFAULT_OPTIONS2);
  keys.forEach(function(key) {
    if (!includes(defaultKeys2, key))
      invalid.push(key);
  });
  if (invalid.length) {
    throw new Error("Invalid options: " + invalid.join(", "));
  }
  return __assign(__assign({}, DEFAULT_OPTIONS2), options);
}
function extractName(line) {
  if (line.indexOf(":") === -1) {
    return {
      name: "RRULE",
      value: line
    };
  }
  var _a = split(line, ":", 1), name = _a[0], value = _a[1];
  return {
    name,
    value
  };
}
function breakDownLine(line) {
  var _a = extractName(line), name = _a.name, value = _a.value;
  var parms = name.split(";");
  if (!parms)
    throw new Error("empty property name");
  return {
    name: parms[0].toUpperCase(),
    parms: parms.slice(1),
    value
  };
}
function splitIntoLines(s2, unfold) {
  if (unfold === void 0) {
    unfold = false;
  }
  s2 = s2 && s2.trim();
  if (!s2)
    throw new Error("Invalid empty string");
  if (!unfold) {
    return s2.split(/\s/);
  }
  var lines = s2.split("\n");
  var i = 0;
  while (i < lines.length) {
    var line = lines[i] = lines[i].replace(/\s+$/g, "");
    if (!line) {
      lines.splice(i, 1);
    } else if (i > 0 && line[0] === " ") {
      lines[i - 1] += line.slice(1);
      lines.splice(i, 1);
    } else {
      i += 1;
    }
  }
  return lines;
}
function validateDateParm(parms) {
  parms.forEach(function(parm) {
    if (!/(VALUE=DATE(-TIME)?)|(TZID=)/.test(parm)) {
      throw new Error("unsupported RDATE/EXDATE parm: " + parm);
    }
  });
}
function parseRDate(rdateval, parms) {
  validateDateParm(parms);
  return rdateval.split(",").map(function(datestr) {
    return untilStringToDate(datestr);
  });
}

// node_modules/rrule/dist/esm/rruleset.js
function createGetterSetter(fieldName) {
  var _this = this;
  return function(field) {
    if (field !== void 0) {
      _this["_".concat(fieldName)] = field;
    }
    if (_this["_".concat(fieldName)] !== void 0) {
      return _this["_".concat(fieldName)];
    }
    for (var i = 0; i < _this._rrule.length; i++) {
      var field_1 = _this._rrule[i].origOptions[fieldName];
      if (field_1) {
        return field_1;
      }
    }
  };
}
var RRuleSet = (
  /** @class */
  function(_super) {
    __extends(RRuleSet2, _super);
    function RRuleSet2(noCache) {
      if (noCache === void 0) {
        noCache = false;
      }
      var _this = _super.call(this, {}, noCache) || this;
      _this.dtstart = createGetterSetter.apply(_this, ["dtstart"]);
      _this.tzid = createGetterSetter.apply(_this, ["tzid"]);
      _this._rrule = [];
      _this._rdate = [];
      _this._exrule = [];
      _this._exdate = [];
      return _this;
    }
    RRuleSet2.prototype._iter = function(iterResult) {
      return iterSet(iterResult, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());
    };
    RRuleSet2.prototype.rrule = function(rrule) {
      _addRule(rrule, this._rrule);
    };
    RRuleSet2.prototype.exrule = function(rrule) {
      _addRule(rrule, this._exrule);
    };
    RRuleSet2.prototype.rdate = function(date) {
      _addDate(date, this._rdate);
    };
    RRuleSet2.prototype.exdate = function(date) {
      _addDate(date, this._exdate);
    };
    RRuleSet2.prototype.rrules = function() {
      return this._rrule.map(function(e) {
        return rrulestr(e.toString());
      });
    };
    RRuleSet2.prototype.exrules = function() {
      return this._exrule.map(function(e) {
        return rrulestr(e.toString());
      });
    };
    RRuleSet2.prototype.rdates = function() {
      return this._rdate.map(function(e) {
        return new Date(e.getTime());
      });
    };
    RRuleSet2.prototype.exdates = function() {
      return this._exdate.map(function(e) {
        return new Date(e.getTime());
      });
    };
    RRuleSet2.prototype.valueOf = function() {
      var result = [];
      if (!this._rrule.length && this._dtstart) {
        result = result.concat(optionsToString({ dtstart: this._dtstart }));
      }
      this._rrule.forEach(function(rrule) {
        result = result.concat(rrule.toString().split("\n"));
      });
      this._exrule.forEach(function(exrule) {
        result = result.concat(exrule.toString().split("\n").map(function(line) {
          return line.replace(/^RRULE:/, "EXRULE:");
        }).filter(function(line) {
          return !/^DTSTART/.test(line);
        }));
      });
      if (this._rdate.length) {
        result.push(rdatesToString("RDATE", this._rdate, this.tzid()));
      }
      if (this._exdate.length) {
        result.push(rdatesToString("EXDATE", this._exdate, this.tzid()));
      }
      return result;
    };
    RRuleSet2.prototype.toString = function() {
      return this.valueOf().join("\n");
    };
    RRuleSet2.prototype.clone = function() {
      var rrs = new RRuleSet2(!!this._cache);
      this._rrule.forEach(function(rule) {
        return rrs.rrule(rule.clone());
      });
      this._exrule.forEach(function(rule) {
        return rrs.exrule(rule.clone());
      });
      this._rdate.forEach(function(date) {
        return rrs.rdate(new Date(date.getTime()));
      });
      this._exdate.forEach(function(date) {
        return rrs.exdate(new Date(date.getTime()));
      });
      return rrs;
    };
    return RRuleSet2;
  }(RRule)
);
function _addRule(rrule, collection) {
  if (!(rrule instanceof RRule)) {
    throw new TypeError(String(rrule) + " is not RRule instance");
  }
  if (!includes(collection.map(String), String(rrule))) {
    collection.push(rrule);
  }
}
function _addDate(date, collection) {
  if (!(date instanceof Date)) {
    throw new TypeError(String(date) + " is not Date instance");
  }
  if (!includes(collection.map(Number), Number(date))) {
    collection.push(date);
    sort(collection);
  }
}
function rdatesToString(param, rdates, tzid) {
  var isUTC = !tzid || tzid.toUpperCase() === "UTC";
  var header = isUTC ? "".concat(param, ":") : "".concat(param, ";TZID=").concat(tzid, ":");
  var dateString = rdates.map(function(rdate) {
    return timeToUntilString(rdate.valueOf(), isUTC);
  }).join(",");
  return "".concat(header).concat(dateString);
}

// src/entities/task-section.ts
var TaskSection = class {
  constructor(i18n) {
    this.i18n = i18n;
    __publicField(this, "header");
    // Representa el encabezado de la tarea
    __publicField(this, "description");
    // Representa la descripción de la tarea
    __publicField(this, "tasksFields");
    // Representa los campos específicos de la tarea como un arreglo de strings
    __publicField(this, "blockLink");
    __publicField(this, "taskData", {});
    /**
         * Expresión regular para validar el formato de una tarea.
         * 
         * Desglose de la expresión:
         * 
         * ^[\t ]*:
         * - Permite que la línea comience con cualquier cantidad de tabulaciones (`\t`) o espacios (` `).
         * - Esto asegura que las tareas con indentación sean válidas.
         * 
         * (>*) :
         * - Permite que haya cero o más caracteres `>` al inicio de la línea.
         * - Esto permite que las tareas citadas (por ejemplo, `> - [x] Tarea`) o con múltiples citas (`>> - [x]`) sean válidas.
         * 
         * \s*:
         * - Permite cualquier cantidad de espacios después de los caracteres `>` (si están presentes).
         * 
         * (-|\*|\+|\d+[.)]):
         * - Valida el prefijo de la tarea:
         *   - `-`: Un guion.
         *   - `*`: Un asterisco.
         *   - `+`: Un signo más.
         *   - `\d+[.)]`: Un número seguido de un punto (`.`) o un paréntesis de cierre (`)`).
         * - Esto asegura que las tareas tengan un formato de lista válido.
         * 
         * {0,4}:
         * - Permite hasta 4 espacios opcionales después del prefijo.
         * 
         * \[(.)\]:
         * - Valida que haya corchetes `[ ]` con exactamente un carácter dentro.
         * - `(.)`: Captura cualquier carácter dentro de los corchetes.
         * - Esto asegura que las tareas tengan un estado válido (por ejemplo, `[x]`, `[ ]`, `[?]`).
         * 
         * {0,4}:
         * - Permite hasta 4 espacios opcionales después de los corchetes.
         * 
         * \S:
         * - Asegura que haya al menos un carácter no vacío (no espacio) después de los corchetes.
         * - Esto evita que las tareas sin contenido sean consideradas válidas.
         * 
         * .+:
         * - Requiere que haya más texto después del primer carácter no vacío.
         * - Esto asegura que las tareas tengan una descripción o contenido.
         * 
         * g:
         * - Bandera global para buscar todas las coincidencias en el texto.
         * 
         * Ejemplo de tareas válidas:
         * - `- [x] Tarea completada`
         * - `> - [ ] Tarea pendiente`
         * - `>> - [/] Tarea en progreso`
         * - `1. [x] Tarea numerada`
         * 
         * Ejemplo de tareas no válidas:
         * - `Texto aleatorio - [x] Tarea inválida` (texto antes del prefijo).
         * - `- [] Tarea inválida` (sin carácter dentro de los corchetes).
         * - `- [x]` (sin texto después de los corchetes).
         */
    // Propiedades para las expresiones regulares
    __publicField(this, "headerRegex");
    __publicField(this, "iconRegex");
    __publicField(this, "iconMapping", {
      // Iconos de fechas
      "\u{1F4C5}": { type: "date", property: "dueDate", format: "YYYY-MM-DD" },
      "\u{1F6EB}": { type: "date", property: "startDate", format: "YYYY-MM-DD" },
      "\u23F3": { type: "date", property: "scheduledDate", format: "YYYY-MM-DD" },
      "\u2705": { type: "date", property: "doneDate", format: "YYYY-MM-DD" },
      "\u274C": { type: "date", property: "cancelledDate", format: "YYYY-MM-DD" },
      "\u2795": { type: "date", property: "createdDate", format: "YYYY-MM-DD" },
      // Iconos de prioridad con nombre legible
      "\u23EC": { type: "priority", property: "priority", value: "\u23EC" /* Lowest */, name: "lowest" },
      "\u{1F53D}": { type: "priority", property: "priority", value: "\u{1F53D}" /* Low */, name: "low" },
      "\u{1F53C}": { type: "priority", property: "priority", value: "\u{1F53C}" /* Medium */, name: "medium" },
      "\u23EB": { type: "priority", property: "priority", value: "\u23EB" /* High */, name: "high" },
      "\u{1F53A}": { type: "priority", property: "priority", value: "\u{1F53A}" /* Highest */, name: "highest" },
      // Otros iconos
      "\u{1F501}": { type: "recurrence", property: "recurrence" },
      "\u{1F194}": { type: "id", property: "id" },
      "\u26D4": { type: "blocked", property: "blockedBy" },
      "\u{1F3C1}": {
        type: "completion",
        property: "onCompletion",
        values: ["keep" /* Keep */, "delete" /* Delete */]
      }
    });
    this.header = "";
    this.description = "";
    this.tasksFields = [];
    this.blockLink = "";
    this.headerRegex = /^[\t ]*(>*)\s*(-|\*|\+|\d+[.)]) {0,4}\[(.)\] {0,4}/;
    this.iconRegex = /📅|🛫|⏳|✅|❌|➕|⏬|⏫|🔼|🔽|🔺|🔁|🆔|⛔|🏁/g;
    iconRegex: RegExp;
  }
  /**
   * Inicializa las propiedades de la clase a partir del texto proporcionado.
   * @param text Texto completo de la tarea.
   */
  initialize(text) {
    try {
      this.header = this.extractHeader(text);
      let remainingText = this.removeText(text, this.header);
      remainingText = this.removeAllTags(remainingText);
      this.description = this.extractDescription(remainingText);
      remainingText = this.removeText(remainingText, this.description);
      const result = this.extractTasksFields(remainingText);
      this.tasksFields = result.fields;
      this.taskData = result.taskData;
      if (!this.taskData.priority && !this.taskData.priority_error) {
        this.taskData.priority = "normal";
      }
      this.blockLink = this.extractBlockLink(text);
    } catch (error) {
      console.warn(this.i18n.t("errors.initializeTaskSection", { error: error.message }));
      this.header = "";
      this.description = "";
      this.tasksFields = [];
      this.blockLink = "";
    }
  }
  /**
   * Extrae el encabezado del texto utilizando la expresión regular.
   * @param text Texto completo de la tarea.
   * @returns El encabezado extraído.
   * @throws Error si no se encuentra un encabezado válido.
   */
  extractHeader(text) {
    const match2 = text.match(this.headerRegex);
    if (!match2) {
      throw new Error("Texto inv\xE1lido: no contiene un encabezado v\xE1lido.");
    }
    return match2[0].trim();
  }
  /**
   * Elimina el encabezado del texto para procesar las secciones restantes.
   * @param text Texto completo de la tarea.
   * @param header El encabezado extraído.
   * @returns El texto restante después de eliminar el encabezado.
   */
  removeText(text, cutText) {
    const endIndex = text.indexOf(cutText) + cutText.length;
    return text.slice(endIndex).trim();
  }
  /**
   * Elimina todos los tags (palabras que comienzan con #) de un texto.
   * @param text Texto del que se eliminarán los tags.
   * @returns El texto sin tags.
   */
  removeAllTags(text) {
    let textWithoutTags = text.replace(/#[a-zA-Z0-9_\-\/]+\b/g, "");
    textWithoutTags = textWithoutTags.replace(/\s+/g, " ").trim();
    return textWithoutTags;
  }
  /**
   * Extrae la descripción del texto restante.
   * @param text Texto restante después de eliminar el encabezado.
   * @returns La descripción extraída.
   */
  extractDescription(text) {
    let smallestIndex = text.length;
    const matches = text.matchAll(this.iconRegex);
    for (const match2 of matches) {
      const index = match2.index;
      if (index < smallestIndex) {
        smallestIndex = index;
      }
    }
    if (smallestIndex < text.length) {
      return text.slice(0, smallestIndex).trim();
    }
    return text.trim();
  }
  /**
   * Extrae los campos específicos de la tarea del texto restante.
   * @param text Texto restante después de eliminar el encabezado.
   * @returns Un objeto que contiene el arreglo de campos y los datos estructurados extraídos.
   */
  extractTasksFields(text) {
    const fields = [];
    const taskData = {};
    const errors = [];
    const iconDateRegex = /(📅|🛫|⏳|✅|❌|➕)\s*(\d{4}-\d{2}-\d{2})\s*$/g;
    const iconEmptyRegex = /(⏬|⏫|🔼|🔽|🔺)\s*$/g;
    const iconCompletionRegex = /🏁\s*(keep|delete)/g;
    const iconBlockedRegex = /⛔\s*(.*)/g;
    const iconRecurrenceRegex = /🔁\s*(.*)/g;
    const idIconsRegex = /🆔\s*(.*)/g;
    const matches = Array.from(text.matchAll(this.iconRegex));
    for (let i = 0; i < matches.length; i++) {
      const match2 = matches[i];
      const matchIndex = match2.index;
      const nextMatchIndex = i + 1 < matches.length ? matches[i + 1].index : text.length;
      let fieldText = text.slice(matchIndex, nextMatchIndex).trim();
      const icon = match2[0];
      const iconConfig = this.iconMapping[icon];
      if (iconConfig) {
        let isValid = true;
        let extractedValue = null;
        let errorMessage = "";
        switch (iconConfig.type) {
          case "date":
            iconDateRegex.lastIndex = 0;
            if (iconDateRegex.test(fieldText)) {
              const dateMatch = fieldText.match(/\d{4}-\d{2}-\d{2}/);
              if (dateMatch) {
                extractedValue = dateMatch[0];
              }
            } else {
              isValid = false;
              errorMessage = this.i18n.t("errors.invalidDate", { icon });
              fieldText = `${fieldText} @${errorMessage}`;
            }
            break;
          case "priority":
            iconEmptyRegex.lastIndex = 0;
            if (iconEmptyRegex.test(fieldText)) {
              extractedValue = iconConfig.name || "normal";
            } else {
              isValid = false;
              errorMessage = this.i18n.t("errors.invalidPriority", { icon });
              fieldText = `${fieldText} @${errorMessage}`;
            }
            break;
          case "completion":
            iconCompletionRegex.lastIndex = 0;
            if (iconCompletionRegex.test(fieldText)) {
              const completionMatch = fieldText.match(/keep|delete/i);
              if (completionMatch) {
                extractedValue = completionMatch[0].toLowerCase();
              }
            } else {
              isValid = false;
              errorMessage = this.i18n.t("errors.invalidCompletion", { icon });
              ;
              fieldText = `${fieldText} @${errorMessage}`;
            }
            break;
          case "blocked":
            iconBlockedRegex.lastIndex = 0;
            if (iconBlockedRegex.test(fieldText)) {
              extractedValue = fieldText.substring(icon.length).trim();
              const dependencies = extractedValue.split(",").map((dep) => dep.trim()).filter((dep) => dep.length > 0);
              if (dependencies.length > 0) {
                taskData.dependsOn = dependencies;
              }
            } else {
              isValid = false;
              errorMessage = this.i18n.t("errors.invalidDependency", { icon });
              fieldText = `${fieldText} @${errorMessage}`;
            }
            break;
          case "recurrence":
            iconRecurrenceRegex.lastIndex = 0;
            if (iconRecurrenceRegex.test(fieldText)) {
              const recurrenceText = fieldText.substring(icon.length).trim();
              try {
                const rruleText = this.convertToRRuleFormat(recurrenceText);
                if (rruleText) {
                  const rule = rrulestr(rruleText);
                  extractedValue = recurrenceText;
                } else {
                  throw new Error("No se pudo convertir al formato RRULE");
                }
              } catch (e) {
                errorMessage = this.i18n.t("errors.invalidRecurrencePattern", { icon });
                fieldText = `${fieldText} @${errorMessage}`;
              }
            } else {
              errorMessage = this.i18n.t("errors.invalidRecurrence", { icon });
              fieldText = `${fieldText} @${errorMessage}`;
            }
            break;
          case "id":
            idIconsRegex.lastIndex = 0;
            const otherMatch = idIconsRegex.exec(fieldText);
            if (otherMatch && otherMatch[2] !== void 0) {
              extractedValue = otherMatch[2].trim();
            } else {
              extractedValue = fieldText.substring(icon.length).trim();
            }
            break;
        }
        if (isValid && iconConfig.property) {
          taskData[iconConfig.property] = extractedValue;
        } else if (!isValid) {
          const errorProperty = `${iconConfig.property || "field"}_error`;
          taskData[errorProperty] = errorMessage;
          errors.push(errorMessage);
        }
      }
      fields.push(fieldText);
    }
    if (errors.length > 0) {
      taskData.errors = errors;
      taskData.isValid = false;
    } else {
      taskData.isValid = true;
    }
    return { fields, taskData };
  }
  /**
  * Extrae el blockLink del texto completo.
  * @param text Texto completo de la tarea.
  * @returns El blockLink extraído o una cadena vacía si no se encuentra.
  */
  extractBlockLink(text) {
    const blockLinkMatch = text.match(/\^([a-zA-Z0-9-]+)/);
    if (blockLinkMatch) {
      return blockLinkMatch[0];
    }
    return "";
  }
  /**
  * Convierte el formato de texto de recurrencia de Obsidian a formato RRULE
  * @param recurrenceText Texto de recurrencia en formato Obsidian (ejemplo: "every week")
  * @returns Texto en formato RRULE o null si no se pudo convertir
  */
  convertToRRuleFormat(recurrenceText) {
    try {
      let frequency = "";
      let interval = 1;
      let until = "";
      let count = 0;
      let byDay = "";
      const text = recurrenceText.toLowerCase().trim();
      if (!text.startsWith("every")) {
        console.warn("El patr\xF3n de recurrencia debe comenzar con 'every'");
        return null;
      }
      const validPatternRegex = /^every\s+(?:(\d+)\s+)?(day|days|week|weeks|month|months|year|years|weekday|weekend|monday|tuesday|wednesday|thursday|friday|saturday|sunday)(?:\s+.*)?$/i;
      if (!validPatternRegex.test(text)) {
        console.warn("Formato de recurrencia inv\xE1lido");
        return null;
      }
      const timeWords = {
        day: /\b(day|days)\b/,
        week: /\b(week|weeks)\b/,
        month: /\b(month|months)\b/,
        year: /\b(year|years)\b/
      };
      if (timeWords.day.test(text)) frequency = "DAILY";
      else if (timeWords.week.test(text)) frequency = "WEEKLY";
      else if (timeWords.month.test(text)) frequency = "MONTHLY";
      else if (timeWords.year.test(text)) frequency = "YEARLY";
      else {
        const dayWords = /\b(weekday|weekend|monday|tuesday|wednesday|thursday|friday|saturday|sunday)\b/;
        if (dayWords.test(text)) {
          frequency = "WEEKLY";
        } else {
          console.warn("Frecuencia no reconocida en el patr\xF3n de recurrencia");
          return null;
        }
      }
      const intervalMatch = text.match(/every\s+(\d+)\s+/);
      if (intervalMatch && intervalMatch[1]) {
        interval = parseInt(intervalMatch[1], 10);
      }
      const untilMatch = text.match(/\buntil\s+(\d{4}-\d{2}-\d{2})\b/);
      if (untilMatch && untilMatch[1]) {
        const dateStr = untilMatch[1];
        until = `UNTIL=${dateStr.replace(/-/g, "")}T000000Z`;
      }
      const countMatch = text.match(/\b(\d+)\s+times\b/);
      if (countMatch && countMatch[1]) {
        count = parseInt(countMatch[1], 10);
      }
      const weekdays2 = {
        monday: "MO",
        tuesday: "TU",
        wednesday: "WE",
        thursday: "TH",
        friday: "FR",
        saturday: "SA",
        sunday: "SU",
        weekday: "MO,TU,WE,TH,FR",
        weekend: "SA,SU"
      };
      for (const [day, abbr] of Object.entries(weekdays2)) {
        const dayRegex = new RegExp(`\\b${day}\\b`, "i");
        if (dayRegex.test(text)) {
          byDay = `BYDAY=${abbr}`;
          break;
        }
      }
      let rule = `RRULE:FREQ=${frequency}`;
      if (interval > 1) rule += `;INTERVAL=${interval}`;
      if (until) rule += `;${until}`;
      if (count > 0) rule += `;COUNT=${count}`;
      if (byDay) rule += `;${byDay}`;
      return rule;
    } catch (error) {
      console.error("Error al convertir a formato RRULE:", error);
      return null;
    }
  }
};
// Nueva propiedad estática para el formato de tareas
__publicField(TaskSection, "taskFormatRegex", /^[\t ]*(>*)\s*(-|\*|\+|\d+[.)]) {0,4}\[(.)\] {0,4}\S.+/g);

// src/entities/task.ts
var Task = class {
  // Indica si la tarea es válida o no
  constructor(taskData) {
    __publicField(this, "id");
    __publicField(this, "title");
    __publicField(this, "text");
    // Texto de la tarea
    __publicField(this, "link");
    // Enlace al archivo de la tarea  
    __publicField(this, "lineNumber");
    // Número de línea donde se encuentra la tarea
    //section?: TaskSection; // Sección de la tarea (opcional)
    __publicField(this, "status");
    //Status;
    __publicField(this, "statusIcon");
    //StatusIcon;
    __publicField(this, "statusText");
    //StatusText;
    __publicField(this, "tags");
    __publicField(this, "priority");
    //Priority; // Prioridad de la tarea (⏬|⏫|🔼|🔽|🔺 o por defecto "C")
    __publicField(this, "createdDate");
    // Fecha de creación (➕)
    __publicField(this, "startDate");
    // Fecha de inicio (🛫)
    __publicField(this, "scheduledDate");
    // Fecha programada (⏳)
    __publicField(this, "dueDate");
    // Fecha de vencimiento (📅)
    __publicField(this, "doneDate");
    // Fecha de finalización (✅)
    __publicField(this, "cancelledDate");
    // Fecha de cancelación (❌)
    __publicField(this, "recurrence");
    //Recurrence | null; Indica si la tarea es recurrente (🔁)
    __publicField(this, "onCompletion");
    //OnCompletion;
    __publicField(this, "dependsOn");
    /** El blockLink es una anotación "^" después de las fechas/reglas de recurrencia.
    * Cualquier valor no vacío debe comenzar con '^'. */
    __publicField(this, "blockLink");
    __publicField(this, "scheduledDateIsInferred");
    __publicField(this, "filePath");
    __publicField(this, "fileName");
    __publicField(this, "fileBasename");
    __publicField(this, "fileExtension");
    __publicField(this, "rootFolder");
    // Carpeta raíz del archivo
    __publicField(this, "header");
    // Representa el encabezado de la tarea
    __publicField(this, "description");
    // Representa la descripción de la tarea
    __publicField(this, "tasksFields");
    // Representa los campos específicos de la tarea como un arreglo de strings
    __publicField(this, "taskData", {});
    __publicField(this, "groupLabel");
    __publicField(this, "isValid");
    this.id = taskData.id || "";
    this.title = taskData.title || "";
    this.text = taskData.text || "";
    this.lineNumber = taskData.lineNumber || 0;
    this.status = taskData.status || "";
    this.statusIcon = taskData.statusIcon || "";
    this.statusText = taskData.statusText || "";
    this.priority = taskData.priority || "";
    this.cancelledDate = taskData.cancelledDate || null;
    this.onCompletion = taskData.onCompletion || "";
    this.createdDate = taskData.createdDate || null;
    this.startDate = taskData.startDate || null;
    this.scheduledDate = taskData.scheduledDate || null;
    this.dueDate = taskData.dueDate || null;
    this.doneDate = taskData.doneDate || null;
    this.recurrence = taskData.recurrence || "";
    this.dependsOn = taskData.dependsOn || [];
    this.blockLink = taskData.blockLink || "";
    this.scheduledDateIsInferred = taskData.scheduledDateIsInferred || false;
    this.filePath = taskData.filePath || "";
    this.fileName = taskData.fileName || "";
    this.fileBasename = taskData.fileBasename || "";
    this.fileExtension = taskData.fileExtension || "";
    this.rootFolder = taskData.rootFolder || "";
    this.header = taskData.header || "";
    this.description = taskData.description || "";
    this.tasksFields = taskData.tasksFields || [];
    this.taskData = taskData.taskData || {};
    this.groupLabel = taskData.groupLabel || "";
    this.isValid = taskData.isValid || false;
    this.tags = taskData.tags || [];
  }
  /**
   * Extrae el estado de la tarea desde el texto del header.
   * @param headerText El texto del encabezado que contiene el estado entre corchetes.
   * @returns El estado correspondiente del enum CoreTaskStatus.
  */
  static extractStatusFromHeader(headerText) {
    const statusMatch = headerText.match(/\[(.)\]/);
    if (statusMatch && statusMatch[1]) {
      const statusChar = statusMatch[1];
      if (Object.values(CoreTaskStatus).includes(statusChar)) {
        return statusChar;
      }
    }
    return " " /* Todo */;
  }
  /**
   * Extrae los tags (palabras que comienzan con #) del texto de una tarea.
   * @param text Texto completo de la tarea.
   * @returns Array de tags encontrados en el texto.
   */
  static extractTags(text) {
    const tagRegex = /#[a-zA-Z0-9_\-\/]+/g;
    const tagMatches = text.match(tagRegex) || [];
    return tagMatches.map((tag) => tag.trim());
  }
};

// src/core/event-bus.ts
var import_events = require("events");
var _EventBus = class _EventBus {
  constructor() {
    __publicField(this, "emitter");
    this.emitter = new import_events.EventEmitter();
    this.emitter.setMaxListeners(30);
  }
  static getInstance() {
    if (!_EventBus.instance) {
      _EventBus.instance = new _EventBus();
    }
    return _EventBus.instance;
  }
  on(event, listener) {
    this.emitter.on(event, listener);
  }
  off(event, listener) {
    this.emitter.off(event, listener);
  }
  emit(event, ...args) {
    return this.emitter.emit(event, ...args);
  }
};
__publicField(_EventBus, "instance");
var EventBus = _EventBus;
var EVENTS = {
  TASKS_UPDATED: "tasks:updated",
  TASK_ADDED: "task:added",
  TASK_MODIFIED: "task:modified",
  TASK_DELETED: "task:deleted",
  FOLDERS_UPDATED: "folders:updated"
};

// src/core/task-manager.ts
var TaskManager = class {
  constructor(app, i18n, plugin) {
    this.app = app;
    this.i18n = i18n;
    this.plugin = plugin;
    __publicField(this, "tasksCache", /* @__PURE__ */ new Map());
    // Cache por archivo
    __publicField(this, "allTasksCache", null);
    // Cache global de todas las tareas
    __publicField(this, "lastRefreshTime", 0);
    __publicField(this, "CACHE_TTL", 3e5);
    // 5 minutos (ajustable)
    __publicField(this, "refreshInProgress", false);
    __publicField(this, "refreshPromise", null);
    __publicField(this, "eventBus");
    __publicField(this, "registeredEvents", []);
    this.eventBus = EventBus.getInstance();
  }
  /**
  * Configura los escuchadores de eventos usando registerEvent
  * para una limpieza automática cuando el plugin se descarga
  */
  registerEvents(plugin) {
    console.log("Escuchando eventos de modificaci\xF3n de archivos Markdown");
    const event = this.plugin.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof import_obsidian2.TFile && file.extension === "md") {
          this.invalidateFileCache(file.path);
        }
      })
    );
    this.registeredEvents.push(event);
    const createEvent = this.plugin.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file instanceof import_obsidian2.TFile && file.extension === "md") {
          this.invalidateCache();
        }
      })
    );
    this.registeredEvents.push(createEvent);
    const deleteEvent = this.plugin.registerEvent(
      this.app.vault.on("delete", (file) => {
        if (file instanceof import_obsidian2.TFile && file.extension === "md") {
          this.invalidateFileCache(file.path);
        }
      })
    );
    this.registeredEvents.push(deleteEvent);
    const renameEvent = this.plugin.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian2.TFile && file.extension === "md") {
          this.invalidateFileCache(oldPath);
          this.invalidateFileCache(file.path);
        }
      })
    );
    this.registeredEvents.push(renameEvent);
  }
  unregisterEvents() {
    this.registeredEvents.forEach((event) => {
      event.unsubscribe();
    });
  }
  /**
   * Invalida el cache de un archivo específico
   */
  invalidateFileCache(filePath) {
    this.tasksCache.delete(filePath);
    this.allTasksCache = null;
    this.eventBus.emit(EVENTS.TASKS_UPDATED, filePath);
    logger_default.debug(`Cache invalidado para: ${filePath}`);
  }
  /**
   * Invalida todo el cache
   */
  invalidateCache() {
    this.tasksCache.clear();
    this.allTasksCache = null;
    this.lastRefreshTime = 0;
    this.eventBus.emit(EVENTS.TASKS_UPDATED);
    logger_default.debug("Cache de tareas completamente invalidado");
  }
  /**
   * Limpia recursos del TaskManager
   * Ya no necesitamos eliminar manualmente los eventos
   * ya que registerEvent se encarga de eso
   */
  cleanup() {
    console.log("Limpiando Task Manager...");
    this.invalidateCache();
    logger_default.debug("Task Manager limpiado correctamente");
  }
  /**
   * Actualiza el cache completo de tareas
   */
  async refreshAllTasksCache() {
    try {
      const files = this.app.vault.getMarkdownFiles();
      const batchSize = 10;
      const allTasks = [];
      for (let i = 0; i < files.length; i += batchSize) {
        const batch = files.slice(i, i + batchSize);
        const batchPromises = batch.map(async (file) => {
          if (this.tasksCache.has(file.path)) {
            return this.tasksCache.get(file.path) || [];
          }
          const fileTasks = await this.extractTasksFromContent(file);
          this.tasksCache.set(file.path, fileTasks);
          return fileTasks;
        });
        const batchResults = await Promise.all(batchPromises);
        batchResults.forEach((fileTasks) => {
          allTasks.push(...fileTasks);
        });
      }
      logger_default.debug(`Tareas extra\xEDdas: ${allTasks.length} de ${files.length} archivos`);
      this.allTasksCache = allTasks;
      this.lastRefreshTime = Date.now();
      return allTasks;
    } catch (error) {
      logger_default.error("Error al obtener tareas:", error);
      return this.allTasksCache || [];
    }
  }
  /**
  * Recarga forzada de todas las tareas
  * Útil para llamadas desde la UI
  */
  async forceRefreshTasks() {
    this.invalidateCache();
    return this.getAllTasks();
  }
  /**
  * Obtiene todas las tareas, usando cache si es posible
  * @returns Lista de tareas
  */
  async getAllTasks() {
    if (this.refreshInProgress && this.refreshPromise) {
      return this.refreshPromise;
    }
    console.log(this.allTasksCache, this.lastRefreshTime, this.CACHE_TTL);
    const now2 = Date.now();
    if (this.allTasksCache && now2 - this.lastRefreshTime < this.CACHE_TTL) {
      logger_default.debug("Usando cache global de tareas");
      return this.allTasksCache;
    }
    this.refreshInProgress = true;
    this.refreshPromise = this.refreshAllTasksCache();
    try {
      const tasks = await this.refreshPromise;
      return tasks;
    } finally {
      this.refreshInProgress = false;
      this.refreshPromise = null;
    }
  }
  // El resto de métodos existentes...
  // Todos los métodos que llamen a this.getAllTasks() 
  // ahora usarán automáticamente el cache...
  /**
  * Filtra tareas según criterios especificados
  * @param criteria Criterios de filtrado (opcional)
  * @returns Tareas filtradas
  */
  async getFilteredTasks(criteria) {
    const allTasks = await this.getAllTasks();
    if (!criteria) return allTasks;
    let filteredTasks = allTasks.filter((task) => {
      return this.matchesStatusFilters(task, criteria) && this.matchesTextFilters(task, criteria) && this.matchesTagFilters(task, criteria) && this.matchesPriorityFilters(task, criteria) && this.matchesDateFilters(task, criteria) && this.matchesLocationFilters(task, criteria) && this.matchesAdvancedFilters(task, criteria);
    });
    if (criteria.sort) {
      filteredTasks = this.sortTasksByMultipleFields(
        filteredTasks,
        criteria.sort.by,
        criteria.sort.direction
      );
    }
    if (criteria.limit && criteria.limit > 0) {
      filteredTasks = filteredTasks.slice(0, criteria.limit);
    }
    if (criteria.groupBy) {
      return this.groupTasks(filteredTasks, criteria.groupBy);
    }
    logger_default.debug(`Filtrado: ${filteredTasks.length} de ${allTasks.length} tareas coinciden con los criterios`);
    return filteredTasks;
  }
  /**
  * Obtiene las tareas pendientes (no completadas)
  */
  async getPendingTasks() {
    return this.getFilteredTasks({
      isCompleted: false
    });
  }
  /**
   * Obtiene las tareas completadas
   */
  async getCompletedTasks() {
    return this.getFilteredTasks({
      isCompleted: true
    });
  }
  /**
  * Obtiene las tareas para hoy
  */
  async getTodayTasks() {
    return this.getFilteredTasks({
      isCompleted: false,
      dueDateRelative: {
        today: true
      },
      sort: {
        by: ["priority", "text"],
        direction: ["asc", "asc"]
      }
    });
  }
  /**
   * Obtiene las tareas para mañana
   */
  async getTomorrowTasks() {
    return this.getFilteredTasks({
      isCompleted: false,
      dueDateRelative: {
        tomorrow: true
      },
      sort: {
        by: ["priority", "text"],
        direction: ["asc", "asc"]
      }
    });
  }
  /**
   * Obtiene las tareas vencidas
   */
  async getOverdueTasks() {
    return this.getFilteredTasks({
      isCompleted: false,
      dueDateRelative: {
        overdue: true
      },
      sort: {
        by: ["dueDate", "priority"],
        direction: ["asc", "asc"]
      }
    });
  }
  /**
   * Obtiene las tareas programadas para esta semana
   */
  async getThisWeekTasks() {
    return this.getFilteredTasks({
      isCompleted: false,
      dueDateRelative: {
        thisWeek: true
      },
      sort: {
        by: ["dueDate", "priority"],
        direction: ["asc", "asc"]
      }
    });
  }
  /**
   * Obtiene las tareas programadas para la próxima semana
   */
  async getNextWeekTasks() {
    return this.getFilteredTasks({
      isCompleted: false,
      dueDateRelative: {
        nextWeek: true
      },
      sort: {
        by: ["dueDate", "priority"],
        direction: ["asc", "asc"]
      }
    });
  }
  /**
   * Obtiene las tareas completadas recientemente
   */
  async getRecentlyCompletedTasks(days = 7) {
    return this.getFilteredTasks({
      isCompleted: true,
      doneDate: {
        after: new Date(Date.now() - days * 24 * 60 * 60 * 1e3)
      },
      sort: {
        by: ["doneDate"],
        direction: ["desc"]
      }
    });
  }
  /**
   * Obtiene las tareas con alta prioridad
   */
  async getHighPriorityTasks() {
    return this.getFilteredTasks({
      isCompleted: false,
      priority: {
        is: ["high"]
      },
      sort: {
        by: ["dueDate"],
        direction: ["asc"]
      }
    });
  }
  /**
   * Obtiene las tareas para un archivo específico
   * (método nuevo que puede ser útil)
   */
  async getTasksForFile(filePath) {
    if (this.tasksCache.has(filePath)) {
      return this.tasksCache.get(filePath) || [];
    }
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian2.TFile) {
      const tasks = await this.extractTasksFromContent(file);
      this.tasksCache.set(filePath, tasks);
      return tasks;
    }
    return [];
  }
  ///
  /// Funciones para extraer tareas de archivos
  ///
  /**
   * Extrae tareas de un archivo específico
   * @param file El archivo del cual extraer tareas
   * @returns Una promesa que resuelve a un array de tareas
   */
  async extractTasksFromContent(file) {
    try {
      const content = await this.app.vault.read(file);
      const cachedMetadata = this.app.metadataCache.getFileCache(file);
      if (cachedMetadata && cachedMetadata.listItems) {
        const tasks = this.extractTasksFromCache(file, cachedMetadata, content);
        if (tasks.length > 0) {
          return tasks;
        }
      }
      return this.extractTasksTraditionally(file, content);
    } catch (error) {
      logger_default.error("Error al extraer tareas del contenido:", error);
      return [];
    }
  }
  /**
  * Extrae tareas usando el caché de metadatos de Obsidian
  */
  extractTasksFromCache(file, cache, content) {
    const tasks = [];
    const lines = content.split("\n");
    if (cache.listItems) {
      for (const item of cache.listItems) {
        if (item.task !== void 0) {
          const lineNumber = item.position.start.line;
          const line = lines[lineNumber];
          if (line && line.match(TaskSection.taskFormatRegex)) {
            const task = this.createTaskFromLine(file, line, lineNumber, content);
            if (task) {
              tasks.push(task);
            }
          }
        }
      }
    }
    return tasks;
  }
  /**
   * Extrae tareas usando el método tradicional (sin caché)
   */
  extractTasksTraditionally(file, content) {
    const lines = content.split("\n").filter((line) => line.match(TaskSection.taskFormatRegex));
    const tasks = [];
    lines.forEach((line, lineNumber) => {
      if (line) {
        const task = this.createTaskFromLine(file, line, lineNumber, content);
        if (task) {
          tasks.push(task);
        }
      }
    });
    return tasks;
  }
  /**
  * Crea un objeto ITask a partir de una línea de texto
  */
  createTaskFromLine(file, line, lineNumber, content) {
    try {
      const taskSection = new TaskSection(this.i18n);
      taskSection.initialize(line);
      const status = Task.extractStatusFromHeader(taskSection.header);
      const tags = Task.extractTags(line);
      const statusText = this.getCoreTaskStatusName(status);
      const statusIcon = this.getCoreTaskStatusIcon(status);
      const rootFolder = this.getRootFolder(file.path);
      return {
        id: taskSection.taskData.id || `${file.path}-${lineNumber + 1}`,
        title: line,
        text: line.trim(),
        link: { path: file.path },
        lineNumber: lineNumber + 1,
        // Ajustar a base 1 para consistencia
        //section: taskSection,
        status,
        statusText,
        statusIcon,
        tags,
        priority: taskSection.taskData.priority || "undefined",
        createdDate: taskSection.taskData.createdDate || null,
        startDate: taskSection.taskData.startDate || null,
        scheduledDate: taskSection.taskData.scheduledDate || null,
        dueDate: taskSection.taskData.dueDate || null,
        doneDate: taskSection.taskData.doneDate || null,
        cancelledDate: taskSection.taskData.cancelledDate || null,
        recurrence: taskSection.taskData.recurrence || "",
        onCompletion: taskSection.taskData.onCompletion,
        dependsOn: taskSection.taskData.dependsOn,
        blockLink: taskSection.blockLink,
        scheduledDateIsInferred: false,
        filePath: file.path,
        fileName: file.name,
        fileBasename: file.basename,
        fileExtension: file.extension,
        rootFolder,
        header: taskSection.header,
        description: taskSection.description,
        tasksFields: taskSection.tasksFields,
        taskData: taskSection.taskData,
        isValid: taskSection.taskData.isValid || false
      };
    } catch (error) {
      logger_default.error(`Error creando tarea de l\xEDnea ${lineNumber + 1} en ${file.path}:`, error);
      return null;
    }
  }
  getRootFolder(filePath) {
    if (filePath) {
      const pathParts = filePath.split("/");
      if (pathParts.length > 1) {
        return pathParts[0];
      } else {
        return "root";
      }
    } else {
      return "undefined";
    }
  }
  getCoreTaskStatusName(status) {
    switch (status) {
      case " " /* Todo */:
        return "Todo";
      case "/" /* InProgress */:
        return "InProgress";
      case "x" /* Done */:
        return "Done";
      case "-" /* Cancelled */:
        return "Cancelled";
      case "~" /* nonTask */:
        return "NonTask";
      default:
        return "Unknown";
    }
  }
  getCoreTaskStatusIcon(status) {
    switch (status) {
      case " " /* Todo */:
        return "\u2B55" /* Todo */;
      case "/" /* InProgress */:
        return "\u{1F6E0}\uFE0F" /* InProgress */;
      case "x" /* Done */:
        return "\u2705" /* Done */;
      case "-" /* Cancelled */:
        return "\u274C" /* Cancelled */;
      case "~" /* nonTask */:
        return "\u{1F5D1}\uFE0F" /* nonTask */;
      default:
        return "\u2B55" /* Todo */;
    }
  }
  ///
  /// Funciones para filtrar tareas
  /**
   * Verifica si una tarea coincide con los filtros de estado
   */
  matchesStatusFilters(task, criteria) {
    if (criteria.status && criteria.status.length > 0) {
      if (!task.status || !criteria.status.includes(task.status)) {
        return false;
      }
    }
    if (criteria.isCompleted !== void 0) {
      const isTaskCompleted = task.status === "DONE" || task.status === "CANCELLED";
      if (isTaskCompleted !== criteria.isCompleted) {
        return false;
      }
    }
    return true;
  }
  /**
   * Verifica si una tarea coincide con los filtros de texto
   */
  matchesTextFilters(task, criteria) {
    if (!criteria.text) return true;
    const taskText = task.text?.toLowerCase() || "";
    if (criteria.text.includes && criteria.text.includes.length > 0) {
      if (!criteria.text.includes.every((term) => taskText.includes(term.toLowerCase()))) {
        return false;
      }
    }
    if (criteria.text.excludes && criteria.text.excludes.length > 0) {
      if (criteria.text.excludes.some((term) => taskText.includes(term.toLowerCase()))) {
        return false;
      }
    }
    if (criteria.text.regex) {
      try {
        const regex = new RegExp(criteria.text.regex, "i");
        if (!regex.test(taskText)) {
          return false;
        }
      } catch (error) {
        logger_default.error(`Error en expresi\xF3n regular: ${criteria.text.regex}`, error);
      }
    }
    return true;
  }
  /**
   * Verifica si una tarea coincide con los filtros de etiquetas
   */
  matchesTagFilters(task, criteria) {
    if (!criteria.tags) return true;
    const taskTags = task.tags || [];
    if (criteria.tags.includes && criteria.tags.includes.length > 0) {
      if (!criteria.tags.includes.every((tag) => taskTags.includes(tag))) {
        return false;
      }
    }
    if (criteria.tags.excludes && criteria.tags.excludes.length > 0) {
      if (criteria.tags.excludes.some((tag) => taskTags.includes(tag))) {
        return false;
      }
    }
    return true;
  }
  /**
   * Verifica si una tarea coincide con los filtros de prioridad
   */
  matchesPriorityFilters(task, criteria) {
    if (!criteria.priority) return true;
    const taskPriority = task.priority || "undefined";
    if (criteria.priority.is && criteria.priority.is.length > 0) {
      if (!criteria.priority.is.includes(taskPriority)) {
        return false;
      }
    }
    if (criteria.priority.above) {
      const priorities = ["high", "medium", "low", "undefined"];
      const taskIndex = priorities.indexOf(taskPriority);
      const thresholdIndex = priorities.indexOf(criteria.priority.above);
      if (taskIndex === -1 || thresholdIndex === -1 || taskIndex >= thresholdIndex) {
        return false;
      }
    }
    if (criteria.priority.below) {
      const priorities = ["high", "medium", "low", "undefined"];
      const taskIndex = priorities.indexOf(taskPriority);
      const thresholdIndex = priorities.indexOf(criteria.priority.below);
      if (taskIndex === -1 || thresholdIndex === -1 || taskIndex <= thresholdIndex) {
        return false;
      }
    }
    return true;
  }
  /**
   * Verifica si una tarea coincide con los filtros de fechas
   */
  matchesDateFilters(task, criteria) {
    if (!this.matchesSpecificDateFilter(task.dueDate, criteria.dueDate)) return false;
    if (!this.matchesSpecificDateFilter(task.startDate, criteria.startDate)) return false;
    if (!this.matchesSpecificDateFilter(task.scheduledDate, criteria.scheduledDate)) return false;
    if (!this.matchesSpecificDateFilter(task.doneDate, criteria.doneDate)) return false;
    if (!this.matchesSpecificDateFilter(task.createdDate, criteria.createdDate)) return false;
    if (criteria.dueDateRelative) {
      if (!this.matchesRelativeDateFilter(task.dueDate, criteria.dueDateRelative)) {
        return false;
      }
    }
    return true;
  }
  /**
   * Auxiliar para verificar filtros de fecha específicos
   */
  matchesSpecificDateFilter(taskDate, filterCriteria) {
    if (!filterCriteria) return true;
    let dateObj = null;
    if (taskDate) {
      dateObj = typeof taskDate === "string" ? new Date(taskDate) : taskDate;
    }
    if (filterCriteria.exists !== void 0) {
      const hasDate = dateObj !== null;
      if (hasDate !== filterCriteria.exists) {
        return false;
      }
    }
    if (!dateObj) return true;
    if (filterCriteria.before && dateObj >= filterCriteria.before) return false;
    if (filterCriteria.on) {
      const onDate = filterCriteria.on;
      if (dateObj.getFullYear() !== onDate.getFullYear() || dateObj.getMonth() !== onDate.getMonth() || dateObj.getDate() !== onDate.getDate()) {
        return false;
      }
    }
    if (filterCriteria.after && dateObj <= filterCriteria.after) return false;
    return true;
  }
  /**
   * Auxiliar para verificar filtros de fecha relativos
   */
  matchesRelativeDateFilter(taskDate, filterCriteria) {
    if (!taskDate) return true;
    const dateObj = typeof taskDate === "string" ? new Date(taskDate) : taskDate;
    const today = /* @__PURE__ */ new Date();
    today.setHours(0, 0, 0, 0);
    if (filterCriteria.overdue) {
      const isOverdue = dateObj < today;
      if (!isOverdue) return false;
    }
    if (filterCriteria.today) {
      const isToday = dateObj.getFullYear() === today.getFullYear() && dateObj.getMonth() === today.getMonth() && dateObj.getDate() === today.getDate();
      if (!isToday) return false;
    }
    if (filterCriteria.tomorrow) {
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      const isTomorrow = dateObj.getFullYear() === tomorrow.getFullYear() && dateObj.getMonth() === tomorrow.getMonth() && dateObj.getDate() === tomorrow.getDate();
      if (!isTomorrow) return false;
    }
    if (filterCriteria.thisWeek) {
      const endOfWeek = new Date(today);
      const daysUntilEndOfWeek = 7 - today.getDay();
      endOfWeek.setDate(endOfWeek.getDate() + daysUntilEndOfWeek);
      const isThisWeek = dateObj >= today && dateObj <= endOfWeek;
      if (!isThisWeek) return false;
    }
    if (filterCriteria.nextWeek) {
      const startOfNextWeek = new Date(today);
      const daysUntilNextWeek = 7 - today.getDay() + 1;
      startOfNextWeek.setDate(startOfNextWeek.getDate() + daysUntilNextWeek);
      const endOfNextWeek = new Date(startOfNextWeek);
      endOfNextWeek.setDate(endOfNextWeek.getDate() + 6);
      const isNextWeek = dateObj >= startOfNextWeek && dateObj <= endOfNextWeek;
      if (!isNextWeek) return false;
    }
    if (filterCriteria.pastDays !== void 0) {
      const pastDate = new Date(today);
      pastDate.setDate(pastDate.getDate() - filterCriteria.pastDays);
      const isInPastDays = dateObj >= pastDate && dateObj < today;
      if (!isInPastDays) return false;
    }
    if (filterCriteria.futureDays !== void 0) {
      const futureDate = new Date(today);
      futureDate.setDate(futureDate.getDate() + filterCriteria.futureDays);
      const isInFutureDays = dateObj >= today && dateObj <= futureDate;
      if (!isInFutureDays) return false;
    }
    return true;
  }
  /**
   * Verifica si una tarea coincide con los filtros de ubicación
   */
  matchesLocationFilters(task, criteria) {
    if (!criteria.location) return true;
    if (criteria.location.folder) {
      const taskFolder = task.filePath?.substring(0, task.filePath.lastIndexOf("/") + 1) || "";
      if (!taskFolder.startsWith(criteria.location.folder)) {
        return false;
      }
    }
    if (criteria.location.file) {
      if (!task.filePath?.includes(criteria.location.file)) {
        return false;
      }
    }
    return true;
  }
  /**
   * Verifica si una tarea coincide con los filtros avanzados
   */
  matchesAdvancedFilters(task, criteria) {
    if (criteria.recurrence) {
      const hasRecurrence = !!task.recurrence && task.recurrence.length > 0;
      if (criteria.recurrence.has !== void 0 && hasRecurrence !== criteria.recurrence.has) {
        return false;
      }
      if (criteria.recurrence.pattern && task.recurrence) {
        if (!task.recurrence.includes(criteria.recurrence.pattern)) {
          return false;
        }
      }
    }
    if (criteria.dependencies) {
      const hasDependencies = !!task.dependsOn && task.dependsOn.length > 0;
      if (criteria.dependencies.has !== void 0 && hasDependencies !== criteria.dependencies.has) {
        return false;
      }
    }
    return true;
  }
  /**
   * Ordena tareas por múltiples campos
   */
  sortTasksByMultipleFields(tasks, sortFields, directions) {
    if (!sortFields || sortFields.length === 0) return tasks;
    const sortedTasks = [...tasks];
    sortedTasks.sort((a, b) => {
      for (let i = 0; i < sortFields.length; i++) {
        const field = sortFields[i];
        const direction = directions && directions[i] ? directions[i] : "asc";
        const dirFactor = direction === "asc" ? 1 : -1;
        const compareResult = this.compareTasks(a, b, field) * dirFactor;
        if (compareResult !== 0) {
          return compareResult;
        }
      }
      return 0;
    });
    return sortedTasks;
  }
  /**
   * Compara dos tareas por un campo específico
   */
  compareTasks(a, b, field) {
    switch (field) {
      case "dueDate":
        return this.compareDates(a.dueDate, b.dueDate);
      case "startDate":
        return this.compareDates(a.startDate, b.startDate);
      case "scheduledDate":
        return this.compareDates(a.scheduledDate, b.scheduledDate);
      case "doneDate":
        return this.compareDates(a.doneDate, b.doneDate);
      case "createdDate":
        return this.compareDates(a.createdDate, b.createdDate);
      case "priority":
        const priorityMap = {
          "high": 1,
          "medium": 2,
          "low": 3,
          "undefined": 4
        };
        const priorityA = priorityMap[a.priority || "undefined"] || 4;
        const priorityB = priorityMap[b.priority || "undefined"] || 4;
        return priorityA - priorityB;
      case "status":
        const statusMap = {
          "TODO": 1,
          "IN_PROGRESS": 2,
          "BLOCKED": 3,
          "DONE": 4,
          "CANCELLED": 5
        };
        const statusA = statusMap[a.status || "TODO"] || 1;
        const statusB = statusMap[b.status || "TODO"] || 1;
        return statusA - statusB;
      case "text":
        return (a.text || "").localeCompare(b.text || "");
      case "path":
        return (a.filePath || "").localeCompare(b.filePath || "");
      default:
        return 0;
    }
  }
  /**
   * Compara dos fechas, manejando valores nulos
   */
  compareDates(dateA, dateB) {
    const dateObjA = dateA ? typeof dateA === "string" ? new Date(dateA) : dateA : null;
    const dateObjB = dateB ? typeof dateB === "string" ? new Date(dateB) : dateB : null;
    if (dateObjA === null && dateObjB === null) return 0;
    if (dateObjA === null) return 1;
    if (dateObjB === null) return -1;
    return dateObjA.getTime() - dateObjB.getTime();
  }
  /**
   * Agrupa tareas por un campo específico
   */
  groupTasks(tasks, groupField) {
    const groupedTasks = /* @__PURE__ */ new Map();
    tasks.forEach((task) => {
      let groupKey = "Unknown";
      switch (groupField) {
        case "status":
          groupKey = task.status || "Unknown";
          break;
        case "priority":
          groupKey = task.priority || "undefined";
          break;
        case "dueDate":
          if (!task.dueDate) {
            groupKey = "No Due Date";
          } else {
            const dueDate = typeof task.dueDate === "string" ? new Date(task.dueDate) : task.dueDate;
            groupKey = dueDate.toISOString().split("T")[0];
          }
          break;
        case "path":
          if (task.filePath) {
            const lastSlashIndex = task.filePath.lastIndexOf("/");
            groupKey = lastSlashIndex > 0 ? task.filePath.substring(0, lastSlashIndex) : "/";
          } else {
            groupKey = "Unknown";
          }
          break;
        case "tags":
          if (!task.tags || task.tags.length === 0) {
            groupKey = "No Tags";
          } else {
            groupKey = task.tags[0];
          }
          break;
      }
      if (!groupedTasks.has(groupKey)) {
        groupedTasks.set(groupKey, []);
      }
      groupedTasks.get(groupKey)?.push(task);
    });
    const result = [];
    groupedTasks.forEach((tasksInGroup, groupKey) => {
      tasksInGroup.forEach((task) => {
        result.push({
          ...task,
          groupLabel: groupKey
          // Esta propiedad no está en ITask, deberías añadirla
        });
      });
    });
    return result;
  }
};

// src/views/table-view.ts
var import_handlebars4 = __toESM(require_handlebars());
var TABLE_VIEW_TYPE = "table-view";
var TableView = class extends BaseView {
  // Dirección de la ordenación
  constructor(leaf, plugin, i18n, taskManager) {
    super(leaf);
    this.plugin = plugin;
    this.i18n = i18n;
    this.taskManager = taskManager;
    __publicField(this, "tasks", []);
    // Lista de tareas
    __publicField(this, "currentSortColumn", "");
    // Columna actualmente ordenada
    __publicField(this, "currentSortDirection", "asc");
    this.i18n = i18n;
  }
  getViewType() {
    return TABLE_VIEW_TYPE;
  }
  getDisplayText() {
    return this.i18n.t("table_view_title");
  }
  getIcon() {
    return "calendar-check";
  }
  async onOpen() {
    this.tasks = await this.getAllTasks(this.taskManager);
    const uniqueFolders = [...new Set(this.tasks.map((task) => task.rootFolder))].sort();
    await this.render(TABLE_VIEW_TYPE, {
      tasks: this.tasks,
      uniqueFolders
    }, this.i18n, this.plugin, this.leaf);
  }
  registerViewSpecificHelpers(i18n) {
    import_handlebars4.default.registerHelper("equals", function(arg1, arg2) {
      return arg1 === arg2;
    });
    import_handlebars4.default.registerHelper("not", function(arg) {
      return !arg;
    });
    import_handlebars4.default.registerHelper("contains", function(arr, value) {
      return Array.isArray(arr) && arr.includes(value);
    });
    import_handlebars4.default.registerHelper("inRange", function(value, min, max) {
      return value >= min && value <= max;
    });
    import_handlebars4.default.registerHelper("dateTypeIcon", function(dateType) {
      return TaskDateType[dateType] || "";
    });
  }
  setupViewSpecificEventListeners(container, data) {
    const sortableHeaders = container.querySelectorAll("th.sortable");
    sortableHeaders.forEach((header) => {
      header.addEventListener("click", () => {
        this.handleColumnSort(header);
      });
    });
    const initialSortHeader = container.querySelector('th[data-sort="priority"]');
    if (initialSortHeader) {
      this.handleColumnSort(initialSortHeader);
      this.handleColumnSort(initialSortHeader);
    }
    const searchInput = container.querySelector("#table-search-input");
    if (searchInput) {
      searchInput.addEventListener("input", () => {
        this.filterTasks(container);
      });
    }
    const filterDropdowns = container.querySelectorAll(".table-filter-dropdown");
    filterDropdowns.forEach((dropdown) => {
      dropdown.addEventListener("change", () => {
        this.filterTasks(container);
      });
    });
    const searchClearButton = container.querySelector("#table-search-clear");
    if (searchInput && searchClearButton) {
      searchInput.addEventListener("input", () => {
        searchClearButton.style.display = searchInput.value ? "block" : "none";
        this.filterTasks(container);
      });
      searchClearButton.addEventListener("click", () => {
        searchInput.value = "";
        searchClearButton.style.display = "none";
        searchInput.focus();
        this.filterTasks(container);
      });
      searchClearButton.style.display = searchInput.value ? "block" : "none";
    }
    const tableRows = container.querySelectorAll("tr.task-row");
    tableRows.forEach((row) => {
      row.addClass("clickable");
      row.addEventListener("dblclick", (event) => {
        const filePath = row.getAttribute("data-file-path");
        const lineNumber = row.getAttribute("data-line-number");
        if (filePath) {
          this.openTaskFile(filePath, lineNumber ? parseInt(lineNumber) : void 0);
        }
      });
    });
    this.filterTasks(container);
  }
  /**
   * Normaliza un texto removiendo acentos y diacríticos
   * Convierte: "ñáéíóúü" → "naeiouu"
   */
  normalizeText(text) {
    return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
  }
  filterTasks(container) {
    const searchInput = container.querySelector("#table-search-input");
    const priorityFilter = container.querySelector("#table-priority-filter");
    const statusFilter = container.querySelector("#table-status-filter");
    const folderFilter = container.querySelector("#table-folder-filter");
    const dueFilter = container.querySelector("#table-due-filter");
    const rawSearchText = searchInput?.value?.trim() || "";
    const normalizedSearchText = this.normalizeText(rawSearchText);
    const priorityValue = priorityFilter?.value || "all";
    const statusValue = statusFilter?.value || "all";
    const folderValue = folderFilter?.value || "all";
    const dueValue = dueFilter?.value || "all";
    const tableRows = container.querySelectorAll("tr.task-row");
    let visibleCount = 0;
    const today = /* @__PURE__ */ new Date();
    today.setHours(0, 0, 0, 0);
    const endOfWeek = new Date(today);
    endOfWeek.setDate(today.getDate() + 7);
    tableRows.forEach((row) => {
      let shouldShow = true;
      if (normalizedSearchText) {
        const taskDescription = row.querySelector(".task-description")?.textContent || "";
        const normalizedDescription = this.normalizeText(taskDescription);
        const taskTags = Array.from(row.querySelectorAll(".task-tag")).map((tag) => tag.textContent || "").join(" ");
        const normalizedTags = this.normalizeText(taskTags);
        if (!normalizedDescription.includes(normalizedSearchText) && !normalizedTags.includes(normalizedSearchText)) {
          shouldShow = false;
        }
      }
      if (shouldShow && priorityValue !== "all") {
        if (priorityValue === "none") {
          const priorityElement = row.querySelector(".task-priority");
          const hasPriority = !priorityElement?.classList.contains("priority-none");
          if (hasPriority) {
            shouldShow = false;
          }
        } else {
          const hasPriority = row.querySelector(`.priority-${priorityValue.toLowerCase()}`);
          if (!hasPriority) {
            shouldShow = false;
          }
        }
      }
      if (shouldShow && statusValue !== "all") {
        const statusIcon = row.querySelector(".status-icon");
        const currentStatus = statusIcon?.getAttribute("data-status") || "";
        if (currentStatus !== statusValue) {
          shouldShow = false;
        }
      }
      if (shouldShow && folderValue !== "all") {
        const folderName = row.querySelector(".folder-name")?.textContent || "";
        if (folderName !== folderValue) {
          shouldShow = false;
        }
      }
      if (shouldShow && dueValue !== "all") {
        const dateElements = row.querySelectorAll(".task-date");
        const hasDateWithContent = Array.from(dateElements).some((el) => {
          const dateText = el.querySelector(".date-text")?.textContent || "";
          return dateText.trim().length > 0;
        });
        if (dueValue === "hasdate") {
          if (!hasDateWithContent) {
            shouldShow = false;
          }
        } else if (dueValue === "nodate") {
          if (hasDateWithContent) {
            shouldShow = false;
          }
        } else {
          const dueDateElement = row.querySelector(".task-date.due-date");
          if (!dueDateElement) {
            shouldShow = false;
          } else {
            const dateText = dueDateElement.querySelector(".date-text")?.textContent || "";
            const dueDate = new Date(dateText);
            if (!isNaN(dueDate.getTime())) {
              switch (dueValue) {
                case "overdue":
                  if (dueDate >= today) {
                    shouldShow = false;
                  }
                  break;
                case "today":
                  const isToday = dueDate.getDate() === today.getDate() && dueDate.getMonth() === today.getMonth() && dueDate.getFullYear() === today.getFullYear();
                  if (!isToday) {
                    shouldShow = false;
                  }
                  break;
                case "thisweek":
                  if (dueDate < today || dueDate > endOfWeek) {
                    shouldShow = false;
                  }
                  break;
                case "future":
                  if (dueDate <= endOfWeek) {
                    shouldShow = false;
                  }
                  break;
              }
            } else {
              shouldShow = false;
            }
          }
        }
      }
      if (shouldShow) {
        row.style.display = "";
        visibleCount++;
      } else {
        row.style.display = "none";
      }
    });
    let rowNumber = 1;
    tableRows.forEach((row) => {
      if (row.style.display !== "none") {
        const rowNumberElement = row.querySelector(".row-number");
        if (rowNumberElement) {
          rowNumberElement.textContent = rowNumber.toString();
          rowNumber++;
        }
      }
    });
    const totalRowCountElement = container.querySelector("#total-row-count");
    if (totalRowCountElement) {
      totalRowCountElement.textContent = `(${visibleCount})`;
    }
    const emptyMessage = container.querySelector(".empty-table-message");
    if (emptyMessage) {
      emptyMessage.style.display = visibleCount === 0 ? "block" : "none";
    }
  }
  handleColumnSort(header) {
    const sortBy = header.dataset.sort;
    if (!sortBy) return;
    if (this.currentSortColumn === sortBy) {
      this.currentSortDirection = this.currentSortDirection === "asc" ? "desc" : "asc";
    } else {
      this.currentSortColumn = sortBy;
      this.currentSortDirection = "asc";
    }
    const container = header.closest(".table-view-container");
    if (!container) return;
    this.updateSortIndicators(container);
    const tableBody = container.querySelector("tbody");
    if (!tableBody) return;
    const rows = Array.from(tableBody.querySelectorAll("tr.task-row"));
    const sortedRows = this.sortRows(rows, sortBy, this.currentSortDirection);
    rows.forEach((row) => row.remove());
    sortedRows.forEach((row) => tableBody.appendChild(row));
    this.filterTasks(container);
  }
  updateSortIndicators(container) {
    const allSortIndicators = container.querySelectorAll(".sort-indicator");
    allSortIndicators.forEach((indicator) => {
      indicator.classList.remove("sort-asc", "sort-desc");
    });
    const activeHeader = container.querySelector(`[data-sort="${this.currentSortColumn}"]`);
    if (activeHeader) {
      const indicator = activeHeader.querySelector(".sort-indicator");
      if (indicator) {
        indicator.classList.add(this.currentSortDirection === "asc" ? "sort-asc" : "sort-desc");
      }
    }
  }
  sortRows(rows, sortBy, direction) {
    return [...rows].sort((a, b) => {
      let valueA;
      let valueB;
      switch (sortBy) {
        case "priority":
          const priorityMap = {
            "highest": 6,
            "high": 5,
            "medium": 4,
            "normal": 3,
            "low": 2,
            "lowest": 1,
            "none": 0
          };
          const priorityClassA = a.querySelector(".task-priority")?.classList.toString() || "";
          const priorityClassB = b.querySelector(".task-priority")?.classList.toString() || "";
          const priorityA = Object.keys(priorityMap).find((p) => priorityClassA.includes(`priority-${p}`)) || "none";
          const priorityB = Object.keys(priorityMap).find((p) => priorityClassB.includes(`priority-${p}`)) || "none";
          valueA = priorityMap[priorityA];
          valueB = priorityMap[priorityB];
          break;
        case "status":
          const statusMap = {
            "Todo": 4,
            "InProgress": 3,
            "Done": 2,
            "Cancelled": 1,
            "nonTask": 0
          };
          const statusA = a.querySelector(".status-icon")?.getAttribute("data-status") || "";
          const statusB = b.querySelector(".status-icon")?.getAttribute("data-status") || "";
          valueA = statusMap[statusA] || 0;
          valueB = statusMap[statusB] || 0;
          break;
        case "description":
          valueA = a.querySelector(".task-description")?.textContent || "";
          valueB = b.querySelector(".task-description")?.textContent || "";
          break;
        case "folder":
          valueA = a.querySelector(".folder-name")?.textContent || "";
          valueB = b.querySelector(".folder-name")?.textContent || "";
          break;
        case "file":
          valueA = a.querySelector(".file-name")?.textContent || "";
          valueB = b.querySelector(".file-name")?.textContent || "";
          break;
        case "due":
          const dueDateElementA = a.querySelector(".task-date.due-date .date-text");
          const dueDateElementB = b.querySelector(".task-date.due-date .date-text");
          if (dueDateElementA) {
            valueA = new Date(dueDateElementA.textContent || "").getTime();
          } else {
            valueA = direction === "asc" ? Number.MAX_SAFE_INTEGER : 0;
          }
          if (dueDateElementB) {
            valueB = new Date(dueDateElementB.textContent || "").getTime();
          } else {
            valueB = direction === "asc" ? Number.MAX_SAFE_INTEGER : 0;
          }
          break;
        case "tags":
          valueA = Array.from(a.querySelectorAll(".task-tag")).map((tag) => tag.textContent).join(",") || "";
          valueB = Array.from(b.querySelectorAll(".task-tag")).map((tag) => tag.textContent).join(",") || "";
          break;
        default:
          valueA = "";
          valueB = "";
      }
      if (typeof valueA === "string" && typeof valueB === "string") {
        return direction === "asc" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);
      } else {
        return direction === "asc" ? valueA - valueB : valueB - valueA;
      }
    });
  }
  async onClose() {
  }
};

// src/core/view-manager.ts
var ViewManager = class {
  constructor(plugin, i18n, taskManager) {
    this.plugin = plugin;
    this.i18n = i18n;
    this.taskManager = taskManager;
    __publicField(this, "registeredViewTypes", []);
  }
  // Método para registrar todas las vistas
  registerViews() {
    this.plugin.registerView(OVERVIEW_VIEW_TYPE, (leaf) => new OverviewView(leaf, this.plugin, this.i18n, this.taskManager));
    this.registeredViewTypes.push(OVERVIEW_VIEW_TYPE);
    this.plugin.registerView(CALENDAR_MONTH_VIEW_TYPE, (leaf) => new CalendarMonthView(leaf, this.plugin, this.i18n, this.taskManager));
    this.registeredViewTypes.push(CALENDAR_MONTH_VIEW_TYPE);
    this.plugin.registerView(CALENDAR_WEEK_VIEW_TYPE, (leaf) => new CalendarWeekView(leaf, this.plugin, this.i18n, this.taskManager));
    this.registeredViewTypes.push(CALENDAR_WEEK_VIEW_TYPE);
    this.plugin.registerView(CALENDAR_WORK_WEEK_VIEW_TYPE, (leaf) => new CalendarWorkWeekView(leaf, this.plugin, this.i18n, this.taskManager));
    this.registeredViewTypes.push(CALENDAR_WORK_WEEK_VIEW_TYPE);
    this.plugin.registerView(CALENDAR_DAY_VIEW_TYPE, (leaf) => new CalendarDayView(leaf, this.plugin, this.i18n, this.taskManager));
    this.registeredViewTypes.push(CALENDAR_DAY_VIEW_TYPE);
    this.plugin.registerView(LIST_VIEW_TYPE, (leaf) => new ListView(leaf, this.plugin, this.i18n, this.taskManager));
    this.registeredViewTypes.push(LIST_VIEW_TYPE);
    this.plugin.registerView(TABLE_VIEW_TYPE, (leaf) => new TableView(leaf, this.plugin, this.i18n, this.taskManager));
    this.registeredViewTypes.push(TABLE_VIEW_TYPE);
  }
  // Método para activar una vista específica
  async activateView(viewType, leaf) {
    this.plugin.app.workspace.detachLeavesOfType(viewType);
    if (!leaf) {
      leaf = this.plugin.app.workspace.getLeaf(true);
    }
    await leaf.setViewState({
      type: viewType,
      active: true
    });
    this.plugin.app.workspace.revealLeaf(leaf);
  }
  unregisterViews() {
    this.registeredViewTypes.forEach((viewType) => {
      this.plugin.app.workspace.detachLeavesOfType(viewType);
    });
  }
};

// src/core/i18n.ts
var I18n = class {
  // Add a property for app
  constructor(app) {
    __publicField(this, "translations", {});
    __publicField(this, "currentLanguage", "en");
    __publicField(this, "app");
    this.app = app;
  }
  async loadLanguage(language) {
    try {
      const templatePath = this.app.vault.adapter.getResourcePath(`.obsidian/plugins/obsidian-agenda/locales/${language}.json`);
      console.log("Ruta generada con getResourcePath:", templatePath);
      const response = await fetch(templatePath);
      if (!response.ok) {
        throw new Error(`Error loading language file: ${response.statusText}`);
      }
      this.translations = await response.json();
      this.currentLanguage = language;
    } catch (error) {
      console.error("Error loading translations:", error);
    }
  }
  t(key, params) {
    const keys = key.split(".");
    let result = this.translations;
    for (const k of keys) {
      if (result && result[k] !== void 0) {
        result = result[k];
      } else {
        console.warn(`Translation key not found: ${key}`);
        return key;
      }
    }
    if (typeof result !== "string") {
      console.warn(`Translation key does not resolve to a string: ${key}`);
      return key;
    }
    let translation = result;
    if (params) {
      for (const [paramKey, paramValue] of Object.entries(params)) {
        translation = translation.replace(new RegExp(`{${paramKey}}`, "g"), String(paramValue));
      }
    }
    return translation;
  }
};

// src/settings/setting-tab.ts
var import_obsidian3 = require("obsidian");
var SettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin, i18n) {
    super(app, plugin);
    this.i18n = i18n;
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName(this.i18n.t("general_settings")).setHeading();
    new import_obsidian3.Setting(containerEl).setName(this.i18n.t("language")).setDesc(this.i18n.t("language_description")).addDropdown(
      (dropdown) => dropdown.addOption("en", this.i18n.t("english")).addOption("es", this.i18n.t("spanish")).addOption("fr", this.i18n.t("french")).addOption("de", this.i18n.t("german")).addOption("it", this.i18n.t("italian")).addOption("pt", this.i18n.t("portuguese")).onChange(async (value) => {
        this.plugin.settings.language = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName(this.i18n.t("colorScheme")).setDesc(this.i18n.t("colorScheme_description")).addDropdown(
      (dropdown) => dropdown.addOption("default", "Default").addOption("dark", "Dark").addOption("light", "Light").onChange(async (value) => {
        this.plugin.settings.colorScheme = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/settings/settings.ts
var DEFAULT_SETTINGS = {
  language: "en",
  colorScheme: "dark"
};

// src/main.ts
var ObsidianAgenda = class extends import_obsidian4.Plugin {
  /// Constructor de la clase ObsidianAgendaPlugin.
  constructor(app, manifest) {
    super(app, manifest);
    __publicField(this, "settings");
    __publicField(this, "viewManager");
    __publicField(this, "i18n");
    __publicField(this, "taskManager");
    this.i18n = new I18n(app);
    this.taskManager = new TaskManager(app, this.i18n, this);
    this.viewManager = new ViewManager(this, this.i18n, this.taskManager);
  }
  /// Método de inicializa del plugin.
  async onload() {
    logger_default.info("Cargando el plugin Obsidian Agenda...");
    const OVERVIEW_VIEW_TYPE2 = "overview-view";
    try {
      await this.loadSettings();
      await this.i18n.loadLanguage(this.settings.language);
      this.addSettingTab(new SettingTab(this.app, this, this.i18n));
      await this.loadStyles();
      this.addRibbonIcon("calendar-check", this.i18n.t("agenda_title"), async () => {
        await this.viewManager.activateView(OVERVIEW_VIEW_TYPE2);
      });
      this.taskManager.registerEvents(this);
      this.viewManager.registerViews();
      logger_default.info("Vistas registradas correctamente.");
    } catch (error) {
      logger_default.error(`Error durante la carga del plugin: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
  * Carga los estilos CSS del plugin
  * @returns Promesa que se resuelve cuando los estilos se han cargado
  */
  async loadStyles() {
    try {
      const cssPath = this.app.vault.adapter.getResourcePath(
        ".obsidian/plugins/obsidian-agenda/styles/styles.css"
      );
      const response = await fetch(cssPath);
      if (response.ok) {
        const cssContent = await response.text();
        const style = document.createElement("style");
        style.textContent = cssContent;
        document.head.appendChild(style);
        logger_default.info("Archivo CSS cargado correctamente.");
      } else {
        logger_default.error("Error al cargar el archivo CSS:", response.statusText);
      }
    } catch (error) {
      logger_default.error(`Error al cargar estilos CSS: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
  onunload() {
    console.log("Descargando plugin Obsidian Agenda");
    try {
      if (this.viewManager) {
        this.viewManager.unregisterViews();
        logger_default.info("Vistas desregistradas correctamente");
      }
      if (this.taskManager) {
        this.taskManager.unregisterEvents();
        logger_default.info("Eventos desregistrados correctamente");
      }
      document.querySelectorAll('style[data-plugin="obsidian-agenda"]').forEach((element) => {
        element.remove();
      });
      logger_default.info("Limpieza completada, plugin desactivado con \xE9xito");
    } catch (error) {
      logger_default.error(`Error durante la descarga del plugin: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvdXRpbHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvZXhjZXB0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9lYWNoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9pZi5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2xvZy5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2xvb2t1cC5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL3dpdGguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9kZWNvcmF0b3JzL2lubGluZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9kZWNvcmF0b3JzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9pbnRlcm5hbC9jcmVhdGUtbmV3LWxvb2t1cC1vYmplY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaW50ZXJuYWwvcHJvdG8tYWNjZXNzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaW50ZXJuYWwvd3JhcEhlbHBlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9ydW50aW1lLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL3BhcnNlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci92aXNpdG9yLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL3doaXRlc3BhY2UtY29udHJvbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9oZWxwZXJzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2Jhc2UuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvY29tcGlsZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2Jhc2U2NC5qcyIsICIuLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LXZscS5qcyIsICIuLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvdXRpbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYXJyYXktc2V0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9tYXBwaW5nLWxpc3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iaW5hcnktc2VhcmNoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9xdWljay1zb3J0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLWNvbnN1bWVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2Utbm9kZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9zb3VyY2UtbWFwLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvZGUtZ2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2phdmFzY3JpcHQtY29tcGlsZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9mb3JtYXQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bjb2xvcnMvY29sb3JzL2xpYi9zdHlsZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bjb2xvcnMvY29sb3JzL2xpYi9zeXN0ZW0vaGFzLWZsYWcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bjb2xvcnMvY29sb3JzL2xpYi9zeXN0ZW0vc3VwcG9ydHMtY29sb3JzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AY29sb3JzL2NvbG9ycy9saWIvY3VzdG9tL3RyYXAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bjb2xvcnMvY29sb3JzL2xpYi9jdXN0b20vemFsZ28uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bjb2xvcnMvY29sb3JzL2xpYi9tYXBzL2FtZXJpY2EuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bjb2xvcnMvY29sb3JzL2xpYi9tYXBzL3plYnJhLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AY29sb3JzL2NvbG9ycy9saWIvbWFwcy9yYWluYm93LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9AY29sb3JzL2NvbG9ycy9saWIvbWFwcy9yYW5kb20uanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bjb2xvcnMvY29sb3JzL2xpYi9jb2xvcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Bjb2xvcnMvY29sb3JzL3NhZmUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3RyaXBsZS1iZWFtL2NvbmZpZy9jbGkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3RyaXBsZS1iZWFtL2NvbmZpZy9ucG0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3RyaXBsZS1iZWFtL2NvbmZpZy9zeXNsb2cuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3RyaXBsZS1iZWFtL2NvbmZpZy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHJpcGxlLWJlYW0vaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9jb2xvcml6ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L2xldmVscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L2FsaWduLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvcGFkLWxldmVscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L2NsaS5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L2NvbWJpbmUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9lcnJvcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3NhZmUtc3RhYmxlLXN0cmluZ2lmeS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L2pzb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9sYWJlbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L2xvZ3N0YXNoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvbWV0YWRhdGEuanMiLCAiLi4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvbXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9wcmV0dHktcHJpbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9wcmludGYuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9zaW1wbGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xvZ2Zvcm0vZGlzdC9zcGxhdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvZmVjaGEvc3JjL2ZlY2hhLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvdGltZXN0YW1wLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Rpc3QvdW5jb2xvcml6ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9kaXN0L2Jyb3dzZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2NvbW1vbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9wYWNrYWdlLmpzb24iLCAiLi4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9lcnJvcnMtYnJvd3Nlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvYnVmZmVyX2xpc3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9lbmQtb2Ytc3RyZWFtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvYXN5bmNfaXRlcmF0b3IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9mcm9tLWJyb3dzZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9kaXN0L21vZGVybi5qcyIsICIuLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvZGlzdC9sZWdhY3kuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24tdHJhbnNwb3J0L2Rpc3QvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL3RyYW5zcG9ydHMvY29uc29sZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvaXNBcnJheUxpa2UuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL2luaXRpYWxQYXJhbXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL3NldEltbWVkaWF0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmMvYXN5bmNpZnkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL3dyYXBBc3luYy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvYXdhaXRpZnkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL3BhcmFsbGVsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC9vbmNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC9nZXRJdGVyYXRvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmMvaW50ZXJuYWwvaXRlcmF0b3IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL29ubHlPbmNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC9icmVha0xvb3AuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL2FzeW5jRWFjaE9mTGltaXQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5jL2ludGVybmFsL2VhY2hPZkxpbWl0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luYy9lYWNoT2ZMaW1pdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmMvZWFjaE9mU2VyaWVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luYy9zZXJpZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3BpcGVsaW5lLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRhYmgvZGlhZ25vc3RpY3MvZGlhZ25vc3RpY3MuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NvbG9yLW5hbWUvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1zd2l6emxlL25vZGVfbW9kdWxlcy9pcy1hcnJheWlzaC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLXN3aXp6bGUvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NvbG9yLXN0cmluZy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2NvbG9yLW5hbWUvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NvbG9yL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2NvbnZlcnNpb25zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jb2xvci9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9yb3V0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NvbG9yL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy90ZXh0LWhleC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvY29sb3JzcGFjZS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRhYmgvZGlhZ25vc3RpY3MvbW9kaWZpZXJzL25hbWVzcGFjZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvZW5hYmxlZC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRhYmgvZGlhZ25vc3RpY3MvYWRhcHRlcnMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkYWJoL2RpYWdub3N0aWNzL2FkYXB0ZXJzL2xvY2Fsc3RvcmFnZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRhYmgvZGlhZ25vc3RpY3MvYWRhcHRlcnMvaGFzaC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQGRhYmgvZGlhZ25vc3RpY3MvbG9nZ2VyL2NvbnNvbGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkYWJoL2RpYWdub3N0aWNzL2Jyb3dzZXIvZGV2ZWxvcG1lbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BkYWJoL2RpYWdub3N0aWNzL2Jyb3dzZXIvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL3RhaWwtZmlsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24vdHJhbnNwb3J0cy9maWxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy93aW5zdG9uL2Rpc3Qvd2luc3Rvbi90cmFuc3BvcnRzL2h0dHAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2lzLXN0cmVhbS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24vdHJhbnNwb3J0cy9zdHJlYW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL3RyYW5zcG9ydHMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2NvbmZpZy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmMvZWFjaE9mLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luYy9pbnRlcm5hbC93aXRob3V0SW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5jL2ZvckVhY2guanMiLCAiLi4vbm9kZV9tb2R1bGVzL2ZuLm5hbWUvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL29uZS10aW1lL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zdGFjay10cmFjZS9saWIvc3RhY2stdHJhY2UuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2V4Y2VwdGlvbi1zdHJlYW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2V4Y2VwdGlvbi1oYW5kbGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy93aW5zdG9uL2Rpc3Qvd2luc3Rvbi9yZWplY3Rpb24tc3RyZWFtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy93aW5zdG9uL2Rpc3Qvd2luc3Rvbi9yZWplY3Rpb24taGFuZGxlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvbW9kZXJuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9sZWdhY3kuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL3Byb2ZpbGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sb2dmb3JtL2Zvcm1hdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvbG9nZm9ybS9qc29uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy93aW5zdG9uL2Rpc3Qvd2luc3Rvbi9sb2dnZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2NyZWF0ZS1sb2dnZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24vZGlzdC93aW5zdG9uL2NvbnRhaW5lci5qcyIsICIuLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9kaXN0L3dpbnN0b24uanMiLCAiLi4vc3JjL21haW4udHMiLCAiLi4vc3JjL3ZpZXdzL2Jhc2Utdmlldy50cyIsICIuLi9ub2RlX21vZHVsZXMvbHV4b24vc3JjL2Vycm9ycy5qcyIsICIuLi9ub2RlX21vZHVsZXMvbHV4b24vc3JjL2ltcGwvZm9ybWF0cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvbHV4b24vc3JjL3pvbmUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2x1eG9uL3NyYy96b25lcy9zeXN0ZW1ab25lLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sdXhvbi9zcmMvem9uZXMvSUFOQVpvbmUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbXBsL2xvY2FsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvbHV4b24vc3JjL3pvbmVzL2ZpeGVkT2Zmc2V0Wm9uZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvbHV4b24vc3JjL3pvbmVzL2ludmFsaWRab25lLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC96b25lVXRpbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvbHV4b24vc3JjL2ltcGwvZGlnaXRzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sdXhvbi9zcmMvc2V0dGluZ3MuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbXBsL2ludmFsaWQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbXBsL2NvbnZlcnNpb25zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC91dGlsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC9lbmdsaXNoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC9mb3JtYXR0ZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbXBsL3JlZ2V4UGFyc2VyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sdXhvbi9zcmMvZHVyYXRpb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbnRlcnZhbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvbHV4b24vc3JjL2luZm8uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbXBsL2RpZmYuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbXBsL3Rva2VuUGFyc2VyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9sdXhvbi9zcmMvZGF0ZXRpbWUuanMiLCAiLi4vc3JjL3R5cGVzL2VudW1zLnRzIiwgIi4uL3NyYy92aWV3cy9vdmVydmlldy12aWV3LnRzIiwgIi4uL3NyYy92aWV3cy9jYWxlbmRhci12aWV3LnRzIiwgIi4uL3NyYy92aWV3cy9jYWxlbmRhci1tb250aC12aWV3LnRzIiwgIi4uL3NyYy92aWV3cy9jYWxlbmRhci13ZWVrLXZpZXcudHMiLCAiLi4vc3JjL3ZpZXdzL2NhbGVuZGFyLWRheS12aWV3LnRzIiwgIi4uL3NyYy92aWV3cy9jYWxlbmRhci13b3Jrd2Vlay12aWV3LnRzIiwgIi4uL3NyYy92aWV3cy9saXN0LXZpZXcudHMiLCAiLi4vc3JjL2NvcmUvdGFzay1tYW5hZ2VyLnRzIiwgIi4uL3NyYy9jb3JlL2xvZ2dlci50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL3dlZWtkYXkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3JydWxlL3NyYy9oZWxwZXJzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvZGF0ZXV0aWwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3JydWxlL3NyYy9pdGVycmVzdWx0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvY2FsbGJhY2tpdGVycmVzdWx0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvbmxwL2kxOG4udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3JydWxlL3NyYy9ubHAvdG90ZXh0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvbmxwL3BhcnNldGV4dC50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL3R5cGVzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvbmxwL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvZGF0ZXRpbWUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3JydWxlL3NyYy9wYXJzZW9wdGlvbnMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3JydWxlL3NyYy9wYXJzZXN0cmluZy50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2RhdGV3aXRoem9uZS50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL29wdGlvbnN0b3N0cmluZy50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2NhY2hlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvbWFza3MudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3JydWxlL3NyYy9pdGVyaW5mby95ZWFyaW5mby50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXJpbmZvL21vbnRoaW5mby50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXJpbmZvL2Vhc3Rlci50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXJpbmZvL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaXRlci9wb3NsaXN0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaXRlci9pbmRleC50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL3JydWxlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaXRlcnNldC50cyIsICIuLi9ub2RlX21vZHVsZXMvcnJ1bGUvc3JjL3JydWxlc3RyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9ycnVsZS9zcmMvcnJ1bGVzZXQudHMiLCAiLi4vc3JjL2VudGl0aWVzL3Rhc2stc2VjdGlvbi50cyIsICIuLi9zcmMvZW50aXRpZXMvdGFzay50cyIsICIuLi9zcmMvY29yZS9ldmVudC1idXMudHMiLCAiLi4vc3JjL3ZpZXdzL3RhYmxlLXZpZXcudHMiLCAiLi4vc3JjL2NvcmUvdmlldy1tYW5hZ2VyLnRzIiwgIi4uL3NyYy9jb3JlL2kxOG4udHMiLCAiLi4vc3JjL3NldHRpbmdzL3NldHRpbmctdGFiLnRzIiwgIi4uL3NyYy9zZXR0aW5ncy9zZXR0aW5ncy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgZXNjYXBlID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgJ2AnOiAnJiN4NjA7JyxcbiAgJz0nOiAnJiN4M0Q7J1xufTtcblxuY29uc3QgYmFkQ2hhcnMgPSAvWyY8PlwiJ2A9XS9nLFxuICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGVzY2FwZVtjaHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iaiAvKiAsIC4uLnNvdXJjZSAqLykge1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGtleSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2ldLCBrZXkpKSB7XG4gICAgICAgIG9ialtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGxldCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIFNvdXJjZWQgZnJvbSBsb2Rhc2hcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcbi8qIGVzbGludC1kaXNhYmxlIGZ1bmMtc3R5bGUgKi9cbmxldCBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn07XG4vLyBmYWxsYmFjayBmb3Igb2xkZXIgdmVyc2lvbnMgb2YgQ2hyb21lIGFuZCBTYWZhcmlcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaXNGdW5jdGlvbigveC8pKSB7XG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAoXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICAgKTtcbiAgfTtcbn1cbmV4cG9ydCB7IGlzRnVuY3Rpb24gfTtcbi8qIGVzbGludC1lbmFibGUgZnVuYy1zdHlsZSAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPVxuICBBcnJheS5pc0FycmF5IHx8XG4gIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbiAgICAgID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUV4cHJlc3Npb24oc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGVzY2FwZSBTYWZlU3RyaW5ncywgc2luY2UgdGhleSdyZSBhbHJlYWR5IHNhZmVcbiAgICBpZiAoc3RyaW5nICYmIHN0cmluZy50b0hUTUwpIHtcbiAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XG4gICAgfSBlbHNlIGlmIChzdHJpbmcgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyArICcnO1xuICAgIH1cblxuICAgIC8vIEZvcmNlIGEgc3RyaW5nIGNvbnZlcnNpb24gYXMgdGhpcyB3aWxsIGJlIGRvbmUgYnkgdGhlIGFwcGVuZCByZWdhcmRsZXNzIGFuZFxuICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxuICAgIC8vIGFuIG9iamVjdCdzIHRvIHN0cmluZyBoYXMgZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGl0LlxuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICB9XG5cbiAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICBsZXQgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuIiwgImNvbnN0IGVycm9yUHJvcHMgPSBbXG4gICdkZXNjcmlwdGlvbicsXG4gICdmaWxlTmFtZScsXG4gICdsaW5lTnVtYmVyJyxcbiAgJ2VuZExpbmVOdW1iZXInLFxuICAnbWVzc2FnZScsXG4gICduYW1lJyxcbiAgJ251bWJlcicsXG4gICdzdGFjaydcbl07XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgIGxpbmUsXG4gICAgZW5kTGluZU51bWJlcixcbiAgICBjb2x1bW4sXG4gICAgZW5kQ29sdW1uO1xuXG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgZW5kTGluZU51bWJlciA9IGxvYy5lbmQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuICAgIGVuZENvbHVtbiA9IGxvYy5lbmQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcbiAgICAgIHRoaXMuZW5kTGluZU51bWJlciA9IGVuZExpbmVOdW1iZXI7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VuZENvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogZW5kQ29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgdGhpcy5lbmRDb2x1bW4gPSBlbmRDb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG4iLCAiaW1wb3J0IHsgYXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignYmxvY2tIZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgIGxldCBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKGNvbnRleHQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmbih0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICBpZiAoY29udGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmlkcykge1xuICAgICAgICAgIG9wdGlvbnMuaWRzID0gW29wdGlvbnMubmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVycy5lYWNoKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgbGV0IGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgoXG4gICAgICAgICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLFxuICAgICAgICAgIG9wdGlvbnMubmFtZVxuICAgICAgICApO1xuICAgICAgICBvcHRpb25zID0geyBkYXRhOiBkYXRhIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0pO1xufVxuIiwgImltcG9ydCB7XG4gIGFwcGVuZENvbnRleHRQYXRoLFxuICBibG9ja1BhcmFtcyxcbiAgY3JlYXRlRnJhbWUsXG4gIGlzQXJyYXksXG4gIGlzRnVuY3Rpb25cbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgaSA9IDAsXG4gICAgICByZXQgPSAnJyxcbiAgICAgIGRhdGEsXG4gICAgICBjb250ZXh0UGF0aDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID1cbiAgICAgICAgYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID1cbiAgICAgICAgcmV0ICtcbiAgICAgICAgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhcbiAgICAgICAgICAgIFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLFxuICAgICAgICAgICAgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdXG4gICAgICAgICAgKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBjb250ZXh0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIGlmIChpIGluIGNvbnRleHQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBjb250ZXh0W1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IFtdO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IGNvbnRleHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKGxldCBpdCA9IGl0ZXJhdG9yLm5leHQoKTsgIWl0LmRvbmU7IGl0ID0gaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgICAgICAgbmV3Q29udGV4dC5wdXNoKGl0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gbmV3Q29udGV4dDtcbiAgICAgICAgZm9yIChsZXQgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoY29udGV4dCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iLCAiaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaGVscGVyTWlzc2luZycsIGZ1bmN0aW9uKC8qIFthcmdzLCBdb3B0aW9ucyAqLykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyBBIG1pc3NpbmcgZmllbGQgaW4gYSB7e2Zvb319IGNvbnN0cnVjdC5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNvbWVvbmUgaXMgYWN0dWFsbHkgdHJ5aW5nIHRvIGNhbGwgc29tZXRoaW5nLCBibG93IHVwLlxuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcbiAgICAgICAgJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgaXNFbXB0eSwgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjaWYgcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7XG4gICAgICBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgLy8gYmVoYXZpb3Igb2YgaXNFbXB0eS4gRWZmZWN0aXZlbHkgdGhpcyBkZXRlcm1pbmVzIGlmIDAgaXMgaGFuZGxlZCBieSB0aGUgcG9zaXRpdmUgcGF0aCBvciBuZWdhdGl2ZS5cbiAgICBpZiAoKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsKSB8fCBpc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjdW5sZXNzIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHtcbiAgICAgIGZuOiBvcHRpb25zLmludmVyc2UsXG4gICAgICBpbnZlcnNlOiBvcHRpb25zLmZuLFxuICAgICAgaGFzaDogb3B0aW9ucy5oYXNoXG4gICAgfSk7XG4gIH0pO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb2cnLCBmdW5jdGlvbigvKiBtZXNzYWdlLCBvcHRpb25zICovKSB7XG4gICAgbGV0IGFyZ3MgPSBbdW5kZWZpbmVkXSxcbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgbGV0IGxldmVsID0gMTtcbiAgICBpZiAob3B0aW9ucy5oYXNoLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuZGF0YS5sZXZlbDtcbiAgICB9XG4gICAgYXJnc1swXSA9IGxldmVsO1xuXG4gICAgaW5zdGFuY2UubG9nKC4uLmFyZ3MpO1xuICB9KTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24ob2JqLCBmaWVsZCwgb3B0aW9ucykge1xuICAgIGlmICghb2JqKSB7XG4gICAgICAvLyBOb3RlIGZvciA1LjA6IENoYW5nZSB0byBcIm9iaiA9PSBudWxsXCIgaW4gNS4wXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucy5sb29rdXBQcm9wZXJ0eShvYmosIGZpZWxkKTtcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHtcbiAgYXBwZW5kQ29udGV4dFBhdGgsXG4gIGJsb2NrUGFyYW1zLFxuICBjcmVhdGVGcmFtZSxcbiAgaXNFbXB0eSxcbiAgaXNGdW5jdGlvblxufSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDIpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJyN3aXRoIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICBpZiAoIWlzRW1wdHkoY29udGV4dCkpIHtcbiAgICAgIGxldCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCxcbiAgICAgICAgICBvcHRpb25zLmlkc1swXVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMoW2NvbnRleHRdLCBbZGF0YSAmJiBkYXRhLmNvbnRleHRQYXRoXSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG59XG4iLCAiaW1wb3J0IHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJFYWNoIGZyb20gJy4vaGVscGVycy9lYWNoJztcbmltcG9ydCByZWdpc3RlckhlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2hlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlcklmIGZyb20gJy4vaGVscGVycy9pZic7XG5pbXBvcnQgcmVnaXN0ZXJMb2cgZnJvbSAnLi9oZWxwZXJzL2xvZyc7XG5pbXBvcnQgcmVnaXN0ZXJMb29rdXAgZnJvbSAnLi9oZWxwZXJzL2xvb2t1cCc7XG5pbXBvcnQgcmVnaXN0ZXJXaXRoIGZyb20gJy4vaGVscGVycy93aXRoJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlckVhY2goaW5zdGFuY2UpO1xuICByZWdpc3RlckhlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlcklmKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb2coaW5zdGFuY2UpO1xuICByZWdpc3Rlckxvb2t1cChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyV2l0aChpbnN0YW5jZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlSGVscGVyVG9Ib29rcyhpbnN0YW5jZSwgaGVscGVyTmFtZSwga2VlcEhlbHBlcikge1xuICBpZiAoaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXSkge1xuICAgIGluc3RhbmNlLmhvb2tzW2hlbHBlck5hbWVdID0gaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXTtcbiAgICBpZiAoIWtlZXBIZWxwZXIpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IHJldCA9IGZuO1xuICAgIGlmICghcHJvcHMucGFydGlhbHMpIHtcbiAgICAgIHByb3BzLnBhcnRpYWxzID0ge307XG4gICAgICByZXQgPSBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwYXJ0aWFscyBzdGFjayBmcmFtZSBwcmlvciB0byBleGVjLlxuICAgICAgICBsZXQgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgbGV0IHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiIsICJpbXBvcnQgcmVnaXN0ZXJJbmxpbmUgZnJvbSAnLi9kZWNvcmF0b3JzL2lubGluZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVySW5saW5lKGluc3RhbmNlKTtcbn1cbiIsICJpbXBvcnQgeyBpbmRleE9mIH0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWxcbiAgICApIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBpZiAoIWNvbnNvbGVbbWV0aG9kXSkge1xuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iLCAiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCBcIm51bGxcIi1wcm90b3R5cGUgdG8gYXZvaWQgdHJ1dGh5IHJlc3VsdHMgb24gcHJvdG90eXBlIHByb3BlcnRpZXMuXG4gKiBUaGUgcmVzdWx0aW5nIG9iamVjdCBjYW4gYmUgdXNlZCB3aXRoIFwib2JqZWN0W3Byb3BlcnR5XVwiIHRvIGNoZWNrIGlmIGEgcHJvcGVydHkgZXhpc3RzXG4gKiBAcGFyYW0gey4uLm9iamVjdH0gc291cmNlcyBhIHZhcmFyZ3MgcGFyYW1ldGVyIG9mIHNvdXJjZSBvYmplY3RzIHRoYXQgd2lsbCBiZSBtZXJnZWRcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdMb29rdXBPYmplY3QoLi4uc291cmNlcykge1xuICByZXR1cm4gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIC4uLnNvdXJjZXMpO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZU5ld0xvb2t1cE9iamVjdCB9IGZyb20gJy4vY3JlYXRlLW5ldy1sb29rdXAtb2JqZWN0JztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuY29uc3QgbG9nZ2VkUHJvcGVydGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm90b0FjY2Vzc0NvbnRyb2wocnVudGltZU9wdGlvbnMpIHtcbiAgbGV0IGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0Wydjb25zdHJ1Y3RvciddID0gZmFsc2U7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ19fZGVmaW5lR2V0dGVyX18nXSA9IGZhbHNlO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0WydfX2RlZmluZVNldHRlcl9fJ10gPSBmYWxzZTtcbiAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdFsnX19sb29rdXBHZXR0ZXJfXyddID0gZmFsc2U7XG5cbiAgbGV0IGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICBkZWZhdWx0UHJvcGVydHlXaGl0ZUxpc3RbJ19fcHJvdG9fXyddID0gZmFsc2U7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IGNyZWF0ZU5ld0xvb2t1cE9iamVjdChcbiAgICAgICAgZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0LFxuICAgICAgICBydW50aW1lT3B0aW9ucy5hbGxvd2VkUHJvdG9Qcm9wZXJ0aWVzXG4gICAgICApLFxuICAgICAgZGVmYXVsdFZhbHVlOiBydW50aW1lT3B0aW9ucy5hbGxvd1Byb3RvUHJvcGVydGllc0J5RGVmYXVsdFxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgd2hpdGVsaXN0OiBjcmVhdGVOZXdMb29rdXBPYmplY3QoXG4gICAgICAgIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QsXG4gICAgICAgIHJ1bnRpbWVPcHRpb25zLmFsbG93ZWRQcm90b01ldGhvZHNcbiAgICAgICksXG4gICAgICBkZWZhdWx0VmFsdWU6IHJ1bnRpbWVPcHRpb25zLmFsbG93UHJvdG9NZXRob2RzQnlEZWZhdWx0XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzdWx0SXNBbGxvd2VkKHJlc3VsdCwgcHJvdG9BY2Nlc3NDb250cm9sLCBwcm9wZXJ0eU5hbWUpIHtcbiAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sLm1ldGhvZHMsIHByb3BlcnR5TmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbC5wcm9wZXJ0aWVzLCBwcm9wZXJ0eU5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUsIHByb3BlcnR5TmFtZSkge1xuICBpZiAocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS53aGl0ZWxpc3RbcHJvcGVydHlOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUud2hpdGVsaXN0W3Byb3BlcnR5TmFtZV0gPT09IHRydWU7XG4gIH1cbiAgaWYgKHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS5kZWZhdWx0VmFsdWU7XG4gIH1cbiAgbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSkge1xuICBpZiAobG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdICE9PSB0cnVlKSB7XG4gICAgbG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdID0gdHJ1ZTtcbiAgICBsb2dnZXIubG9nKFxuICAgICAgJ2Vycm9yJyxcbiAgICAgIGBIYW5kbGViYXJzOiBBY2Nlc3MgaGFzIGJlZW4gZGVuaWVkIHRvIHJlc29sdmUgdGhlIHByb3BlcnR5IFwiJHtwcm9wZXJ0eU5hbWV9XCIgYmVjYXVzZSBpdCBpcyBub3QgYW4gXCJvd24gcHJvcGVydHlcIiBvZiBpdHMgcGFyZW50LlxcbmAgK1xuICAgICAgICBgWW91IGNhbiBhZGQgYSBydW50aW1lIG9wdGlvbiB0byBkaXNhYmxlIHRoZSBjaGVjayBvciB0aGlzIHdhcm5pbmc6XFxuYCArXG4gICAgICAgIGBTZWUgaHR0cHM6Ly9oYW5kbGViYXJzanMuY29tL2FwaS1yZWZlcmVuY2UvcnVudGltZS1vcHRpb25zLmh0bWwjb3B0aW9ucy10by1jb250cm9sLXByb3RvdHlwZS1hY2Nlc3MgZm9yIGRldGFpbHNgXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRMb2dnZWRQcm9wZXJ0aWVzKCkge1xuICBPYmplY3Qua2V5cyhsb2dnZWRQcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XG4gICAgZGVsZXRlIGxvZ2dlZFByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgY3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmcgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9leGNlcHRpb24nO1xuaW1wb3J0IHsgcmVnaXN0ZXJEZWZhdWx0SGVscGVycyB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzIH0gZnJvbSAnLi9kZWNvcmF0b3JzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgcmVzZXRMb2dnZWRQcm9wZXJ0aWVzIH0gZnJvbSAnLi9pbnRlcm5hbC9wcm90by1hY2Nlc3MnO1xuXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9ICc0LjcuOCc7XG5leHBvcnQgY29uc3QgQ09NUElMRVJfUkVWSVNJT04gPSA4O1xuZXhwb3J0IGNvbnN0IExBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTiA9IDc7XG5cbmV4cG9ydCBjb25zdCBSRVZJU0lPTl9DSEFOR0VTID0ge1xuICAxOiAnPD0gMS4wLnJjLjInLCAvLyAxLjAucmMuMiBpcyBhY3R1YWxseSByZXYyIGJ1dCBkb2Vzbid0IHJlcG9ydCBpdFxuICAyOiAnPT0gMS4wLjAtcmMuMycsXG4gIDM6ICc9PSAxLjAuMC1yYy40JyxcbiAgNDogJz09IDEueC54JyxcbiAgNTogJz09IDIuMC4wLWFscGhhLngnLFxuICA2OiAnPj0gMi4wLjAtYmV0YS4xJyxcbiAgNzogJz49IDQuMC4wIDw0LjMuMCcsXG4gIDg6ICc+PSA0LjMuMCdcbn07XG5cbmNvbnN0IG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuZXhwb3J0IGZ1bmN0aW9uIEhhbmRsZWJhcnNFbnZpcm9ubWVudChoZWxwZXJzLCBwYXJ0aWFscywgZGVjb3JhdG9ycykge1xuICB0aGlzLmhlbHBlcnMgPSBoZWxwZXJzIHx8IHt9O1xuICB0aGlzLnBhcnRpYWxzID0gcGFydGlhbHMgfHwge307XG4gIHRoaXMuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnMgfHwge307XG5cbiAgcmVnaXN0ZXJEZWZhdWx0SGVscGVycyh0aGlzKTtcbiAgcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyh0aGlzKTtcbn1cblxuSGFuZGxlYmFyc0Vudmlyb25tZW50LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEhhbmRsZWJhcnNFbnZpcm9ubWVudCxcblxuICBsb2dnZXI6IGxvZ2dlcixcbiAgbG9nOiBsb2dnZXIubG9nLFxuXG4gIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7XG4gICAgICB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICAgYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLnBhcnRpYWxzW25hbWVdID0gcGFydGlhbDtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMucGFydGlhbHNbbmFtZV07XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGRlY29yYXRvcnMnKTtcbiAgICAgIH1cbiAgICAgIGV4dGVuZCh0aGlzLmRlY29yYXRvcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY29yYXRvcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5kZWNvcmF0b3JzW25hbWVdO1xuICB9LFxuICAvKipcbiAgICogUmVzZXQgdGhlIG1lbW9yeSBvZiBpbGxlZ2FsIHByb3BlcnR5IGFjY2Vzc2VzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gbG9nZ2VkLlxuICAgKiBAZGVwcmVjYXRlZCBzaG91bGQgb25seSBiZSB1c2VkIGluIGhhbmRsZWJhcnMgdGVzdC1jYXNlc1xuICAgKi9cbiAgcmVzZXRMb2dnZWRQcm9wZXJ0eUFjY2Vzc2VzKCkge1xuICAgIHJlc2V0TG9nZ2VkUHJvcGVydGllcygpO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IGxvZyA9IGxvZ2dlci5sb2c7XG5cbmV4cG9ydCB7IGNyZWF0ZUZyYW1lLCBsb2dnZXIgfTtcbiIsICIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiIsICJleHBvcnQgZnVuY3Rpb24gd3JhcEhlbHBlcihoZWxwZXIsIHRyYW5zZm9ybU9wdGlvbnNGbikge1xuICBpZiAodHlwZW9mIGhlbHBlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBoYXBwZW4sIGJ1dCBhcHBhcmVudGx5IGl0IGRvZXMgaW4gaHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9oYW5kbGViYXJzLmpzL2lzc3Vlcy8xNjM5XG4gICAgLy8gV2UgdHJ5IHRvIG1ha2UgdGhlIHdyYXBwZXIgbGVhc3QtaW52YXNpdmUgYnkgbm90IHdyYXBwaW5nIGl0LCBpZiB0aGUgaGVscGVyIGlzIG5vdCBhIGZ1bmN0aW9uLlxuICAgIHJldHVybiBoZWxwZXI7XG4gIH1cbiAgbGV0IHdyYXBwZXIgPSBmdW5jdGlvbigvKiBkeW5hbWljIGFyZ3VtZW50cyAqLykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0gPSB0cmFuc2Zvcm1PcHRpb25zRm4ob3B0aW9ucyk7XG4gICAgcmV0dXJuIGhlbHBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICByZXR1cm4gd3JhcHBlcjtcbn1cbiIsICJpbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9leGNlcHRpb24nO1xuaW1wb3J0IHtcbiAgQ09NUElMRVJfUkVWSVNJT04sXG4gIGNyZWF0ZUZyYW1lLFxuICBMQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT04sXG4gIFJFVklTSU9OX0NIQU5HRVNcbn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IG1vdmVIZWxwZXJUb0hvb2tzIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IHdyYXBIZWxwZXIgfSBmcm9tICcuL2ludGVybmFsL3dyYXBIZWxwZXInO1xuaW1wb3J0IHtcbiAgY3JlYXRlUHJvdG9BY2Nlc3NDb250cm9sLFxuICByZXN1bHRJc0FsbG93ZWRcbn0gZnJvbSAnLi9pbnRlcm5hbC9wcm90by1hY2Nlc3MnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZXZpc2lvbihjb21waWxlckluZm8pIHtcbiAgY29uc3QgY29tcGlsZXJSZXZpc2lvbiA9IChjb21waWxlckluZm8gJiYgY29tcGlsZXJJbmZvWzBdKSB8fCAxLFxuICAgIGN1cnJlbnRSZXZpc2lvbiA9IENPTVBJTEVSX1JFVklTSU9OO1xuXG4gIGlmIChcbiAgICBjb21waWxlclJldmlzaW9uID49IExBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTiAmJlxuICAgIGNvbXBpbGVyUmV2aXNpb24gPD0gQ09NUElMRVJfUkVWSVNJT05cbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBMQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT04pIHtcbiAgICBjb25zdCBydW50aW1lVmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW2N1cnJlbnRSZXZpc2lvbl0sXG4gICAgICBjb21waWxlclZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tjb21waWxlclJldmlzaW9uXTtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGFuIG9sZGVyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgK1xuICAgICAgICAnUGxlYXNlIHVwZGF0ZSB5b3VyIHByZWNvbXBpbGVyIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArXG4gICAgICAgIHJ1bnRpbWVWZXJzaW9ucyArXG4gICAgICAgICcpIG9yIGRvd25ncmFkZSB5b3VyIHJ1bnRpbWUgdG8gYW4gb2xkZXIgdmVyc2lvbiAoJyArXG4gICAgICAgIGNvbXBpbGVyVmVyc2lvbnMgK1xuICAgICAgICAnKS4nXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBVc2UgdGhlIGVtYmVkZGVkIHZlcnNpb24gaW5mbyBzaW5jZSB0aGUgcnVudGltZSBkb2Vzbid0IGtub3cgYWJvdXQgdGhpcyByZXZpc2lvbiB5ZXRcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGEgbmV3ZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArXG4gICAgICAgICdQbGVhc2UgdXBkYXRlIHlvdXIgcnVudGltZSB0byBhIG5ld2VyIHZlcnNpb24gKCcgK1xuICAgICAgICBjb21waWxlckluZm9bMV0gK1xuICAgICAgICAnKS4nXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGUodGVtcGxhdGVTcGVjLCBlbnYpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFlbnYpIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdObyBlbnZpcm9ubWVudCBwYXNzZWQgdG8gdGVtcGxhdGUnKTtcbiAgfVxuICBpZiAoIXRlbXBsYXRlU3BlYyB8fCAhdGVtcGxhdGVTcGVjLm1haW4pIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHRlbXBsYXRlIG9iamVjdDogJyArIHR5cGVvZiB0ZW1wbGF0ZVNwZWMpO1xuICB9XG5cbiAgdGVtcGxhdGVTcGVjLm1haW4uZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjLm1haW5fZDtcblxuICAvLyBOb3RlOiBVc2luZyBlbnYuVk0gcmVmZXJlbmNlcyByYXRoZXIgdGhhbiBsb2NhbCB2YXIgcmVmZXJlbmNlcyB0aHJvdWdob3V0IHRoaXMgc2VjdGlvbiB0byBhbGxvd1xuICAvLyBmb3IgZXh0ZXJuYWwgdXNlcnMgdG8gb3ZlcnJpZGUgdGhlc2UgYXMgcHNldWRvLXN1cHBvcnRlZCBBUElzLlxuICBlbnYuVk0uY2hlY2tSZXZpc2lvbih0ZW1wbGF0ZVNwZWMuY29tcGlsZXIpO1xuXG4gIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGZvciBwcmVjb21waWxlZCB0ZW1wbGF0ZXMgd2l0aCBjb21waWxlci12ZXJzaW9uIDcgKDw0LjMuMClcbiAgY29uc3QgdGVtcGxhdGVXYXNQcmVjb21waWxlZFdpdGhDb21waWxlclY3ID1cbiAgICB0ZW1wbGF0ZVNwZWMuY29tcGlsZXIgJiYgdGVtcGxhdGVTcGVjLmNvbXBpbGVyWzBdID09PSA3O1xuXG4gIGZ1bmN0aW9uIGludm9rZVBhcnRpYWxXcmFwcGVyKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xuICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIG9wdGlvbnMuaWRzWzBdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcGFydGlhbCA9IGVudi5WTS5yZXNvbHZlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuXG4gICAgbGV0IGV4dGVuZGVkT3B0aW9ucyA9IFV0aWxzLmV4dGVuZCh7fSwgb3B0aW9ucywge1xuICAgICAgaG9va3M6IHRoaXMuaG9va3MsXG4gICAgICBwcm90b0FjY2Vzc0NvbnRyb2w6IHRoaXMucHJvdG9BY2Nlc3NDb250cm9sXG4gICAgfSk7XG5cbiAgICBsZXQgcmVzdWx0ID0gZW52LlZNLmludm9rZVBhcnRpYWwuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICBwYXJ0aWFsLFxuICAgICAgY29udGV4dCxcbiAgICAgIGV4dGVuZGVkT3B0aW9uc1xuICAgICk7XG5cbiAgICBpZiAocmVzdWx0ID09IG51bGwgJiYgZW52LmNvbXBpbGUpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXSA9IGVudi5jb21waWxlKFxuICAgICAgICBwYXJ0aWFsLFxuICAgICAgICB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJPcHRpb25zLFxuICAgICAgICBlbnZcbiAgICAgICk7XG4gICAgICByZXN1bHQgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0oY29udGV4dCwgZXh0ZW5kZWRPcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICBpZiAob3B0aW9ucy5pbmRlbnQpIHtcbiAgICAgICAgbGV0IGxpbmVzID0gcmVzdWx0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWxpbmVzW2ldICYmIGkgKyAxID09PSBsKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaW5lc1tpXSA9IG9wdGlvbnMuaW5kZW50ICsgbGluZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgICAnVGhlIHBhcnRpYWwgJyArXG4gICAgICAgICAgb3B0aW9ucy5uYW1lICtcbiAgICAgICAgICAnIGNvdWxkIG5vdCBiZSBjb21waWxlZCB3aGVuIHJ1bm5pbmcgaW4gcnVudGltZS1vbmx5IG1vZGUnXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEp1c3QgYWRkIHdhdGVyXG4gIGxldCBjb250YWluZXIgPSB7XG4gICAgc3RyaWN0OiBmdW5jdGlvbihvYmosIG5hbWUsIGxvYykge1xuICAgICAgaWYgKCFvYmogfHwgIShuYW1lIGluIG9iaikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignXCInICsgbmFtZSArICdcIiBub3QgZGVmaW5lZCBpbiAnICsgb2JqLCB7XG4gICAgICAgICAgbG9jOiBsb2NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5KG9iaiwgbmFtZSk7XG4gICAgfSxcbiAgICBsb29rdXBQcm9wZXJ0eTogZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIGxldCByZXN1bHQgPSBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdElzQWxsb3dlZChyZXN1bHQsIGNvbnRhaW5lci5wcm90b0FjY2Vzc0NvbnRyb2wsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBsb29rdXA6IGZ1bmN0aW9uKGRlcHRocywgbmFtZSkge1xuICAgICAgY29uc3QgbGVuID0gZGVwdGhzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGRlcHRoc1tpXSAmJiBjb250YWluZXIubG9va3VwUHJvcGVydHkoZGVwdGhzW2ldLCBuYW1lKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGRlcHRoc1tpXVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFtYmRhOiBmdW5jdGlvbihjdXJyZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50LmNhbGwoY29udGV4dCkgOiBjdXJyZW50O1xuICAgIH0sXG5cbiAgICBlc2NhcGVFeHByZXNzaW9uOiBVdGlscy5lc2NhcGVFeHByZXNzaW9uLFxuICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxuXG4gICAgZm46IGZ1bmN0aW9uKGkpIHtcbiAgICAgIGxldCByZXQgPSB0ZW1wbGF0ZVNwZWNbaV07XG4gICAgICByZXQuZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjW2kgKyAnX2QnXTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIHByb2dyYW1zOiBbXSxcbiAgICBwcm9ncmFtOiBmdW5jdGlvbihpLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgICBsZXQgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldLFxuICAgICAgICBmbiA9IHRoaXMuZm4oaSk7XG4gICAgICBpZiAoZGF0YSB8fCBkZXB0aHMgfHwgYmxvY2tQYXJhbXMgfHwgZGVjbGFyZWRCbG9ja1BhcmFtcykge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHdyYXBQcm9ncmFtKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBmbixcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGRlY2xhcmVkQmxvY2tQYXJhbXMsXG4gICAgICAgICAgYmxvY2tQYXJhbXMsXG4gICAgICAgICAgZGVwdGhzXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKCFwcm9ncmFtV3JhcHBlcikge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0gPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3JhbVdyYXBwZXI7XG4gICAgfSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKHZhbHVlLCBkZXB0aCkge1xuICAgICAgd2hpbGUgKHZhbHVlICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgbWVyZ2VJZk5lZWRlZDogZnVuY3Rpb24ocGFyYW0sIGNvbW1vbikge1xuICAgICAgbGV0IG9iaiA9IHBhcmFtIHx8IGNvbW1vbjtcblxuICAgICAgaWYgKHBhcmFtICYmIGNvbW1vbiAmJiBwYXJhbSAhPT0gY29tbW9uKSB7XG4gICAgICAgIG9iaiA9IFV0aWxzLmV4dGVuZCh7fSwgY29tbW9uLCBwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICAvLyBBbiBlbXB0eSBvYmplY3QgdG8gdXNlIGFzIHJlcGxhY2VtZW50IGZvciBudWxsLWNvbnRleHRzXG4gICAgbnVsbENvbnRleHQ6IE9iamVjdC5zZWFsKHt9KSxcblxuICAgIG5vb3A6IGVudi5WTS5ub29wLFxuICAgIGNvbXBpbGVySW5mbzogdGVtcGxhdGVTcGVjLmNvbXBpbGVyXG4gIH07XG5cbiAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuXG4gICAgcmV0Ll9zZXR1cChvcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCAmJiB0ZW1wbGF0ZVNwZWMudXNlRGF0YSkge1xuICAgICAgZGF0YSA9IGluaXREYXRhKGNvbnRleHQsIGRhdGEpO1xuICAgIH1cbiAgICBsZXQgZGVwdGhzLFxuICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocykge1xuICAgICAgaWYgKG9wdGlvbnMuZGVwdGhzKSB7XG4gICAgICAgIGRlcHRocyA9XG4gICAgICAgICAgY29udGV4dCAhPSBvcHRpb25zLmRlcHRoc1swXVxuICAgICAgICAgICAgPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKVxuICAgICAgICAgICAgOiBvcHRpb25zLmRlcHRocztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlcHRocyA9IFtjb250ZXh0XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWluKGNvbnRleHQgLyosIG9wdGlvbnMqLykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgJycgK1xuICAgICAgICB0ZW1wbGF0ZVNwZWMubWFpbihcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBjb250YWluZXIuaGVscGVycyxcbiAgICAgICAgICBjb250YWluZXIucGFydGlhbHMsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBibG9ja1BhcmFtcyxcbiAgICAgICAgICBkZXB0aHNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBtYWluID0gZXhlY3V0ZURlY29yYXRvcnMoXG4gICAgICB0ZW1wbGF0ZVNwZWMubWFpbixcbiAgICAgIG1haW4sXG4gICAgICBjb250YWluZXIsXG4gICAgICBvcHRpb25zLmRlcHRocyB8fCBbXSxcbiAgICAgIGRhdGEsXG4gICAgICBibG9ja1BhcmFtc1xuICAgICk7XG4gICAgcmV0dXJuIG1haW4oY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cblxuICByZXQuaXNUb3AgPSB0cnVlO1xuXG4gIHJldC5fc2V0dXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwpIHtcbiAgICAgIGxldCBtZXJnZWRIZWxwZXJzID0gVXRpbHMuZXh0ZW5kKHt9LCBlbnYuaGVscGVycywgb3B0aW9ucy5oZWxwZXJzKTtcbiAgICAgIHdyYXBIZWxwZXJzVG9QYXNzTG9va3VwUHJvcGVydHkobWVyZ2VkSGVscGVycywgY29udGFpbmVyKTtcbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gbWVyZ2VkSGVscGVycztcblxuICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsKSB7XG4gICAgICAgIC8vIFVzZSBtZXJnZUlmTmVlZGVkIGhlcmUgdG8gcHJldmVudCBjb21waWxpbmcgZ2xvYmFsIHBhcnRpYWxzIG11bHRpcGxlIHRpbWVzXG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGNvbnRhaW5lci5tZXJnZUlmTmVlZGVkKFxuICAgICAgICAgIG9wdGlvbnMucGFydGlhbHMsXG4gICAgICAgICAgZW52LnBhcnRpYWxzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwgfHwgdGVtcGxhdGVTcGVjLnVzZURlY29yYXRvcnMpIHtcbiAgICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBVdGlscy5leHRlbmQoXG4gICAgICAgICAge30sXG4gICAgICAgICAgZW52LmRlY29yYXRvcnMsXG4gICAgICAgICAgb3B0aW9ucy5kZWNvcmF0b3JzXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRhaW5lci5ob29rcyA9IHt9O1xuICAgICAgY29udGFpbmVyLnByb3RvQWNjZXNzQ29udHJvbCA9IGNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbChvcHRpb25zKTtcblxuICAgICAgbGV0IGtlZXBIZWxwZXJJbkhlbHBlcnMgPVxuICAgICAgICBvcHRpb25zLmFsbG93Q2FsbHNUb0hlbHBlck1pc3NpbmcgfHxcbiAgICAgICAgdGVtcGxhdGVXYXNQcmVjb21waWxlZFdpdGhDb21waWxlclY3O1xuICAgICAgbW92ZUhlbHBlclRvSG9va3MoY29udGFpbmVyLCAnaGVscGVyTWlzc2luZycsIGtlZXBIZWxwZXJJbkhlbHBlcnMpO1xuICAgICAgbW92ZUhlbHBlclRvSG9va3MoY29udGFpbmVyLCAnYmxvY2tIZWxwZXJNaXNzaW5nJywga2VlcEhlbHBlckluSGVscGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5wcm90b0FjY2Vzc0NvbnRyb2wgPSBvcHRpb25zLnByb3RvQWNjZXNzQ29udHJvbDsgLy8gaW50ZXJuYWwgb3B0aW9uXG4gICAgICBjb250YWluZXIuaGVscGVycyA9IG9wdGlvbnMuaGVscGVycztcbiAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9wdGlvbnMucGFydGlhbHM7XG4gICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcbiAgICAgIGNvbnRhaW5lci5ob29rcyA9IG9wdGlvbnMuaG9va3M7XG4gICAgfVxuICB9O1xuXG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbihpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ211c3QgcGFzcyBibG9jayBwYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMgJiYgIWRlcHRocykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcFByb2dyYW0oXG4gICAgICBjb250YWluZXIsXG4gICAgICBpLFxuICAgICAgdGVtcGxhdGVTcGVjW2ldLFxuICAgICAgZGF0YSxcbiAgICAgIDAsXG4gICAgICBibG9ja1BhcmFtcyxcbiAgICAgIGRlcHRoc1xuICAgICk7XG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwUHJvZ3JhbShcbiAgY29udGFpbmVyLFxuICBpLFxuICBmbixcbiAgZGF0YSxcbiAgZGVjbGFyZWRCbG9ja1BhcmFtcyxcbiAgYmxvY2tQYXJhbXMsXG4gIGRlcHRoc1xuKSB7XG4gIGZ1bmN0aW9uIHByb2coY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGN1cnJlbnREZXB0aHMgPSBkZXB0aHM7XG4gICAgaWYgKFxuICAgICAgZGVwdGhzICYmXG4gICAgICBjb250ZXh0ICE9IGRlcHRoc1swXSAmJlxuICAgICAgIShjb250ZXh0ID09PSBjb250YWluZXIubnVsbENvbnRleHQgJiYgZGVwdGhzWzBdID09PSBudWxsKVxuICAgICkge1xuICAgICAgY3VycmVudERlcHRocyA9IFtjb250ZXh0XS5jb25jYXQoZGVwdGhzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4oXG4gICAgICBjb250YWluZXIsXG4gICAgICBjb250ZXh0LFxuICAgICAgY29udGFpbmVyLmhlbHBlcnMsXG4gICAgICBjb250YWluZXIucGFydGlhbHMsXG4gICAgICBvcHRpb25zLmRhdGEgfHwgZGF0YSxcbiAgICAgIGJsb2NrUGFyYW1zICYmIFtvcHRpb25zLmJsb2NrUGFyYW1zXS5jb25jYXQoYmxvY2tQYXJhbXMpLFxuICAgICAgY3VycmVudERlcHRoc1xuICAgICk7XG4gIH1cblxuICBwcm9nID0gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcyk7XG5cbiAgcHJvZy5wcm9ncmFtID0gaTtcbiAgcHJvZy5kZXB0aCA9IGRlcHRocyA/IGRlcHRocy5sZW5ndGggOiAwO1xuICBwcm9nLmJsb2NrUGFyYW1zID0gZGVjbGFyZWRCbG9ja1BhcmFtcyB8fCAwO1xuICByZXR1cm4gcHJvZztcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGN1cnJlbnRseSBwYXJ0IG9mIHRoZSBvZmZpY2lhbCBBUEksIHRoZXJlZm9yZSBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIHNob3VsZCBub3QgYmUgY2hhbmdlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgaWYgKG9wdGlvbnMubmFtZSA9PT0gJ0BwYXJ0aWFsLWJsb2NrJykge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdO1xuICAgIH1cbiAgfSBlbHNlIGlmICghcGFydGlhbC5jYWxsICYmICFvcHRpb25zLm5hbWUpIHtcbiAgICAvLyBUaGlzIGlzIGEgZHluYW1pYyBwYXJ0aWFsIHRoYXQgcmV0dXJuZWQgYSBzdHJpbmdcbiAgICBvcHRpb25zLm5hbWUgPSBwYXJ0aWFsO1xuICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW3BhcnRpYWxdO1xuICB9XG4gIHJldHVybiBwYXJ0aWFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52b2tlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIC8vIFVzZSB0aGUgY3VycmVudCBjbG9zdXJlIGNvbnRleHQgdG8gc2F2ZSB0aGUgcGFydGlhbC1ibG9jayBpZiB0aGlzIHBhcnRpYWxcbiAgY29uc3QgY3VycmVudFBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgb3B0aW9ucy5wYXJ0aWFsID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xuICB9XG5cbiAgbGV0IHBhcnRpYWxCbG9jaztcbiAgaWYgKG9wdGlvbnMuZm4gJiYgb3B0aW9ucy5mbiAhPT0gbm9vcCkge1xuICAgIG9wdGlvbnMuZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgLy8gV3JhcHBlciBmdW5jdGlvbiB0byBnZXQgYWNjZXNzIHRvIGN1cnJlbnRQYXJ0aWFsQmxvY2sgZnJvbSB0aGUgY2xvc3VyZVxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm47XG4gICAgcGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBmdW5jdGlvbiBwYXJ0aWFsQmxvY2tXcmFwcGVyKFxuICAgICAgY29udGV4dCxcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgICkge1xuICAgICAgLy8gUmVzdG9yZSB0aGUgcGFydGlhbC1ibG9jayBmcm9tIHRoZSBjbG9zdXJlIGZvciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBibG9ja1xuICAgICAgLy8gaS5lLiB0aGUgcGFydCBpbnNpZGUgdGhlIGJsb2NrIG9mIHRoZSBwYXJ0aWFsIGNhbGwuXG4gICAgICBvcHRpb25zLmRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBjdXJyZW50UGFydGlhbEJsb2NrO1xuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgaWYgKGZuLnBhcnRpYWxzKSB7XG4gICAgICBvcHRpb25zLnBhcnRpYWxzID0gVXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zLnBhcnRpYWxzLCBmbi5wYXJ0aWFscyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcbiAgICBwYXJ0aWFsID0gcGFydGlhbEJsb2NrO1xuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuICB9IGVsc2UgaWYgKHBhcnRpYWwgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcbiAgaWYgKCFkYXRhIHx8ICEoJ3Jvb3QnIGluIGRhdGEpKSB7XG4gICAgZGF0YSA9IGRhdGEgPyBjcmVhdGVGcmFtZShkYXRhKSA6IHt9O1xuICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpIHtcbiAgaWYgKGZuLmRlY29yYXRvcikge1xuICAgIGxldCBwcm9wcyA9IHt9O1xuICAgIHByb2cgPSBmbi5kZWNvcmF0b3IoXG4gICAgICBwcm9nLFxuICAgICAgcHJvcHMsXG4gICAgICBjb250YWluZXIsXG4gICAgICBkZXB0aHMgJiYgZGVwdGhzWzBdLFxuICAgICAgZGF0YSxcbiAgICAgIGJsb2NrUGFyYW1zLFxuICAgICAgZGVwdGhzXG4gICAgKTtcbiAgICBVdGlscy5leHRlbmQocHJvZywgcHJvcHMpO1xuICB9XG4gIHJldHVybiBwcm9nO1xufVxuXG5mdW5jdGlvbiB3cmFwSGVscGVyc1RvUGFzc0xvb2t1cFByb3BlcnR5KG1lcmdlZEhlbHBlcnMsIGNvbnRhaW5lcikge1xuICBPYmplY3Qua2V5cyhtZXJnZWRIZWxwZXJzKS5mb3JFYWNoKGhlbHBlck5hbWUgPT4ge1xuICAgIGxldCBoZWxwZXIgPSBtZXJnZWRIZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIG1lcmdlZEhlbHBlcnNbaGVscGVyTmFtZV0gPSBwYXNzTG9va3VwUHJvcGVydHlPcHRpb24oaGVscGVyLCBjb250YWluZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFzc0xvb2t1cFByb3BlcnR5T3B0aW9uKGhlbHBlciwgY29udGFpbmVyKSB7XG4gIGNvbnN0IGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5O1xuICByZXR1cm4gd3JhcEhlbHBlcihoZWxwZXIsIG9wdGlvbnMgPT4ge1xuICAgIHJldHVybiBVdGlscy5leHRlbmQoeyBsb29rdXBQcm9wZXJ0eSB9LCBvcHRpb25zKTtcbiAgfSk7XG59XG4iLCAiLyogZ2xvYmFsIGdsb2JhbFRoaXMgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgLy8gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2dsb2JhbHRoaXNcbiAgKGZ1bmN0aW9uKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybjtcbiAgICBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oJ19fbWFnaWNfXycsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gICAgX19tYWdpY19fLmdsb2JhbFRoaXMgPSBfX21hZ2ljX187IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICBkZWxldGUgT2JqZWN0LnByb3RvdHlwZS5fX21hZ2ljX187XG4gIH0pKCk7XG5cbiAgY29uc3QgJEhhbmRsZWJhcnMgPSBnbG9iYWxUaGlzLkhhbmRsZWJhcnM7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xuICAgICAgZ2xvYmFsVGhpcy5IYW5kbGViYXJzID0gJEhhbmRsZWJhcnM7XG4gICAgfVxuICAgIHJldHVybiBIYW5kbGViYXJzO1xuICB9O1xufVxuIiwgImltcG9ydCAqIGFzIGJhc2UgZnJvbSAnLi9oYW5kbGViYXJzL2Jhc2UnO1xuXG4vLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXG4vLyAoVGhpcyBpcyBkb25lIHRvIGVhc2lseSBzaGFyZSBjb2RlIGJldHdlZW4gY29tbW9uanMgYW5kIGJyb3dzZSBlbnZzKVxuaW1wb3J0IFNhZmVTdHJpbmcgZnJvbSAnLi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9oYW5kbGViYXJzL2V4Y2VwdGlvbic7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL2hhbmRsZWJhcnMvdXRpbHMnO1xuaW1wb3J0ICogYXMgcnVudGltZSBmcm9tICcuL2hhbmRsZWJhcnMvcnVudGltZSc7XG5cbmltcG9ydCBub0NvbmZsaWN0IGZyb20gJy4vaGFuZGxlYmFycy9uby1jb25mbGljdCc7XG5cbi8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBuZXcgYmFzZS5IYW5kbGViYXJzRW52aXJvbm1lbnQoKTtcblxuICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuICBoYi5TYWZlU3RyaW5nID0gU2FmZVN0cmluZztcbiAgaGIuRXhjZXB0aW9uID0gRXhjZXB0aW9uO1xuICBoYi5VdGlscyA9IFV0aWxzO1xuICBoYi5lc2NhcGVFeHByZXNzaW9uID0gVXRpbHMuZXNjYXBlRXhwcmVzc2lvbjtcblxuICBoYi5WTSA9IHJ1bnRpbWU7XG4gIGhiLnRlbXBsYXRlID0gZnVuY3Rpb24oc3BlYykge1xuICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcbiAgfTtcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiIsICJsZXQgQVNUID0ge1xuICAvLyBQdWJsaWMgQVBJIHVzZWQgdG8gZXZhbHVhdGUgZGVyaXZlZCBhdHRyaWJ1dGVzIHJlZ2FyZGluZyBBU1Qgbm9kZXNcbiAgaGVscGVyczoge1xuICAgIC8vIGEgbXVzdGFjaGUgaXMgZGVmaW5pdGVseSBhIGhlbHBlciBpZjpcbiAgICAvLyAqIGl0IGlzIGFuIGVsaWdpYmxlIGhlbHBlciwgYW5kXG4gICAgLy8gKiBpdCBoYXMgYXQgbGVhc3Qgb25lIHBhcmFtZXRlciBvciBoYXNoIHNlZ21lbnRcbiAgICBoZWxwZXJFeHByZXNzaW9uOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBub2RlLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJyB8fFxuICAgICAgICAoKG5vZGUudHlwZSA9PT0gJ011c3RhY2hlU3RhdGVtZW50JyB8fFxuICAgICAgICAgIG5vZGUudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50JykgJiZcbiAgICAgICAgICAhISgobm9kZS5wYXJhbXMgJiYgbm9kZS5wYXJhbXMubGVuZ3RoKSB8fCBub2RlLmhhc2gpKVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgc2NvcGVkSWQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiAvXlxcLnx0aGlzXFxiLy50ZXN0KHBhdGgub3JpZ2luYWwpO1xuICAgIH0sXG5cbiAgICAvLyBhbiBJRCBpcyBzaW1wbGUgaWYgaXQgb25seSBoYXMgb25lIHBhcnQsIGFuZCB0aGF0IHBhcnQgaXMgbm90XG4gICAgLy8gYC4uYCBvciBgdGhpc2AuXG4gICAgc2ltcGxlSWQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBhdGgucGFydHMubGVuZ3RoID09PSAxICYmICFBU1QuaGVscGVycy5zY29wZWRJZChwYXRoKSAmJiAhcGF0aC5kZXB0aFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIE11c3QgYmUgZXhwb3J0ZWQgYXMgYW4gb2JqZWN0IHJhdGhlciB0aGFuIHRoZSByb290IG9mIHRoZSBtb2R1bGUgYXMgdGhlIGppc29uIGxleGVyXG4vLyBtdXN0IG1vZGlmeSB0aGUgb2JqZWN0IHRvIG9wZXJhdGUgcHJvcGVybHkuXG5leHBvcnQgZGVmYXVsdCBBU1Q7XG4iLCAiLy8gRmlsZSBpZ25vcmVkIGluIGNvdmVyYWdlIHRlc3RzIHZpYSBzZXR0aW5nIGluIC5pc3RhbmJ1bC55bWxcbi8qIEppc29uIGdlbmVyYXRlZCBwYXJzZXIgKi9cbnZhciBoYW5kbGViYXJzID0gKGZ1bmN0aW9uKCl7XG52YXIgcGFyc2VyID0ge3RyYWNlOiBmdW5jdGlvbiB0cmFjZSAoKSB7IH0sXG55eToge30sXG5zeW1ib2xzXzoge1wiZXJyb3JcIjoyLFwicm9vdFwiOjMsXCJwcm9ncmFtXCI6NCxcIkVPRlwiOjUsXCJwcm9ncmFtX3JlcGV0aXRpb24wXCI6NixcInN0YXRlbWVudFwiOjcsXCJtdXN0YWNoZVwiOjgsXCJibG9ja1wiOjksXCJyYXdCbG9ja1wiOjEwLFwicGFydGlhbFwiOjExLFwicGFydGlhbEJsb2NrXCI6MTIsXCJjb250ZW50XCI6MTMsXCJDT01NRU5UXCI6MTQsXCJDT05URU5UXCI6MTUsXCJvcGVuUmF3QmxvY2tcIjoxNixcInJhd0Jsb2NrX3JlcGV0aXRpb24wXCI6MTcsXCJFTkRfUkFXX0JMT0NLXCI6MTgsXCJPUEVOX1JBV19CTE9DS1wiOjE5LFwiaGVscGVyTmFtZVwiOjIwLFwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wXCI6MjEsXCJvcGVuUmF3QmxvY2tfb3B0aW9uMFwiOjIyLFwiQ0xPU0VfUkFXX0JMT0NLXCI6MjMsXCJvcGVuQmxvY2tcIjoyNCxcImJsb2NrX29wdGlvbjBcIjoyNSxcImNsb3NlQmxvY2tcIjoyNixcIm9wZW5JbnZlcnNlXCI6MjcsXCJibG9ja19vcHRpb24xXCI6MjgsXCJPUEVOX0JMT0NLXCI6MjksXCJvcGVuQmxvY2tfcmVwZXRpdGlvbjBcIjozMCxcIm9wZW5CbG9ja19vcHRpb24wXCI6MzEsXCJvcGVuQmxvY2tfb3B0aW9uMVwiOjMyLFwiQ0xPU0VcIjozMyxcIk9QRU5fSU5WRVJTRVwiOjM0LFwib3BlbkludmVyc2VfcmVwZXRpdGlvbjBcIjozNSxcIm9wZW5JbnZlcnNlX29wdGlvbjBcIjozNixcIm9wZW5JbnZlcnNlX29wdGlvbjFcIjozNyxcIm9wZW5JbnZlcnNlQ2hhaW5cIjozOCxcIk9QRU5fSU5WRVJTRV9DSEFJTlwiOjM5LFwib3BlbkludmVyc2VDaGFpbl9yZXBldGl0aW9uMFwiOjQwLFwib3BlbkludmVyc2VDaGFpbl9vcHRpb24wXCI6NDEsXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjFcIjo0MixcImludmVyc2VBbmRQcm9ncmFtXCI6NDMsXCJJTlZFUlNFXCI6NDQsXCJpbnZlcnNlQ2hhaW5cIjo0NSxcImludmVyc2VDaGFpbl9vcHRpb24wXCI6NDYsXCJPUEVOX0VOREJMT0NLXCI6NDcsXCJPUEVOXCI6NDgsXCJtdXN0YWNoZV9yZXBldGl0aW9uMFwiOjQ5LFwibXVzdGFjaGVfb3B0aW9uMFwiOjUwLFwiT1BFTl9VTkVTQ0FQRURcIjo1MSxcIm11c3RhY2hlX3JlcGV0aXRpb24xXCI6NTIsXCJtdXN0YWNoZV9vcHRpb24xXCI6NTMsXCJDTE9TRV9VTkVTQ0FQRURcIjo1NCxcIk9QRU5fUEFSVElBTFwiOjU1LFwicGFydGlhbE5hbWVcIjo1NixcInBhcnRpYWxfcmVwZXRpdGlvbjBcIjo1NyxcInBhcnRpYWxfb3B0aW9uMFwiOjU4LFwib3BlblBhcnRpYWxCbG9ja1wiOjU5LFwiT1BFTl9QQVJUSUFMX0JMT0NLXCI6NjAsXCJvcGVuUGFydGlhbEJsb2NrX3JlcGV0aXRpb24wXCI6NjEsXCJvcGVuUGFydGlhbEJsb2NrX29wdGlvbjBcIjo2MixcInBhcmFtXCI6NjMsXCJzZXhwclwiOjY0LFwiT1BFTl9TRVhQUlwiOjY1LFwic2V4cHJfcmVwZXRpdGlvbjBcIjo2NixcInNleHByX29wdGlvbjBcIjo2NyxcIkNMT1NFX1NFWFBSXCI6NjgsXCJoYXNoXCI6NjksXCJoYXNoX3JlcGV0aXRpb25fcGx1czBcIjo3MCxcImhhc2hTZWdtZW50XCI6NzEsXCJJRFwiOjcyLFwiRVFVQUxTXCI6NzMsXCJibG9ja1BhcmFtc1wiOjc0LFwiT1BFTl9CTE9DS19QQVJBTVNcIjo3NSxcImJsb2NrUGFyYW1zX3JlcGV0aXRpb25fcGx1czBcIjo3NixcIkNMT1NFX0JMT0NLX1BBUkFNU1wiOjc3LFwicGF0aFwiOjc4LFwiZGF0YU5hbWVcIjo3OSxcIlNUUklOR1wiOjgwLFwiTlVNQkVSXCI6ODEsXCJCT09MRUFOXCI6ODIsXCJVTkRFRklORURcIjo4MyxcIk5VTExcIjo4NCxcIkRBVEFcIjo4NSxcInBhdGhTZWdtZW50c1wiOjg2LFwiU0VQXCI6ODcsXCIkYWNjZXB0XCI6MCxcIiRlbmRcIjoxfSxcbnRlcm1pbmFsc186IHsyOlwiZXJyb3JcIiw1OlwiRU9GXCIsMTQ6XCJDT01NRU5UXCIsMTU6XCJDT05URU5UXCIsMTg6XCJFTkRfUkFXX0JMT0NLXCIsMTk6XCJPUEVOX1JBV19CTE9DS1wiLDIzOlwiQ0xPU0VfUkFXX0JMT0NLXCIsMjk6XCJPUEVOX0JMT0NLXCIsMzM6XCJDTE9TRVwiLDM0OlwiT1BFTl9JTlZFUlNFXCIsMzk6XCJPUEVOX0lOVkVSU0VfQ0hBSU5cIiw0NDpcIklOVkVSU0VcIiw0NzpcIk9QRU5fRU5EQkxPQ0tcIiw0ODpcIk9QRU5cIiw1MTpcIk9QRU5fVU5FU0NBUEVEXCIsNTQ6XCJDTE9TRV9VTkVTQ0FQRURcIiw1NTpcIk9QRU5fUEFSVElBTFwiLDYwOlwiT1BFTl9QQVJUSUFMX0JMT0NLXCIsNjU6XCJPUEVOX1NFWFBSXCIsNjg6XCJDTE9TRV9TRVhQUlwiLDcyOlwiSURcIiw3MzpcIkVRVUFMU1wiLDc1OlwiT1BFTl9CTE9DS19QQVJBTVNcIiw3NzpcIkNMT1NFX0JMT0NLX1BBUkFNU1wiLDgwOlwiU1RSSU5HXCIsODE6XCJOVU1CRVJcIiw4MjpcIkJPT0xFQU5cIiw4MzpcIlVOREVGSU5FRFwiLDg0OlwiTlVMTFwiLDg1OlwiREFUQVwiLDg3OlwiU0VQXCJ9LFxucHJvZHVjdGlvbnNfOiBbMCxbMywyXSxbNCwxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbNywxXSxbMTMsMV0sWzEwLDNdLFsxNiw1XSxbOSw0XSxbOSw0XSxbMjQsNl0sWzI3LDZdLFszOCw2XSxbNDMsMl0sWzQ1LDNdLFs0NSwxXSxbMjYsM10sWzgsNV0sWzgsNV0sWzExLDVdLFsxMiwzXSxbNTksNV0sWzYzLDFdLFs2MywxXSxbNjQsNV0sWzY5LDFdLFs3MSwzXSxbNzQsM10sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFs1NiwxXSxbNTYsMV0sWzc5LDJdLFs3OCwxXSxbODYsM10sWzg2LDFdLFs2LDBdLFs2LDJdLFsxNywwXSxbMTcsMl0sWzIxLDBdLFsyMSwyXSxbMjIsMF0sWzIyLDFdLFsyNSwwXSxbMjUsMV0sWzI4LDBdLFsyOCwxXSxbMzAsMF0sWzMwLDJdLFszMSwwXSxbMzEsMV0sWzMyLDBdLFszMiwxXSxbMzUsMF0sWzM1LDJdLFszNiwwXSxbMzYsMV0sWzM3LDBdLFszNywxXSxbNDAsMF0sWzQwLDJdLFs0MSwwXSxbNDEsMV0sWzQyLDBdLFs0MiwxXSxbNDYsMF0sWzQ2LDFdLFs0OSwwXSxbNDksMl0sWzUwLDBdLFs1MCwxXSxbNTIsMF0sWzUyLDJdLFs1MywwXSxbNTMsMV0sWzU3LDBdLFs1NywyXSxbNTgsMF0sWzU4LDFdLFs2MSwwXSxbNjEsMl0sWzYyLDBdLFs2MiwxXSxbNjYsMF0sWzY2LDJdLFs2NywwXSxbNjcsMV0sWzcwLDFdLFs3MCwyXSxbNzYsMV0sWzc2LDJdXSxcbnBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQseXlsZW5nLHl5bGluZW5vLHl5LHl5c3RhdGUsJCQsXyRcbikge1xuXG52YXIgJDAgPSAkJC5sZW5ndGggLSAxO1xuc3dpdGNoICh5eXN0YXRlKSB7XG5jYXNlIDE6IHJldHVybiAkJFskMC0xXTsgXG5icmVhaztcbmNhc2UgMjp0aGlzLiQgPSB5eS5wcmVwYXJlUHJvZ3JhbSgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDM6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDQ6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDU6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDY6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDc6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDg6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDk6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ0NvbW1lbnRTdGF0ZW1lbnQnLFxuICAgICAgdmFsdWU6IHl5LnN0cmlwQ29tbWVudCgkJFskMF0pLFxuICAgICAgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDBdLCAkJFskMF0pLFxuICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG4gICAgfTtcbiAgXG5icmVhaztcbmNhc2UgMTA6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ0NvbnRlbnRTdGF0ZW1lbnQnLFxuICAgICAgb3JpZ2luYWw6ICQkWyQwXSxcbiAgICAgIHZhbHVlOiAkJFskMF0sXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAxMTp0aGlzLiQgPSB5eS5wcmVwYXJlUmF3QmxvY2soJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDEyOnRoaXMuJCA9IHsgcGF0aDogJCRbJDAtM10sIHBhcmFtczogJCRbJDAtMl0sIGhhc2g6ICQkWyQwLTFdIH07XG5icmVhaztcbmNhc2UgMTM6dGhpcy4kID0geXkucHJlcGFyZUJsb2NrKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgZmFsc2UsIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDE0OnRoaXMuJCA9IHl5LnByZXBhcmVCbG9jaygkJFskMC0zXSwgJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIHRydWUsIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDE1OnRoaXMuJCA9IHsgb3BlbjogJCRbJDAtNV0sIHBhdGg6ICQkWyQwLTRdLCBwYXJhbXM6ICQkWyQwLTNdLCBoYXNoOiAkJFskMC0yXSwgYmxvY2tQYXJhbXM6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC01XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDE2OnRoaXMuJCA9IHsgcGF0aDogJCRbJDAtNF0sIHBhcmFtczogJCRbJDAtM10sIGhhc2g6ICQkWyQwLTJdLCBibG9ja1BhcmFtczogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTVdLCAkJFskMF0pIH07XG5icmVhaztcbmNhc2UgMTc6dGhpcy4kID0geyBwYXRoOiAkJFskMC00XSwgcGFyYW1zOiAkJFskMC0zXSwgaGFzaDogJCRbJDAtMl0sIGJsb2NrUGFyYW1zOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNV0sICQkWyQwXSkgfTtcbmJyZWFrO1xuY2FzZSAxODp0aGlzLiQgPSB7IHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTFdLCAkJFskMC0xXSksIHByb2dyYW06ICQkWyQwXSB9O1xuYnJlYWs7XG5jYXNlIDE5OlxuICAgIHZhciBpbnZlcnNlID0geXkucHJlcGFyZUJsb2NrKCQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCAkJFskMF0sIGZhbHNlLCB0aGlzLl8kKSxcbiAgICAgICAgcHJvZ3JhbSA9IHl5LnByZXBhcmVQcm9ncmFtKFtpbnZlcnNlXSwgJCRbJDAtMV0ubG9jKTtcbiAgICBwcm9ncmFtLmNoYWluZWQgPSB0cnVlO1xuXG4gICAgdGhpcy4kID0geyBzdHJpcDogJCRbJDAtMl0uc3RyaXAsIHByb2dyYW06IHByb2dyYW0sIGNoYWluOiB0cnVlIH07XG4gIFxuYnJlYWs7XG5jYXNlIDIwOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAyMTp0aGlzLiQgPSB7cGF0aDogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTJdLCAkJFskMF0pfTtcbmJyZWFrO1xuY2FzZSAyMjp0aGlzLiQgPSB5eS5wcmVwYXJlTXVzdGFjaGUoJCRbJDAtM10sICQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDAtNF0sIHl5LnN0cmlwRmxhZ3MoJCRbJDAtNF0sICQkWyQwXSksIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDIzOnRoaXMuJCA9IHl5LnByZXBhcmVNdXN0YWNoZSgkJFskMC0zXSwgJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMC00XSwgeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMjQ6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ1BhcnRpYWxTdGF0ZW1lbnQnLFxuICAgICAgbmFtZTogJCRbJDAtM10sXG4gICAgICBwYXJhbXM6ICQkWyQwLTJdLFxuICAgICAgaGFzaDogJCRbJDAtMV0sXG4gICAgICBpbmRlbnQ6ICcnLFxuICAgICAgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNF0sICQkWyQwXSksXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAyNTp0aGlzLiQgPSB5eS5wcmVwYXJlUGFydGlhbEJsb2NrKCQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAyNjp0aGlzLiQgPSB7IHBhdGg6ICQkWyQwLTNdLCBwYXJhbXM6ICQkWyQwLTJdLCBoYXNoOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNF0sICQkWyQwXSkgfTtcbmJyZWFrO1xuY2FzZSAyNzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMjg6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDI5OlxuICAgIHRoaXMuJCA9IHtcbiAgICAgIHR5cGU6ICdTdWJFeHByZXNzaW9uJyxcbiAgICAgIHBhdGg6ICQkWyQwLTNdLFxuICAgICAgcGFyYW1zOiAkJFskMC0yXSxcbiAgICAgIGhhc2g6ICQkWyQwLTFdLFxuICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG4gICAgfTtcbiAgXG5icmVhaztcbmNhc2UgMzA6dGhpcy4kID0ge3R5cGU6ICdIYXNoJywgcGFpcnM6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzMTp0aGlzLiQgPSB7dHlwZTogJ0hhc2hQYWlyJywga2V5OiB5eS5pZCgkJFskMC0yXSksIHZhbHVlOiAkJFskMF0sIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgMzI6dGhpcy4kID0geXkuaWQoJCRbJDAtMV0pO1xuYnJlYWs7XG5jYXNlIDMzOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAzNDp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMzU6dGhpcy4kID0ge3R5cGU6ICdTdHJpbmdMaXRlcmFsJywgdmFsdWU6ICQkWyQwXSwgb3JpZ2luYWw6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzNjp0aGlzLiQgPSB7dHlwZTogJ051bWJlckxpdGVyYWwnLCB2YWx1ZTogTnVtYmVyKCQkWyQwXSksIG9yaWdpbmFsOiBOdW1iZXIoJCRbJDBdKSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzNzp0aGlzLiQgPSB7dHlwZTogJ0Jvb2xlYW5MaXRlcmFsJywgdmFsdWU6ICQkWyQwXSA9PT0gJ3RydWUnLCBvcmlnaW5hbDogJCRbJDBdID09PSAndHJ1ZScsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgMzg6dGhpcy4kID0ge3R5cGU6ICdVbmRlZmluZWRMaXRlcmFsJywgb3JpZ2luYWw6IHVuZGVmaW5lZCwgdmFsdWU6IHVuZGVmaW5lZCwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzOTp0aGlzLiQgPSB7dHlwZTogJ051bGxMaXRlcmFsJywgb3JpZ2luYWw6IG51bGwsIHZhbHVlOiBudWxsLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDQwOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA0MTp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNDI6dGhpcy4kID0geXkucHJlcGFyZVBhdGgodHJ1ZSwgJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSA0Mzp0aGlzLiQgPSB5eS5wcmVwYXJlUGF0aChmYWxzZSwgJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSA0NDogJCRbJDAtMl0ucHVzaCh7cGFydDogeXkuaWQoJCRbJDBdKSwgb3JpZ2luYWw6ICQkWyQwXSwgc2VwYXJhdG9yOiAkJFskMC0xXX0pOyB0aGlzLiQgPSAkJFskMC0yXTsgXG5icmVhaztcbmNhc2UgNDU6dGhpcy4kID0gW3twYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdfV07XG5icmVhaztcbmNhc2UgNDY6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNDc6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDQ4OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDQ5OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA1MDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA1MTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNTg6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNTk6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDY0OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDY1OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA3MDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA3MTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNzg6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNzk6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDgyOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDgzOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA4Njp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA4NzokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgOTA6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgOTE6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDk0OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDk1OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA5ODp0aGlzLiQgPSBbJCRbJDBdXTtcbmJyZWFrO1xuY2FzZSA5OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgMTAwOnRoaXMuJCA9IFskJFskMF1dO1xuYnJlYWs7XG5jYXNlIDEwMTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbn1cbn0sXG50YWJsZTogW3szOjEsNDoyLDU6WzIsNDZdLDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezE6WzNdfSx7NTpbMSw0XX0sezU6WzIsMl0sNzo1LDg6Niw5OjcsMTA6OCwxMTo5LDEyOjEwLDEzOjExLDE0OlsxLDEyXSwxNTpbMSwyMF0sMTY6MTcsMTk6WzEsMjNdLDI0OjE1LDI3OjE2LDI5OlsxLDIxXSwzNDpbMSwyMl0sMzk6WzIsMl0sNDQ6WzIsMl0sNDc6WzIsMl0sNDg6WzEsMTNdLDUxOlsxLDE0XSw1NTpbMSwxOF0sNTk6MTksNjA6WzEsMjRdfSx7MTpbMiwxXX0sezU6WzIsNDddLDE0OlsyLDQ3XSwxNTpbMiw0N10sMTk6WzIsNDddLDI5OlsyLDQ3XSwzNDpbMiw0N10sMzk6WzIsNDddLDQ0OlsyLDQ3XSw0NzpbMiw0N10sNDg6WzIsNDddLDUxOlsyLDQ3XSw1NTpbMiw0N10sNjA6WzIsNDddfSx7NTpbMiwzXSwxNDpbMiwzXSwxNTpbMiwzXSwxOTpbMiwzXSwyOTpbMiwzXSwzNDpbMiwzXSwzOTpbMiwzXSw0NDpbMiwzXSw0NzpbMiwzXSw0ODpbMiwzXSw1MTpbMiwzXSw1NTpbMiwzXSw2MDpbMiwzXX0sezU6WzIsNF0sMTQ6WzIsNF0sMTU6WzIsNF0sMTk6WzIsNF0sMjk6WzIsNF0sMzQ6WzIsNF0sMzk6WzIsNF0sNDQ6WzIsNF0sNDc6WzIsNF0sNDg6WzIsNF0sNTE6WzIsNF0sNTU6WzIsNF0sNjA6WzIsNF19LHs1OlsyLDVdLDE0OlsyLDVdLDE1OlsyLDVdLDE5OlsyLDVdLDI5OlsyLDVdLDM0OlsyLDVdLDM5OlsyLDVdLDQ0OlsyLDVdLDQ3OlsyLDVdLDQ4OlsyLDVdLDUxOlsyLDVdLDU1OlsyLDVdLDYwOlsyLDVdfSx7NTpbMiw2XSwxNDpbMiw2XSwxNTpbMiw2XSwxOTpbMiw2XSwyOTpbMiw2XSwzNDpbMiw2XSwzOTpbMiw2XSw0NDpbMiw2XSw0NzpbMiw2XSw0ODpbMiw2XSw1MTpbMiw2XSw1NTpbMiw2XSw2MDpbMiw2XX0sezU6WzIsN10sMTQ6WzIsN10sMTU6WzIsN10sMTk6WzIsN10sMjk6WzIsN10sMzQ6WzIsN10sMzk6WzIsN10sNDQ6WzIsN10sNDc6WzIsN10sNDg6WzIsN10sNTE6WzIsN10sNTU6WzIsN10sNjA6WzIsN119LHs1OlsyLDhdLDE0OlsyLDhdLDE1OlsyLDhdLDE5OlsyLDhdLDI5OlsyLDhdLDM0OlsyLDhdLDM5OlsyLDhdLDQ0OlsyLDhdLDQ3OlsyLDhdLDQ4OlsyLDhdLDUxOlsyLDhdLDU1OlsyLDhdLDYwOlsyLDhdfSx7NTpbMiw5XSwxNDpbMiw5XSwxNTpbMiw5XSwxOTpbMiw5XSwyOTpbMiw5XSwzNDpbMiw5XSwzOTpbMiw5XSw0NDpbMiw5XSw0NzpbMiw5XSw0ODpbMiw5XSw1MTpbMiw5XSw1NTpbMiw5XSw2MDpbMiw5XX0sezIwOjI1LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjM2LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezQ6MzcsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sMzk6WzIsNDZdLDQ0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7NDozOCw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSw0NDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezE1OlsyLDQ4XSwxNzozOSwxODpbMiw0OF19LHsyMDo0MSw1Njo0MCw2NDo0Miw2NTpbMSw0M10sNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NDo0NCw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7NTpbMiwxMF0sMTQ6WzIsMTBdLDE1OlsyLDEwXSwxODpbMiwxMF0sMTk6WzIsMTBdLDI5OlsyLDEwXSwzNDpbMiwxMF0sMzk6WzIsMTBdLDQ0OlsyLDEwXSw0NzpbMiwxMF0sNDg6WzIsMTBdLDUxOlsyLDEwXSw1NTpbMiwxMF0sNjA6WzIsMTBdfSx7MjA6NDUsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NDYsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NDcsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NDEsNTY6NDgsNjQ6NDIsNjU6WzEsNDNdLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezMzOlsyLDc4XSw0OTo0OSw2NTpbMiw3OF0sNzI6WzIsNzhdLDgwOlsyLDc4XSw4MTpbMiw3OF0sODI6WzIsNzhdLDgzOlsyLDc4XSw4NDpbMiw3OF0sODU6WzIsNzhdfSx7MjM6WzIsMzNdLDMzOlsyLDMzXSw1NDpbMiwzM10sNjU6WzIsMzNdLDY4OlsyLDMzXSw3MjpbMiwzM10sNzU6WzIsMzNdLDgwOlsyLDMzXSw4MTpbMiwzM10sODI6WzIsMzNdLDgzOlsyLDMzXSw4NDpbMiwzM10sODU6WzIsMzNdfSx7MjM6WzIsMzRdLDMzOlsyLDM0XSw1NDpbMiwzNF0sNjU6WzIsMzRdLDY4OlsyLDM0XSw3MjpbMiwzNF0sNzU6WzIsMzRdLDgwOlsyLDM0XSw4MTpbMiwzNF0sODI6WzIsMzRdLDgzOlsyLDM0XSw4NDpbMiwzNF0sODU6WzIsMzRdfSx7MjM6WzIsMzVdLDMzOlsyLDM1XSw1NDpbMiwzNV0sNjU6WzIsMzVdLDY4OlsyLDM1XSw3MjpbMiwzNV0sNzU6WzIsMzVdLDgwOlsyLDM1XSw4MTpbMiwzNV0sODI6WzIsMzVdLDgzOlsyLDM1XSw4NDpbMiwzNV0sODU6WzIsMzVdfSx7MjM6WzIsMzZdLDMzOlsyLDM2XSw1NDpbMiwzNl0sNjU6WzIsMzZdLDY4OlsyLDM2XSw3MjpbMiwzNl0sNzU6WzIsMzZdLDgwOlsyLDM2XSw4MTpbMiwzNl0sODI6WzIsMzZdLDgzOlsyLDM2XSw4NDpbMiwzNl0sODU6WzIsMzZdfSx7MjM6WzIsMzddLDMzOlsyLDM3XSw1NDpbMiwzN10sNjU6WzIsMzddLDY4OlsyLDM3XSw3MjpbMiwzN10sNzU6WzIsMzddLDgwOlsyLDM3XSw4MTpbMiwzN10sODI6WzIsMzddLDgzOlsyLDM3XSw4NDpbMiwzN10sODU6WzIsMzddfSx7MjM6WzIsMzhdLDMzOlsyLDM4XSw1NDpbMiwzOF0sNjU6WzIsMzhdLDY4OlsyLDM4XSw3MjpbMiwzOF0sNzU6WzIsMzhdLDgwOlsyLDM4XSw4MTpbMiwzOF0sODI6WzIsMzhdLDgzOlsyLDM4XSw4NDpbMiwzOF0sODU6WzIsMzhdfSx7MjM6WzIsMzldLDMzOlsyLDM5XSw1NDpbMiwzOV0sNjU6WzIsMzldLDY4OlsyLDM5XSw3MjpbMiwzOV0sNzU6WzIsMzldLDgwOlsyLDM5XSw4MTpbMiwzOV0sODI6WzIsMzldLDgzOlsyLDM5XSw4NDpbMiwzOV0sODU6WzIsMzldfSx7MjM6WzIsNDNdLDMzOlsyLDQzXSw1NDpbMiw0M10sNjU6WzIsNDNdLDY4OlsyLDQzXSw3MjpbMiw0M10sNzU6WzIsNDNdLDgwOlsyLDQzXSw4MTpbMiw0M10sODI6WzIsNDNdLDgzOlsyLDQzXSw4NDpbMiw0M10sODU6WzIsNDNdLDg3OlsxLDUwXX0sezcyOlsxLDM1XSw4Njo1MX0sezIzOlsyLDQ1XSwzMzpbMiw0NV0sNTQ6WzIsNDVdLDY1OlsyLDQ1XSw2ODpbMiw0NV0sNzI6WzIsNDVdLDc1OlsyLDQ1XSw4MDpbMiw0NV0sODE6WzIsNDVdLDgyOlsyLDQ1XSw4MzpbMiw0NV0sODQ6WzIsNDVdLDg1OlsyLDQ1XSw4NzpbMiw0NV19LHs1Mjo1Miw1NDpbMiw4Ml0sNjU6WzIsODJdLDcyOlsyLDgyXSw4MDpbMiw4Ml0sODE6WzIsODJdLDgyOlsyLDgyXSw4MzpbMiw4Ml0sODQ6WzIsODJdLDg1OlsyLDgyXX0sezI1OjUzLDM4OjU1LDM5OlsxLDU3XSw0Mzo1Niw0NDpbMSw1OF0sNDU6NTQsNDc6WzIsNTRdfSx7Mjg6NTksNDM6NjAsNDQ6WzEsNThdLDQ3OlsyLDU2XX0sezEzOjYyLDE1OlsxLDIwXSwxODpbMSw2MV19LHszMzpbMiw4Nl0sNTc6NjMsNjU6WzIsODZdLDcyOlsyLDg2XSw4MDpbMiw4Nl0sODE6WzIsODZdLDgyOlsyLDg2XSw4MzpbMiw4Nl0sODQ6WzIsODZdLDg1OlsyLDg2XX0sezMzOlsyLDQwXSw2NTpbMiw0MF0sNzI6WzIsNDBdLDgwOlsyLDQwXSw4MTpbMiw0MF0sODI6WzIsNDBdLDgzOlsyLDQwXSw4NDpbMiw0MF0sODU6WzIsNDBdfSx7MzM6WzIsNDFdLDY1OlsyLDQxXSw3MjpbMiw0MV0sODA6WzIsNDFdLDgxOlsyLDQxXSw4MjpbMiw0MV0sODM6WzIsNDFdLDg0OlsyLDQxXSw4NTpbMiw0MV19LHsyMDo2NCw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyNjo2NSw0NzpbMSw2Nl19LHszMDo2NywzMzpbMiw1OF0sNjU6WzIsNThdLDcyOlsyLDU4XSw3NTpbMiw1OF0sODA6WzIsNThdLDgxOlsyLDU4XSw4MjpbMiw1OF0sODM6WzIsNThdLDg0OlsyLDU4XSw4NTpbMiw1OF19LHszMzpbMiw2NF0sMzU6NjgsNjU6WzIsNjRdLDcyOlsyLDY0XSw3NTpbMiw2NF0sODA6WzIsNjRdLDgxOlsyLDY0XSw4MjpbMiw2NF0sODM6WzIsNjRdLDg0OlsyLDY0XSw4NTpbMiw2NF19LHsyMTo2OSwyMzpbMiw1MF0sNjU6WzIsNTBdLDcyOlsyLDUwXSw4MDpbMiw1MF0sODE6WzIsNTBdLDgyOlsyLDUwXSw4MzpbMiw1MF0sODQ6WzIsNTBdLDg1OlsyLDUwXX0sezMzOlsyLDkwXSw2MTo3MCw2NTpbMiw5MF0sNzI6WzIsOTBdLDgwOlsyLDkwXSw4MTpbMiw5MF0sODI6WzIsOTBdLDgzOlsyLDkwXSw4NDpbMiw5MF0sODU6WzIsOTBdfSx7MjA6NzQsMzM6WzIsODBdLDUwOjcxLDYzOjcyLDY0Ojc1LDY1OlsxLDQzXSw2OTo3Myw3MDo3Niw3MTo3Nyw3MjpbMSw3OF0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs3MjpbMSw3OV19LHsyMzpbMiw0Ml0sMzM6WzIsNDJdLDU0OlsyLDQyXSw2NTpbMiw0Ml0sNjg6WzIsNDJdLDcyOlsyLDQyXSw3NTpbMiw0Ml0sODA6WzIsNDJdLDgxOlsyLDQyXSw4MjpbMiw0Ml0sODM6WzIsNDJdLDg0OlsyLDQyXSw4NTpbMiw0Ml0sODc6WzEsNTBdfSx7MjA6NzQsNTM6ODAsNTQ6WzIsODRdLDYzOjgxLDY0Ojc1LDY1OlsxLDQzXSw2OTo4Miw3MDo3Niw3MTo3Nyw3MjpbMSw3OF0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyNjo4Myw0NzpbMSw2Nl19LHs0NzpbMiw1NV19LHs0Ojg0LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDM5OlsyLDQ2XSw0NDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezQ3OlsyLDIwXX0sezIwOjg1LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezQ6ODYsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sNDc6WzIsNDZdLDQ4OlsyLDQ2XSw1MTpbMiw0Nl0sNTU6WzIsNDZdLDYwOlsyLDQ2XX0sezI2Ojg3LDQ3OlsxLDY2XX0sezQ3OlsyLDU3XX0sezU6WzIsMTFdLDE0OlsyLDExXSwxNTpbMiwxMV0sMTk6WzIsMTFdLDI5OlsyLDExXSwzNDpbMiwxMV0sMzk6WzIsMTFdLDQ0OlsyLDExXSw0NzpbMiwxMV0sNDg6WzIsMTFdLDUxOlsyLDExXSw1NTpbMiwxMV0sNjA6WzIsMTFdfSx7MTU6WzIsNDldLDE4OlsyLDQ5XX0sezIwOjc0LDMzOlsyLDg4XSw1ODo4OCw2Mzo4OSw2NDo3NSw2NTpbMSw0M10sNjk6OTAsNzA6NzYsNzE6NzcsNzI6WzEsNzhdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NjU6WzIsOTRdLDY2OjkxLDY4OlsyLDk0XSw3MjpbMiw5NF0sODA6WzIsOTRdLDgxOlsyLDk0XSw4MjpbMiw5NF0sODM6WzIsOTRdLDg0OlsyLDk0XSw4NTpbMiw5NF19LHs1OlsyLDI1XSwxNDpbMiwyNV0sMTU6WzIsMjVdLDE5OlsyLDI1XSwyOTpbMiwyNV0sMzQ6WzIsMjVdLDM5OlsyLDI1XSw0NDpbMiwyNV0sNDc6WzIsMjVdLDQ4OlsyLDI1XSw1MTpbMiwyNV0sNTU6WzIsMjVdLDYwOlsyLDI1XX0sezIwOjkyLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjc0LDMxOjkzLDMzOlsyLDYwXSw2Mzo5NCw2NDo3NSw2NTpbMSw0M10sNjk6OTUsNzA6NzYsNzE6NzcsNzI6WzEsNzhdLDc1OlsyLDYwXSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjc0LDMzOlsyLDY2XSwzNjo5Niw2Mzo5Nyw2NDo3NSw2NTpbMSw0M10sNjk6OTgsNzA6NzYsNzE6NzcsNzI6WzEsNzhdLDc1OlsyLDY2XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjc0LDIyOjk5LDIzOlsyLDUyXSw2MzoxMDAsNjQ6NzUsNjU6WzEsNDNdLDY5OjEwMSw3MDo3Niw3MTo3Nyw3MjpbMSw3OF0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NCwzMzpbMiw5Ml0sNjI6MTAyLDYzOjEwMyw2NDo3NSw2NTpbMSw0M10sNjk6MTA0LDcwOjc2LDcxOjc3LDcyOlsxLDc4XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezMzOlsxLDEwNV19LHszMzpbMiw3OV0sNjU6WzIsNzldLDcyOlsyLDc5XSw4MDpbMiw3OV0sODE6WzIsNzldLDgyOlsyLDc5XSw4MzpbMiw3OV0sODQ6WzIsNzldLDg1OlsyLDc5XX0sezMzOlsyLDgxXX0sezIzOlsyLDI3XSwzMzpbMiwyN10sNTQ6WzIsMjddLDY1OlsyLDI3XSw2ODpbMiwyN10sNzI6WzIsMjddLDc1OlsyLDI3XSw4MDpbMiwyN10sODE6WzIsMjddLDgyOlsyLDI3XSw4MzpbMiwyN10sODQ6WzIsMjddLDg1OlsyLDI3XX0sezIzOlsyLDI4XSwzMzpbMiwyOF0sNTQ6WzIsMjhdLDY1OlsyLDI4XSw2ODpbMiwyOF0sNzI6WzIsMjhdLDc1OlsyLDI4XSw4MDpbMiwyOF0sODE6WzIsMjhdLDgyOlsyLDI4XSw4MzpbMiwyOF0sODQ6WzIsMjhdLDg1OlsyLDI4XX0sezIzOlsyLDMwXSwzMzpbMiwzMF0sNTQ6WzIsMzBdLDY4OlsyLDMwXSw3MToxMDYsNzI6WzEsMTA3XSw3NTpbMiwzMF19LHsyMzpbMiw5OF0sMzM6WzIsOThdLDU0OlsyLDk4XSw2ODpbMiw5OF0sNzI6WzIsOThdLDc1OlsyLDk4XX0sezIzOlsyLDQ1XSwzMzpbMiw0NV0sNTQ6WzIsNDVdLDY1OlsyLDQ1XSw2ODpbMiw0NV0sNzI6WzIsNDVdLDczOlsxLDEwOF0sNzU6WzIsNDVdLDgwOlsyLDQ1XSw4MTpbMiw0NV0sODI6WzIsNDVdLDgzOlsyLDQ1XSw4NDpbMiw0NV0sODU6WzIsNDVdLDg3OlsyLDQ1XX0sezIzOlsyLDQ0XSwzMzpbMiw0NF0sNTQ6WzIsNDRdLDY1OlsyLDQ0XSw2ODpbMiw0NF0sNzI6WzIsNDRdLDc1OlsyLDQ0XSw4MDpbMiw0NF0sODE6WzIsNDRdLDgyOlsyLDQ0XSw4MzpbMiw0NF0sODQ6WzIsNDRdLDg1OlsyLDQ0XSw4NzpbMiw0NF19LHs1NDpbMSwxMDldfSx7NTQ6WzIsODNdLDY1OlsyLDgzXSw3MjpbMiw4M10sODA6WzIsODNdLDgxOlsyLDgzXSw4MjpbMiw4M10sODM6WzIsODNdLDg0OlsyLDgzXSw4NTpbMiw4M119LHs1NDpbMiw4NV19LHs1OlsyLDEzXSwxNDpbMiwxM10sMTU6WzIsMTNdLDE5OlsyLDEzXSwyOTpbMiwxM10sMzQ6WzIsMTNdLDM5OlsyLDEzXSw0NDpbMiwxM10sNDc6WzIsMTNdLDQ4OlsyLDEzXSw1MTpbMiwxM10sNTU6WzIsMTNdLDYwOlsyLDEzXX0sezM4OjU1LDM5OlsxLDU3XSw0Mzo1Niw0NDpbMSw1OF0sNDU6MTExLDQ2OjExMCw0NzpbMiw3Nl19LHszMzpbMiw3MF0sNDA6MTEyLDY1OlsyLDcwXSw3MjpbMiw3MF0sNzU6WzIsNzBdLDgwOlsyLDcwXSw4MTpbMiw3MF0sODI6WzIsNzBdLDgzOlsyLDcwXSw4NDpbMiw3MF0sODU6WzIsNzBdfSx7NDc6WzIsMThdfSx7NTpbMiwxNF0sMTQ6WzIsMTRdLDE1OlsyLDE0XSwxOTpbMiwxNF0sMjk6WzIsMTRdLDM0OlsyLDE0XSwzOTpbMiwxNF0sNDQ6WzIsMTRdLDQ3OlsyLDE0XSw0ODpbMiwxNF0sNTE6WzIsMTRdLDU1OlsyLDE0XSw2MDpbMiwxNF19LHszMzpbMSwxMTNdfSx7MzM6WzIsODddLDY1OlsyLDg3XSw3MjpbMiw4N10sODA6WzIsODddLDgxOlsyLDg3XSw4MjpbMiw4N10sODM6WzIsODddLDg0OlsyLDg3XSw4NTpbMiw4N119LHszMzpbMiw4OV19LHsyMDo3NCw2MzoxMTUsNjQ6NzUsNjU6WzEsNDNdLDY3OjExNCw2ODpbMiw5Nl0sNjk6MTE2LDcwOjc2LDcxOjc3LDcyOlsxLDc4XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezMzOlsxLDExN119LHszMjoxMTgsMzM6WzIsNjJdLDc0OjExOSw3NTpbMSwxMjBdfSx7MzM6WzIsNTldLDY1OlsyLDU5XSw3MjpbMiw1OV0sNzU6WzIsNTldLDgwOlsyLDU5XSw4MTpbMiw1OV0sODI6WzIsNTldLDgzOlsyLDU5XSw4NDpbMiw1OV0sODU6WzIsNTldfSx7MzM6WzIsNjFdLDc1OlsyLDYxXX0sezMzOlsyLDY4XSwzNzoxMjEsNzQ6MTIyLDc1OlsxLDEyMF19LHszMzpbMiw2NV0sNjU6WzIsNjVdLDcyOlsyLDY1XSw3NTpbMiw2NV0sODA6WzIsNjVdLDgxOlsyLDY1XSw4MjpbMiw2NV0sODM6WzIsNjVdLDg0OlsyLDY1XSw4NTpbMiw2NV19LHszMzpbMiw2N10sNzU6WzIsNjddfSx7MjM6WzEsMTIzXX0sezIzOlsyLDUxXSw2NTpbMiw1MV0sNzI6WzIsNTFdLDgwOlsyLDUxXSw4MTpbMiw1MV0sODI6WzIsNTFdLDgzOlsyLDUxXSw4NDpbMiw1MV0sODU6WzIsNTFdfSx7MjM6WzIsNTNdfSx7MzM6WzEsMTI0XX0sezMzOlsyLDkxXSw2NTpbMiw5MV0sNzI6WzIsOTFdLDgwOlsyLDkxXSw4MTpbMiw5MV0sODI6WzIsOTFdLDgzOlsyLDkxXSw4NDpbMiw5MV0sODU6WzIsOTFdfSx7MzM6WzIsOTNdfSx7NTpbMiwyMl0sMTQ6WzIsMjJdLDE1OlsyLDIyXSwxOTpbMiwyMl0sMjk6WzIsMjJdLDM0OlsyLDIyXSwzOTpbMiwyMl0sNDQ6WzIsMjJdLDQ3OlsyLDIyXSw0ODpbMiwyMl0sNTE6WzIsMjJdLDU1OlsyLDIyXSw2MDpbMiwyMl19LHsyMzpbMiw5OV0sMzM6WzIsOTldLDU0OlsyLDk5XSw2ODpbMiw5OV0sNzI6WzIsOTldLDc1OlsyLDk5XX0sezczOlsxLDEwOF19LHsyMDo3NCw2MzoxMjUsNjQ6NzUsNjU6WzEsNDNdLDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezU6WzIsMjNdLDE0OlsyLDIzXSwxNTpbMiwyM10sMTk6WzIsMjNdLDI5OlsyLDIzXSwzNDpbMiwyM10sMzk6WzIsMjNdLDQ0OlsyLDIzXSw0NzpbMiwyM10sNDg6WzIsMjNdLDUxOlsyLDIzXSw1NTpbMiwyM10sNjA6WzIsMjNdfSx7NDc6WzIsMTldfSx7NDc6WzIsNzddfSx7MjA6NzQsMzM6WzIsNzJdLDQxOjEyNiw2MzoxMjcsNjQ6NzUsNjU6WzEsNDNdLDY5OjEyOCw3MDo3Niw3MTo3Nyw3MjpbMSw3OF0sNzU6WzIsNzJdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NTpbMiwyNF0sMTQ6WzIsMjRdLDE1OlsyLDI0XSwxOTpbMiwyNF0sMjk6WzIsMjRdLDM0OlsyLDI0XSwzOTpbMiwyNF0sNDQ6WzIsMjRdLDQ3OlsyLDI0XSw0ODpbMiwyNF0sNTE6WzIsMjRdLDU1OlsyLDI0XSw2MDpbMiwyNF19LHs2ODpbMSwxMjldfSx7NjU6WzIsOTVdLDY4OlsyLDk1XSw3MjpbMiw5NV0sODA6WzIsOTVdLDgxOlsyLDk1XSw4MjpbMiw5NV0sODM6WzIsOTVdLDg0OlsyLDk1XSw4NTpbMiw5NV19LHs2ODpbMiw5N119LHs1OlsyLDIxXSwxNDpbMiwyMV0sMTU6WzIsMjFdLDE5OlsyLDIxXSwyOTpbMiwyMV0sMzQ6WzIsMjFdLDM5OlsyLDIxXSw0NDpbMiwyMV0sNDc6WzIsMjFdLDQ4OlsyLDIxXSw1MTpbMiwyMV0sNTU6WzIsMjFdLDYwOlsyLDIxXX0sezMzOlsxLDEzMF19LHszMzpbMiw2M119LHs3MjpbMSwxMzJdLDc2OjEzMX0sezMzOlsxLDEzM119LHszMzpbMiw2OV19LHsxNTpbMiwxMl0sMTg6WzIsMTJdfSx7MTQ6WzIsMjZdLDE1OlsyLDI2XSwxOTpbMiwyNl0sMjk6WzIsMjZdLDM0OlsyLDI2XSw0NzpbMiwyNl0sNDg6WzIsMjZdLDUxOlsyLDI2XSw1NTpbMiwyNl0sNjA6WzIsMjZdfSx7MjM6WzIsMzFdLDMzOlsyLDMxXSw1NDpbMiwzMV0sNjg6WzIsMzFdLDcyOlsyLDMxXSw3NTpbMiwzMV19LHszMzpbMiw3NF0sNDI6MTM0LDc0OjEzNSw3NTpbMSwxMjBdfSx7MzM6WzIsNzFdLDY1OlsyLDcxXSw3MjpbMiw3MV0sNzU6WzIsNzFdLDgwOlsyLDcxXSw4MTpbMiw3MV0sODI6WzIsNzFdLDgzOlsyLDcxXSw4NDpbMiw3MV0sODU6WzIsNzFdfSx7MzM6WzIsNzNdLDc1OlsyLDczXX0sezIzOlsyLDI5XSwzMzpbMiwyOV0sNTQ6WzIsMjldLDY1OlsyLDI5XSw2ODpbMiwyOV0sNzI6WzIsMjldLDc1OlsyLDI5XSw4MDpbMiwyOV0sODE6WzIsMjldLDgyOlsyLDI5XSw4MzpbMiwyOV0sODQ6WzIsMjldLDg1OlsyLDI5XX0sezE0OlsyLDE1XSwxNTpbMiwxNV0sMTk6WzIsMTVdLDI5OlsyLDE1XSwzNDpbMiwxNV0sMzk6WzIsMTVdLDQ0OlsyLDE1XSw0NzpbMiwxNV0sNDg6WzIsMTVdLDUxOlsyLDE1XSw1NTpbMiwxNV0sNjA6WzIsMTVdfSx7NzI6WzEsMTM3XSw3NzpbMSwxMzZdfSx7NzI6WzIsMTAwXSw3NzpbMiwxMDBdfSx7MTQ6WzIsMTZdLDE1OlsyLDE2XSwxOTpbMiwxNl0sMjk6WzIsMTZdLDM0OlsyLDE2XSw0NDpbMiwxNl0sNDc6WzIsMTZdLDQ4OlsyLDE2XSw1MTpbMiwxNl0sNTU6WzIsMTZdLDYwOlsyLDE2XX0sezMzOlsxLDEzOF19LHszMzpbMiw3NV19LHszMzpbMiwzMl19LHs3MjpbMiwxMDFdLDc3OlsyLDEwMV19LHsxNDpbMiwxN10sMTU6WzIsMTddLDE5OlsyLDE3XSwyOTpbMiwxN10sMzQ6WzIsMTddLDM5OlsyLDE3XSw0NDpbMiwxN10sNDc6WzIsMTddLDQ4OlsyLDE3XSw1MTpbMiwxN10sNTU6WzIsMTddLDYwOlsyLDE3XX1dLFxuZGVmYXVsdEFjdGlvbnM6IHs0OlsyLDFdLDU0OlsyLDU1XSw1NjpbMiwyMF0sNjA6WzIsNTddLDczOlsyLDgxXSw4MjpbMiw4NV0sODY6WzIsMThdLDkwOlsyLDg5XSwxMDE6WzIsNTNdLDEwNDpbMiw5M10sMTEwOlsyLDE5XSwxMTE6WzIsNzddLDExNjpbMiw5N10sMTE5OlsyLDYzXSwxMjI6WzIsNjldLDEzNTpbMiw3NV0sMTM2OlsyLDMyXX0sXG5wYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yIChzdHIsIGhhc2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbn0sXG5wYXJzZTogZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsIHN0YWNrID0gWzBdLCB2c3RhY2sgPSBbbnVsbF0sIGxzdGFjayA9IFtdLCB0YWJsZSA9IHRoaXMudGFibGUsIHl5dGV4dCA9IFwiXCIsIHl5bGluZW5vID0gMCwgeXlsZW5nID0gMCwgcmVjb3ZlcmluZyA9IDAsIFRFUlJPUiA9IDIsIEVPRiA9IDE7XG4gICAgdGhpcy5sZXhlci5zZXRJbnB1dChpbnB1dCk7XG4gICAgdGhpcy5sZXhlci55eSA9IHRoaXMueXk7XG4gICAgdGhpcy55eS5sZXhlciA9IHRoaXMubGV4ZXI7XG4gICAgdGhpcy55eS5wYXJzZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGhpcy5sZXhlci55eWxsb2MgPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgdGhpcy5sZXhlci55eWxsb2MgPSB7fTtcbiAgICB2YXIgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcbiAgICBsc3RhY2sucHVzaCh5eWxvYyk7XG4gICAgdmFyIHJhbmdlcyA9IHRoaXMubGV4ZXIub3B0aW9ucyAmJiB0aGlzLmxleGVyLm9wdGlvbnMucmFuZ2VzO1xuICAgIGlmICh0eXBlb2YgdGhpcy55eS5wYXJzZUVycm9yID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRoaXMueXkucGFyc2VFcnJvcjtcbiAgICBmdW5jdGlvbiBwb3BTdGFjayhuKSB7XG4gICAgICAgIHN0YWNrLmxlbmd0aCA9IHN0YWNrLmxlbmd0aCAtIDIgKiBuO1xuICAgICAgICB2c3RhY2subGVuZ3RoID0gdnN0YWNrLmxlbmd0aCAtIG47XG4gICAgICAgIGxzdGFjay5sZW5ndGggPSBsc3RhY2subGVuZ3RoIC0gbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgIHRva2VuID0gc2VsZi5sZXhlci5sZXgoKSB8fCAxO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHNlbGYuc3ltYm9sc19bdG9rZW5dIHx8IHRva2VuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgdmFyIHN5bWJvbCwgcHJlRXJyb3JTeW1ib2wsIHN0YXRlLCBhY3Rpb24sIGEsIHIsIHl5dmFsID0ge30sIHAsIGxlbiwgbmV3U3RhdGUsIGV4cGVjdGVkO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXSkge1xuICAgICAgICAgICAgYWN0aW9uID0gdGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3ltYm9sID09PSBudWxsIHx8IHR5cGVvZiBzeW1ib2wgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHN5bWJvbCA9IGxleCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aW9uID0gdGFibGVbc3RhdGVdICYmIHRhYmxlW3N0YXRlXVtzeW1ib2xdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcInVuZGVmaW5lZFwiIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHtcbiAgICAgICAgICAgIHZhciBlcnJTdHIgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKCFyZWNvdmVyaW5nKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHAgaW4gdGFibGVbc3RhdGVdKVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXJtaW5hbHNfW3BdICYmIHAgPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZC5wdXNoKFwiJ1wiICsgdGhpcy50ZXJtaW5hbHNfW3BdICsgXCInXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyclN0ciA9IFwiUGFyc2UgZXJyb3Igb24gbGluZSBcIiArICh5eWxpbmVubyArIDEpICsgXCI6XFxuXCIgKyB0aGlzLmxleGVyLnNob3dQb3NpdGlvbigpICsgXCJcXG5FeHBlY3RpbmcgXCIgKyBleHBlY3RlZC5qb2luKFwiLCBcIikgKyBcIiwgZ290ICdcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjogVW5leHBlY3RlZCBcIiArIChzeW1ib2wgPT0gMT9cImVuZCBvZiBpbnB1dFwiOlwiJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsIHt0ZXh0OiB0aGlzLmxleGVyLm1hdGNoLCB0b2tlbjogdGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sLCBsaW5lOiB0aGlzLmxleGVyLnl5bGluZW5vLCBsb2M6IHl5bG9jLCBleHBlY3RlZDogZXhwZWN0ZWR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiBcIiArIHN0YXRlICsgXCIsIHRva2VuOiBcIiArIHN5bWJvbCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChhY3Rpb25bMF0pIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgc3RhY2sucHVzaChzeW1ib2wpO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2godGhpcy5sZXhlci55eXRleHQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2godGhpcy5sZXhlci55eWxsb2MpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChhY3Rpb25bMV0pO1xuICAgICAgICAgICAgc3ltYm9sID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghcHJlRXJyb3JTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICB5eWxlbmcgPSB0aGlzLmxleGVyLnl5bGVuZztcbiAgICAgICAgICAgICAgICB5eXRleHQgPSB0aGlzLmxleGVyLnl5dGV4dDtcbiAgICAgICAgICAgICAgICB5eWxpbmVubyA9IHRoaXMubGV4ZXIueXlsaW5lbm87XG4gICAgICAgICAgICAgICAgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcbiAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcmluZyA+IDApXG4gICAgICAgICAgICAgICAgICAgIHJlY292ZXJpbmctLTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gcHJlRXJyb3JTeW1ib2w7XG4gICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMV07XG4gICAgICAgICAgICB5eXZhbC4kID0gdnN0YWNrW3ZzdGFjay5sZW5ndGggLSBsZW5dO1xuICAgICAgICAgICAgeXl2YWwuXyQgPSB7Zmlyc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9saW5lLCBsYXN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9saW5lLCBmaXJzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfY29sdW1uLCBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2NvbHVtbn07XG4gICAgICAgICAgICBpZiAocmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgeXl2YWwuXyQucmFuZ2UgPSBbbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5yYW5nZVswXSwgbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5yYW5nZVsxXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgdGhpcy55eSwgYWN0aW9uWzFdLCB2c3RhY2ssIGxzdGFjayk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIC0xICogbGVuICogMik7XG4gICAgICAgICAgICAgICAgdnN0YWNrID0gdnN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcbiAgICAgICAgICAgICAgICBsc3RhY2sgPSBsc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2sucHVzaCh0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzBdKTtcbiAgICAgICAgICAgIHZzdGFjay5wdXNoKHl5dmFsLiQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2goeXl2YWwuXyQpO1xuICAgICAgICAgICAgbmV3U3RhdGUgPSB0YWJsZVtzdGFja1tzdGFjay5sZW5ndGggLSAyXV1bc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1dO1xuICAgICAgICAgICAgc3RhY2sucHVzaChuZXdTdGF0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG59O1xuLyogSmlzb24gZ2VuZXJhdGVkIGxleGVyICovXG52YXIgbGV4ZXIgPSAoZnVuY3Rpb24oKXtcbnZhciBsZXhlciA9ICh7RU9GOjEsXG5wYXJzZUVycm9yOmZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgICAgIGlmICh0aGlzLnl5LnBhcnNlcikge1xuICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvcihzdHIsIGhhc2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG4gICAgICAgIH1cbiAgICB9LFxuc2V0SW5wdXQ6ZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0aGlzLl9sZXNzID0gdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMueXlsaW5lbm8gPSB0aGlzLnl5bGVuZyA9IDA7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaCA9ICcnO1xuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrID0gWydJTklUSUFMJ107XG4gICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6MSxmaXJzdF9jb2x1bW46MCxsYXN0X2xpbmU6MSxsYXN0X2NvbHVtbjowfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlID0gWzAsMF07XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbmlucHV0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNoID0gdGhpcy5faW5wdXRbMF07XG4gICAgICAgIHRoaXMueXl0ZXh0ICs9IGNoO1xuICAgICAgICB0aGlzLnl5bGVuZysrO1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICB0aGlzLm1hdGNoICs9IGNoO1xuICAgICAgICB0aGlzLm1hdGNoZWQgKz0gY2g7XG4gICAgICAgIHZhciBsaW5lcyA9IGNoLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcbiAgICAgICAgaWYgKGxpbmVzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGluZW5vKys7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2xpbmUrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG51bnB1dDpmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IGNoICsgdGhpcy5faW5wdXQ7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aC1sZW4tMSk7XG4gICAgICAgIC8vdGhpcy55eWxlbmcgLT0gbGVuO1xuICAgICAgICB0aGlzLm9mZnNldCAtPSBsZW47XG4gICAgICAgIHZhciBvbGRMaW5lcyA9IHRoaXMubWF0Y2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcbiAgICAgICAgdGhpcy5tYXRjaCA9IHRoaXMubWF0Y2guc3Vic3RyKDAsIHRoaXMubWF0Y2gubGVuZ3RoLTEpO1xuICAgICAgICB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGgtMSk7XG5cbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aC0xKSB0aGlzLnl5bGluZW5vIC09IGxpbmVzLmxlbmd0aC0xO1xuICAgICAgICB2YXIgciA9IHRoaXMueXlsbG9jLnJhbmdlO1xuXG4gICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmZpcnN0X2xpbmUsXG4gICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vKzEsXG4gICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID9cbiAgICAgICAgICAgICAgKGxpbmVzLmxlbmd0aCA9PT0gb2xkTGluZXMubGVuZ3RoID8gdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIDogMCkgKyBvbGRMaW5lc1tvbGRMaW5lcy5sZW5ndGggLSBsaW5lcy5sZW5ndGhdLmxlbmd0aCAtIGxpbmVzWzBdLmxlbmd0aDpcbiAgICAgICAgICAgICAgdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIC0gbGVuXG4gICAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbclswXSwgclswXSArIHRoaXMueXlsZW5nIC0gbGVuXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxubW9yZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxubGVzczpmdW5jdGlvbiAobikge1xuICAgICAgICB0aGlzLnVucHV0KHRoaXMubWF0Y2guc2xpY2UobikpO1xuICAgIH0sXG5wYXN0SW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIChwYXN0Lmxlbmd0aCA+IDIwID8gJy4uLic6JycpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcbnVwY29taW5nSW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dCA9IHRoaXMubWF0Y2g7XG4gICAgICAgIGlmIChuZXh0Lmxlbmd0aCA8IDIwKSB7XG4gICAgICAgICAgICBuZXh0ICs9IHRoaXMuX2lucHV0LnN1YnN0cigwLCAyMC1uZXh0Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChuZXh0LnN1YnN0cigwLDIwKSsobmV4dC5sZW5ndGggPiAyMCA/ICcuLi4nOicnKSkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgIH0sXG5zaG93UG9zaXRpb246ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJlID0gdGhpcy5wYXN0SW5wdXQoKTtcbiAgICAgICAgdmFyIGMgPSBuZXcgQXJyYXkocHJlLmxlbmd0aCArIDEpLmpvaW4oXCItXCIpO1xuICAgICAgICByZXR1cm4gcHJlICsgdGhpcy51cGNvbWluZ0lucHV0KCkgKyBcIlxcblwiICsgYytcIl5cIjtcbiAgICB9LFxubmV4dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICAgIHZhciB0b2tlbixcbiAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgdGVtcE1hdGNoLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICBsaW5lcztcbiAgICAgICAgaWYgKCF0aGlzLl9tb3JlKSB7XG4gICAgICAgICAgICB0aGlzLnl5dGV4dCA9ICcnO1xuICAgICAgICAgICAgdGhpcy5tYXRjaCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuICAgICAgICBmb3IgKHZhciBpPTA7aSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0ZW1wTWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaCh0aGlzLnJ1bGVzW3J1bGVzW2ldXSk7XG4gICAgICAgICAgICBpZiAodGVtcE1hdGNoICYmICghbWF0Y2ggfHwgdGVtcE1hdGNoWzBdLmxlbmd0aCA+IG1hdGNoWzBdLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRlbXBNYXRjaDtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmxleCkgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBsaW5lcyA9IG1hdGNoWzBdLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcbiAgICAgICAgICAgIGlmIChsaW5lcykgdGhpcy55eWxpbmVubyArPSBsaW5lcy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHtmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5sYXN0X2xpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8rMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGgtMV0ubGVuZ3RoLWxpbmVzW2xpbmVzLmxlbmd0aC0xXS5tYXRjaCgvXFxyP1xcbj8vKVswXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aH07XG4gICAgICAgICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHRoaXMubWF0Y2ggKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBtYXRjaDtcbiAgICAgICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFt0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKz0gdGhpcy55eWxlbmddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbW9yZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh0aGlzLCB0aGlzLnl5LCB0aGlzLCBydWxlc1tpbmRleF0sdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0xXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5kb25lICYmIHRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0b2tlbikgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKCdMZXhpY2FsIGVycm9yIG9uIGxpbmUgJysodGhpcy55eWxpbmVubysxKSsnLiBVbnJlY29nbml6ZWQgdGV4dC5cXG4nK3RoaXMuc2hvd1Bvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIHt0ZXh0OiBcIlwiLCB0b2tlbjogbnVsbCwgbGluZTogdGhpcy55eWxpbmVub30pO1xuICAgICAgICB9XG4gICAgfSxcbmxleDpmdW5jdGlvbiBsZXggKCkge1xuICAgICAgICB2YXIgciA9IHRoaXMubmV4dCgpO1xuICAgICAgICBpZiAodHlwZW9mIHIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxleCgpO1xuICAgICAgICB9XG4gICAgfSxcbmJlZ2luOmZ1bmN0aW9uIGJlZ2luIChjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XG4gICAgfSxcbnBvcFN0YXRlOmZ1bmN0aW9uIHBvcFN0YXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG4gICAgfSxcbl9jdXJyZW50UnVsZXM6ZnVuY3Rpb24gX2N1cnJlbnRSdWxlcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvbnNbdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0xXV0ucnVsZXM7XG4gICAgfSxcbnRvcFN0YXRlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgtMl07XG4gICAgfSxcbnB1c2hTdGF0ZTpmdW5jdGlvbiBiZWdpbiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHRoaXMuYmVnaW4oY29uZGl0aW9uKTtcbiAgICB9fSk7XG5sZXhlci5vcHRpb25zID0ge307XG5sZXhlci5wZXJmb3JtQWN0aW9uID0gZnVuY3Rpb24gYW5vbnltb3VzKHl5LHl5XywkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLFlZX1NUQVJUXG4pIHtcblxuXG5mdW5jdGlvbiBzdHJpcChzdGFydCwgZW5kKSB7XG4gIHJldHVybiB5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5zdWJzdHJpbmcoc3RhcnQsIHl5Xy55eWxlbmcgLSBlbmQgKyBzdGFydCk7XG59XG5cblxudmFyIFlZU1RBVEU9WVlfU1RBUlRcbnN3aXRjaCgkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zKSB7XG5jYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHl5Xy55eXRleHQuc2xpY2UoLTIpID09PSBcIlxcXFxcXFxcXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcCgwLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJtdVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHl5Xy55eXRleHQuc2xpY2UoLTEpID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcImVtdVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwibXVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeXlfLnl5dGV4dCkgcmV0dXJuIDE1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMTpyZXR1cm4gMTU7XG5icmVhaztcbmNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAzOnRoaXMuYmVnaW4oJ3JhdycpOyByZXR1cm4gMTU7XG5icmVhaztcbmNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdWxkIGJlIHVzaW5nIGB0aGlzLnRvcFN0YXRlKClgIGJlbG93LCBidXQgaXQgY3VycmVudGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyB0aGUgc2Vjb25kIHRvcCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCB0b3AuIE9wZW5lZCBhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzc3VlIGFib3V0IGl0IGF0IGh0dHBzOi8vZ2l0aHViLmNvbS96YWFjaC9qaXNvbi9pc3N1ZXMvMjkxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgtMV0gPT09ICdyYXcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDUsIDkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdFTkRfUkFXX0JMT0NLJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSA1OiByZXR1cm4gMTU7IFxuYnJlYWs7XG5jYXNlIDY6XG4gIHRoaXMucG9wU3RhdGUoKTtcbiAgcmV0dXJuIDE0O1xuXG5icmVhaztcbmNhc2UgNzpyZXR1cm4gNjU7XG5icmVhaztcbmNhc2UgODpyZXR1cm4gNjg7XG5icmVhaztcbmNhc2UgOTogcmV0dXJuIDE5OyBcbmJyZWFrO1xuY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbigncmF3Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMTE6cmV0dXJuIDU1O1xuYnJlYWs7XG5jYXNlIDEyOnJldHVybiA2MDtcbmJyZWFrO1xuY2FzZSAxMzpyZXR1cm4gMjk7XG5icmVhaztcbmNhc2UgMTQ6cmV0dXJuIDQ3O1xuYnJlYWs7XG5jYXNlIDE1OnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDQ0O1xuYnJlYWs7XG5jYXNlIDE2OnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDQ0O1xuYnJlYWs7XG5jYXNlIDE3OnJldHVybiAzNDtcbmJyZWFrO1xuY2FzZSAxODpyZXR1cm4gMzk7XG5icmVhaztcbmNhc2UgMTk6cmV0dXJuIDUxO1xuYnJlYWs7XG5jYXNlIDIwOnJldHVybiA0ODtcbmJyZWFrO1xuY2FzZSAyMTpcbiAgdGhpcy51bnB1dCh5eV8ueXl0ZXh0KTtcbiAgdGhpcy5wb3BTdGF0ZSgpO1xuICB0aGlzLmJlZ2luKCdjb20nKTtcblxuYnJlYWs7XG5jYXNlIDIyOlxuICB0aGlzLnBvcFN0YXRlKCk7XG4gIHJldHVybiAxNDtcblxuYnJlYWs7XG5jYXNlIDIzOnJldHVybiA0ODtcbmJyZWFrO1xuY2FzZSAyNDpyZXR1cm4gNzM7XG5icmVhaztcbmNhc2UgMjU6cmV0dXJuIDcyO1xuYnJlYWs7XG5jYXNlIDI2OnJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSAyNzpyZXR1cm4gODc7XG5icmVhaztcbmNhc2UgMjg6Ly8gaWdub3JlIHdoaXRlc3BhY2VcbmJyZWFrO1xuY2FzZSAyOTp0aGlzLnBvcFN0YXRlKCk7IHJldHVybiA1NDtcbmJyZWFrO1xuY2FzZSAzMDp0aGlzLnBvcFN0YXRlKCk7IHJldHVybiAzMztcbmJyZWFrO1xuY2FzZSAzMTp5eV8ueXl0ZXh0ID0gc3RyaXAoMSwyKS5yZXBsYWNlKC9cXFxcXCIvZywnXCInKTsgcmV0dXJuIDgwO1xuYnJlYWs7XG5jYXNlIDMyOnl5Xy55eXRleHQgPSBzdHJpcCgxLDIpLnJlcGxhY2UoL1xcXFwnL2csXCInXCIpOyByZXR1cm4gODA7XG5icmVhaztcbmNhc2UgMzM6cmV0dXJuIDg1O1xuYnJlYWs7XG5jYXNlIDM0OnJldHVybiA4MjtcbmJyZWFrO1xuY2FzZSAzNTpyZXR1cm4gODI7XG5icmVhaztcbmNhc2UgMzY6cmV0dXJuIDgzO1xuYnJlYWs7XG5jYXNlIDM3OnJldHVybiA4NDtcbmJyZWFrO1xuY2FzZSAzODpyZXR1cm4gODE7XG5icmVhaztcbmNhc2UgMzk6cmV0dXJuIDc1O1xuYnJlYWs7XG5jYXNlIDQwOnJldHVybiA3NztcbmJyZWFrO1xuY2FzZSA0MTpyZXR1cm4gNzI7XG5icmVhaztcbmNhc2UgNDI6eXlfLnl5dGV4dCA9IHl5Xy55eXRleHQucmVwbGFjZSgvXFxcXChbXFxcXFxcXV0pL2csJyQxJyk7IHJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSA0MzpyZXR1cm4gJ0lOVkFMSUQnO1xuYnJlYWs7XG5jYXNlIDQ0OnJldHVybiA1O1xuYnJlYWs7XG59XG59O1xubGV4ZXIucnVsZXMgPSBbL14oPzpbXlxceDAwXSo/KD89KFxce1xceykpKS8sL14oPzpbXlxceDAwXSspLywvXig/OlteXFx4MDBdezIsfT8oPz0oXFx7XFx7fFxcXFxcXHtcXHt8XFxcXFxcXFxcXHtcXHt8JCkpKS8sL14oPzpcXHtcXHtcXHtcXHsoPz1bXi9dKSkvLC9eKD86XFx7XFx7XFx7XFx7XFwvW15cXHMhXCIjJS0sXFwuXFwvOy0+QFxcWy1cXF5gXFx7LX5dKyg/PVs9fVxcc1xcLy5dKVxcfVxcfVxcfVxcfSkvLC9eKD86W15cXHgwMF0rPyg/PShcXHtcXHtcXHtcXHspKSkvLC9eKD86W1xcc1xcU10qPy0tKH4pP1xcfVxcfSkvLC9eKD86XFwoKS8sL14oPzpcXCkpLywvXig/Olxce1xce1xce1xceykvLC9eKD86XFx9XFx9XFx9XFx9KS8sL14oPzpcXHtcXHsofik/PikvLC9eKD86XFx7XFx7KH4pPyM+KS8sL14oPzpcXHtcXHsofik/I1xcKj8pLywvXig/Olxce1xceyh+KT9cXC8pLywvXig/Olxce1xceyh+KT9cXF5cXHMqKH4pP1xcfVxcfSkvLC9eKD86XFx7XFx7KH4pP1xccyplbHNlXFxzKih+KT9cXH1cXH0pLywvXig/Olxce1xceyh+KT9cXF4pLywvXig/Olxce1xceyh+KT9cXHMqZWxzZVxcYikvLC9eKD86XFx7XFx7KH4pP1xceykvLC9eKD86XFx7XFx7KH4pPyYpLywvXig/Olxce1xceyh+KT8hLS0pLywvXig/Olxce1xceyh+KT8hW1xcc1xcU10qP1xcfVxcfSkvLC9eKD86XFx7XFx7KH4pP1xcKj8pLywvXig/Oj0pLywvXig/OlxcLlxcLikvLC9eKD86XFwuKD89KFs9fn1cXHNcXC8uKXxdKSkpLywvXig/OltcXC8uXSkvLC9eKD86XFxzKykvLC9eKD86XFx9KH4pP1xcfVxcfSkvLC9eKD86KH4pP1xcfVxcfSkvLC9eKD86XCIoXFxcXFtcIl18W15cIl0pKlwiKS8sL14oPzonKFxcXFxbJ118W14nXSkqJykvLC9eKD86QCkvLC9eKD86dHJ1ZSg/PShbfn1cXHMpXSkpKS8sL14oPzpmYWxzZSg/PShbfn1cXHMpXSkpKS8sL14oPzp1bmRlZmluZWQoPz0oW359XFxzKV0pKSkvLC9eKD86bnVsbCg/PShbfn1cXHMpXSkpKS8sL14oPzotP1swLTldKyg/OlxcLlswLTldKyk/KD89KFt+fVxccyldKSkpLywvXig/OmFzXFxzK1xcfCkvLC9eKD86XFx8KS8sL14oPzooW15cXHMhXCIjJS0sXFwuXFwvOy0+QFxcWy1cXF5gXFx7LX5dKyg/PShbPX59XFxzXFwvLil8XSkpKSkvLC9eKD86XFxbKFxcXFxcXF18W15cXF1dKSpcXF0pLywvXig/Oi4pLywvXig/OiQpL107XG5sZXhlci5jb25kaXRpb25zID0ge1wibXVcIjp7XCJydWxlc1wiOls3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NF0sXCJpbmNsdXNpdmVcIjpmYWxzZX0sXCJlbXVcIjp7XCJydWxlc1wiOlsyXSxcImluY2x1c2l2ZVwiOmZhbHNlfSxcImNvbVwiOntcInJ1bGVzXCI6WzZdLFwiaW5jbHVzaXZlXCI6ZmFsc2V9LFwicmF3XCI6e1wicnVsZXNcIjpbMyw0LDVdLFwiaW5jbHVzaXZlXCI6ZmFsc2V9LFwiSU5JVElBTFwiOntcInJ1bGVzXCI6WzAsMSw0NF0sXCJpbmNsdXNpdmVcIjp0cnVlfX07XG5yZXR1cm4gbGV4ZXI7fSkoKVxucGFyc2VyLmxleGVyID0gbGV4ZXI7XG5mdW5jdGlvbiBQYXJzZXIgKCkgeyB0aGlzLnl5ID0ge307IH1QYXJzZXIucHJvdG90eXBlID0gcGFyc2VyO3BhcnNlci5QYXJzZXIgPSBQYXJzZXI7XG5yZXR1cm4gbmV3IFBhcnNlcjtcbn0pKCk7ZXhwb3J0IGRlZmF1bHQgaGFuZGxlYmFycztcbiIsICJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmZ1bmN0aW9uIFZpc2l0b3IoKSB7XG4gIHRoaXMucGFyZW50cyA9IFtdO1xufVxuXG5WaXNpdG9yLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFZpc2l0b3IsXG4gIG11dGF0aW5nOiBmYWxzZSxcblxuICAvLyBWaXNpdHMgYSBnaXZlbiB2YWx1ZS4gSWYgbXV0YXRpbmcsIHdpbGwgcmVwbGFjZSB0aGUgdmFsdWUgaWYgbmVjZXNzYXJ5LlxuICBhY2NlcHRLZXk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmFjY2VwdChub2RlW25hbWVdKTtcbiAgICBpZiAodGhpcy5tdXRhdGluZykge1xuICAgICAgLy8gSGFja3kgc2FuaXR5IGNoZWNrOiBUaGlzIG1heSBoYXZlIGEgZmV3IGZhbHNlIHBvc2l0aXZlcyBmb3IgdHlwZSBmb3IgdGhlIGhlbHBlclxuICAgICAgLy8gbWV0aG9kcyBidXQgd2lsbCBnZW5lcmFsbHkgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGhvdXQgYSBsb3Qgb2Ygb3ZlcmhlYWQuXG4gICAgICBpZiAodmFsdWUgJiYgIVZpc2l0b3IucHJvdG90eXBlW3ZhbHVlLnR5cGVdKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICAgJ1VuZXhwZWN0ZWQgbm9kZSB0eXBlIFwiJyArXG4gICAgICAgICAgICB2YWx1ZS50eXBlICtcbiAgICAgICAgICAgICdcIiBmb3VuZCB3aGVuIGFjY2VwdGluZyAnICtcbiAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgJyBvbiAnICtcbiAgICAgICAgICAgIG5vZGUudHlwZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbm9kZVtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICAvLyBQZXJmb3JtcyBhbiBhY2NlcHQgb3BlcmF0aW9uIHdpdGggYWRkZWQgc2FuaXR5IGNoZWNrIHRvIGVuc3VyZVxuICAvLyByZXF1aXJlZCBrZXlzIGFyZSBub3QgcmVtb3ZlZC5cbiAgYWNjZXB0UmVxdWlyZWQ6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICB0aGlzLmFjY2VwdEtleShub2RlLCBuYW1lKTtcblxuICAgIGlmICghbm9kZVtuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihub2RlLnR5cGUgKyAnIHJlcXVpcmVzICcgKyBuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVHJhdmVyc2VzIGEgZ2l2ZW4gYXJyYXkuIElmIG11dGF0aW5nLCBlbXB0eSByZXNwbnNlcyB3aWxsIGJlIHJlbW92ZWRcbiAgLy8gZm9yIGNoaWxkIGVsZW1lbnRzLlxuICBhY2NlcHRBcnJheTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5hY2NlcHRLZXkoYXJyYXksIGkpO1xuXG4gICAgICBpZiAoIWFycmF5W2ldKSB7XG4gICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBsLS07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFjY2VwdDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cbiAgICBpZiAoIXRoaXNbb2JqZWN0LnR5cGVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHR5cGU6ICcgKyBvYmplY3QudHlwZSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jdXJyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudHMudW5zaGlmdCh0aGlzLmN1cnJlbnQpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQgPSBvYmplY3Q7XG5cbiAgICBsZXQgcmV0ID0gdGhpc1tvYmplY3QudHlwZV0ob2JqZWN0KTtcblxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMucGFyZW50cy5zaGlmdCgpO1xuXG4gICAgaWYgKCF0aGlzLm11dGF0aW5nIHx8IHJldCkge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2UgaWYgKHJldCAhPT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICB9LFxuXG4gIFByb2dyYW06IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICB0aGlzLmFjY2VwdEFycmF5KHByb2dyYW0uYm9keSk7XG4gIH0sXG5cbiAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHZpc2l0U3ViRXhwcmVzc2lvbixcbiAgRGVjb3JhdG9yOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgQmxvY2tTdGF0ZW1lbnQ6IHZpc2l0QmxvY2ssXG4gIERlY29yYXRvckJsb2NrOiB2aXNpdEJsb2NrLFxuXG4gIFBhcnRpYWxTdGF0ZW1lbnQ6IHZpc2l0UGFydGlhbCxcbiAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gICAgdmlzaXRQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCk7XG5cbiAgICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAncHJvZ3JhbScpO1xuICB9LFxuXG4gIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uKC8qIGNvbnRlbnQgKi8pIHt9LFxuICBDb21tZW50U3RhdGVtZW50OiBmdW5jdGlvbigvKiBjb21tZW50ICovKSB7fSxcblxuICBTdWJFeHByZXNzaW9uOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uKC8qIHBhdGggKi8pIHt9LFxuXG4gIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uKC8qIHN0cmluZyAqLykge30sXG4gIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uKC8qIG51bWJlciAqLykge30sXG4gIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbigvKiBib29sICovKSB7fSxcbiAgVW5kZWZpbmVkTGl0ZXJhbDogZnVuY3Rpb24oLyogbGl0ZXJhbCAqLykge30sXG4gIE51bGxMaXRlcmFsOiBmdW5jdGlvbigvKiBsaXRlcmFsICovKSB7fSxcblxuICBIYXNoOiBmdW5jdGlvbihoYXNoKSB7XG4gICAgdGhpcy5hY2NlcHRBcnJheShoYXNoLnBhaXJzKTtcbiAgfSxcbiAgSGFzaFBhaXI6IGZ1bmN0aW9uKHBhaXIpIHtcbiAgICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhaXIsICd2YWx1ZScpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB2aXNpdFN1YkV4cHJlc3Npb24obXVzdGFjaGUpIHtcbiAgdGhpcy5hY2NlcHRSZXF1aXJlZChtdXN0YWNoZSwgJ3BhdGgnKTtcbiAgdGhpcy5hY2NlcHRBcnJheShtdXN0YWNoZS5wYXJhbXMpO1xuICB0aGlzLmFjY2VwdEtleShtdXN0YWNoZSwgJ2hhc2gnKTtcbn1cbmZ1bmN0aW9uIHZpc2l0QmxvY2soYmxvY2spIHtcbiAgdmlzaXRTdWJFeHByZXNzaW9uLmNhbGwodGhpcywgYmxvY2spO1xuXG4gIHRoaXMuYWNjZXB0S2V5KGJsb2NrLCAncHJvZ3JhbScpO1xuICB0aGlzLmFjY2VwdEtleShibG9jaywgJ2ludmVyc2UnKTtcbn1cbmZ1bmN0aW9uIHZpc2l0UGFydGlhbChwYXJ0aWFsKSB7XG4gIHRoaXMuYWNjZXB0UmVxdWlyZWQocGFydGlhbCwgJ25hbWUnKTtcbiAgdGhpcy5hY2NlcHRBcnJheShwYXJ0aWFsLnBhcmFtcyk7XG4gIHRoaXMuYWNjZXB0S2V5KHBhcnRpYWwsICdoYXNoJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpc2l0b3I7XG4iLCAiaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi92aXNpdG9yJztcblxuZnVuY3Rpb24gV2hpdGVzcGFjZUNvbnRyb2wob3B0aW9ucyA9IHt9KSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59XG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUgPSBuZXcgVmlzaXRvcigpO1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUHJvZ3JhbSA9IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgY29uc3QgZG9TdGFuZGFsb25lID0gIXRoaXMub3B0aW9ucy5pZ25vcmVTdGFuZGFsb25lO1xuXG4gIGxldCBpc1Jvb3QgPSAhdGhpcy5pc1Jvb3RTZWVuO1xuICB0aGlzLmlzUm9vdFNlZW4gPSB0cnVlO1xuXG4gIGxldCBib2R5ID0gcHJvZ3JhbS5ib2R5O1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGJvZHkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnQgPSBib2R5W2ldLFxuICAgICAgc3RyaXAgPSB0aGlzLmFjY2VwdChjdXJyZW50KTtcblxuICAgIGlmICghc3RyaXApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCBfaXNQcmV2V2hpdGVzcGFjZSA9IGlzUHJldldoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSxcbiAgICAgIF9pc05leHRXaGl0ZXNwYWNlID0gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLFxuICAgICAgb3BlblN0YW5kYWxvbmUgPSBzdHJpcC5vcGVuU3RhbmRhbG9uZSAmJiBfaXNQcmV2V2hpdGVzcGFjZSxcbiAgICAgIGNsb3NlU3RhbmRhbG9uZSA9IHN0cmlwLmNsb3NlU3RhbmRhbG9uZSAmJiBfaXNOZXh0V2hpdGVzcGFjZSxcbiAgICAgIGlubGluZVN0YW5kYWxvbmUgPVxuICAgICAgICBzdHJpcC5pbmxpbmVTdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlICYmIF9pc05leHRXaGl0ZXNwYWNlO1xuXG4gICAgaWYgKHN0cmlwLmNsb3NlKSB7XG4gICAgICBvbWl0UmlnaHQoYm9keSwgaSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChzdHJpcC5vcGVuKSB7XG4gICAgICBvbWl0TGVmdChib2R5LCBpLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoZG9TdGFuZGFsb25lICYmIGlubGluZVN0YW5kYWxvbmUpIHtcbiAgICAgIG9taXRSaWdodChib2R5LCBpKTtcblxuICAgICAgaWYgKG9taXRMZWZ0KGJvZHksIGkpKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBvbiBhIHN0YW5kYWxvbmUgbm9kZSwgc2F2ZSB0aGUgaW5kZW50IGluZm8gZm9yIHBhcnRpYWxzXG4gICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdQYXJ0aWFsU3RhdGVtZW50Jykge1xuICAgICAgICAgIC8vIFB1bGwgb3V0IHRoZSB3aGl0ZXNwYWNlIGZyb20gdGhlIGZpbmFsIGxpbmVcbiAgICAgICAgICBjdXJyZW50LmluZGVudCA9IC8oWyBcXHRdKyQpLy5leGVjKGJvZHlbaSAtIDFdLm9yaWdpbmFsKVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZG9TdGFuZGFsb25lICYmIG9wZW5TdGFuZGFsb25lKSB7XG4gICAgICBvbWl0UmlnaHQoKGN1cnJlbnQucHJvZ3JhbSB8fCBjdXJyZW50LmludmVyc2UpLmJvZHkpO1xuXG4gICAgICAvLyBTdHJpcCBvdXQgdGhlIHByZXZpb3VzIGNvbnRlbnQgbm9kZSBpZiBpdCdzIHdoaXRlc3BhY2Ugb25seVxuICAgICAgb21pdExlZnQoYm9keSwgaSk7XG4gICAgfVxuICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgY2xvc2VTdGFuZGFsb25lKSB7XG4gICAgICAvLyBBbHdheXMgc3RyaXAgdGhlIG5leHQgbm9kZVxuICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xuXG4gICAgICBvbWl0TGVmdCgoY3VycmVudC5pbnZlcnNlIHx8IGN1cnJlbnQucHJvZ3JhbSkuYm9keSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb2dyYW07XG59O1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuQmxvY2tTdGF0ZW1lbnQgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuRGVjb3JhdG9yQmxvY2sgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24oXG4gIGJsb2NrXG4pIHtcbiAgdGhpcy5hY2NlcHQoYmxvY2sucHJvZ3JhbSk7XG4gIHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xuXG4gIC8vIEZpbmQgdGhlIGludmVyc2UgcHJvZ3JhbSB0aGF0IGlzIGludm9sZWQgd2l0aCB3aGl0ZXNwYWNlIHN0cmlwcGluZy5cbiAgbGV0IHByb2dyYW0gPSBibG9jay5wcm9ncmFtIHx8IGJsb2NrLmludmVyc2UsXG4gICAgaW52ZXJzZSA9IGJsb2NrLnByb2dyYW0gJiYgYmxvY2suaW52ZXJzZSxcbiAgICBmaXJzdEludmVyc2UgPSBpbnZlcnNlLFxuICAgIGxhc3RJbnZlcnNlID0gaW52ZXJzZTtcblxuICBpZiAoaW52ZXJzZSAmJiBpbnZlcnNlLmNoYWluZWQpIHtcbiAgICBmaXJzdEludmVyc2UgPSBpbnZlcnNlLmJvZHlbMF0ucHJvZ3JhbTtcblxuICAgIC8vIFdhbGsgdGhlIGludmVyc2UgY2hhaW4gdG8gZmluZCB0aGUgbGFzdCBpbnZlcnNlIHRoYXQgaXMgYWN0dWFsbHkgaW4gdGhlIGNoYWluLlxuICAgIHdoaWxlIChsYXN0SW52ZXJzZS5jaGFpbmVkKSB7XG4gICAgICBsYXN0SW52ZXJzZSA9IGxhc3RJbnZlcnNlLmJvZHlbbGFzdEludmVyc2UuYm9keS5sZW5ndGggLSAxXS5wcm9ncmFtO1xuICAgIH1cbiAgfVxuXG4gIGxldCBzdHJpcCA9IHtcbiAgICBvcGVuOiBibG9jay5vcGVuU3RyaXAub3BlbixcbiAgICBjbG9zZTogYmxvY2suY2xvc2VTdHJpcC5jbG9zZSxcblxuICAgIC8vIERldGVybWluZSB0aGUgc3RhbmRhbG9uZSBjYW5kaWFjeS4gQmFzaWNhbGx5IGZsYWcgb3VyIGNvbnRlbnQgYXMgYmVpbmcgcG9zc2libHkgc3RhbmRhbG9uZVxuICAgIC8vIHNvIG91ciBwYXJlbnQgY2FuIGRldGVybWluZSBpZiB3ZSBhY3R1YWxseSBhcmUgc3RhbmRhbG9uZVxuICAgIG9wZW5TdGFuZGFsb25lOiBpc05leHRXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSksXG4gICAgY2xvc2VTdGFuZGFsb25lOiBpc1ByZXZXaGl0ZXNwYWNlKChmaXJzdEludmVyc2UgfHwgcHJvZ3JhbSkuYm9keSlcbiAgfTtcblxuICBpZiAoYmxvY2sub3BlblN0cmlwLmNsb3NlKSB7XG4gICAgb21pdFJpZ2h0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoaW52ZXJzZSkge1xuICAgIGxldCBpbnZlcnNlU3RyaXAgPSBibG9jay5pbnZlcnNlU3RyaXA7XG5cbiAgICBpZiAoaW52ZXJzZVN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGludmVyc2VTdHJpcC5jbG9zZSkge1xuICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGJsb2NrLmNsb3NlU3RyaXAub3Blbikge1xuICAgICAgb21pdExlZnQobGFzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gRmluZCBzdGFuZGFsb25lIGVsc2Ugc3RhdG1lbnRzXG4gICAgaWYgKFxuICAgICAgIXRoaXMub3B0aW9ucy5pZ25vcmVTdGFuZGFsb25lICYmXG4gICAgICBpc1ByZXZXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSkgJiZcbiAgICAgIGlzTmV4dFdoaXRlc3BhY2UoZmlyc3RJbnZlcnNlLmJvZHkpXG4gICAgKSB7XG4gICAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHkpO1xuICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYmxvY2suY2xvc2VTdHJpcC5vcGVuKSB7XG4gICAgb21pdExlZnQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpcDtcbn07XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5EZWNvcmF0b3IgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuTXVzdGFjaGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihcbiAgbXVzdGFjaGVcbikge1xuICByZXR1cm4gbXVzdGFjaGUuc3RyaXA7XG59O1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbFN0YXRlbWVudCA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Db21tZW50U3RhdGVtZW50ID0gZnVuY3Rpb24oXG4gIG5vZGVcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgc3RyaXAgPSBub2RlLnN0cmlwIHx8IHt9O1xuICByZXR1cm4ge1xuICAgIGlubGluZVN0YW5kYWxvbmU6IHRydWUsXG4gICAgb3Blbjogc3RyaXAub3BlbixcbiAgICBjbG9zZTogc3RyaXAuY2xvc2VcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGlzUHJldldoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSB7XG4gIGlmIChpID09PSB1bmRlZmluZWQpIHtcbiAgICBpID0gYm9keS5sZW5ndGg7XG4gIH1cblxuICAvLyBOb2RlcyB0aGF0IGVuZCB3aXRoIG5ld2xpbmVzIGFyZSBjb25zaWRlcmVkIHdoaXRlc3BhY2UgKGJ1dCBhcmUgc3BlY2lhbFxuICAvLyBjYXNlZCBmb3Igc3RyaXAgb3BlcmF0aW9ucylcbiAgbGV0IHByZXYgPSBib2R5W2kgLSAxXSxcbiAgICBzaWJsaW5nID0gYm9keVtpIC0gMl07XG4gIGlmICghcHJldikge1xuICAgIHJldHVybiBpc1Jvb3Q7XG4gIH1cblxuICBpZiAocHJldi50eXBlID09PSAnQ29udGVudFN0YXRlbWVudCcpIHtcbiAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/IC9cXHI/XFxuXFxzKj8kLyA6IC8oXnxcXHI/XFxuKVxccyo/JC8pLnRlc3QoXG4gICAgICBwcmV2Lm9yaWdpbmFsXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcbiAgaWYgKGkgPT09IHVuZGVmaW5lZCkge1xuICAgIGkgPSAtMTtcbiAgfVxuXG4gIGxldCBuZXh0ID0gYm9keVtpICsgMV0sXG4gICAgc2libGluZyA9IGJvZHlbaSArIDJdO1xuICBpZiAoIW5leHQpIHtcbiAgICByZXR1cm4gaXNSb290O1xuICB9XG5cbiAgaWYgKG5leHQudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XG4gICAgcmV0dXJuIChzaWJsaW5nIHx8ICFpc1Jvb3QgPyAvXlxccyo/XFxyP1xcbi8gOiAvXlxccyo/KFxccj9cXG58JCkvKS50ZXN0KFxuICAgICAgbmV4dC5vcmlnaW5hbFxuICAgICk7XG4gIH1cbn1cblxuLy8gTWFya3MgdGhlIG5vZGUgdG8gdGhlIHJpZ2h0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuLy8gSS5lLiB7e2Zvb319JyAnIHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cbi8vXG4vLyBJZiBpIGlzIHVuZGVmaW5lZCwgdGhlbiB0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSBtYXJrZWQgYXMgc3VjaC5cbi8vXG4vLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxuLy8gY29udGVudCBpcyBtZXQuXG5mdW5jdGlvbiBvbWl0UmlnaHQoYm9keSwgaSwgbXVsdGlwbGUpIHtcbiAgbGV0IGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IDAgOiBpICsgMV07XG4gIGlmIChcbiAgICAhY3VycmVudCB8fFxuICAgIGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8XG4gICAgKCFtdWx0aXBsZSAmJiBjdXJyZW50LnJpZ2h0U3RyaXBwZWQpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBvcmlnaW5hbCA9IGN1cnJlbnQudmFsdWU7XG4gIGN1cnJlbnQudmFsdWUgPSBjdXJyZW50LnZhbHVlLnJlcGxhY2UoXG4gICAgbXVsdGlwbGUgPyAvXlxccysvIDogL15bIFxcdF0qXFxyP1xcbj8vLFxuICAgICcnXG4gICk7XG4gIGN1cnJlbnQucmlnaHRTdHJpcHBlZCA9IGN1cnJlbnQudmFsdWUgIT09IG9yaWdpbmFsO1xufVxuXG4vLyBNYXJrcyB0aGUgbm9kZSB0byB0aGUgbGVmdCBvZiB0aGUgcG9zaXRpb24gYXMgb21pdHRlZC5cbi8vIEkuZS4gJyAne3tmb299fSB3aWxsIG1hcmsgdGhlICcgJyBub2RlIGFzIG9taXR0ZWQuXG4vL1xuLy8gSWYgaSBpcyB1bmRlZmluZWQgdGhlbiB0aGUgbGFzdCBjaGlsZCB3aWxsIGJlIG1hcmtlZCBhcyBzdWNoLlxuLy9cbi8vIElmIG11bGl0cGxlIGlzIHRydXRoeSB0aGVuIGFsbCB3aGl0ZXNwYWNlIHdpbGwgYmUgc3RyaXBwZWQgb3V0IHVudGlsIG5vbi13aGl0ZXNwYWNlXG4vLyBjb250ZW50IGlzIG1ldC5cbmZ1bmN0aW9uIG9taXRMZWZ0KGJvZHksIGksIG11bHRpcGxlKSB7XG4gIGxldCBjdXJyZW50ID0gYm9keVtpID09IG51bGwgPyBib2R5Lmxlbmd0aCAtIDEgOiBpIC0gMV07XG4gIGlmIChcbiAgICAhY3VycmVudCB8fFxuICAgIGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8XG4gICAgKCFtdWx0aXBsZSAmJiBjdXJyZW50LmxlZnRTdHJpcHBlZClcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2Ugb21pdCB0aGUgbGFzdCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5IGFuZCBub3QgcHJlY2VkZWQgYnkgYSBub24tY29udGVudCBub2RlLlxuICBsZXQgb3JpZ2luYWwgPSBjdXJyZW50LnZhbHVlO1xuICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gL1xccyskLyA6IC9bIFxcdF0rJC8sICcnKTtcbiAgY3VycmVudC5sZWZ0U3RyaXBwZWQgPSBjdXJyZW50LnZhbHVlICE9PSBvcmlnaW5hbDtcbiAgcmV0dXJuIGN1cnJlbnQubGVmdFN0cmlwcGVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBXaGl0ZXNwYWNlQ29udHJvbDtcbiIsICJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpIHtcbiAgY2xvc2UgPSBjbG9zZS5wYXRoID8gY2xvc2UucGF0aC5vcmlnaW5hbCA6IGNsb3NlO1xuXG4gIGlmIChvcGVuLnBhdGgub3JpZ2luYWwgIT09IGNsb3NlKSB7XG4gICAgbGV0IGVycm9yTm9kZSA9IHsgbG9jOiBvcGVuLnBhdGgubG9jIH07XG5cbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgb3Blbi5wYXRoLm9yaWdpbmFsICsgXCIgZG9lc24ndCBtYXRjaCBcIiArIGNsb3NlLFxuICAgICAgZXJyb3JOb2RlXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gU291cmNlTG9jYXRpb24oc291cmNlLCBsb2NJbmZvKSB7XG4gIHRoaXMuc291cmNlID0gc291cmNlO1xuICB0aGlzLnN0YXJ0ID0ge1xuICAgIGxpbmU6IGxvY0luZm8uZmlyc3RfbGluZSxcbiAgICBjb2x1bW46IGxvY0luZm8uZmlyc3RfY29sdW1uXG4gIH07XG4gIHRoaXMuZW5kID0ge1xuICAgIGxpbmU6IGxvY0luZm8ubGFzdF9saW5lLFxuICAgIGNvbHVtbjogbG9jSW5mby5sYXN0X2NvbHVtblxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaWQodG9rZW4pIHtcbiAgaWYgKC9eXFxbLipcXF0kLy50ZXN0KHRva2VuKSkge1xuICAgIHJldHVybiB0b2tlbi5zdWJzdHJpbmcoMSwgdG9rZW4ubGVuZ3RoIC0gMSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEZsYWdzKG9wZW4sIGNsb3NlKSB7XG4gIHJldHVybiB7XG4gICAgb3Blbjogb3Blbi5jaGFyQXQoMikgPT09ICd+JyxcbiAgICBjbG9zZTogY2xvc2UuY2hhckF0KGNsb3NlLmxlbmd0aCAtIDMpID09PSAnfidcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQ29tbWVudChjb21tZW50KSB7XG4gIHJldHVybiBjb21tZW50LnJlcGxhY2UoL15cXHtcXHt+PyEtPy0/LywgJycpLnJlcGxhY2UoLy0/LT9+P1xcfVxcfSQvLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUGF0aChkYXRhLCBwYXJ0cywgbG9jKSB7XG4gIGxvYyA9IHRoaXMubG9jSW5mbyhsb2MpO1xuXG4gIGxldCBvcmlnaW5hbCA9IGRhdGEgPyAnQCcgOiAnJyxcbiAgICBkaWcgPSBbXSxcbiAgICBkZXB0aCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgcGFydCA9IHBhcnRzW2ldLnBhcnQsXG4gICAgICAvLyBJZiB3ZSBoYXZlIFtdIHN5bnRheCB0aGVuIHdlIGRvIG5vdCB0cmVhdCBwYXRoIHJlZmVyZW5jZXMgYXMgb3BlcmF0b3JzLFxuICAgICAgLy8gaS5lLiBmb28uW3RoaXNdIHJlc29sdmVzIHRvIGFwcHJveGltYXRlbHkgY29udGV4dC5mb29bJ3RoaXMnXVxuICAgICAgaXNMaXRlcmFsID0gcGFydHNbaV0ub3JpZ2luYWwgIT09IHBhcnQ7XG4gICAgb3JpZ2luYWwgKz0gKHBhcnRzW2ldLnNlcGFyYXRvciB8fCAnJykgKyBwYXJ0O1xuXG4gICAgaWYgKCFpc0xpdGVyYWwgJiYgKHBhcnQgPT09ICcuLicgfHwgcGFydCA9PT0gJy4nIHx8IHBhcnQgPT09ICd0aGlzJykpIHtcbiAgICAgIGlmIChkaWcubGVuZ3RoID4gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdJbnZhbGlkIHBhdGg6ICcgKyBvcmlnaW5hbCwgeyBsb2MgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgICAgZGVwdGgrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGlnLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLFxuICAgIGRhdGEsXG4gICAgZGVwdGgsXG4gICAgcGFydHM6IGRpZyxcbiAgICBvcmlnaW5hbCxcbiAgICBsb2NcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVNdXN0YWNoZShwYXRoLCBwYXJhbXMsIGhhc2gsIG9wZW4sIHN0cmlwLCBsb2NJbmZvKSB7XG4gIC8vIE11c3QgdXNlIGNoYXJBdCB0byBzdXBwb3J0IElFIHByZS0xMFxuICBsZXQgZXNjYXBlRmxhZyA9IG9wZW4uY2hhckF0KDMpIHx8IG9wZW4uY2hhckF0KDIpLFxuICAgIGVzY2FwZWQgPSBlc2NhcGVGbGFnICE9PSAneycgJiYgZXNjYXBlRmxhZyAhPT0gJyYnO1xuXG4gIGxldCBkZWNvcmF0b3IgPSAvXFwqLy50ZXN0KG9wZW4pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGRlY29yYXRvciA/ICdEZWNvcmF0b3InIDogJ011c3RhY2hlU3RhdGVtZW50JyxcbiAgICBwYXRoLFxuICAgIHBhcmFtcyxcbiAgICBoYXNoLFxuICAgIGVzY2FwZWQsXG4gICAgc3RyaXAsXG4gICAgbG9jOiB0aGlzLmxvY0luZm8obG9jSW5mbylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVSYXdCbG9jayhvcGVuUmF3QmxvY2ssIGNvbnRlbnRzLCBjbG9zZSwgbG9jSW5mbykge1xuICB2YWxpZGF0ZUNsb3NlKG9wZW5SYXdCbG9jaywgY2xvc2UpO1xuXG4gIGxvY0luZm8gPSB0aGlzLmxvY0luZm8obG9jSW5mbyk7XG4gIGxldCBwcm9ncmFtID0ge1xuICAgIHR5cGU6ICdQcm9ncmFtJyxcbiAgICBib2R5OiBjb250ZW50cyxcbiAgICBzdHJpcDoge30sXG4gICAgbG9jOiBsb2NJbmZvXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgIHBhdGg6IG9wZW5SYXdCbG9jay5wYXRoLFxuICAgIHBhcmFtczogb3BlblJhd0Jsb2NrLnBhcmFtcyxcbiAgICBoYXNoOiBvcGVuUmF3QmxvY2suaGFzaCxcbiAgICBwcm9ncmFtLFxuICAgIG9wZW5TdHJpcDoge30sXG4gICAgaW52ZXJzZVN0cmlwOiB7fSxcbiAgICBjbG9zZVN0cmlwOiB7fSxcbiAgICBsb2M6IGxvY0luZm9cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVCbG9jayhcbiAgb3BlbkJsb2NrLFxuICBwcm9ncmFtLFxuICBpbnZlcnNlQW5kUHJvZ3JhbSxcbiAgY2xvc2UsXG4gIGludmVydGVkLFxuICBsb2NJbmZvXG4pIHtcbiAgaWYgKGNsb3NlICYmIGNsb3NlLnBhdGgpIHtcbiAgICB2YWxpZGF0ZUNsb3NlKG9wZW5CbG9jaywgY2xvc2UpO1xuICB9XG5cbiAgbGV0IGRlY29yYXRvciA9IC9cXCovLnRlc3Qob3BlbkJsb2NrLm9wZW4pO1xuXG4gIHByb2dyYW0uYmxvY2tQYXJhbXMgPSBvcGVuQmxvY2suYmxvY2tQYXJhbXM7XG5cbiAgbGV0IGludmVyc2UsIGludmVyc2VTdHJpcDtcblxuICBpZiAoaW52ZXJzZUFuZFByb2dyYW0pIHtcbiAgICBpZiAoZGVjb3JhdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgICAnVW5leHBlY3RlZCBpbnZlcnNlIGJsb2NrIG9uIGRlY29yYXRvcicsXG4gICAgICAgIGludmVyc2VBbmRQcm9ncmFtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChpbnZlcnNlQW5kUHJvZ3JhbS5jaGFpbikge1xuICAgICAgaW52ZXJzZUFuZFByb2dyYW0ucHJvZ3JhbS5ib2R5WzBdLmNsb3NlU3RyaXAgPSBjbG9zZS5zdHJpcDtcbiAgICB9XG5cbiAgICBpbnZlcnNlU3RyaXAgPSBpbnZlcnNlQW5kUHJvZ3JhbS5zdHJpcDtcbiAgICBpbnZlcnNlID0gaW52ZXJzZUFuZFByb2dyYW0ucHJvZ3JhbTtcbiAgfVxuXG4gIGlmIChpbnZlcnRlZCkge1xuICAgIGludmVydGVkID0gaW52ZXJzZTtcbiAgICBpbnZlcnNlID0gcHJvZ3JhbTtcbiAgICBwcm9ncmFtID0gaW52ZXJ0ZWQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IGRlY29yYXRvciA/ICdEZWNvcmF0b3JCbG9jaycgOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgIHBhdGg6IG9wZW5CbG9jay5wYXRoLFxuICAgIHBhcmFtczogb3BlbkJsb2NrLnBhcmFtcyxcbiAgICBoYXNoOiBvcGVuQmxvY2suaGFzaCxcbiAgICBwcm9ncmFtLFxuICAgIGludmVyc2UsXG4gICAgb3BlblN0cmlwOiBvcGVuQmxvY2suc3RyaXAsXG4gICAgaW52ZXJzZVN0cmlwLFxuICAgIGNsb3NlU3RyaXA6IGNsb3NlICYmIGNsb3NlLnN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUHJvZ3JhbShzdGF0ZW1lbnRzLCBsb2MpIHtcbiAgaWYgKCFsb2MgJiYgc3RhdGVtZW50cy5sZW5ndGgpIHtcbiAgICBjb25zdCBmaXJzdExvYyA9IHN0YXRlbWVudHNbMF0ubG9jLFxuICAgICAgbGFzdExvYyA9IHN0YXRlbWVudHNbc3RhdGVtZW50cy5sZW5ndGggLSAxXS5sb2M7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChmaXJzdExvYyAmJiBsYXN0TG9jKSB7XG4gICAgICBsb2MgPSB7XG4gICAgICAgIHNvdXJjZTogZmlyc3RMb2Muc291cmNlLFxuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIGxpbmU6IGZpcnN0TG9jLnN0YXJ0LmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBmaXJzdExvYy5zdGFydC5jb2x1bW5cbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAgbGluZTogbGFzdExvYy5lbmQubGluZSxcbiAgICAgICAgICBjb2x1bW46IGxhc3RMb2MuZW5kLmNvbHVtblxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1Byb2dyYW0nLFxuICAgIGJvZHk6IHN0YXRlbWVudHMsXG4gICAgc3RyaXA6IHt9LFxuICAgIGxvYzogbG9jXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUGFydGlhbEJsb2NrKG9wZW4sIHByb2dyYW0sIGNsb3NlLCBsb2NJbmZvKSB7XG4gIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpO1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1BhcnRpYWxCbG9ja1N0YXRlbWVudCcsXG4gICAgbmFtZTogb3Blbi5wYXRoLFxuICAgIHBhcmFtczogb3Blbi5wYXJhbXMsXG4gICAgaGFzaDogb3Blbi5oYXNoLFxuICAgIHByb2dyYW0sXG4gICAgb3BlblN0cmlwOiBvcGVuLnN0cmlwLFxuICAgIGNsb3NlU3RyaXA6IGNsb3NlICYmIGNsb3NlLnN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG4iLCAiaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgV2hpdGVzcGFjZUNvbnRyb2wgZnJvbSAnLi93aGl0ZXNwYWNlLWNvbnRyb2wnO1xuaW1wb3J0ICogYXMgSGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgeyBwYXJzZXIgfTtcblxubGV0IHl5ID0ge307XG5leHRlbmQoeXksIEhlbHBlcnMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VXaXRob3V0UHJvY2Vzc2luZyhpbnB1dCwgb3B0aW9ucykge1xuICAvLyBKdXN0IHJldHVybiBpZiBhbiBhbHJlYWR5LWNvbXBpbGVkIEFTVCB3YXMgcGFzc2VkIGluLlxuICBpZiAoaW5wdXQudHlwZSA9PT0gJ1Byb2dyYW0nKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgcGFyc2VyLnl5ID0geXk7XG5cbiAgLy8gQWx0ZXJpbmcgdGhlIHNoYXJlZCBvYmplY3QgaGVyZSwgYnV0IHRoaXMgaXMgb2sgYXMgcGFyc2VyIGlzIGEgc3luYyBvcGVyYXRpb25cbiAgeXkubG9jSW5mbyA9IGZ1bmN0aW9uKGxvY0luZm8pIHtcbiAgICByZXR1cm4gbmV3IHl5LlNvdXJjZUxvY2F0aW9uKG9wdGlvbnMgJiYgb3B0aW9ucy5zcmNOYW1lLCBsb2NJbmZvKTtcbiAgfTtcblxuICBsZXQgYXN0ID0gcGFyc2VyLnBhcnNlKGlucHV0KTtcblxuICByZXR1cm4gYXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgbGV0IGFzdCA9IHBhcnNlV2l0aG91dFByb2Nlc3NpbmcoaW5wdXQsIG9wdGlvbnMpO1xuICBsZXQgc3RyaXAgPSBuZXcgV2hpdGVzcGFjZUNvbnRyb2wob3B0aW9ucyk7XG5cbiAgcmV0dXJuIHN0cmlwLmFjY2VwdChhc3QpO1xufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cblxuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuaW1wb3J0IHsgaXNBcnJheSwgaW5kZXhPZiwgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEFTVCBmcm9tICcuL2FzdCc7XG5cbmNvbnN0IHNsaWNlID0gW10uc2xpY2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlcigpIHt9XG5cbi8vIHRoZSBmb3VuZEhlbHBlciByZWdpc3RlciB3aWxsIGRpc2FtYmlndWF0ZSBoZWxwZXIgbG9va3VwIGZyb20gZmluZGluZyBhXG4vLyBmdW5jdGlvbiBpbiBhIGNvbnRleHQuIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciBtdXN0YWNoZSBjb21wYXRpYmlsaXR5LCB3aGljaFxuLy8gcmVxdWlyZXMgdGhhdCBjb250ZXh0IGZ1bmN0aW9ucyBpbiBibG9ja3MgYXJlIGV2YWx1YXRlZCBieSBibG9ja0hlbHBlck1pc3NpbmcsXG4vLyBhbmQgdGhlbiBwcm9jZWVkIGFzIGlmIHRoZSByZXN1bHRpbmcgdmFsdWUgd2FzIHByb3ZpZGVkIHRvIGJsb2NrSGVscGVyTWlzc2luZy5cblxuQ29tcGlsZXIucHJvdG90eXBlID0ge1xuICBjb21waWxlcjogQ29tcGlsZXIsXG5cbiAgZXF1YWxzOiBmdW5jdGlvbihvdGhlcikge1xuICAgIGxldCBsZW4gPSB0aGlzLm9wY29kZXMubGVuZ3RoO1xuICAgIGlmIChvdGhlci5vcGNvZGVzLmxlbmd0aCAhPT0gbGVuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGV0IG9wY29kZSA9IHRoaXMub3Bjb2Rlc1tpXSxcbiAgICAgICAgb3RoZXJPcGNvZGUgPSBvdGhlci5vcGNvZGVzW2ldO1xuICAgICAgaWYgKFxuICAgICAgICBvcGNvZGUub3Bjb2RlICE9PSBvdGhlck9wY29kZS5vcGNvZGUgfHxcbiAgICAgICAgIWFyZ0VxdWFscyhvcGNvZGUuYXJncywgb3RoZXJPcGNvZGUuYXJncylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2Uga25vdyB0aGF0IGxlbmd0aCBpcyB0aGUgc2FtZSBiZXR3ZWVuIHRoZSB0d28gYXJyYXlzIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgdGllZFxuICAgIC8vIHRvIHRoZSBvcGNvZGUgYmVoYXZpb3IgYWJvdmUuXG4gICAgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2ldLmVxdWFscyhvdGhlci5jaGlsZHJlbltpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIGd1aWQ6IDAsXG5cbiAgY29tcGlsZTogZnVuY3Rpb24ocHJvZ3JhbSwgb3B0aW9ucykge1xuICAgIHRoaXMuc291cmNlTm9kZSA9IFtdO1xuICAgIHRoaXMub3Bjb2RlcyA9IFtdO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3RyaW5nUGFyYW1zID0gb3B0aW9ucy5zdHJpbmdQYXJhbXM7XG4gICAgdGhpcy50cmFja0lkcyA9IG9wdGlvbnMudHJhY2tJZHM7XG5cbiAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gb3B0aW9ucy5ibG9ja1BhcmFtcyB8fCBbXTtcblxuICAgIG9wdGlvbnMua25vd25IZWxwZXJzID0gZXh0ZW5kKFxuICAgICAgT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIHtcbiAgICAgICAgaGVscGVyTWlzc2luZzogdHJ1ZSxcbiAgICAgICAgYmxvY2tIZWxwZXJNaXNzaW5nOiB0cnVlLFxuICAgICAgICBlYWNoOiB0cnVlLFxuICAgICAgICBpZjogdHJ1ZSxcbiAgICAgICAgdW5sZXNzOiB0cnVlLFxuICAgICAgICB3aXRoOiB0cnVlLFxuICAgICAgICBsb2c6IHRydWUsXG4gICAgICAgIGxvb2t1cDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG9wdGlvbnMua25vd25IZWxwZXJzXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzLmFjY2VwdChwcm9ncmFtKTtcbiAgfSxcblxuICBjb21waWxlUHJvZ3JhbTogZnVuY3Rpb24ocHJvZ3JhbSkge1xuICAgIGxldCBjaGlsZENvbXBpbGVyID0gbmV3IHRoaXMuY29tcGlsZXIoKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gICAgICByZXN1bHQgPSBjaGlsZENvbXBpbGVyLmNvbXBpbGUocHJvZ3JhbSwgdGhpcy5vcHRpb25zKSxcbiAgICAgIGd1aWQgPSB0aGlzLmd1aWQrKztcblxuICAgIHRoaXMudXNlUGFydGlhbCA9IHRoaXMudXNlUGFydGlhbCB8fCByZXN1bHQudXNlUGFydGlhbDtcblxuICAgIHRoaXMuY2hpbGRyZW5bZ3VpZF0gPSByZXN1bHQ7XG4gICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCByZXN1bHQudXNlRGVwdGhzO1xuXG4gICAgcmV0dXJuIGd1aWQ7XG4gIH0sXG5cbiAgYWNjZXB0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXG4gICAgaWYgKCF0aGlzW25vZGUudHlwZV0pIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1Vua25vd24gdHlwZTogJyArIG5vZGUudHlwZSwgbm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zb3VyY2VOb2RlLnVuc2hpZnQobm9kZSk7XG4gICAgbGV0IHJldCA9IHRoaXNbbm9kZS50eXBlXShub2RlKTtcbiAgICB0aGlzLnNvdXJjZU5vZGUuc2hpZnQoKTtcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIFByb2dyYW06IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMudW5zaGlmdChwcm9ncmFtLmJsb2NrUGFyYW1zKTtcblxuICAgIGxldCBib2R5ID0gcHJvZ3JhbS5ib2R5LFxuICAgICAgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keUxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmFjY2VwdChib2R5W2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMuc2hpZnQoKTtcblxuICAgIHRoaXMuaXNTaW1wbGUgPSBib2R5TGVuZ3RoID09PSAxO1xuICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBwcm9ncmFtLmJsb2NrUGFyYW1zID8gcHJvZ3JhbS5ibG9ja1BhcmFtcy5sZW5ndGggOiAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChibG9jayk7XG5cbiAgICBsZXQgcHJvZ3JhbSA9IGJsb2NrLnByb2dyYW0sXG4gICAgICBpbnZlcnNlID0gYmxvY2suaW52ZXJzZTtcblxuICAgIHByb2dyYW0gPSBwcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgaW52ZXJzZSA9IGludmVyc2UgJiYgdGhpcy5jb21waWxlUHJvZ3JhbShpbnZlcnNlKTtcblxuICAgIGxldCB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKGJsb2NrKTtcblxuICAgIGlmICh0eXBlID09PSAnaGVscGVyJykge1xuICAgICAgdGhpcy5oZWxwZXJTZXhwcihibG9jaywgcHJvZ3JhbSwgaW52ZXJzZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc2ltcGxlJykge1xuICAgICAgdGhpcy5zaW1wbGVTZXhwcihibG9jayk7XG5cbiAgICAgIC8vIG5vdyB0aGF0IHRoZSBzaW1wbGUgbXVzdGFjaGUgaXMgcmVzb2x2ZWQsIHdlIG5lZWQgdG9cbiAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdibG9ja1ZhbHVlJywgYmxvY2sucGF0aC5vcmlnaW5hbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW1iaWd1b3VzU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpO1xuXG4gICAgICAvLyBub3cgdGhhdCB0aGUgc2ltcGxlIG11c3RhY2hlIGlzIHJlc29sdmVkLCB3ZSBuZWVkIHRvXG4gICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2BcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG4gICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7XG4gICAgICB0aGlzLm9wY29kZSgnYW1iaWd1b3VzQmxvY2tWYWx1ZScpO1xuICAgIH1cblxuICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcbiAgfSxcblxuICBEZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpIHtcbiAgICBsZXQgcHJvZ3JhbSA9IGRlY29yYXRvci5wcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0oZGVjb3JhdG9yLnByb2dyYW0pO1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKGRlY29yYXRvciwgcHJvZ3JhbSwgdW5kZWZpbmVkKSxcbiAgICAgIHBhdGggPSBkZWNvcmF0b3IucGF0aDtcblxuICAgIHRoaXMudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgdGhpcy5vcGNvZGUoJ3JlZ2lzdGVyRGVjb3JhdG9yJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCk7XG4gIH0sXG5cbiAgUGFydGlhbFN0YXRlbWVudDogZnVuY3Rpb24ocGFydGlhbCkge1xuICAgIHRoaXMudXNlUGFydGlhbCA9IHRydWU7XG5cbiAgICBsZXQgcHJvZ3JhbSA9IHBhcnRpYWwucHJvZ3JhbTtcbiAgICBpZiAocHJvZ3JhbSkge1xuICAgICAgcHJvZ3JhbSA9IHRoaXMuY29tcGlsZVByb2dyYW0ocGFydGlhbC5wcm9ncmFtKTtcbiAgICB9XG5cbiAgICBsZXQgcGFyYW1zID0gcGFydGlhbC5wYXJhbXM7XG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgICAnVW5zdXBwb3J0ZWQgbnVtYmVyIG9mIHBhcnRpYWwgYXJndW1lbnRzOiAnICsgcGFyYW1zLmxlbmd0aCxcbiAgICAgICAgcGFydGlhbFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFwYXJhbXMubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4cGxpY2l0UGFydGlhbENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ3VuZGVmaW5lZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLnB1c2goeyB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLCBwYXJ0czogW10sIGRlcHRoOiAwIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXJ0aWFsTmFtZSA9IHBhcnRpYWwubmFtZS5vcmlnaW5hbCxcbiAgICAgIGlzRHluYW1pYyA9IHBhcnRpYWwubmFtZS50eXBlID09PSAnU3ViRXhwcmVzc2lvbic7XG4gICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgdGhpcy5hY2NlcHQocGFydGlhbC5uYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKHBhcnRpYWwsIHByb2dyYW0sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBsZXQgaW5kZW50ID0gcGFydGlhbC5pbmRlbnQgfHwgJyc7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50SW5kZW50ICYmIGluZGVudCkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBpbmRlbnQpO1xuICAgICAgaW5kZW50ID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5vcGNvZGUoJ2ludm9rZVBhcnRpYWwnLCBpc0R5bmFtaWMsIHBhcnRpYWxOYW1lLCBpbmRlbnQpO1xuICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcbiAgfSxcbiAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsQmxvY2spIHtcbiAgICB0aGlzLlBhcnRpYWxTdGF0ZW1lbnQocGFydGlhbEJsb2NrKTtcbiAgfSxcblxuICBNdXN0YWNoZVN0YXRlbWVudDogZnVuY3Rpb24obXVzdGFjaGUpIHtcbiAgICB0aGlzLlN1YkV4cHJlc3Npb24obXVzdGFjaGUpO1xuXG4gICAgaWYgKG11c3RhY2hlLmVzY2FwZWQgJiYgIXRoaXMub3B0aW9ucy5ub0VzY2FwZSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZEVzY2FwZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuICAgIH1cbiAgfSxcbiAgRGVjb3JhdG9yKGRlY29yYXRvcikge1xuICAgIHRoaXMuRGVjb3JhdG9yQmxvY2soZGVjb3JhdG9yKTtcbiAgfSxcblxuICBDb250ZW50U3RhdGVtZW50OiBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgaWYgKGNvbnRlbnQudmFsdWUpIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgY29udGVudC52YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIENvbW1lbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uKCkge30sXG5cbiAgU3ViRXhwcmVzc2lvbjogZnVuY3Rpb24oc2V4cHIpIHtcbiAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKHNleHByKTtcbiAgICBsZXQgdHlwZSA9IHRoaXMuY2xhc3NpZnlTZXhwcihzZXhwcik7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3NpbXBsZScpIHtcbiAgICAgIHRoaXMuc2ltcGxlU2V4cHIoc2V4cHIpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2hlbHBlcicpIHtcbiAgICAgIHRoaXMuaGVscGVyU2V4cHIoc2V4cHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFtYmlndW91c1NleHByKHNleHByKTtcbiAgICB9XG4gIH0sXG4gIGFtYmlndW91c1NleHByOiBmdW5jdGlvbihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xuICAgIGxldCBwYXRoID0gc2V4cHIucGF0aCxcbiAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdLFxuICAgICAgaXNCbG9jayA9IHByb2dyYW0gIT0gbnVsbCB8fCBpbnZlcnNlICE9IG51bGw7XG5cbiAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHBhdGguZGVwdGgpO1xuXG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG5cbiAgICBwYXRoLnN0cmljdCA9IHRydWU7XG4gICAgdGhpcy5hY2NlcHQocGF0aCk7XG5cbiAgICB0aGlzLm9wY29kZSgnaW52b2tlQW1iaWd1b3VzJywgbmFtZSwgaXNCbG9jayk7XG4gIH0sXG5cbiAgc2ltcGxlU2V4cHI6IGZ1bmN0aW9uKHNleHByKSB7XG4gICAgbGV0IHBhdGggPSBzZXhwci5wYXRoO1xuICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcbiAgICB0aGlzLmFjY2VwdChwYXRoKTtcbiAgICB0aGlzLm9wY29kZSgncmVzb2x2ZVBvc3NpYmxlTGFtYmRhJyk7XG4gIH0sXG5cbiAgaGVscGVyU2V4cHI6IGZ1bmN0aW9uKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSB7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoc2V4cHIsIHByb2dyYW0sIGludmVyc2UpLFxuICAgICAgcGF0aCA9IHNleHByLnBhdGgsXG4gICAgICBuYW1lID0gcGF0aC5wYXJ0c1swXTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzW25hbWVdKSB7XG4gICAgICB0aGlzLm9wY29kZSgnaW52b2tlS25vd25IZWxwZXInLCBwYXJhbXMubGVuZ3RoLCBuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNPbmx5KSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgICAnWW91IHNwZWNpZmllZCBrbm93bkhlbHBlcnNPbmx5LCBidXQgdXNlZCB0aGUgdW5rbm93biBoZWxwZXIgJyArIG5hbWUsXG4gICAgICAgIHNleHByXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoLnN0cmljdCA9IHRydWU7XG4gICAgICBwYXRoLmZhbHN5ID0gdHJ1ZTtcblxuICAgICAgdGhpcy5hY2NlcHQocGF0aCk7XG4gICAgICB0aGlzLm9wY29kZShcbiAgICAgICAgJ2ludm9rZUhlbHBlcicsXG4gICAgICAgIHBhcmFtcy5sZW5ndGgsXG4gICAgICAgIHBhdGgub3JpZ2luYWwsXG4gICAgICAgIEFTVC5oZWxwZXJzLnNpbXBsZUlkKHBhdGgpXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICBQYXRoRXhwcmVzc2lvbjogZnVuY3Rpb24ocGF0aCkge1xuICAgIHRoaXMuYWRkRGVwdGgocGF0aC5kZXB0aCk7XG4gICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcblxuICAgIGxldCBuYW1lID0gcGF0aC5wYXJ0c1swXSxcbiAgICAgIHNjb3BlZCA9IEFTVC5oZWxwZXJzLnNjb3BlZElkKHBhdGgpLFxuICAgICAgYmxvY2tQYXJhbUlkID0gIXBhdGguZGVwdGggJiYgIXNjb3BlZCAmJiB0aGlzLmJsb2NrUGFyYW1JbmRleChuYW1lKTtcblxuICAgIGlmIChibG9ja1BhcmFtSWQpIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBCbG9ja1BhcmFtJywgYmxvY2tQYXJhbUlkLCBwYXRoLnBhcnRzKTtcbiAgICB9IGVsc2UgaWYgKCFuYW1lKSB7XG4gICAgICAvLyBDb250ZXh0IHJlZmVyZW5jZSwgaS5lLiBge3tmb28gLn19YCBvciBge3tmb28gLi59fWBcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoQ29udGV4dCcpO1xuICAgIH0gZWxzZSBpZiAocGF0aC5kYXRhKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZGF0YSA9IHRydWU7XG4gICAgICB0aGlzLm9wY29kZSgnbG9va3VwRGF0YScsIHBhdGguZGVwdGgsIHBhdGgucGFydHMsIHBhdGguc3RyaWN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGNvZGUoXG4gICAgICAgICdsb29rdXBPbkNvbnRleHQnLFxuICAgICAgICBwYXRoLnBhcnRzLFxuICAgICAgICBwYXRoLmZhbHN5LFxuICAgICAgICBwYXRoLnN0cmljdCxcbiAgICAgICAgc2NvcGVkXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZycsIHN0cmluZy52YWx1ZSk7XG4gIH0sXG5cbiAgTnVtYmVyTGl0ZXJhbDogZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgbnVtYmVyLnZhbHVlKTtcbiAgfSxcblxuICBCb29sZWFuTGl0ZXJhbDogZnVuY3Rpb24oYm9vbCkge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIGJvb2wudmFsdWUpO1xuICB9LFxuXG4gIFVuZGVmaW5lZExpdGVyYWw6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcbiAgfSxcblxuICBOdWxsTGl0ZXJhbDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ251bGwnKTtcbiAgfSxcblxuICBIYXNoOiBmdW5jdGlvbihoYXNoKSB7XG4gICAgbGV0IHBhaXJzID0gaGFzaC5wYWlycyxcbiAgICAgIGkgPSAwLFxuICAgICAgbCA9IHBhaXJzLmxlbmd0aDtcblxuICAgIHRoaXMub3Bjb2RlKCdwdXNoSGFzaCcpO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHVzaFBhcmFtKHBhaXJzW2ldLnZhbHVlKTtcbiAgICB9XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2Fzc2lnblRvSGFzaCcsIHBhaXJzW2ldLmtleSk7XG4gICAgfVxuICAgIHRoaXMub3Bjb2RlKCdwb3BIYXNoJyk7XG4gIH0sXG5cbiAgLy8gSEVMUEVSU1xuICBvcGNvZGU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB0aGlzLm9wY29kZXMucHVzaCh7XG4gICAgICBvcGNvZGU6IG5hbWUsXG4gICAgICBhcmdzOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICBsb2M6IHRoaXMuc291cmNlTm9kZVswXS5sb2NcbiAgICB9KTtcbiAgfSxcblxuICBhZGREZXB0aDogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICBpZiAoIWRlcHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy51c2VEZXB0aHMgPSB0cnVlO1xuICB9LFxuXG4gIGNsYXNzaWZ5U2V4cHI6IGZ1bmN0aW9uKHNleHByKSB7XG4gICAgbGV0IGlzU2ltcGxlID0gQVNULmhlbHBlcnMuc2ltcGxlSWQoc2V4cHIucGF0aCk7XG5cbiAgICBsZXQgaXNCbG9ja1BhcmFtID0gaXNTaW1wbGUgJiYgISF0aGlzLmJsb2NrUGFyYW1JbmRleChzZXhwci5wYXRoLnBhcnRzWzBdKTtcblxuICAgIC8vIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGlmOlxuICAgIC8vICogaXRzIGlkIGlzIHNpbXBsZSAoYSBzaW5nbGUgcGFydCwgbm90IGB0aGlzYCBvciBgLi5gKVxuICAgIGxldCBpc0hlbHBlciA9ICFpc0Jsb2NrUGFyYW0gJiYgQVNULmhlbHBlcnMuaGVscGVyRXhwcmVzc2lvbihzZXhwcik7XG5cbiAgICAvLyBpZiBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBidXQgbm90IGEgZGVmaW5pdGVcbiAgICAvLyBoZWxwZXIsIGl0IGlzIGFtYmlndW91cywgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgaW4gYSBsYXRlclxuICAgIC8vIHBhc3Mgb3IgYXQgcnVudGltZS5cbiAgICBsZXQgaXNFbGlnaWJsZSA9ICFpc0Jsb2NrUGFyYW0gJiYgKGlzSGVscGVyIHx8IGlzU2ltcGxlKTtcblxuICAgIC8vIGlmIGFtYmlndW91cywgd2UgY2FuIHBvc3NpYmx5IHJlc29sdmUgdGhlIGFtYmlndWl0eSBub3dcbiAgICAvLyBBbiBlbGlnaWJsZSBoZWxwZXIgaXMgb25lIHRoYXQgZG9lcyBub3QgaGF2ZSBhIGNvbXBsZXggcGF0aCwgaS5lLiBgdGhpcy5mb29gLCBgLi4vZm9vYCBldGMuXG4gICAgaWYgKGlzRWxpZ2libGUgJiYgIWlzSGVscGVyKSB7XG4gICAgICBsZXQgbmFtZSA9IHNleHByLnBhdGgucGFydHNbMF0sXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICBpZiAob3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHtcbiAgICAgICAgaXNIZWxwZXIgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmtub3duSGVscGVyc09ubHkpIHtcbiAgICAgICAgaXNFbGlnaWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0hlbHBlcikge1xuICAgICAgcmV0dXJuICdoZWxwZXInO1xuICAgIH0gZWxzZSBpZiAoaXNFbGlnaWJsZSkge1xuICAgICAgcmV0dXJuICdhbWJpZ3VvdXMnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3NpbXBsZSc7XG4gICAgfVxuICB9LFxuXG4gIHB1c2hQYXJhbXM6IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wdXNoUGFyYW0ocGFyYW1zW2ldKTtcbiAgICB9XG4gIH0sXG5cbiAgcHVzaFBhcmFtOiBmdW5jdGlvbih2YWwpIHtcbiAgICBsZXQgdmFsdWUgPSB2YWwudmFsdWUgIT0gbnVsbCA/IHZhbC52YWx1ZSA6IHZhbC5vcmlnaW5hbCB8fCAnJztcblxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKFxcLj9cXC5cXC8pKi9nLCAnJykucmVwbGFjZSgvXFwvL2csICcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWwuZGVwdGgpIHtcbiAgICAgICAgdGhpcy5hZGREZXB0aCh2YWwuZGVwdGgpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCB2YWwuZGVwdGggfHwgMCk7XG4gICAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZ1BhcmFtJywgdmFsdWUsIHZhbC50eXBlKTtcblxuICAgICAgaWYgKHZhbC50eXBlID09PSAnU3ViRXhwcmVzc2lvbicpIHtcbiAgICAgICAgLy8gU3ViRXhwcmVzc2lvbnMgZ2V0IGV2YWx1YXRlZCBhbmQgcGFzc2VkIGluXG4gICAgICAgIC8vIGluIHN0cmluZyBwYXJhbXMgbW9kZS5cbiAgICAgICAgdGhpcy5hY2NlcHQodmFsKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgICAgbGV0IGJsb2NrUGFyYW1JbmRleDtcbiAgICAgICAgaWYgKHZhbC5wYXJ0cyAmJiAhQVNULmhlbHBlcnMuc2NvcGVkSWQodmFsKSAmJiAhdmFsLmRlcHRoKSB7XG4gICAgICAgICAgYmxvY2tQYXJhbUluZGV4ID0gdGhpcy5ibG9ja1BhcmFtSW5kZXgodmFsLnBhcnRzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tQYXJhbUluZGV4KSB7XG4gICAgICAgICAgbGV0IGJsb2NrUGFyYW1DaGlsZCA9IHZhbC5wYXJ0cy5zbGljZSgxKS5qb2luKCcuJyk7XG4gICAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hJZCcsICdCbG9ja1BhcmFtJywgYmxvY2tQYXJhbUluZGV4LCBibG9ja1BhcmFtQ2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gdmFsLm9yaWdpbmFsIHx8IHZhbHVlO1xuICAgICAgICAgIGlmICh2YWx1ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9edGhpcyg/OlxcLnwkKS8sICcnKVxuICAgICAgICAgICAgICAucmVwbGFjZSgvXlxcLlxcLy8sICcnKVxuICAgICAgICAgICAgICAucmVwbGFjZSgvXlxcLiQvLCAnJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hJZCcsIHZhbC50eXBlLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYWNjZXB0KHZhbCk7XG4gICAgfVxuICB9LFxuXG4gIHNldHVwRnVsbE11c3RhY2hlUGFyYW1zOiBmdW5jdGlvbihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSwgb21pdEVtcHR5KSB7XG4gICAgbGV0IHBhcmFtcyA9IHNleHByLnBhcmFtcztcbiAgICB0aGlzLnB1c2hQYXJhbXMocGFyYW1zKTtcblxuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXG4gICAgaWYgKHNleHByLmhhc2gpIHtcbiAgICAgIHRoaXMuYWNjZXB0KHNleHByLmhhc2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJywgb21pdEVtcHR5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9LFxuXG4gIGJsb2NrUGFyYW1JbmRleDogZnVuY3Rpb24obmFtZSkge1xuICAgIGZvciAoXG4gICAgICBsZXQgZGVwdGggPSAwLCBsZW4gPSB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMubGVuZ3RoO1xuICAgICAgZGVwdGggPCBsZW47XG4gICAgICBkZXB0aCsrXG4gICAgKSB7XG4gICAgICBsZXQgYmxvY2tQYXJhbXMgPSB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXNbZGVwdGhdLFxuICAgICAgICBwYXJhbSA9IGJsb2NrUGFyYW1zICYmIGluZGV4T2YoYmxvY2tQYXJhbXMsIG5hbWUpO1xuICAgICAgaWYgKGJsb2NrUGFyYW1zICYmIHBhcmFtID49IDApIHtcbiAgICAgICAgcmV0dXJuIFtkZXB0aCwgcGFyYW1dO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGVudikge1xuICBpZiAoXG4gICAgaW5wdXQgPT0gbnVsbCB8fFxuICAgICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnICYmIGlucHV0LnR5cGUgIT09ICdQcm9ncmFtJylcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcbiAgICAgICdZb3UgbXVzdCBwYXNzIGEgc3RyaW5nIG9yIEhhbmRsZWJhcnMgQVNUIHRvIEhhbmRsZWJhcnMucHJlY29tcGlsZS4gWW91IHBhc3NlZCAnICtcbiAgICAgICAgaW5wdXRcbiAgICApO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICghKCdkYXRhJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY29tcGF0KSB7XG4gICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xuICB9XG5cbiAgbGV0IGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG4gICAgZW52aXJvbm1lbnQgPSBuZXcgZW52LkNvbXBpbGVyKCkuY29tcGlsZShhc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMgPSB7fSwgZW52KSB7XG4gIGlmIChcbiAgICBpbnB1dCA9PSBudWxsIHx8XG4gICAgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5jb21waWxlLiBZb3UgcGFzc2VkICcgK1xuICAgICAgICBpbnB1dFxuICAgICk7XG4gIH1cblxuICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gdHJ1ZTtcbiAgfVxuICBpZiAob3B0aW9ucy5jb21wYXQpIHtcbiAgICBvcHRpb25zLnVzZURlcHRocyA9IHRydWU7XG4gIH1cblxuICBsZXQgY29tcGlsZWQ7XG5cbiAgZnVuY3Rpb24gY29tcGlsZUlucHV0KCkge1xuICAgIGxldCBhc3QgPSBlbnYucGFyc2UoaW5wdXQsIG9wdGlvbnMpLFxuICAgICAgZW52aXJvbm1lbnQgPSBuZXcgZW52LkNvbXBpbGVyKCkuY29tcGlsZShhc3QsIG9wdGlvbnMpLFxuICAgICAgdGVtcGxhdGVTcGVjID0gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKFxuICAgICAgICBlbnZpcm9ubWVudCxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIHJldHVybiBlbnYudGVtcGxhdGUodGVtcGxhdGVTcGVjKTtcbiAgfVxuXG4gIC8vIFRlbXBsYXRlIGlzIG9ubHkgY29tcGlsZWQgb24gZmlyc3QgdXNlIGFuZCBjYWNoZWQgYWZ0ZXIgdGhhdCBwb2ludC5cbiAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIGV4ZWNPcHRpb25zKSB7XG4gICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkLmNhbGwodGhpcywgY29udGV4dCwgZXhlY09wdGlvbnMpO1xuICB9XG4gIHJldC5fc2V0dXAgPSBmdW5jdGlvbihzZXR1cE9wdGlvbnMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuX3NldHVwKHNldHVwT3B0aW9ucyk7XG4gIH07XG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbihpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkLl9jaGlsZChpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gYXJnRXF1YWxzKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KGEpICYmIGlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWFyZ0VxdWFscyhhW2ldLCBiW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoc2V4cHIpIHtcbiAgaWYgKCFzZXhwci5wYXRoLnBhcnRzKSB7XG4gICAgbGV0IGxpdGVyYWwgPSBzZXhwci5wYXRoO1xuICAgIC8vIENhc3RpbmcgdG8gc3RyaW5nIGhlcmUgdG8gbWFrZSBmYWxzZSBhbmQgMCBsaXRlcmFsIHZhbHVlcyBwbGF5IG5pY2VseSB3aXRoIHRoZSByZXN0XG4gICAgLy8gb2YgdGhlIHN5c3RlbS5cbiAgICBzZXhwci5wYXRoID0ge1xuICAgICAgdHlwZTogJ1BhdGhFeHByZXNzaW9uJyxcbiAgICAgIGRhdGE6IGZhbHNlLFxuICAgICAgZGVwdGg6IDAsXG4gICAgICBwYXJ0czogW2xpdGVyYWwub3JpZ2luYWwgKyAnJ10sXG4gICAgICBvcmlnaW5hbDogbGl0ZXJhbC5vcmlnaW5hbCArICcnLFxuICAgICAgbG9jOiBsaXRlcmFsLmxvY1xuICAgIH07XG4gIH1cbn1cbiIsICIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBpbnRUb0NoYXJNYXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycuc3BsaXQoJycpO1xuXG4vKipcbiAqIEVuY29kZSBhbiBpbnRlZ2VyIGluIHRoZSByYW5nZSBvZiAwIHRvIDYzIHRvIGEgc2luZ2xlIGJhc2UgNjQgZGlnaXQuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG51bWJlcikge1xuICBpZiAoMCA8PSBudW1iZXIgJiYgbnVtYmVyIDwgaW50VG9DaGFyTWFwLmxlbmd0aCkge1xuICAgIHJldHVybiBpbnRUb0NoYXJNYXBbbnVtYmVyXTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYzOiBcIiArIG51bWJlcik7XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHNpbmdsZSBiYXNlIDY0IGNoYXJhY3RlciBjb2RlIGRpZ2l0IHRvIGFuIGludGVnZXIuIFJldHVybnMgLTEgb25cbiAqIGZhaWx1cmUuXG4gKi9cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gKGNoYXJDb2RlKSB7XG4gIHZhciBiaWdBID0gNjU7ICAgICAvLyAnQSdcbiAgdmFyIGJpZ1ogPSA5MDsgICAgIC8vICdaJ1xuXG4gIHZhciBsaXR0bGVBID0gOTc7ICAvLyAnYSdcbiAgdmFyIGxpdHRsZVogPSAxMjI7IC8vICd6J1xuXG4gIHZhciB6ZXJvID0gNDg7ICAgICAvLyAnMCdcbiAgdmFyIG5pbmUgPSA1NzsgICAgIC8vICc5J1xuXG4gIHZhciBwbHVzID0gNDM7ICAgICAvLyAnKydcbiAgdmFyIHNsYXNoID0gNDc7ICAgIC8vICcvJ1xuXG4gIHZhciBsaXR0bGVPZmZzZXQgPSAyNjtcbiAgdmFyIG51bWJlck9mZnNldCA9IDUyO1xuXG4gIC8vIDAgLSAyNTogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcbiAgaWYgKGJpZ0EgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gYmlnWikge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSBiaWdBKTtcbiAgfVxuXG4gIC8vIDI2IC0gNTE6IGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XG4gIGlmIChsaXR0bGVBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGxpdHRsZVopIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gbGl0dGxlQSArIGxpdHRsZU9mZnNldCk7XG4gIH1cblxuICAvLyA1MiAtIDYxOiAwMTIzNDU2Nzg5XG4gIGlmICh6ZXJvIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IG5pbmUpIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gemVybyArIG51bWJlck9mZnNldCk7XG4gIH1cblxuICAvLyA2MjogK1xuICBpZiAoY2hhckNvZGUgPT0gcGx1cykge1xuICAgIHJldHVybiA2MjtcbiAgfVxuXG4gIC8vIDYzOiAvXG4gIGlmIChjaGFyQ29kZSA9PSBzbGFzaCkge1xuICAgIHJldHVybiA2MztcbiAgfVxuXG4gIC8vIEludmFsaWQgYmFzZTY0IGRpZ2l0LlxuICByZXR1cm4gLTE7XG59O1xuIiwgIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogQmFzZWQgb24gdGhlIEJhc2UgNjQgVkxRIGltcGxlbWVudGF0aW9uIGluIENsb3N1cmUgQ29tcGlsZXI6XG4gKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nsb3N1cmUtY29tcGlsZXIvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvY29tL2dvb2dsZS9kZWJ1Z2dpbmcvc291cmNlbWFwL0Jhc2U2NFZMUS5qYXZhXG4gKlxuICogQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgQ29tcGlsZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlXG4gKiAgICBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICogICAgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkXG4gKiAgICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEdvb2dsZSBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWRcbiAqICAgIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuICogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gKiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJy4vYmFzZTY0Jyk7XG5cbi8vIEEgc2luZ2xlIGJhc2UgNjQgZGlnaXQgY2FuIGNvbnRhaW4gNiBiaXRzIG9mIGRhdGEuIEZvciB0aGUgYmFzZSA2NCB2YXJpYWJsZVxuLy8gbGVuZ3RoIHF1YW50aXRpZXMgd2UgdXNlIGluIHRoZSBzb3VyY2UgbWFwIHNwZWMsIHRoZSBmaXJzdCBiaXQgaXMgdGhlIHNpZ24sXG4vLyB0aGUgbmV4dCBmb3VyIGJpdHMgYXJlIHRoZSBhY3R1YWwgdmFsdWUsIGFuZCB0aGUgNnRoIGJpdCBpcyB0aGVcbi8vIGNvbnRpbnVhdGlvbiBiaXQuIFRoZSBjb250aW51YXRpb24gYml0IHRlbGxzIHVzIHdoZXRoZXIgdGhlcmUgYXJlIG1vcmVcbi8vIGRpZ2l0cyBpbiB0aGlzIHZhbHVlIGZvbGxvd2luZyB0aGlzIGRpZ2l0LlxuLy9cbi8vICAgQ29udGludWF0aW9uXG4vLyAgIHwgICAgU2lnblxuLy8gICB8ICAgIHxcbi8vICAgViAgICBWXG4vLyAgIDEwMTAxMVxuXG52YXIgVkxRX0JBU0VfU0hJRlQgPSA1O1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxudmFyIFZMUV9CQVNFID0gMSA8PCBWTFFfQkFTRV9TSElGVDtcblxuLy8gYmluYXJ5OiAwMTExMTFcbnZhciBWTFFfQkFTRV9NQVNLID0gVkxRX0JBU0UgLSAxO1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxudmFyIFZMUV9DT05USU5VQVRJT05fQklUID0gVkxRX0JBU0U7XG5cbi8qKlxuICogQ29udmVydHMgZnJvbSBhIHR3by1jb21wbGVtZW50IHZhbHVlIHRvIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAqICAgMSBiZWNvbWVzIDIgKDEwIGJpbmFyeSksIC0xIGJlY29tZXMgMyAoMTEgYmluYXJ5KVxuICogICAyIGJlY29tZXMgNCAoMTAwIGJpbmFyeSksIC0yIGJlY29tZXMgNSAoMTAxIGJpbmFyeSlcbiAqL1xuZnVuY3Rpb24gdG9WTFFTaWduZWQoYVZhbHVlKSB7XG4gIHJldHVybiBhVmFsdWUgPCAwXG4gICAgPyAoKC1hVmFsdWUpIDw8IDEpICsgMVxuICAgIDogKGFWYWx1ZSA8PCAxKSArIDA7XG59XG5cbi8qKlxuICogQ29udmVydHMgdG8gYSB0d28tY29tcGxlbWVudCB2YWx1ZSBmcm9tIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAqICAgMiAoMTAgYmluYXJ5KSBiZWNvbWVzIDEsIDMgKDExIGJpbmFyeSkgYmVjb21lcyAtMVxuICogICA0ICgxMDAgYmluYXJ5KSBiZWNvbWVzIDIsIDUgKDEwMSBiaW5hcnkpIGJlY29tZXMgLTJcbiAqL1xuZnVuY3Rpb24gZnJvbVZMUVNpZ25lZChhVmFsdWUpIHtcbiAgdmFyIGlzTmVnYXRpdmUgPSAoYVZhbHVlICYgMSkgPT09IDE7XG4gIHZhciBzaGlmdGVkID0gYVZhbHVlID4+IDE7XG4gIHJldHVybiBpc05lZ2F0aXZlXG4gICAgPyAtc2hpZnRlZFxuICAgIDogc2hpZnRlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIDY0IFZMUSBlbmNvZGVkIHZhbHVlLlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9lbmNvZGUoYVZhbHVlKSB7XG4gIHZhciBlbmNvZGVkID0gXCJcIjtcbiAgdmFyIGRpZ2l0O1xuXG4gIHZhciB2bHEgPSB0b1ZMUVNpZ25lZChhVmFsdWUpO1xuXG4gIGRvIHtcbiAgICBkaWdpdCA9IHZscSAmIFZMUV9CQVNFX01BU0s7XG4gICAgdmxxID4+Pj0gVkxRX0JBU0VfU0hJRlQ7XG4gICAgaWYgKHZscSA+IDApIHtcbiAgICAgIC8vIFRoZXJlIGFyZSBzdGlsbCBtb3JlIGRpZ2l0cyBpbiB0aGlzIHZhbHVlLCBzbyB3ZSBtdXN0IG1ha2Ugc3VyZSB0aGVcbiAgICAgIC8vIGNvbnRpbnVhdGlvbiBiaXQgaXMgbWFya2VkLlxuICAgICAgZGlnaXQgfD0gVkxRX0NPTlRJTlVBVElPTl9CSVQ7XG4gICAgfVxuICAgIGVuY29kZWQgKz0gYmFzZTY0LmVuY29kZShkaWdpdCk7XG4gIH0gd2hpbGUgKHZscSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIHRoZSBuZXh0IGJhc2UgNjQgVkxRIHZhbHVlIGZyb20gdGhlIGdpdmVuIHN0cmluZyBhbmQgcmV0dXJucyB0aGVcbiAqIHZhbHVlIGFuZCB0aGUgcmVzdCBvZiB0aGUgc3RyaW5nIHZpYSB0aGUgb3V0IHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZGVjb2RlKGFTdHIsIGFJbmRleCwgYU91dFBhcmFtKSB7XG4gIHZhciBzdHJMZW4gPSBhU3RyLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IDA7XG4gIHZhciBzaGlmdCA9IDA7XG4gIHZhciBjb250aW51YXRpb24sIGRpZ2l0O1xuXG4gIGRvIHtcbiAgICBpZiAoYUluZGV4ID49IHN0ckxlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbW9yZSBkaWdpdHMgaW4gYmFzZSA2NCBWTFEgdmFsdWUuXCIpO1xuICAgIH1cblxuICAgIGRpZ2l0ID0gYmFzZTY0LmRlY29kZShhU3RyLmNoYXJDb2RlQXQoYUluZGV4KyspKTtcbiAgICBpZiAoZGlnaXQgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBkaWdpdDogXCIgKyBhU3RyLmNoYXJBdChhSW5kZXggLSAxKSk7XG4gICAgfVxuXG4gICAgY29udGludWF0aW9uID0gISEoZGlnaXQgJiBWTFFfQ09OVElOVUFUSU9OX0JJVCk7XG4gICAgZGlnaXQgJj0gVkxRX0JBU0VfTUFTSztcbiAgICByZXN1bHQgPSByZXN1bHQgKyAoZGlnaXQgPDwgc2hpZnQpO1xuICAgIHNoaWZ0ICs9IFZMUV9CQVNFX1NISUZUO1xuICB9IHdoaWxlIChjb250aW51YXRpb24pO1xuXG4gIGFPdXRQYXJhbS52YWx1ZSA9IGZyb21WTFFTaWduZWQocmVzdWx0KTtcbiAgYU91dFBhcmFtLnJlc3QgPSBhSW5kZXg7XG59O1xuIiwgIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuLyoqXG4gKiBUaGlzIGlzIGEgaGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHZhbHVlcyBmcm9tIHBhcmFtZXRlci9vcHRpb25zXG4gKiBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSBhcmdzIFRoZSBvYmplY3Qgd2UgYXJlIGV4dHJhY3RpbmcgdmFsdWVzIGZyb21cbiAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB3ZSBhcmUgZ2V0dGluZy5cbiAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgQW4gb3B0aW9uYWwgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nXG4gKiBmcm9tIHRoZSBvYmplY3QuIElmIHRoaXMgaXMgbm90IHNwZWNpZmllZCBhbmQgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmcsIGFuXG4gKiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqL1xuZnVuY3Rpb24gZ2V0QXJnKGFBcmdzLCBhTmFtZSwgYURlZmF1bHRWYWx1ZSkge1xuICBpZiAoYU5hbWUgaW4gYUFyZ3MpIHtcbiAgICByZXR1cm4gYUFyZ3NbYU5hbWVdO1xuICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICByZXR1cm4gYURlZmF1bHRWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFOYW1lICsgJ1wiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQuJyk7XG4gIH1cbn1cbmV4cG9ydHMuZ2V0QXJnID0gZ2V0QXJnO1xuXG52YXIgdXJsUmVnZXhwID0gL14oPzooW1xcdytcXC0uXSspOik/XFwvXFwvKD86KFxcdys6XFx3KylAKT8oW1xcdy4tXSopKD86OihcXGQrKSk/KC4qKSQvO1xudmFyIGRhdGFVcmxSZWdleHAgPSAvXmRhdGE6LitcXCwuKyQvO1xuXG5mdW5jdGlvbiB1cmxQYXJzZShhVXJsKSB7XG4gIHZhciBtYXRjaCA9IGFVcmwubWF0Y2godXJsUmVnZXhwKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2NoZW1lOiBtYXRjaFsxXSxcbiAgICBhdXRoOiBtYXRjaFsyXSxcbiAgICBob3N0OiBtYXRjaFszXSxcbiAgICBwb3J0OiBtYXRjaFs0XSxcbiAgICBwYXRoOiBtYXRjaFs1XVxuICB9O1xufVxuZXhwb3J0cy51cmxQYXJzZSA9IHVybFBhcnNlO1xuXG5mdW5jdGlvbiB1cmxHZW5lcmF0ZShhUGFyc2VkVXJsKSB7XG4gIHZhciB1cmwgPSAnJztcbiAgaWYgKGFQYXJzZWRVcmwuc2NoZW1lKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuc2NoZW1lICsgJzonO1xuICB9XG4gIHVybCArPSAnLy8nO1xuICBpZiAoYVBhcnNlZFVybC5hdXRoKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuYXV0aCArICdAJztcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5ob3N0KSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuaG9zdDtcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wb3J0KSB7XG4gICAgdXJsICs9IFwiOlwiICsgYVBhcnNlZFVybC5wb3J0XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwucGF0aCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLnBhdGg7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cbmV4cG9ydHMudXJsR2VuZXJhdGUgPSB1cmxHZW5lcmF0ZTtcblxuLyoqXG4gKiBOb3JtYWxpemVzIGEgcGF0aCwgb3IgdGhlIHBhdGggcG9ydGlvbiBvZiBhIFVSTDpcbiAqXG4gKiAtIFJlcGxhY2VzIGNvbnNlY3V0aXZlIHNsYXNoZXMgd2l0aCBvbmUgc2xhc2guXG4gKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJy4nIHBhcnRzLlxuICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICc8ZGlyPi8uLicgcGFydHMuXG4gKlxuICogQmFzZWQgb24gY29kZSBpbiB0aGUgTm9kZS5qcyAncGF0aCcgY29yZSBtb2R1bGUuXG4gKlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIHVybCB0byBub3JtYWxpemUuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhUGF0aCkge1xuICB2YXIgcGF0aCA9IGFQYXRoO1xuICB2YXIgdXJsID0gdXJsUGFyc2UoYVBhdGgpO1xuICBpZiAodXJsKSB7XG4gICAgaWYgKCF1cmwucGF0aCkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cbiAgICBwYXRoID0gdXJsLnBhdGg7XG4gIH1cbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCk7XG5cbiAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgvXFwvKy8pO1xuICBmb3IgKHZhciBwYXJ0LCB1cCA9IDAsIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXAgPiAwKSB7XG4gICAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHBhcnQgaXMgYmxhbmsgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGUuIFRyeWluZyB0byBnb1xuICAgICAgICAvLyBhYm92ZSB0aGUgcm9vdCBpcyBhIG5vLW9wLiBUaGVyZWZvcmUgd2UgY2FuIHJlbW92ZSBhbGwgJy4uJyBwYXJ0c1xuICAgICAgICAvLyBkaXJlY3RseSBhZnRlciB0aGUgcm9vdC5cbiAgICAgICAgcGFydHMuc3BsaWNlKGkgKyAxLCB1cCk7XG4gICAgICAgIHVwID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnNwbGljZShpLCAyKTtcbiAgICAgICAgdXAtLTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcGF0aCA9IHBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICBwYXRoID0gaXNBYnNvbHV0ZSA/ICcvJyA6ICcuJztcbiAgfVxuXG4gIGlmICh1cmwpIHtcbiAgICB1cmwucGF0aCA9IHBhdGg7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKHVybCk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcblxuLyoqXG4gKiBKb2lucyB0d28gcGF0aHMvVVJMcy5cbiAqXG4gKiBAcGFyYW0gYVJvb3QgVGhlIHJvb3QgcGF0aCBvciBVUkwuXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgVVJMIHRvIGJlIGpvaW5lZCB3aXRoIHRoZSByb290LlxuICpcbiAqIC0gSWYgYVBhdGggaXMgYSBVUkwgb3IgYSBkYXRhIFVSSSwgYVBhdGggaXMgcmV0dXJuZWQsIHVubGVzcyBhUGF0aCBpcyBhXG4gKiAgIHNjaGVtZS1yZWxhdGl2ZSBVUkw6IFRoZW4gdGhlIHNjaGVtZSBvZiBhUm9vdCwgaWYgYW55LCBpcyBwcmVwZW5kZWRcbiAqICAgZmlyc3QuXG4gKiAtIE90aGVyd2lzZSBhUGF0aCBpcyBhIHBhdGguIElmIGFSb290IGlzIGEgVVJMLCB0aGVuIGl0cyBwYXRoIHBvcnRpb25cbiAqICAgaXMgdXBkYXRlZCB3aXRoIHRoZSByZXN1bHQgYW5kIGFSb290IGlzIHJldHVybmVkLiBPdGhlcndpc2UgdGhlIHJlc3VsdFxuICogICBpcyByZXR1cm5lZC5cbiAqICAgLSBJZiBhUGF0aCBpcyBhYnNvbHV0ZSwgdGhlIHJlc3VsdCBpcyBhUGF0aC5cbiAqICAgLSBPdGhlcndpc2UgdGhlIHR3byBwYXRocyBhcmUgam9pbmVkIHdpdGggYSBzbGFzaC5cbiAqIC0gSm9pbmluZyBmb3IgZXhhbXBsZSAnaHR0cDovLycgYW5kICd3d3cuZXhhbXBsZS5jb20nIGlzIGFsc28gc3VwcG9ydGVkLlxuICovXG5mdW5jdGlvbiBqb2luKGFSb290LCBhUGF0aCkge1xuICBpZiAoYVJvb3QgPT09IFwiXCIpIHtcbiAgICBhUm9vdCA9IFwiLlwiO1xuICB9XG4gIGlmIChhUGF0aCA9PT0gXCJcIikge1xuICAgIGFQYXRoID0gXCIuXCI7XG4gIH1cbiAgdmFyIGFQYXRoVXJsID0gdXJsUGFyc2UoYVBhdGgpO1xuICB2YXIgYVJvb3RVcmwgPSB1cmxQYXJzZShhUm9vdCk7XG4gIGlmIChhUm9vdFVybCkge1xuICAgIGFSb290ID0gYVJvb3RVcmwucGF0aCB8fCAnLyc7XG4gIH1cblxuICAvLyBgam9pbihmb28sICcvL3d3dy5leGFtcGxlLm9yZycpYFxuICBpZiAoYVBhdGhVcmwgJiYgIWFQYXRoVXJsLnNjaGVtZSkge1xuICAgIGlmIChhUm9vdFVybCkge1xuICAgICAgYVBhdGhVcmwuc2NoZW1lID0gYVJvb3RVcmwuc2NoZW1lO1xuICAgIH1cbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVBhdGhVcmwpO1xuICB9XG5cbiAgaWYgKGFQYXRoVXJsIHx8IGFQYXRoLm1hdGNoKGRhdGFVcmxSZWdleHApKSB7XG4gICAgcmV0dXJuIGFQYXRoO1xuICB9XG5cbiAgLy8gYGpvaW4oJ2h0dHA6Ly8nLCAnd3d3LmV4YW1wbGUuY29tJylgXG4gIGlmIChhUm9vdFVybCAmJiAhYVJvb3RVcmwuaG9zdCAmJiAhYVJvb3RVcmwucGF0aCkge1xuICAgIGFSb290VXJsLmhvc3QgPSBhUGF0aDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICB9XG5cbiAgdmFyIGpvaW5lZCA9IGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgPyBhUGF0aFxuICAgIDogbm9ybWFsaXplKGFSb290LnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgYVBhdGgpO1xuXG4gIGlmIChhUm9vdFVybCkge1xuICAgIGFSb290VXJsLnBhdGggPSBqb2luZWQ7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgfVxuICByZXR1cm4gam9pbmVkO1xufVxuZXhwb3J0cy5qb2luID0gam9pbjtcblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24gKGFQYXRoKSB7XG4gIHJldHVybiBhUGF0aC5jaGFyQXQoMCkgPT09ICcvJyB8fCB1cmxSZWdleHAudGVzdChhUGF0aCk7XG59O1xuXG4vKipcbiAqIE1ha2UgYSBwYXRoIHJlbGF0aXZlIHRvIGEgVVJMIG9yIGFub3RoZXIgcGF0aC5cbiAqXG4gKiBAcGFyYW0gYVJvb3QgVGhlIHJvb3QgcGF0aCBvciBVUkwuXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgVVJMIHRvIGJlIG1hZGUgcmVsYXRpdmUgdG8gYVJvb3QuXG4gKi9cbmZ1bmN0aW9uIHJlbGF0aXZlKGFSb290LCBhUGF0aCkge1xuICBpZiAoYVJvb3QgPT09IFwiXCIpIHtcbiAgICBhUm9vdCA9IFwiLlwiO1xuICB9XG5cbiAgYVJvb3QgPSBhUm9vdC5yZXBsYWNlKC9cXC8kLywgJycpO1xuXG4gIC8vIEl0IGlzIHBvc3NpYmxlIGZvciB0aGUgcGF0aCB0byBiZSBhYm92ZSB0aGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBzaW1wbHlcbiAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgcm9vdCBpcyBhIHByZWZpeCBvZiB0aGUgcGF0aCB3b24ndCB3b3JrLiBJbnN0ZWFkLCB3ZVxuICAvLyBuZWVkIHRvIHJlbW92ZSBjb21wb25lbnRzIGZyb20gdGhlIHJvb3Qgb25lIGJ5IG9uZSwgdW50aWwgZWl0aGVyIHdlIGZpbmRcbiAgLy8gYSBwcmVmaXggdGhhdCBmaXRzLCBvciB3ZSBydW4gb3V0IG9mIGNvbXBvbmVudHMgdG8gcmVtb3ZlLlxuICB2YXIgbGV2ZWwgPSAwO1xuICB3aGlsZSAoYVBhdGguaW5kZXhPZihhUm9vdCArICcvJykgIT09IDApIHtcbiAgICB2YXIgaW5kZXggPSBhUm9vdC5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBvbmx5IHBhcnQgb2YgdGhlIHJvb3QgdGhhdCBpcyBsZWZ0IGlzIHRoZSBzY2hlbWUgKGkuZS4gaHR0cDovLyxcbiAgICAvLyBmaWxlOi8vLywgZXRjLiksIG9uZSBvciBtb3JlIHNsYXNoZXMgKC8pLCBvciBzaW1wbHkgbm90aGluZyBhdCBhbGwsIHdlXG4gICAgLy8gaGF2ZSBleGhhdXN0ZWQgYWxsIGNvbXBvbmVudHMsIHNvIHRoZSBwYXRoIGlzIG5vdCByZWxhdGl2ZSB0byB0aGUgcm9vdC5cbiAgICBhUm9vdCA9IGFSb290LnNsaWNlKDAsIGluZGV4KTtcbiAgICBpZiAoYVJvb3QubWF0Y2goL14oW15cXC9dKzpcXC8pP1xcLyokLykpIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG5cbiAgICArK2xldmVsO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIHdlIGFkZCBhIFwiLi4vXCIgZm9yIGVhY2ggY29tcG9uZW50IHdlIHJlbW92ZWQgZnJvbSB0aGUgcm9vdC5cbiAgcmV0dXJuIEFycmF5KGxldmVsICsgMSkuam9pbihcIi4uL1wiKSArIGFQYXRoLnN1YnN0cihhUm9vdC5sZW5ndGggKyAxKTtcbn1cbmV4cG9ydHMucmVsYXRpdmUgPSByZWxhdGl2ZTtcblxudmFyIHN1cHBvcnRzTnVsbFByb3RvID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAhKCdfX3Byb3RvX18nIGluIG9iaik7XG59KCkpO1xuXG5mdW5jdGlvbiBpZGVudGl0eSAocykge1xuICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBCZWNhdXNlIGJlaGF2aW9yIGdvZXMgd2Fja3kgd2hlbiB5b3Ugc2V0IGBfX3Byb3RvX19gIG9uIG9iamVjdHMsIHdlXG4gKiBoYXZlIHRvIHByZWZpeCBhbGwgdGhlIHN0cmluZ3MgaW4gb3VyIHNldCB3aXRoIGFuIGFyYml0cmFyeSBjaGFyYWN0ZXIuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvcHVsbC8zMSBhbmRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzMwXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbmZ1bmN0aW9uIHRvU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gJyQnICsgYVN0cjtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy50b1NldFN0cmluZyA9IHN1cHBvcnRzTnVsbFByb3RvID8gaWRlbnRpdHkgOiB0b1NldFN0cmluZztcblxuZnVuY3Rpb24gZnJvbVNldFN0cmluZyhhU3RyKSB7XG4gIGlmIChpc1Byb3RvU3RyaW5nKGFTdHIpKSB7XG4gICAgcmV0dXJuIGFTdHIuc2xpY2UoMSk7XG4gIH1cblxuICByZXR1cm4gYVN0cjtcbn1cbmV4cG9ydHMuZnJvbVNldFN0cmluZyA9IHN1cHBvcnRzTnVsbFByb3RvID8gaWRlbnRpdHkgOiBmcm9tU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBpc1Byb3RvU3RyaW5nKHMpIHtcbiAgaWYgKCFzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IHMubGVuZ3RoO1xuXG4gIGlmIChsZW5ndGggPCA5IC8qIFwiX19wcm90b19fXCIubGVuZ3RoICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHMuY2hhckNvZGVBdChsZW5ndGggLSAxKSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDIpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMykgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA0KSAhPT0gMTE2IC8qICd0JyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDUpICE9PSAxMTEgLyogJ28nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNikgIT09IDExNCAvKiAncicgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA3KSAhPT0gMTEyIC8qICdwJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDgpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOSkgIT09IDk1ICAvKiAnXycgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gbGVuZ3RoIC0gMTA7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSAhPT0gMzYgLyogJyQnICovKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aGVyZSB0aGUgb3JpZ2luYWwgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiwgYnV0IGRpZmZlcmVudCBnZW5lcmF0ZWRcbiAqIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhIG1hcHBpbmcgd2l0aCBhXG4gKiBzdHViYmVkIG91dCBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyhtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgdmFyIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMgPSBjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucztcblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggZGVmbGF0ZWQgc291cmNlIGFuZCBuYW1lIGluZGljZXMgd2hlcmVcbiAqIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4sIGJ1dCBkaWZmZXJlbnRcbiAqIHNvdXJjZS9uYW1lL29yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhXG4gKiBtYXBwaW5nIHdpdGggYSBzdHViYmVkIG91dCBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCA9IGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkO1xuXG5mdW5jdGlvbiBzdHJjbXAoYVN0cjEsIGFTdHIyKSB7XG4gIGlmIChhU3RyMSA9PT0gYVN0cjIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChhU3RyMSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAxOyAvLyBhU3RyMiAhPT0gbnVsbFxuICB9XG5cbiAgaWYgKGFTdHIyID09PSBudWxsKSB7XG4gICAgcmV0dXJuIC0xOyAvLyBhU3RyMSAhPT0gbnVsbFxuICB9XG5cbiAgaWYgKGFTdHIxID4gYVN0cjIpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggaW5mbGF0ZWQgc291cmNlIGFuZCBuYW1lIHN0cmluZ3Mgd2hlcmVcbiAqIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSB7XG4gIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCA9IGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkO1xuXG4vKipcbiAqIFN0cmlwIGFueSBKU09OIFhTU0kgYXZvaWRhbmNlIHByZWZpeCBmcm9tIHRoZSBzdHJpbmcgKGFzIGRvY3VtZW50ZWRcbiAqIGluIHRoZSBzb3VyY2UgbWFwcyBzcGVjaWZpY2F0aW9uKSwgYW5kIHRoZW4gcGFyc2UgdGhlIHN0cmluZyBhc1xuICogSlNPTi5cbiAqL1xuZnVuY3Rpb24gcGFyc2VTb3VyY2VNYXBJbnB1dChzdHIpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyLnJlcGxhY2UoL15cXCldfSdbXlxcbl0qXFxuLywgJycpKTtcbn1cbmV4cG9ydHMucGFyc2VTb3VyY2VNYXBJbnB1dCA9IHBhcnNlU291cmNlTWFwSW5wdXQ7XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgVVJMIG9mIGEgc291cmNlIGdpdmVuIHRoZSB0aGUgc291cmNlIHJvb3QsIHRoZSBzb3VyY2Unc1xuICogVVJMLCBhbmQgdGhlIHNvdXJjZSBtYXAncyBVUkwuXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgc291cmNlVVJMLCBzb3VyY2VNYXBVUkwpIHtcbiAgc291cmNlVVJMID0gc291cmNlVVJMIHx8ICcnO1xuXG4gIGlmIChzb3VyY2VSb290KSB7XG4gICAgLy8gVGhpcyBmb2xsb3dzIHdoYXQgQ2hyb21lIGRvZXMuXG4gICAgaWYgKHNvdXJjZVJvb3Rbc291cmNlUm9vdC5sZW5ndGggLSAxXSAhPT0gJy8nICYmIHNvdXJjZVVSTFswXSAhPT0gJy8nKSB7XG4gICAgICBzb3VyY2VSb290ICs9ICcvJztcbiAgICB9XG4gICAgLy8gVGhlIHNwZWMgc2F5czpcbiAgICAvLyAgIExpbmUgNDogQW4gb3B0aW9uYWwgc291cmNlIHJvb3QsIHVzZWZ1bCBmb3IgcmVsb2NhdGluZyBzb3VyY2VcbiAgICAvLyAgIGZpbGVzIG9uIGEgc2VydmVyIG9yIHJlbW92aW5nIHJlcGVhdGVkIHZhbHVlcyBpbiB0aGVcbiAgICAvLyAgIFx1MjAxQ3NvdXJjZXNcdTIwMUQgZW50cnkuICBUaGlzIHZhbHVlIGlzIHByZXBlbmRlZCB0byB0aGUgaW5kaXZpZHVhbFxuICAgIC8vICAgZW50cmllcyBpbiB0aGUgXHUyMDFDc291cmNlXHUyMDFEIGZpZWxkLlxuICAgIHNvdXJjZVVSTCA9IHNvdXJjZVJvb3QgKyBzb3VyY2VVUkw7XG4gIH1cblxuICAvLyBIaXN0b3JpY2FsbHksIFNvdXJjZU1hcENvbnN1bWVyIGRpZCBub3QgdGFrZSB0aGUgc291cmNlTWFwVVJMIGFzXG4gIC8vIGEgcGFyYW1ldGVyLiAgVGhpcyBtb2RlIGlzIHN0aWxsIHNvbWV3aGF0IHN1cHBvcnRlZCwgd2hpY2ggaXMgd2h5XG4gIC8vIHRoaXMgY29kZSBibG9jayBpcyBjb25kaXRpb25hbC4gIEhvd2V2ZXIsIGl0J3MgcHJlZmVyYWJsZSB0byBwYXNzXG4gIC8vIHRoZSBzb3VyY2UgbWFwIFVSTCB0byBTb3VyY2VNYXBDb25zdW1lciwgc28gdGhhdCB0aGlzIGZ1bmN0aW9uXG4gIC8vIGNhbiBpbXBsZW1lbnQgdGhlIHNvdXJjZSBVUkwgcmVzb2x1dGlvbiBhbGdvcml0aG0gYXMgb3V0bGluZWQgaW5cbiAgLy8gdGhlIHNwZWMuICBUaGlzIGJsb2NrIGlzIGJhc2ljYWxseSB0aGUgZXF1aXZhbGVudCBvZjpcbiAgLy8gICAgbmV3IFVSTChzb3VyY2VVUkwsIHNvdXJjZU1hcFVSTCkudG9TdHJpbmcoKVxuICAvLyAuLi4gZXhjZXB0IGl0IGF2b2lkcyB1c2luZyBVUkwsIHdoaWNoIHdhc24ndCBhdmFpbGFibGUgaW4gdGhlXG4gIC8vIG9sZGVyIHJlbGVhc2VzIG9mIG5vZGUgc3RpbGwgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeS5cbiAgLy9cbiAgLy8gVGhlIHNwZWMgc2F5czpcbiAgLy8gICBJZiB0aGUgc291cmNlcyBhcmUgbm90IGFic29sdXRlIFVSTHMgYWZ0ZXIgcHJlcGVuZGluZyBvZiB0aGVcbiAgLy8gICBcdTIwMUNzb3VyY2VSb290XHUyMDFELCB0aGUgc291cmNlcyBhcmUgcmVzb2x2ZWQgcmVsYXRpdmUgdG8gdGhlXG4gIC8vICAgU291cmNlTWFwIChsaWtlIHJlc29sdmluZyBzY3JpcHQgc3JjIGluIGEgaHRtbCBkb2N1bWVudCkuXG4gIGlmIChzb3VyY2VNYXBVUkwpIHtcbiAgICB2YXIgcGFyc2VkID0gdXJsUGFyc2Uoc291cmNlTWFwVVJMKTtcbiAgICBpZiAoIXBhcnNlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwic291cmNlTWFwVVJMIGNvdWxkIG5vdCBiZSBwYXJzZWRcIik7XG4gICAgfVxuICAgIGlmIChwYXJzZWQucGF0aCkge1xuICAgICAgLy8gU3RyaXAgdGhlIGxhc3QgcGF0aCBjb21wb25lbnQsIGJ1dCBrZWVwIHRoZSBcIi9cIi5cbiAgICAgIHZhciBpbmRleCA9IHBhcnNlZC5wYXRoLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBwYXJzZWQucGF0aCA9IHBhcnNlZC5wYXRoLnN1YnN0cmluZygwLCBpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VVUkwgPSBqb2luKHVybEdlbmVyYXRlKHBhcnNlZCksIHNvdXJjZVVSTCk7XG4gIH1cblxuICByZXR1cm4gbm9ybWFsaXplKHNvdXJjZVVSTCk7XG59XG5leHBvcnRzLmNvbXB1dGVTb3VyY2VVUkwgPSBjb21wdXRlU291cmNlVVJMO1xuIiwgIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc05hdGl2ZU1hcCA9IHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCI7XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB3aGljaCBpcyBhIGNvbWJpbmF0aW9uIG9mIGFuIGFycmF5IGFuZCBhIHNldC4gQWRkaW5nIGEgbmV3XG4gKiBtZW1iZXIgaXMgTygxKSwgdGVzdGluZyBmb3IgbWVtYmVyc2hpcCBpcyBPKDEpLCBhbmQgZmluZGluZyB0aGUgaW5kZXggb2YgYW5cbiAqIGVsZW1lbnQgaXMgTygxKS4gUmVtb3ZpbmcgZWxlbWVudHMgZnJvbSB0aGUgc2V0IGlzIG5vdCBzdXBwb3J0ZWQuIE9ubHlcbiAqIHN0cmluZ3MgYXJlIHN1cHBvcnRlZCBmb3IgbWVtYmVyc2hpcC5cbiAqL1xuZnVuY3Rpb24gQXJyYXlTZXQoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX3NldCA9IGhhc05hdGl2ZU1hcCA/IG5ldyBNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogU3RhdGljIG1ldGhvZCBmb3IgY3JlYXRpbmcgQXJyYXlTZXQgaW5zdGFuY2VzIGZyb20gYW4gZXhpc3RpbmcgYXJyYXkuXG4gKi9cbkFycmF5U2V0LmZyb21BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X2Zyb21BcnJheShhQXJyYXksIGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgdmFyIHNldCA9IG5ldyBBcnJheVNldCgpO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYUFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc2V0LmFkZChhQXJyYXlbaV0sIGFBbGxvd0R1cGxpY2F0ZXMpO1xuICB9XG4gIHJldHVybiBzZXQ7XG59O1xuXG4vKipcbiAqIFJldHVybiBob3cgbWFueSB1bmlxdWUgaXRlbXMgYXJlIGluIHRoaXMgQXJyYXlTZXQuIElmIGR1cGxpY2F0ZXMgaGF2ZSBiZWVuXG4gKiBhZGRlZCwgdGhhbiB0aG9zZSBkbyBub3QgY291bnQgdG93YXJkcyB0aGUgc2l6ZS5cbiAqXG4gKiBAcmV0dXJucyBOdW1iZXJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiBBcnJheVNldF9zaXplKCkge1xuICByZXR1cm4gaGFzTmF0aXZlTWFwID8gdGhpcy5fc2V0LnNpemUgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9zZXQpLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzdHJpbmcgdG8gdGhpcyBzZXQuXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBBcnJheVNldF9hZGQoYVN0ciwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc1N0ciA9IGhhc05hdGl2ZU1hcCA/IGFTdHIgOiB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICB2YXIgaXNEdXBsaWNhdGUgPSBoYXNOYXRpdmVNYXAgPyB0aGlzLmhhcyhhU3RyKSA6IGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cik7XG4gIHZhciBpZHggPSB0aGlzLl9hcnJheS5sZW5ndGg7XG4gIGlmICghaXNEdXBsaWNhdGUgfHwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIHRoaXMuX2FycmF5LnB1c2goYVN0cik7XG4gIH1cbiAgaWYgKCFpc0R1cGxpY2F0ZSkge1xuICAgIGlmIChoYXNOYXRpdmVNYXApIHtcbiAgICAgIHRoaXMuX3NldC5zZXQoYVN0ciwgaWR4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2V0W3NTdHJdID0gaWR4O1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJcyB0aGUgZ2l2ZW4gc3RyaW5nIGEgbWVtYmVyIG9mIHRoaXMgc2V0P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gQXJyYXlTZXRfaGFzKGFTdHIpIHtcbiAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgIHJldHVybiB0aGlzLl9zZXQuaGFzKGFTdHIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgICByZXR1cm4gaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXaGF0IGlzIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gc3RyaW5nIGluIHRoZSBhcnJheT9cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBBcnJheVNldF9pbmRleE9mKGFTdHIpIHtcbiAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgIHZhciBpZHggPSB0aGlzLl9zZXQuZ2V0KGFTdHIpO1xuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc1N0ciA9IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXRbc1N0cl07XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU3RyICsgJ1wiIGlzIG5vdCBpbiB0aGUgc2V0LicpO1xufTtcblxuLyoqXG4gKiBXaGF0IGlzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleD9cbiAqXG4gKiBAcGFyYW0gTnVtYmVyIGFJZHhcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gQXJyYXlTZXRfYXQoYUlkeCkge1xuICBpZiAoYUlkeCA+PSAwICYmIGFJZHggPCB0aGlzLl9hcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbYUlkeF07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IGluZGV4ZWQgYnkgJyArIGFJZHgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNldCAod2hpY2ggaGFzIHRoZSBwcm9wZXIgaW5kaWNlc1xuICogaW5kaWNhdGVkIGJ5IGluZGV4T2YpLiBOb3RlIHRoYXQgdGhpcyBpcyBhIGNvcHkgb2YgdGhlIGludGVybmFsIGFycmF5IHVzZWRcbiAqIGZvciBzdG9yaW5nIHRoZSBtZW1iZXJzIHNvIHRoYXQgbm8gb25lIGNhbiBtZXNzIHdpdGggaW50ZXJuYWwgc3RhdGUuXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfdG9BcnJheSgpIHtcbiAgcmV0dXJuIHRoaXMuX2FycmF5LnNsaWNlKCk7XG59O1xuXG5leHBvcnRzLkFycmF5U2V0ID0gQXJyYXlTZXQ7XG4iLCAiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDE0IE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIG1hcHBpbmdCIGlzIGFmdGVyIG1hcHBpbmdBIHdpdGggcmVzcGVjdCB0byBnZW5lcmF0ZWRcbiAqIHBvc2l0aW9uLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICAvLyBPcHRpbWl6ZWQgZm9yIG1vc3QgY29tbW9uIGNhc2VcbiAgdmFyIGxpbmVBID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZTtcbiAgdmFyIGxpbmVCID0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgdmFyIGNvbHVtbkEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW47XG4gIHZhciBjb2x1bW5CID0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICByZXR1cm4gbGluZUIgPiBsaW5lQSB8fCBsaW5lQiA9PSBsaW5lQSAmJiBjb2x1bW5CID49IGNvbHVtbkEgfHxcbiAgICAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSA8PSAwO1xufVxuXG4vKipcbiAqIEEgZGF0YSBzdHJ1Y3R1cmUgdG8gcHJvdmlkZSBhIHNvcnRlZCB2aWV3IG9mIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIGFcbiAqIHBlcmZvcm1hbmNlIGNvbnNjaW91cyBtYW5uZXIuIEl0IHRyYWRlcyBhIG5lZ2xpYmFibGUgb3ZlcmhlYWQgaW4gZ2VuZXJhbFxuICogY2FzZSBmb3IgYSBsYXJnZSBzcGVlZHVwIGluIGNhc2Ugb2YgbWFwcGluZ3MgYmVpbmcgYWRkZWQgaW4gb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmdMaXN0KCkge1xuICB0aGlzLl9hcnJheSA9IFtdO1xuICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICAvLyBTZXJ2ZXMgYXMgaW5maW11bVxuICB0aGlzLl9sYXN0ID0ge2dlbmVyYXRlZExpbmU6IC0xLCBnZW5lcmF0ZWRDb2x1bW46IDB9O1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgdGhyb3VnaCBpbnRlcm5hbCBpdGVtcy4gVGhpcyBtZXRob2QgdGFrZXMgdGhlIHNhbWUgYXJndW1lbnRzIHRoYXRcbiAqIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgdGFrZXMuXG4gKlxuICogTk9URTogVGhlIG9yZGVyIG9mIHRoZSBtYXBwaW5ncyBpcyBOT1QgZ3VhcmFudGVlZC5cbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLnVuc29ydGVkRm9yRWFjaCA9XG4gIGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2ZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZykge1xuICAgIHRoaXMuX2FycmF5LmZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZyk7XG4gIH07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzb3VyY2UgbWFwcGluZy5cbiAqXG4gKiBAcGFyYW0gT2JqZWN0IGFNYXBwaW5nXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF9hZGQoYU1hcHBpbmcpIHtcbiAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIodGhpcy5fbGFzdCwgYU1hcHBpbmcpKSB7XG4gICAgdGhpcy5fbGFzdCA9IGFNYXBwaW5nO1xuICAgIHRoaXMuX2FycmF5LnB1c2goYU1hcHBpbmcpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3NvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2FycmF5LnB1c2goYU1hcHBpbmcpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZsYXQsIHNvcnRlZCBhcnJheSBvZiBtYXBwaW5ncy4gVGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQgYnlcbiAqIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAqXG4gKiBXQVJOSU5HOiBUaGlzIG1ldGhvZCByZXR1cm5zIGludGVybmFsIGRhdGEgd2l0aG91dCBjb3B5aW5nLCBmb3JcbiAqIHBlcmZvcm1hbmNlLiBUaGUgcmV0dXJuIHZhbHVlIG11c3QgTk9UIGJlIG11dGF0ZWQsIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhc1xuICogYW4gaW1tdXRhYmxlIGJvcnJvdy4gSWYgeW91IHdhbnQgdG8gdGFrZSBvd25lcnNoaXAsIHlvdSBtdXN0IG1ha2UgeW91ciBvd25cbiAqIGNvcHkuXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfdG9BcnJheSgpIHtcbiAgaWYgKCF0aGlzLl9zb3J0ZWQpIHtcbiAgICB0aGlzLl9hcnJheS5zb3J0KHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQpO1xuICAgIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2FycmF5O1xufTtcblxuZXhwb3J0cy5NYXBwaW5nTGlzdCA9IE1hcHBpbmdMaXN0O1xuIiwgIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgTWFwcGluZ0xpc3QgPSByZXF1aXJlKCcuL21hcHBpbmctbGlzdCcpLk1hcHBpbmdMaXN0O1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IgcmVwcmVzZW50cyBhIHNvdXJjZSBtYXAgd2hpY2ggaXNcbiAqIGJlaW5nIGJ1aWx0IGluY3JlbWVudGFsbHkuIFlvdSBtYXkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nXG4gKiBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBmaWxlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKiAgIC0gc291cmNlUm9vdDogQSByb290IGZvciBhbGwgcmVsYXRpdmUgVVJMcyBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncykge1xuICBpZiAoIWFBcmdzKSB7XG4gICAgYUFyZ3MgPSB7fTtcbiAgfVxuICB0aGlzLl9maWxlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdmaWxlJywgbnVsbCk7XG4gIHRoaXMuX3NvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgdGhpcy5fc2tpcFZhbGlkYXRpb24gPSB1dGlsLmdldEFyZyhhQXJncywgJ3NraXBWYWxpZGF0aW9uJywgZmFsc2UpO1xuICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX21hcHBpbmdzID0gbmV3IE1hcHBpbmdMaXN0KCk7XG4gIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG59XG5cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU291cmNlTWFwR2VuZXJhdG9yIGJhc2VkIG9uIGEgU291cmNlTWFwQ29uc3VtZXJcbiAqXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBTb3VyY2VNYXAuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyKSB7XG4gICAgdmFyIHNvdXJjZVJvb3QgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlUm9vdDtcbiAgICB2YXIgZ2VuZXJhdG9yID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcih7XG4gICAgICBmaWxlOiBhU291cmNlTWFwQ29uc3VtZXIuZmlsZSxcbiAgICAgIHNvdXJjZVJvb3Q6IHNvdXJjZVJvb3RcbiAgICB9KTtcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBuZXdNYXBwaW5nID0ge1xuICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG5ld01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld01hcHBpbmcub3JpZ2luYWwgPSB7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5uYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGdlbmVyYXRvci5hZGRNYXBwaW5nKG5ld01hcHBpbmcpO1xuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBzb3VyY2VSZWxhdGl2ZSA9IHNvdXJjZUZpbGU7XG4gICAgICBpZiAoc291cmNlUm9vdCAhPT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VSZWxhdGl2ZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZ2VuZXJhdG9yLl9zb3VyY2VzLmhhcyhzb3VyY2VSZWxhdGl2ZSkpIHtcbiAgICAgICAgZ2VuZXJhdG9yLl9zb3VyY2VzLmFkZChzb3VyY2VSZWxhdGl2ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGdlbmVyYXRvci5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH07XG5cbi8qKlxuICogQWRkIGEgc2luZ2xlIG1hcHBpbmcgZnJvbSBvcmlnaW5hbCBzb3VyY2UgbGluZSBhbmQgY29sdW1uIHRvIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBmb3IgdGhpcyBzb3VyY2UgbWFwIGJlaW5nIGNyZWF0ZWQuIFRoZSBtYXBwaW5nXG4gKiBvYmplY3Qgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBnZW5lcmF0ZWQ6IEFuIG9iamVjdCB3aXRoIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAqICAgLSBvcmlnaW5hbDogQW4gb2JqZWN0IHdpdGggdGhlIG9yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMuXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUgKHJlbGF0aXZlIHRvIHRoZSBzb3VyY2VSb290KS5cbiAqICAgLSBuYW1lOiBBbiBvcHRpb25hbCBvcmlnaW5hbCB0b2tlbiBuYW1lIGZvciB0aGlzIG1hcHBpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYWRkTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hZGRNYXBwaW5nKGFBcmdzKSB7XG4gICAgdmFyIGdlbmVyYXRlZCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnZ2VuZXJhdGVkJyk7XG4gICAgdmFyIG9yaWdpbmFsID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdvcmlnaW5hbCcsIG51bGwpO1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScsIG51bGwpO1xuICAgIHZhciBuYW1lID0gdXRpbC5nZXRBcmcoYUFyZ3MsICduYW1lJywgbnVsbCk7XG5cbiAgICBpZiAoIXRoaXMuX3NraXBWYWxpZGF0aW9uKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZU1hcHBpbmcoZ2VuZXJhdGVkLCBvcmlnaW5hbCwgc291cmNlLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IFN0cmluZyhzb3VyY2UpO1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICAgIGlmICghdGhpcy5fbmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9tYXBwaW5ncy5hZGQoe1xuICAgICAgZ2VuZXJhdGVkTGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IGdlbmVyYXRlZC5jb2x1bW4sXG4gICAgICBvcmlnaW5hbExpbmU6IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwubGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmNvbHVtbixcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFNldCB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGEgc291cmNlIGZpbGUuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuc2V0U291cmNlQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHZhciBzb3VyY2UgPSBhU291cmNlRmlsZTtcbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuX3NvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgfVxuXG4gICAgaWYgKGFTb3VyY2VDb250ZW50ICE9IG51bGwpIHtcbiAgICAgIC8vIEFkZCB0aGUgc291cmNlIGNvbnRlbnQgdG8gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IF9zb3VyY2VzQ29udGVudHMgbWFwIGlmIHRoZSBwcm9wZXJ0eSBpcyBudWxsLlxuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgc291cmNlIGZpbGUgZnJvbSB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAvLyBJZiB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAgaXMgZW1wdHksIHNldCB0aGUgcHJvcGVydHkgdG8gbnVsbC5cbiAgICAgIGRlbGV0ZSB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9zb3VyY2VzQ29udGVudHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBtYXBwaW5ncyBvZiBhIHN1Yi1zb3VyY2UtbWFwIGZvciBhIHNwZWNpZmljIHNvdXJjZSBmaWxlIHRvIHRoZVxuICogc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQuIEVhY2ggbWFwcGluZyB0byB0aGUgc3VwcGxpZWQgc291cmNlIGZpbGUgaXNcbiAqIHJld3JpdHRlbiB1c2luZyB0aGUgc3VwcGxpZWQgc291cmNlIG1hcC4gTm90ZTogVGhlIHJlc29sdXRpb24gZm9yIHRoZVxuICogcmVzdWx0aW5nIG1hcHBpbmdzIGlzIHRoZSBtaW5pbWl1bSBvZiB0aGlzIG1hcCBhbmQgdGhlIHN1cHBsaWVkIG1hcC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQuXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgT3B0aW9uYWwuIFRoZSBmaWxlbmFtZSBvZiB0aGUgc291cmNlIGZpbGUuXG4gKiAgICAgICAgSWYgb21pdHRlZCwgU291cmNlTWFwQ29uc3VtZXIncyBmaWxlIHByb3BlcnR5IHdpbGwgYmUgdXNlZC5cbiAqIEBwYXJhbSBhU291cmNlTWFwUGF0aCBPcHRpb25hbC4gVGhlIGRpcm5hbWUgb2YgdGhlIHBhdGggdG8gdGhlIHNvdXJjZSBtYXBcbiAqICAgICAgICB0byBiZSBhcHBsaWVkLiBJZiByZWxhdGl2ZSwgaXQgaXMgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcENvbnN1bWVyLlxuICogICAgICAgIFRoaXMgcGFyYW1ldGVyIGlzIG5lZWRlZCB3aGVuIHRoZSB0d28gc291cmNlIG1hcHMgYXJlbid0IGluIHRoZSBzYW1lXG4gKiAgICAgICAgZGlyZWN0b3J5LCBhbmQgdGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZCBjb250YWlucyByZWxhdGl2ZSBzb3VyY2VcbiAqICAgICAgICBwYXRocy4gSWYgc28sIHRob3NlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBuZWVkIHRvIGJlIHJld3JpdHRlblxuICogICAgICAgIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfYXBwbHlTb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyLCBhU291cmNlRmlsZSwgYVNvdXJjZU1hcFBhdGgpIHtcbiAgICB2YXIgc291cmNlRmlsZSA9IGFTb3VyY2VGaWxlO1xuICAgIC8vIElmIGFTb3VyY2VGaWxlIGlzIG9taXR0ZWQsIHdlIHdpbGwgdXNlIHRoZSBmaWxlIHByb3BlcnR5IG9mIHRoZSBTb3VyY2VNYXBcbiAgICBpZiAoYVNvdXJjZUZpbGUgPT0gbnVsbCkge1xuICAgICAgaWYgKGFTb3VyY2VNYXBDb25zdW1lci5maWxlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwIHJlcXVpcmVzIGVpdGhlciBhbiBleHBsaWNpdCBzb3VyY2UgZmlsZSwgJyArXG4gICAgICAgICAgJ29yIHRoZSBzb3VyY2UgbWFwXFwncyBcImZpbGVcIiBwcm9wZXJ0eS4gQm90aCB3ZXJlIG9taXR0ZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc291cmNlRmlsZSA9IGFTb3VyY2VNYXBDb25zdW1lci5maWxlO1xuICAgIH1cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgLy8gTWFrZSBcInNvdXJjZUZpbGVcIiByZWxhdGl2ZSBpZiBhbiBhYnNvbHV0ZSBVcmwgaXMgcGFzc2VkLlxuICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgIH1cbiAgICAvLyBBcHBseWluZyB0aGUgU291cmNlTWFwIGNhbiBhZGQgYW5kIHJlbW92ZSBpdGVtcyBmcm9tIHRoZSBzb3VyY2VzIGFuZFxuICAgIC8vIHRoZSBuYW1lcyBhcnJheS5cbiAgICB2YXIgbmV3U291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICAgIHZhciBuZXdOYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gICAgLy8gRmluZCBtYXBwaW5ncyBmb3IgdGhlIFwic291cmNlRmlsZVwiXG4gICAgdGhpcy5fbWFwcGluZ3MudW5zb3J0ZWRGb3JFYWNoKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IHNvdXJjZUZpbGUgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgIT0gbnVsbCkge1xuICAgICAgICAvLyBDaGVjayBpZiBpdCBjYW4gYmUgbWFwcGVkIGJ5IHRoZSBzb3VyY2UgbWFwLCB0aGVuIHVwZGF0ZSB0aGUgbWFwcGluZy5cbiAgICAgICAgdmFyIG9yaWdpbmFsID0gYVNvdXJjZU1hcENvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gQ29weSBtYXBwaW5nXG4gICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICAgICAgaWYgKG9yaWdpbmFsLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gb3JpZ2luYWwubmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgaWYgKHNvdXJjZSAhPSBudWxsICYmICFuZXdTb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIG5ld1NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiAhbmV3TmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIG5ld05hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cblxuICAgIH0sIHRoaXMpO1xuICAgIHRoaXMuX3NvdXJjZXMgPSBuZXdTb3VyY2VzO1xuICAgIHRoaXMuX25hbWVzID0gbmV3TmFtZXM7XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50cyBvZiBhcHBsaWVkIG1hcC5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gIH07XG5cbi8qKlxuICogQSBtYXBwaW5nIGNhbiBoYXZlIG9uZSBvZiB0aGUgdGhyZWUgbGV2ZWxzIG9mIGRhdGE6XG4gKlxuICogICAxLiBKdXN0IHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gKiAgIDIuIFRoZSBHZW5lcmF0ZWQgcG9zaXRpb24sIG9yaWdpbmFsIHBvc2l0aW9uLCBhbmQgb3JpZ2luYWwgc291cmNlLlxuICogICAzLiBHZW5lcmF0ZWQgYW5kIG9yaWdpbmFsIHBvc2l0aW9uLCBvcmlnaW5hbCBzb3VyY2UsIGFzIHdlbGwgYXMgYSBuYW1lXG4gKiAgICAgIHRva2VuLlxuICpcbiAqIFRvIG1haW50YWluIGNvbnNpc3RlbmN5LCB3ZSB2YWxpZGF0ZSB0aGF0IGFueSBuZXcgbWFwcGluZyBiZWluZyBhZGRlZCBmYWxsc1xuICogaW4gdG8gb25lIG9mIHRoZXNlIGNhdGVnb3JpZXMuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl92YWxpZGF0ZU1hcHBpbmcoYUdlbmVyYXRlZCwgYU9yaWdpbmFsLCBhU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFOYW1lKSB7XG4gICAgLy8gV2hlbiBhT3JpZ2luYWwgaXMgdHJ1dGh5IGJ1dCBoYXMgZW1wdHkgdmFsdWVzIGZvciAubGluZSBhbmQgLmNvbHVtbixcbiAgICAvLyBpdCBpcyBtb3N0IGxpa2VseSBhIHByb2dyYW1tZXIgZXJyb3IuIEluIHRoaXMgY2FzZSB3ZSB0aHJvdyBhIHZlcnlcbiAgICAvLyBzcGVjaWZpYyBlcnJvciBtZXNzYWdlIHRvIHRyeSB0byBndWlkZSB0aGVtIHRoZSByaWdodCB3YXkuXG4gICAgLy8gRm9yIGV4YW1wbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyL3BvbHltZXItYnVuZGxlci9wdWxsLzUxOVxuICAgIGlmIChhT3JpZ2luYWwgJiYgdHlwZW9mIGFPcmlnaW5hbC5saW5lICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgYU9yaWdpbmFsLmNvbHVtbiAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ29yaWdpbmFsLmxpbmUgYW5kIG9yaWdpbmFsLmNvbHVtbiBhcmUgbm90IG51bWJlcnMgLS0geW91IHByb2JhYmx5IG1lYW50IHRvIG9taXQgJyArXG4gICAgICAgICAgICAndGhlIG9yaWdpbmFsIG1hcHBpbmcgZW50aXJlbHkgYW5kIG9ubHkgbWFwIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24uIElmIHNvLCBwYXNzICcgK1xuICAgICAgICAgICAgJ251bGwgZm9yIHRoZSBvcmlnaW5hbCBtYXBwaW5nIGluc3RlYWQgb2YgYW4gb2JqZWN0IHdpdGggZW1wdHkgb3IgbnVsbCB2YWx1ZXMuJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChhR2VuZXJhdGVkICYmICdsaW5lJyBpbiBhR2VuZXJhdGVkICYmICdjb2x1bW4nIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICYmICFhT3JpZ2luYWwgJiYgIWFTb3VyY2UgJiYgIWFOYW1lKSB7XG4gICAgICAvLyBDYXNlIDEuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAgICAgICYmIGFPcmlnaW5hbCAmJiAnbGluZScgaW4gYU9yaWdpbmFsICYmICdjb2x1bW4nIGluIGFPcmlnaW5hbFxuICAgICAgICAgICAgICYmIGFHZW5lcmF0ZWQubGluZSA+IDAgJiYgYUdlbmVyYXRlZC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFPcmlnaW5hbC5saW5lID4gMCAmJiBhT3JpZ2luYWwuY29sdW1uID49IDBcbiAgICAgICAgICAgICAmJiBhU291cmNlKSB7XG4gICAgICAvLyBDYXNlcyAyIGFuZCAzLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtYXBwaW5nOiAnICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBnZW5lcmF0ZWQ6IGFHZW5lcmF0ZWQsXG4gICAgICAgIHNvdXJjZTogYVNvdXJjZSxcbiAgICAgICAgb3JpZ2luYWw6IGFPcmlnaW5hbCxcbiAgICAgICAgbmFtZTogYU5hbWVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogU2VyaWFsaXplIHRoZSBhY2N1bXVsYXRlZCBtYXBwaW5ncyBpbiB0byB0aGUgc3RyZWFtIG9mIGJhc2UgNjQgVkxRc1xuICogc3BlY2lmaWVkIGJ5IHRoZSBzb3VyY2UgbWFwIGZvcm1hdC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fc2VyaWFsaXplTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2VyaWFsaXplTWFwcGluZ3MoKSB7XG4gICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRMaW5lID0gMTtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICB2YXIgcHJldmlvdXNTb3VyY2UgPSAwO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgbmV4dDtcbiAgICB2YXIgbWFwcGluZztcbiAgICB2YXIgbmFtZUlkeDtcbiAgICB2YXIgc291cmNlSWR4O1xuXG4gICAgdmFyIG1hcHBpbmdzID0gdGhpcy5fbWFwcGluZ3MudG9BcnJheSgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtYXBwaW5ncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbWFwcGluZyA9IG1hcHBpbmdzW2ldO1xuICAgICAgbmV4dCA9ICcnXG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgIHdoaWxlIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG5leHQgKz0gJzsnO1xuICAgICAgICAgIHByZXZpb3VzR2VuZXJhdGVkTGluZSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgaWYgKCF1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmcsIG1hcHBpbmdzW2kgLSAxXSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0ICs9ICcsJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlSWR4ID0gdGhpcy5fc291cmNlcy5pbmRleE9mKG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKHNvdXJjZUlkeCAtIHByZXZpb3VzU291cmNlKTtcbiAgICAgICAgcHJldmlvdXNTb3VyY2UgPSBzb3VyY2VJZHg7XG5cbiAgICAgICAgLy8gbGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkIGluIFNvdXJjZU1hcCBzcGVjIHZlcnNpb24gM1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbExpbmUgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbExpbmUpO1xuICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMTtcblxuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4pO1xuICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICBuYW1lSWR4ID0gdGhpcy5fbmFtZXMuaW5kZXhPZihtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShuYW1lSWR4IC0gcHJldmlvdXNOYW1lKTtcbiAgICAgICAgICBwcmV2aW91c05hbWUgPSBuYW1lSWR4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCArPSBuZXh0O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZ2VuZXJhdGVTb3VyY2VzQ29udGVudChhU291cmNlcywgYVNvdXJjZVJvb3QpIHtcbiAgICByZXR1cm4gYVNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGFTb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZShhU291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBrZXkgPSB1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSk7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX3NvdXJjZXNDb250ZW50cywga2V5KVxuICAgICAgICA/IHRoaXMuX3NvdXJjZXNDb250ZW50c1trZXldXG4gICAgICAgIDogbnVsbDtcbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuLyoqXG4gKiBFeHRlcm5hbGl6ZSB0aGUgc291cmNlIG1hcC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b0pTT04gPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9KU09OKCkge1xuICAgIHZhciBtYXAgPSB7XG4gICAgICB2ZXJzaW9uOiB0aGlzLl92ZXJzaW9uLFxuICAgICAgc291cmNlczogdGhpcy5fc291cmNlcy50b0FycmF5KCksXG4gICAgICBuYW1lczogdGhpcy5fbmFtZXMudG9BcnJheSgpLFxuICAgICAgbWFwcGluZ3M6IHRoaXMuX3NlcmlhbGl6ZU1hcHBpbmdzKClcbiAgICB9O1xuICAgIGlmICh0aGlzLl9maWxlICE9IG51bGwpIHtcbiAgICAgIG1hcC5maWxlID0gdGhpcy5fZmlsZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgbWFwLnNvdXJjZVJvb3QgPSB0aGlzLl9zb3VyY2VSb290O1xuICAgIH1cbiAgICBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICBtYXAuc291cmNlc0NvbnRlbnQgPSB0aGlzLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KG1hcC5zb3VyY2VzLCBtYXAuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcblxuLyoqXG4gKiBSZW5kZXIgdGhlIHNvdXJjZSBtYXAgYmVpbmcgZ2VuZXJhdGVkIHRvIGEgc3RyaW5nLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3RvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcbiAgfTtcblxuZXhwb3J0cy5Tb3VyY2VNYXBHZW5lcmF0b3IgPSBTb3VyY2VNYXBHZW5lcmF0b3I7XG4iLCAiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG5leHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcbmV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZSBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoLlxuICpcbiAqIEBwYXJhbSBhTG93IEluZGljZXMgaGVyZSBhbmQgbG93ZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhSGlnaCBJbmRpY2VzIGhlcmUgYW5kIGhpZ2hlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgYmVpbmcgc2VhcmNoZWQgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgbm9uLWVtcHR5IGFycmF5IGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBlbGVtZW50cyBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMS5cbiAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gcmVjdXJzaXZlU2VhcmNoKGFMb3csIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHRlcm1pbmF0ZXMgd2hlbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICAvL1xuICAvLyAgIDEuIFdlIGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAvL1xuICAvLyAgIDIuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYnV0IHdlIGNhbiByZXR1cm4gdGhlIGluZGV4IG9mXG4gIC8vICAgICAgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50LlxuICAvL1xuICAvLyAgIDMuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYW5kIHRoZXJlIGlzIG5vIG5leHQtY2xvc2VzdFxuICAvLyAgICAgIGVsZW1lbnQgdGhhbiB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCBzbyB3ZSByZXR1cm4gLTEuXG4gIHZhciBtaWQgPSBNYXRoLmZsb29yKChhSGlnaCAtIGFMb3cpIC8gMikgKyBhTG93O1xuICB2YXIgY21wID0gYUNvbXBhcmUoYU5lZWRsZSwgYUhheXN0YWNrW21pZF0sIHRydWUpO1xuICBpZiAoY21wID09PSAwKSB7XG4gICAgLy8gRm91bmQgdGhlIGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAgIHJldHVybiBtaWQ7XG4gIH1cbiAgZWxzZSBpZiAoY21wID4gMCkge1xuICAgIC8vIE91ciBuZWVkbGUgaXMgZ3JlYXRlciB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgIGlmIChhSGlnaCAtIG1pZCA+IDEpIHtcbiAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSB1cHBlciBoYWxmLlxuICAgICAgcmV0dXJuIHJlY3Vyc2l2ZVNlYXJjaChtaWQsIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcyk7XG4gICAgfVxuXG4gICAgLy8gVGhlIGV4YWN0IG5lZWRsZSBlbGVtZW50IHdhcyBub3QgZm91bmQgaW4gdGhpcyBoYXlzdGFjay4gRGV0ZXJtaW5lIGlmXG4gICAgLy8gd2UgYXJlIGluIHRlcm1pbmF0aW9uIGNhc2UgKDMpIG9yICgyKSBhbmQgcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSB0aGluZy5cbiAgICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgICAgcmV0dXJuIGFIaWdoIDwgYUhheXN0YWNrLmxlbmd0aCA/IGFIaWdoIDogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtaWQ7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIC8vIE91ciBuZWVkbGUgaXMgbGVzcyB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgIGlmIChtaWQgLSBhTG93ID4gMSkge1xuICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgaW4gdGhlIGxvd2VyIGhhbGYuXG4gICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKGFMb3csIG1pZCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhTG93IDwgMCA/IC0xIDogYUxvdztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGJpbmFyeSBzZWFyY2ggd2hpY2ggd2lsbCBhbHdheXMgdHJ5IGFuZCByZXR1cm5cbiAqIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBlbGVtZW50IGlmIHRoZXJlIGlzIG5vIGV4YWN0IGhpdC4gVGhpcyBpcyBiZWNhdXNlXG4gKiBtYXBwaW5ncyBiZXR3ZWVuIG9yaWdpbmFsIGFuZCBnZW5lcmF0ZWQgbGluZS9jb2wgcGFpcnMgYXJlIHNpbmdsZSBwb2ludHMsXG4gKiBhbmQgdGhlcmUgaXMgYW4gaW1wbGljaXQgcmVnaW9uIGJldHdlZW4gZWFjaCBvZiB0aGVtLCBzbyBhIG1pc3MganVzdCBtZWFuc1xuICogdGhhdCB5b3UgYXJlbid0IG9uIHRoZSB2ZXJ5IHN0YXJ0IG9mIGEgcmVnaW9uLlxuICpcbiAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IHlvdSBhcmUgbG9va2luZyBmb3IuXG4gKiBAcGFyYW0gYUhheXN0YWNrIFRoZSBhcnJheSB0aGF0IGlzIGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdGhlIG5lZWRsZSBhbmQgYW4gZWxlbWVudCBpbiB0aGVcbiAqICAgICBhcnJheSBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbmVlZGxlIGlzIGxlc3NcbiAqICAgICB0aGFuLCBlcXVhbCB0bywgb3IgZ3JlYXRlciB0aGFuIHRoZSBlbGVtZW50LCByZXNwZWN0aXZlbHkuXG4gKiBAcGFyYW0gYUJpYXMgRWl0aGVyICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKi9cbmV4cG9ydHMuc2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKSB7XG4gIGlmIChhSGF5c3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gcmVjdXJzaXZlU2VhcmNoKC0xLCBhSGF5c3RhY2subGVuZ3RoLCBhTmVlZGxlLCBhSGF5c3RhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29tcGFyZSwgYUJpYXMgfHwgZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvLyBXZSBoYXZlIGZvdW5kIGVpdGhlciB0aGUgZXhhY3QgZWxlbWVudCwgb3IgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50IHRoYW5cbiAgLy8gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci4gSG93ZXZlciwgdGhlcmUgbWF5IGJlIG1vcmUgdGhhbiBvbmUgc3VjaFxuICAvLyBlbGVtZW50LiBNYWtlIHN1cmUgd2UgYWx3YXlzIHJldHVybiB0aGUgc21hbGxlc3Qgb2YgdGhlc2UuXG4gIHdoaWxlIChpbmRleCAtIDEgPj0gMCkge1xuICAgIGlmIChhQ29tcGFyZShhSGF5c3RhY2tbaW5kZXhdLCBhSGF5c3RhY2tbaW5kZXggLSAxXSwgdHJ1ZSkgIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAtLWluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufTtcbiIsICIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8vIEl0IHR1cm5zIG91dCB0aGF0IHNvbWUgKG1vc3Q/KSBKYXZhU2NyaXB0IGVuZ2luZXMgZG9uJ3Qgc2VsZi1ob3N0XG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgLiBUaGlzIG1ha2VzIHNlbnNlIGJlY2F1c2UgQysrIHdpbGwgbGlrZWx5IHJlbWFpblxuLy8gZmFzdGVyIHRoYW4gSlMgd2hlbiBkb2luZyByYXcgQ1BVLWludGVuc2l2ZSBzb3J0aW5nLiBIb3dldmVyLCB3aGVuIHVzaW5nIGFcbi8vIGN1c3RvbSBjb21wYXJhdG9yIGZ1bmN0aW9uLCBjYWxsaW5nIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gdGhlIFZNJ3MgQysrIGFuZFxuLy8gSklUJ2QgSlMgaXMgcmF0aGVyIHNsb3cgKmFuZCogbG9zZXMgSklUIHR5cGUgaW5mb3JtYXRpb24sIHJlc3VsdGluZyBpblxuLy8gd29yc2UgZ2VuZXJhdGVkIGNvZGUgZm9yIHRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRoYW4gd291bGQgYmUgb3B0aW1hbC4gSW5cbi8vIGZhY3QsIHdoZW4gc29ydGluZyB3aXRoIGEgY29tcGFyYXRvciwgdGhlc2UgY29zdHMgb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIG9mXG4vLyBzb3J0aW5nIGluIEMrKy4gQnkgdXNpbmcgb3VyIG93biBKUy1pbXBsZW1lbnRlZCBRdWljayBTb3J0IChiZWxvdyksIHdlIGdldFxuLy8gYSB+MzUwMG1zIG1lYW4gc3BlZWQtdXAgaW4gYGJlbmNoL2JlbmNoLmh0bWxgLlxuXG4vKipcbiAqIFN3YXAgdGhlIGVsZW1lbnRzIGluZGV4ZWQgYnkgYHhgIGFuZCBgeWAgaW4gdGhlIGFycmF5IGBhcnlgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIFRoZSBhcnJheS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpdGVtLlxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIHNlY29uZCBpdGVtLlxuICovXG5mdW5jdGlvbiBzd2FwKGFyeSwgeCwgeSkge1xuICB2YXIgdGVtcCA9IGFyeVt4XTtcbiAgYXJ5W3hdID0gYXJ5W3ldO1xuICBhcnlbeV0gPSB0ZW1wO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciB3aXRoaW4gdGhlIHJhbmdlIGBsb3cgLi4gaGlnaGAgaW5jbHVzaXZlLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBsb3dcbiAqICAgICAgICBUaGUgbG93ZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2hcbiAqICAgICAgICBUaGUgdXBwZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICovXG5mdW5jdGlvbiByYW5kb21JbnRJblJhbmdlKGxvdywgaGlnaCkge1xuICByZXR1cm4gTWF0aC5yb3VuZChsb3cgKyAoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KSkpO1xufVxuXG4vKipcbiAqIFRoZSBRdWljayBTb3J0IGFsZ29yaXRobS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwXG4gKiAgICAgICAgU3RhcnQgaW5kZXggb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gclxuICogICAgICAgIEVuZCBpbmRleCBvZiB0aGUgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCByKSB7XG4gIC8vIElmIG91ciBsb3dlciBib3VuZCBpcyBsZXNzIHRoYW4gb3VyIHVwcGVyIGJvdW5kLCB3ZSAoMSkgcGFydGl0aW9uIHRoZVxuICAvLyBhcnJheSBpbnRvIHR3byBwaWVjZXMgYW5kICgyKSByZWN1cnNlIG9uIGVhY2ggaGFsZi4gSWYgaXQgaXMgbm90LCB0aGlzIGlzXG4gIC8vIHRoZSBlbXB0eSBhcnJheSBhbmQgb3VyIGJhc2UgY2FzZS5cblxuICBpZiAocCA8IHIpIHtcbiAgICAvLyAoMSkgUGFydGl0aW9uaW5nLlxuICAgIC8vXG4gICAgLy8gVGhlIHBhcnRpdGlvbmluZyBjaG9vc2VzIGEgcGl2b3QgYmV0d2VlbiBgcGAgYW5kIGByYCBhbmQgbW92ZXMgYWxsXG4gICAgLy8gZWxlbWVudHMgdGhhdCBhcmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdCB0byB0aGUgYmVmb3JlIGl0LCBhbmRcbiAgICAvLyBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgYXJlIGdyZWF0ZXIgdGhhbiBpdCBhZnRlciBpdC4gVGhlIGVmZmVjdCBpcyB0aGF0XG4gICAgLy8gb25jZSBwYXJ0aXRpb24gaXMgZG9uZSwgdGhlIHBpdm90IGlzIGluIHRoZSBleGFjdCBwbGFjZSBpdCB3aWxsIGJlIHdoZW5cbiAgICAvLyB0aGUgYXJyYXkgaXMgcHV0IGluIHNvcnRlZCBvcmRlciwgYW5kIGl0IHdpbGwgbm90IG5lZWQgdG8gYmUgbW92ZWRcbiAgICAvLyBhZ2Fpbi4gVGhpcyBydW5zIGluIE8obikgdGltZS5cblxuICAgIC8vIEFsd2F5cyBjaG9vc2UgYSByYW5kb20gcGl2b3Qgc28gdGhhdCBhbiBpbnB1dCBhcnJheSB3aGljaCBpcyByZXZlcnNlXG4gICAgLy8gc29ydGVkIGRvZXMgbm90IGNhdXNlIE8obl4yKSBydW5uaW5nIHRpbWUuXG4gICAgdmFyIHBpdm90SW5kZXggPSByYW5kb21JbnRJblJhbmdlKHAsIHIpO1xuICAgIHZhciBpID0gcCAtIDE7XG5cbiAgICBzd2FwKGFyeSwgcGl2b3RJbmRleCwgcik7XG4gICAgdmFyIHBpdm90ID0gYXJ5W3JdO1xuXG4gICAgLy8gSW1tZWRpYXRlbHkgYWZ0ZXIgYGpgIGlzIGluY3JlbWVudGVkIGluIHRoaXMgbG9vcCwgdGhlIGZvbGxvd2luZyBob2xkXG4gICAgLy8gdHJ1ZTpcbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbcCAuLiBpXWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdC5cbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbaSsxIC4uIGotMV1gIGlzIGdyZWF0ZXIgdGhhbiB0aGUgcGl2b3QuXG4gICAgZm9yICh2YXIgaiA9IHA7IGogPCByOyBqKyspIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFyeVtqXSwgcGl2b3QpIDw9IDApIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBzd2FwKGFyeSwgaSwgaik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dhcChhcnksIGkgKyAxLCBqKTtcbiAgICB2YXIgcSA9IGkgKyAxO1xuXG4gICAgLy8gKDIpIFJlY3Vyc2Ugb24gZWFjaCBoYWxmLlxuXG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCBxIC0gMSk7XG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBxICsgMSwgcik7XG4gIH1cbn1cblxuLyoqXG4gKiBTb3J0IHRoZSBnaXZlbiBhcnJheSBpbi1wbGFjZSB3aXRoIHRoZSBnaXZlbiBjb21wYXJhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gKiAgICAgICAgRnVuY3Rpb24gdG8gdXNlIHRvIGNvbXBhcmUgdHdvIGl0ZW1zLlxuICovXG5leHBvcnRzLnF1aWNrU29ydCA9IGZ1bmN0aW9uIChhcnksIGNvbXBhcmF0b3IpIHtcbiAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCAwLCBhcnkubGVuZ3RoIC0gMSk7XG59O1xuIiwgIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBiaW5hcnlTZWFyY2ggPSByZXF1aXJlKCcuL2JpbmFyeS1zZWFyY2gnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgcXVpY2tTb3J0ID0gcmVxdWlyZSgnLi9xdWljay1zb3J0JykucXVpY2tTb3J0O1xuXG5mdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZU1hcC5zZWN0aW9ucyAhPSBudWxsXG4gICAgPyBuZXcgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTClcbiAgICA6IG5ldyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG59XG5cblNvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPSBmdW5jdGlvbihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHJldHVybiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG59XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vLyBgX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kIGBfX29yaWdpbmFsTWFwcGluZ3NgIGFyZSBhcnJheXMgdGhhdCBob2xkIHRoZVxuLy8gcGFyc2VkIG1hcHBpbmcgY29vcmRpbmF0ZXMgZnJvbSB0aGUgc291cmNlIG1hcCdzIFwibWFwcGluZ3NcIiBhdHRyaWJ1dGUuIFRoZXlcbi8vIGFyZSBsYXppbHkgaW5zdGFudGlhdGVkLCBhY2Nlc3NlZCB2aWEgdGhlIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBnZXR0ZXJzIHJlc3BlY3RpdmVseSwgYW5kIHdlIG9ubHkgcGFyc2UgdGhlIG1hcHBpbmdzXG4vLyBhbmQgY3JlYXRlIHRoZXNlIGFycmF5cyBvbmNlIHF1ZXJpZWQgZm9yIGEgc291cmNlIGxvY2F0aW9uLiBXZSBqdW1wIHRocm91Z2hcbi8vIHRoZXNlIGhvb3BzIGJlY2F1c2UgdGhlcmUgY2FuIGJlIG1hbnkgdGhvdXNhbmRzIG9mIG1hcHBpbmdzLCBhbmQgcGFyc2luZ1xuLy8gdGhlbSBpcyBleHBlbnNpdmUsIHNvIHdlIG9ubHkgd2FudCB0byBkbyBpdCBpZiB3ZSBtdXN0LlxuLy9cbi8vIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheXMgaXMgb2YgdGhlIGZvcm06XG4vL1xuLy8gICAgIHtcbi8vICAgICAgIGdlbmVyYXRlZExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBnZW5lcmF0ZWRDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIHNvdXJjZTogVGhlIHBhdGggdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIHRoYXQgZ2VuZXJhdGVkIHRoaXNcbi8vICAgICAgICAgICAgICAgY2h1bmsgb2YgY29kZSxcbi8vICAgICAgIG9yaWdpbmFsTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgb3JpZ2luYWxDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvIHRoaXMgY2h1bmsgb2YgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgb3JpZ2luYWwgc3ltYm9sIHdoaWNoIGdlbmVyYXRlZCB0aGlzIGNodW5rIG9mXG4vLyAgICAgICAgICAgICBjb2RlLlxuLy8gICAgIH1cbi8vXG4vLyBBbGwgcHJvcGVydGllcyBleGNlcHQgZm9yIGBnZW5lcmF0ZWRMaW5lYCBhbmQgYGdlbmVyYXRlZENvbHVtbmAgY2FuIGJlXG4vLyBgbnVsbGAuXG4vL1xuLy8gYF9nZW5lcmF0ZWRNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucy5cbi8vXG4vLyBgX29yaWdpbmFsTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucy5cblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBudWxsO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19nZW5lcmF0ZWRNYXBwaW5ncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzO1xuICB9XG59KTtcblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG51bGw7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX29yaWdpbmFsTWFwcGluZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX29yaWdpbmFsTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBhU3RyLmNoYXJBdChpbmRleCk7XG4gICAgcmV0dXJuIGMgPT09IFwiO1wiIHx8IGMgPT09IFwiLFwiO1xuICB9O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgX3BhcnNlTWFwcGluZ3NcIik7XG4gIH07XG5cblNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUiA9IDE7XG5Tb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUiA9IDI7XG5cblNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZWFjaCBtYXBwaW5nIGJldHdlZW4gYW4gb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uIGFuZCBhXG4gKiBnZW5lcmF0ZWQgbGluZS9jb2x1bW4gaW4gdGhpcyBzb3VyY2UgbWFwLlxuICpcbiAqIEBwYXJhbSBGdW5jdGlvbiBhQ2FsbGJhY2tcbiAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCBlYWNoIG1hcHBpbmcuXG4gKiBAcGFyYW0gT2JqZWN0IGFDb250ZXh0XG4gKiAgICAgICAgT3B0aW9uYWwuIElmIHNwZWNpZmllZCwgdGhpcyBvYmplY3Qgd2lsbCBiZSB0aGUgdmFsdWUgb2YgYHRoaXNgIGV2ZXJ5XG4gKiAgICAgICAgdGltZSB0aGF0IGBhQ2FsbGJhY2tgIGlzIGNhbGxlZC5cbiAqIEBwYXJhbSBhT3JkZXJcbiAqICAgICAgICBFaXRoZXIgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAgb3JcbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVJgLiBTcGVjaWZpZXMgd2hldGhlciB5b3Ugd2FudCB0b1xuICogICAgICAgIGl0ZXJhdGUgb3ZlciB0aGUgbWFwcGluZ3Mgc29ydGVkIGJ5IHRoZSBnZW5lcmF0ZWQgZmlsZSdzIGxpbmUvY29sdW1uXG4gKiAgICAgICAgb3JkZXIgb3IgdGhlIG9yaWdpbmFsJ3Mgc291cmNlL2xpbmUvY29sdW1uIG9yZGVyLCByZXNwZWN0aXZlbHkuIERlZmF1bHRzIHRvXG4gKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5lYWNoTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2VhY2hNYXBwaW5nKGFDYWxsYmFjaywgYUNvbnRleHQsIGFPcmRlcikge1xuICAgIHZhciBjb250ZXh0ID0gYUNvbnRleHQgfHwgbnVsbDtcbiAgICB2YXIgb3JkZXIgPSBhT3JkZXIgfHwgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSO1xuXG4gICAgdmFyIG1hcHBpbmdzO1xuICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjpcbiAgICAgIG1hcHBpbmdzID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gb3JkZXIgb2YgaXRlcmF0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuc291cmNlUm9vdDtcbiAgICBtYXBwaW5ncy5tYXAoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgIHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uLFxuICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgbmFtZTogbWFwcGluZy5uYW1lID09PSBudWxsID8gbnVsbCA6IHRoaXMuX25hbWVzLmF0KG1hcHBpbmcubmFtZSlcbiAgICAgIH07XG4gICAgfSwgdGhpcykuZm9yRWFjaChhQ2FsbGJhY2ssIGNvbnRleHQpO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgYWxsIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHByb3ZpZGVkLiBJZiBubyBjb2x1bW4gaXMgcHJvdmlkZWQsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIGEgZWl0aGVyIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yIG9yIHRoZSBuZXh0XG4gKiBjbG9zZXN0IGxpbmUgdGhhdCBoYXMgYW55IG1hcHBpbmdzLiBPdGhlcndpc2UsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBsaW5lIGFuZCBlaXRoZXIgdGhlIGNvbHVtbiB3ZSBhcmUgc2VhcmNoaW5nIGZvclxuICogb3IgdGhlIG5leHQgY2xvc2VzdCBjb2x1bW4gdGhhdCBoYXMgYW55IG9mZnNldHMuXG4gKlxuICogVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBPcHRpb25hbC4gdGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIGFycmF5IG9mIG9iamVjdHMgaXMgcmV0dXJuZWQsIGVhY2ggd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2FsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvcihhQXJncykge1xuICAgIHZhciBsaW5lID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyk7XG5cbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIGV4YWN0IG1hdGNoLCBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmdcbiAgICAvLyByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBtYXBwaW5nIGxlc3MgdGhhbiB0aGUgbmVlZGxlLiBCeVxuICAgIC8vIHNldHRpbmcgbmVlZGxlLm9yaWdpbmFsQ29sdW1uIHRvIDAsIHdlIHRodXMgZmluZCB0aGUgbGFzdCBtYXBwaW5nIGZvclxuICAgIC8vIHRoZSBnaXZlbiBsaW5lLCBwcm92aWRlZCBzdWNoIGEgbWFwcGluZyBleGlzdHMuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKSxcbiAgICAgIG9yaWdpbmFsTGluZTogbGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicsIDApXG4gICAgfTtcblxuICAgIG5lZWRsZS5zb3VyY2UgPSB0aGlzLl9maW5kU291cmNlSW5kZXgobmVlZGxlLnNvdXJjZSk7XG4gICAgaWYgKG5lZWRsZS5zb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIG1hcHBpbmdzID0gW107XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhuZWVkbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxDb2x1bW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChhQXJncy5jb2x1bW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgb3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSBmb3VuZC4gU2luY2VcbiAgICAgICAgLy8gbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAvLyB0aGUgbGluZSB3ZSBmb3VuZC5cbiAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IG9yaWdpbmFsTGluZSkge1xuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSB3ZXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgIC8vIFNpbmNlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgLy8gdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgIHdoaWxlIChtYXBwaW5nICYmXG4gICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gbGluZSAmJlxuICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9PSBvcmlnaW5hbENvbHVtbikge1xuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGluZ3M7XG4gIH07XG5cbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoIHdlIGNhblxuICogcXVlcnkgZm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBmaWxlIHBvc2l0aW9ucyBieSBnaXZpbmcgaXQgYSBmaWxlXG4gKiBwb3NpdGlvbiBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIHRoZSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yXG4gKiBhbHJlYWR5IHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNvdXJjZSBtYXBzIGhhdmUgdGhlXG4gKiBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBzb3VyY2VzOiBBbiBhcnJheSBvZiBVUkxzIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbmFtZXM6IEFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHdoaWNoIGNhbiBiZSByZWZlcnJlbmNlZCBieSBpbmRpdmlkdWFsIG1hcHBpbmdzLlxuICogICAtIHNvdXJjZVJvb3Q6IE9wdGlvbmFsLiBUaGUgVVJMIHJvb3QgZnJvbSB3aGljaCBhbGwgc291cmNlcyBhcmUgcmVsYXRpdmUuXG4gKiAgIC0gc291cmNlc0NvbnRlbnQ6IE9wdGlvbmFsLiBBbiBhcnJheSBvZiBjb250ZW50cyBvZiB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICogICAtIG1hcHBpbmdzOiBBIHN0cmluZyBvZiBiYXNlNjQgVkxRcyB3aGljaCBjb250YWluIHRoZSBhY3R1YWwgbWFwcGluZ3MuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICpcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF06XG4gKlxuICogICAgIHtcbiAqICAgICAgIHZlcnNpb24gOiAzLFxuICogICAgICAgZmlsZTogXCJvdXQuanNcIixcbiAqICAgICAgIHNvdXJjZVJvb3QgOiBcIlwiLFxuICogICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICBtYXBwaW5nczogXCJBQSxBQjs7QUJDREU7XCJcbiAqICAgICB9XG4gKlxuICogVGhlIHNlY29uZCBwYXJhbWV0ZXIsIGlmIGdpdmVuLCBpcyBhIHN0cmluZyB3aG9zZSB2YWx1ZSBpcyB0aGUgVVJMXG4gKiBhdCB3aGljaCB0aGUgc291cmNlIG1hcCB3YXMgZm91bmQuICBUaGlzIFVSTCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gKiBzb3VyY2VzIGFycmF5LlxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0P3BsaT0xI1xuICovXG5mdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNvdXJjZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzJyk7XG4gIC8vIFNhc3MgMy4zIGxlYXZlcyBvdXQgdGhlICduYW1lcycgYXJyYXksIHNvIHdlIGRldmlhdGUgZnJvbSB0aGUgc3BlYyAod2hpY2hcbiAgLy8gcmVxdWlyZXMgdGhlIGFycmF5KSB0byBwbGF5IG5pY2UgaGVyZS5cbiAgdmFyIG5hbWVzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbmFtZXMnLCBbXSk7XG4gIHZhciBzb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB2YXIgc291cmNlc0NvbnRlbnQgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzQ29udGVudCcsIG51bGwpO1xuICB2YXIgbWFwcGluZ3MgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdtYXBwaW5ncycpO1xuICB2YXIgZmlsZSA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ2ZpbGUnLCBudWxsKTtcblxuICAvLyBPbmNlIGFnYWluLCBTYXNzIGRldmlhdGVzIGZyb20gdGhlIHNwZWMgYW5kIHN1cHBsaWVzIHRoZSB2ZXJzaW9uIGFzIGFcbiAgLy8gc3RyaW5nIHJhdGhlciB0aGFuIGEgbnVtYmVyLCBzbyB3ZSB1c2UgbG9vc2UgZXF1YWxpdHkgY2hlY2tpbmcgaGVyZS5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgaWYgKHNvdXJjZVJvb3QpIHtcbiAgICBzb3VyY2VSb290ID0gdXRpbC5ub3JtYWxpemUoc291cmNlUm9vdCk7XG4gIH1cblxuICBzb3VyY2VzID0gc291cmNlc1xuICAgIC5tYXAoU3RyaW5nKVxuICAgIC8vIFNvbWUgc291cmNlIG1hcHMgcHJvZHVjZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbGlrZSBcIi4vZm9vLmpzXCIgaW5zdGVhZCBvZlxuICAgIC8vIFwiZm9vLmpzXCIuICBOb3JtYWxpemUgdGhlc2UgZmlyc3Qgc28gdGhhdCBmdXR1cmUgY29tcGFyaXNvbnMgd2lsbCBzdWNjZWVkLlxuICAgIC8vIFNlZSBidWd6aWwubGEvMTA5MDc2OC5cbiAgICAubWFwKHV0aWwubm9ybWFsaXplKVxuICAgIC8vIEFsd2F5cyBlbnN1cmUgdGhhdCBhYnNvbHV0ZSBzb3VyY2VzIGFyZSBpbnRlcm5hbGx5IHN0b3JlZCByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSBzb3VyY2Ugcm9vdCwgaWYgdGhlIHNvdXJjZSByb290IGlzIGFic29sdXRlLiBOb3QgZG9pbmcgdGhpcyB3b3VsZFxuICAgIC8vIGJlIHBhcnRpY3VsYXJseSBwcm9ibGVtYXRpYyB3aGVuIHRoZSBzb3VyY2Ugcm9vdCBpcyBhIHByZWZpeCBvZiB0aGVcbiAgICAvLyBzb3VyY2UgKHZhbGlkLCBidXQgd2h5Pz8pLiBTZWUgZ2l0aHViIGlzc3VlICMxOTkgYW5kIGJ1Z3ppbC5sYS8xMTg4OTgyLlxuICAgIC5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZVJvb3QgJiYgdXRpbC5pc0Fic29sdXRlKHNvdXJjZVJvb3QpICYmIHV0aWwuaXNBYnNvbHV0ZShzb3VyY2UpXG4gICAgICAgID8gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2UpXG4gICAgICAgIDogc291cmNlO1xuICAgIH0pO1xuXG4gIC8vIFBhc3MgYHRydWVgIGJlbG93IHRvIGFsbG93IGR1cGxpY2F0ZSBuYW1lcyBhbmQgc291cmNlcy4gV2hpbGUgc291cmNlIG1hcHNcbiAgLy8gYXJlIGludGVuZGVkIHRvIGJlIGNvbXByZXNzZWQgYW5kIGRlZHVwbGljYXRlZCwgdGhlIFR5cGVTY3JpcHQgY29tcGlsZXJcbiAgLy8gc29tZXRpbWVzIGdlbmVyYXRlcyBzb3VyY2UgbWFwcyB3aXRoIGR1cGxpY2F0ZXMgaW4gdGhlbS4gU2VlIEdpdGh1YiBpc3N1ZVxuICAvLyAjNzIgYW5kIGJ1Z3ppbC5sYS84ODk0OTIuXG4gIHRoaXMuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KG5hbWVzLm1hcChTdHJpbmcpLCB0cnVlKTtcbiAgdGhpcy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShzb3VyY2VzLCB0cnVlKTtcblxuICB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMgPSB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gdXRpbC5jb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHMsIGFTb3VyY2VNYXBVUkwpO1xuICB9KTtcblxuICB0aGlzLnNvdXJjZVJvb3QgPSBzb3VyY2VSb290O1xuICB0aGlzLnNvdXJjZXNDb250ZW50ID0gc291cmNlc0NvbnRlbnQ7XG4gIHRoaXMuX21hcHBpbmdzID0gbWFwcGluZ3M7XG4gIHRoaXMuX3NvdXJjZU1hcFVSTCA9IGFTb3VyY2VNYXBVUkw7XG4gIHRoaXMuZmlsZSA9IGZpbGU7XG59XG5cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGluZGV4IG9mIGEgc291cmNlLiAgUmV0dXJucyAtMSBpZiBub3RcbiAqIGZvdW5kLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZFNvdXJjZUluZGV4ID0gZnVuY3Rpb24oYVNvdXJjZSkge1xuICB2YXIgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICByZWxhdGl2ZVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCByZWxhdGl2ZVNvdXJjZSk7XG4gIH1cblxuICBpZiAodGhpcy5fc291cmNlcy5oYXMocmVsYXRpdmVTb3VyY2UpKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZXMuaW5kZXhPZihyZWxhdGl2ZVNvdXJjZSk7XG4gIH1cblxuICAvLyBNYXliZSBhU291cmNlIGlzIGFuIGFic29sdXRlIFVSTCBhcyByZXR1cm5lZCBieSB8c291cmNlc3wuICBJblxuICAvLyB0aGlzIGNhc2Ugd2UgY2FuJ3Qgc2ltcGx5IHVuZG8gdGhlIHRyYW5zZm9ybS5cbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAodGhpcy5fYWJzb2x1dGVTb3VyY2VzW2ldID09IGFTb3VyY2UpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBmcm9tIGEgU291cmNlTWFwR2VuZXJhdG9yLlxuICpcbiAqIEBwYXJhbSBTb3VyY2VNYXBHZW5lcmF0b3IgYVNvdXJjZU1hcFxuICogICAgICAgIFRoZSBzb3VyY2UgbWFwIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbiAqIEBwYXJhbSBTdHJpbmcgYVNvdXJjZU1hcFVSTFxuICogICAgICAgIFRoZSBVUkwgYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgY2FuIGJlIGZvdW5kIChvcHRpb25hbClcbiAqIEByZXR1cm5zIEJhc2ljU291cmNlTWFwQ29uc3VtZXJcbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gICAgdmFyIHNtYyA9IE9iamVjdC5jcmVhdGUoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuXG4gICAgdmFyIG5hbWVzID0gc21jLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9uYW1lcy50b0FycmF5KCksIHRydWUpO1xuICAgIHZhciBzb3VyY2VzID0gc21jLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX3NvdXJjZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICBzbWMuc291cmNlUm9vdCA9IGFTb3VyY2VNYXAuX3NvdXJjZVJvb3Q7XG4gICAgc21jLnNvdXJjZXNDb250ZW50ID0gYVNvdXJjZU1hcC5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChzbWMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21jLnNvdXJjZVJvb3QpO1xuICAgIHNtYy5maWxlID0gYVNvdXJjZU1hcC5fZmlsZTtcbiAgICBzbWMuX3NvdXJjZU1hcFVSTCA9IGFTb3VyY2VNYXBVUkw7XG4gICAgc21jLl9hYnNvbHV0ZVNvdXJjZXMgPSBzbWMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzbWMuc291cmNlUm9vdCwgcywgYVNvdXJjZU1hcFVSTCk7XG4gICAgfSk7XG5cbiAgICAvLyBCZWNhdXNlIHdlIGFyZSBtb2RpZnlpbmcgdGhlIGVudHJpZXMgKGJ5IGNvbnZlcnRpbmcgc3RyaW5nIHNvdXJjZXMgYW5kXG4gICAgLy8gbmFtZXMgdG8gaW5kaWNlcyBpbnRvIHRoZSBzb3VyY2VzIGFuZCBuYW1lcyBBcnJheVNldHMpLCB3ZSBoYXZlIHRvIG1ha2VcbiAgICAvLyBhIGNvcHkgb2YgdGhlIGVudHJ5IG9yIGVsc2UgYmFkIHRoaW5ncyBoYXBwZW4uIFNoYXJlZCBtdXRhYmxlIHN0YXRlXG4gICAgLy8gc3RyaWtlcyBhZ2FpbiEgU2VlIGdpdGh1YiBpc3N1ZSAjMTkxLlxuXG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gYVNvdXJjZU1hcC5fbWFwcGluZ3MudG9BcnJheSgpLnNsaWNlKCk7XG4gICAgdmFyIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncyA9IHNtYy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIGRlc3RPcmlnaW5hbE1hcHBpbmdzID0gc21jLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3JjTWFwcGluZyA9IGdlbmVyYXRlZE1hcHBpbmdzW2ldO1xuICAgICAgdmFyIGRlc3RNYXBwaW5nID0gbmV3IE1hcHBpbmc7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRMaW5lO1xuICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgIGlmIChzcmNNYXBwaW5nLnNvdXJjZSkge1xuICAgICAgICBkZXN0TWFwcGluZy5zb3VyY2UgPSBzb3VyY2VzLmluZGV4T2Yoc3JjTWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbExpbmUgPSBzcmNNYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgZGVzdE1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBzcmNNYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChzcmNNYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBkZXN0TWFwcGluZy5uYW1lID0gbmFtZXMuaW5kZXhPZihzcmNNYXBwaW5nLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdE9yaWdpbmFsTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICB9XG5cbiAgICBxdWlja1NvcnQoc21jLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG5cbiAgICByZXR1cm4gc21jO1xuICB9O1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ3NvdXJjZXMnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMuc2xpY2UoKTtcbiAgfVxufSk7XG5cbi8qKlxuICogUHJvdmlkZSB0aGUgSklUIHdpdGggYSBuaWNlIHNoYXBlIC8gaGlkZGVuIGNsYXNzLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nKCkge1xuICB0aGlzLmdlbmVyYXRlZExpbmUgPSAwO1xuICB0aGlzLmdlbmVyYXRlZENvbHVtbiA9IDA7XG4gIHRoaXMuc291cmNlID0gbnVsbDtcbiAgdGhpcy5vcmlnaW5hbExpbmUgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdGhpcy5uYW1lID0gbnVsbDtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHZhciBnZW5lcmF0ZWRMaW5lID0gMTtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsTGluZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFTdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNhY2hlZFNlZ21lbnRzID0ge307XG4gICAgdmFyIHRlbXAgPSB7fTtcbiAgICB2YXIgb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBnZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBtYXBwaW5nLCBzdHIsIHNlZ21lbnQsIGVuZCwgdmFsdWU7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhU3RyLmNoYXJBdChpbmRleCkgPT09ICc7Jykge1xuICAgICAgICBnZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJywnKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWFwcGluZyA9IG5ldyBNYXBwaW5nKCk7XG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IGdlbmVyYXRlZExpbmU7XG5cbiAgICAgICAgLy8gQmVjYXVzZSBlYWNoIG9mZnNldCBpcyBlbmNvZGVkIHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyBvbmUsXG4gICAgICAgIC8vIG1hbnkgc2VnbWVudHMgb2Z0ZW4gaGF2ZSB0aGUgc2FtZSBlbmNvZGluZy4gV2UgY2FuIGV4cGxvaXQgdGhpc1xuICAgICAgICAvLyBmYWN0IGJ5IGNhY2hpbmcgdGhlIHBhcnNlZCB2YXJpYWJsZSBsZW5ndGggZmllbGRzIG9mIGVhY2ggc2VnbWVudCxcbiAgICAgICAgLy8gYWxsb3dpbmcgdXMgdG8gYXZvaWQgYSBzZWNvbmQgcGFyc2UgaWYgd2UgZW5jb3VudGVyIHRoZSBzYW1lXG4gICAgICAgIC8vIHNlZ21lbnQgYWdhaW4uXG4gICAgICAgIGZvciAoZW5kID0gaW5kZXg7IGVuZCA8IGxlbmd0aDsgZW5kKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5fY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBlbmQpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gYVN0ci5zbGljZShpbmRleCwgZW5kKTtcblxuICAgICAgICBzZWdtZW50ID0gY2FjaGVkU2VnbWVudHNbc3RyXTtcbiAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICBpbmRleCArPSBzdHIubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZ21lbnQgPSBbXTtcbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGJhc2U2NFZMUS5kZWNvZGUoYVN0ciwgaW5kZXgsIHRlbXApO1xuICAgICAgICAgICAgdmFsdWUgPSB0ZW1wLnZhbHVlO1xuICAgICAgICAgICAgaW5kZXggPSB0ZW1wLnJlc3Q7XG4gICAgICAgICAgICBzZWdtZW50LnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSwgYnV0IG5vIGxpbmUgYW5kIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSBhbmQgbGluZSwgYnV0IG5vIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhY2hlZFNlZ21lbnRzW3N0cl0gPSBzZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2VuZXJhdGVkIGNvbHVtbi5cbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiArIHNlZ21lbnRbMF07XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIC8vIE9yaWdpbmFsIHNvdXJjZS5cbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHByZXZpb3VzU291cmNlICsgc2VnbWVudFsxXTtcbiAgICAgICAgICBwcmV2aW91c1NvdXJjZSArPSBzZWdtZW50WzFdO1xuXG4gICAgICAgICAgLy8gT3JpZ2luYWwgbGluZS5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IHByZXZpb3VzT3JpZ2luYWxMaW5lICsgc2VnbWVudFsyXTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICAgIC8vIExpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZFxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lICs9IDE7XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBjb2x1bW4uXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gKyBzZWdtZW50WzNdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgLy8gT3JpZ2luYWwgbmFtZS5cbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IHByZXZpb3VzTmFtZSArIHNlZ21lbnRbNF07XG4gICAgICAgICAgICBwcmV2aW91c05hbWUgKz0gc2VnbWVudFs0XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICBpZiAodHlwZW9mIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG9yaWdpbmFsTWFwcGluZ3MucHVzaChtYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydChnZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gZ2VuZXJhdGVkTWFwcGluZ3M7XG5cbiAgICBxdWlja1NvcnQob3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBvcmlnaW5hbE1hcHBpbmdzO1xuICB9O1xuXG4vKipcbiAqIEZpbmQgdGhlIG1hcHBpbmcgdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGh5cG90aGV0aWNhbCBcIm5lZWRsZVwiIG1hcHBpbmcgdGhhdFxuICogd2UgYXJlIHNlYXJjaGluZyBmb3IgaW4gdGhlIGdpdmVuIFwiaGF5c3RhY2tcIiBvZiBtYXBwaW5ncy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZmluZE1hcHBpbmcoYU5lZWRsZSwgYU1hcHBpbmdzLCBhTGluZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb2x1bW5OYW1lLCBhQ29tcGFyYXRvciwgYUJpYXMpIHtcbiAgICAvLyBUbyByZXR1cm4gdGhlIHBvc2l0aW9uIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCB3ZSBtdXN0IGZpcnN0IGZpbmQgdGhlXG4gICAgLy8gbWFwcGluZyBmb3IgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCB0aGVuIHJldHVybiB0aGUgb3Bwb3NpdGUgcG9zaXRpb24gaXRcbiAgICAvLyBwb2ludHMgdG8uIEJlY2F1c2UgdGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHdlIGNhbiB1c2UgYmluYXJ5IHNlYXJjaCB0b1xuICAgIC8vIGZpbmQgdGhlIGJlc3QgbWFwcGluZy5cblxuICAgIGlmIChhTmVlZGxlW2FMaW5lTmFtZV0gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTGluZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUxpbmVOYW1lXSk7XG4gICAgfVxuICAgIGlmIChhTmVlZGxlW2FDb2x1bW5OYW1lXSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbHVtbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUNvbHVtbk5hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmluYXJ5U2VhcmNoLnNlYXJjaChhTmVlZGxlLCBhTWFwcGluZ3MsIGFDb21wYXJhdG9yLCBhQmlhcyk7XG4gIH07XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgbGFzdCBjb2x1bW4gZm9yIGVhY2ggZ2VuZXJhdGVkIG1hcHBpbmcuIFRoZSBsYXN0IGNvbHVtbiBpc1xuICogaW5jbHVzaXZlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb21wdXRlQ29sdW1uU3BhbnMgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jb21wdXRlQ29sdW1uU3BhbnMoKSB7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIC8vIE1hcHBpbmdzIGRvIG5vdCBjb250YWluIGEgZmllbGQgZm9yIHRoZSBsYXN0IGdlbmVyYXRlZCBjb2x1bW50LiBXZVxuICAgICAgLy8gY2FuIGNvbWUgdXAgd2l0aCBhbiBvcHRpbWlzdGljIGVzdGltYXRlLCBob3dldmVyLCBieSBhc3N1bWluZyB0aGF0XG4gICAgICAvLyBtYXBwaW5ncyBhcmUgY29udGlndW91cyAoaS5lLiBnaXZlbiB0d28gY29uc2VjdXRpdmUgbWFwcGluZ3MsIHRoZVxuICAgICAgLy8gZmlyc3QgbWFwcGluZyBlbmRzIHdoZXJlIHRoZSBzZWNvbmQgb25lIHN0YXJ0cykuXG4gICAgICBpZiAoaW5kZXggKyAxIDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoKSB7XG4gICAgICAgIHZhciBuZXh0TWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4ICsgMV07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IG5leHRNYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtIDE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGxhc3QgbWFwcGluZyBmb3IgZWFjaCBsaW5lIHNwYW5zIHRoZSBlbnRpcmUgbGluZS5cbiAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IEluZmluaXR5O1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgIG5lZWRsZSxcbiAgICAgIHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLFxuICAgICAgXCJnZW5lcmF0ZWRMaW5lXCIsXG4gICAgICBcImdlbmVyYXRlZENvbHVtblwiLFxuICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCxcbiAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnc291cmNlJywgbnVsbCk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmF0KHNvdXJjZSk7XG4gICAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHRoaXMuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ25hbWUnLCBudWxsKTtcbiAgICAgICAgaWYgKG5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuYXQobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxMaW5lJywgbnVsbCksXG4gICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGwsXG4gICAgICBuYW1lOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50Lmxlbmd0aCA+PSB0aGlzLl9zb3VyY2VzLnNpemUoKSAmJlxuICAgICAgIXRoaXMuc291cmNlc0NvbnRlbnQuc29tZShmdW5jdGlvbiAoc2MpIHsgcmV0dXJuIHNjID09IG51bGw7IH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICogYXZhaWxhYmxlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kU291cmNlSW5kZXgoYVNvdXJjZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W2luZGV4XTtcbiAgICB9XG5cbiAgICB2YXIgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgcmVsYXRpdmVTb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgcmVsYXRpdmVTb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciB1cmw7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsXG4gICAgICAgICYmICh1cmwgPSB1dGlsLnVybFBhcnNlKHRoaXMuc291cmNlUm9vdCkpKSB7XG4gICAgICAvLyBYWFg6IGZpbGU6Ly8gVVJJcyBhbmQgYWJzb2x1dGUgcGF0aHMgbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGZvclxuICAgICAgLy8gbWFueSB1c2Vycy4gV2UgY2FuIGhlbHAgdGhlbSBvdXQgd2hlbiB0aGV5IGV4cGVjdCBmaWxlOi8vIFVSSXMgdG9cbiAgICAgIC8vIGJlaGF2ZSBsaWtlIGl0IHdvdWxkIGlmIHRoZXkgd2VyZSBydW5uaW5nIGEgbG9jYWwgSFRUUCBzZXJ2ZXIuIFNlZVxuICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODg1NTk3LlxuICAgICAgdmFyIGZpbGVVcmlBYnNQYXRoID0gcmVsYXRpdmVTb3VyY2UucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgXCJcIik7XG4gICAgICBpZiAodXJsLnNjaGVtZSA9PSBcImZpbGVcIlxuICAgICAgICAgICYmIHRoaXMuX3NvdXJjZXMuaGFzKGZpbGVVcmlBYnNQYXRoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoZmlsZVVyaUFic1BhdGgpXVxuICAgICAgfVxuXG4gICAgICBpZiAoKCF1cmwucGF0aCB8fCB1cmwucGF0aCA9PSBcIi9cIilcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIiArIHJlbGF0aXZlU291cmNlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoXCIvXCIgKyByZWxhdGl2ZVNvdXJjZSldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCByZWN1cnNpdmVseSBmcm9tXG4gICAgLy8gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yLiBJbiB0aGF0IGNhc2UsIHdlXG4gICAgLy8gZG9uJ3Qgd2FudCB0byB0aHJvdyBpZiB3ZSBjYW4ndCBmaW5kIHRoZSBzb3VyY2UgLSB3ZSBqdXN0IHdhbnQgdG9cbiAgICAvLyByZXR1cm4gbnVsbCwgc28gd2UgcHJvdmlkZSBhIGZsYWcgdG8gZXhpdCBncmFjZWZ1bGx5LlxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHJlbGF0aXZlU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpO1xuICAgIHNvdXJjZSA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChzb3VyY2UpO1xuICAgIGlmIChzb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgb3JpZ2luYWxMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKFxuICAgICAgbmVlZGxlLFxuICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgdXRpbC5nZXRBcmcoYUFyZ3MsICdiaWFzJywgU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQpXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IG5lZWRsZS5zb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICB9O1xuICB9O1xuXG5leHBvcnRzLkJhc2ljU291cmNlTWFwQ29uc3VtZXIgPSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEFuIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2hcbiAqIHdlIGNhbiBxdWVyeSBmb3IgaW5mb3JtYXRpb24uIEl0IGRpZmZlcnMgZnJvbSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGluXG4gKiB0aGF0IGl0IHRha2VzIFwiaW5kZXhlZFwiIHNvdXJjZSBtYXBzIChpLmUuIG9uZXMgd2l0aCBhIFwic2VjdGlvbnNcIiBmaWVsZCkgYXNcbiAqIGlucHV0LlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgYSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yIGFscmVhZHlcbiAqIHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMgZm9yIGluZGV4ZWQgc291cmNlIG1hcHMsIHRoZXlcbiAqIGhhdmUgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqICAgLSBzZWN0aW9uczogQSBsaXN0IG9mIHNlY3Rpb24gZGVmaW5pdGlvbnMuXG4gKlxuICogRWFjaCB2YWx1ZSB1bmRlciB0aGUgXCJzZWN0aW9uc1wiIGZpZWxkIGhhcyB0d28gZmllbGRzOlxuICogICAtIG9mZnNldDogVGhlIG9mZnNldCBpbnRvIHRoZSBvcmlnaW5hbCBzcGVjaWZpZWQgYXQgd2hpY2ggdGhpcyBzZWN0aW9uXG4gKiAgICAgICBiZWdpbnMgdG8gYXBwbHksIGRlZmluZWQgYXMgYW4gb2JqZWN0IHdpdGggYSBcImxpbmVcIiBhbmQgXCJjb2x1bW5cIlxuICogICAgICAgZmllbGQuXG4gKiAgIC0gbWFwOiBBIHNvdXJjZSBtYXAgZGVmaW5pdGlvbi4gVGhpcyBzb3VyY2UgbWFwIGNvdWxkIGFsc28gYmUgaW5kZXhlZCxcbiAqICAgICAgIGJ1dCBkb2Vzbid0IGhhdmUgdG8gYmUuXG4gKlxuICogSW5zdGVhZCBvZiB0aGUgXCJtYXBcIiBmaWVsZCwgaXQncyBhbHNvIHBvc3NpYmxlIHRvIGhhdmUgYSBcInVybFwiIGZpZWxkXG4gKiBzcGVjaWZ5aW5nIGEgVVJMIHRvIHJldHJpZXZlIGEgc291cmNlIG1hcCBmcm9tLCBidXQgdGhhdCdzIGN1cnJlbnRseVxuICogdW5zdXBwb3J0ZWQuXG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdLCBidXRcbiAqIG1vZGlmaWVkIHRvIG9taXQgYSBzZWN0aW9uIHdoaWNoIHVzZXMgdGhlIFwidXJsXCIgZmllbGQuXG4gKlxuICogIHtcbiAqICAgIHZlcnNpb24gOiAzLFxuICogICAgZmlsZTogXCJhcHAuanNcIixcbiAqICAgIHNlY3Rpb25zOiBbe1xuICogICAgICBvZmZzZXQ6IHtsaW5lOjEwMCwgY29sdW1uOjEwfSxcbiAqICAgICAgbWFwOiB7XG4gKiAgICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICAgZmlsZTogXCJzZWN0aW9uLmpzXCIsXG4gKiAgICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgIG5hbWVzOiBbXCJzcmNcIiwgXCJtYXBzXCIsIFwiYXJlXCIsIFwiZnVuXCJdLFxuICogICAgICAgIG1hcHBpbmdzOiBcIkFBQUEsRTs7QUJDREU7XCJcbiAqICAgICAgfVxuICogICAgfV0sXG4gKiAgfVxuICpcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyLCBpZiBnaXZlbiwgaXMgYSBzdHJpbmcgd2hvc2UgdmFsdWUgaXMgdGhlIFVSTFxuICogYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgd2FzIGZvdW5kLiAgVGhpcyBVUkwgaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICogc291cmNlcyBhcnJheS5cbiAqXG4gKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdCNoZWFkaW5nPWguNTM1ZXMzeGVwcmd0XG4gKi9cbmZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gIHZhciBzZWN0aW9ucyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NlY3Rpb25zJyk7XG5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gIHZhciBsYXN0T2Zmc2V0ID0ge1xuICAgIGxpbmU6IC0xLFxuICAgIGNvbHVtbjogMFxuICB9O1xuICB0aGlzLl9zZWN0aW9ucyA9IHNlY3Rpb25zLm1hcChmdW5jdGlvbiAocykge1xuICAgIGlmIChzLnVybCkge1xuICAgICAgLy8gVGhlIHVybCBmaWVsZCB3aWxsIHJlcXVpcmUgc3VwcG9ydCBmb3IgYXN5bmNocm9uaWNpdHkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMTZcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcG9ydCBmb3IgdXJsIGZpZWxkIGluIHNlY3Rpb25zIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgdmFyIG9mZnNldCA9IHV0aWwuZ2V0QXJnKHMsICdvZmZzZXQnKTtcbiAgICB2YXIgb2Zmc2V0TGluZSA9IHV0aWwuZ2V0QXJnKG9mZnNldCwgJ2xpbmUnKTtcbiAgICB2YXIgb2Zmc2V0Q29sdW1uID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnY29sdW1uJyk7XG5cbiAgICBpZiAob2Zmc2V0TGluZSA8IGxhc3RPZmZzZXQubGluZSB8fFxuICAgICAgICAob2Zmc2V0TGluZSA9PT0gbGFzdE9mZnNldC5saW5lICYmIG9mZnNldENvbHVtbiA8IGxhc3RPZmZzZXQuY29sdW1uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWN0aW9uIG9mZnNldHMgbXVzdCBiZSBvcmRlcmVkIGFuZCBub24tb3ZlcmxhcHBpbmcuJyk7XG4gICAgfVxuICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2VuZXJhdGVkT2Zmc2V0OiB7XG4gICAgICAgIC8vIFRoZSBvZmZzZXQgZmllbGRzIGFyZSAwLWJhc2VkLCBidXQgd2UgdXNlIDEtYmFzZWQgaW5kaWNlcyB3aGVuXG4gICAgICAgIC8vIGVuY29kaW5nL2RlY29kaW5nIGZyb20gVkxRLlxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBvZmZzZXRMaW5lICsgMSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBvZmZzZXRDb2x1bW4gKyAxXG4gICAgICB9LFxuICAgICAgY29uc3VtZXI6IG5ldyBTb3VyY2VNYXBDb25zdW1lcih1dGlsLmdldEFyZyhzLCAnbWFwJyksIGFTb3VyY2VNYXBVUkwpXG4gICAgfVxuICB9KTtcbn1cblxuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgc291cmNlcy5wdXNoKHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlcztcbiAgfVxufSk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlLCBsaW5lLCBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgLy8gRmluZCB0aGUgc2VjdGlvbiBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24gd2UncmUgdHJ5aW5nIHRvIG1hcFxuICAgIC8vIHRvIGFuIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIHZhciBzZWN0aW9uSW5kZXggPSBiaW5hcnlTZWFyY2guc2VhcmNoKG5lZWRsZSwgdGhpcy5fc2VjdGlvbnMsXG4gICAgICBmdW5jdGlvbihuZWVkbGUsIHNlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNtcCA9IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC0gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZTtcbiAgICAgICAgaWYgKGNtcCkge1xuICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbik7XG4gICAgICB9KTtcbiAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW3NlY3Rpb25JbmRleF07XG5cbiAgICBpZiAoIXNlY3Rpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBuYW1lOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzZWN0aW9uLmNvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgbGluZTogbmVlZGxlLmdlbmVyYXRlZExpbmUgLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgY29sdW1uOiBuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgIDogMCksXG4gICAgICBiaWFzOiBhQXJncy5iaWFzXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLmNvbnN1bWVyLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCk7XG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICB2YXIgY29udGVudCA9IHNlY3Rpb24uY29uc3VtZXIuc291cmNlQ29udGVudEZvcihhU291cmNlLCB0cnVlKTtcbiAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLiBcbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICAvLyBPbmx5IGNvbnNpZGVyIHRoaXMgc2VjdGlvbiBpZiB0aGUgcmVxdWVzdGVkIHNvdXJjZSBpcyBpbiB0aGUgbGlzdCBvZlxuICAgICAgLy8gc291cmNlcyBvZiB0aGUgY29uc3VtZXIuXG4gICAgICBpZiAoc2VjdGlvbi5jb25zdW1lci5fZmluZFNvdXJjZUluZGV4KHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJykpID09PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBnZW5lcmF0ZWRQb3NpdGlvbiA9IHNlY3Rpb24uY29uc3VtZXIuZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpO1xuICAgICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciByZXQgPSB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkUG9zaXRpb24ubGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkUG9zaXRpb24uY29sdW1uICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lXG4gICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICAgOiAwKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcbiAgICAgIHZhciBzZWN0aW9uTWFwcGluZ3MgPSBzZWN0aW9uLmNvbnN1bWVyLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VjdGlvbk1hcHBpbmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBtYXBwaW5nID0gc2VjdGlvbk1hcHBpbmdzW2pdO1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSBzZWN0aW9uLmNvbnN1bWVyLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHNlY3Rpb24uY29uc3VtZXIuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB0aGlzLl9zb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblxuICAgICAgICB2YXIgbmFtZSA9IG51bGw7XG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBuYW1lID0gc2VjdGlvbi5jb25zdW1lci5fbmFtZXMuYXQobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgbWFwcGluZ3MgY29taW5nIGZyb20gdGhlIGNvbnN1bWVyIGZvciB0aGUgc2VjdGlvbiBoYXZlXG4gICAgICAgIC8vIGdlbmVyYXRlZCBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzZWN0aW9uLCBzbyB3ZVxuICAgICAgICAvLyBuZWVkIHRvIG9mZnNldCB0aGVtIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgY29uY2F0ZW5hdGVkXG4gICAgICAgIC8vIGdlbmVyYXRlZCBmaWxlLlxuICAgICAgICB2YXIgYWRqdXN0ZWRNYXBwaW5nID0ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG1hcHBpbmcuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICA6IDApLFxuICAgICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgYWRqdXN0ZWRNYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWlja1NvcnQodGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICBxdWlja1NvcnQodGhpcy5fX29yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICB9O1xuXG5leHBvcnRzLkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciA9IEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcjtcbiIsICIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBTb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL3NvdXJjZS1tYXAtZ2VuZXJhdG9yJykuU291cmNlTWFwR2VuZXJhdG9yO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLy8gTWF0Y2hlcyBhIFdpbmRvd3Mtc3R5bGUgYFxcclxcbmAgbmV3bGluZSBvciBhIGBcXG5gIG5ld2xpbmUgdXNlZCBieSBhbGwgb3RoZXJcbi8vIG9wZXJhdGluZyBzeXN0ZW1zIHRoZXNlIGRheXMgKGNhcHR1cmluZyB0aGUgcmVzdWx0KS5cbnZhciBSRUdFWF9ORVdMSU5FID0gLyhcXHI/XFxuKS87XG5cbi8vIE5ld2xpbmUgY2hhcmFjdGVyIGNvZGUgZm9yIGNoYXJDb2RlQXQoKSBjb21wYXJpc29uc1xudmFyIE5FV0xJTkVfQ09ERSA9IDEwO1xuXG4vLyBQcml2YXRlIHN5bWJvbCBmb3IgaWRlbnRpZnlpbmcgYFNvdXJjZU5vZGVgcyB3aGVuIG11bHRpcGxlIHZlcnNpb25zIG9mXG4vLyB0aGUgc291cmNlLW1hcCBsaWJyYXJ5IGFyZSBsb2FkZWQuIFRoaXMgTVVTVCBOT1QgQ0hBTkdFIGFjcm9zc1xuLy8gdmVyc2lvbnMhXG52YXIgaXNTb3VyY2VOb2RlID0gXCIkJCRpc1NvdXJjZU5vZGUkJCRcIjtcblxuLyoqXG4gKiBTb3VyY2VOb2RlcyBwcm92aWRlIGEgd2F5IHRvIGFic3RyYWN0IG92ZXIgaW50ZXJwb2xhdGluZy9jb25jYXRlbmF0aW5nXG4gKiBzbmlwcGV0cyBvZiBnZW5lcmF0ZWQgSmF2YVNjcmlwdCBzb3VyY2UgY29kZSB3aGlsZSBtYWludGFpbmluZyB0aGUgbGluZSBhbmRcbiAqIGNvbHVtbiBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwYXJhbSBhTGluZSBUaGUgb3JpZ2luYWwgbGluZSBudW1iZXIuXG4gKiBAcGFyYW0gYUNvbHVtbiBUaGUgb3JpZ2luYWwgY29sdW1uIG51bWJlci5cbiAqIEBwYXJhbSBhU291cmNlIFRoZSBvcmlnaW5hbCBzb3VyY2UncyBmaWxlbmFtZS5cbiAqIEBwYXJhbSBhQ2h1bmtzIE9wdGlvbmFsLiBBbiBhcnJheSBvZiBzdHJpbmdzIHdoaWNoIGFyZSBzbmlwcGV0cyBvZlxuICogICAgICAgIGdlbmVyYXRlZCBKUywgb3Igb3RoZXIgU291cmNlTm9kZXMuXG4gKiBAcGFyYW0gYU5hbWUgVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIuXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZU5vZGUoYUxpbmUsIGFDb2x1bW4sIGFTb3VyY2UsIGFDaHVua3MsIGFOYW1lKSB7XG4gIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgdGhpcy5zb3VyY2VDb250ZW50cyA9IHt9O1xuICB0aGlzLmxpbmUgPSBhTGluZSA9PSBudWxsID8gbnVsbCA6IGFMaW5lO1xuICB0aGlzLmNvbHVtbiA9IGFDb2x1bW4gPT0gbnVsbCA/IG51bGwgOiBhQ29sdW1uO1xuICB0aGlzLnNvdXJjZSA9IGFTb3VyY2UgPT0gbnVsbCA/IG51bGwgOiBhU291cmNlO1xuICB0aGlzLm5hbWUgPSBhTmFtZSA9PSBudWxsID8gbnVsbCA6IGFOYW1lO1xuICB0aGlzW2lzU291cmNlTm9kZV0gPSB0cnVlO1xuICBpZiAoYUNodW5rcyAhPSBudWxsKSB0aGlzLmFkZChhQ2h1bmtzKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgU291cmNlTm9kZSBmcm9tIGdlbmVyYXRlZCBjb2RlIGFuZCBhIFNvdXJjZU1hcENvbnN1bWVyLlxuICpcbiAqIEBwYXJhbSBhR2VuZXJhdGVkQ29kZSBUaGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcCBmb3IgdGhlIGdlbmVyYXRlZCBjb2RlXG4gKiBAcGFyYW0gYVJlbGF0aXZlUGF0aCBPcHRpb25hbC4gVGhlIHBhdGggdGhhdCByZWxhdGl2ZSBzb3VyY2VzIGluIHRoZVxuICogICAgICAgIFNvdXJjZU1hcENvbnN1bWVyIHNob3VsZCBiZSByZWxhdGl2ZSB0by5cbiAqL1xuU291cmNlTm9kZS5mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGVfZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAoYUdlbmVyYXRlZENvZGUsIGFTb3VyY2VNYXBDb25zdW1lciwgYVJlbGF0aXZlUGF0aCkge1xuICAgIC8vIFRoZSBTb3VyY2VOb2RlIHdlIHdhbnQgdG8gZmlsbCB3aXRoIHRoZSBnZW5lcmF0ZWQgY29kZVxuICAgIC8vIGFuZCB0aGUgU291cmNlTWFwXG4gICAgdmFyIG5vZGUgPSBuZXcgU291cmNlTm9kZSgpO1xuXG4gICAgLy8gQWxsIGV2ZW4gaW5kaWNlcyBvZiB0aGlzIGFycmF5IGFyZSBvbmUgbGluZSBvZiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4gICAgLy8gd2hpbGUgYWxsIG9kZCBpbmRpY2VzIGFyZSB0aGUgbmV3bGluZXMgYmV0d2VlbiB0d28gYWRqYWNlbnQgbGluZXNcbiAgICAvLyAoc2luY2UgYFJFR0VYX05FV0xJTkVgIGNhcHR1cmVzIGl0cyBtYXRjaCkuXG4gICAgLy8gUHJvY2Vzc2VkIGZyYWdtZW50cyBhcmUgYWNjZXNzZWQgYnkgY2FsbGluZyBgc2hpZnROZXh0TGluZWAuXG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzID0gYUdlbmVyYXRlZENvZGUuc3BsaXQoUkVHRVhfTkVXTElORSk7XG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzSW5kZXggPSAwO1xuICAgIHZhciBzaGlmdE5leHRMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGluZUNvbnRlbnRzID0gZ2V0TmV4dExpbmUoKTtcbiAgICAgIC8vIFRoZSBsYXN0IGxpbmUgb2YgYSBmaWxlIG1pZ2h0IG5vdCBoYXZlIGEgbmV3bGluZS5cbiAgICAgIHZhciBuZXdMaW5lID0gZ2V0TmV4dExpbmUoKSB8fCBcIlwiO1xuICAgICAgcmV0dXJuIGxpbmVDb250ZW50cyArIG5ld0xpbmU7XG5cbiAgICAgIGZ1bmN0aW9uIGdldE5leHRMaW5lKCkge1xuICAgICAgICByZXR1cm4gcmVtYWluaW5nTGluZXNJbmRleCA8IHJlbWFpbmluZ0xpbmVzLmxlbmd0aCA/XG4gICAgICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4KytdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBXZSBuZWVkIHRvIHJlbWVtYmVyIHRoZSBwb3NpdGlvbiBvZiBcInJlbWFpbmluZ0xpbmVzXCJcbiAgICB2YXIgbGFzdEdlbmVyYXRlZExpbmUgPSAxLCBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcblxuICAgIC8vIFRoZSBnZW5lcmF0ZSBTb3VyY2VOb2RlcyB3ZSBuZWVkIGEgY29kZSByYW5nZS5cbiAgICAvLyBUbyBleHRyYWN0IGl0IGN1cnJlbnQgYW5kIGxhc3QgbWFwcGluZyBpcyB1c2VkLlxuICAgIC8vIEhlcmUgd2Ugc3RvcmUgdGhlIGxhc3QgbWFwcGluZy5cbiAgICB2YXIgbGFzdE1hcHBpbmcgPSBudWxsO1xuXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICBpZiAobGFzdE1hcHBpbmcgIT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UgYWRkIHRoZSBjb2RlIGZyb20gXCJsYXN0TWFwcGluZ1wiIHRvIFwibWFwcGluZ1wiOlxuICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGVyZSBpcyBhIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgIGlmIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIC8vIEFzc29jaWF0ZSBmaXJzdCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgICAgLy8gVGhlIHJlbWFpbmluZyBjb2RlIGlzIGFkZGVkIHdpdGhvdXQgbWFwcGluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSBjb2RlIGJldHdlZW4gXCJsYXN0R2VuZXJhdGVkQ29sdW1uXCIgYW5kXG4gICAgICAgICAgLy8gXCJtYXBwaW5nLmdlbmVyYXRlZENvbHVtblwiIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gfHwgJyc7XG4gICAgICAgICAgdmFyIGNvZGUgPSBuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBjb2RlKTtcbiAgICAgICAgICAvLyBObyBtb3JlIHJlbWFpbmluZyBjb2RlLCBjb250aW51ZVxuICAgICAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFdlIGFkZCB0aGUgZ2VuZXJhdGVkIGNvZGUgdW50aWwgdGhlIGZpcnN0IG1hcHBpbmdcbiAgICAgIC8vIHRvIHRoZSBTb3VyY2VOb2RlIHdpdGhvdXQgYW55IG1hcHBpbmcuXG4gICAgICAvLyBFYWNoIGxpbmUgaXMgYWRkZWQgYXMgc2VwYXJhdGUgc3RyaW5nLlxuICAgICAgd2hpbGUgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIG5vZGUuYWRkKHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICB9XG4gICAgICBpZiAobGFzdEdlbmVyYXRlZENvbHVtbiA8IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKSB7XG4gICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdIHx8ICcnO1xuICAgICAgICBub2RlLmFkZChuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pKTtcbiAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICB9XG4gICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgfSwgdGhpcyk7XG4gICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG1hcHBpbmdzLlxuICAgIGlmIChyZW1haW5pbmdMaW5lc0luZGV4IDwgcmVtYWluaW5nTGluZXMubGVuZ3RoKSB7XG4gICAgICBpZiAobGFzdE1hcHBpbmcpIHtcbiAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSByZW1haW5pbmcgY29kZSBpbiB0aGUgY3VycmVudCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgIH1cbiAgICAgIC8vIGFuZCBhZGQgdGhlIHJlbWFpbmluZyBsaW5lcyB3aXRob3V0IGFueSBtYXBwaW5nXG4gICAgICBub2RlLmFkZChyZW1haW5pbmdMaW5lcy5zcGxpY2UocmVtYWluaW5nTGluZXNJbmRleCkuam9pbihcIlwiKSk7XG4gICAgfVxuXG4gICAgLy8gQ29weSBzb3VyY2VzQ29udGVudCBpbnRvIFNvdXJjZU5vZGVcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVJlbGF0aXZlUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm9kZTtcblxuICAgIGZ1bmN0aW9uIGFkZE1hcHBpbmdXaXRoQ29kZShtYXBwaW5nLCBjb2RlKSB7XG4gICAgICBpZiAobWFwcGluZyA9PT0gbnVsbCB8fCBtYXBwaW5nLnNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUuYWRkKGNvZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFSZWxhdGl2ZVBhdGhcbiAgICAgICAgICA/IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICA6IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBub2RlLmFkZChuZXcgU291cmNlTm9kZShtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm5hbWUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoaXMgc291cmNlIG5vZGUuXG4gKlxuICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gKiAgICAgICAgU291cmNlTm9kZSwgb3IgYW4gYXJyYXkgd2hlcmUgZWFjaCBtZW1iZXIgaXMgb25lIG9mIHRob3NlIHRoaW5ncy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gU291cmNlTm9kZV9hZGQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBhQ2h1bmsuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHRoaXMuYWRkKGNodW5rKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKGFDaHVuaykge1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGFDaHVuayk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gU291cmNlTm9kZV9wcmVwZW5kKGFDaHVuaykge1xuICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgZm9yICh2YXIgaSA9IGFDaHVuay5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMucHJlcGVuZChhQ2h1bmtbaV0pO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgdGhpcy5jaGlsZHJlbi51bnNoaWZ0KGFDaHVuayk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgSlMgc25pcHBldHMgaW4gdGhpcyBub2RlIGFuZCBpdHMgY2hpbGRyZW4uIFRoZVxuICogd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBmb3IgZWFjaCBzbmlwcGV0IG9mIEpTIGFuZCBpcyBwYXNzZWQgdGhhdFxuICogc25pcHBldCBhbmQgdGhlIGl0cyBvcmlnaW5hbCBhc3NvY2lhdGVkIHNvdXJjZSdzIGxpbmUvY29sdW1uIGxvY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2FsayhhRm4pIHtcbiAgdmFyIGNodW5rO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNodW5rID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICBpZiAoY2h1bmtbaXNTb3VyY2VOb2RlXSkge1xuICAgICAgY2h1bmsud2FsayhhRm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChjaHVuayAhPT0gJycpIHtcbiAgICAgICAgYUZuKGNodW5rLCB7IHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMaWtlIGBTdHJpbmcucHJvdG90eXBlLmpvaW5gIGV4Y2VwdCBmb3IgU291cmNlTm9kZXMuIEluc2VydHMgYGFTdHJgIGJldHdlZW5cbiAqIGVhY2ggb2YgYHRoaXMuY2hpbGRyZW5gLlxuICpcbiAqIEBwYXJhbSBhU2VwIFRoZSBzZXBhcmF0b3IuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2pvaW4oYVNlcCkge1xuICB2YXIgbmV3Q2hpbGRyZW47XG4gIHZhciBpO1xuICB2YXIgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuLTE7IGkrKykge1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICAgIG5ld0NoaWxkcmVuLnB1c2goYVNlcCk7XG4gICAgfVxuICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ld0NoaWxkcmVuO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSBvbiB0aGUgdmVyeSByaWdodC1tb3N0IHNvdXJjZSBzbmlwcGV0LiBVc2VmdWxcbiAqIGZvciB0cmltbWluZyB3aGl0ZXNwYWNlIGZyb20gdGhlIGVuZCBvZiBhIHNvdXJjZSBub2RlLCBldGMuXG4gKlxuICogQHBhcmFtIGFQYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gKiBAcGFyYW0gYVJlcGxhY2VtZW50IFRoZSB0aGluZyB0byByZXBsYWNlIHRoZSBwYXR0ZXJuIHdpdGguXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnJlcGxhY2VSaWdodCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpIHtcbiAgdmFyIGxhc3RDaGlsZCA9IHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RDaGlsZFtpc1NvdXJjZU5vZGVdKSB7XG4gICAgbGFzdENoaWxkLnJlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgbGFzdENoaWxkID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXSA9IGxhc3RDaGlsZC5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaCgnJy5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS4gVGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAqIGluIHRoZSBzb3VyY2VzQ29udGVudCBmaWVsZC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZVxuICogQHBhcmFtIGFTb3VyY2VDb250ZW50IFRoZSBjb250ZW50IG9mIHRoZSBzb3VyY2UgZmlsZVxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHRoaXMuc291cmNlQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhhU291cmNlRmlsZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gIH07XG5cbi8qKlxuICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIFNvdXJjZU5vZGVzLiBUaGUgd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2hcbiAqIHNvdXJjZSBmaWxlIGNvbnRlbnQgYW5kIGlzIHBhc3NlZCB0aGUgZmlsZW5hbWUgYW5kIHNvdXJjZSBjb250ZW50LlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2Fsa1NvdXJjZUNvbnRlbnRzID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV93YWxrU291cmNlQ29udGVudHMoYUZuKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldW2lzU291cmNlTm9kZV0pIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpXS53YWxrU291cmNlQ29udGVudHMoYUZuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQ29udGVudHMpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhRm4odXRpbC5mcm9tU2V0U3RyaW5nKHNvdXJjZXNbaV0pLCB0aGlzLnNvdXJjZUNvbnRlbnRzW3NvdXJjZXNbaV1dKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZS4gV2Fsa3Mgb3ZlciB0aGUgdHJlZVxuICogYW5kIGNvbmNhdGVuYXRlcyBhbGwgdGhlIHZhcmlvdXMgc25pcHBldHMgdG9nZXRoZXIgdG8gb25lIHN0cmluZy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nKCkge1xuICB2YXIgc3RyID0gXCJcIjtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaykge1xuICAgIHN0ciArPSBjaHVuaztcbiAgfSk7XG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlIGFsb25nIHdpdGggYSBzb3VyY2VcbiAqIG1hcC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmdXaXRoU291cmNlTWFwID0gZnVuY3Rpb24gU291cmNlTm9kZV90b1N0cmluZ1dpdGhTb3VyY2VNYXAoYUFyZ3MpIHtcbiAgdmFyIGdlbmVyYXRlZCA9IHtcbiAgICBjb2RlOiBcIlwiLFxuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHZhciBtYXAgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKTtcbiAgdmFyIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxOYW1lID0gbnVsbDtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaywgb3JpZ2luYWwpIHtcbiAgICBnZW5lcmF0ZWQuY29kZSArPSBjaHVuaztcbiAgICBpZiAob3JpZ2luYWwuc291cmNlICE9PSBudWxsXG4gICAgICAgICYmIG9yaWdpbmFsLmxpbmUgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwuY29sdW1uICE9PSBudWxsKSB7XG4gICAgICBpZihsYXN0T3JpZ2luYWxTb3VyY2UgIT09IG9yaWdpbmFsLnNvdXJjZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTGluZSAhPT0gb3JpZ2luYWwubGluZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsQ29sdW1uICE9PSBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbE5hbWUgIT09IG9yaWdpbmFsLm5hbWUpIHtcbiAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICBsYXN0T3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgIGxhc3RPcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgIGxhc3RPcmlnaW5hbE5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbmd0aCA9IGNodW5rLmxlbmd0aDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgaWYgKGNodW5rLmNoYXJDb2RlQXQoaWR4KSA9PT0gTkVXTElORV9DT0RFKSB7XG4gICAgICAgIGdlbmVyYXRlZC5saW5lKys7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gPSAwO1xuICAgICAgICAvLyBNYXBwaW5ncyBlbmQgYXQgZW9sXG4gICAgICAgIGlmIChpZHggKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZW5lcmF0ZWQuY29sdW1uKys7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGhpcy53YWxrU291cmNlQ29udGVudHMoZnVuY3Rpb24gKHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpIHtcbiAgICBtYXAuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgY29kZTogZ2VuZXJhdGVkLmNvZGUsIG1hcDogbWFwIH07XG59O1xuXG5leHBvcnRzLlNvdXJjZU5vZGUgPSBTb3VyY2VOb2RlO1xuIiwgIi8qXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRS50eHQgb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW5vZGUnKS5Tb3VyY2VOb2RlO1xuIiwgIi8qIGdsb2JhbCBkZWZpbmUsIHJlcXVpcmUgKi9cbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlscyc7XG5cbmxldCBTb3VyY2VOb2RlO1xuXG50cnkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhZGVmaW5lLmFtZCkge1xuICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgdGhpcyBpbiBBTUQgZW52aXJvbm1lbnRzLiBGb3IgdGhlc2UgZW52aXJvbm1lbnRzLCB3ZSBhc3N1bWUgdGhhdFxuICAgIC8vIHRoZXkgYXJlIHJ1bm5pbmcgb24gdGhlIGJyb3dzZXIgYW5kIHRodXMgaGF2ZSBubyBuZWVkIGZvciB0aGUgc291cmNlLW1hcCBsaWJyYXJ5LlxuICAgIGxldCBTb3VyY2VNYXAgPSByZXF1aXJlKCdzb3VyY2UtbWFwJyk7XG4gICAgU291cmNlTm9kZSA9IFNvdXJjZU1hcC5Tb3VyY2VOb2RlO1xuICB9XG59IGNhdGNoIChlcnIpIHtcbiAgLyogTk9QICovXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdGVzdGVkIGJ1dCBub3QgY292ZXJlZCBpbiBpc3RhbmJ1bCBkdWUgdG8gZGlzdCBidWlsZCAgKi9cbmlmICghU291cmNlTm9kZSkge1xuICBTb3VyY2VOb2RlID0gZnVuY3Rpb24obGluZSwgY29sdW1uLCBzcmNGaWxlLCBjaHVua3MpIHtcbiAgICB0aGlzLnNyYyA9ICcnO1xuICAgIGlmIChjaHVua3MpIHtcbiAgICAgIHRoaXMuYWRkKGNodW5rcyk7XG4gICAgfVxuICB9O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZSA9IHtcbiAgICBhZGQ6IGZ1bmN0aW9uKGNodW5rcykge1xuICAgICAgaWYgKGlzQXJyYXkoY2h1bmtzKSkge1xuICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNyYyArPSBjaHVua3M7XG4gICAgfSxcbiAgICBwcmVwZW5kOiBmdW5jdGlvbihjaHVua3MpIHtcbiAgICAgIGlmIChpc0FycmF5KGNodW5rcykpIHtcbiAgICAgICAgY2h1bmtzID0gY2h1bmtzLmpvaW4oJycpO1xuICAgICAgfVxuICAgICAgdGhpcy5zcmMgPSBjaHVua3MgKyB0aGlzLnNyYztcbiAgICB9LFxuICAgIHRvU3RyaW5nV2l0aFNvdXJjZU1hcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geyBjb2RlOiB0aGlzLnRvU3RyaW5nKCkgfTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNyYztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhc3RDaHVuayhjaHVuaywgY29kZUdlbiwgbG9jKSB7XG4gIGlmIChpc0FycmF5KGNodW5rKSkge1xuICAgIGxldCByZXQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcmV0LnB1c2goY29kZUdlbi53cmFwKGNodW5rW2ldLCBsb2MpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInKSB7XG4gICAgLy8gSGFuZGxlIHByaW1pdGl2ZXMgdGhhdCB0aGUgU291cmNlTm9kZSB3aWxsIHRocm93IHVwIG9uXG4gICAgcmV0dXJuIGNodW5rICsgJyc7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5mdW5jdGlvbiBDb2RlR2VuKHNyY0ZpbGUpIHtcbiAgdGhpcy5zcmNGaWxlID0gc3JjRmlsZTtcbiAgdGhpcy5zb3VyY2UgPSBbXTtcbn1cblxuQ29kZUdlbi5wcm90b3R5cGUgPSB7XG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuICF0aGlzLnNvdXJjZS5sZW5ndGg7XG4gIH0sXG4gIHByZXBlbmQ6IGZ1bmN0aW9uKHNvdXJjZSwgbG9jKSB7XG4gICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTtcbiAgfSxcbiAgcHVzaDogZnVuY3Rpb24oc291cmNlLCBsb2MpIHtcbiAgICB0aGlzLnNvdXJjZS5wdXNoKHRoaXMud3JhcChzb3VyY2UsIGxvYykpO1xuICB9LFxuXG4gIG1lcmdlOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgc291cmNlID0gdGhpcy5lbXB0eSgpO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICBzb3VyY2UuYWRkKFsnICAnLCBsaW5lLCAnXFxuJ10pO1xuICAgIH0pO1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH0sXG5cbiAgZWFjaDogZnVuY3Rpb24oaXRlcikge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLnNvdXJjZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaXRlcih0aGlzLnNvdXJjZVtpXSk7XG4gICAgfVxuICB9LFxuXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBsZXQgbG9jID0gdGhpcy5jdXJyZW50TG9jYXRpb24gfHwgeyBzdGFydDoge30gfTtcbiAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSk7XG4gIH0sXG4gIHdyYXA6IGZ1bmN0aW9uKGNodW5rLCBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7IHN0YXJ0OiB7fSB9KSB7XG4gICAgaWYgKGNodW5rIGluc3RhbmNlb2YgU291cmNlTm9kZSkge1xuICAgICAgcmV0dXJuIGNodW5rO1xuICAgIH1cblxuICAgIGNodW5rID0gY2FzdENodW5rKGNodW5rLCB0aGlzLCBsb2MpO1xuXG4gICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKFxuICAgICAgbG9jLnN0YXJ0LmxpbmUsXG4gICAgICBsb2Muc3RhcnQuY29sdW1uLFxuICAgICAgdGhpcy5zcmNGaWxlLFxuICAgICAgY2h1bmtcbiAgICApO1xuICB9LFxuXG4gIGZ1bmN0aW9uQ2FsbDogZnVuY3Rpb24oZm4sIHR5cGUsIHBhcmFtcykge1xuICAgIHBhcmFtcyA9IHRoaXMuZ2VuZXJhdGVMaXN0KHBhcmFtcyk7XG4gICAgcmV0dXJuIHRoaXMud3JhcChbZm4sIHR5cGUgPyAnLicgKyB0eXBlICsgJygnIDogJygnLCBwYXJhbXMsICcpJ10pO1xuICB9LFxuXG4gIHF1b3RlZFN0cmluZzogZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICdcIicgK1xuICAgICAgKHN0ciArICcnKVxuICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKVxuICAgICAgICAucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpXG4gICAgICAgIC5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJylcbiAgICAgICAgLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKVxuICAgICAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JykgLy8gUGVyIEVjbWEtMjYyIDcuMyArIDcuOC40XG4gICAgICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKSArXG4gICAgICAnXCInXG4gICAgKTtcbiAgfSxcblxuICBvYmplY3RMaXRlcmFsOiBmdW5jdGlvbihvYmopIHtcbiAgICBsZXQgcGFpcnMgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gY2FzdENodW5rKG9ialtrZXldLCB0aGlzKTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGFpcnMucHVzaChbdGhpcy5xdW90ZWRTdHJpbmcoa2V5KSwgJzonLCB2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IHJldCA9IHRoaXMuZ2VuZXJhdGVMaXN0KHBhaXJzKTtcbiAgICByZXQucHJlcGVuZCgneycpO1xuICAgIHJldC5hZGQoJ30nKTtcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIGdlbmVyYXRlTGlzdDogZnVuY3Rpb24oZW50cmllcykge1xuICAgIGxldCByZXQgPSB0aGlzLmVtcHR5KCk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGkpIHtcbiAgICAgICAgcmV0LmFkZCgnLCcpO1xuICAgICAgfVxuXG4gICAgICByZXQuYWRkKGNhc3RDaHVuayhlbnRyaWVzW2ldLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBnZW5lcmF0ZUFycmF5OiBmdW5jdGlvbihlbnRyaWVzKSB7XG4gICAgbGV0IHJldCA9IHRoaXMuZ2VuZXJhdGVMaXN0KGVudHJpZXMpO1xuICAgIHJldC5wcmVwZW5kKCdbJyk7XG4gICAgcmV0LmFkZCgnXScpO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29kZUdlbjtcbiIsICJpbXBvcnQgeyBDT01QSUxFUl9SRVZJU0lPTiwgUkVWSVNJT05fQ0hBTkdFUyB9IGZyb20gJy4uL2Jhc2UnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBDb2RlR2VuIGZyb20gJy4vY29kZS1nZW4nO1xuXG5mdW5jdGlvbiBMaXRlcmFsKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gSmF2YVNjcmlwdENvbXBpbGVyKCkge31cblxuSmF2YVNjcmlwdENvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgLy8gUFVCTElDIEFQSTogWW91IGNhbiBvdmVycmlkZSB0aGVzZSBtZXRob2RzIGluIGEgc3ViY2xhc3MgdG8gcHJvdmlkZVxuICAvLyBhbHRlcm5hdGl2ZSBjb21waWxlZCBmb3JtcyBmb3IgbmFtZSBsb29rdXAgYW5kIGJ1ZmZlcmluZyBzZW1hbnRpY3NcbiAgbmFtZUxvb2t1cDogZnVuY3Rpb24ocGFyZW50LCBuYW1lIC8qLCAgdHlwZSAqLykge1xuICAgIHJldHVybiB0aGlzLmludGVybmFsTmFtZUxvb2t1cChwYXJlbnQsIG5hbWUpO1xuICB9LFxuICBkZXB0aGVkTG9va3VwOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubG9va3VwJyksXG4gICAgICAnKGRlcHRocywgJyxcbiAgICAgIEpTT04uc3RyaW5naWZ5KG5hbWUpLFxuICAgICAgJyknXG4gICAgXTtcbiAgfSxcblxuICBjb21waWxlckluZm86IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHJldmlzaW9uID0gQ09NUElMRVJfUkVWSVNJT04sXG4gICAgICB2ZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbcmV2aXNpb25dO1xuICAgIHJldHVybiBbcmV2aXNpb24sIHZlcnNpb25zXTtcbiAgfSxcblxuICBhcHBlbmRUb0J1ZmZlcjogZnVuY3Rpb24oc291cmNlLCBsb2NhdGlvbiwgZXhwbGljaXQpIHtcbiAgICAvLyBGb3JjZSBhIHNvdXJjZSBhcyB0aGlzIHNpbXBsaWZpZXMgdGhlIG1lcmdlIGxvZ2ljLlxuICAgIGlmICghaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBzb3VyY2UgPSBbc291cmNlXTtcbiAgICB9XG4gICAgc291cmNlID0gdGhpcy5zb3VyY2Uud3JhcChzb3VyY2UsIGxvY2F0aW9uKTtcblxuICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XG4gICAgICByZXR1cm4gWydyZXR1cm4gJywgc291cmNlLCAnOyddO1xuICAgIH0gZWxzZSBpZiAoZXhwbGljaXQpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBjYXNlIHdoZXJlIHRoZSBidWZmZXIgb3BlcmF0aW9uIG9jY3VycyBhcyBhIGNoaWxkIG9mIGFub3RoZXJcbiAgICAgIC8vIGNvbnN0cnVjdCwgZ2VuZXJhbGx5IGJyYWNlcy4gV2UgaGF2ZSB0byBleHBsaWNpdGx5IG91dHB1dCB0aGVzZSBidWZmZXJcbiAgICAgIC8vIG9wZXJhdGlvbnMgdG8gZW5zdXJlIHRoYXQgdGhlIGVtaXR0ZWQgY29kZSBnb2VzIGluIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuICAgICAgcmV0dXJuIFsnYnVmZmVyICs9ICcsIHNvdXJjZSwgJzsnXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlLmFwcGVuZFRvQnVmZmVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuICB9LFxuXG4gIGluaXRpYWxpemVCdWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1b3RlZFN0cmluZygnJyk7XG4gIH0sXG4gIC8vIEVORCBQVUJMSUMgQVBJXG4gIGludGVybmFsTmFtZUxvb2t1cDogZnVuY3Rpb24ocGFyZW50LCBuYW1lKSB7XG4gICAgdGhpcy5sb29rdXBQcm9wZXJ0eUZ1bmN0aW9uSXNVc2VkID0gdHJ1ZTtcbiAgICByZXR1cm4gWydsb29rdXBQcm9wZXJ0eSgnLCBwYXJlbnQsICcsJywgSlNPTi5zdHJpbmdpZnkobmFtZSksICcpJ107XG4gIH0sXG5cbiAgbG9va3VwUHJvcGVydHlGdW5jdGlvbklzVXNlZDogZmFsc2UsXG5cbiAgY29tcGlsZTogZnVuY3Rpb24oZW52aXJvbm1lbnQsIG9wdGlvbnMsIGNvbnRleHQsIGFzT2JqZWN0KSB7XG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHJpbmdQYXJhbXMgPSB0aGlzLm9wdGlvbnMuc3RyaW5nUGFyYW1zO1xuICAgIHRoaXMudHJhY2tJZHMgPSB0aGlzLm9wdGlvbnMudHJhY2tJZHM7XG4gICAgdGhpcy5wcmVjb21waWxlID0gIWFzT2JqZWN0O1xuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5lbnZpcm9ubWVudC5uYW1lO1xuICAgIHRoaXMuaXNDaGlsZCA9ICEhY29udGV4dDtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0IHx8IHtcbiAgICAgIGRlY29yYXRvcnM6IFtdLFxuICAgICAgcHJvZ3JhbXM6IFtdLFxuICAgICAgZW52aXJvbm1lbnRzOiBbXVxuICAgIH07XG5cbiAgICB0aGlzLnByZWFtYmxlKCk7XG5cbiAgICB0aGlzLnN0YWNrU2xvdCA9IDA7XG4gICAgdGhpcy5zdGFja1ZhcnMgPSBbXTtcbiAgICB0aGlzLmFsaWFzZXMgPSB7fTtcbiAgICB0aGlzLnJlZ2lzdGVycyA9IHsgbGlzdDogW10gfTtcbiAgICB0aGlzLmhhc2hlcyA9IFtdO1xuICAgIHRoaXMuY29tcGlsZVN0YWNrID0gW107XG4gICAgdGhpcy5pbmxpbmVTdGFjayA9IFtdO1xuICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBbXTtcblxuICAgIHRoaXMuY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKTtcblxuICAgIHRoaXMudXNlRGVwdGhzID1cbiAgICAgIHRoaXMudXNlRGVwdGhzIHx8XG4gICAgICBlbnZpcm9ubWVudC51c2VEZXB0aHMgfHxcbiAgICAgIGVudmlyb25tZW50LnVzZURlY29yYXRvcnMgfHxcbiAgICAgIHRoaXMub3B0aW9ucy5jb21wYXQ7XG4gICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZW52aXJvbm1lbnQudXNlQmxvY2tQYXJhbXM7XG5cbiAgICBsZXQgb3Bjb2RlcyA9IGVudmlyb25tZW50Lm9wY29kZXMsXG4gICAgICBvcGNvZGUsXG4gICAgICBmaXJzdExvYyxcbiAgICAgIGksXG4gICAgICBsO1xuXG4gICAgZm9yIChpID0gMCwgbCA9IG9wY29kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBvcGNvZGUgPSBvcGNvZGVzW2ldO1xuXG4gICAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSBvcGNvZGUubG9jO1xuICAgICAgZmlyc3RMb2MgPSBmaXJzdExvYyB8fCBvcGNvZGUubG9jO1xuICAgICAgdGhpc1tvcGNvZGUub3Bjb2RlXS5hcHBseSh0aGlzLCBvcGNvZGUuYXJncyk7XG4gICAgfVxuXG4gICAgLy8gRmx1c2ggYW55IHRyYWlsaW5nIGNvbnRlbnQgdGhhdCBtaWdodCBiZSBwZW5kaW5nLlxuICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IGZpcnN0TG9jO1xuICAgIHRoaXMucHVzaFNvdXJjZSgnJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0aGlzLnN0YWNrU2xvdCB8fCB0aGlzLmlubGluZVN0YWNrLmxlbmd0aCB8fCB0aGlzLmNvbXBpbGVTdGFjay5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0NvbXBpbGUgY29tcGxldGVkIHdpdGggY29udGVudCBsZWZ0IG9uIHN0YWNrJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRlY29yYXRvcnMuaXNFbXB0eSgpKSB7XG4gICAgICB0aGlzLnVzZURlY29yYXRvcnMgPSB0cnVlO1xuXG4gICAgICB0aGlzLmRlY29yYXRvcnMucHJlcGVuZChbXG4gICAgICAgICd2YXIgZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5kZWNvcmF0b3JzLCAnLFxuICAgICAgICB0aGlzLmxvb2t1cFByb3BlcnR5RnVuY3Rpb25WYXJEZWNsYXJhdGlvbigpLFxuICAgICAgICAnO1xcbidcbiAgICAgIF0pO1xuICAgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goJ3JldHVybiBmbjsnKTtcblxuICAgICAgaWYgKGFzT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycyA9IEZ1bmN0aW9uLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgICAnZm4nLFxuICAgICAgICAgICdwcm9wcycsXG4gICAgICAgICAgJ2NvbnRhaW5lcicsXG4gICAgICAgICAgJ2RlcHRoMCcsXG4gICAgICAgICAgJ2RhdGEnLFxuICAgICAgICAgICdibG9ja1BhcmFtcycsXG4gICAgICAgICAgJ2RlcHRocycsXG4gICAgICAgICAgdGhpcy5kZWNvcmF0b3JzLm1lcmdlKClcbiAgICAgICAgXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlY29yYXRvcnMucHJlcGVuZChcbiAgICAgICAgICAnZnVuY3Rpb24oZm4sIHByb3BzLCBjb250YWluZXIsIGRlcHRoMCwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xcbidcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goJ31cXG4nKTtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdGhpcy5kZWNvcmF0b3JzLm1lcmdlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9ycyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBsZXQgZm4gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uQ29udGV4dChhc09iamVjdCk7XG4gICAgaWYgKCF0aGlzLmlzQ2hpbGQpIHtcbiAgICAgIGxldCByZXQgPSB7XG4gICAgICAgIGNvbXBpbGVyOiB0aGlzLmNvbXBpbGVySW5mbygpLFxuICAgICAgICBtYWluOiBmblxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuZGVjb3JhdG9ycykge1xuICAgICAgICByZXQubWFpbl9kID0gdGhpcy5kZWNvcmF0b3JzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGxldCB7IHByb2dyYW1zLCBkZWNvcmF0b3JzIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gcHJvZ3JhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9ncmFtc1tpXSkge1xuICAgICAgICAgIHJldFtpXSA9IHByb2dyYW1zW2ldO1xuICAgICAgICAgIGlmIChkZWNvcmF0b3JzW2ldKSB7XG4gICAgICAgICAgICByZXRbaSArICdfZCddID0gZGVjb3JhdG9yc1tpXTtcbiAgICAgICAgICAgIHJldC51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQudXNlUGFydGlhbCkge1xuICAgICAgICByZXQudXNlUGFydGlhbCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHtcbiAgICAgICAgcmV0LnVzZURhdGEgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICAgIHJldC51c2VEZXB0aHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHtcbiAgICAgICAgcmV0LnVzZUJsb2NrUGFyYW1zID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XG4gICAgICAgIHJldC5jb21wYXQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFzT2JqZWN0KSB7XG4gICAgICAgIHJldC5jb21waWxlciA9IEpTT04uc3RyaW5naWZ5KHJldC5jb21waWxlcik7XG5cbiAgICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0geyBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfSB9O1xuICAgICAgICByZXQgPSB0aGlzLm9iamVjdExpdGVyYWwocmV0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zcmNOYW1lKSB7XG4gICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nV2l0aFNvdXJjZU1hcCh7IGZpbGU6IG9wdGlvbnMuZGVzdE5hbWUgfSk7XG4gICAgICAgICAgcmV0Lm1hcCA9IHJldC5tYXAgJiYgcmV0Lm1hcC50b1N0cmluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldCA9IHJldC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQuY29tcGlsZXJPcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm47XG4gICAgfVxuICB9LFxuXG4gIHByZWFtYmxlOiBmdW5jdGlvbigpIHtcbiAgICAvLyB0cmFjayB0aGUgbGFzdCBjb250ZXh0IHB1c2hlZCBpbnRvIHBsYWNlIHRvIGFsbG93IHNraXBwaW5nIHRoZVxuICAgIC8vIGdldENvbnRleHQgb3Bjb2RlIHdoZW4gaXQgd291bGQgYmUgYSBub29wXG4gICAgdGhpcy5sYXN0Q29udGV4dCA9IDA7XG4gICAgdGhpcy5zb3VyY2UgPSBuZXcgQ29kZUdlbih0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XG4gICAgdGhpcy5kZWNvcmF0b3JzID0gbmV3IENvZGVHZW4odGhpcy5vcHRpb25zLnNyY05hbWUpO1xuICB9LFxuXG4gIGNyZWF0ZUZ1bmN0aW9uQ29udGV4dDogZnVuY3Rpb24oYXNPYmplY3QpIHtcbiAgICBsZXQgdmFyRGVjbGFyYXRpb25zID0gJyc7XG5cbiAgICBsZXQgbG9jYWxzID0gdGhpcy5zdGFja1ZhcnMuY29uY2F0KHRoaXMucmVnaXN0ZXJzLmxpc3QpO1xuICAgIGlmIChsb2NhbHMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsICcgKyBsb2NhbHMuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBtaW5pbWl6ZXIgYWxpYXMgbWFwcGluZ3NcbiAgICAvL1xuICAgIC8vIFdoZW4gdXNpbmcgdHJ1ZSBTb3VyY2VOb2RlcywgdGhpcyB3aWxsIHVwZGF0ZSBhbGwgcmVmZXJlbmNlcyB0byB0aGUgZ2l2ZW4gYWxpYXNcbiAgICAvLyBhcyB0aGUgc291cmNlIG5vZGVzIGFyZSByZXVzZWQgaW4gc2l0dS4gRm9yIHRoZSBub24tc291cmNlIG5vZGUgY29tcGlsYXRpb24gbW9kZSxcbiAgICAvLyBhbGlhc2VzIHdpbGwgbm90IGJlIHVzZWQsIGJ1dCB0aGlzIGNhc2UgaXMgYWxyZWFkeSBiZWluZyBydW4gb24gdGhlIGNsaWVudCBhbmRcbiAgICAvLyB3ZSBhcmVuJ3QgY29uY2VybiBhYm91dCBtaW5pbWl6aW5nIHRoZSB0ZW1wbGF0ZSBzaXplLlxuICAgIGxldCBhbGlhc0NvdW50ID0gMDtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmFsaWFzZXMpLmZvckVhY2goYWxpYXMgPT4ge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLmFsaWFzZXNbYWxpYXNdO1xuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5yZWZlcmVuY2VDb3VudCA+IDEpIHtcbiAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICsrYWxpYXNDb3VudCArICc9JyArIGFsaWFzO1xuICAgICAgICBub2RlLmNoaWxkcmVuWzBdID0gJ2FsaWFzJyArIGFsaWFzQ291bnQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5sb29rdXBQcm9wZXJ0eUZ1bmN0aW9uSXNVc2VkKSB7XG4gICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgJyArIHRoaXMubG9va3VwUHJvcGVydHlGdW5jdGlvblZhckRlY2xhcmF0aW9uKCk7XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtcyA9IFsnY29udGFpbmVyJywgJ2RlcHRoMCcsICdoZWxwZXJzJywgJ3BhcnRpYWxzJywgJ2RhdGEnXTtcblxuICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwYXJhbXMucHVzaCgnYmxvY2tQYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwYXJhbXMucHVzaCgnZGVwdGhzJyk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBhIHNlY29uZCBwYXNzIG92ZXIgdGhlIG91dHB1dCB0byBtZXJnZSBjb250ZW50IHdoZW4gcG9zc2libGVcbiAgICBsZXQgc291cmNlID0gdGhpcy5tZXJnZVNvdXJjZSh2YXJEZWNsYXJhdGlvbnMpO1xuXG4gICAgaWYgKGFzT2JqZWN0KSB7XG4gICAgICBwYXJhbXMucHVzaChzb3VyY2UpO1xuXG4gICAgICByZXR1cm4gRnVuY3Rpb24uYXBwbHkodGhpcywgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlLndyYXAoW1xuICAgICAgICAnZnVuY3Rpb24oJyxcbiAgICAgICAgcGFyYW1zLmpvaW4oJywnKSxcbiAgICAgICAgJykge1xcbiAgJyxcbiAgICAgICAgc291cmNlLFxuICAgICAgICAnfSdcbiAgICAgIF0pO1xuICAgIH1cbiAgfSxcbiAgbWVyZ2VTb3VyY2U6IGZ1bmN0aW9uKHZhckRlY2xhcmF0aW9ucykge1xuICAgIGxldCBpc1NpbXBsZSA9IHRoaXMuZW52aXJvbm1lbnQuaXNTaW1wbGUsXG4gICAgICBhcHBlbmRPbmx5ID0gIXRoaXMuZm9yY2VCdWZmZXIsXG4gICAgICBhcHBlbmRGaXJzdCxcbiAgICAgIHNvdXJjZVNlZW4sXG4gICAgICBidWZmZXJTdGFydCxcbiAgICAgIGJ1ZmZlckVuZDtcbiAgICB0aGlzLnNvdXJjZS5lYWNoKGxpbmUgPT4ge1xuICAgICAgaWYgKGxpbmUuYXBwZW5kVG9CdWZmZXIpIHtcbiAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG4gICAgICAgICAgbGluZS5wcmVwZW5kKCcgICsgJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmZmVyU3RhcnQgPSBsaW5lO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlckVuZCA9IGxpbmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcbiAgICAgICAgICBpZiAoIXNvdXJjZVNlZW4pIHtcbiAgICAgICAgICAgIGFwcGVuZEZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgnYnVmZmVyICs9ICcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXJFbmQuYWRkKCc7Jyk7XG4gICAgICAgICAgYnVmZmVyU3RhcnQgPSBidWZmZXJFbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzb3VyY2VTZWVuID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpc1NpbXBsZSkge1xuICAgICAgICAgIGFwcGVuZE9ubHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGFwcGVuZE9ubHkpIHtcbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZVNlZW4pIHtcbiAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIFwiXCI7Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPVxuICAgICAgICAnLCBidWZmZXIgPSAnICsgKGFwcGVuZEZpcnN0ID8gJycgOiB0aGlzLmluaXRpYWxpemVCdWZmZXIoKSk7XG5cbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gYnVmZmVyICsgJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBidWZmZXI7Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhckRlY2xhcmF0aW9ucykge1xuICAgICAgdGhpcy5zb3VyY2UucHJlcGVuZChcbiAgICAgICAgJ3ZhciAnICsgdmFyRGVjbGFyYXRpb25zLnN1YnN0cmluZygyKSArIChhcHBlbmRGaXJzdCA/ICcnIDogJztcXG4nKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zb3VyY2UubWVyZ2UoKTtcbiAgfSxcblxuICBsb29rdXBQcm9wZXJ0eUZ1bmN0aW9uVmFyRGVjbGFyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBgXG4gICAgICBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIGAudHJpbSgpO1xuICB9LFxuXG4gIC8vIFtibG9ja1ZhbHVlXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCB2YWx1ZVxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJldHVybiB2YWx1ZSBvZiBibG9ja0hlbHBlck1pc3NpbmdcbiAgLy9cbiAgLy8gVGhlIHB1cnBvc2Ugb2YgdGhpcyBvcGNvZGUgaXMgdG8gdGFrZSBhIGJsb2NrIG9mIHRoZSBmb3JtXG4gIC8vIGB7eyN0aGlzLmZvb319Li4ue3svdGhpcy5mb299fWAsIHJlc29sdmUgdGhlIHZhbHVlIG9mIGBmb29gLCBhbmRcbiAgLy8gcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgd2l0aCB0aGUgcmVzdWx0IG9mIHByb3Blcmx5XG4gIC8vIGludm9raW5nIGJsb2NrSGVscGVyTWlzc2luZy5cbiAgYmxvY2tWYWx1ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIGxldCBibG9ja0hlbHBlck1pc3NpbmcgPSB0aGlzLmFsaWFzYWJsZShcbiAgICAgICAgJ2NvbnRhaW5lci5ob29rcy5ibG9ja0hlbHBlck1pc3NpbmcnXG4gICAgICApLFxuICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIDAsIHBhcmFtcyk7XG5cbiAgICBsZXQgYmxvY2tOYW1lID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIHBhcmFtcy5zcGxpY2UoMSwgMCwgYmxvY2tOYW1lKTtcblxuICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFthbWJpZ3VvdXNCbG9ja1ZhbHVlXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCB2YWx1ZVxuICAvLyBDb21waWxlciB2YWx1ZSwgYmVmb3JlOiBsYXN0SGVscGVyPXZhbHVlIG9mIGxhc3QgZm91bmQgaGVscGVyLCBpZiBhbnlcbiAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBubyBsYXN0SGVscGVyOiBzYW1lIGFzIFtibG9ja1ZhbHVlXVxuICAvLyBPbiBzdGFjaywgYWZ0ZXIsIGlmIGxhc3RIZWxwZXI6IHZhbHVlXG4gIGFtYmlndW91c0Jsb2NrVmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFdlJ3JlIGJlaW5nIGEgYml0IGNoZWVreSBhbmQgcmV1c2luZyB0aGUgb3B0aW9ucyB2YWx1ZSBmcm9tIHRoZSBwcmlvciBleGVjXG4gICAgbGV0IGJsb2NrSGVscGVyTWlzc2luZyA9IHRoaXMuYWxpYXNhYmxlKFxuICAgICAgICAnY29udGFpbmVyLmhvb2tzLmJsb2NrSGVscGVyTWlzc2luZydcbiAgICAgICksXG4gICAgICBwYXJhbXMgPSBbdGhpcy5jb250ZXh0TmFtZSgwKV07XG4gICAgdGhpcy5zZXR1cEhlbHBlckFyZ3MoJycsIDAsIHBhcmFtcywgdHJ1ZSk7XG5cbiAgICB0aGlzLmZsdXNoSW5saW5lKCk7XG5cbiAgICBsZXQgY3VycmVudCA9IHRoaXMudG9wU3RhY2soKTtcbiAgICBwYXJhbXMuc3BsaWNlKDEsIDAsIGN1cnJlbnQpO1xuXG4gICAgdGhpcy5wdXNoU291cmNlKFtcbiAgICAgICdpZiAoIScsXG4gICAgICB0aGlzLmxhc3RIZWxwZXIsXG4gICAgICAnKSB7ICcsXG4gICAgICBjdXJyZW50LFxuICAgICAgJyA9ICcsXG4gICAgICB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcyksXG4gICAgICAnfSdcbiAgICBdKTtcbiAgfSxcblxuICAvLyBbYXBwZW5kQ29udGVudF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vXG4gIC8vIEFwcGVuZHMgdGhlIHN0cmluZyB2YWx1ZSBvZiBgY29udGVudGAgdG8gdGhlIGN1cnJlbnQgYnVmZmVyXG4gIGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5wZW5kaW5nQ29udGVudCkge1xuICAgICAgY29udGVudCA9IHRoaXMucGVuZGluZ0NvbnRlbnQgKyBjb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBlbmRpbmdMb2NhdGlvbiA9IHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdDb250ZW50ID0gY29udGVudDtcbiAgfSxcblxuICAvLyBbYXBwZW5kXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vXG4gIC8vIENvZXJjZXMgYHZhbHVlYCB0byBhIFN0cmluZyBhbmQgYXBwZW5kcyBpdCB0byB0aGUgY3VycmVudCBidWZmZXIuXG4gIC8vXG4gIC8vIElmIGB2YWx1ZWAgaXMgdHJ1dGh5LCBvciAwLCBpdCBpcyBjb2VyY2VkIGludG8gYSBzdHJpbmcgYW5kIGFwcGVuZGVkXG4gIC8vIE90aGVyd2lzZSwgdGhlIGVtcHR5IHN0cmluZyBpcyBhcHBlbmRlZFxuICBhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmlzSW5saW5lKCkpIHtcbiAgICAgIHRoaXMucmVwbGFjZVN0YWNrKGN1cnJlbnQgPT4gWycgIT0gbnVsbCA/ICcsIGN1cnJlbnQsICcgOiBcIlwiJ10pO1xuXG4gICAgICB0aGlzLnB1c2hTb3VyY2UodGhpcy5hcHBlbmRUb0J1ZmZlcih0aGlzLnBvcFN0YWNrKCkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGxvY2FsID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgdGhpcy5wdXNoU291cmNlKFtcbiAgICAgICAgJ2lmICgnLFxuICAgICAgICBsb2NhbCxcbiAgICAgICAgJyAhPSBudWxsKSB7ICcsXG4gICAgICAgIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksXG4gICAgICAgICcgfSdcbiAgICAgIF0pO1xuICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQuaXNTaW1wbGUpIHtcbiAgICAgICAgdGhpcy5wdXNoU291cmNlKFtcbiAgICAgICAgICAnZWxzZSB7ICcsXG4gICAgICAgICAgdGhpcy5hcHBlbmRUb0J1ZmZlcihcIicnXCIsIHVuZGVmaW5lZCwgdHJ1ZSksXG4gICAgICAgICAgJyB9J1xuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gW2FwcGVuZEVzY2FwZWRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gRXNjYXBlIGB2YWx1ZWAgYW5kIGFwcGVuZCBpdCB0byB0aGUgYnVmZmVyXG4gIGFwcGVuZEVzY2FwZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHVzaFNvdXJjZShcbiAgICAgIHRoaXMuYXBwZW5kVG9CdWZmZXIoW1xuICAgICAgICB0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24nKSxcbiAgICAgICAgJygnLFxuICAgICAgICB0aGlzLnBvcFN0YWNrKCksXG4gICAgICAgICcpJ1xuICAgICAgXSlcbiAgICApO1xuICB9LFxuXG4gIC8vIFtnZXRDb250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy8gQ29tcGlsZXIgdmFsdWUsIGFmdGVyOiBsYXN0Q29udGV4dD1kZXB0aFxuICAvL1xuICAvLyBTZXQgdGhlIHZhbHVlIG9mIHRoZSBgbGFzdENvbnRleHRgIGNvbXBpbGVyIHZhbHVlIHRvIHRoZSBkZXB0aFxuICBnZXRDb250ZXh0OiBmdW5jdGlvbihkZXB0aCkge1xuICAgIHRoaXMubGFzdENvbnRleHQgPSBkZXB0aDtcbiAgfSxcblxuICAvLyBbcHVzaENvbnRleHRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGN1cnJlbnRDb250ZXh0LCAuLi5cbiAgLy9cbiAgLy8gUHVzaGVzIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBjb250ZXh0IG9udG8gdGhlIHN0YWNrLlxuICBwdXNoQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMuY29udGV4dE5hbWUodGhpcy5sYXN0Q29udGV4dCkpO1xuICB9LFxuXG4gIC8vIFtsb29rdXBPbkNvbnRleHRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGN1cnJlbnRDb250ZXh0W25hbWVdLCAuLi5cbiAgLy9cbiAgLy8gTG9va3MgdXAgdGhlIHZhbHVlIG9mIGBuYW1lYCBvbiB0aGUgY3VycmVudCBjb250ZXh0IGFuZCBwdXNoZXNcbiAgLy8gaXQgb250byB0aGUgc3RhY2suXG4gIGxvb2t1cE9uQ29udGV4dDogZnVuY3Rpb24ocGFydHMsIGZhbHN5LCBzdHJpY3QsIHNjb3BlZCkge1xuICAgIGxldCBpID0gMDtcblxuICAgIGlmICghc2NvcGVkICYmIHRoaXMub3B0aW9ucy5jb21wYXQgJiYgIXRoaXMubGFzdENvbnRleHQpIHtcbiAgICAgIC8vIFRoZSBkZXB0aGVkIHF1ZXJ5IGlzIGV4cGVjdGVkIHRvIGhhbmRsZSB0aGUgdW5kZWZpbmVkIGxvZ2ljIGZvciB0aGUgcm9vdCBsZXZlbCB0aGF0XG4gICAgICAvLyBpcyBpbXBsZW1lbnRlZCBiZWxvdywgc28gd2UgZXZhbHVhdGUgdGhhdCBkaXJlY3RseSBpbiBjb21wYXQgbW9kZVxuICAgICAgdGhpcy5wdXNoKHRoaXMuZGVwdGhlZExvb2t1cChwYXJ0c1tpKytdKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaENvbnRleHQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVQYXRoKCdjb250ZXh0JywgcGFydHMsIGksIGZhbHN5LCBzdHJpY3QpO1xuICB9LFxuXG4gIC8vIFtsb29rdXBCbG9ja1BhcmFtXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBibG9ja1BhcmFtW25hbWVdLCAuLi5cbiAgLy9cbiAgLy8gTG9va3MgdXAgdGhlIHZhbHVlIG9mIGBwYXJ0c2Agb24gdGhlIGdpdmVuIGJsb2NrIHBhcmFtIGFuZCBwdXNoZXNcbiAgLy8gaXQgb250byB0aGUgc3RhY2suXG4gIGxvb2t1cEJsb2NrUGFyYW06IGZ1bmN0aW9uKGJsb2NrUGFyYW1JZCwgcGFydHMpIHtcbiAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdHJ1ZTtcblxuICAgIHRoaXMucHVzaChbJ2Jsb2NrUGFyYW1zWycsIGJsb2NrUGFyYW1JZFswXSwgJ11bJywgYmxvY2tQYXJhbUlkWzFdLCAnXSddKTtcbiAgICB0aGlzLnJlc29sdmVQYXRoKCdjb250ZXh0JywgcGFydHMsIDEpO1xuICB9LFxuXG4gIC8vIFtsb29rdXBEYXRhXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBkYXRhLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCB0aGUgZGF0YSBsb29rdXAgb3BlcmF0b3JcbiAgbG9va3VwRGF0YTogZnVuY3Rpb24oZGVwdGgsIHBhcnRzLCBzdHJpY3QpIHtcbiAgICBpZiAoIWRlcHRoKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2RhdGEnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdjb250YWluZXIuZGF0YShkYXRhLCAnICsgZGVwdGggKyAnKScpO1xuICAgIH1cblxuICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2RhdGEnLCBwYXJ0cywgMCwgdHJ1ZSwgc3RyaWN0KTtcbiAgfSxcblxuICByZXNvbHZlUGF0aDogZnVuY3Rpb24odHlwZSwgcGFydHMsIGksIGZhbHN5LCBzdHJpY3QpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnN0cmljdCB8fCB0aGlzLm9wdGlvbnMuYXNzdW1lT2JqZWN0cykge1xuICAgICAgdGhpcy5wdXNoKFxuICAgICAgICBzdHJpY3RMb29rdXAodGhpcy5vcHRpb25zLnN0cmljdCAmJiBzdHJpY3QsIHRoaXMsIHBhcnRzLCBpLCB0eXBlKVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgbGVuID0gcGFydHMubGVuZ3RoO1xuICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuICAgICAgdGhpcy5yZXBsYWNlU3RhY2soY3VycmVudCA9PiB7XG4gICAgICAgIGxldCBsb29rdXAgPSB0aGlzLm5hbWVMb29rdXAoY3VycmVudCwgcGFydHNbaV0sIHR5cGUpO1xuICAgICAgICAvLyBXZSB3YW50IHRvIGVuc3VyZSB0aGF0IHplcm8gYW5kIGZhbHNlIGFyZSBoYW5kbGVkIHByb3Blcmx5IGlmIHRoZSBjb250ZXh0IChmYWxzeSBmbGFnKVxuICAgICAgICAvLyBuZWVkcyB0byBoYXZlIHRoZSBzcGVjaWFsIGhhbmRsaW5nIGZvciB0aGVzZSB2YWx1ZXMuXG4gICAgICAgIGlmICghZmFsc3kpIHtcbiAgICAgICAgICByZXR1cm4gWycgIT0gbnVsbCA/ICcsIGxvb2t1cCwgJyA6ICcsIGN1cnJlbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBjYW4gdXNlIGdlbmVyaWMgZmFsc3kgaGFuZGxpbmdcbiAgICAgICAgICByZXR1cm4gWycgJiYgJywgbG9va3VwXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuICAgIH1cbiAgfSxcblxuICAvLyBbcmVzb2x2ZVBvc3NpYmxlTGFtYmRhXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzb2x2ZWQgdmFsdWUsIC4uLlxuICAvL1xuICAvLyBJZiB0aGUgYHZhbHVlYCBpcyBhIGxhbWJkYSwgcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgYnlcbiAgLy8gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbGFtYmRhXG4gIHJlc29sdmVQb3NzaWJsZUxhbWJkYTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoKFtcbiAgICAgIHRoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubGFtYmRhJyksXG4gICAgICAnKCcsXG4gICAgICB0aGlzLnBvcFN0YWNrKCksXG4gICAgICAnLCAnLFxuICAgICAgdGhpcy5jb250ZXh0TmFtZSgwKSxcbiAgICAgICcpJ1xuICAgIF0pO1xuICB9LFxuXG4gIC8vIFtwdXNoU3RyaW5nUGFyYW1dXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHN0cmluZywgY3VycmVudENvbnRleHQsIC4uLlxuICAvL1xuICAvLyBUaGlzIG9wY29kZSBpcyBkZXNpZ25lZCBmb3IgdXNlIGluIHN0cmluZyBtb2RlLCB3aGljaFxuICAvLyBwcm92aWRlcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGEgcGFyYW1ldGVyIGFsb25nIHdpdGggaXRzXG4gIC8vIGRlcHRoIHJhdGhlciB0aGFuIHJlc29sdmluZyBpdCBpbW1lZGlhdGVseS5cbiAgcHVzaFN0cmluZ1BhcmFtOiBmdW5jdGlvbihzdHJpbmcsIHR5cGUpIHtcbiAgICB0aGlzLnB1c2hDb250ZXh0KCk7XG4gICAgdGhpcy5wdXNoU3RyaW5nKHR5cGUpO1xuXG4gICAgLy8gSWYgaXQncyBhIHN1YmV4cHJlc3Npb24sIHRoZSBzdHJpbmcgcmVzdWx0XG4gICAgLy8gd2lsbCBiZSBwdXNoZWQgYWZ0ZXIgdGhpcyBvcGNvZGUuXG4gICAgaWYgKHR5cGUgIT09ICdTdWJFeHByZXNzaW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucHVzaFN0cmluZyhzdHJpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGVtcHR5SGFzaDogZnVuY3Rpb24ob21pdEVtcHR5KSB7XG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaElkc1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaENvbnRleHRzXG4gICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hUeXBlc1xuICAgIH1cbiAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwob21pdEVtcHR5ID8gJ3VuZGVmaW5lZCcgOiAne30nKTtcbiAgfSxcbiAgcHVzaEhhc2g6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmhhc2gpIHtcbiAgICAgIHRoaXMuaGFzaGVzLnB1c2godGhpcy5oYXNoKTtcbiAgICB9XG4gICAgdGhpcy5oYXNoID0geyB2YWx1ZXM6IHt9LCB0eXBlczogW10sIGNvbnRleHRzOiBbXSwgaWRzOiBbXSB9O1xuICB9LFxuICBwb3BIYXNoOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgaGFzaCA9IHRoaXMuaGFzaDtcbiAgICB0aGlzLmhhc2ggPSB0aGlzLmhhc2hlcy5wb3AoKTtcblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guaWRzKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmNvbnRleHRzKSk7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudHlwZXMpKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudmFsdWVzKSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmddXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHF1b3RlZFN0cmluZyhzdHJpbmcpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHF1b3RlZCB2ZXJzaW9uIG9mIGBzdHJpbmdgIG9udG8gdGhlIHN0YWNrXG4gIHB1c2hTdHJpbmc6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLnF1b3RlZFN0cmluZyhzdHJpbmcpKTtcbiAgfSxcblxuICAvLyBbcHVzaExpdGVyYWxdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHZhbHVlLCAuLi5cbiAgLy9cbiAgLy8gUHVzaGVzIGEgdmFsdWUgb250byB0aGUgc3RhY2suIFRoaXMgb3BlcmF0aW9uIHByZXZlbnRzXG4gIC8vIHRoZSBjb21waWxlciBmcm9tIGNyZWF0aW5nIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIGhvbGRcbiAgLy8gaXQuXG4gIHB1c2hMaXRlcmFsOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh2YWx1ZSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hQcm9ncmFtXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBwcm9ncmFtKGd1aWQpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHByb2dyYW0gZXhwcmVzc2lvbiBvbnRvIHRoZSBzdGFjay4gVGhpcyB0YWtlc1xuICAvLyBhIGNvbXBpbGUtdGltZSBndWlkIGFuZCBjb252ZXJ0cyBpdCBpbnRvIGEgcnVudGltZS1hY2Nlc3NpYmxlXG4gIC8vIGV4cHJlc3Npb24uXG4gIHB1c2hQcm9ncmFtOiBmdW5jdGlvbihndWlkKSB7XG4gICAgaWYgKGd1aWQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwobnVsbCk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFtyZWdpc3RlckRlY29yYXRvcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gUG9wcyBvZmYgdGhlIGRlY29yYXRvcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGRlY29yYXRvcixcbiAgLy8gYW5kIGluc2VydHMgdGhlIGRlY29yYXRvciBpbnRvIHRoZSBkZWNvcmF0b3JzIGxpc3QuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIGxldCBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcbiAgICAgIG9wdGlvbnMgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUpO1xuXG4gICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goW1xuICAgICAgJ2ZuID0gJyxcbiAgICAgIHRoaXMuZGVjb3JhdG9ycy5mdW5jdGlvbkNhbGwoZm91bmREZWNvcmF0b3IsICcnLCBbXG4gICAgICAgICdmbicsXG4gICAgICAgICdwcm9wcycsXG4gICAgICAgICdjb250YWluZXInLFxuICAgICAgICBvcHRpb25zXG4gICAgICBdKSxcbiAgICAgICcgfHwgZm47J1xuICAgIF0pO1xuICB9LFxuXG4gIC8vIFtpbnZva2VIZWxwZXJdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXG4gIC8vXG4gIC8vIFBvcHMgb2ZmIHRoZSBoZWxwZXIncyBwYXJhbWV0ZXJzLCBpbnZva2VzIHRoZSBoZWxwZXIsXG4gIC8vIGFuZCBwdXNoZXMgdGhlIGhlbHBlcidzIHJldHVybiB2YWx1ZSBvbnRvIHRoZSBzdGFjay5cbiAgLy9cbiAgLy8gSWYgdGhlIGhlbHBlciBpcyBub3QgZm91bmQsIGBoZWxwZXJNaXNzaW5nYCBpcyBjYWxsZWQuXG4gIGludm9rZUhlbHBlcjogZnVuY3Rpb24ocGFyYW1TaXplLCBuYW1lLCBpc1NpbXBsZSkge1xuICAgIGxldCBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCksXG4gICAgICBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSk7XG5cbiAgICBsZXQgcG9zc2libGVGdW5jdGlvbkNhbGxzID0gW107XG5cbiAgICBpZiAoaXNTaW1wbGUpIHtcbiAgICAgIC8vIGRpcmVjdCBjYWxsIHRvIGhlbHBlclxuICAgICAgcG9zc2libGVGdW5jdGlvbkNhbGxzLnB1c2goaGVscGVyLm5hbWUpO1xuICAgIH1cbiAgICAvLyBjYWxsIGEgZnVuY3Rpb24gZnJvbSB0aGUgaW5wdXQgb2JqZWN0XG4gICAgcG9zc2libGVGdW5jdGlvbkNhbGxzLnB1c2gobm9uSGVscGVyKTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgIHBvc3NpYmxlRnVuY3Rpb25DYWxscy5wdXNoKFxuICAgICAgICB0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcnKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgZnVuY3Rpb25Mb29rdXBDb2RlID0gW1xuICAgICAgJygnLFxuICAgICAgdGhpcy5pdGVtc1NlcGFyYXRlZEJ5KHBvc3NpYmxlRnVuY3Rpb25DYWxscywgJ3x8JyksXG4gICAgICAnKSdcbiAgICBdO1xuICAgIGxldCBmdW5jdGlvbkNhbGwgPSB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoXG4gICAgICBmdW5jdGlvbkxvb2t1cENvZGUsXG4gICAgICAnY2FsbCcsXG4gICAgICBoZWxwZXIuY2FsbFBhcmFtc1xuICAgICk7XG4gICAgdGhpcy5wdXNoKGZ1bmN0aW9uQ2FsbCk7XG4gIH0sXG5cbiAgaXRlbXNTZXBhcmF0ZWRCeTogZnVuY3Rpb24oaXRlbXMsIHNlcGFyYXRvcikge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQucHVzaChpdGVtc1swXSk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0LnB1c2goc2VwYXJhdG9yLCBpdGVtc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIC8vIFtpbnZva2VLbm93bkhlbHBlcl1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgaGVscGVyIGludm9jYXRpb25cbiAgLy9cbiAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIHRoZSBoZWxwZXIgaXMga25vd24gdG8gZXhpc3QsXG4gIC8vIHNvIGEgYGhlbHBlck1pc3NpbmdgIGZhbGxiYWNrIGlzIG5vdCByZXF1aXJlZC5cbiAgaW52b2tlS25vd25IZWxwZXI6IGZ1bmN0aW9uKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIGxldCBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSk7XG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChoZWxwZXIubmFtZSwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFtpbnZva2VBbWJpZ3VvdXNdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGRpc2FtYmlndWF0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiBhbiBleHByZXNzaW9uIGxpa2UgYHt7Zm9vfX1gXG4gIC8vIGlzIHByb3ZpZGVkLCBidXQgd2UgZG9uJ3Qga25vdyBhdCBjb21waWxlLXRpbWUgd2hldGhlciBpdFxuICAvLyBpcyBhIGhlbHBlciBvciBhIHBhdGguXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGVtaXRzIG1vcmUgY29kZSB0aGFuIHRoZSBvdGhlciBvcHRpb25zLFxuICAvLyBhbmQgY2FuIGJlIGF2b2lkZWQgYnkgcGFzc2luZyB0aGUgYGtub3duSGVscGVyc2AgYW5kXG4gIC8vIGBrbm93bkhlbHBlcnNPbmx5YCBmbGFncyBhdCBjb21waWxlLXRpbWUuXG4gIGludm9rZUFtYmlndW91czogZnVuY3Rpb24obmFtZSwgaGVscGVyQ2FsbCkge1xuICAgIHRoaXMudXNlUmVnaXN0ZXIoJ2hlbHBlcicpO1xuXG4gICAgbGV0IG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKTtcblxuICAgIHRoaXMuZW1wdHlIYXNoKCk7XG4gICAgbGV0IGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIoMCwgbmFtZSwgaGVscGVyQ2FsbCk7XG5cbiAgICBsZXQgaGVscGVyTmFtZSA9ICh0aGlzLmxhc3RIZWxwZXIgPSB0aGlzLm5hbWVMb29rdXAoXG4gICAgICAnaGVscGVycycsXG4gICAgICBuYW1lLFxuICAgICAgJ2hlbHBlcidcbiAgICApKTtcblxuICAgIGxldCBsb29rdXAgPSBbJygnLCAnKGhlbHBlciA9ICcsIGhlbHBlck5hbWUsICcgfHwgJywgbm9uSGVscGVyLCAnKSddO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkge1xuICAgICAgbG9va3VwWzBdID0gJyhoZWxwZXIgPSAnO1xuICAgICAgbG9va3VwLnB1c2goXG4gICAgICAgICcgIT0gbnVsbCA/IGhlbHBlciA6ICcsXG4gICAgICAgIHRoaXMuYWxpYXNhYmxlKCdjb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZycpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMucHVzaChbXG4gICAgICAnKCcsXG4gICAgICBsb29rdXAsXG4gICAgICBoZWxwZXIucGFyYW1zSW5pdCA/IFsnKSwoJywgaGVscGVyLnBhcmFtc0luaXRdIDogW10sXG4gICAgICAnKSwnLFxuICAgICAgJyh0eXBlb2YgaGVscGVyID09PSAnLFxuICAgICAgdGhpcy5hbGlhc2FibGUoJ1wiZnVuY3Rpb25cIicpLFxuICAgICAgJyA/ICcsXG4gICAgICB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoJ2hlbHBlcicsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpLFxuICAgICAgJyA6IGhlbHBlcikpJ1xuICAgIF0pO1xuICB9LFxuXG4gIC8vIFtpbnZva2VQYXJ0aWFsXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBjb250ZXh0LCAuLi5cbiAgLy8gT24gc3RhY2sgYWZ0ZXI6IHJlc3VsdCBvZiBwYXJ0aWFsIGludm9jYXRpb25cbiAgLy9cbiAgLy8gVGhpcyBvcGVyYXRpb24gcG9wcyBvZmYgYSBjb250ZXh0LCBpbnZva2VzIGEgcGFydGlhbCB3aXRoIHRoYXQgY29udGV4dCxcbiAgLy8gYW5kIHB1c2hlcyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZvY2F0aW9uIGJhY2suXG4gIGludm9rZVBhcnRpYWw6IGZ1bmN0aW9uKGlzRHluYW1pYywgbmFtZSwgaW5kZW50KSB7XG4gICAgbGV0IHBhcmFtcyA9IFtdLFxuICAgICAgb3B0aW9ucyA9IHRoaXMuc2V0dXBQYXJhbXMobmFtZSwgMSwgcGFyYW1zKTtcblxuICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBkZWxldGUgb3B0aW9ucy5uYW1lO1xuICAgIH1cblxuICAgIGlmIChpbmRlbnQpIHtcbiAgICAgIG9wdGlvbnMuaW5kZW50ID0gSlNPTi5zdHJpbmdpZnkoaW5kZW50KTtcbiAgICB9XG4gICAgb3B0aW9ucy5oZWxwZXJzID0gJ2hlbHBlcnMnO1xuICAgIG9wdGlvbnMucGFydGlhbHMgPSAncGFydGlhbHMnO1xuICAgIG9wdGlvbnMuZGVjb3JhdG9ycyA9ICdjb250YWluZXIuZGVjb3JhdG9ycyc7XG5cbiAgICBpZiAoIWlzRHluYW1pYykge1xuICAgICAgcGFyYW1zLnVuc2hpZnQodGhpcy5uYW1lTG9va3VwKCdwYXJ0aWFscycsIG5hbWUsICdwYXJ0aWFsJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMudW5zaGlmdChuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdCkge1xuICAgICAgb3B0aW9ucy5kZXB0aHMgPSAnZGVwdGhzJztcbiAgICB9XG4gICAgb3B0aW9ucyA9IHRoaXMub2JqZWN0TGl0ZXJhbChvcHRpb25zKTtcbiAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcblxuICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoJ2NvbnRhaW5lci5pbnZva2VQYXJ0aWFsJywgJycsIHBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFthc3NpZ25Ub0hhc2hdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi4sIGhhc2gsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLiwgaGFzaCwgLi4uXG4gIC8vXG4gIC8vIFBvcHMgYSB2YWx1ZSBvZmYgdGhlIHN0YWNrIGFuZCBhc3NpZ25zIGl0IHRvIHRoZSBjdXJyZW50IGhhc2hcbiAgYXNzaWduVG9IYXNoOiBmdW5jdGlvbihrZXkpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnBvcFN0YWNrKCksXG4gICAgICBjb250ZXh0LFxuICAgICAgdHlwZSxcbiAgICAgIGlkO1xuXG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIGlkID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIHR5cGUgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBjb250ZXh0ID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cblxuICAgIGxldCBoYXNoID0gdGhpcy5oYXNoO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBoYXNoLmNvbnRleHRzW2tleV0gPSBjb250ZXh0O1xuICAgIH1cbiAgICBpZiAodHlwZSkge1xuICAgICAgaGFzaC50eXBlc1trZXldID0gdHlwZTtcbiAgICB9XG4gICAgaWYgKGlkKSB7XG4gICAgICBoYXNoLmlkc1trZXldID0gaWQ7XG4gICAgfVxuICAgIGhhc2gudmFsdWVzW2tleV0gPSB2YWx1ZTtcbiAgfSxcblxuICBwdXNoSWQ6IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIGNoaWxkKSB7XG4gICAgaWYgKHR5cGUgPT09ICdCbG9ja1BhcmFtJykge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKFxuICAgICAgICAnYmxvY2tQYXJhbXNbJyArXG4gICAgICAgICAgbmFtZVswXSArXG4gICAgICAgICAgJ10ucGF0aFsnICtcbiAgICAgICAgICBuYW1lWzFdICtcbiAgICAgICAgICAnXScgK1xuICAgICAgICAgIChjaGlsZCA/ICcgKyAnICsgSlNPTi5zdHJpbmdpZnkoJy4nICsgY2hpbGQpIDogJycpXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1BhdGhFeHByZXNzaW9uJykge1xuICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdudWxsJyk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhFTFBFUlNcblxuICBjb21waWxlcjogSmF2YVNjcmlwdENvbXBpbGVyLFxuXG4gIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24oZW52aXJvbm1lbnQsIG9wdGlvbnMpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBlbnZpcm9ubWVudC5jaGlsZHJlbixcbiAgICAgIGNoaWxkLFxuICAgICAgY29tcGlsZXI7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGNvbXBpbGVyID0gbmV3IHRoaXMuY29tcGlsZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG5cbiAgICAgIGxldCBleGlzdGluZyA9IHRoaXMubWF0Y2hFeGlzdGluZ1Byb2dyYW0oY2hpbGQpO1xuXG4gICAgICBpZiAoZXhpc3RpbmcgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNvbnRleHQucHJvZ3JhbXMucHVzaCgnJyk7IC8vIFBsYWNlaG9sZGVyIHRvIHByZXZlbnQgbmFtZSBjb25mbGljdHMgZm9yIG5lc3RlZCBjaGlsZHJlblxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmNvbnRleHQucHJvZ3JhbXMubGVuZ3RoO1xuICAgICAgICBjaGlsZC5pbmRleCA9IGluZGV4O1xuICAgICAgICBjaGlsZC5uYW1lID0gJ3Byb2dyYW0nICsgaW5kZXg7XG4gICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtc1tpbmRleF0gPSBjb21waWxlci5jb21waWxlKFxuICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICAgICF0aGlzLnByZWNvbXBpbGVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LmRlY29yYXRvcnNbaW5kZXhdID0gY29tcGlsZXIuZGVjb3JhdG9ycztcbiAgICAgICAgdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpbmRleF0gPSBjaGlsZDtcblxuICAgICAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IGNvbXBpbGVyLnVzZURlcHRocztcbiAgICAgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgY29tcGlsZXIudXNlQmxvY2tQYXJhbXM7XG4gICAgICAgIGNoaWxkLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzO1xuICAgICAgICBjaGlsZC51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZC5pbmRleCA9IGV4aXN0aW5nLmluZGV4O1xuICAgICAgICBjaGlsZC5uYW1lID0gJ3Byb2dyYW0nICsgZXhpc3RpbmcuaW5kZXg7XG5cbiAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBleGlzdGluZy51c2VEZXB0aHM7XG4gICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGV4aXN0aW5nLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWF0Y2hFeGlzdGluZ1Byb2dyYW06IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxldCBlbnZpcm9ubWVudCA9IHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHNbaV07XG4gICAgICBpZiAoZW52aXJvbm1lbnQgJiYgZW52aXJvbm1lbnQuZXF1YWxzKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gZW52aXJvbm1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHByb2dyYW1FeHByZXNzaW9uOiBmdW5jdGlvbihndWlkKSB7XG4gICAgbGV0IGNoaWxkID0gdGhpcy5lbnZpcm9ubWVudC5jaGlsZHJlbltndWlkXSxcbiAgICAgIHByb2dyYW1QYXJhbXMgPSBbY2hpbGQuaW5kZXgsICdkYXRhJywgY2hpbGQuYmxvY2tQYXJhbXNdO1xuXG4gICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgdGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnYmxvY2tQYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwcm9ncmFtUGFyYW1zLnB1c2goJ2RlcHRocycpO1xuICAgIH1cblxuICAgIHJldHVybiAnY29udGFpbmVyLnByb2dyYW0oJyArIHByb2dyYW1QYXJhbXMuam9pbignLCAnKSArICcpJztcbiAgfSxcblxuICB1c2VSZWdpc3RlcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghdGhpcy5yZWdpc3RlcnNbbmFtZV0pIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVnaXN0ZXJzLmxpc3QucHVzaChuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgcHVzaDogZnVuY3Rpb24oZXhwcikge1xuICAgIGlmICghKGV4cHIgaW5zdGFuY2VvZiBMaXRlcmFsKSkge1xuICAgICAgZXhwciA9IHRoaXMuc291cmNlLndyYXAoZXhwcik7XG4gICAgfVxuXG4gICAgdGhpcy5pbmxpbmVTdGFjay5wdXNoKGV4cHIpO1xuICAgIHJldHVybiBleHByO1xuICB9LFxuXG4gIHB1c2hTdGFja0xpdGVyYWw6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLnB1c2gobmV3IExpdGVyYWwoaXRlbSkpO1xuICB9LFxuXG4gIHB1c2hTb3VyY2U6IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7XG4gICAgICB0aGlzLnNvdXJjZS5wdXNoKFxuICAgICAgICB0aGlzLmFwcGVuZFRvQnVmZmVyKFxuICAgICAgICAgIHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyh0aGlzLnBlbmRpbmdDb250ZW50KSxcbiAgICAgICAgICB0aGlzLnBlbmRpbmdMb2NhdGlvblxuICAgICAgICApXG4gICAgICApO1xuICAgICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICB0aGlzLnNvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICB9LFxuXG4gIHJlcGxhY2VTdGFjazogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBsZXQgcHJlZml4ID0gWycoJ10sXG4gICAgICBzdGFjayxcbiAgICAgIGNyZWF0ZWRTdGFjayxcbiAgICAgIHVzZWRMaXRlcmFsO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoIXRoaXMuaXNJbmxpbmUoKSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigncmVwbGFjZVN0YWNrIG9uIG5vbi1pbmxpbmUnKTtcbiAgICB9XG5cbiAgICAvLyBXZSB3YW50IHRvIG1lcmdlIHRoZSBpbmxpbmUgc3RhdGVtZW50IGludG8gdGhlIHJlcGxhY2VtZW50IHN0YXRlbWVudCB2aWEgJywnXG4gICAgbGV0IHRvcCA9IHRoaXMucG9wU3RhY2sodHJ1ZSk7XG5cbiAgICBpZiAodG9wIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgLy8gTGl0ZXJhbHMgZG8gbm90IG5lZWQgdG8gYmUgaW5saW5lZFxuICAgICAgc3RhY2sgPSBbdG9wLnZhbHVlXTtcbiAgICAgIHByZWZpeCA9IFsnKCcsIHN0YWNrXTtcbiAgICAgIHVzZWRMaXRlcmFsID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgY3VycmVudCBzdGFjayBuYW1lIGZvciB1c2UgYnkgdGhlIGlubGluZVxuICAgICAgY3JlYXRlZFN0YWNrID0gdHJ1ZTtcbiAgICAgIGxldCBuYW1lID0gdGhpcy5pbmNyU3RhY2soKTtcblxuICAgICAgcHJlZml4ID0gWycoKCcsIHRoaXMucHVzaChuYW1lKSwgJyA9ICcsIHRvcCwgJyknXTtcbiAgICAgIHN0YWNrID0gdGhpcy50b3BTdGFjaygpO1xuICAgIH1cblxuICAgIGxldCBpdGVtID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdGFjayk7XG5cbiAgICBpZiAoIXVzZWRMaXRlcmFsKSB7XG4gICAgICB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuICAgIGlmIChjcmVhdGVkU3RhY2spIHtcbiAgICAgIHRoaXMuc3RhY2tTbG90LS07XG4gICAgfVxuICAgIHRoaXMucHVzaChwcmVmaXguY29uY2F0KGl0ZW0sICcpJykpO1xuICB9LFxuXG4gIGluY3JTdGFjazogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdGFja1Nsb3QrKztcbiAgICBpZiAodGhpcy5zdGFja1Nsb3QgPiB0aGlzLnN0YWNrVmFycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc3RhY2tWYXJzLnB1c2goJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9wU3RhY2tOYW1lKCk7XG4gIH0sXG4gIHRvcFN0YWNrTmFtZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdzdGFjaycgKyB0aGlzLnN0YWNrU2xvdDtcbiAgfSxcbiAgZmx1c2hJbmxpbmU6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBpbmxpbmVTdGFjayA9IHRoaXMuaW5saW5lU3RhY2s7XG4gICAgdGhpcy5pbmxpbmVTdGFjayA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbmxpbmVTdGFjay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGV0IGVudHJ5ID0gaW5saW5lU3RhY2tbaV07XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChlbnRyeSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChlbnRyeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgc3RhY2sgPSB0aGlzLmluY3JTdGFjaygpO1xuICAgICAgICB0aGlzLnB1c2hTb3VyY2UoW3N0YWNrLCAnID0gJywgZW50cnksICc7J10pO1xuICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKHN0YWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGlzSW5saW5lOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbmxpbmVTdGFjay5sZW5ndGg7XG4gIH0sXG5cbiAgcG9wU3RhY2s6IGZ1bmN0aW9uKHdyYXBwZWQpIHtcbiAgICBsZXQgaW5saW5lID0gdGhpcy5pc0lubGluZSgpLFxuICAgICAgaXRlbSA9IChpbmxpbmUgPyB0aGlzLmlubGluZVN0YWNrIDogdGhpcy5jb21waWxlU3RhY2spLnBvcCgpO1xuXG4gICAgaWYgKCF3cmFwcGVkICYmIGl0ZW0gaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpbmxpbmUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgaWYgKCF0aGlzLnN0YWNrU2xvdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0ludmFsaWQgc3RhY2sgcG9wJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFja1Nsb3QtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSxcblxuICB0b3BTdGFjazogZnVuY3Rpb24oKSB7XG4gICAgbGV0IHN0YWNrID0gdGhpcy5pc0lubGluZSgpID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrLFxuICAgICAgaXRlbSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9LFxuXG4gIGNvbnRleHROYW1lOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgaWYgKHRoaXMudXNlRGVwdGhzICYmIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiAnZGVwdGhzWycgKyBjb250ZXh0ICsgJ10nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2RlcHRoJyArIGNvbnRleHQ7XG4gICAgfVxuICB9LFxuXG4gIHF1b3RlZFN0cmluZzogZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyhzdHIpO1xuICB9LFxuXG4gIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5vYmplY3RMaXRlcmFsKG9iaik7XG4gIH0sXG5cbiAgYWxpYXNhYmxlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgbGV0IHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXTtcbiAgICBpZiAocmV0KSB7XG4gICAgICByZXQucmVmZXJlbmNlQ291bnQrKztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgcmV0ID0gdGhpcy5hbGlhc2VzW25hbWVdID0gdGhpcy5zb3VyY2Uud3JhcChuYW1lKTtcbiAgICByZXQuYWxpYXNhYmxlID0gdHJ1ZTtcbiAgICByZXQucmVmZXJlbmNlQ291bnQgPSAxO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBzZXR1cEhlbHBlcjogZnVuY3Rpb24ocGFyYW1TaXplLCBuYW1lLCBibG9ja0hlbHBlcikge1xuICAgIGxldCBwYXJhbXMgPSBbXSxcbiAgICAgIHBhcmFtc0luaXQgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUsIHBhcmFtcywgYmxvY2tIZWxwZXIpO1xuICAgIGxldCBmb3VuZEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKSxcbiAgICAgIGNhbGxDb250ZXh0ID0gdGhpcy5hbGlhc2FibGUoXG4gICAgICAgIGAke3RoaXMuY29udGV4dE5hbWUoMCl9ICE9IG51bGwgPyAke3RoaXMuY29udGV4dE5hbWUoXG4gICAgICAgICAgMFxuICAgICAgICApfSA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pYFxuICAgICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIHBhcmFtc0luaXQ6IHBhcmFtc0luaXQsXG4gICAgICBuYW1lOiBmb3VuZEhlbHBlcixcbiAgICAgIGNhbGxQYXJhbXM6IFtjYWxsQ29udGV4dF0uY29uY2F0KHBhcmFtcylcbiAgICB9O1xuICB9LFxuXG4gIHNldHVwUGFyYW1zOiBmdW5jdGlvbihoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB7fSxcbiAgICAgIGNvbnRleHRzID0gW10sXG4gICAgICB0eXBlcyA9IFtdLFxuICAgICAgaWRzID0gW10sXG4gICAgICBvYmplY3RBcmdzID0gIXBhcmFtcyxcbiAgICAgIHBhcmFtO1xuXG4gICAgaWYgKG9iamVjdEFyZ3MpIHtcbiAgICAgIHBhcmFtcyA9IFtdO1xuICAgIH1cblxuICAgIG9wdGlvbnMubmFtZSA9IHRoaXMucXVvdGVkU3RyaW5nKGhlbHBlcik7XG4gICAgb3B0aW9ucy5oYXNoID0gdGhpcy5wb3BTdGFjaygpO1xuXG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIG9wdGlvbnMuaGFzaElkcyA9IHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLmhhc2hUeXBlcyA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIG9wdGlvbnMuaGFzaENvbnRleHRzID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cblxuICAgIGxldCBpbnZlcnNlID0gdGhpcy5wb3BTdGFjaygpLFxuICAgICAgcHJvZ3JhbSA9IHRoaXMucG9wU3RhY2soKTtcblxuICAgIC8vIEF2b2lkIHNldHRpbmcgZm4gYW5kIGludmVyc2UgaWYgbmVpdGhlciBhcmUgc2V0LiBUaGlzIGFsbG93c1xuICAgIC8vIGhlbHBlcnMgdG8gZG8gYSBjaGVjayBmb3IgYGlmIChvcHRpb25zLmZuKWBcbiAgICBpZiAocHJvZ3JhbSB8fCBpbnZlcnNlKSB7XG4gICAgICBvcHRpb25zLmZuID0gcHJvZ3JhbSB8fCAnY29udGFpbmVyLm5vb3AnO1xuICAgICAgb3B0aW9ucy5pbnZlcnNlID0gaW52ZXJzZSB8fCAnY29udGFpbmVyLm5vb3AnO1xuICAgIH1cblxuICAgIC8vIFRoZSBwYXJhbWV0ZXJzIGdvIG9uIHRvIHRoZSBzdGFjayBpbiBvcmRlciAobWFraW5nIHN1cmUgdGhhdCB0aGV5IGFyZSBldmFsdWF0ZWQgaW4gb3JkZXIpXG4gICAgLy8gc28gd2UgbmVlZCB0byBwb3AgdGhlbSBvZmYgdGhlIHN0YWNrIGluIHJldmVyc2Ugb3JkZXJcbiAgICBsZXQgaSA9IHBhcmFtU2l6ZTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwYXJhbSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIHBhcmFtc1tpXSA9IHBhcmFtO1xuXG4gICAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgICBpZHNbaV0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgICAgdHlwZXNbaV0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICAgIGNvbnRleHRzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvYmplY3RBcmdzKSB7XG4gICAgICBvcHRpb25zLmFyZ3MgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KHBhcmFtcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIG9wdGlvbnMuaWRzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShpZHMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIG9wdGlvbnMudHlwZXMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KHR5cGVzKTtcbiAgICAgIG9wdGlvbnMuY29udGV4dHMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KGNvbnRleHRzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHtcbiAgICAgIG9wdGlvbnMuZGF0YSA9ICdkYXRhJztcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHtcbiAgICAgIG9wdGlvbnMuYmxvY2tQYXJhbXMgPSAnYmxvY2tQYXJhbXMnO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfSxcblxuICBzZXR1cEhlbHBlckFyZ3M6IGZ1bmN0aW9uKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMsIHVzZVJlZ2lzdGVyKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLnNldHVwUGFyYW1zKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpO1xuICAgIG9wdGlvbnMubG9jID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uKTtcbiAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuICAgIGlmICh1c2VSZWdpc3Rlcikge1xuICAgICAgdGhpcy51c2VSZWdpc3Rlcignb3B0aW9ucycpO1xuICAgICAgcGFyYW1zLnB1c2goJ29wdGlvbnMnKTtcbiAgICAgIHJldHVybiBbJ29wdGlvbnM9Jywgb3B0aW9uc107XG4gICAgfSBlbHNlIGlmIChwYXJhbXMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gIH1cbn07XG5cbihmdW5jdGlvbigpIHtcbiAgY29uc3QgcmVzZXJ2ZWRXb3JkcyA9IChcbiAgICAnYnJlYWsgZWxzZSBuZXcgdmFyJyArXG4gICAgJyBjYXNlIGZpbmFsbHkgcmV0dXJuIHZvaWQnICtcbiAgICAnIGNhdGNoIGZvciBzd2l0Y2ggd2hpbGUnICtcbiAgICAnIGNvbnRpbnVlIGZ1bmN0aW9uIHRoaXMgd2l0aCcgK1xuICAgICcgZGVmYXVsdCBpZiB0aHJvdycgK1xuICAgICcgZGVsZXRlIGluIHRyeScgK1xuICAgICcgZG8gaW5zdGFuY2VvZiB0eXBlb2YnICtcbiAgICAnIGFic3RyYWN0IGVudW0gaW50IHNob3J0JyArXG4gICAgJyBib29sZWFuIGV4cG9ydCBpbnRlcmZhY2Ugc3RhdGljJyArXG4gICAgJyBieXRlIGV4dGVuZHMgbG9uZyBzdXBlcicgK1xuICAgICcgY2hhciBmaW5hbCBuYXRpdmUgc3luY2hyb25pemVkJyArXG4gICAgJyBjbGFzcyBmbG9hdCBwYWNrYWdlIHRocm93cycgK1xuICAgICcgY29uc3QgZ290byBwcml2YXRlIHRyYW5zaWVudCcgK1xuICAgICcgZGVidWdnZXIgaW1wbGVtZW50cyBwcm90ZWN0ZWQgdm9sYXRpbGUnICtcbiAgICAnIGRvdWJsZSBpbXBvcnQgcHVibGljIGxldCB5aWVsZCBhd2FpdCcgK1xuICAgICcgbnVsbCB0cnVlIGZhbHNlJ1xuICApLnNwbGl0KCcgJyk7XG5cbiAgY29uc3QgY29tcGlsZXJXb3JkcyA9IChKYXZhU2NyaXB0Q29tcGlsZXIuUkVTRVJWRURfV09SRFMgPSB7fSk7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSByZXNlcnZlZFdvcmRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbXBpbGVyV29yZHNbcmVzZXJ2ZWRXb3Jkc1tpXV0gPSB0cnVlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIE1heSBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cbiAqL1xuSmF2YVNjcmlwdENvbXBpbGVyLmlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gKFxuICAgICFKYXZhU2NyaXB0Q29tcGlsZXIuUkVTRVJWRURfV09SRFNbbmFtZV0gJiZcbiAgICAvXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvLnRlc3QobmFtZSlcbiAgKTtcbn07XG5cbmZ1bmN0aW9uIHN0cmljdExvb2t1cChyZXF1aXJlVGVybWluYWwsIGNvbXBpbGVyLCBwYXJ0cywgaSwgdHlwZSkge1xuICBsZXQgc3RhY2sgPSBjb21waWxlci5wb3BTdGFjaygpLFxuICAgIGxlbiA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHJlcXVpcmVUZXJtaW5hbCkge1xuICAgIGxlbi0tO1xuICB9XG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHN0YWNrID0gY29tcGlsZXIubmFtZUxvb2t1cChzdGFjaywgcGFydHNbaV0sIHR5cGUpO1xuICB9XG5cbiAgaWYgKHJlcXVpcmVUZXJtaW5hbCkge1xuICAgIHJldHVybiBbXG4gICAgICBjb21waWxlci5hbGlhc2FibGUoJ2NvbnRhaW5lci5zdHJpY3QnKSxcbiAgICAgICcoJyxcbiAgICAgIHN0YWNrLFxuICAgICAgJywgJyxcbiAgICAgIGNvbXBpbGVyLnF1b3RlZFN0cmluZyhwYXJ0c1tpXSksXG4gICAgICAnLCAnLFxuICAgICAgSlNPTi5zdHJpbmdpZnkoY29tcGlsZXIuc291cmNlLmN1cnJlbnRMb2NhdGlvbiksXG4gICAgICAnICknXG4gICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSmF2YVNjcmlwdENvbXBpbGVyO1xuIiwgImltcG9ydCBydW50aW1lIGZyb20gJy4vaGFuZGxlYmFycy5ydW50aW1lJztcblxuLy8gQ29tcGlsZXIgaW1wb3J0c1xuaW1wb3J0IEFTVCBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0JztcbmltcG9ydCB7XG4gIHBhcnNlciBhcyBQYXJzZXIsXG4gIHBhcnNlLFxuICBwYXJzZVdpdGhvdXRQcm9jZXNzaW5nXG59IGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9iYXNlJztcbmltcG9ydCB7IENvbXBpbGVyLCBjb21waWxlLCBwcmVjb21waWxlIH0gZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvbXBpbGVyJztcbmltcG9ydCBKYXZhU2NyaXB0Q29tcGlsZXIgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2phdmFzY3JpcHQtY29tcGlsZXInO1xuaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL3Zpc2l0b3InO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG5sZXQgX2NyZWF0ZSA9IHJ1bnRpbWUuY3JlYXRlO1xuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBfY3JlYXRlKCk7XG5cbiAgaGIuY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcbiAgaGIucHJlY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcblxuICBoYi5BU1QgPSBBU1Q7XG4gIGhiLkNvbXBpbGVyID0gQ29tcGlsZXI7XG4gIGhiLkphdmFTY3JpcHRDb21waWxlciA9IEphdmFTY3JpcHRDb21waWxlcjtcbiAgaGIuUGFyc2VyID0gUGFyc2VyO1xuICBoYi5wYXJzZSA9IHBhcnNlO1xuICBoYi5wYXJzZVdpdGhvdXRQcm9jZXNzaW5nID0gcGFyc2VXaXRob3V0UHJvY2Vzc2luZztcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdC5WaXNpdG9yID0gVmlzaXRvcjtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBEaXNwbGF5cyBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgdGhlIHNvdXJjZSBvZlxuICogdGhlIGZvcm1hdCB3aGVuIGl0IGlzIGludmFsaWQuXG4gKi9cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBlKSB7IGlmIChlICYmIChcIm9iamVjdFwiID09IF90eXBlb2YoZSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7IGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkgeyBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHModCwgZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlICYmIG51bGwgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGUgJiYgZS5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHQsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGUgJiYgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKHQpIHsgdmFyIHIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIE1hcCA/IG5ldyBNYXAoKSA6IHZvaWQgMDsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKHQpIHsgaWYgKG51bGwgPT09IHQgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKHQpKSByZXR1cm4gdDsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyBpZiAodm9pZCAwICE9PSByKSB7IGlmIChyLmhhcyh0KSkgcmV0dXJuIHIuZ2V0KHQpOyByLnNldCh0LCBXcmFwcGVyKTsgfSBmdW5jdGlvbiBXcmFwcGVyKCkgeyByZXR1cm4gX2NvbnN0cnVjdCh0LCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH0gcmV0dXJuIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogV3JhcHBlciwgZW51bWVyYWJsZTogITEsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgdCk7IH0sIF93cmFwTmF0aXZlU3VwZXIodCk7IH1cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QodCwgZSwgcikgeyBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSByZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgdmFyIG8gPSBbbnVsbF07IG8ucHVzaC5hcHBseShvLCBlKTsgdmFyIHAgPSBuZXcgKHQuYmluZC5hcHBseSh0LCBvKSkoKTsgcmV0dXJuIHIgJiYgX3NldFByb3RvdHlwZU9mKHAsIHIucHJvdG90eXBlKSwgcDsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbih0KSB7IHRyeSB7IHJldHVybiAtMSAhPT0gRnVuY3Rpb24udG9TdHJpbmcuY2FsbCh0KS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKTsgfSBjYXRjaCAobikgeyByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0OyB9IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxudmFyIEludmFsaWRGb3JtYXRFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7XG4gIGZ1bmN0aW9uIEludmFsaWRGb3JtYXRFcnJvcihmb3JtYXRGbikge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW52YWxpZEZvcm1hdEVycm9yKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgSW52YWxpZEZvcm1hdEVycm9yLCBbXCJGb3JtYXQgZnVuY3Rpb25zIG11c3QgYmUgc3luY2hyb25vdXMgdGFraW5nIGEgdHdvIGFyZ3VtZW50czogKGluZm8sIG9wdHMpXFxuRm91bmQ6IFwiLmNvbmNhdChmb3JtYXRGbi50b1N0cmluZygpLnNwbGl0KCdcXG4nKVswXSwgXCJcXG5cIildKTtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfdGhpcywgSW52YWxpZEZvcm1hdEVycm9yKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKEludmFsaWRGb3JtYXRFcnJvciwgX0Vycm9yKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhJbnZhbGlkRm9ybWF0RXJyb3IpO1xufSgvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO1xuLypcbiAqIGZ1bmN0aW9uIGZvcm1hdCAoZm9ybWF0Rm4pXG4gKiBSZXR1cm5zIGEgY3JlYXRlIGZ1bmN0aW9uIGZvciB0aGUgYGZvcm1hdEZuYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm9ybWF0Rm4pIHtcbiAgaWYgKGZvcm1hdEZuLmxlbmd0aCA+IDIpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEZvcm1hdEVycm9yKGZvcm1hdEZuKTtcbiAgfVxuXG4gIC8qXG4gICAqIGZ1bmN0aW9uIEZvcm1hdCAob3B0aW9ucylcbiAgICogQmFzZSBwcm90b3R5cGUgd2hpY2ggY2FsbHMgYSBgX2Zvcm1hdGBcbiAgICogZnVuY3Rpb24gYW5kIHB1c2hlcyB0aGUgcmVzdWx0LlxuICAgKi9cbiAgZnVuY3Rpb24gRm9ybWF0KCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIEZvcm1hdC5wcm90b3R5cGUudHJhbnNmb3JtID0gZm9ybWF0Rm47XG5cbiAgLy9cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBuZXcgaW5zdGFuY2VzIG9mXG4gIC8vIEZvcm1hdFdyYXAgZm9yIHNpbXBsZSBzeW50YXggbGlrZTpcbiAgLy9cbiAgLy8gcmVxdWlyZSgnd2luc3RvbicpLmZvcm1hdHMuanNvbigpO1xuICAvL1xuICBmdW5jdGlvbiBjcmVhdGVGb3JtYXRXcmFwKG9wdHMpIHtcbiAgICByZXR1cm4gbmV3IEZvcm1hdChvcHRzKTtcbiAgfVxuXG4gIC8vXG4gIC8vIEV4cG9zZSB0aGUgRm9ybWF0V3JhcCB0aHJvdWdoIHRoZSBjcmVhdGUgZnVuY3Rpb25cbiAgLy8gZm9yIHRlc3RhYmlsaXR5LlxuICAvL1xuICBjcmVhdGVGb3JtYXRXcmFwLkZvcm1hdCA9IEZvcm1hdDtcbiAgcmV0dXJuIGNyZWF0ZUZvcm1hdFdyYXA7XG59OyIsICIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgU2luZHJlIFNvcmh1cyA8c2luZHJlc29yaHVzQGdtYWlsLmNvbT4gKHNpbmRyZXNvcmh1cy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuKi9cblxudmFyIHN0eWxlcyA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBzdHlsZXM7XG5cbnZhciBjb2RlcyA9IHtcbiAgcmVzZXQ6IFswLCAwXSxcblxuICBib2xkOiBbMSwgMjJdLFxuICBkaW06IFsyLCAyMl0sXG4gIGl0YWxpYzogWzMsIDIzXSxcbiAgdW5kZXJsaW5lOiBbNCwgMjRdLFxuICBpbnZlcnNlOiBbNywgMjddLFxuICBoaWRkZW46IFs4LCAyOF0sXG4gIHN0cmlrZXRocm91Z2g6IFs5LCAyOV0sXG5cbiAgYmxhY2s6IFszMCwgMzldLFxuICByZWQ6IFszMSwgMzldLFxuICBncmVlbjogWzMyLCAzOV0sXG4gIHllbGxvdzogWzMzLCAzOV0sXG4gIGJsdWU6IFszNCwgMzldLFxuICBtYWdlbnRhOiBbMzUsIDM5XSxcbiAgY3lhbjogWzM2LCAzOV0sXG4gIHdoaXRlOiBbMzcsIDM5XSxcbiAgZ3JheTogWzkwLCAzOV0sXG4gIGdyZXk6IFs5MCwgMzldLFxuXG4gIGJyaWdodFJlZDogWzkxLCAzOV0sXG4gIGJyaWdodEdyZWVuOiBbOTIsIDM5XSxcbiAgYnJpZ2h0WWVsbG93OiBbOTMsIDM5XSxcbiAgYnJpZ2h0Qmx1ZTogWzk0LCAzOV0sXG4gIGJyaWdodE1hZ2VudGE6IFs5NSwgMzldLFxuICBicmlnaHRDeWFuOiBbOTYsIDM5XSxcbiAgYnJpZ2h0V2hpdGU6IFs5NywgMzldLFxuXG4gIGJnQmxhY2s6IFs0MCwgNDldLFxuICBiZ1JlZDogWzQxLCA0OV0sXG4gIGJnR3JlZW46IFs0MiwgNDldLFxuICBiZ1llbGxvdzogWzQzLCA0OV0sXG4gIGJnQmx1ZTogWzQ0LCA0OV0sXG4gIGJnTWFnZW50YTogWzQ1LCA0OV0sXG4gIGJnQ3lhbjogWzQ2LCA0OV0sXG4gIGJnV2hpdGU6IFs0NywgNDldLFxuICBiZ0dyYXk6IFsxMDAsIDQ5XSxcbiAgYmdHcmV5OiBbMTAwLCA0OV0sXG5cbiAgYmdCcmlnaHRSZWQ6IFsxMDEsIDQ5XSxcbiAgYmdCcmlnaHRHcmVlbjogWzEwMiwgNDldLFxuICBiZ0JyaWdodFllbGxvdzogWzEwMywgNDldLFxuICBiZ0JyaWdodEJsdWU6IFsxMDQsIDQ5XSxcbiAgYmdCcmlnaHRNYWdlbnRhOiBbMTA1LCA0OV0sXG4gIGJnQnJpZ2h0Q3lhbjogWzEwNiwgNDldLFxuICBiZ0JyaWdodFdoaXRlOiBbMTA3LCA0OV0sXG5cbiAgLy8gbGVnYWN5IHN0eWxlcyBmb3IgY29sb3JzIHByZSB2MS4wLjBcbiAgYmxhY2tCRzogWzQwLCA0OV0sXG4gIHJlZEJHOiBbNDEsIDQ5XSxcbiAgZ3JlZW5CRzogWzQyLCA0OV0sXG4gIHllbGxvd0JHOiBbNDMsIDQ5XSxcbiAgYmx1ZUJHOiBbNDQsIDQ5XSxcbiAgbWFnZW50YUJHOiBbNDUsIDQ5XSxcbiAgY3lhbkJHOiBbNDYsIDQ5XSxcbiAgd2hpdGVCRzogWzQ3LCA0OV0sXG5cbn07XG5cbk9iamVjdC5rZXlzKGNvZGVzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICB2YXIgdmFsID0gY29kZXNba2V5XTtcbiAgdmFyIHN0eWxlID0gc3R5bGVzW2tleV0gPSBbXTtcbiAgc3R5bGUub3BlbiA9ICdcXHUwMDFiWycgKyB2YWxbMF0gKyAnbSc7XG4gIHN0eWxlLmNsb3NlID0gJ1xcdTAwMWJbJyArIHZhbFsxXSArICdtJztcbn0pO1xuIiwgIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIFNpbmRyZSBTb3JodXMgPHNpbmRyZXNvcmh1c0BnbWFpbC5jb20+IChzaW5kcmVzb3JodXMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXG50aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG50aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXG51c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllc1xub2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvXG5zbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZmxhZywgYXJndikge1xuICBhcmd2ID0gYXJndiB8fCBwcm9jZXNzLmFyZ3YgfHwgW107XG5cbiAgdmFyIHRlcm1pbmF0b3JQb3MgPSBhcmd2LmluZGV4T2YoJy0tJyk7XG4gIHZhciBwcmVmaXggPSAvXi17MSwyfS8udGVzdChmbGFnKSA/ICcnIDogJy0tJztcbiAgdmFyIHBvcyA9IGFyZ3YuaW5kZXhPZihwcmVmaXggKyBmbGFnKTtcblxuICByZXR1cm4gcG9zICE9PSAtMSAmJiAodGVybWluYXRvclBvcyA9PT0gLTEgPyB0cnVlIDogcG9zIDwgdGVybWluYXRvclBvcyk7XG59O1xuIiwgIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSBTaW5kcmUgU29yaHVzIDxzaW5kcmVzb3JodXNAZ21haWwuY29tPiAoc2luZHJlc29yaHVzLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG52YXIgaGFzRmxhZyA9IHJlcXVpcmUoJy4vaGFzLWZsYWcuanMnKTtcblxudmFyIGVudiA9IHByb2Nlc3MuZW52O1xuXG52YXIgZm9yY2VDb2xvciA9IHZvaWQgMDtcbmlmIChoYXNGbGFnKCduby1jb2xvcicpIHx8IGhhc0ZsYWcoJ25vLWNvbG9ycycpIHx8IGhhc0ZsYWcoJ2NvbG9yPWZhbHNlJykpIHtcbiAgZm9yY2VDb2xvciA9IGZhbHNlO1xufSBlbHNlIGlmIChoYXNGbGFnKCdjb2xvcicpIHx8IGhhc0ZsYWcoJ2NvbG9ycycpIHx8IGhhc0ZsYWcoJ2NvbG9yPXRydWUnKVxuICAgICAgICAgICB8fCBoYXNGbGFnKCdjb2xvcj1hbHdheXMnKSkge1xuICBmb3JjZUNvbG9yID0gdHJ1ZTtcbn1cbmlmICgnRk9SQ0VfQ09MT1InIGluIGVudikge1xuICBmb3JjZUNvbG9yID0gZW52LkZPUkNFX0NPTE9SLmxlbmd0aCA9PT0gMFxuICAgIHx8IHBhcnNlSW50KGVudi5GT1JDRV9DT0xPUiwgMTApICE9PSAwO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVMZXZlbChsZXZlbCkge1xuICBpZiAobGV2ZWwgPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxldmVsOiBsZXZlbCxcbiAgICBoYXNCYXNpYzogdHJ1ZSxcbiAgICBoYXMyNTY6IGxldmVsID49IDIsXG4gICAgaGFzMTZtOiBsZXZlbCA+PSAzLFxuICB9O1xufVxuXG5mdW5jdGlvbiBzdXBwb3J0c0NvbG9yKHN0cmVhbSkge1xuICBpZiAoZm9yY2VDb2xvciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChoYXNGbGFnKCdjb2xvcj0xNm0nKSB8fCBoYXNGbGFnKCdjb2xvcj1mdWxsJylcbiAgICAgIHx8IGhhc0ZsYWcoJ2NvbG9yPXRydWVjb2xvcicpKSB7XG4gICAgcmV0dXJuIDM7XG4gIH1cblxuICBpZiAoaGFzRmxhZygnY29sb3I9MjU2JykpIHtcbiAgICByZXR1cm4gMjtcbiAgfVxuXG4gIGlmIChzdHJlYW0gJiYgIXN0cmVhbS5pc1RUWSAmJiBmb3JjZUNvbG9yICE9PSB0cnVlKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgbWluID0gZm9yY2VDb2xvciA/IDEgOiAwO1xuXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgLy8gTm9kZS5qcyA3LjUuMCBpcyB0aGUgZmlyc3QgdmVyc2lvbiBvZiBOb2RlLmpzIHRvIGluY2x1ZGUgYSBwYXRjaCB0b1xuICAgIC8vIGxpYnV2IHRoYXQgZW5hYmxlcyAyNTYgY29sb3Igb3V0cHV0IG9uIFdpbmRvd3MuIEFueXRoaW5nIGVhcmxpZXIgYW5kIGl0XG4gICAgLy8gd29uJ3Qgd29yay4gSG93ZXZlciwgaGVyZSB3ZSB0YXJnZXQgTm9kZS5qcyA4IGF0IG1pbmltdW0gYXMgaXQgaXMgYW4gTFRTXG4gICAgLy8gcmVsZWFzZSwgYW5kIE5vZGUuanMgNyBpcyBub3QuIFdpbmRvd3MgMTAgYnVpbGQgMTA1ODYgaXMgdGhlIGZpcnN0XG4gICAgLy8gV2luZG93cyByZWxlYXNlIHRoYXQgc3VwcG9ydHMgMjU2IGNvbG9ycy4gV2luZG93cyAxMCBidWlsZCAxNDkzMSBpcyB0aGVcbiAgICAvLyBmaXJzdCByZWxlYXNlIHRoYXQgc3VwcG9ydHMgMTZtL1RydWVDb2xvci5cbiAgICB2YXIgb3NSZWxlYXNlID0gb3MucmVsZWFzZSgpLnNwbGl0KCcuJyk7XG4gICAgaWYgKE51bWJlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoJy4nKVswXSkgPj0gOFxuICAgICAgICAmJiBOdW1iZXIob3NSZWxlYXNlWzBdKSA+PSAxMCAmJiBOdW1iZXIob3NSZWxlYXNlWzJdKSA+PSAxMDU4Nikge1xuICAgICAgcmV0dXJuIE51bWJlcihvc1JlbGVhc2VbMl0pID49IDE0OTMxID8gMyA6IDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoJ0NJJyBpbiBlbnYpIHtcbiAgICBpZiAoWydUUkFWSVMnLCAnQ0lSQ0xFQ0knLCAnQVBQVkVZT1InLCAnR0lUTEFCX0NJJ10uc29tZShmdW5jdGlvbihzaWduKSB7XG4gICAgICByZXR1cm4gc2lnbiBpbiBlbnY7XG4gICAgfSkgfHwgZW52LkNJX05BTUUgPT09ICdjb2Rlc2hpcCcpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIHJldHVybiBtaW47XG4gIH1cblxuICBpZiAoJ1RFQU1DSVRZX1ZFUlNJT04nIGluIGVudikge1xuICAgIHJldHVybiAoL14oOVxcLigwKlsxLTldXFxkKilcXC58XFxkezIsfVxcLikvLnRlc3QoZW52LlRFQU1DSVRZX1ZFUlNJT04pID8gMSA6IDBcbiAgICApO1xuICB9XG5cbiAgaWYgKCdURVJNX1BST0dSQU0nIGluIGVudikge1xuICAgIHZhciB2ZXJzaW9uID0gcGFyc2VJbnQoKGVudi5URVJNX1BST0dSQU1fVkVSU0lPTiB8fCAnJykuc3BsaXQoJy4nKVswXSwgMTApO1xuXG4gICAgc3dpdGNoIChlbnYuVEVSTV9QUk9HUkFNKSB7XG4gICAgICBjYXNlICdpVGVybS5hcHAnOlxuICAgICAgICByZXR1cm4gdmVyc2lvbiA+PSAzID8gMyA6IDI7XG4gICAgICBjYXNlICdIeXBlcic6XG4gICAgICAgIHJldHVybiAzO1xuICAgICAgY2FzZSAnQXBwbGVfVGVybWluYWwnOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIC8vIE5vIGRlZmF1bHRcbiAgICB9XG4gIH1cblxuICBpZiAoLy0yNTYoY29sb3IpPyQvaS50ZXN0KGVudi5URVJNKSkge1xuICAgIHJldHVybiAyO1xuICB9XG5cbiAgaWYgKC9ec2NyZWVufF54dGVybXxednQxMDB8XnJ4dnR8Y29sb3J8YW5zaXxjeWd3aW58bGludXgvaS50ZXN0KGVudi5URVJNKSkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKCdDT0xPUlRFUk0nIGluIGVudikge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKGVudi5URVJNID09PSAnZHVtYicpIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG5cbiAgcmV0dXJuIG1pbjtcbn1cblxuZnVuY3Rpb24gZ2V0U3VwcG9ydExldmVsKHN0cmVhbSkge1xuICB2YXIgbGV2ZWwgPSBzdXBwb3J0c0NvbG9yKHN0cmVhbSk7XG4gIHJldHVybiB0cmFuc2xhdGVMZXZlbChsZXZlbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdXBwb3J0c0NvbG9yOiBnZXRTdXBwb3J0TGV2ZWwsXG4gIHN0ZG91dDogZ2V0U3VwcG9ydExldmVsKHByb2Nlc3Muc3Rkb3V0KSxcbiAgc3RkZXJyOiBnZXRTdXBwb3J0TGV2ZWwocHJvY2Vzcy5zdGRlcnIpLFxufTtcbiIsICJtb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uIHJ1blRoZVRyYXAodGV4dCwgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHRleHQgPSB0ZXh0IHx8ICdSdW4gdGhlIHRyYXAsIGRyb3AgdGhlIGJhc3MnO1xuICB0ZXh0ID0gdGV4dC5zcGxpdCgnJyk7XG4gIHZhciB0cmFwID0ge1xuICAgIGE6IFsnXFx1MDA0MCcsICdcXHUwMTA0JywgJ1xcdTAyM2EnLCAnXFx1MDI0NScsICdcXHUwMzk0JywgJ1xcdTAzOWInLCAnXFx1MDQxNCddLFxuICAgIGI6IFsnXFx1MDBkZicsICdcXHUwMTgxJywgJ1xcdTAyNDMnLCAnXFx1MDI2ZScsICdcXHUwM2IyJywgJ1xcdTBlM2YnXSxcbiAgICBjOiBbJ1xcdTAwYTknLCAnXFx1MDIzYicsICdcXHUwM2ZlJ10sXG4gICAgZDogWydcXHUwMGQwJywgJ1xcdTAxOGEnLCAnXFx1MDUwMCcsICdcXHUwNTAxJywgJ1xcdTA1MDInLCAnXFx1MDUwMyddLFxuICAgIGU6IFsnXFx1MDBjYicsICdcXHUwMTE1JywgJ1xcdTAxOGUnLCAnXFx1MDI1OCcsICdcXHUwM2EzJywgJ1xcdTAzYmUnLCAnXFx1MDRiYycsXG4gICAgICAnXFx1MGE2YyddLFxuICAgIGY6IFsnXFx1MDRmYSddLFxuICAgIGc6IFsnXFx1MDI2MiddLFxuICAgIGg6IFsnXFx1MDEyNicsICdcXHUwMTk1JywgJ1xcdTA0YTInLCAnXFx1MDRiYScsICdcXHUwNGM3JywgJ1xcdTA1MGEnXSxcbiAgICBpOiBbJ1xcdTBmMGYnXSxcbiAgICBqOiBbJ1xcdTAxMzQnXSxcbiAgICBrOiBbJ1xcdTAxMzgnLCAnXFx1MDRhMCcsICdcXHUwNGMzJywgJ1xcdTA1MWUnXSxcbiAgICBsOiBbJ1xcdTAxMzknXSxcbiAgICBtOiBbJ1xcdTAyOGQnLCAnXFx1MDRjZCcsICdcXHUwNGNlJywgJ1xcdTA1MjAnLCAnXFx1MDUyMScsICdcXHUwZDY5J10sXG4gICAgbjogWydcXHUwMGQxJywgJ1xcdTAxNGInLCAnXFx1MDE5ZCcsICdcXHUwMzc2JywgJ1xcdTAzYTAnLCAnXFx1MDQ4YSddLFxuICAgIG86IFsnXFx1MDBkOCcsICdcXHUwMGY1JywgJ1xcdTAwZjgnLCAnXFx1MDFmZScsICdcXHUwMjk4JywgJ1xcdTA0N2EnLCAnXFx1MDVkZCcsXG4gICAgICAnXFx1MDZkZCcsICdcXHUwZTRmJ10sXG4gICAgcDogWydcXHUwMWY3JywgJ1xcdTA0OGUnXSxcbiAgICBxOiBbJ1xcdTA5Y2QnXSxcbiAgICByOiBbJ1xcdTAwYWUnLCAnXFx1MDFhNicsICdcXHUwMjEwJywgJ1xcdTAyNGMnLCAnXFx1MDI4MCcsICdcXHUwNDJmJ10sXG4gICAgczogWydcXHUwMGE3JywgJ1xcdTAzZGUnLCAnXFx1MDNkZicsICdcXHUwM2U4J10sXG4gICAgdDogWydcXHUwMTQxJywgJ1xcdTAxNjYnLCAnXFx1MDM3MyddLFxuICAgIHU6IFsnXFx1MDFiMScsICdcXHUwNTRkJ10sXG4gICAgdjogWydcXHUwNWQ4J10sXG4gICAgdzogWydcXHUwNDI4JywgJ1xcdTA0NjAnLCAnXFx1MDQ3YycsICdcXHUwZDcwJ10sXG4gICAgeDogWydcXHUwNGIyJywgJ1xcdTA0ZmUnLCAnXFx1MDRmYycsICdcXHUwNGZkJ10sXG4gICAgeTogWydcXHUwMGE1JywgJ1xcdTA0YjAnLCAnXFx1MDRjYiddLFxuICAgIHo6IFsnXFx1MDFiNScsICdcXHUwMjQwJ10sXG4gIH07XG4gIHRleHQuZm9yRWFjaChmdW5jdGlvbihjKSB7XG4gICAgYyA9IGMudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgY2hhcnMgPSB0cmFwW2NdIHx8IFsnICddO1xuICAgIHZhciByYW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcnMubGVuZ3RoKTtcbiAgICBpZiAodHlwZW9mIHRyYXBbY10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXN1bHQgKz0gdHJhcFtjXVtyYW5kXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IGM7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCAiLy8gcGxlYXNlIG5vXG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uIHphbGdvKHRleHQsIG9wdGlvbnMpIHtcbiAgdGV4dCA9IHRleHQgfHwgJyAgIGhlIGlzIGhlcmUgICAnO1xuICB2YXIgc291bCA9IHtcbiAgICAndXAnOiBbXG4gICAgICAnXHUwMzBEJywgJ1x1MDMwRScsICdcdTAzMDQnLCAnXHUwMzA1JyxcbiAgICAgICdcdTAzM0YnLCAnXHUwMzExJywgJ1x1MDMwNicsICdcdTAzMTAnLFxuICAgICAgJ1x1MDM1MicsICdcdTAzNTcnLCAnXHUwMzUxJywgJ1x1MDMwNycsXG4gICAgICAnXHUwMzA4JywgJ1x1MDMwQScsICdcdTAzNDInLCAnXHUwMzEzJyxcbiAgICAgICdcdTAzMDgnLCAnXHUwMzRBJywgJ1x1MDM0QicsICdcdTAzNEMnLFxuICAgICAgJ1x1MDMwMycsICdcdTAzMDInLCAnXHUwMzBDJywgJ1x1MDM1MCcsXG4gICAgICAnXHUwMzAwJywgJ1x1MDMwMScsICdcdTAzMEInLCAnXHUwMzBGJyxcbiAgICAgICdcdTAzMTInLCAnXHUwMzEzJywgJ1x1MDMxNCcsICdcdTAzM0QnLFxuICAgICAgJ1x1MDMwOScsICdcdTAzNjMnLCAnXHUwMzY0JywgJ1x1MDM2NScsXG4gICAgICAnXHUwMzY2JywgJ1x1MDM2NycsICdcdTAzNjgnLCAnXHUwMzY5JyxcbiAgICAgICdcdTAzNkEnLCAnXHUwMzZCJywgJ1x1MDM2QycsICdcdTAzNkQnLFxuICAgICAgJ1x1MDM2RScsICdcdTAzNkYnLCAnXHUwMzNFJywgJ1x1MDM1QicsXG4gICAgICAnXHUwMzQ2JywgJ1x1MDMxQScsXG4gICAgXSxcbiAgICAnZG93bic6IFtcbiAgICAgICdcdTAzMTYnLCAnXHUwMzE3JywgJ1x1MDMxOCcsICdcdTAzMTknLFxuICAgICAgJ1x1MDMxQycsICdcdTAzMUQnLCAnXHUwMzFFJywgJ1x1MDMxRicsXG4gICAgICAnXHUwMzIwJywgJ1x1MDMyNCcsICdcdTAzMjUnLCAnXHUwMzI2JyxcbiAgICAgICdcdTAzMjknLCAnXHUwMzJBJywgJ1x1MDMyQicsICdcdTAzMkMnLFxuICAgICAgJ1x1MDMyRCcsICdcdTAzMkUnLCAnXHUwMzJGJywgJ1x1MDMzMCcsXG4gICAgICAnXHUwMzMxJywgJ1x1MDMzMicsICdcdTAzMzMnLCAnXHUwMzM5JyxcbiAgICAgICdcdTAzM0EnLCAnXHUwMzNCJywgJ1x1MDMzQycsICdcdTAzNDUnLFxuICAgICAgJ1x1MDM0NycsICdcdTAzNDgnLCAnXHUwMzQ5JywgJ1x1MDM0RCcsXG4gICAgICAnXHUwMzRFJywgJ1x1MDM1MycsICdcdTAzNTQnLCAnXHUwMzU1JyxcbiAgICAgICdcdTAzNTYnLCAnXHUwMzU5JywgJ1x1MDM1QScsICdcdTAzMjMnLFxuICAgIF0sXG4gICAgJ21pZCc6IFtcbiAgICAgICdcdTAzMTUnLCAnXHUwMzFCJywgJ1x1MDMwMCcsICdcdTAzMDEnLFxuICAgICAgJ1x1MDM1OCcsICdcdTAzMjEnLCAnXHUwMzIyJywgJ1x1MDMyNycsXG4gICAgICAnXHUwMzI4JywgJ1x1MDMzNCcsICdcdTAzMzUnLCAnXHUwMzM2JyxcbiAgICAgICdcdTAzNUMnLCAnXHUwMzVEJywgJ1x1MDM1RScsXG4gICAgICAnXHUwMzVGJywgJ1x1MDM2MCcsICdcdTAzNjInLCAnXHUwMzM4JyxcbiAgICAgICdcdTAzMzcnLCAnXHUwMzYxJywgJyBcdTA0ODknLFxuICAgIF0sXG4gIH07XG4gIHZhciBhbGwgPSBbXS5jb25jYXQoc291bC51cCwgc291bC5kb3duLCBzb3VsLm1pZCk7XG5cbiAgZnVuY3Rpb24gcmFuZG9tTnVtYmVyKHJhbmdlKSB7XG4gICAgdmFyIHIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5nZSk7XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBmdW5jdGlvbiBpc0NoYXIoY2hhcmFjdGVyKSB7XG4gICAgdmFyIGJvb2wgPSBmYWxzZTtcbiAgICBhbGwuZmlsdGVyKGZ1bmN0aW9uKGkpIHtcbiAgICAgIGJvb2wgPSAoaSA9PT0gY2hhcmFjdGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm9vbDtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gaGVDb21lcyh0ZXh0LCBvcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBjb3VudHM7XG4gICAgdmFyIGw7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9uc1sndXAnXSA9XG4gICAgICB0eXBlb2Ygb3B0aW9uc1sndXAnXSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zWyd1cCddIDogdHJ1ZTtcbiAgICBvcHRpb25zWydtaWQnXSA9XG4gICAgICB0eXBlb2Ygb3B0aW9uc1snbWlkJ10gIT09ICd1bmRlZmluZWQnID8gb3B0aW9uc1snbWlkJ10gOiB0cnVlO1xuICAgIG9wdGlvbnNbJ2Rvd24nXSA9XG4gICAgICB0eXBlb2Ygb3B0aW9uc1snZG93biddICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnNbJ2Rvd24nXSA6IHRydWU7XG4gICAgb3B0aW9uc1snc2l6ZSddID1cbiAgICAgIHR5cGVvZiBvcHRpb25zWydzaXplJ10gIT09ICd1bmRlZmluZWQnID8gb3B0aW9uc1snc2l6ZSddIDogJ21heGknO1xuICAgIHRleHQgPSB0ZXh0LnNwbGl0KCcnKTtcbiAgICBmb3IgKGwgaW4gdGV4dCkge1xuICAgICAgaWYgKGlzQ2hhcihsKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHJlc3VsdCArIHRleHRbbF07XG4gICAgICBjb3VudHMgPSB7J3VwJzogMCwgJ2Rvd24nOiAwLCAnbWlkJzogMH07XG4gICAgICBzd2l0Y2ggKG9wdGlvbnMuc2l6ZSkge1xuICAgICAgICBjYXNlICdtaW5pJzpcbiAgICAgICAgICBjb3VudHMudXAgPSByYW5kb21OdW1iZXIoOCk7XG4gICAgICAgICAgY291bnRzLm1pZCA9IHJhbmRvbU51bWJlcigyKTtcbiAgICAgICAgICBjb3VudHMuZG93biA9IHJhbmRvbU51bWJlcig4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWF4aSc6XG4gICAgICAgICAgY291bnRzLnVwID0gcmFuZG9tTnVtYmVyKDE2KSArIDM7XG4gICAgICAgICAgY291bnRzLm1pZCA9IHJhbmRvbU51bWJlcig0KSArIDE7XG4gICAgICAgICAgY291bnRzLmRvd24gPSByYW5kb21OdW1iZXIoNjQpICsgMztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb3VudHMudXAgPSByYW5kb21OdW1iZXIoOCkgKyAxO1xuICAgICAgICAgIGNvdW50cy5taWQgPSByYW5kb21OdW1iZXIoNikgLyAyO1xuICAgICAgICAgIGNvdW50cy5kb3duID0gcmFuZG9tTnVtYmVyKDgpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdmFyIGFyciA9IFsndXAnLCAnbWlkJywgJ2Rvd24nXTtcbiAgICAgIGZvciAodmFyIGQgaW4gYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFycltkXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gY291bnRzW2luZGV4XTsgaSsrKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnNbaW5kZXhdKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBzb3VsW2luZGV4XVtyYW5kb21OdW1iZXIoc291bFtpbmRleF0ubGVuZ3RoKV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLy8gZG9uJ3Qgc3VtbW9uIGhpbVxuICByZXR1cm4gaGVDb21lcyh0ZXh0LCBvcHRpb25zKTtcbn07XG5cbiIsICJtb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uKGNvbG9ycykge1xuICByZXR1cm4gZnVuY3Rpb24obGV0dGVyLCBpLCBleHBsb2RlZCkge1xuICAgIGlmIChsZXR0ZXIgPT09ICcgJykgcmV0dXJuIGxldHRlcjtcbiAgICBzd2l0Y2ggKGklMykge1xuICAgICAgY2FzZSAwOiByZXR1cm4gY29sb3JzLnJlZChsZXR0ZXIpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gY29sb3JzLndoaXRlKGxldHRlcik7XG4gICAgICBjYXNlIDI6IHJldHVybiBjb2xvcnMuYmx1ZShsZXR0ZXIpO1xuICAgIH1cbiAgfTtcbn07XG4iLCAibW9kdWxlWydleHBvcnRzJ10gPSBmdW5jdGlvbihjb2xvcnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxldHRlciwgaSwgZXhwbG9kZWQpIHtcbiAgICByZXR1cm4gaSAlIDIgPT09IDAgPyBsZXR0ZXIgOiBjb2xvcnMuaW52ZXJzZShsZXR0ZXIpO1xuICB9O1xufTtcbiIsICJtb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uKGNvbG9ycykge1xuICAvLyBSb1kgRyBCaVZcbiAgdmFyIHJhaW5ib3dDb2xvcnMgPSBbJ3JlZCcsICd5ZWxsb3cnLCAnZ3JlZW4nLCAnYmx1ZScsICdtYWdlbnRhJ107XG4gIHJldHVybiBmdW5jdGlvbihsZXR0ZXIsIGksIGV4cGxvZGVkKSB7XG4gICAgaWYgKGxldHRlciA9PT0gJyAnKSB7XG4gICAgICByZXR1cm4gbGV0dGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29sb3JzW3JhaW5ib3dDb2xvcnNbaSsrICUgcmFpbmJvd0NvbG9ycy5sZW5ndGhdXShsZXR0ZXIpO1xuICAgIH1cbiAgfTtcbn07XG5cbiIsICJtb2R1bGVbJ2V4cG9ydHMnXSA9IGZ1bmN0aW9uKGNvbG9ycykge1xuICB2YXIgYXZhaWxhYmxlID0gWyd1bmRlcmxpbmUnLCAnaW52ZXJzZScsICdncmV5JywgJ3llbGxvdycsICdyZWQnLCAnZ3JlZW4nLFxuICAgICdibHVlJywgJ3doaXRlJywgJ2N5YW4nLCAnbWFnZW50YScsICdicmlnaHRZZWxsb3cnLCAnYnJpZ2h0UmVkJyxcbiAgICAnYnJpZ2h0R3JlZW4nLCAnYnJpZ2h0Qmx1ZScsICdicmlnaHRXaGl0ZScsICdicmlnaHRDeWFuJywgJ2JyaWdodE1hZ2VudGEnXTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxldHRlciwgaSwgZXhwbG9kZWQpIHtcbiAgICByZXR1cm4gbGV0dGVyID09PSAnICcgPyBsZXR0ZXIgOlxuICAgICAgY29sb3JzW1xuICAgICAgICAgIGF2YWlsYWJsZVtNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoYXZhaWxhYmxlLmxlbmd0aCAtIDIpKV1cbiAgICAgIF0obGV0dGVyKTtcbiAgfTtcbn07XG4iLCAiLypcblxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbk9yaWdpbmFsIExpYnJhcnlcbiAgLSBDb3B5cmlnaHQgKGMpIE1hcmFrIFNxdWlyZXNcblxuQWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5XG4gLSBDb3B5cmlnaHQgKGMpIFNpbmRyZSBTb3JodXMgPHNpbmRyZXNvcmh1c0BnbWFpbC5jb20+IChzaW5kcmVzb3JodXMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG5cbiovXG5cbnZhciBjb2xvcnMgPSB7fTtcbm1vZHVsZVsnZXhwb3J0cyddID0gY29sb3JzO1xuXG5jb2xvcnMudGhlbWVzID0ge307XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGFuc2lTdHlsZXMgPSBjb2xvcnMuc3R5bGVzID0gcmVxdWlyZSgnLi9zdHlsZXMnKTtcbnZhciBkZWZpbmVQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIG5ld0xpbmVSZWdleCA9IG5ldyBSZWdFeHAoL1tcXHJcXG5dKy9nKTtcblxuY29sb3JzLnN1cHBvcnRzQ29sb3IgPSByZXF1aXJlKCcuL3N5c3RlbS9zdXBwb3J0cy1jb2xvcnMnKS5zdXBwb3J0c0NvbG9yO1xuXG5pZiAodHlwZW9mIGNvbG9ycy5lbmFibGVkID09PSAndW5kZWZpbmVkJykge1xuICBjb2xvcnMuZW5hYmxlZCA9IGNvbG9ycy5zdXBwb3J0c0NvbG9yKCkgIT09IGZhbHNlO1xufVxuXG5jb2xvcnMuZW5hYmxlID0gZnVuY3Rpb24oKSB7XG4gIGNvbG9ycy5lbmFibGVkID0gdHJ1ZTtcbn07XG5cbmNvbG9ycy5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gIGNvbG9ycy5lbmFibGVkID0gZmFsc2U7XG59O1xuXG5jb2xvcnMuc3RyaXBDb2xvcnMgPSBjb2xvcnMuc3RyaXAgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuICgnJyArIHN0cikucmVwbGFjZSgvXFx4MUJcXFtcXGQrbS9nLCAnJyk7XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbnZhciBzdHlsaXplID0gY29sb3JzLnN0eWxpemUgPSBmdW5jdGlvbiBzdHlsaXplKHN0ciwgc3R5bGUpIHtcbiAgaWYgKCFjb2xvcnMuZW5hYmxlZCkge1xuICAgIHJldHVybiBzdHIrJyc7XG4gIH1cblxuICB2YXIgc3R5bGVNYXAgPSBhbnNpU3R5bGVzW3N0eWxlXTtcblxuICAvLyBTdHlsaXplIHNob3VsZCB3b3JrIGZvciBub24tQU5TSSBzdHlsZXMsIHRvb1xuICBpZiAoIXN0eWxlTWFwICYmIHN0eWxlIGluIGNvbG9ycykge1xuICAgIC8vIFN0eWxlIG1hcHMgbGlrZSB0cmFwIG9wZXJhdGUgYXMgZnVuY3Rpb25zIG9uIHN0cmluZ3M7XG4gICAgLy8gdGhleSBkb24ndCBoYXZlIHByb3BlcnRpZXMgbGlrZSBvcGVuIG9yIGNsb3NlLlxuICAgIHJldHVybiBjb2xvcnNbc3R5bGVdKHN0cik7XG4gIH1cblxuICByZXR1cm4gc3R5bGVNYXAub3BlbiArIHN0ciArIHN0eWxlTWFwLmNsb3NlO1xufTtcblxudmFyIG1hdGNoT3BlcmF0b3JzUmUgPSAvW3xcXFxce30oKVtcXF1eJCsqPy5dL2c7XG52YXIgZXNjYXBlU3RyaW5nUmVnZXhwID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG4gIH1cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKG1hdGNoT3BlcmF0b3JzUmUsICdcXFxcJCYnKTtcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkKF9zdHlsZXMpIHtcbiAgdmFyIGJ1aWxkZXIgPSBmdW5jdGlvbiBidWlsZGVyKCkge1xuICAgIHJldHVybiBhcHBseVN0eWxlLmFwcGx5KGJ1aWxkZXIsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGJ1aWxkZXIuX3N0eWxlcyA9IF9zdHlsZXM7XG4gIC8vIF9fcHJvdG9fXyBpcyB1c2VkIGJlY2F1c2Ugd2UgbXVzdCByZXR1cm4gYSBmdW5jdGlvbiwgYnV0IHRoZXJlIGlzXG4gIC8vIG5vIHdheSB0byBjcmVhdGUgYSBmdW5jdGlvbiB3aXRoIGEgZGlmZmVyZW50IHByb3RvdHlwZS5cbiAgYnVpbGRlci5fX3Byb3RvX18gPSBwcm90bztcbiAgcmV0dXJuIGJ1aWxkZXI7XG59XG5cbnZhciBzdHlsZXMgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciByZXQgPSB7fTtcbiAgYW5zaVN0eWxlcy5ncmV5ID0gYW5zaVN0eWxlcy5ncmF5O1xuICBPYmplY3Qua2V5cyhhbnNpU3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGFuc2lTdHlsZXNba2V5XS5jbG9zZVJlID1cbiAgICAgIG5ldyBSZWdFeHAoZXNjYXBlU3RyaW5nUmVnZXhwKGFuc2lTdHlsZXNba2V5XS5jbG9zZSksICdnJyk7XG4gICAgcmV0W2tleV0gPSB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYnVpbGQodGhpcy5fc3R5bGVzLmNvbmNhdChrZXkpKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59KSgpO1xuXG52YXIgcHJvdG8gPSBkZWZpbmVQcm9wcyhmdW5jdGlvbiBjb2xvcnMoKSB7fSwgc3R5bGVzKTtcblxuZnVuY3Rpb24gYXBwbHlTdHlsZSgpIHtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHZhciBzdHIgPSBhcmdzLm1hcChmdW5jdGlvbihhcmcpIHtcbiAgICAvLyBVc2Ugd2VhayBlcXVhbGl0eSBjaGVjayBzbyB3ZSBjYW4gY29sb3JpemUgbnVsbC91bmRlZmluZWQgaW4gc2FmZSBtb2RlXG4gICAgaWYgKGFyZyAhPSBudWxsICYmIGFyZy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdXRpbC5pbnNwZWN0KGFyZyk7XG4gICAgfVxuICB9KS5qb2luKCcgJyk7XG5cbiAgaWYgKCFjb2xvcnMuZW5hYmxlZCB8fCAhc3RyKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHZhciBuZXdMaW5lc1ByZXNlbnQgPSBzdHIuaW5kZXhPZignXFxuJykgIT0gLTE7XG5cbiAgdmFyIG5lc3RlZFN0eWxlcyA9IHRoaXMuX3N0eWxlcztcblxuICB2YXIgaSA9IG5lc3RlZFN0eWxlcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgY29kZSA9IGFuc2lTdHlsZXNbbmVzdGVkU3R5bGVzW2ldXTtcbiAgICBzdHIgPSBjb2RlLm9wZW4gKyBzdHIucmVwbGFjZShjb2RlLmNsb3NlUmUsIGNvZGUub3BlbikgKyBjb2RlLmNsb3NlO1xuICAgIGlmIChuZXdMaW5lc1ByZXNlbnQpIHtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ld0xpbmVSZWdleCwgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGNvZGUuY2xvc2UgKyBtYXRjaCArIGNvZGUub3BlbjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbmNvbG9ycy5zZXRUaGVtZSA9IGZ1bmN0aW9uKHRoZW1lKSB7XG4gIGlmICh0eXBlb2YgdGhlbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc29sZS5sb2coJ2NvbG9ycy5zZXRUaGVtZSBub3cgb25seSBhY2NlcHRzIGFuIG9iamVjdCwgbm90IGEgc3RyaW5nLiAgJyArXG4gICAgICAnSWYgeW91IGFyZSB0cnlpbmcgdG8gc2V0IGEgdGhlbWUgZnJvbSBhIGZpbGUsIGl0IGlzIG5vdyB5b3VyICh0aGUgJyArXG4gICAgICAnY2FsbGVyXFwncykgcmVzcG9uc2liaWxpdHkgdG8gcmVxdWlyZSB0aGUgZmlsZS4gIFRoZSBvbGQgc3ludGF4ICcgK1xuICAgICAgJ2xvb2tlZCBsaWtlIGNvbG9ycy5zZXRUaGVtZShfX2Rpcm5hbWUgKyAnICtcbiAgICAgICdcXCcvLi4vdGhlbWVzL2dlbmVyaWMtbG9nZ2luZy5qc1xcJyk7IFRoZSBuZXcgc3ludGF4IGxvb2tzIGxpa2UgJytcbiAgICAgICdjb2xvcnMuc2V0VGhlbWUocmVxdWlyZShfX2Rpcm5hbWUgKyAnICtcbiAgICAgICdcXCcvLi4vdGhlbWVzL2dlbmVyaWMtbG9nZ2luZy5qc1xcJykpOycpO1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBzdHlsZSBpbiB0aGVtZSkge1xuICAgIChmdW5jdGlvbihzdHlsZSkge1xuICAgICAgY29sb3JzW3N0eWxlXSA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICBpZiAodHlwZW9mIHRoZW1lW3N0eWxlXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB2YXIgb3V0ID0gc3RyO1xuICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhlbWVbc3R5bGVdKSB7XG4gICAgICAgICAgICBvdXQgPSBjb2xvcnNbdGhlbWVbc3R5bGVdW2ldXShvdXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xvcnNbdGhlbWVbc3R5bGVdXShzdHIpO1xuICAgICAgfTtcbiAgICB9KShzdHlsZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIHZhciByZXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXRbbmFtZV0gPSB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYnVpbGQoW25hbWVdKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbnZhciBzZXF1ZW5jZXIgPSBmdW5jdGlvbiBzZXF1ZW5jZXIobWFwLCBzdHIpIHtcbiAgdmFyIGV4cGxvZGVkID0gc3RyLnNwbGl0KCcnKTtcbiAgZXhwbG9kZWQgPSBleHBsb2RlZC5tYXAobWFwKTtcbiAgcmV0dXJuIGV4cGxvZGVkLmpvaW4oJycpO1xufTtcblxuLy8gY3VzdG9tIGZvcm1hdHRlciBtZXRob2RzXG5jb2xvcnMudHJhcCA9IHJlcXVpcmUoJy4vY3VzdG9tL3RyYXAnKTtcbmNvbG9ycy56YWxnbyA9IHJlcXVpcmUoJy4vY3VzdG9tL3phbGdvJyk7XG5cbi8vIG1hcHNcbmNvbG9ycy5tYXBzID0ge307XG5jb2xvcnMubWFwcy5hbWVyaWNhID0gcmVxdWlyZSgnLi9tYXBzL2FtZXJpY2EnKShjb2xvcnMpO1xuY29sb3JzLm1hcHMuemVicmEgPSByZXF1aXJlKCcuL21hcHMvemVicmEnKShjb2xvcnMpO1xuY29sb3JzLm1hcHMucmFpbmJvdyA9IHJlcXVpcmUoJy4vbWFwcy9yYWluYm93JykoY29sb3JzKTtcbmNvbG9ycy5tYXBzLnJhbmRvbSA9IHJlcXVpcmUoJy4vbWFwcy9yYW5kb20nKShjb2xvcnMpO1xuXG5mb3IgKHZhciBtYXAgaW4gY29sb3JzLm1hcHMpIHtcbiAgKGZ1bmN0aW9uKG1hcCkge1xuICAgIGNvbG9yc1ttYXBdID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gc2VxdWVuY2VyKGNvbG9ycy5tYXBzW21hcF0sIHN0cik7XG4gICAgfTtcbiAgfSkobWFwKTtcbn1cblxuZGVmaW5lUHJvcHMoY29sb3JzLCBpbml0KCkpO1xuIiwgIi8vXG4vLyBSZW1hcms6IFJlcXVpcmluZyB0aGlzIGZpbGUgd2lsbCB1c2UgdGhlIFwic2FmZVwiIGNvbG9ycyBBUEksXG4vLyB3aGljaCB3aWxsIG5vdCB0b3VjaCBTdHJpbmcucHJvdG90eXBlLlxuLy9cbi8vICAgdmFyIGNvbG9ycyA9IHJlcXVpcmUoJ2NvbG9ycy9zYWZlJyk7XG4vLyAgIGNvbG9ycy5yZWQoXCJmb29cIilcbi8vXG4vL1xudmFyIGNvbG9ycyA9IHJlcXVpcmUoJy4vbGliL2NvbG9ycycpO1xubW9kdWxlWydleHBvcnRzJ10gPSBjb2xvcnM7XG4iLCAiLyoqXG4gKiBjbGkuanM6IENvbmZpZyB0aGF0IGNvbmZvcm0gdG8gY29tbW9ubHkgdXNlZCBDTEkgbG9nZ2luZyBsZXZlbHMuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZWZhdWx0IGxldmVscyBmb3IgdGhlIENMSSBjb25maWd1cmF0aW9uLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5sZXZlbHMgPSB7XG4gIGVycm9yOiAwLFxuICB3YXJuOiAxLFxuICBoZWxwOiAyLFxuICBkYXRhOiAzLFxuICBpbmZvOiA0LFxuICBkZWJ1ZzogNSxcbiAgcHJvbXB0OiA2LFxuICB2ZXJib3NlOiA3LFxuICBpbnB1dDogOCxcbiAgc2lsbHk6IDlcbn07XG5cbi8qKlxuICogRGVmYXVsdCBjb2xvcnMgZm9yIHRoZSBDTEkgY29uZmlndXJhdGlvbi5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuY29sb3JzID0ge1xuICBlcnJvcjogJ3JlZCcsXG4gIHdhcm46ICd5ZWxsb3cnLFxuICBoZWxwOiAnY3lhbicsXG4gIGRhdGE6ICdncmV5JyxcbiAgaW5mbzogJ2dyZWVuJyxcbiAgZGVidWc6ICdibHVlJyxcbiAgcHJvbXB0OiAnZ3JleScsXG4gIHZlcmJvc2U6ICdjeWFuJyxcbiAgaW5wdXQ6ICdncmV5JyxcbiAgc2lsbHk6ICdtYWdlbnRhJ1xufTtcbiIsICIvKipcbiAqIG5wbS5qczogQ29uZmlnIHRoYXQgY29uZm9ybSB0byBucG0gbG9nZ2luZyBsZXZlbHMuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZWZhdWx0IGxldmVscyBmb3IgdGhlIG5wbSBjb25maWd1cmF0aW9uLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5sZXZlbHMgPSB7XG4gIGVycm9yOiAwLFxuICB3YXJuOiAxLFxuICBpbmZvOiAyLFxuICBodHRwOiAzLFxuICB2ZXJib3NlOiA0LFxuICBkZWJ1ZzogNSxcbiAgc2lsbHk6IDZcbn07XG5cbi8qKlxuICogRGVmYXVsdCBsZXZlbHMgZm9yIHRoZSBucG0gY29uZmlndXJhdGlvbi5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuY29sb3JzID0ge1xuICBlcnJvcjogJ3JlZCcsXG4gIHdhcm46ICd5ZWxsb3cnLFxuICBpbmZvOiAnZ3JlZW4nLFxuICBodHRwOiAnZ3JlZW4nLFxuICB2ZXJib3NlOiAnY3lhbicsXG4gIGRlYnVnOiAnYmx1ZScsXG4gIHNpbGx5OiAnbWFnZW50YSdcbn07XG4iLCAiLyoqXG4gKiBzeXNsb2cuanM6IENvbmZpZyB0aGF0IGNvbmZvcm0gdG8gc3lzbG9nIGxvZ2dpbmcgbGV2ZWxzLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGVmYXVsdCBsZXZlbHMgZm9yIHRoZSBzeXNsb2cgY29uZmlndXJhdGlvbi5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMubGV2ZWxzID0ge1xuICBlbWVyZzogMCxcbiAgYWxlcnQ6IDEsXG4gIGNyaXQ6IDIsXG4gIGVycm9yOiAzLFxuICB3YXJuaW5nOiA0LFxuICBub3RpY2U6IDUsXG4gIGluZm86IDYsXG4gIGRlYnVnOiA3XG59O1xuXG4vKipcbiAqIERlZmF1bHQgbGV2ZWxzIGZvciB0aGUgc3lzbG9nIGNvbmZpZ3VyYXRpb24uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLmNvbG9ycyA9IHtcbiAgZW1lcmc6ICdyZWQnLFxuICBhbGVydDogJ3llbGxvdycsXG4gIGNyaXQ6ICdyZWQnLFxuICBlcnJvcjogJ3JlZCcsXG4gIHdhcm5pbmc6ICdyZWQnLFxuICBub3RpY2U6ICd5ZWxsb3cnLFxuICBpbmZvOiAnZ3JlZW4nLFxuICBkZWJ1ZzogJ2JsdWUnXG59O1xuIiwgIi8qKlxuICogaW5kZXguanM6IERlZmF1bHQgc2V0dGluZ3MgZm9yIGFsbCBsZXZlbHMgdGhhdCB3aW5zdG9uIGtub3dzIGFib3V0LlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXhwb3J0IGNvbmZpZyBzZXQgZm9yIHRoZSBDTEkuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NsaScsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vY2xpJylcbn0pO1xuXG4vKipcbiAqIEV4cG9ydCBjb25maWcgc2V0IGZvciBucG0uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ25wbScsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vbnBtJylcbn0pO1xuXG4vKipcbiAqIEV4cG9ydCBjb25maWcgc2V0IGZvciB0aGUgc3lzbG9nLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdzeXNsb2cnLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL3N5c2xvZycpXG59KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBzaGFyZWFibGUgc3ltYm9sIGNvbnN0YW50IHRoYXQgY2FuIGJlIHVzZWRcbiAqIGFzIGEgbm9uLWVudW1lcmFibGUgLyBzZW1pLWhpZGRlbiBsZXZlbCBpZGVudGlmaWVyXG4gKiB0byBhbGxvdyB0aGUgcmVhZGFibGUgbGV2ZWwgcHJvcGVydHkgdG8gYmUgbXV0YWJsZSBmb3JcbiAqIG9wZXJhdGlvbnMgbGlrZSBjb2xvcml6YXRpb25cbiAqXG4gKiBAdHlwZSB7U3ltYm9sfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0xFVkVMJywge1xuICB2YWx1ZTogU3ltYm9sLmZvcignbGV2ZWwnKVxufSk7XG5cbi8qKlxuICogQSBzaGFyZWFibGUgc3ltYm9sIGNvbnN0YW50IHRoYXQgY2FuIGJlIHVzZWRcbiAqIGFzIGEgbm9uLWVudW1lcmFibGUgLyBzZW1pLWhpZGRlbiBtZXNzYWdlIGlkZW50aWZpZXJcbiAqIHRvIGFsbG93IHRoZSBmaW5hbCBtZXNzYWdlIHByb3BlcnR5IHRvIG5vdCBoYXZlXG4gKiBzaWRlIGVmZmVjdHMgb24gYW5vdGhlci5cbiAqXG4gKiBAdHlwZSB7U3ltYm9sfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ01FU1NBR0UnLCB7XG4gIHZhbHVlOiBTeW1ib2wuZm9yKCdtZXNzYWdlJylcbn0pO1xuXG4vKipcbiAqIEEgc2hhcmVhYmxlIHN5bWJvbCBjb25zdGFudCB0aGF0IGNhbiBiZSB1c2VkXG4gKiBhcyBhIG5vbi1lbnVtZXJhYmxlIC8gc2VtaS1oaWRkZW4gbWVzc2FnZSBpZGVudGlmaWVyXG4gKiB0byBhbGxvdyB0aGUgZXh0cmFjdGVkIHNwbGF0IHByb3BlcnR5IGJlIGhpZGRlblxuICpcbiAqIEB0eXBlIHtTeW1ib2x9XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU1BMQVQnLCB7XG4gIHZhbHVlOiBTeW1ib2wuZm9yKCdzcGxhdCcpXG59KTtcblxuLyoqXG4gKiBBIHNoYXJlYWJsZSBvYmplY3QgY29uc3RhbnQgIHRoYXQgY2FuIGJlIHVzZWRcbiAqIGFzIGEgc3RhbmRhcmQgY29uZmlndXJhdGlvbiBmb3Igd2luc3RvbkAzLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY29uZmlncycsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vY29uZmlnJylcbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIGNvbG9ycyA9IHJlcXVpcmUoJ0Bjb2xvcnMvY29sb3JzL3NhZmUnKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIExFVkVMID0gX3JlcXVpcmUuTEVWRUwsXG4gIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xuXG4vL1xuLy8gRml4IGNvbG9ycyBub3QgYXBwZWFyaW5nIGluIG5vbi10dHkgZW52aXJvbm1lbnRzXG4vL1xuY29sb3JzLmVuYWJsZWQgPSB0cnVlO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7UmVnRXhwfSBoYXNTcGFjZVxuICogU2ltcGxlIHJlZ2V4IHRvIGNoZWNrIGZvciBwcmVzZW5jZSBvZiBzcGFjZXMuXG4gKi9cbnZhciBoYXNTcGFjZSA9IC9cXHMrLztcblxuLypcbiAqIENvbG9yaXplciBmb3JtYXQuIFdyYXBzIHRoZSBgbGV2ZWxgIGFuZC9vciBgbWVzc2FnZWAgcHJvcGVydGllc1xuICogb2YgdGhlIGBpbmZvYCBvYmplY3RzIHdpdGggQU5TSSBjb2xvciBjb2RlcyBiYXNlZCBvbiBhIGZldyBvcHRpb25zLlxuICovXG52YXIgQ29sb3JpemVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29sb3JpemVyKCkge1xuICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sb3JpemVyKTtcbiAgICBpZiAob3B0cy5jb2xvcnMpIHtcbiAgICAgIHRoaXMuYWRkQ29sb3JzKG9wdHMuY29sb3JzKTtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zID0gb3B0cztcbiAgfVxuXG4gIC8qXG4gICAqIEFkZHMgdGhlIGNvbG9ycyBPYmplY3QgdG8gdGhlIHNldCBvZiBhbGxDb2xvcnNcbiAgICoga25vd24gYnkgdGhlIENvbG9yaXplclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIFNldCBvZiBjb2xvciBtYXBwaW5ncyB0byBhZGQuXG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENvbG9yaXplciwgW3tcbiAgICBrZXk6IFwiYWRkQ29sb3JzXCIsXG4gICAgdmFsdWU6XG4gICAgLypcbiAgICAgKiBBZGRzIHRoZSBjb2xvcnMgT2JqZWN0IHRvIHRoZSBzZXQgb2YgYWxsQ29sb3JzXG4gICAgICoga25vd24gYnkgdGhlIENvbG9yaXplclxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbG9ycyBTZXQgb2YgY29sb3IgbWFwcGluZ3MgdG8gYWRkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZENvbG9ycyhjbHJzKSB7XG4gICAgICByZXR1cm4gQ29sb3JpemVyLmFkZENvbG9ycyhjbHJzKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIGZ1bmN0aW9uIGNvbG9yaXplIChsb29rdXAsIGxldmVsLCBtZXNzYWdlKVxuICAgICAqIFBlcmZvcm1zIG11bHRpLXN0ZXAgY29sb3JpemF0aW9uIHVzaW5nIEBjb2xvcnMvY29sb3JzL3NhZmVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJjb2xvcml6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb2xvcml6ZShsb29rdXAsIGxldmVsLCBtZXNzYWdlKSB7XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBsZXZlbDtcbiAgICAgIH1cblxuICAgICAgLy9cbiAgICAgIC8vIElmIHRoZSBjb2xvciBmb3IgdGhlIGxldmVsIGlzIGp1c3QgYSBzdHJpbmdcbiAgICAgIC8vIHRoZW4gYXR0ZW1wdCB0byBjb2xvcml6ZSB0aGUgbWVzc2FnZSB3aXRoIGl0LlxuICAgICAgLy9cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShDb2xvcml6ZXIuYWxsQ29sb3JzW2xvb2t1cF0pKSB7XG4gICAgICAgIHJldHVybiBjb2xvcnNbQ29sb3JpemVyLmFsbENvbG9yc1tsb29rdXBdXShtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgLy9cbiAgICAgIC8vIElmIGl0IGlzIGFuIEFycmF5IHRoZW4gaXRlcmF0ZSBvdmVyIHRoYXQgQXJyYXksIGFwcGx5aW5nXG4gICAgICAvLyB0aGUgY29sb3JzIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gICAgICAvL1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IENvbG9yaXplci5hbGxDb2xvcnNbbG9va3VwXS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBtZXNzYWdlID0gY29sb3JzW0NvbG9yaXplci5hbGxDb2xvcnNbbG9va3VwXVtpXV0obWVzc2FnZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIGZ1bmN0aW9uIHRyYW5zZm9ybSAoaW5mbywgb3B0cylcbiAgICAgKiBBdHRlbXB0cyB0byBjb2xvcml6ZSB0aGUgeyBsZXZlbCwgbWVzc2FnZSB9IG9mIHRoZSBnaXZlblxuICAgICAqIGBsb2dmb3JtYCBpbmZvIG9iamVjdC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ0cmFuc2Zvcm1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtKGluZm8sIG9wdHMpIHtcbiAgICAgIGlmIChvcHRzLmFsbCAmJiB0eXBlb2YgaW5mb1tNRVNTQUdFXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW5mb1tNRVNTQUdFXSA9IHRoaXMuY29sb3JpemUoaW5mb1tMRVZFTF0sIGluZm8ubGV2ZWwsIGluZm9bTUVTU0FHRV0pO1xuICAgICAgfVxuICAgICAgaWYgKG9wdHMubGV2ZWwgfHwgb3B0cy5hbGwgfHwgIW9wdHMubWVzc2FnZSkge1xuICAgICAgICBpbmZvLmxldmVsID0gdGhpcy5jb2xvcml6ZShpbmZvW0xFVkVMXSwgaW5mby5sZXZlbCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0cy5hbGwgfHwgb3B0cy5tZXNzYWdlKSB7XG4gICAgICAgIGluZm8ubWVzc2FnZSA9IHRoaXMuY29sb3JpemUoaW5mb1tMRVZFTF0sIGluZm8ubGV2ZWwsIGluZm8ubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJhZGRDb2xvcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ29sb3JzKGNscnMpIHtcbiAgICAgIHZhciBuZXh0Q29sb3JzID0gT2JqZWN0LmtleXMoY2xycykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGxldmVsKSB7XG4gICAgICAgIGFjY1tsZXZlbF0gPSBoYXNTcGFjZS50ZXN0KGNscnNbbGV2ZWxdKSA/IGNscnNbbGV2ZWxdLnNwbGl0KGhhc1NwYWNlKSA6IGNscnNbbGV2ZWxdO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgICAgQ29sb3JpemVyLmFsbENvbG9ycyA9IE9iamVjdC5hc3NpZ24oe30sIENvbG9yaXplci5hbGxDb2xvcnMgfHwge30sIG5leHRDb2xvcnMpO1xuICAgICAgcmV0dXJuIENvbG9yaXplci5hbGxDb2xvcnM7XG4gICAgfVxuICB9XSk7XG59KCk7XG4vKlxuICogZnVuY3Rpb24gY29sb3JpemUgKGluZm8pXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjb2xvcml6ZSBGb3JtYXQgdGhhdCBhcHBsaWVzXG4gKiBsZXZlbCBjb2xvcnMgdG8gYGluZm9gIG9iamVjdHMuIFRoaXMgd2FzIHByZXZpb3VzbHkgZXhwb3NlZFxuICogYXMgeyBjb2xvcml6ZTogdHJ1ZSB9IHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBDb2xvcml6ZXIob3B0cyk7XG59O1xuXG4vL1xuLy8gQXR0YWNoIHRoZSBDb2xvcml6ZXIgZm9yIHJlZ2lzdHJhdGlvbiBwdXJwb3Nlc1xuLy9cbm1vZHVsZS5leHBvcnRzLkNvbG9yaXplciA9IG1vZHVsZS5leHBvcnRzLkZvcm1hdCA9IENvbG9yaXplcjsiLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2NvbG9yaXplJyksXG4gIENvbG9yaXplciA9IF9yZXF1aXJlLkNvbG9yaXplcjtcblxuLypcbiAqIFNpbXBsZSBtZXRob2QgdG8gcmVnaXN0ZXIgY29sb3JzIHdpdGggYSBzaW1wbGVyIHJlcXVpcmVcbiAqIHBhdGggd2l0aGluIHRoZSBtb2R1bGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICBDb2xvcml6ZXIuYWRkQ29sb3JzKGNvbmZpZy5jb2xvcnMgfHwgY29uZmlnKTtcbiAgcmV0dXJuIGNvbmZpZztcbn07IiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGZvcm1hdCA9IHJlcXVpcmUoJy4vZm9ybWF0Jyk7XG5cbi8qXG4gKiBmdW5jdGlvbiBhbGlnbiAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGFsaWduIEZvcm1hdCB3aGljaCBhZGRzIGEgYFxcdGBcbiAqIGRlbGltaXRlciBiZWZvcmUgdGhlIG1lc3NhZ2UgdG8gcHJvcGVybHkgYWxpZ24gaXQgaW4gdGhlIHNhbWUgcGxhY2UuXG4gKiBJdCB3YXMgcHJldmlvdXNseSB7IGFsaWduOiB0cnVlIH0gaW4gd2luc3RvbiA8IDMuMC4wXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KGZ1bmN0aW9uIChpbmZvKSB7XG4gIGluZm8ubWVzc2FnZSA9IFwiXFx0XCIuY29uY2F0KGluZm8ubWVzc2FnZSk7XG4gIHJldHVybiBpbmZvO1xufSk7IiwgIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogMCAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkocikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXkocikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgYSkgeyBpZiAocikgeyBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpOyB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpOyByZXR1cm4gXCJPYmplY3RcIiA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgXCJNYXBcIiA9PT0gdCB8fCBcIlNldFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFwiQXJndW1lbnRzXCIgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSA6IHZvaWQgMDsgfSB9XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KHIpIHsgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBudWxsICE9IHJbU3ltYm9sLml0ZXJhdG9yXSB8fCBudWxsICE9IHJbXCJAQGl0ZXJhdG9yXCJdKSByZXR1cm4gQXJyYXkuZnJvbShyKTsgfVxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKHIpIHsgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyKTsgfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgeyAobnVsbCA9PSBhIHx8IGEgPiByLmxlbmd0aCkgJiYgKGEgPSByLmxlbmd0aCk7IGZvciAodmFyIGUgPSAwLCBuID0gQXJyYXkoYSk7IGUgPCBhOyBlKyspIG5bZV0gPSByW2VdOyByZXR1cm4gbjsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgY29uZmlncyA9IF9yZXF1aXJlLmNvbmZpZ3MsXG4gIExFVkVMID0gX3JlcXVpcmUuTEVWRUwsXG4gIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xudmFyIFBhZGRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBhZGRlcigpIHtcbiAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge1xuICAgICAgbGV2ZWxzOiBjb25maWdzLm5wbS5sZXZlbHNcbiAgICB9O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYWRkZXIpO1xuICAgIHRoaXMucGFkZGluZ3MgPSBQYWRkZXIucGFkZGluZ0ZvckxldmVscyhvcHRzLmxldmVscywgb3B0cy5maWxsZXIpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbWF4aW11bSBsZW5ndGggb2Yga2V5cyBpbiB0aGUgc3BlY2lmaWVkIGBsZXZlbHNgIE9iamVjdC5cbiAgICogQHBhcmFtICB7T2JqZWN0fSBsZXZlbHMgU2V0IG9mIGFsbCBsZXZlbHMgdG8gY2FsY3VsYXRlIGxvbmdlc3QgbGV2ZWwgYWdhaW5zdC5cbiAgICogQHJldHVybnMge051bWJlcn0gTWF4aW11bSBsZW5ndGggb2YgdGhlIGxvbmdlc3QgbGV2ZWwgc3RyaW5nLlxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhQYWRkZXIsIFt7XG4gICAga2V5OiBcInRyYW5zZm9ybVwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxuICAgICAqIFByZXBlbmRzIHRoZSBwYWRkaW5nIG9udG8gdGhlIGBtZXNzYWdlYCBiYXNlZCBvbiB0aGUgYExFVkVMYCBvZlxuICAgICAqIHRoZSBgaW5mb2AuIFRoaXMgaXMgYmFzZWQgb24gdGhlIGJlaGF2aW9yIG9mIGB3aW5zdG9uQDJgIHdoaWNoIGFsc29cbiAgICAgKiBwcmVwZW5kZWQgdGhlIGxldmVsIG9udG8gdGhlIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5zdG9uanMvd2luc3Rvbi9ibG9iLzIueC9saWIvd2luc3Rvbi9sb2dnZXIuanMjTDE5OC1MMjAxXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtJbmZvfSBpbmZvIExvZ2Zvcm0gaW5mbyBvYmplY3RcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdHMgT3B0aW9ucyBwYXNzZWQgYWxvbmcgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7SW5mb30gTW9kaWZpZWQgbG9nZm9ybSBpbmZvIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0oaW5mbywgb3B0cykge1xuICAgICAgaW5mby5tZXNzYWdlID0gXCJcIi5jb25jYXQodGhpcy5wYWRkaW5nc1tpbmZvW0xFVkVMXV0pLmNvbmNhdChpbmZvLm1lc3NhZ2UpO1xuICAgICAgaWYgKGluZm9bTUVTU0FHRV0pIHtcbiAgICAgICAgaW5mb1tNRVNTQUdFXSA9IFwiXCIuY29uY2F0KHRoaXMucGFkZGluZ3NbaW5mb1tMRVZFTF1dKS5jb25jYXQoaW5mb1tNRVNTQUdFXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXRMb25nZXN0TGV2ZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9uZ2VzdExldmVsKGxldmVscykge1xuICAgICAgdmFyIGx2bHMgPSBPYmplY3Qua2V5cyhsZXZlbHMpLm1hcChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIGxldmVsLmxlbmd0aDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShsdmxzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgdGhlIHNwZWNpZmllZCBgbGV2ZWxgIGFzc3VtaW5nIHRoYXQgdGhlXG4gICAgICogbWF4aW11bSBsZW5ndGggb2YgYWxsIGxldmVscyBpdCdzIGFzc29jaWF0ZWQgd2l0aCBpcyBgbWF4TGVuZ3RoYC5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGxldmVsIExldmVsIHRvIGNhbGN1bGF0ZSBwYWRkaW5nIGZvci5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZpbGxlciBSZXBlYXRhYmxlIHRleHQgdG8gdXNlIGZvciBwYWRkaW5nLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gbWF4TGVuZ3RoIExlbmd0aCBvZiB0aGUgbG9uZ2VzdCBsZXZlbFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFBhZGRpbmcgc3RyaW5nIGZvciB0aGUgYGxldmVsYFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInBhZGRpbmdGb3JMZXZlbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYWRkaW5nRm9yTGV2ZWwobGV2ZWwsIGZpbGxlciwgbWF4TGVuZ3RoKSB7XG4gICAgICB2YXIgdGFyZ2V0TGVuID0gbWF4TGVuZ3RoICsgMSAtIGxldmVsLmxlbmd0aDtcbiAgICAgIHZhciByZXAgPSBNYXRoLmZsb29yKHRhcmdldExlbiAvIGZpbGxlci5sZW5ndGgpO1xuICAgICAgdmFyIHBhZGRpbmcgPSBcIlwiLmNvbmNhdChmaWxsZXIpLmNvbmNhdChmaWxsZXIucmVwZWF0KHJlcCkpO1xuICAgICAgcmV0dXJuIHBhZGRpbmcuc2xpY2UoMCwgdGFyZ2V0TGVuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBzdHJpbmcgcGFkZGluZ3MgZm9yIHRoZSBnaXZlbiBgbGV2ZWxzYFxuICAgICAqIHVzaW5nIHRoZSBzcGVjaWZpZWQgYGZpbGxlcmAuXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBsZXZlbHMgU2V0IG9mIGFsbCBsZXZlbHMgdG8gY2FsY3VsYXRlIHBhZGRpbmcgZm9yLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZmlsbGVyIFJlcGVhdGFibGUgdGV4dCB0byB1c2UgZm9yIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gTWFwcGluZyBvZiBsZXZlbCB0byBkZXNpcmVkIHBhZGRpbmcuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwicGFkZGluZ0ZvckxldmVsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYWRkaW5nRm9yTGV2ZWxzKGxldmVscykge1xuICAgICAgdmFyIGZpbGxlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyAnO1xuICAgICAgdmFyIG1heExlbmd0aCA9IFBhZGRlci5nZXRMb25nZXN0TGV2ZWwobGV2ZWxzKTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhsZXZlbHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBsZXZlbCkge1xuICAgICAgICBhY2NbbGV2ZWxdID0gUGFkZGVyLnBhZGRpbmdGb3JMZXZlbChsZXZlbCwgZmlsbGVyLCBtYXhMZW5ndGgpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgfV0pO1xufSgpO1xuLypcbiAqIGZ1bmN0aW9uIHBhZExldmVscyAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHBhZExldmVscyBGb3JtYXQgd2hpY2ggcGFkc1xuICogbGV2ZWxzIHRvIGJlIHRoZSBzYW1lIGxlbmd0aC4gVGhpcyB3YXMgcHJldmlvdXNseSBleHBvc2VkIGFzXG4gKiB7IHBhZExldmVsczogdHJ1ZSB9IHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBQYWRkZXIob3B0cyk7XG59O1xubW9kdWxlLmV4cG9ydHMuUGFkZGVyID0gbW9kdWxlLmV4cG9ydHMuRm9ybWF0ID0gUGFkZGVyOyIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vY29sb3JpemUnKSxcbiAgQ29sb3JpemVyID0gX3JlcXVpcmUuQ29sb3JpemVyO1xudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vcGFkLWxldmVscycpLFxuICBQYWRkZXIgPSBfcmVxdWlyZTIuUGFkZGVyO1xudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIGNvbmZpZ3MgPSBfcmVxdWlyZTMuY29uZmlncyxcbiAgTUVTU0FHRSA9IF9yZXF1aXJlMy5NRVNTQUdFO1xuXG4vKipcbiAqIENsaSBmb3JtYXQgY2xhc3MgdGhhdCBoYW5kbGVzIGluaXRpYWwgc3RhdGUgZm9yIGEgYSBzZXBhcmF0ZVxuICogQ29sb3JpemVyIGFuZCBQYWRkZXIgaW5zdGFuY2UuXG4gKi9cbnZhciBDbGlGb3JtYXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDbGlGb3JtYXQoKSB7XG4gICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlGb3JtYXQpO1xuICAgIGlmICghb3B0cy5sZXZlbHMpIHtcbiAgICAgIG9wdHMubGV2ZWxzID0gY29uZmlncy5jbGkubGV2ZWxzO1xuICAgIH1cbiAgICB0aGlzLmNvbG9yaXplciA9IG5ldyBDb2xvcml6ZXIob3B0cyk7XG4gICAgdGhpcy5wYWRkZXIgPSBuZXcgUGFkZGVyKG9wdHMpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdHM7XG4gIH1cblxuICAvKlxuICAgKiBmdW5jdGlvbiB0cmFuc2Zvcm0gKGluZm8sIG9wdHMpXG4gICAqIEF0dGVtcHRzIHRvIGJvdGg6XG4gICAqIDEuIFBhZCB0aGUgeyBsZXZlbCB9XG4gICAqIDIuIENvbG9yaXplIHRoZSB7IGxldmVsLCBtZXNzYWdlIH1cbiAgICogb2YgdGhlIGdpdmVuIGBsb2dmb3JtYCBpbmZvIG9iamVjdCBkZXBlbmRpbmcgb24gdGhlIGBvcHRzYC5cbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQ2xpRm9ybWF0LCBbe1xuICAgIGtleTogXCJ0cmFuc2Zvcm1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtKGluZm8sIG9wdHMpIHtcbiAgICAgIHRoaXMuY29sb3JpemVyLnRyYW5zZm9ybSh0aGlzLnBhZGRlci50cmFuc2Zvcm0oaW5mbywgb3B0cyksIG9wdHMpO1xuICAgICAgaW5mb1tNRVNTQUdFXSA9IFwiXCIuY29uY2F0KGluZm8ubGV2ZWwsIFwiOlwiKS5jb25jYXQoaW5mby5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgfV0pO1xufSgpO1xuLypcbiAqIGZ1bmN0aW9uIGNsaSAob3B0cylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIENMSSBmb3JtYXQgdGhhdCB0dXJucyBhIGxvZ1xuICogYGluZm9gIG9iamVjdCBpbnRvIHRoZSBzYW1lIGZvcm1hdCBwcmV2aW91c2x5IGF2YWlsYWJsZVxuICogaW4gYHdpbnN0b24uY2xpKClgIGluIGB3aW5zdG9uIDwgMy4wLjBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHJldHVybiBuZXcgQ2xpRm9ybWF0KG9wdHMpO1xufTtcblxuLy9cbi8vIEF0dGFjaCB0aGUgQ2xpRm9ybWF0IGZvciByZWdpc3RyYXRpb24gcHVycG9zZXNcbi8vXG5tb2R1bGUuZXhwb3J0cy5Gb3JtYXQgPSBDbGlGb3JtYXQ7IiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGZvcm1hdCA9IHJlcXVpcmUoJy4vZm9ybWF0Jyk7XG5cbi8qXG4gKiBmdW5jdGlvbiBjYXNjYWRlKGZvcm1hdHMpXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBgLl9mb3JtYXRgIGZ1bmN0aW9uIGluLW9yZGVyXG4gKiBmb3IgdGhlIHNwZWNpZmllZCBzZXQgb2YgYGZvcm1hdHNgLiBJbiB0aGlzIG1hbm5lciB3ZSBzYXkgdGhhdCBGb3JtYXRzXG4gKiBhcmUgXCJwaXBlLWxpa2VcIiwgYnV0IG5vdCBhIHB1cmUgcHVtcGlmeSBpbXBsZW1lbnRhdGlvbi4gU2luY2UgdGhlcmUgaXMgbm8gYmFja1xuICogcHJlc3N1cmUgd2UgY2FuIHJlbW92ZSBhbGwgb2YgdGhlIFwicmVhZGFibGVcIiBwbHVtYmluZyBpbiBOb2RlIHN0cmVhbXMuXG4gKi9cbmZ1bmN0aW9uIGNhc2NhZGUoZm9ybWF0cykge1xuICBpZiAoIWZvcm1hdHMuZXZlcnkoaXNWYWxpZEZvcm1hdCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgdmFyIG9iaiA9IGluZm87XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JtYXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmogPSBmb3JtYXRzW2ldLnRyYW5zZm9ybShvYmosIGZvcm1hdHNbaV0ub3B0aW9ucyk7XG4gICAgICBpZiAoIW9iaikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG59XG5cbi8qXG4gKiBmdW5jdGlvbiBpc1ZhbGlkRm9ybWF0KGZvcm1hdClcbiAqIElmIHRoZSBmb3JtYXQgZG9lcyBub3QgZGVmaW5lIGEgYHRyYW5zZm9ybWAgZnVuY3Rpb24gdGhyb3cgYW4gZXJyb3JcbiAqIHdpdGggbW9yZSBkZXRhaWxlZCB1c2FnZS5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEZvcm1hdChmbXQpIHtcbiAgaWYgKHR5cGVvZiBmbXQudHJhbnNmb3JtICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFsnTm8gdHJhbnNmb3JtIGZ1bmN0aW9uIGZvdW5kIG9uIGZvcm1hdC4gRGlkIHlvdSBjcmVhdGUgYSBmb3JtYXQgaW5zdGFuY2U/JywgJ2NvbnN0IG15Rm9ybWF0ID0gZm9ybWF0KGZvcm1hdEZuKTsnLCAnY29uc3QgaW5zdGFuY2UgPSBteUZvcm1hdCgpOyddLmpvaW4oJ1xcbicpKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLypcbiAqIGZ1bmN0aW9uIGNvbWJpbmUgKGluZm8pXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjb21iaW5lIEZvcm1hdCB3aGljaCBjb21iaW5lcyB0aGUgc3BlY2lmaWVkXG4gKiBmb3JtYXRzIGludG8gYSBuZXcgZm9ybWF0LiBUaGlzIGlzIHNpbWlsYXIgdG8gYSBwaXBlLWNoYWluIGluIHRyYW5zZm9ybSBzdHJlYW1zLlxuICogV2UgY2hvb3NlIHRvIGNvbWJpbmUgdGhlIHByb3RvdHlwZXMgdGhpcyB3YXkgYmVjYXVzZSB0aGVyZSBpcyBubyBiYWNrIHByZXNzdXJlIGluXG4gKiBhbiBpbi1tZW1vcnkgdHJhbnNmb3JtIGNoYWluLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZvcm1hdHMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZm9ybWF0c1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICB2YXIgY29tYmluZWRGb3JtYXQgPSBmb3JtYXQoY2FzY2FkZShmb3JtYXRzKSk7XG4gIHZhciBpbnN0YW5jZSA9IGNvbWJpbmVkRm9ybWF0KCk7XG4gIGluc3RhbmNlLkZvcm1hdCA9IGNvbWJpbmVkRm9ybWF0LkZvcm1hdDtcbiAgcmV0dXJuIGluc3RhbmNlO1xufTtcblxuLy9cbi8vIEV4cG9ydCB0aGUgY2FzY2FkZSBtZXRob2QgZm9yIHVzZSBpbiBjbGkgYW5kIG90aGVyXG4vLyBjb21iaW5lZCBmb3JtYXRzIHRoYXQgc2hvdWxkIG5vdCBiZSBhc3N1bWVkIHRvIGJlXG4vLyBzaW5nbGV0b25zLlxuLy9cbm1vZHVsZS5leHBvcnRzLmNhc2NhZGUgPSBjYXNjYWRlOyIsICIvKiBlc2xpbnQgbm8tdW5kZWZpbmVkOiAwICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgTEVWRUwgPSBfcmVxdWlyZS5MRVZFTCxcbiAgTUVTU0FHRSA9IF9yZXF1aXJlLk1FU1NBR0U7XG5cbi8qXG4gKiBmdW5jdGlvbiBlcnJvcnMgKGluZm8pXG4gKiBJZiB0aGUgYG1lc3NhZ2VgIHByb3BlcnR5IG9mIHRoZSBgaW5mb2Agb2JqZWN0IGlzIGFuIGluc3RhbmNlIG9mIGBFcnJvcmAsXG4gKiByZXBsYWNlIHRoZSBgRXJyb3JgIG9iamVjdCBpdHMgb3duIGBtZXNzYWdlYCBwcm9wZXJ0eS5cbiAqXG4gKiBPcHRpb25hbGx5LCB0aGUgRXJyb3IncyBgc3RhY2tgIGFuZC9vciBgY2F1c2VgIHByb3BlcnRpZXMgY2FuIGFsc28gYmUgYXBwZW5kZWQgdG8gdGhlIGBpbmZvYCBvYmplY3QuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KGZ1bmN0aW9uIChlaW5mbywgX3JlZikge1xuICB2YXIgc3RhY2sgPSBfcmVmLnN0YWNrLFxuICAgIGNhdXNlID0gX3JlZi5jYXVzZTtcbiAgaWYgKGVpbmZvIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICB2YXIgaW5mbyA9IE9iamVjdC5hc3NpZ24oe30sIGVpbmZvLCBfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICBsZXZlbDogZWluZm8ubGV2ZWxcbiAgICB9LCBMRVZFTCwgZWluZm9bTEVWRUxdIHx8IGVpbmZvLmxldmVsKSwgXCJtZXNzYWdlXCIsIGVpbmZvLm1lc3NhZ2UpLCBNRVNTQUdFLCBlaW5mb1tNRVNTQUdFXSB8fCBlaW5mby5tZXNzYWdlKSk7XG4gICAgaWYgKHN0YWNrKSBpbmZvLnN0YWNrID0gZWluZm8uc3RhY2s7XG4gICAgaWYgKGNhdXNlKSBpbmZvLmNhdXNlID0gZWluZm8uY2F1c2U7XG4gICAgcmV0dXJuIGluZm87XG4gIH1cbiAgaWYgKCEoZWluZm8ubWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSkgcmV0dXJuIGVpbmZvO1xuXG4gIC8vIEFzc2lnbiBhbGwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFuZCB0aGVcbiAgLy8gbWVzc2FnZSBwcm9wZXJ0eSBmcm9tIHRoZSBlcnJvciBwcm92aWRlZC5cbiAgdmFyIGVyciA9IGVpbmZvLm1lc3NhZ2U7XG4gIE9iamVjdC5hc3NpZ24oZWluZm8sIGVycik7XG4gIGVpbmZvLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgZWluZm9bTUVTU0FHRV0gPSBlcnIubWVzc2FnZTtcblxuICAvLyBBc3NpZ24gdGhlIHN0YWNrIGFuZC9vciBjYXVzZSBpZiByZXF1ZXN0ZWQuXG4gIGlmIChzdGFjaykgZWluZm8uc3RhY2sgPSBlcnIuc3RhY2s7XG4gIGlmIChjYXVzZSkgZWluZm8uY2F1c2UgPSBlcnIuY2F1c2U7XG4gIHJldHVybiBlaW5mbztcbn0pOyIsICIndXNlIHN0cmljdCdcblxuY29uc3QgeyBoYXNPd25Qcm9wZXJ0eSB9ID0gT2JqZWN0LnByb3RvdHlwZVxuXG5jb25zdCBzdHJpbmdpZnkgPSBjb25maWd1cmUoKVxuXG4vLyBAdHMtZXhwZWN0LWVycm9yXG5zdHJpbmdpZnkuY29uZmlndXJlID0gY29uZmlndXJlXG4vLyBAdHMtZXhwZWN0LWVycm9yXG5zdHJpbmdpZnkuc3RyaW5naWZ5ID0gc3RyaW5naWZ5XG5cbi8vIEB0cy1leHBlY3QtZXJyb3JcbnN0cmluZ2lmeS5kZWZhdWx0ID0gc3RyaW5naWZ5XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgdXNlZCBmb3IgbmFtZWQgZXhwb3J0XG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeVxuLy8gQHRzLWV4cGVjdC1lcnJvciB1c2VkIGZvciBuYW1lZCBleHBvcnRcbmV4cG9ydHMuY29uZmlndXJlID0gY29uZmlndXJlXG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5naWZ5XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG5jb25zdCBzdHJFc2NhcGVTZXF1ZW5jZXNSZWdFeHAgPSAvW1xcdTAwMDAtXFx1MDAxZlxcdTAwMjJcXHUwMDVjXFx1ZDgwMC1cXHVkZmZmXS9cblxuLy8gRXNjYXBlIEMwIGNvbnRyb2wgY2hhcmFjdGVycywgZG91YmxlIHF1b3RlcywgdGhlIGJhY2tzbGFzaCBhbmQgZXZlcnkgY29kZVxuLy8gdW5pdCB3aXRoIGEgbnVtZXJpYyB2YWx1ZSBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIDB4RDgwMCB0byAweERGRkYuXG5mdW5jdGlvbiBzdHJFc2NhcGUgKHN0cikge1xuICAvLyBTb21lIG1hZ2ljIG51bWJlcnMgdGhhdCB3b3JrZWQgb3V0IGZpbmUgd2hpbGUgYmVuY2htYXJraW5nIHdpdGggdjggOC4wXG4gIGlmIChzdHIubGVuZ3RoIDwgNTAwMCAmJiAhc3RyRXNjYXBlU2VxdWVuY2VzUmVnRXhwLnRlc3Qoc3RyKSkge1xuICAgIHJldHVybiBgXCIke3N0cn1cImBcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RyKVxufVxuXG5mdW5jdGlvbiBzb3J0IChhcnJheSwgY29tcGFyYXRvcikge1xuICAvLyBJbnNlcnRpb24gc29ydCBpcyB2ZXJ5IGVmZmljaWVudCBmb3Igc21hbGwgaW5wdXQgc2l6ZXMsIGJ1dCBpdCBoYXMgYSBiYWRcbiAgLy8gd29yc3QgY2FzZSBjb21wbGV4aXR5LiBUaHVzLCB1c2UgbmF0aXZlIGFycmF5IHNvcnQgZm9yIGJpZ2dlciB2YWx1ZXMuXG4gIGlmIChhcnJheS5sZW5ndGggPiAyZTIgfHwgY29tcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheS5zb3J0KGNvbXBhcmF0b3IpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGFycmF5W2ldXG4gICAgbGV0IHBvc2l0aW9uID0gaVxuICAgIHdoaWxlIChwb3NpdGlvbiAhPT0gMCAmJiBhcnJheVtwb3NpdGlvbiAtIDFdID4gY3VycmVudFZhbHVlKSB7XG4gICAgICBhcnJheVtwb3NpdGlvbl0gPSBhcnJheVtwb3NpdGlvbiAtIDFdXG4gICAgICBwb3NpdGlvbi0tXG4gICAgfVxuICAgIGFycmF5W3Bvc2l0aW9uXSA9IGN1cnJlbnRWYWx1ZVxuICB9XG4gIHJldHVybiBhcnJheVxufVxuXG5jb25zdCB0eXBlZEFycmF5UHJvdG90eXBlR2V0U3ltYm9sVG9TdHJpbmdUYWcgPVxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihcbiAgICAgICAgbmV3IEludDhBcnJheSgpXG4gICAgICApXG4gICAgKSxcbiAgICBTeW1ib2wudG9TdHJpbmdUYWdcbiAgKS5nZXRcblxuZnVuY3Rpb24gaXNUeXBlZEFycmF5V2l0aEVudHJpZXMgKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlZEFycmF5UHJvdG90eXBlR2V0U3ltYm9sVG9TdHJpbmdUYWcuY2FsbCh2YWx1ZSkgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS5sZW5ndGggIT09IDBcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5VHlwZWRBcnJheSAoYXJyYXksIHNlcGFyYXRvciwgbWF4aW11bUJyZWFkdGgpIHtcbiAgaWYgKGFycmF5Lmxlbmd0aCA8IG1heGltdW1CcmVhZHRoKSB7XG4gICAgbWF4aW11bUJyZWFkdGggPSBhcnJheS5sZW5ndGhcbiAgfVxuICBjb25zdCB3aGl0ZXNwYWNlID0gc2VwYXJhdG9yID09PSAnLCcgPyAnJyA6ICcgJ1xuICBsZXQgcmVzID0gYFwiMFwiOiR7d2hpdGVzcGFjZX0ke2FycmF5WzBdfWBcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBtYXhpbXVtQnJlYWR0aDsgaSsrKSB7XG4gICAgcmVzICs9IGAke3NlcGFyYXRvcn1cIiR7aX1cIjoke3doaXRlc3BhY2V9JHthcnJheVtpXX1gXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRDaXJjdWxhclZhbHVlT3B0aW9uIChvcHRpb25zKSB7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdjaXJjdWxhclZhbHVlJykpIHtcbiAgICBjb25zdCBjaXJjdWxhclZhbHVlID0gb3B0aW9ucy5jaXJjdWxhclZhbHVlXG4gICAgaWYgKHR5cGVvZiBjaXJjdWxhclZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGBcIiR7Y2lyY3VsYXJWYWx1ZX1cImBcbiAgICB9XG4gICAgaWYgKGNpcmN1bGFyVmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNpcmN1bGFyVmFsdWVcbiAgICB9XG4gICAgaWYgKGNpcmN1bGFyVmFsdWUgPT09IEVycm9yIHx8IGNpcmN1bGFyVmFsdWUgPT09IFR5cGVFcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9TdHJpbmcgKCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnZlcnRpbmcgY2lyY3VsYXIgc3RydWN0dXJlIHRvIEpTT04nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImNpcmN1bGFyVmFsdWVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIG9yIHRoZSB2YWx1ZSBudWxsIG9yIHVuZGVmaW5lZCcpXG4gIH1cbiAgcmV0dXJuICdcIltDaXJjdWxhcl1cIidcbn1cblxuZnVuY3Rpb24gZ2V0RGV0ZXJtaW5pc3RpY09wdGlvbiAob3B0aW9ucykge1xuICBsZXQgdmFsdWVcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ2RldGVybWluaXN0aWMnKSkge1xuICAgIHZhbHVlID0gb3B0aW9ucy5kZXRlcm1pbmlzdGljXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZGV0ZXJtaW5pc3RpY1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBib29sZWFuIG9yIGNvbXBhcmF0b3IgZnVuY3Rpb24nKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBnZXRCb29sZWFuT3B0aW9uIChvcHRpb25zLCBrZXkpIHtcbiAgbGV0IHZhbHVlXG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGtleSkpIHtcbiAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XVxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFwiJHtrZXl9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIGJvb2xlYW5gKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBnZXRQb3NpdGl2ZUludGVnZXJPcHRpb24gKG9wdGlvbnMsIGtleSkge1xuICBsZXQgdmFsdWVcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywga2V5KSkge1xuICAgIHZhbHVlID0gb3B0aW9uc1trZXldXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFRoZSBcIiR7a2V5fVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXJgKVxuICAgIH1cbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgXCIke2tleX1cIiBhcmd1bWVudCBtdXN0IGJlIGFuIGludGVnZXJgKVxuICAgIH1cbiAgICBpZiAodmFsdWUgPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVGhlIFwiJHtrZXl9XCIgYXJndW1lbnQgbXVzdCBiZSA+PSAxYClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBJbmZpbml0eSA6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGdldEl0ZW1Db3VudCAobnVtYmVyKSB7XG4gIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICByZXR1cm4gJzEgaXRlbSdcbiAgfVxuICByZXR1cm4gYCR7bnVtYmVyfSBpdGVtc2Bcbn1cblxuZnVuY3Rpb24gZ2V0VW5pcXVlUmVwbGFjZXJTZXQgKHJlcGxhY2VyQXJyYXkpIHtcbiAgY29uc3QgcmVwbGFjZXJTZXQgPSBuZXcgU2V0KClcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiByZXBsYWNlckFycmF5KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgcmVwbGFjZXJTZXQuYWRkKFN0cmluZyh2YWx1ZSkpXG4gICAgfVxuICB9XG4gIHJldHVybiByZXBsYWNlclNldFxufVxuXG5mdW5jdGlvbiBnZXRTdHJpY3RPcHRpb24gKG9wdGlvbnMpIHtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3N0cmljdCcpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLnN0cmljdFxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaWN0XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIGJvb2xlYW4nKVxuICAgIH1cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUpID0+IHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBgT2JqZWN0IGNhbiBub3Qgc2FmZWx5IGJlIHN0cmluZ2lmaWVkLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIHZhbHVlfWBcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgbWVzc2FnZSArPSBgICgke3ZhbHVlLnRvU3RyaW5nKCl9KWBcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZSAob3B0aW9ucykge1xuICBvcHRpb25zID0geyAuLi5vcHRpb25zIH1cbiAgY29uc3QgZmFpbCA9IGdldFN0cmljdE9wdGlvbihvcHRpb25zKVxuICBpZiAoZmFpbCkge1xuICAgIGlmIChvcHRpb25zLmJpZ2ludCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLmJpZ2ludCA9IGZhbHNlXG4gICAgfVxuICAgIGlmICghKCdjaXJjdWxhclZhbHVlJyBpbiBvcHRpb25zKSkge1xuICAgICAgb3B0aW9ucy5jaXJjdWxhclZhbHVlID0gRXJyb3JcbiAgICB9XG4gIH1cbiAgY29uc3QgY2lyY3VsYXJWYWx1ZSA9IGdldENpcmN1bGFyVmFsdWVPcHRpb24ob3B0aW9ucylcbiAgY29uc3QgYmlnaW50ID0gZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnYmlnaW50JylcbiAgY29uc3QgZGV0ZXJtaW5pc3RpYyA9IGdldERldGVybWluaXN0aWNPcHRpb24ob3B0aW9ucylcbiAgY29uc3QgY29tcGFyYXRvciA9IHR5cGVvZiBkZXRlcm1pbmlzdGljID09PSAnZnVuY3Rpb24nID8gZGV0ZXJtaW5pc3RpYyA6IHVuZGVmaW5lZFxuICBjb25zdCBtYXhpbXVtRGVwdGggPSBnZXRQb3NpdGl2ZUludGVnZXJPcHRpb24ob3B0aW9ucywgJ21heGltdW1EZXB0aCcpXG4gIGNvbnN0IG1heGltdW1CcmVhZHRoID0gZ2V0UG9zaXRpdmVJbnRlZ2VyT3B0aW9uKG9wdGlvbnMsICdtYXhpbXVtQnJlYWR0aCcpXG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5Rm5SZXBsYWNlciAoa2V5LCBwYXJlbnQsIHN0YWNrLCByZXBsYWNlciwgc3BhY2VyLCBpbmRlbnRhdGlvbikge1xuICAgIGxldCB2YWx1ZSA9IHBhcmVudFtrZXldXG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpXG4gICAgfVxuICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbChwYXJlbnQsIGtleSwgdmFsdWUpXG5cbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHN0ckVzY2FwZSh2YWx1ZSlcbiAgICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICdudWxsJ1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFjay5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gY2lyY3VsYXJWYWx1ZVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlcyA9ICcnXG4gICAgICAgIGxldCBqb2luID0gJywnXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsSW5kZW50YXRpb24gPSBpbmRlbnRhdGlvblxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnW10nXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbXVtRGVwdGggPCBzdGFjay5sZW5ndGggKyAxKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1wiW0FycmF5XVwiJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKVxuICAgICAgICAgIGlmIChzcGFjZXIgIT09ICcnKSB7XG4gICAgICAgICAgICBpbmRlbnRhdGlvbiArPSBzcGFjZXJcbiAgICAgICAgICAgIHJlcyArPSBgXFxuJHtpbmRlbnRhdGlvbn1gXG4gICAgICAgICAgICBqb2luID0gYCxcXG4ke2luZGVudGF0aW9ufWBcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbWF4aW11bVZhbHVlc1RvU3RyaW5naWZ5ID0gTWF0aC5taW4odmFsdWUubGVuZ3RoLCBtYXhpbXVtQnJlYWR0aClcbiAgICAgICAgICBsZXQgaSA9IDBcbiAgICAgICAgICBmb3IgKDsgaSA8IG1heGltdW1WYWx1ZXNUb1N0cmluZ2lmeSAtIDE7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdG1wID0gc3RyaW5naWZ5Rm5SZXBsYWNlcihTdHJpbmcoaSksIHZhbHVlLCBzdGFjaywgcmVwbGFjZXIsIHNwYWNlciwgaW5kZW50YXRpb24pXG4gICAgICAgICAgICByZXMgKz0gdG1wICE9PSB1bmRlZmluZWQgPyB0bXAgOiAnbnVsbCdcbiAgICAgICAgICAgIHJlcyArPSBqb2luXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHRtcCA9IHN0cmluZ2lmeUZuUmVwbGFjZXIoU3RyaW5nKGkpLCB2YWx1ZSwgc3RhY2ssIHJlcGxhY2VyLCBzcGFjZXIsIGluZGVudGF0aW9uKVxuICAgICAgICAgIHJlcyArPSB0bXAgIT09IHVuZGVmaW5lZCA/IHRtcCA6ICdudWxsJ1xuICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggLSAxID4gbWF4aW11bUJyZWFkdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRLZXlzID0gdmFsdWUubGVuZ3RoIC0gbWF4aW11bUJyZWFkdGggLSAxXG4gICAgICAgICAgICByZXMgKz0gYCR7am9pbn1cIi4uLiAke2dldEl0ZW1Db3VudChyZW1vdmVkS2V5cyl9IG5vdCBzdHJpbmdpZmllZFwiYFxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3BhY2VyICE9PSAnJykge1xuICAgICAgICAgICAgcmVzICs9IGBcXG4ke29yaWdpbmFsSW5kZW50YXRpb259YFxuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFjay5wb3AoKVxuICAgICAgICAgIHJldHVybiBgWyR7cmVzfV1gXG4gICAgICAgIH1cblxuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKVxuICAgICAgICBjb25zdCBrZXlMZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgICBpZiAoa2V5TGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuICd7fSdcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4aW11bURlcHRoIDwgc3RhY2subGVuZ3RoICsgMSkge1xuICAgICAgICAgIHJldHVybiAnXCJbT2JqZWN0XVwiJ1xuICAgICAgICB9XG4gICAgICAgIGxldCB3aGl0ZXNwYWNlID0gJydcbiAgICAgICAgbGV0IHNlcGFyYXRvciA9ICcnXG4gICAgICAgIGlmIChzcGFjZXIgIT09ICcnKSB7XG4gICAgICAgICAgaW5kZW50YXRpb24gKz0gc3BhY2VyXG4gICAgICAgICAgam9pbiA9IGAsXFxuJHtpbmRlbnRhdGlvbn1gXG4gICAgICAgICAgd2hpdGVzcGFjZSA9ICcgJ1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1heGltdW1Qcm9wZXJ0aWVzVG9TdHJpbmdpZnkgPSBNYXRoLm1pbihrZXlMZW5ndGgsIG1heGltdW1CcmVhZHRoKVxuICAgICAgICBpZiAoZGV0ZXJtaW5pc3RpYyAmJiAhaXNUeXBlZEFycmF5V2l0aEVudHJpZXModmFsdWUpKSB7XG4gICAgICAgICAga2V5cyA9IHNvcnQoa2V5cywgY29tcGFyYXRvcilcbiAgICAgICAgfVxuICAgICAgICBzdGFjay5wdXNoKHZhbHVlKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heGltdW1Qcm9wZXJ0aWVzVG9TdHJpbmdpZnk7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV1cbiAgICAgICAgICBjb25zdCB0bXAgPSBzdHJpbmdpZnlGblJlcGxhY2VyKGtleSwgdmFsdWUsIHN0YWNrLCByZXBsYWNlciwgc3BhY2VyLCBpbmRlbnRhdGlvbilcbiAgICAgICAgICBpZiAodG1wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlcyArPSBgJHtzZXBhcmF0b3J9JHtzdHJFc2NhcGUoa2V5KX06JHt3aGl0ZXNwYWNlfSR7dG1wfWBcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IGpvaW5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleUxlbmd0aCA+IG1heGltdW1CcmVhZHRoKSB7XG4gICAgICAgICAgY29uc3QgcmVtb3ZlZEtleXMgPSBrZXlMZW5ndGggLSBtYXhpbXVtQnJlYWR0aFxuICAgICAgICAgIHJlcyArPSBgJHtzZXBhcmF0b3J9XCIuLi5cIjoke3doaXRlc3BhY2V9XCIke2dldEl0ZW1Db3VudChyZW1vdmVkS2V5cyl9IG5vdCBzdHJpbmdpZmllZFwiYFxuICAgICAgICAgIHNlcGFyYXRvciA9IGpvaW5cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BhY2VyICE9PSAnJyAmJiBzZXBhcmF0b3IubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJlcyA9IGBcXG4ke2luZGVudGF0aW9ufSR7cmVzfVxcbiR7b3JpZ2luYWxJbmRlbnRhdGlvbn1gXG4gICAgICAgIH1cbiAgICAgICAgc3RhY2sucG9wKClcbiAgICAgICAgcmV0dXJuIGB7JHtyZXN9fWBcbiAgICAgIH1cbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogZmFpbCA/IGZhaWwodmFsdWUpIDogJ251bGwnXG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlID8gJ3RydWUnIDogJ2ZhbHNlJ1xuICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgY2FzZSAnYmlnaW50JzpcbiAgICAgICAgaWYgKGJpZ2ludCkge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWlsID8gZmFpbCh2YWx1ZSkgOiB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdHJpbmdpZnlBcnJheVJlcGxhY2VyIChrZXksIHZhbHVlLCBzdGFjaywgcmVwbGFjZXIsIHNwYWNlciwgaW5kZW50YXRpb24pIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpXG4gICAgfVxuXG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJldHVybiBzdHJFc2NhcGUodmFsdWUpXG4gICAgICBjYXNlICdvYmplY3QnOiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiAnbnVsbCdcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIGNpcmN1bGFyVmFsdWVcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsSW5kZW50YXRpb24gPSBpbmRlbnRhdGlvblxuICAgICAgICBsZXQgcmVzID0gJydcbiAgICAgICAgbGV0IGpvaW4gPSAnLCdcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tdJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW11bURlcHRoIDwgc3RhY2subGVuZ3RoICsgMSkge1xuICAgICAgICAgICAgcmV0dXJuICdcIltBcnJheV1cIidcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSlcbiAgICAgICAgICBpZiAoc3BhY2VyICE9PSAnJykge1xuICAgICAgICAgICAgaW5kZW50YXRpb24gKz0gc3BhY2VyXG4gICAgICAgICAgICByZXMgKz0gYFxcbiR7aW5kZW50YXRpb259YFxuICAgICAgICAgICAgam9pbiA9IGAsXFxuJHtpbmRlbnRhdGlvbn1gXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG1heGltdW1WYWx1ZXNUb1N0cmluZ2lmeSA9IE1hdGgubWluKHZhbHVlLmxlbmd0aCwgbWF4aW11bUJyZWFkdGgpXG4gICAgICAgICAgbGV0IGkgPSAwXG4gICAgICAgICAgZm9yICg7IGkgPCBtYXhpbXVtVmFsdWVzVG9TdHJpbmdpZnkgLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRtcCA9IHN0cmluZ2lmeUFycmF5UmVwbGFjZXIoU3RyaW5nKGkpLCB2YWx1ZVtpXSwgc3RhY2ssIHJlcGxhY2VyLCBzcGFjZXIsIGluZGVudGF0aW9uKVxuICAgICAgICAgICAgcmVzICs9IHRtcCAhPT0gdW5kZWZpbmVkID8gdG1wIDogJ251bGwnXG4gICAgICAgICAgICByZXMgKz0gam9pblxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB0bXAgPSBzdHJpbmdpZnlBcnJheVJlcGxhY2VyKFN0cmluZyhpKSwgdmFsdWVbaV0sIHN0YWNrLCByZXBsYWNlciwgc3BhY2VyLCBpbmRlbnRhdGlvbilcbiAgICAgICAgICByZXMgKz0gdG1wICE9PSB1bmRlZmluZWQgPyB0bXAgOiAnbnVsbCdcbiAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoIC0gMSA+IG1heGltdW1CcmVhZHRoKSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkS2V5cyA9IHZhbHVlLmxlbmd0aCAtIG1heGltdW1CcmVhZHRoIC0gMVxuICAgICAgICAgICAgcmVzICs9IGAke2pvaW59XCIuLi4gJHtnZXRJdGVtQ291bnQocmVtb3ZlZEtleXMpfSBub3Qgc3RyaW5naWZpZWRcImBcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNwYWNlciAhPT0gJycpIHtcbiAgICAgICAgICAgIHJlcyArPSBgXFxuJHtvcmlnaW5hbEluZGVudGF0aW9ufWBcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2sucG9wKClcbiAgICAgICAgICByZXR1cm4gYFske3Jlc31dYFxuICAgICAgICB9XG4gICAgICAgIHN0YWNrLnB1c2godmFsdWUpXG4gICAgICAgIGxldCB3aGl0ZXNwYWNlID0gJydcbiAgICAgICAgaWYgKHNwYWNlciAhPT0gJycpIHtcbiAgICAgICAgICBpbmRlbnRhdGlvbiArPSBzcGFjZXJcbiAgICAgICAgICBqb2luID0gYCxcXG4ke2luZGVudGF0aW9ufWBcbiAgICAgICAgICB3aGl0ZXNwYWNlID0gJyAnXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlcGFyYXRvciA9ICcnXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHJlcGxhY2VyKSB7XG4gICAgICAgICAgY29uc3QgdG1wID0gc3RyaW5naWZ5QXJyYXlSZXBsYWNlcihrZXksIHZhbHVlW2tleV0sIHN0YWNrLCByZXBsYWNlciwgc3BhY2VyLCBpbmRlbnRhdGlvbilcbiAgICAgICAgICBpZiAodG1wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlcyArPSBgJHtzZXBhcmF0b3J9JHtzdHJFc2NhcGUoa2V5KX06JHt3aGl0ZXNwYWNlfSR7dG1wfWBcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IGpvaW5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYWNlciAhPT0gJycgJiYgc2VwYXJhdG9yLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXMgPSBgXFxuJHtpbmRlbnRhdGlvbn0ke3Jlc31cXG4ke29yaWdpbmFsSW5kZW50YXRpb259YFxuICAgICAgICB9XG4gICAgICAgIHN0YWNrLnBvcCgpXG4gICAgICAgIHJldHVybiBgeyR7cmVzfX1gXG4gICAgICB9XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IGZhaWwgPyBmYWlsKHZhbHVlKSA6ICdudWxsJ1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZSdcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgICAgIGlmIChiaWdpbnQpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFpbCA/IGZhaWwodmFsdWUpIDogdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5SW5kZW50IChrZXksIHZhbHVlLCBzdGFjaywgc3BhY2VyLCBpbmRlbnRhdGlvbikge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICByZXR1cm4gc3RyRXNjYXBlKHZhbHVlKVxuICAgICAgY2FzZSAnb2JqZWN0Jzoge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gJ251bGwnXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpXG4gICAgICAgICAgLy8gUHJldmVudCBjYWxsaW5nIGB0b0pTT05gIGFnYWluLlxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5naWZ5SW5kZW50KGtleSwgdmFsdWUsIHN0YWNrLCBzcGFjZXIsIGluZGVudGF0aW9uKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAnbnVsbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBjaXJjdWxhclZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JpZ2luYWxJbmRlbnRhdGlvbiA9IGluZGVudGF0aW9uXG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICdbXSdcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGltdW1EZXB0aCA8IHN0YWNrLmxlbmd0aCArIDEpIHtcbiAgICAgICAgICAgIHJldHVybiAnXCJbQXJyYXldXCInXG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YWNrLnB1c2godmFsdWUpXG4gICAgICAgICAgaW5kZW50YXRpb24gKz0gc3BhY2VyXG4gICAgICAgICAgbGV0IHJlcyA9IGBcXG4ke2luZGVudGF0aW9ufWBcbiAgICAgICAgICBjb25zdCBqb2luID0gYCxcXG4ke2luZGVudGF0aW9ufWBcbiAgICAgICAgICBjb25zdCBtYXhpbXVtVmFsdWVzVG9TdHJpbmdpZnkgPSBNYXRoLm1pbih2YWx1ZS5sZW5ndGgsIG1heGltdW1CcmVhZHRoKVxuICAgICAgICAgIGxldCBpID0gMFxuICAgICAgICAgIGZvciAoOyBpIDwgbWF4aW11bVZhbHVlc1RvU3RyaW5naWZ5IC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0bXAgPSBzdHJpbmdpZnlJbmRlbnQoU3RyaW5nKGkpLCB2YWx1ZVtpXSwgc3RhY2ssIHNwYWNlciwgaW5kZW50YXRpb24pXG4gICAgICAgICAgICByZXMgKz0gdG1wICE9PSB1bmRlZmluZWQgPyB0bXAgOiAnbnVsbCdcbiAgICAgICAgICAgIHJlcyArPSBqb2luXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHRtcCA9IHN0cmluZ2lmeUluZGVudChTdHJpbmcoaSksIHZhbHVlW2ldLCBzdGFjaywgc3BhY2VyLCBpbmRlbnRhdGlvbilcbiAgICAgICAgICByZXMgKz0gdG1wICE9PSB1bmRlZmluZWQgPyB0bXAgOiAnbnVsbCdcbiAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoIC0gMSA+IG1heGltdW1CcmVhZHRoKSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkS2V5cyA9IHZhbHVlLmxlbmd0aCAtIG1heGltdW1CcmVhZHRoIC0gMVxuICAgICAgICAgICAgcmVzICs9IGAke2pvaW59XCIuLi4gJHtnZXRJdGVtQ291bnQocmVtb3ZlZEtleXMpfSBub3Qgc3RyaW5naWZpZWRcImBcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzICs9IGBcXG4ke29yaWdpbmFsSW5kZW50YXRpb259YFxuICAgICAgICAgIHN0YWNrLnBvcCgpXG4gICAgICAgICAgcmV0dXJuIGBbJHtyZXN9XWBcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpXG4gICAgICAgIGNvbnN0IGtleUxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAgIGlmIChrZXlMZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gJ3t9J1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhpbXVtRGVwdGggPCBzdGFjay5sZW5ndGggKyAxKSB7XG4gICAgICAgICAgcmV0dXJuICdcIltPYmplY3RdXCInXG4gICAgICAgIH1cbiAgICAgICAgaW5kZW50YXRpb24gKz0gc3BhY2VyXG4gICAgICAgIGNvbnN0IGpvaW4gPSBgLFxcbiR7aW5kZW50YXRpb259YFxuICAgICAgICBsZXQgcmVzID0gJydcbiAgICAgICAgbGV0IHNlcGFyYXRvciA9ICcnXG4gICAgICAgIGxldCBtYXhpbXVtUHJvcGVydGllc1RvU3RyaW5naWZ5ID0gTWF0aC5taW4oa2V5TGVuZ3RoLCBtYXhpbXVtQnJlYWR0aClcbiAgICAgICAgaWYgKGlzVHlwZWRBcnJheVdpdGhFbnRyaWVzKHZhbHVlKSkge1xuICAgICAgICAgIHJlcyArPSBzdHJpbmdpZnlUeXBlZEFycmF5KHZhbHVlLCBqb2luLCBtYXhpbXVtQnJlYWR0aClcbiAgICAgICAgICBrZXlzID0ga2V5cy5zbGljZSh2YWx1ZS5sZW5ndGgpXG4gICAgICAgICAgbWF4aW11bVByb3BlcnRpZXNUb1N0cmluZ2lmeSAtPSB2YWx1ZS5sZW5ndGhcbiAgICAgICAgICBzZXBhcmF0b3IgPSBqb2luXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRldGVybWluaXN0aWMpIHtcbiAgICAgICAgICBrZXlzID0gc29ydChrZXlzLCBjb21wYXJhdG9yKVxuICAgICAgICB9XG4gICAgICAgIHN0YWNrLnB1c2godmFsdWUpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4aW11bVByb3BlcnRpZXNUb1N0cmluZ2lmeTsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXVxuICAgICAgICAgIGNvbnN0IHRtcCA9IHN0cmluZ2lmeUluZGVudChrZXksIHZhbHVlW2tleV0sIHN0YWNrLCBzcGFjZXIsIGluZGVudGF0aW9uKVxuICAgICAgICAgIGlmICh0bXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzICs9IGAke3NlcGFyYXRvcn0ke3N0ckVzY2FwZShrZXkpfTogJHt0bXB9YFxuICAgICAgICAgICAgc2VwYXJhdG9yID0gam9pblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5TGVuZ3RoID4gbWF4aW11bUJyZWFkdGgpIHtcbiAgICAgICAgICBjb25zdCByZW1vdmVkS2V5cyA9IGtleUxlbmd0aCAtIG1heGltdW1CcmVhZHRoXG4gICAgICAgICAgcmVzICs9IGAke3NlcGFyYXRvcn1cIi4uLlwiOiBcIiR7Z2V0SXRlbUNvdW50KHJlbW92ZWRLZXlzKX0gbm90IHN0cmluZ2lmaWVkXCJgXG4gICAgICAgICAgc2VwYXJhdG9yID0gam9pblxuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3IgIT09ICcnKSB7XG4gICAgICAgICAgcmVzID0gYFxcbiR7aW5kZW50YXRpb259JHtyZXN9XFxuJHtvcmlnaW5hbEluZGVudGF0aW9ufWBcbiAgICAgICAgfVxuICAgICAgICBzdGFjay5wb3AoKVxuICAgICAgICByZXR1cm4gYHske3Jlc319YFxuICAgICAgfVxuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHZhbHVlKSA/IFN0cmluZyh2YWx1ZSkgOiBmYWlsID8gZmFpbCh2YWx1ZSkgOiAnbnVsbCdcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgPyAndHJ1ZScgOiAnZmFsc2UnXG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICBjYXNlICdiaWdpbnQnOlxuICAgICAgICBpZiAoYmlnaW50KSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhaWwgPyBmYWlsKHZhbHVlKSA6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmluZ2lmeVNpbXBsZSAoa2V5LCB2YWx1ZSwgc3RhY2spIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHN0ckVzY2FwZSh2YWx1ZSlcbiAgICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICdudWxsJ1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT04oa2V5KVxuICAgICAgICAgIC8vIFByZXZlbnQgY2FsbGluZyBgdG9KU09OYCBhZ2FpblxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5naWZ5U2ltcGxlKGtleSwgdmFsdWUsIHN0YWNrKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAnbnVsbCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBjaXJjdWxhclZhbHVlXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzID0gJydcblxuICAgICAgICBjb25zdCBoYXNMZW5ndGggPSB2YWx1ZS5sZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICBpZiAoaGFzTGVuZ3RoICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICdbXSdcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGltdW1EZXB0aCA8IHN0YWNrLmxlbmd0aCArIDEpIHtcbiAgICAgICAgICAgIHJldHVybiAnXCJbQXJyYXldXCInXG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YWNrLnB1c2godmFsdWUpXG4gICAgICAgICAgY29uc3QgbWF4aW11bVZhbHVlc1RvU3RyaW5naWZ5ID0gTWF0aC5taW4odmFsdWUubGVuZ3RoLCBtYXhpbXVtQnJlYWR0aClcbiAgICAgICAgICBsZXQgaSA9IDBcbiAgICAgICAgICBmb3IgKDsgaSA8IG1heGltdW1WYWx1ZXNUb1N0cmluZ2lmeSAtIDE7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdG1wID0gc3RyaW5naWZ5U2ltcGxlKFN0cmluZyhpKSwgdmFsdWVbaV0sIHN0YWNrKVxuICAgICAgICAgICAgcmVzICs9IHRtcCAhPT0gdW5kZWZpbmVkID8gdG1wIDogJ251bGwnXG4gICAgICAgICAgICByZXMgKz0gJywnXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHRtcCA9IHN0cmluZ2lmeVNpbXBsZShTdHJpbmcoaSksIHZhbHVlW2ldLCBzdGFjaylcbiAgICAgICAgICByZXMgKz0gdG1wICE9PSB1bmRlZmluZWQgPyB0bXAgOiAnbnVsbCdcbiAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoIC0gMSA+IG1heGltdW1CcmVhZHRoKSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkS2V5cyA9IHZhbHVlLmxlbmd0aCAtIG1heGltdW1CcmVhZHRoIC0gMVxuICAgICAgICAgICAgcmVzICs9IGAsXCIuLi4gJHtnZXRJdGVtQ291bnQocmVtb3ZlZEtleXMpfSBub3Qgc3RyaW5naWZpZWRcImBcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2sucG9wKClcbiAgICAgICAgICByZXR1cm4gYFske3Jlc31dYFxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSlcbiAgICAgICAgY29uc3Qga2V5TGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICAgaWYgKGtleUxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiAne30nXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heGltdW1EZXB0aCA8IHN0YWNrLmxlbmd0aCArIDEpIHtcbiAgICAgICAgICByZXR1cm4gJ1wiW09iamVjdF1cIidcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2VwYXJhdG9yID0gJydcbiAgICAgICAgbGV0IG1heGltdW1Qcm9wZXJ0aWVzVG9TdHJpbmdpZnkgPSBNYXRoLm1pbihrZXlMZW5ndGgsIG1heGltdW1CcmVhZHRoKVxuICAgICAgICBpZiAoaGFzTGVuZ3RoICYmIGlzVHlwZWRBcnJheVdpdGhFbnRyaWVzKHZhbHVlKSkge1xuICAgICAgICAgIHJlcyArPSBzdHJpbmdpZnlUeXBlZEFycmF5KHZhbHVlLCAnLCcsIG1heGltdW1CcmVhZHRoKVxuICAgICAgICAgIGtleXMgPSBrZXlzLnNsaWNlKHZhbHVlLmxlbmd0aClcbiAgICAgICAgICBtYXhpbXVtUHJvcGVydGllc1RvU3RyaW5naWZ5IC09IHZhbHVlLmxlbmd0aFxuICAgICAgICAgIHNlcGFyYXRvciA9ICcsJ1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXRlcm1pbmlzdGljKSB7XG4gICAgICAgICAga2V5cyA9IHNvcnQoa2V5cywgY29tcGFyYXRvcilcbiAgICAgICAgfVxuICAgICAgICBzdGFjay5wdXNoKHZhbHVlKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heGltdW1Qcm9wZXJ0aWVzVG9TdHJpbmdpZnk7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV1cbiAgICAgICAgICBjb25zdCB0bXAgPSBzdHJpbmdpZnlTaW1wbGUoa2V5LCB2YWx1ZVtrZXldLCBzdGFjaylcbiAgICAgICAgICBpZiAodG1wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlcyArPSBgJHtzZXBhcmF0b3J9JHtzdHJFc2NhcGUoa2V5KX06JHt0bXB9YFxuICAgICAgICAgICAgc2VwYXJhdG9yID0gJywnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlMZW5ndGggPiBtYXhpbXVtQnJlYWR0aCkge1xuICAgICAgICAgIGNvbnN0IHJlbW92ZWRLZXlzID0ga2V5TGVuZ3RoIC0gbWF4aW11bUJyZWFkdGhcbiAgICAgICAgICByZXMgKz0gYCR7c2VwYXJhdG9yfVwiLi4uXCI6XCIke2dldEl0ZW1Db3VudChyZW1vdmVkS2V5cyl9IG5vdCBzdHJpbmdpZmllZFwiYFxuICAgICAgICB9XG4gICAgICAgIHN0YWNrLnBvcCgpXG4gICAgICAgIHJldHVybiBgeyR7cmVzfX1gXG4gICAgICB9XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IGZhaWwgPyBmYWlsKHZhbHVlKSA6ICdudWxsJ1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZSdcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgICAgIGlmIChiaWdpbnQpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFpbCA/IGZhaWwodmFsdWUpIDogdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5ICh2YWx1ZSwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBsZXQgc3BhY2VyID0gJydcbiAgICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNwYWNlciA9ICcgJy5yZXBlYXQoTWF0aC5taW4oc3BhY2UsIDEwKSlcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgICBzcGFjZXIgPSBzcGFjZS5zbGljZSgwLCAxMClcbiAgICAgIH1cbiAgICAgIGlmIChyZXBsYWNlciAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5naWZ5Rm5SZXBsYWNlcignJywgeyAnJzogdmFsdWUgfSwgW10sIHJlcGxhY2VyLCBzcGFjZXIsICcnKVxuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuICAgICAgICAgIHJldHVybiBzdHJpbmdpZnlBcnJheVJlcGxhY2VyKCcnLCB2YWx1ZSwgW10sIGdldFVuaXF1ZVJlcGxhY2VyU2V0KHJlcGxhY2VyKSwgc3BhY2VyLCAnJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNwYWNlci5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeUluZGVudCgnJywgdmFsdWUsIFtdLCBzcGFjZXIsICcnKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyaW5naWZ5U2ltcGxlKCcnLCB2YWx1ZSwgW10pXG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJ3NhZmUtc3RhYmxlLXN0cmluZ2lmeScpO1xuXG4vKlxuICogZnVuY3Rpb24gcmVwbGFjZXIgKGtleSwgdmFsdWUpXG4gKiBIYW5kbGVzIHByb3BlciBzdHJpbmdpZmljYXRpb24gb2YgQnVmZmVyIGFuZCBiaWdpbnQgb3V0cHV0LlxuICovXG5mdW5jdGlvbiByZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gIC8vIHNhZmUtc3RhYmxlLXN0cmluZ2lmeSBkb2VzIHN1cHBvcnQgQmlnSW50LCBob3dldmVyLCBpdCBkb2Vzbid0IHdyYXAgdGhlIHZhbHVlIGluIHF1b3Rlcy5cbiAgLy8gTGVhZGluZyB0byBhIGxvc3MgaW4gZmlkZWxpdHkgaWYgdGhlIHJlc3VsdGluZyBzdHJpbmcgaXMgcGFyc2VkLlxuICAvLyBJdCB3b3VsZCBhbHNvIGJlIGEgYnJlYWtpbmcgY2hhbmdlIGZvciBsb2dmb3JtLlxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JykgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLypcbiAqIGZ1bmN0aW9uIGpzb24gKGluZm8pXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBKU09OIGZvcm1hdCB0aGF0IHR1cm5zIGEgbG9nIGBpbmZvYFxuICogb2JqZWN0IGludG8gcHVyZSBKU09OLiBUaGlzIHdhcyBwcmV2aW91c2x5IGV4cG9zZWQgYXMgeyBqc29uOiB0cnVlIH1cbiAqIHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KGZ1bmN0aW9uIChpbmZvLCBvcHRzKSB7XG4gIHZhciBqc29uU3RyaW5naWZ5ID0gc3RyaW5naWZ5LmNvbmZpZ3VyZShvcHRzKTtcbiAgaW5mb1tNRVNTQUdFXSA9IGpzb25TdHJpbmdpZnkoaW5mbywgb3B0cy5yZXBsYWNlciB8fCByZXBsYWNlciwgb3B0cy5zcGFjZSk7XG4gIHJldHVybiBpbmZvO1xufSk7IiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGZvcm1hdCA9IHJlcXVpcmUoJy4vZm9ybWF0Jyk7XG5cbi8qXG4gKiBmdW5jdGlvbiBsYWJlbCAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGxhYmVsIEZvcm1hdCB3aGljaCBhZGRzIHRoZSBzcGVjaWZpZWRcbiAqIGBvcHRzLmxhYmVsYCBiZWZvcmUgdGhlIG1lc3NhZ2UuIFRoaXMgd2FzIHByZXZpb3VzbHkgZXhwb3NlZCBhc1xuICogeyBsYWJlbDogJ215IGxhYmVsJyB9IHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KGZ1bmN0aW9uIChpbmZvLCBvcHRzKSB7XG4gIGlmIChvcHRzLm1lc3NhZ2UpIHtcbiAgICBpbmZvLm1lc3NhZ2UgPSBcIltcIi5jb25jYXQob3B0cy5sYWJlbCwgXCJdIFwiKS5jb25jYXQoaW5mby5tZXNzYWdlKTtcbiAgICByZXR1cm4gaW5mbztcbiAgfVxuICBpbmZvLmxhYmVsID0gb3B0cy5sYWJlbDtcbiAgcmV0dXJuIGluZm87XG59KTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xudmFyIGpzb25TdHJpbmdpZnkgPSByZXF1aXJlKCdzYWZlLXN0YWJsZS1zdHJpbmdpZnknKTtcblxuLypcbiAqIGZ1bmN0aW9uIGxvZ3N0YXNoIChpbmZvKVxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgTG9nU3Rhc2ggRm9ybWF0IHRoYXQgdHVybnMgYVxuICogbG9nIGBpbmZvYCBvYmplY3QgaW50byBwdXJlIEpTT04gd2l0aCB0aGUgYXBwcm9wcmlhdGUgbG9nc3Rhc2hcbiAqIG9wdGlvbnMuIFRoaXMgd2FzIHByZXZpb3VzbHkgZXhwb3NlZCBhcyB7IGxvZ3N0YXNoOiB0cnVlIH1cbiAqIHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KGZ1bmN0aW9uIChpbmZvKSB7XG4gIHZhciBsb2dzdGFzaCA9IHt9O1xuICBpZiAoaW5mby5tZXNzYWdlKSB7XG4gICAgbG9nc3Rhc2hbJ0BtZXNzYWdlJ10gPSBpbmZvLm1lc3NhZ2U7XG4gICAgZGVsZXRlIGluZm8ubWVzc2FnZTtcbiAgfVxuICBpZiAoaW5mby50aW1lc3RhbXApIHtcbiAgICBsb2dzdGFzaFsnQHRpbWVzdGFtcCddID0gaW5mby50aW1lc3RhbXA7XG4gICAgZGVsZXRlIGluZm8udGltZXN0YW1wO1xuICB9XG4gIGxvZ3N0YXNoWydAZmllbGRzJ10gPSBpbmZvO1xuICBpbmZvW01FU1NBR0VdID0ganNvblN0cmluZ2lmeShsb2dzdGFzaCk7XG4gIHJldHVybiBpbmZvO1xufSk7IiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHsgcmV0dXJuIChyID0gX3RvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgeyB2YWx1ZTogdCwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbcl0gPSB0LCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIGZvcm1hdCA9IHJlcXVpcmUoJy4vZm9ybWF0Jyk7XG5mdW5jdGlvbiBmaWxsRXhjZXB0KGluZm8sIGZpbGxFeGNlcHRLZXlzLCBtZXRhZGF0YUtleSkge1xuICB2YXIgc2F2ZWRLZXlzID0gZmlsbEV4Y2VwdEtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIGFjY1trZXldID0gaW5mb1trZXldO1xuICAgIGRlbGV0ZSBpbmZvW2tleV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgbWV0YWRhdGEgPSBPYmplY3Qua2V5cyhpbmZvKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgYWNjW2tleV0gPSBpbmZvW2tleV07XG4gICAgZGVsZXRlIGluZm9ba2V5XTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIE9iamVjdC5hc3NpZ24oaW5mbywgc2F2ZWRLZXlzLCBfZGVmaW5lUHJvcGVydHkoe30sIG1ldGFkYXRhS2V5LCBtZXRhZGF0YSkpO1xuICByZXR1cm4gaW5mbztcbn1cbmZ1bmN0aW9uIGZpbGxXaXRoKGluZm8sIGZpbGxXaXRoS2V5cywgbWV0YWRhdGFLZXkpIHtcbiAgaW5mb1ttZXRhZGF0YUtleV0gPSBmaWxsV2l0aEtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIGFjY1trZXldID0gaW5mb1trZXldO1xuICAgIGRlbGV0ZSBpbmZvW2tleV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gaW5mbztcbn1cblxuLyoqXG4gKiBBZGRzIGluIGEgXCJtZXRhZGF0YVwiIG9iamVjdCB0byBjb2xsZWN0IGV4dHJhbmVvdXMgZGF0YSwgc2ltaWxhciB0byB0aGUgbWV0YWRhdGFcbiAqIG9iamVjdCBpbiB3aW5zdG9uIDIueC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQoZnVuY3Rpb24gKGluZm8pIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgbWV0YWRhdGFLZXkgPSAnbWV0YWRhdGEnO1xuICBpZiAob3B0cy5rZXkpIHtcbiAgICBtZXRhZGF0YUtleSA9IG9wdHMua2V5O1xuICB9XG4gIHZhciBmaWxsRXhjZXB0S2V5cyA9IFtdO1xuICBpZiAoIW9wdHMuZmlsbEV4Y2VwdCAmJiAhb3B0cy5maWxsV2l0aCkge1xuICAgIGZpbGxFeGNlcHRLZXlzLnB1c2goJ2xldmVsJyk7XG4gICAgZmlsbEV4Y2VwdEtleXMucHVzaCgnbWVzc2FnZScpO1xuICB9XG4gIGlmIChvcHRzLmZpbGxFeGNlcHQpIHtcbiAgICBmaWxsRXhjZXB0S2V5cyA9IG9wdHMuZmlsbEV4Y2VwdDtcbiAgfVxuICBpZiAoZmlsbEV4Y2VwdEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBmaWxsRXhjZXB0KGluZm8sIGZpbGxFeGNlcHRLZXlzLCBtZXRhZGF0YUtleSk7XG4gIH1cbiAgaWYgKG9wdHMuZmlsbFdpdGgpIHtcbiAgICByZXR1cm4gZmlsbFdpdGgoaW5mbywgb3B0cy5maWxsV2l0aCwgbWV0YWRhdGFLZXkpO1xuICB9XG4gIHJldHVybiBpbmZvO1xufSk7IiwgIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBfdGhpcyA9IHZvaWQgMDtcbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xudmFyIG1zID0gcmVxdWlyZSgnbXMnKTtcblxuLypcbiAqIGZ1bmN0aW9uIG1zIChpbmZvKVxuICogUmV0dXJucyBhbiBgaW5mb2Agd2l0aCBhIGBtc2AgcHJvcGVydHkuIFRoZSBgbXNgIHByb3BlcnR5IGhvbGRzIHRoZSBWYWx1ZVxuICogb2YgdGhlIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBjYWxscyBpbiBtaWxsaXNlY29uZHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KGZ1bmN0aW9uIChpbmZvKSB7XG4gIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gIF90aGlzLmRpZmYgPSBjdXJyIC0gKF90aGlzLnByZXZUaW1lIHx8IGN1cnIpO1xuICBfdGhpcy5wcmV2VGltZSA9IGN1cnI7XG4gIGluZm8ubXMgPSBcIitcIi5jb25jYXQobXMoX3RoaXMuZGlmZikpO1xuICByZXR1cm4gaW5mbztcbn0pOyIsICIndXNlIHN0cmljdCc7XG5cbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgndXRpbCcpLmluc3BlY3Q7XG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIExFVkVMID0gX3JlcXVpcmUuTEVWRUwsXG4gIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFLFxuICBTUExBVCA9IF9yZXF1aXJlLlNQTEFUO1xuXG4vKlxuICogZnVuY3Rpb24gcHJldHR5UHJpbnQgKGluZm8pXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcmV0dHlQcmludCBGb3JtYXQgdGhhdCBcInByZXR0eVByaW50XCJcbiAqIHNlcmlhbGl6ZXMgYGluZm9gIG9iamVjdHMuIFRoaXMgd2FzIHByZXZpb3VzbHkgZXhwb3NlZCBhc1xuICogeyBwcmV0dHlQcmludDogdHJ1ZSB9IHRvIHRyYW5zcG9ydHMgaW4gYHdpbnN0b24gPCAzLjAuMGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0KGZ1bmN0aW9uIChpbmZvKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgLy9cbiAgLy8gaW5mb1t7TEVWRUwsIE1FU1NBR0UsIFNQTEFUfV0gYXJlIGVudW1lcmFibGUgaGVyZS4gU2luY2UgdGhleVxuICAvLyBhcmUgaW50ZXJuYWwsIHdlIHJlbW92ZSB0aGVtIGJlZm9yZSB1dGlsLmluc3BlY3Qgc28gdGhleVxuICAvLyBhcmUgbm90IHByaW50ZWQuXG4gIC8vXG4gIHZhciBzdHJpcHBlZCA9IE9iamVjdC5hc3NpZ24oe30sIGluZm8pO1xuXG4gIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogdXBkYXRlIHRoaXMgdGVjaG5pcXVlIGluIEFwcmlsIDIwMTlcbiAgLy8gd2hlbiBub2RlQDYgaXMgRU9MXG4gIGRlbGV0ZSBzdHJpcHBlZFtMRVZFTF07XG4gIGRlbGV0ZSBzdHJpcHBlZFtNRVNTQUdFXTtcbiAgZGVsZXRlIHN0cmlwcGVkW1NQTEFUXTtcbiAgaW5mb1tNRVNTQUdFXSA9IGluc3BlY3Qoc3RyaXBwZWQsIGZhbHNlLCBvcHRzLmRlcHRoIHx8IG51bGwsIG9wdHMuY29sb3JpemUpO1xuICByZXR1cm4gaW5mbztcbn0pOyIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xudmFyIFByaW50ZiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByaW50Zih0ZW1wbGF0ZUZuKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByaW50Zik7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlRm47XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhQcmludGYsIFt7XG4gICAga2V5OiBcInRyYW5zZm9ybVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm0oaW5mbykge1xuICAgICAgaW5mb1tNRVNTQUdFXSA9IHRoaXMudGVtcGxhdGUoaW5mbyk7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gIH1dKTtcbn0oKTtcbi8qXG4gKiBmdW5jdGlvbiBwcmludGYgKHRlbXBsYXRlRm4pXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcmludGYgRm9ybWF0IHRoYXQgY3JlYXRlcyBhblxuICogaW50ZXJtZWRpYXRlIHByb3RvdHlwZSB0byBzdG9yZSB0aGUgdGVtcGxhdGUgc3RyaW5nLWJhc2VkIGZvcm1hdHRlclxuICogZnVuY3Rpb24uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBQcmludGYob3B0cyk7XG59O1xubW9kdWxlLmV4cG9ydHMuUHJpbnRmID0gbW9kdWxlLmV4cG9ydHMuRm9ybWF0ID0gUHJpbnRmOyIsICIvKiBlc2xpbnQgbm8tdW5kZWZpbmVkOiAwICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgTUVTU0FHRSA9IF9yZXF1aXJlLk1FU1NBR0U7XG52YXIganNvblN0cmluZ2lmeSA9IHJlcXVpcmUoJ3NhZmUtc3RhYmxlLXN0cmluZ2lmeScpO1xuXG4vKlxuICogZnVuY3Rpb24gc2ltcGxlIChpbmZvKVxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2ltcGxlIGZvcm1hdCBUcmFuc2Zvcm1TdHJlYW1cbiAqIHdoaWNoIHdyaXRlcyBhIHNpbXBsZSByZXByZXNlbnRhdGlvbiBvZiBsb2dzLlxuICpcbiAqICAgIGNvbnN0IHsgbGV2ZWwsIG1lc3NhZ2UsIHNwbGF0LCAuLi5yZXN0IH0gPSBpbmZvO1xuICpcbiAqICAgICR7bGV2ZWx9OiAke21lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlc3QgaXMgZW1wdHlcbiAqICAgICR7bGV2ZWx9OiAke21lc3NhZ2V9ICR7SlNPTi5zdHJpbmdpZnkocmVzdCl9ICAgIG90aGVyd2lzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdChmdW5jdGlvbiAoaW5mbykge1xuICB2YXIgc3RyaW5naWZpZWRSZXN0ID0ganNvblN0cmluZ2lmeShPYmplY3QuYXNzaWduKHt9LCBpbmZvLCB7XG4gICAgbGV2ZWw6IHVuZGVmaW5lZCxcbiAgICBtZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgc3BsYXQ6IHVuZGVmaW5lZFxuICB9KSk7XG4gIHZhciBwYWRkaW5nID0gaW5mby5wYWRkaW5nICYmIGluZm8ucGFkZGluZ1tpbmZvLmxldmVsXSB8fCAnJztcbiAgaWYgKHN0cmluZ2lmaWVkUmVzdCAhPT0gJ3t9Jykge1xuICAgIGluZm9bTUVTU0FHRV0gPSBcIlwiLmNvbmNhdChpbmZvLmxldmVsLCBcIjpcIikuY29uY2F0KHBhZGRpbmcsIFwiIFwiKS5jb25jYXQoaW5mby5tZXNzYWdlLCBcIiBcIikuY29uY2F0KHN0cmluZ2lmaWVkUmVzdCk7XG4gIH0gZWxzZSB7XG4gICAgaW5mb1tNRVNTQUdFXSA9IFwiXCIuY29uY2F0KGluZm8ubGV2ZWwsIFwiOlwiKS5jb25jYXQocGFkZGluZywgXCIgXCIpLmNvbmNhdChpbmZvLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBpbmZvO1xufSk7IiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KHIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5KHIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHsgaWYgKHIpIHsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTsgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTsgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7IH0gfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShyKSB7IGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgbnVsbCAhPSByW1N5bWJvbC5pdGVyYXRvcl0gfHwgbnVsbCAhPSByW1wiQEBpdGVyYXRvclwiXSkgcmV0dXJuIEFycmF5LmZyb20ocik7IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB7IGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkocik7IH1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHsgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpOyBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTsgcmV0dXJuIG47IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgU1BMQVQgPSBfcmVxdWlyZS5TUExBVDtcblxuLyoqXG4gKiBDYXB0dXJlcyB0aGUgbnVtYmVyIG9mIGZvcm1hdCAoaS5lLiAlcyBzdHJpbmdzKSBpbiBhIGdpdmVuIHN0cmluZy5cbiAqIEJhc2VkIG9uIGB1dGlsLmZvcm1hdGAsIHNlZSBOb2RlLmpzIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL2IxYzhmMTVjNWYxNjllMDIxZjdjNDZlYjdiMjE5ZGU5NWZlOTc2MDMvbGliL3V0aWwuanMjTDIwMS1MMjMwXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2Nkamlmb08lXS9nO1xuXG4vKipcbiAqIENhcHR1cmVzIHRoZSBudW1iZXIgb2YgZXNjYXBlZCAlIHNpZ25zIGluIGEgZm9ybWF0IHN0cmluZyAoaS5lLiAlcyBzdHJpbmdzKS5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBlc2NhcGVkUGVyY2VudCA9IC8lJS9nO1xudmFyIFNwbGF0dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3BsYXR0ZXIob3B0cykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcGxhdHRlcik7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0cztcbiAgfVxuXG4gIC8qKlxuICAgICAqIENoZWNrIHRvIHNlZSBpZiB0b2tlbnMgPD0gc3BsYXQubGVuZ3RoLCBhc3NpZ24geyBzcGxhdCwgbWV0YSB9IGludG8gdGhlXG4gICAgICogYGluZm9gIGFjY29yZGluZ2x5LCBhbmQgd3JpdGUgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0luZm99IGluZm8gTG9nZm9ybSBpbmZvIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtICB7U3RyaW5nW119IHRva2VucyBTZXQgb2Ygc3RyaW5nIGludGVycG9sYXRpb24gdG9rZW5zLlxuICAgICAqIEByZXR1cm5zIHtJbmZvfSBNb2RpZmllZCBpbmZvIG1lc3NhZ2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFNwbGF0dGVyLCBbe1xuICAgIGtleTogXCJfc3BsYXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NwbGF0KGluZm8sIHRva2Vucykge1xuICAgICAgdmFyIG1zZyA9IGluZm8ubWVzc2FnZTtcbiAgICAgIHZhciBzcGxhdCA9IGluZm9bU1BMQVRdIHx8IGluZm8uc3BsYXQgfHwgW107XG4gICAgICB2YXIgcGVyY2VudHMgPSBtc2cubWF0Y2goZXNjYXBlZFBlcmNlbnQpO1xuICAgICAgdmFyIGVzY2FwZXMgPSBwZXJjZW50cyAmJiBwZXJjZW50cy5sZW5ndGggfHwgMDtcblxuICAgICAgLy8gVGhlIGV4cGVjdGVkIHNwbGF0IGlzIHRoZSBudW1iZXIgb2YgdG9rZW5zIG1pbnVzIHRoZSBudW1iZXIgb2YgZXNjYXBlc1xuICAgICAgLy8gZS5nLlxuICAgICAgLy8gLSB7IGV4cGVjdGVkU3BsYXQ6IDMgfSAnJWQgJXMgJWonXG4gICAgICAvLyAtIHsgZXhwZWN0ZWRTcGxhdDogNSB9ICdbJXNdICVkJSUgJWQlJSAlcyAlaidcbiAgICAgIC8vXG4gICAgICAvLyBBbnkgXCJtZXRhXCIgd2lsbCBiZSBhcnVnbWVudHMgaW4gYWRkaXRpb24gdG8gdGhlIGV4cGVjdGVkIHNwbGF0IHNpemVcbiAgICAgIC8vIHJlZ2FyZGxlc3Mgb2YgdHlwZS4gZS5nLlxuICAgICAgLy9cbiAgICAgIC8vIGxvZ2dlci5sb2coJ2luZm8nLCAnJWQlJSAlcyAlaicsIDEwMCwgJ3dvdycsIHsgc3VjaDogJ2pzJyB9LCB7IHRoaXNJc01ldGE6IHRydWUgfSk7XG4gICAgICAvLyB3b3VsZCByZXN1bHQgaW4gc3BsYXQgb2YgZm91ciAoNCksIGJ1dCBvbmx5IHRocmVlICgzKSBhcmUgZXhwZWN0ZWQuIFRoZXJlZm9yZTpcbiAgICAgIC8vXG4gICAgICAvLyBleHRyYVNwbGF0ID0gMyAtIDQgPSAtMVxuICAgICAgLy8gbWV0YXMgPSBbMTAwLCAnd293JywgeyBzdWNoOiAnanMnIH0sIHsgdGhpc0lzTWV0YTogdHJ1ZSB9XS5zcGxpY2UoLTEsIC0xICogLTEpO1xuICAgICAgLy8gc3BsYXQgPSBbMTAwLCAnd293JywgeyBzdWNoOiAnanMnIH1dXG4gICAgICB2YXIgZXhwZWN0ZWRTcGxhdCA9IHRva2Vucy5sZW5ndGggLSBlc2NhcGVzO1xuICAgICAgdmFyIGV4dHJhU3BsYXQgPSBleHBlY3RlZFNwbGF0IC0gc3BsYXQubGVuZ3RoO1xuICAgICAgdmFyIG1ldGFzID0gZXh0cmFTcGxhdCA8IDAgPyBzcGxhdC5zcGxpY2UoZXh0cmFTcGxhdCwgLTEgKiBleHRyYVNwbGF0KSA6IFtdO1xuXG4gICAgICAvLyBOb3cgdGhhdCB7IHNwbGF0IH0gaGFzIGJlZW4gc2VwYXJhdGVkIGZyb20gYW55IHBvdGVudGlhbCB7IG1ldGEgfS4gd2VcbiAgICAgIC8vIGNhbiBhc3NpZ24gdGhpcyB0byB0aGUgYGluZm9gIG9iamVjdCBhbmQgd3JpdGUgaXQgdG8gb3VyIGZvcm1hdCBzdHJlYW0uXG4gICAgICAvLyBJZiB0aGUgYWRkaXRpb25hbCBtZXRhcyBhcmUgKipOT1QqKiBvYmplY3RzIG9yICoqTEFDSyoqIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAgLy8geW91IGFyZSBnb2luZyB0byBoYXZlIGEgYmFkIHRpbWUuXG4gICAgICB2YXIgbWV0YWxlbiA9IG1ldGFzLmxlbmd0aDtcbiAgICAgIGlmIChtZXRhbGVuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0YWxlbjsgaSsrKSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihpbmZvLCBtZXRhc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluZm8ubWVzc2FnZSA9IHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIFttc2ddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3BsYXQpKSk7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgICogVHJhbnNmb3JtcyB0aGUgYGluZm9gIG1lc3NhZ2UgYnkgdXNpbmcgYHV0aWwuZm9ybWF0YCB0byBjb21wbGV0ZVxuICAgICAgKiBhbnkgYGluZm8ubWVzc2FnZWAgcHJvdmlkZWQgaXQgaGFzIHN0cmluZyBpbnRlcnBvbGF0aW9uIHRva2Vucy5cbiAgICAgICogSWYgbm8gdG9rZW5zIGV4aXN0IHRoZW4gYGluZm9gIGlzIGltbXV0YWJsZS5cbiAgICAgICpcbiAgICAgICogQHBhcmFtICB7SW5mb30gaW5mbyBMb2dmb3JtIGluZm8gbWVzc2FnZS5cbiAgICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRzIE9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICAqIEByZXR1cm5zIHtJbmZvfSBNb2RpZmllZCBpbmZvIG1lc3NhZ2VcbiAgICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidHJhbnNmb3JtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybShpbmZvKSB7XG4gICAgICB2YXIgbXNnID0gaW5mby5tZXNzYWdlO1xuICAgICAgdmFyIHNwbGF0ID0gaW5mb1tTUExBVF0gfHwgaW5mby5zcGxhdDtcblxuICAgICAgLy8gTm8gbmVlZCB0byBwcm9jZXNzIGFueXRoaW5nIGlmIHNwbGF0IGlzIHVuZGVmaW5lZFxuICAgICAgaWYgKCFzcGxhdCB8fCAhc3BsYXQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgfVxuXG4gICAgICAvLyBFeHRyYWN0IHRva2VucywgaWYgbm9uZSBhdmFpbGFibGUgZGVmYXVsdCB0byBlbXB0eSBhcnJheSB0b1xuICAgICAgLy8gZW5zdXJlIGNvbnNpc3RhbmN5IGluIGV4cGVjdGVkIHJlc3VsdHNcbiAgICAgIHZhciB0b2tlbnMgPSBtc2cgJiYgbXNnLm1hdGNoICYmIG1zZy5tYXRjaChmb3JtYXRSZWdFeHApO1xuXG4gICAgICAvLyBUaGlzIGNvbmRpdGlvbiB3aWxsIHRha2UgY2FyZSBvZiBpbnB1dHMgd2l0aCBpbmZvW1NQTEFUXVxuICAgICAgLy8gYnV0IG5vIHRva2VucyBwcmVzZW50XG4gICAgICBpZiAoIXRva2VucyAmJiAoc3BsYXQgfHwgc3BsYXQubGVuZ3RoKSkge1xuICAgICAgICB2YXIgbWV0YXMgPSBzcGxhdC5sZW5ndGggPiAxID8gc3BsYXQuc3BsaWNlKDApIDogc3BsYXQ7XG5cbiAgICAgICAgLy8gTm93IHRoYXQgeyBzcGxhdCB9IGhhcyBiZWVuIHNlcGFyYXRlZCBmcm9tIGFueSBwb3RlbnRpYWwgeyBtZXRhIH0uIHdlXG4gICAgICAgIC8vIGNhbiBhc3NpZ24gdGhpcyB0byB0aGUgYGluZm9gIG9iamVjdCBhbmQgd3JpdGUgaXQgdG8gb3VyIGZvcm1hdCBzdHJlYW0uXG4gICAgICAgIC8vIElmIHRoZSBhZGRpdGlvbmFsIG1ldGFzIGFyZSAqKk5PVCoqIG9iamVjdHMgb3IgKipMQUNLKiogZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIHlvdSBhcmUgZ29pbmcgdG8gaGF2ZSBhIGJhZCB0aW1lLlxuICAgICAgICB2YXIgbWV0YWxlbiA9IG1ldGFzLmxlbmd0aDtcbiAgICAgICAgaWYgKG1ldGFsZW4pIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGFsZW47IGkrKykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpbmZvLCBtZXRhc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgfVxuICAgICAgaWYgKHRva2Vucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BsYXQoaW5mbywgdG9rZW5zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgfV0pO1xufSgpO1xuLypcbiAqIGZ1bmN0aW9uIHNwbGF0IChpbmZvKVxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgc3BsYXQgZm9ybWF0IFRyYW5zZm9ybVN0cmVhbVxuICogd2hpY2ggcGVyZm9ybXMgc3RyaW5nIGludGVycG9sYXRpb24gZnJvbSBgaW5mb2Agb2JqZWN0cy4gVGhpcyB3YXNcbiAqIHByZXZpb3VzbHkgZXhwb3NlZCBpbXBsaWNpdGx5IGluIGB3aW5zdG9uIDwgMy4wLjBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHJldHVybiBuZXcgU3BsYXR0ZXIob3B0cyk7XG59OyIsICJjb25zdCB0b2tlbiA9IC9kezEsNH18TXsxLDR9fFlZKD86WVkpP3xTezEsM318RG98Wlp8WnwoW0hoTXNEbV0pXFwxP3xbYUFdfFwiW15cIl0qXCJ8J1teJ10qJy9nO1xuY29uc3QgdHdvRGlnaXRzT3B0aW9uYWwgPSBcIlxcXFxkXFxcXGQ/XCI7XG5jb25zdCB0d29EaWdpdHMgPSBcIlxcXFxkXFxcXGRcIjtcbmNvbnN0IHRocmVlRGlnaXRzID0gXCJcXFxcZHszfVwiO1xuY29uc3QgZm91ckRpZ2l0cyA9IFwiXFxcXGR7NH1cIjtcbmNvbnN0IHdvcmQgPSBcIlteXFxcXHNdK1wiO1xuY29uc3QgbGl0ZXJhbCA9IC9cXFsoW15dKj8pXFxdL2dtO1xuXG50eXBlIERhdGVJbmZvID0ge1xuICB5ZWFyOiBudW1iZXI7XG4gIG1vbnRoOiBudW1iZXI7XG4gIGRheTogbnVtYmVyO1xuICBob3VyOiBudW1iZXI7XG4gIG1pbnV0ZTogbnVtYmVyO1xuICBzZWNvbmQ6IG51bWJlcjtcbiAgbWlsbGlzZWNvbmQ6IG51bWJlcjtcbiAgaXNQbTogbnVtYmVyIHwgbnVsbDtcbiAgdGltZXpvbmVPZmZzZXQ6IG51bWJlciB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBJMThuU2V0dGluZ3MgPSB7XG4gIGFtUG06IFtzdHJpbmcsIHN0cmluZ107XG4gIGRheU5hbWVzOiBEYXlzO1xuICBkYXlOYW1lc1Nob3J0OiBEYXlzO1xuICBtb250aE5hbWVzOiBNb250aHM7XG4gIG1vbnRoTmFtZXNTaG9ydDogTW9udGhzO1xuICBEb0ZuKGRheU9mTW9udGg6IG51bWJlcik6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIEkxOG5TZXR0aW5nc09wdGlvbmFsID0gUGFydGlhbDxJMThuU2V0dGluZ3M+O1xuXG5leHBvcnQgdHlwZSBEYXlzID0gW3N0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZ107XG5leHBvcnQgdHlwZSBNb250aHMgPSBbXG4gIHN0cmluZyxcbiAgc3RyaW5nLFxuICBzdHJpbmcsXG4gIHN0cmluZyxcbiAgc3RyaW5nLFxuICBzdHJpbmcsXG4gIHN0cmluZyxcbiAgc3RyaW5nLFxuICBzdHJpbmcsXG4gIHN0cmluZyxcbiAgc3RyaW5nLFxuICBzdHJpbmdcbl07XG5cbmZ1bmN0aW9uIHNob3J0ZW48VCBleHRlbmRzIHN0cmluZ1tdPihhcnI6IFQsIHNMZW46IG51bWJlcik6IHN0cmluZ1tdIHtcbiAgY29uc3QgbmV3QXJyOiBzdHJpbmdbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgbmV3QXJyLnB1c2goYXJyW2ldLnN1YnN0cigwLCBzTGVuKSk7XG4gIH1cbiAgcmV0dXJuIG5ld0Fycjtcbn1cblxuY29uc3QgbW9udGhVcGRhdGUgPSAoXG4gIGFyck5hbWU6IFwibW9udGhOYW1lc1wiIHwgXCJtb250aE5hbWVzU2hvcnRcIiB8IFwiZGF5TmFtZXNcIiB8IFwiZGF5TmFtZXNTaG9ydFwiXG4pID0+ICh2OiBzdHJpbmcsIGkxOG46IEkxOG5TZXR0aW5ncyk6IG51bWJlciB8IG51bGwgPT4ge1xuICBjb25zdCBsb3dlckNhc2VBcnIgPSBpMThuW2Fyck5hbWVdLm1hcCh2ID0+IHYudG9Mb3dlckNhc2UoKSk7XG4gIGNvbnN0IGluZGV4ID0gbG93ZXJDYXNlQXJyLmluZGV4T2Yodi50b0xvd2VyQ2FzZSgpKTtcbiAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPEE+KGE6IEEpOiBBO1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbjxBLCBCPihhOiBBLCBiOiBCKTogQSAmIEI7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPEEsIEIsIEM+KGE6IEEsIGI6IEIsIGM6IEMpOiBBICYgQiAmIEM7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPEEsIEIsIEMsIEQ+KGE6IEEsIGI6IEIsIGM6IEMsIGQ6IEQpOiBBICYgQiAmIEMgJiBEO1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbihvcmlnT2JqOiBhbnksIC4uLmFyZ3M6IGFueVtdKTogYW55IHtcbiAgZm9yIChjb25zdCBvYmogb2YgYXJncykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgLy8gQHRzLWlnbm9yZSBleFxuICAgICAgb3JpZ09ialtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvcmlnT2JqO1xufVxuXG5jb25zdCBkYXlOYW1lczogRGF5cyA9IFtcbiAgXCJTdW5kYXlcIixcbiAgXCJNb25kYXlcIixcbiAgXCJUdWVzZGF5XCIsXG4gIFwiV2VkbmVzZGF5XCIsXG4gIFwiVGh1cnNkYXlcIixcbiAgXCJGcmlkYXlcIixcbiAgXCJTYXR1cmRheVwiXG5dO1xuY29uc3QgbW9udGhOYW1lczogTW9udGhzID0gW1xuICBcIkphbnVhcnlcIixcbiAgXCJGZWJydWFyeVwiLFxuICBcIk1hcmNoXCIsXG4gIFwiQXByaWxcIixcbiAgXCJNYXlcIixcbiAgXCJKdW5lXCIsXG4gIFwiSnVseVwiLFxuICBcIkF1Z3VzdFwiLFxuICBcIlNlcHRlbWJlclwiLFxuICBcIk9jdG9iZXJcIixcbiAgXCJOb3ZlbWJlclwiLFxuICBcIkRlY2VtYmVyXCJcbl07XG5cbmNvbnN0IG1vbnRoTmFtZXNTaG9ydDogTW9udGhzID0gc2hvcnRlbihtb250aE5hbWVzLCAzKSBhcyBNb250aHM7XG5jb25zdCBkYXlOYW1lc1Nob3J0OiBEYXlzID0gc2hvcnRlbihkYXlOYW1lcywgMykgYXMgRGF5cztcblxuY29uc3QgZGVmYXVsdEkxOG46IEkxOG5TZXR0aW5ncyA9IHtcbiAgZGF5TmFtZXNTaG9ydCxcbiAgZGF5TmFtZXMsXG4gIG1vbnRoTmFtZXNTaG9ydCxcbiAgbW9udGhOYW1lcyxcbiAgYW1QbTogW1wiYW1cIiwgXCJwbVwiXSxcbiAgRG9GbihkYXlPZk1vbnRoOiBudW1iZXIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZGF5T2ZNb250aCArXG4gICAgICBbXCJ0aFwiLCBcInN0XCIsIFwibmRcIiwgXCJyZFwiXVtcbiAgICAgICAgZGF5T2ZNb250aCAlIDEwID4gM1xuICAgICAgICAgID8gMFxuICAgICAgICAgIDogKChkYXlPZk1vbnRoIC0gKGRheU9mTW9udGggJSAxMCkgIT09IDEwID8gMSA6IDApICogZGF5T2ZNb250aCkgJSAxMFxuICAgICAgXVxuICAgICk7XG4gIH1cbn07XG5sZXQgZ2xvYmFsSTE4biA9IGFzc2lnbih7fSwgZGVmYXVsdEkxOG4pO1xuY29uc3Qgc2V0R2xvYmFsRGF0ZUkxOG4gPSAoaTE4bjogSTE4blNldHRpbmdzT3B0aW9uYWwpOiBJMThuU2V0dGluZ3MgPT5cbiAgKGdsb2JhbEkxOG4gPSBhc3NpZ24oZ2xvYmFsSTE4biwgaTE4bikpO1xuXG5jb25zdCByZWdleEVzY2FwZSA9IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PlxuICBzdHIucmVwbGFjZSgvW3xcXFxceygpW14kKyo/Li1dL2csIFwiXFxcXCQmXCIpO1xuXG5jb25zdCBwYWQgPSAodmFsOiBzdHJpbmcgfCBudW1iZXIsIGxlbiA9IDIpOiBzdHJpbmcgPT4ge1xuICB2YWwgPSBTdHJpbmcodmFsKTtcbiAgd2hpbGUgKHZhbC5sZW5ndGggPCBsZW4pIHtcbiAgICB2YWwgPSBcIjBcIiArIHZhbDtcbiAgfVxuICByZXR1cm4gdmFsO1xufTtcblxuY29uc3QgZm9ybWF0RmxhZ3M6IFJlY29yZDxcbiAgc3RyaW5nLFxuICAoZGF0ZU9iajogRGF0ZSwgaTE4bjogSTE4blNldHRpbmdzKSA9PiBzdHJpbmdcbj4gPSB7XG4gIEQ6IChkYXRlT2JqOiBEYXRlKTogc3RyaW5nID0+IFN0cmluZyhkYXRlT2JqLmdldERhdGUoKSksXG4gIEREOiAoZGF0ZU9iajogRGF0ZSk6IHN0cmluZyA9PiBwYWQoZGF0ZU9iai5nZXREYXRlKCkpLFxuICBEbzogKGRhdGVPYmo6IERhdGUsIGkxOG46IEkxOG5TZXR0aW5ncyk6IHN0cmluZyA9PlxuICAgIGkxOG4uRG9GbihkYXRlT2JqLmdldERhdGUoKSksXG4gIGQ6IChkYXRlT2JqOiBEYXRlKTogc3RyaW5nID0+IFN0cmluZyhkYXRlT2JqLmdldERheSgpKSxcbiAgZGQ6IChkYXRlT2JqOiBEYXRlKTogc3RyaW5nID0+IHBhZChkYXRlT2JqLmdldERheSgpKSxcbiAgZGRkOiAoZGF0ZU9iajogRGF0ZSwgaTE4bjogSTE4blNldHRpbmdzKTogc3RyaW5nID0+XG4gICAgaTE4bi5kYXlOYW1lc1Nob3J0W2RhdGVPYmouZ2V0RGF5KCldLFxuICBkZGRkOiAoZGF0ZU9iajogRGF0ZSwgaTE4bjogSTE4blNldHRpbmdzKTogc3RyaW5nID0+XG4gICAgaTE4bi5kYXlOYW1lc1tkYXRlT2JqLmdldERheSgpXSxcbiAgTTogKGRhdGVPYmo6IERhdGUpOiBzdHJpbmcgPT4gU3RyaW5nKGRhdGVPYmouZ2V0TW9udGgoKSArIDEpLFxuICBNTTogKGRhdGVPYmo6IERhdGUpOiBzdHJpbmcgPT4gcGFkKGRhdGVPYmouZ2V0TW9udGgoKSArIDEpLFxuICBNTU06IChkYXRlT2JqOiBEYXRlLCBpMThuOiBJMThuU2V0dGluZ3MpOiBzdHJpbmcgPT5cbiAgICBpMThuLm1vbnRoTmFtZXNTaG9ydFtkYXRlT2JqLmdldE1vbnRoKCldLFxuICBNTU1NOiAoZGF0ZU9iajogRGF0ZSwgaTE4bjogSTE4blNldHRpbmdzKTogc3RyaW5nID0+XG4gICAgaTE4bi5tb250aE5hbWVzW2RhdGVPYmouZ2V0TW9udGgoKV0sXG4gIFlZOiAoZGF0ZU9iajogRGF0ZSk6IHN0cmluZyA9PlxuICAgIHBhZChTdHJpbmcoZGF0ZU9iai5nZXRGdWxsWWVhcigpKSwgNCkuc3Vic3RyKDIpLFxuICBZWVlZOiAoZGF0ZU9iajogRGF0ZSk6IHN0cmluZyA9PiBwYWQoZGF0ZU9iai5nZXRGdWxsWWVhcigpLCA0KSxcbiAgaDogKGRhdGVPYmo6IERhdGUpOiBzdHJpbmcgPT4gU3RyaW5nKGRhdGVPYmouZ2V0SG91cnMoKSAlIDEyIHx8IDEyKSxcbiAgaGg6IChkYXRlT2JqOiBEYXRlKTogc3RyaW5nID0+IHBhZChkYXRlT2JqLmdldEhvdXJzKCkgJSAxMiB8fCAxMiksXG4gIEg6IChkYXRlT2JqOiBEYXRlKTogc3RyaW5nID0+IFN0cmluZyhkYXRlT2JqLmdldEhvdXJzKCkpLFxuICBISDogKGRhdGVPYmo6IERhdGUpOiBzdHJpbmcgPT4gcGFkKGRhdGVPYmouZ2V0SG91cnMoKSksXG4gIG06IChkYXRlT2JqOiBEYXRlKTogc3RyaW5nID0+IFN0cmluZyhkYXRlT2JqLmdldE1pbnV0ZXMoKSksXG4gIG1tOiAoZGF0ZU9iajogRGF0ZSk6IHN0cmluZyA9PiBwYWQoZGF0ZU9iai5nZXRNaW51dGVzKCkpLFxuICBzOiAoZGF0ZU9iajogRGF0ZSk6IHN0cmluZyA9PiBTdHJpbmcoZGF0ZU9iai5nZXRTZWNvbmRzKCkpLFxuICBzczogKGRhdGVPYmo6IERhdGUpOiBzdHJpbmcgPT4gcGFkKGRhdGVPYmouZ2V0U2Vjb25kcygpKSxcbiAgUzogKGRhdGVPYmo6IERhdGUpOiBzdHJpbmcgPT5cbiAgICBTdHJpbmcoTWF0aC5yb3VuZChkYXRlT2JqLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwKSksXG4gIFNTOiAoZGF0ZU9iajogRGF0ZSk6IHN0cmluZyA9PlxuICAgIHBhZChNYXRoLnJvdW5kKGRhdGVPYmouZ2V0TWlsbGlzZWNvbmRzKCkgLyAxMCksIDIpLFxuICBTU1M6IChkYXRlT2JqOiBEYXRlKTogc3RyaW5nID0+IHBhZChkYXRlT2JqLmdldE1pbGxpc2Vjb25kcygpLCAzKSxcbiAgYTogKGRhdGVPYmo6IERhdGUsIGkxOG46IEkxOG5TZXR0aW5ncyk6IHN0cmluZyA9PlxuICAgIGRhdGVPYmouZ2V0SG91cnMoKSA8IDEyID8gaTE4bi5hbVBtWzBdIDogaTE4bi5hbVBtWzFdLFxuICBBOiAoZGF0ZU9iajogRGF0ZSwgaTE4bjogSTE4blNldHRpbmdzKTogc3RyaW5nID0+XG4gICAgZGF0ZU9iai5nZXRIb3VycygpIDwgMTJcbiAgICAgID8gaTE4bi5hbVBtWzBdLnRvVXBwZXJDYXNlKClcbiAgICAgIDogaTE4bi5hbVBtWzFdLnRvVXBwZXJDYXNlKCksXG4gIFpaKGRhdGVPYmo6IERhdGUpOiBzdHJpbmcge1xuICAgIGNvbnN0IG9mZnNldCA9IGRhdGVPYmouZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICByZXR1cm4gKFxuICAgICAgKG9mZnNldCA+IDAgPyBcIi1cIiA6IFwiK1wiKSArXG4gICAgICBwYWQoTWF0aC5mbG9vcihNYXRoLmFicyhvZmZzZXQpIC8gNjApICogMTAwICsgKE1hdGguYWJzKG9mZnNldCkgJSA2MCksIDQpXG4gICAgKTtcbiAgfSxcbiAgWihkYXRlT2JqOiBEYXRlKTogc3RyaW5nIHtcbiAgICBjb25zdCBvZmZzZXQgPSBkYXRlT2JqLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgcmV0dXJuIChcbiAgICAgIChvZmZzZXQgPiAwID8gXCItXCIgOiBcIitcIikgK1xuICAgICAgcGFkKE1hdGguZmxvb3IoTWF0aC5hYnMob2Zmc2V0KSAvIDYwKSwgMikgK1xuICAgICAgXCI6XCIgK1xuICAgICAgcGFkKE1hdGguYWJzKG9mZnNldCkgJSA2MCwgMilcbiAgICApO1xuICB9XG59O1xuXG50eXBlIFBhcnNlSW5mbyA9IFtcbiAga2V5b2YgRGF0ZUluZm8sXG4gIHN0cmluZyxcbiAgKCh2OiBzdHJpbmcsIGkxOG46IEkxOG5TZXR0aW5ncykgPT4gbnVtYmVyIHwgbnVsbCk/LFxuICBzdHJpbmc/XG5dO1xuY29uc3QgbW9udGhQYXJzZSA9ICh2OiBzdHJpbmcpOiBudW1iZXIgPT4gK3YgLSAxO1xuY29uc3QgZW1wdHlEaWdpdHM6IFBhcnNlSW5mbyA9IFtudWxsLCB0d29EaWdpdHNPcHRpb25hbF07XG5jb25zdCBlbXB0eVdvcmQ6IFBhcnNlSW5mbyA9IFtudWxsLCB3b3JkXTtcbmNvbnN0IGFtUG06IFBhcnNlSW5mbyA9IFtcbiAgXCJpc1BtXCIsXG4gIHdvcmQsXG4gICh2OiBzdHJpbmcsIGkxOG46IEkxOG5TZXR0aW5ncyk6IG51bWJlciB8IG51bGwgPT4ge1xuICAgIGNvbnN0IHZhbCA9IHYudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAodmFsID09PSBpMThuLmFtUG1bMF0pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAodmFsID09PSBpMThuLmFtUG1bMV0pIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXTtcbmNvbnN0IHRpbWV6b25lT2Zmc2V0OiBQYXJzZUluZm8gPSBbXG4gIFwidGltZXpvbmVPZmZzZXRcIixcbiAgXCJbXlxcXFxzXSo/W1xcXFwrXFxcXC1dXFxcXGRcXFxcZDo/XFxcXGRcXFxcZHxbXlxcXFxzXSo/Wj9cIixcbiAgKHY6IHN0cmluZyk6IG51bWJlciB8IG51bGwgPT4ge1xuICAgIGNvbnN0IHBhcnRzID0gKHYgKyBcIlwiKS5tYXRjaCgvKFsrLV18XFxkXFxkKS9naSk7XG5cbiAgICBpZiAocGFydHMpIHtcbiAgICAgIGNvbnN0IG1pbnV0ZXMgPSArcGFydHNbMV0gKiA2MCArIHBhcnNlSW50KHBhcnRzWzJdLCAxMCk7XG4gICAgICByZXR1cm4gcGFydHNbMF0gPT09IFwiK1wiID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG5dO1xuY29uc3QgcGFyc2VGbGFnczogUmVjb3JkPHN0cmluZywgUGFyc2VJbmZvPiA9IHtcbiAgRDogW1wiZGF5XCIsIHR3b0RpZ2l0c09wdGlvbmFsXSxcbiAgREQ6IFtcImRheVwiLCB0d29EaWdpdHNdLFxuICBEbzogW1wiZGF5XCIsIHR3b0RpZ2l0c09wdGlvbmFsICsgd29yZCwgKHY6IHN0cmluZyk6IG51bWJlciA9PiBwYXJzZUludCh2LCAxMCldLFxuICBNOiBbXCJtb250aFwiLCB0d29EaWdpdHNPcHRpb25hbCwgbW9udGhQYXJzZV0sXG4gIE1NOiBbXCJtb250aFwiLCB0d29EaWdpdHMsIG1vbnRoUGFyc2VdLFxuICBZWTogW1xuICAgIFwieWVhclwiLFxuICAgIHR3b0RpZ2l0cyxcbiAgICAodjogc3RyaW5nKTogbnVtYmVyID0+IHtcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBjZW50ID0gKyhcIlwiICsgbm93LmdldEZ1bGxZZWFyKCkpLnN1YnN0cigwLCAyKTtcbiAgICAgIHJldHVybiArKFwiXCIgKyAoK3YgPiA2OCA/IGNlbnQgLSAxIDogY2VudCkgKyB2KTtcbiAgICB9XG4gIF0sXG4gIGg6IFtcImhvdXJcIiwgdHdvRGlnaXRzT3B0aW9uYWwsIHVuZGVmaW5lZCwgXCJpc1BtXCJdLFxuICBoaDogW1wiaG91clwiLCB0d29EaWdpdHMsIHVuZGVmaW5lZCwgXCJpc1BtXCJdLFxuICBIOiBbXCJob3VyXCIsIHR3b0RpZ2l0c09wdGlvbmFsXSxcbiAgSEg6IFtcImhvdXJcIiwgdHdvRGlnaXRzXSxcbiAgbTogW1wibWludXRlXCIsIHR3b0RpZ2l0c09wdGlvbmFsXSxcbiAgbW06IFtcIm1pbnV0ZVwiLCB0d29EaWdpdHNdLFxuICBzOiBbXCJzZWNvbmRcIiwgdHdvRGlnaXRzT3B0aW9uYWxdLFxuICBzczogW1wic2Vjb25kXCIsIHR3b0RpZ2l0c10sXG4gIFlZWVk6IFtcInllYXJcIiwgZm91ckRpZ2l0c10sXG4gIFM6IFtcIm1pbGxpc2Vjb25kXCIsIFwiXFxcXGRcIiwgKHY6IHN0cmluZyk6IG51bWJlciA9PiArdiAqIDEwMF0sXG4gIFNTOiBbXCJtaWxsaXNlY29uZFwiLCB0d29EaWdpdHMsICh2OiBzdHJpbmcpOiBudW1iZXIgPT4gK3YgKiAxMF0sXG4gIFNTUzogW1wibWlsbGlzZWNvbmRcIiwgdGhyZWVEaWdpdHNdLFxuICBkOiBlbXB0eURpZ2l0cyxcbiAgZGQ6IGVtcHR5RGlnaXRzLFxuICBkZGQ6IGVtcHR5V29yZCxcbiAgZGRkZDogZW1wdHlXb3JkLFxuICBNTU06IFtcIm1vbnRoXCIsIHdvcmQsIG1vbnRoVXBkYXRlKFwibW9udGhOYW1lc1Nob3J0XCIpXSxcbiAgTU1NTTogW1wibW9udGhcIiwgd29yZCwgbW9udGhVcGRhdGUoXCJtb250aE5hbWVzXCIpXSxcbiAgYTogYW1QbSxcbiAgQTogYW1QbSxcbiAgWlo6IHRpbWV6b25lT2Zmc2V0LFxuICBaOiB0aW1lem9uZU9mZnNldFxufTtcblxuLy8gU29tZSBjb21tb24gZm9ybWF0IHN0cmluZ3NcbmNvbnN0IGdsb2JhbE1hc2tzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICBkZWZhdWx0OiBcImRkZCBNTU0gREQgWVlZWSBISDptbTpzc1wiLFxuICBzaG9ydERhdGU6IFwiTS9EL1lZXCIsXG4gIG1lZGl1bURhdGU6IFwiTU1NIEQsIFlZWVlcIixcbiAgbG9uZ0RhdGU6IFwiTU1NTSBELCBZWVlZXCIsXG4gIGZ1bGxEYXRlOiBcImRkZGQsIE1NTU0gRCwgWVlZWVwiLFxuICBpc29EYXRlOiBcIllZWVktTU0tRERcIixcbiAgaXNvRGF0ZVRpbWU6IFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIixcbiAgc2hvcnRUaW1lOiBcIkhIOm1tXCIsXG4gIG1lZGl1bVRpbWU6IFwiSEg6bW06c3NcIixcbiAgbG9uZ1RpbWU6IFwiSEg6bW06c3MuU1NTXCJcbn07XG5jb25zdCBzZXRHbG9iYWxEYXRlTWFza3MgPSAobWFza3M6IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xufSk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPT4gYXNzaWduKGdsb2JhbE1hc2tzLCBtYXNrcyk7XG5cbi8qKipcbiAqIEZvcm1hdCBhIGRhdGVcbiAqIEBtZXRob2QgZm9ybWF0XG4gKiBAcGFyYW0ge0RhdGV8bnVtYmVyfSBkYXRlT2JqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFzayBGb3JtYXQgb2YgdGhlIGRhdGUsIGkuZS4gJ21tLWRkLXl5JyBvciAnc2hvcnREYXRlJ1xuICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKi9cbmNvbnN0IGZvcm1hdCA9IChcbiAgZGF0ZU9iajogRGF0ZSxcbiAgbWFzazogc3RyaW5nID0gZ2xvYmFsTWFza3NbXCJkZWZhdWx0XCJdLFxuICBpMThuOiBJMThuU2V0dGluZ3NPcHRpb25hbCA9IHt9XG4pOiBzdHJpbmcgPT4ge1xuICBpZiAodHlwZW9mIGRhdGVPYmogPT09IFwibnVtYmVyXCIpIHtcbiAgICBkYXRlT2JqID0gbmV3IERhdGUoZGF0ZU9iaik7XG4gIH1cblxuICBpZiAoXG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGVPYmopICE9PSBcIltvYmplY3QgRGF0ZV1cIiB8fFxuICAgIGlzTmFOKGRhdGVPYmouZ2V0VGltZSgpKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIERhdGUgcGFzcyB0byBmb3JtYXRcIik7XG4gIH1cblxuICBtYXNrID0gZ2xvYmFsTWFza3NbbWFza10gfHwgbWFzaztcblxuICBjb25zdCBsaXRlcmFsczogc3RyaW5nW10gPSBbXTtcblxuICAvLyBNYWtlIGxpdGVyYWxzIGluYWN0aXZlIGJ5IHJlcGxhY2luZyB0aGVtIHdpdGggQEBAXG4gIG1hc2sgPSBtYXNrLnJlcGxhY2UobGl0ZXJhbCwgZnVuY3Rpb24oJDAsICQxKSB7XG4gICAgbGl0ZXJhbHMucHVzaCgkMSk7XG4gICAgcmV0dXJuIFwiQEBAXCI7XG4gIH0pO1xuXG4gIGNvbnN0IGNvbWJpbmVkSTE4blNldHRpbmdzOiBJMThuU2V0dGluZ3MgPSBhc3NpZ24oXG4gICAgYXNzaWduKHt9LCBnbG9iYWxJMThuKSxcbiAgICBpMThuXG4gICk7XG4gIC8vIEFwcGx5IGZvcm1hdHRpbmcgcnVsZXNcbiAgbWFzayA9IG1hc2sucmVwbGFjZSh0b2tlbiwgJDAgPT5cbiAgICBmb3JtYXRGbGFnc1skMF0oZGF0ZU9iaiwgY29tYmluZWRJMThuU2V0dGluZ3MpXG4gICk7XG4gIC8vIElubGluZSBsaXRlcmFsIHZhbHVlcyBiYWNrIGludG8gdGhlIGZvcm1hdHRlZCB2YWx1ZVxuICByZXR1cm4gbWFzay5yZXBsYWNlKC9AQEAvZywgKCkgPT4gbGl0ZXJhbHMuc2hpZnQoKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgZGF0ZSBzdHJpbmcgaW50byBhIEphdmFzY3JpcHQgRGF0ZSBvYmplY3QgL1xuICogQG1ldGhvZCBwYXJzZVxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGVTdHIgRGF0ZSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgRGF0ZSBwYXJzZSBmb3JtYXRcbiAqIEBwYXJhbSB7aTE4bn0gSTE4blNldHRpbmdzT3B0aW9uYWwgRnVsbCBvciBzdWJzZXQgb2YgSTE4TiBzZXR0aW5nc1xuICogQHJldHVybnMge0RhdGV8bnVsbH0gUmV0dXJucyBEYXRlIG9iamVjdC4gUmV0dXJucyBudWxsIHdoYXQgZGF0ZSBzdHJpbmcgaXMgaW52YWxpZCBvciBkb2Vzbid0IG1hdGNoIGZvcm1hdFxuICovXG5mdW5jdGlvbiBwYXJzZShcbiAgZGF0ZVN0cjogc3RyaW5nLFxuICBmb3JtYXQ6IHN0cmluZyxcbiAgaTE4bjogSTE4blNldHRpbmdzT3B0aW9uYWwgPSB7fVxuKTogRGF0ZSB8IG51bGwge1xuICBpZiAodHlwZW9mIGZvcm1hdCAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZm9ybWF0IGluIGZlY2hhIHBhcnNlXCIpO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBmb3JtYXQgaXMgYWN0dWFsbHkgYSBtYXNrXG4gIGZvcm1hdCA9IGdsb2JhbE1hc2tzW2Zvcm1hdF0gfHwgZm9ybWF0O1xuXG4gIC8vIEF2b2lkIHJlZ3VsYXIgZXhwcmVzc2lvbiBkZW5pYWwgb2Ygc2VydmljZSwgZmFpbCBlYXJseSBmb3IgcmVhbGx5IGxvbmcgc3RyaW5nc1xuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1JlZ3VsYXJfZXhwcmVzc2lvbl9EZW5pYWxfb2ZfU2VydmljZV8tX1JlRG9TXG4gIGlmIChkYXRlU3RyLmxlbmd0aCA+IDEwMDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIERlZmF1bHQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgeWVhci5cbiAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBkYXRlSW5mbzogRGF0ZUluZm8gPSB7XG4gICAgeWVhcjogdG9kYXkuZ2V0RnVsbFllYXIoKSxcbiAgICBtb250aDogMCxcbiAgICBkYXk6IDEsXG4gICAgaG91cjogMCxcbiAgICBtaW51dGU6IDAsXG4gICAgc2Vjb25kOiAwLFxuICAgIG1pbGxpc2Vjb25kOiAwLFxuICAgIGlzUG06IG51bGwsXG4gICAgdGltZXpvbmVPZmZzZXQ6IG51bGxcbiAgfTtcbiAgY29uc3QgcGFyc2VJbmZvOiBQYXJzZUluZm9bXSA9IFtdO1xuICBjb25zdCBsaXRlcmFsczogc3RyaW5nW10gPSBbXTtcblxuICAvLyBSZXBsYWNlIGFsbCB0aGUgbGl0ZXJhbHMgd2l0aCBAQEAuIEhvcGVmdWxseSBhIHN0cmluZyB0aGF0IHdvbid0IGV4aXN0IGluIHRoZSBmb3JtYXRcbiAgbGV0IG5ld0Zvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxpdGVyYWwsICgkMCwgJDEpID0+IHtcbiAgICBsaXRlcmFscy5wdXNoKHJlZ2V4RXNjYXBlKCQxKSk7XG4gICAgcmV0dXJuIFwiQEBAXCI7XG4gIH0pO1xuICBjb25zdCBzcGVjaWZpZWRGaWVsZHM6IHsgW2ZpZWxkOiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcbiAgY29uc3QgcmVxdWlyZWRGaWVsZHM6IHsgW2ZpZWxkOiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcblxuICAvLyBDaGFuZ2UgZXZlcnkgdG9rZW4gdGhhdCB3ZSBmaW5kIGludG8gdGhlIGNvcnJlY3QgcmVnZXhcbiAgbmV3Rm9ybWF0ID0gcmVnZXhFc2NhcGUobmV3Rm9ybWF0KS5yZXBsYWNlKHRva2VuLCAkMCA9PiB7XG4gICAgY29uc3QgaW5mbyA9IHBhcnNlRmxhZ3NbJDBdO1xuICAgIGNvbnN0IFtmaWVsZCwgcmVnZXgsICwgcmVxdWlyZWRGaWVsZF0gPSBpbmZvO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBlcnNvbiBoYXMgc3BlY2lmaWVkIHRoZSBzYW1lIGZpZWxkIHR3aWNlLiBUaGlzIHdpbGwgbGVhZCB0byBjb25mdXNpbmcgcmVzdWx0cy5cbiAgICBpZiAoc3BlY2lmaWVkRmllbGRzW2ZpZWxkXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZvcm1hdC4gJHtmaWVsZH0gc3BlY2lmaWVkIHR3aWNlIGluIGZvcm1hdGApO1xuICAgIH1cblxuICAgIHNwZWNpZmllZEZpZWxkc1tmaWVsZF0gPSB0cnVlO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIGFueSByZXF1aXJlZCBmaWVsZHMuIEZvciBpbnN0YW5jZSwgMTIgaG91ciB0aW1lIHJlcXVpcmVzIEFNL1BNIHNwZWNpZmllZFxuICAgIGlmIChyZXF1aXJlZEZpZWxkKSB7XG4gICAgICByZXF1aXJlZEZpZWxkc1tyZXF1aXJlZEZpZWxkXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcGFyc2VJbmZvLnB1c2goaW5mbyk7XG4gICAgcmV0dXJuIFwiKFwiICsgcmVnZXggKyBcIilcIjtcbiAgfSk7XG5cbiAgLy8gQ2hlY2sgYWxsIHRoZSByZXF1aXJlZCBmaWVsZHMgYXJlIHByZXNlbnRcbiAgT2JqZWN0LmtleXMocmVxdWlyZWRGaWVsZHMpLmZvckVhY2goZmllbGQgPT4ge1xuICAgIGlmICghc3BlY2lmaWVkRmllbGRzW2ZpZWxkXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBmb3JtYXQuICR7ZmllbGR9IGlzIHJlcXVpcmVkIGluIHNwZWNpZmllZCBmb3JtYXRgXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gQWRkIGJhY2sgYWxsIHRoZSBsaXRlcmFscyBhZnRlclxuICBuZXdGb3JtYXQgPSBuZXdGb3JtYXQucmVwbGFjZSgvQEBAL2csICgpID0+IGxpdGVyYWxzLnNoaWZ0KCkpO1xuXG4gIC8vIENoZWNrIGlmIHRoZSBkYXRlIHN0cmluZyBtYXRjaGVzIHRoZSBmb3JtYXQuIElmIGl0IGRvZXNuJ3QgcmV0dXJuIG51bGxcbiAgY29uc3QgbWF0Y2hlcyA9IGRhdGVTdHIubWF0Y2gobmV3IFJlZ0V4cChuZXdGb3JtYXQsIFwiaVwiKSk7XG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY29tYmluZWRJMThuU2V0dGluZ3M6IEkxOG5TZXR0aW5ncyA9IGFzc2lnbihcbiAgICBhc3NpZ24oe30sIGdsb2JhbEkxOG4pLFxuICAgIGkxOG5cbiAgKTtcblxuICAvLyBGb3IgZWFjaCBtYXRjaCwgY2FsbCB0aGUgcGFyc2VyIGZ1bmN0aW9uIGZvciB0aGF0IGRhdGUgcGFydFxuICBmb3IgKGxldCBpID0gMTsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBbZmllbGQsICwgcGFyc2VyXSA9IHBhcnNlSW5mb1tpIC0gMV07XG4gICAgY29uc3QgdmFsdWUgPSBwYXJzZXJcbiAgICAgID8gcGFyc2VyKG1hdGNoZXNbaV0sIGNvbWJpbmVkSTE4blNldHRpbmdzKVxuICAgICAgOiArbWF0Y2hlc1tpXTtcblxuICAgIC8vIElmIHRoZSBwYXJzZXIgY2FuJ3QgbWFrZSBzZW5zZSBvZiB0aGUgdmFsdWUsIHJldHVybiBudWxsXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGRhdGVJbmZvW2ZpZWxkXSA9IHZhbHVlO1xuICB9XG5cbiAgaWYgKGRhdGVJbmZvLmlzUG0gPT09IDEgJiYgZGF0ZUluZm8uaG91ciAhPSBudWxsICYmICtkYXRlSW5mby5ob3VyICE9PSAxMikge1xuICAgIGRhdGVJbmZvLmhvdXIgPSArZGF0ZUluZm8uaG91ciArIDEyO1xuICB9IGVsc2UgaWYgKGRhdGVJbmZvLmlzUG0gPT09IDAgJiYgK2RhdGVJbmZvLmhvdXIgPT09IDEyKSB7XG4gICAgZGF0ZUluZm8uaG91ciA9IDA7XG4gIH1cblxuICBsZXQgZGF0ZVRaOiBEYXRlO1xuICBpZiAoZGF0ZUluZm8udGltZXpvbmVPZmZzZXQgPT0gbnVsbCkge1xuICAgIGRhdGVUWiA9IG5ldyBEYXRlKFxuICAgICAgZGF0ZUluZm8ueWVhcixcbiAgICAgIGRhdGVJbmZvLm1vbnRoLFxuICAgICAgZGF0ZUluZm8uZGF5LFxuICAgICAgZGF0ZUluZm8uaG91cixcbiAgICAgIGRhdGVJbmZvLm1pbnV0ZSxcbiAgICAgIGRhdGVJbmZvLnNlY29uZCxcbiAgICAgIGRhdGVJbmZvLm1pbGxpc2Vjb25kXG4gICAgKTtcbiAgICBjb25zdCB2YWxpZGF0ZUZpZWxkczogW1xuICAgICAgXCJtb250aFwiIHwgXCJkYXlcIiB8IFwiaG91clwiIHwgXCJtaW51dGVcIiB8IFwic2Vjb25kXCIsXG4gICAgICBcImdldE1vbnRoXCIgfCBcImdldERhdGVcIiB8IFwiZ2V0SG91cnNcIiB8IFwiZ2V0TWludXRlc1wiIHwgXCJnZXRTZWNvbmRzXCJcbiAgICBdW10gPSBbXG4gICAgICBbXCJtb250aFwiLCBcImdldE1vbnRoXCJdLFxuICAgICAgW1wiZGF5XCIsIFwiZ2V0RGF0ZVwiXSxcbiAgICAgIFtcImhvdXJcIiwgXCJnZXRIb3Vyc1wiXSxcbiAgICAgIFtcIm1pbnV0ZVwiLCBcImdldE1pbnV0ZXNcIl0sXG4gICAgICBbXCJzZWNvbmRcIiwgXCJnZXRTZWNvbmRzXCJdXG4gICAgXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmFsaWRhdGVGaWVsZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIC8vIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgZGF0ZSBmaWVsZCBpcyB3aXRoaW4gdGhlIGFsbG93ZWQgcmFuZ2UuIEphdmFzY3JpcHQgZGF0ZXMgYWxsb3dzIHZhbHVlc1xuICAgICAgLy8gb3V0c2lkZSB0aGUgYWxsb3dlZCByYW5nZS4gSWYgdGhlIHZhbHVlcyBkb24ndCBtYXRjaCB0aGUgdmFsdWUgd2FzIGludmFsaWRcbiAgICAgIGlmIChcbiAgICAgICAgc3BlY2lmaWVkRmllbGRzW3ZhbGlkYXRlRmllbGRzW2ldWzBdXSAmJlxuICAgICAgICBkYXRlSW5mb1t2YWxpZGF0ZUZpZWxkc1tpXVswXV0gIT09IGRhdGVUWlt2YWxpZGF0ZUZpZWxkc1tpXVsxXV0oKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkYXRlVFogPSBuZXcgRGF0ZShcbiAgICAgIERhdGUuVVRDKFxuICAgICAgICBkYXRlSW5mby55ZWFyLFxuICAgICAgICBkYXRlSW5mby5tb250aCxcbiAgICAgICAgZGF0ZUluZm8uZGF5LFxuICAgICAgICBkYXRlSW5mby5ob3VyLFxuICAgICAgICBkYXRlSW5mby5taW51dGUgLSBkYXRlSW5mby50aW1lem9uZU9mZnNldCxcbiAgICAgICAgZGF0ZUluZm8uc2Vjb25kLFxuICAgICAgICBkYXRlSW5mby5taWxsaXNlY29uZFxuICAgICAgKVxuICAgICk7XG5cbiAgICAvLyBXZSBjYW4ndCB2YWxpZGF0ZSBkYXRlcyBpbiBhbm90aGVyIHRpbWV6b25lIHVuZm9ydHVuYXRlbHkuIERvIGEgYmFzaWMgY2hlY2sgaW5zdGVhZFxuICAgIGlmIChcbiAgICAgIGRhdGVJbmZvLm1vbnRoID4gMTEgfHxcbiAgICAgIGRhdGVJbmZvLm1vbnRoIDwgMCB8fFxuICAgICAgZGF0ZUluZm8uZGF5ID4gMzEgfHxcbiAgICAgIGRhdGVJbmZvLmRheSA8IDEgfHxcbiAgICAgIGRhdGVJbmZvLmhvdXIgPiAyMyB8fFxuICAgICAgZGF0ZUluZm8uaG91ciA8IDAgfHxcbiAgICAgIGRhdGVJbmZvLm1pbnV0ZSA+IDU5IHx8XG4gICAgICBkYXRlSW5mby5taW51dGUgPCAwIHx8XG4gICAgICBkYXRlSW5mby5zZWNvbmQgPiA1OSB8fFxuICAgICAgZGF0ZUluZm8uc2Vjb25kIDwgMFxuICAgICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gRG9uJ3QgYWxsb3cgaW52YWxpZCBkYXRlc1xuXG4gIHJldHVybiBkYXRlVFo7XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIGZvcm1hdCxcbiAgcGFyc2UsXG4gIGRlZmF1bHRJMThuLFxuICBzZXRHbG9iYWxEYXRlSTE4bixcbiAgc2V0R2xvYmFsRGF0ZU1hc2tzXG59O1xuZXhwb3J0IHsgZm9ybWF0LCBwYXJzZSwgZGVmYXVsdEkxOG4sIHNldEdsb2JhbERhdGVJMThuLCBzZXRHbG9iYWxEYXRlTWFza3MgfTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBmZWNoYSA9IHJlcXVpcmUoJ2ZlY2hhJyk7XG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcblxuLypcbiAqIGZ1bmN0aW9uIHRpbWVzdGFtcCAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHRpbWVzdGFtcCBGb3JtYXQgd2hpY2ggYWRkcyBhIHRpbWVzdGFtcFxuICogdG8gdGhlIGluZm8uIEl0IHdhcyBwcmV2aW91c2x5IGF2YWlsYWJsZSBpbiB3aW5zdG9uIDwgMy4wLjAgYXM6XG4gKlxuICogLSB7IHRpbWVzdGFtcDogdHJ1ZSB9ICAgICAgICAgICAgIC8vIGBuZXcgRGF0ZS50b0lTT1N0cmluZygpYFxuICogLSB7IHRpbWVzdGFtcDogZnVuY3Rpb246U3RyaW5nIH0gIC8vIFZhbHVlIHJldHVybmVkIGJ5IGB0aW1lc3RhbXAoKWBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQoZnVuY3Rpb24gKGluZm8pIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBpZiAob3B0cy5mb3JtYXQpIHtcbiAgICBpbmZvLnRpbWVzdGFtcCA9IHR5cGVvZiBvcHRzLmZvcm1hdCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZm9ybWF0KCkgOiBmZWNoYS5mb3JtYXQobmV3IERhdGUoKSwgb3B0cy5mb3JtYXQpO1xuICB9XG4gIGlmICghaW5mby50aW1lc3RhbXApIHtcbiAgICBpbmZvLnRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgfVxuICBpZiAob3B0cy5hbGlhcykge1xuICAgIGluZm9bb3B0cy5hbGlhc10gPSBpbmZvLnRpbWVzdGFtcDtcbiAgfVxuICByZXR1cm4gaW5mbztcbn0pOyIsICIndXNlIHN0cmljdCc7XG5cbnZhciBjb2xvcnMgPSByZXF1aXJlKCdAY29sb3JzL2NvbG9ycy9zYWZlJyk7XG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xuXG4vKlxuICogZnVuY3Rpb24gdW5jb2xvcml6ZSAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHVuY29sb3JpemUgRm9ybWF0IHRoYXQgc3RyaXBzIGNvbG9yc1xuICogZnJvbSBgaW5mb2Agb2JqZWN0cy4gVGhpcyB3YXMgcHJldmlvdXNseSBleHBvc2VkIGFzIHsgc3RyaXBDb2xvcnM6IHRydWUgfVxuICogdG8gdHJhbnNwb3J0cyBpbiBgd2luc3RvbiA8IDMuMC4wYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQoZnVuY3Rpb24gKGluZm8sIG9wdHMpIHtcbiAgaWYgKG9wdHMubGV2ZWwgIT09IGZhbHNlKSB7XG4gICAgaW5mby5sZXZlbCA9IGNvbG9ycy5zdHJpcChpbmZvLmxldmVsKTtcbiAgfVxuICBpZiAob3B0cy5tZXNzYWdlICE9PSBmYWxzZSkge1xuICAgIGluZm8ubWVzc2FnZSA9IGNvbG9ycy5zdHJpcChTdHJpbmcoaW5mby5tZXNzYWdlKSk7XG4gIH1cbiAgaWYgKG9wdHMucmF3ICE9PSBmYWxzZSAmJiBpbmZvW01FU1NBR0VdKSB7XG4gICAgaW5mb1tNRVNTQUdFXSA9IGNvbG9ycy5zdHJpcChTdHJpbmcoaW5mb1tNRVNTQUdFXSkpO1xuICB9XG4gIHJldHVybiBpbmZvO1xufSk7IiwgIid1c2Ugc3RyaWN0JztcblxuLypcbiAqIEBhcGkgcHVibGljXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBmb3JtYXRcbiAqIEJvdGggdGhlIGNvbnN0cnVjdGlvbiBtZXRob2QgYW5kIHNldCBvZiBleHBvc2VkXG4gKiBmb3JtYXRzLlxuICovXG52YXIgZm9ybWF0ID0gZXhwb3J0cy5mb3JtYXQgPSByZXF1aXJlKCcuLy4vZm9ybWF0Jyk7XG5cbi8qXG4gKiBAYXBpIHB1YmxpY1xuICogQG1ldGhvZCB7ZnVuY3Rpb259IGxldmVsc1xuICogUmVnaXN0ZXJzIHRoZSBzcGVjaWZpZWQgbGV2ZWxzIHdpdGggbG9nZm9ybS5cbiAqL1xuZXhwb3J0cy5sZXZlbHMgPSByZXF1aXJlKCcuLy4vbGV2ZWxzJyk7XG5cbi8vXG4vLyBTZXR1cCBhbGwgdHJhbnNwb3J0cyBhcyBlYWdlci1sb2FkZWQgZXhwb3J0c1xuLy8gc28gdGhhdCB0aGV5IGFyZSBzdGF0aWMgZm9yIHRoZSBidW5kbGVycy5cbi8vXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZm9ybWF0LCAnYWxpZ24nLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL2FsaWduJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ2NsaScsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vY2xpJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ2NvbG9yaXplJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9jb2xvcml6ZScpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICdjb21iaW5lJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9jb21iaW5lJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ2Vycm9ycycsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vZXJyb3JzJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ2pzb24nLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL2pzb24nKVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZm9ybWF0LCAnbGFiZWwnLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL2xhYmVsJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ2xvZ3N0YXNoJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9sb2dzdGFzaCcpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICdtZXRhZGF0YScsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vbWV0YWRhdGEnKVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZm9ybWF0LCAnbXMnLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL21zJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ3BhZExldmVscycsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vcGFkLWxldmVscycpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICdwcmV0dHlQcmludCcsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vcHJldHR5LXByaW50Jylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ3ByaW50ZicsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vcHJpbnRmJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ3NpbXBsZScsIHtcbiAgdmFsdWU6IHJlcXVpcmUoJy4vc2ltcGxlJylcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1hdCwgJ3NwbGF0Jywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi9zcGxhdCcpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICd0aW1lc3RhbXAnLCB7XG4gIHZhbHVlOiByZXF1aXJlKCcuL3RpbWVzdGFtcCcpXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmb3JtYXQsICd1bmNvbG9yaXplJywge1xuICB2YWx1ZTogcmVxdWlyZSgnLi91bmNvbG9yaXplJylcbn0pOyIsICIvKipcbiAqIGNvbW1vbi5qczogSW50ZXJuYWwgaGVscGVyIGFuZCB1dGlsaXR5IGZ1bmN0aW9ucyBmb3Igd2luc3Rvbi5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCd1dGlsJyksXG4gIGZvcm1hdCA9IF9yZXF1aXJlLmZvcm1hdDtcblxuLyoqXG4gKiBTZXQgb2Ygc2ltcGxlIGRlcHJlY2F0aW9uIG5vdGljZXMgYW5kIGEgd2F5IHRvIGV4cG9zZSB0aGVtIGZvciBhIHNldCBvZlxuICogcHJvcGVydGllcy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnRzLndhcm4gPSB7XG4gIGRlcHJlY2F0ZWQ6IGZ1bmN0aW9uIGRlcHJlY2F0ZWQocHJvcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KCd7ICVzIH0gd2FzIHJlbW92ZWQgaW4gd2luc3RvbkAzLjAuMC4nLCBwcm9wKSk7XG4gICAgfTtcbiAgfSxcbiAgdXNlRm9ybWF0OiBmdW5jdGlvbiB1c2VGb3JtYXQocHJvcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoW2Zvcm1hdCgneyAlcyB9IHdhcyByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgcHJvcCksICdVc2UgYSBjdXN0b20gd2luc3Rvbi5mb3JtYXQgPSB3aW5zdG9uLmZvcm1hdChmdW5jdGlvbikgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfTtcbiAgfSxcbiAgZm9yRnVuY3Rpb25zOiBmdW5jdGlvbiBmb3JGdW5jdGlvbnMob2JqLCB0eXBlLCBwcm9wcykge1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIG9ialtwcm9wXSA9IGV4cG9ydHMud2Fyblt0eXBlXShwcm9wKTtcbiAgICB9KTtcbiAgfSxcbiAgZm9yUHJvcGVydGllczogZnVuY3Rpb24gZm9yUHJvcGVydGllcyhvYmosIHR5cGUsIHByb3BzKSB7XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgdmFyIG5vdGljZSA9IGV4cG9ydHMud2Fyblt0eXBlXShwcm9wKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICAgICAgZ2V0OiBub3RpY2UsXG4gICAgICAgIHNldDogbm90aWNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTsiLCAie1xuICBcIm5hbWVcIjogXCJ3aW5zdG9uXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBIGxvZ2dlciBmb3IganVzdCBhYm91dCBldmVyeXRoaW5nLlwiLFxuICBcInZlcnNpb25cIjogXCIzLjE3LjBcIixcbiAgXCJhdXRob3JcIjogXCJDaGFybGllIFJvYmJpbnMgPGNoYXJsaWUucm9iYmluc0BnbWFpbC5jb20+XCIsXG4gIFwibWFpbnRhaW5lcnNcIjogW1xuICAgIFwiRGF2aWQgSHlkZSA8ZGFiaEBhbHVtbmkuc3RhbmZvcmQuZWR1PlwiXG4gIF0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24uZ2l0XCJcbiAgfSxcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJ3aW5zdG9uXCIsXG4gICAgXCJsb2dnZXJcIixcbiAgICBcImxvZ2dpbmdcIixcbiAgICBcImxvZ3NcIixcbiAgICBcInN5c2FkbWluXCIsXG4gICAgXCJidW55YW5cIixcbiAgICBcInBpbm9cIixcbiAgICBcImxvZ2xldmVsXCIsXG4gICAgXCJ0b29sc1wiLFxuICAgIFwianNvblwiLFxuICAgIFwic3RyZWFtXCJcbiAgXSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGRhYmgvZGlhZ25vc3RpY3NcIjogXCJeMi4wLjJcIixcbiAgICBcIkBjb2xvcnMvY29sb3JzXCI6IFwiXjEuNi4wXCIsXG4gICAgXCJhc3luY1wiOiBcIl4zLjIuM1wiLFxuICAgIFwiaXMtc3RyZWFtXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJsb2dmb3JtXCI6IFwiXjIuNy4wXCIsXG4gICAgXCJvbmUtdGltZVwiOiBcIl4xLjAuMFwiLFxuICAgIFwicmVhZGFibGUtc3RyZWFtXCI6IFwiXjMuNC4wXCIsXG4gICAgXCJzYWZlLXN0YWJsZS1zdHJpbmdpZnlcIjogXCJeMi4zLjFcIixcbiAgICBcInN0YWNrLXRyYWNlXCI6IFwiMC4wLnhcIixcbiAgICBcInRyaXBsZS1iZWFtXCI6IFwiXjEuMy4wXCIsXG4gICAgXCJ3aW5zdG9uLXRyYW5zcG9ydFwiOiBcIl40LjkuMFwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBiYWJlbC9jbGlcIjogXCJeNy4yMy45XCIsXG4gICAgXCJAYmFiZWwvY29yZVwiOiBcIl43LjI0LjBcIixcbiAgICBcIkBiYWJlbC9wcmVzZXQtZW52XCI6IFwiXjcuMjQuMFwiLFxuICAgIFwiQGRhYmgvZXNsaW50LWNvbmZpZy1wb3B1bGlzdFwiOiBcIl40LjQuMFwiLFxuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTEuMjRcIixcbiAgICBcImFic3RyYWN0LXdpbnN0b24tdHJhbnNwb3J0XCI6IFwiXjAuNS4xXCIsXG4gICAgXCJhc3N1bWVcIjogXCJeMi4yLjBcIixcbiAgICBcImNyb3NzLXNwYXduLWFzeW5jXCI6IFwiXjIuMi41XCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOC41Ny4wXCIsXG4gICAgXCJob2NrXCI6IFwiXjEuNC4xXCIsXG4gICAgXCJtb2NoYVwiOiBcIl4xMC4zLjBcIixcbiAgICBcIm55Y1wiOiBcIl4xNy4xLjBcIixcbiAgICBcInJpbXJhZlwiOiBcIjUuMC4xXCIsXG4gICAgXCJzcGxpdDJcIjogXCJeNC4xLjBcIixcbiAgICBcInN0ZC1tb2Nrc1wiOiBcIl4yLjAuMFwiLFxuICAgIFwidGhyb3VnaDJcIjogXCJeNC4wLjJcIixcbiAgICBcIndpbnN0b24tY29tcGF0XCI6IFwiXjAuMS41XCJcbiAgfSxcbiAgXCJtYWluXCI6IFwiLi9saWIvd2luc3Rvbi5qc1wiLFxuICBcImJyb3dzZXJcIjogXCIuL2Rpc3Qvd2luc3RvblwiLFxuICBcInR5cGVzXCI6IFwiLi9pbmRleC5kLnRzXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJsaW50XCI6IFwiZXNsaW50IGxpYi8qLmpzIGxpYi93aW5zdG9uLyouanMgbGliL3dpbnN0b24vKiovKi5qcyAtLXJlc29sdmUtcGx1Z2lucy1yZWxhdGl2ZS10byAuL25vZGVfbW9kdWxlcy9AZGFiaC9lc2xpbnQtY29uZmlnLXBvcHVsaXN0XCIsXG4gICAgXCJ0ZXN0XCI6IFwicmltcmFmIHRlc3QvZml4dHVyZXMvbG9ncy8qICYmIG1vY2hhXCIsXG4gICAgXCJ0ZXN0OmNvdmVyYWdlXCI6IFwibnljIG5wbSBydW4gdGVzdDp1bml0XCIsXG4gICAgXCJ0ZXN0OnVuaXRcIjogXCJtb2NoYSB0ZXN0L3VuaXRcIixcbiAgICBcInRlc3Q6aW50ZWdyYXRpb25cIjogXCJtb2NoYSB0ZXN0L2ludGVncmF0aW9uXCIsXG4gICAgXCJidWlsZFwiOiBcInJpbXJhZiBkaXN0ICYmIGJhYmVsIGxpYiAtZCBkaXN0XCIsXG4gICAgXCJwcmVwdWJsaXNoT25seVwiOiBcIm5wbSBydW4gYnVpbGRcIlxuICB9LFxuICBcImVuZ2luZXNcIjoge1xuICAgIFwibm9kZVwiOiBcIj49IDEyLjAuMFwiXG4gIH0sXG4gIFwibGljZW5zZVwiOiBcIk1JVFwiXG59XG4iLCAiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwgIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVycikge1xuICAgICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIGlmICghX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JBbmRDbG9zZU5ULCBfdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQsIF90aGlzLCBlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGVtaXRFcnJvckFuZENsb3NlTlQoc2VsZiwgZXJyKSB7XG4gIGVtaXRFcnJvck5UKHNlbGYsIGVycik7XG4gIGVtaXRDbG9zZU5UKHNlbGYpO1xufVxuZnVuY3Rpb24gZW1pdENsb3NlTlQoc2VsZikge1xuICBpZiAoc2VsZi5fd3JpdGFibGVTdGF0ZSAmJiAhc2VsZi5fd3JpdGFibGVTdGF0ZS5lbWl0Q2xvc2UpIHJldHVybjtcbiAgaWYgKHNlbGYuX3JlYWRhYmxlU3RhdGUgJiYgIXNlbGYuX3JlYWRhYmxlU3RhdGUuZW1pdENsb3NlKSByZXR1cm47XG4gIHNlbGYuZW1pdCgnY2xvc2UnKTtcbn1cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5hbENhbGxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuZnVuY3Rpb24gZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcnIpIHtcbiAgLy8gV2UgaGF2ZSB0ZXN0cyB0aGF0IHJlbHkgb24gZXJyb3JzIGJlaW5nIGVtaXR0ZWRcbiAgLy8gaW4gdGhlIHNhbWUgdGljaywgc28gY2hhbmdpbmcgdGhpcyBpcyBzZW12ZXIgbWFqb3IuXG4gIC8vIEZvciBub3cgd2hlbiB5b3Ugb3B0LWluIHRvIGF1dG9EZXN0cm95IHdlIGFsbG93XG4gIC8vIHRoZSBlcnJvciB0byBiZSBlbWl0dGVkIG5leHRUaWNrLiBJbiBhIGZ1dHVyZVxuICAvLyBzZW12ZXIgbWFqb3IgdXBkYXRlIHdlIHNob3VsZCBjaGFuZ2UgdGhlIGRlZmF1bHQgdG8gdGhpcy5cblxuICB2YXIgclN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgd1N0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICBpZiAoclN0YXRlICYmIHJTdGF0ZS5hdXRvRGVzdHJveSB8fCB3U3RhdGUgJiYgd1N0YXRlLmF1dG9EZXN0cm95KSBzdHJlYW0uZGVzdHJveShlcnIpO2Vsc2Ugc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveSxcbiAgZXJyb3JPckRlc3Ryb3k6IGVycm9yT3JEZXN0cm95XG59OyIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgY29kZXMgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIG1lc3NhZ2UsIEJhc2UpIHtcbiAgaWYgKCFCYXNlKSB7XG4gICAgQmFzZSA9IEVycm9yO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBOb2RlRXJyb3IgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQmFzZSkge1xuICAgIF9pbmhlcml0c0xvb3NlKE5vZGVFcnJvciwgX0Jhc2UpO1xuXG4gICAgZnVuY3Rpb24gTm9kZUVycm9yKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIHJldHVybiBfQmFzZS5jYWxsKHRoaXMsIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5vZGVFcnJvcjtcbiAgfShCYXNlKTtcblxuICBOb2RlRXJyb3IucHJvdG90eXBlLm5hbWUgPSBCYXNlLm5hbWU7XG4gIE5vZGVFcnJvci5wcm90b3R5cGUuY29kZSA9IGNvZGU7XG4gIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xufSAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanNcblxuXG5mdW5jdGlvbiBvbmVPZihleHBlY3RlZCwgdGhpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgdmFyIGxlbiA9IGV4cGVjdGVkLmxlbmd0aDtcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhpKTtcbiAgICB9KTtcblxuICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChTdHJpbmcoZXhwZWN0ZWQpKTtcbiAgfVxufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuXG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gsIHBvcykge1xuICByZXR1cm4gc3RyLnN1YnN0cighcG9zIHx8IHBvcyA8IDAgPyAwIDogK3Bvcywgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmNsdWRlc1xuXG5cbmZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9PSAnbnVtYmVyJykge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG4gIH1cbn1cblxuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9PUFRfVkFMVUUnLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuICdUaGUgdmFsdWUgXCInICsgdmFsdWUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwiJyArIG5hbWUgKyAnXCInO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLCBmdW5jdGlvbiAobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xuICAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xuICB2YXIgZGV0ZXJtaW5lcjtcblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCAnbm90ICcpKSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgfSBlbHNlIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnO1xuICB9XG5cbiAgdmFyIG1zZztcblxuICBpZiAoZW5kc1dpdGgobmFtZSwgJyBhcmd1bWVudCcpKSB7XG4gICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgIG1zZyA9IFwiVGhlIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIFwiKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfVxuXG4gIG1zZyArPSBcIi4gUmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQodHlwZW9mIGFjdHVhbCk7XG4gIHJldHVybiBtc2c7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GJywgJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEJywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICdUaGUgJyArIG5hbWUgKyAnIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQnO1xufSk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJywgJ1ByZW1hdHVyZSBjbG9zZScpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX0RFU1RST1lFRCcsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAnQ2Fubm90IGNhbGwgJyArIG5hbWUgKyAnIGFmdGVyIGEgc3RyZWFtIHdhcyBkZXN0cm95ZWQnO1xufSk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NVUxUSVBMRV9DQUxMQkFDSycsICdDYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9DQU5OT1RfUElQRScsICdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EJywgJ3dyaXRlIGFmdGVyIGVuZCcpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX05VTExfVkFMVUVTJywgJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJywgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1VOS05PV05fRU5DT0RJTkcnLCBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiAnVW5rbm93biBlbmNvZGluZzogJyArIGFyZztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQnLCAnc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTtcbm1vZHVsZS5leHBvcnRzLmNvZGVzID0gY29kZXM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVJSX0lOVkFMSURfT1BUX1ZBTFVFID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO1xuZnVuY3Rpb24gaGlnaFdhdGVyTWFya0Zyb20ob3B0aW9ucywgaXNEdXBsZXgsIGR1cGxleEtleSkge1xuICByZXR1cm4gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrICE9IG51bGwgPyBvcHRpb25zLmhpZ2hXYXRlck1hcmsgOiBpc0R1cGxleCA/IG9wdGlvbnNbZHVwbGV4S2V5XSA6IG51bGw7XG59XG5mdW5jdGlvbiBnZXRIaWdoV2F0ZXJNYXJrKHN0YXRlLCBvcHRpb25zLCBkdXBsZXhLZXksIGlzRHVwbGV4KSB7XG4gIHZhciBod20gPSBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KTtcbiAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgaWYgKCEoaXNGaW5pdGUoaHdtKSAmJiBNYXRoLmZsb29yKGh3bSkgPT09IGh3bSkgfHwgaHdtIDwgMCkge1xuICAgICAgdmFyIG5hbWUgPSBpc0R1cGxleCA/IGR1cGxleEtleSA6ICdoaWdoV2F0ZXJNYXJrJztcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9PUFRfVkFMVUUobmFtZSwgaHdtKTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoaHdtKTtcbiAgfVxuXG4gIC8vIERlZmF1bHQgdmFsdWVcbiAgcmV0dXJuIHN0YXRlLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIaWdoV2F0ZXJNYXJrOiBnZXRIaWdoV2F0ZXJNYXJrXG59OyIsICJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpOyByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmICh0eXBlb2YgcmVzICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2J1ZmZlcicpLFxuICBCdWZmZXIgPSBfcmVxdWlyZS5CdWZmZXI7XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgndXRpbCcpLFxuICBpbnNwZWN0ID0gX3JlcXVpcmUyLmluc3BlY3Q7XG52YXIgY3VzdG9tID0gaW5zcGVjdCAmJiBpbnNwZWN0LmN1c3RvbSB8fCAnaW5zcGVjdCc7XG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5jb3B5LmNhbGwoc3JjLCB0YXJnZXQsIG9mZnNldCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKEJ1ZmZlckxpc3QsIFt7XG4gICAga2V5OiBcInB1c2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgIGRhdGE6IHYsXG4gICAgICAgIG5leHQ6IG51bGxcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICAgICsrdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVuc2hpZnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgIGRhdGE6IHYsXG4gICAgICAgIG5leHQ6IHRoaXMuaGVhZFxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICAgICsrdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNoaWZ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImpvaW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gam9pbihzKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHJldCArPSBzICsgcC5kYXRhO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29uY2F0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB3aGlsZSAocCkge1xuICAgICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvLyBDb25zdW1lcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgb3IgY2hhcmFjdGVycyBmcm9tIHRoZSBidWZmZXJlZCBkYXRhLlxuICB9LCB7XG4gICAga2V5OiBcImNvbnN1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3VtZShuLCBoYXNTdHJpbmdzKSB7XG4gICAgICB2YXIgcmV0O1xuICAgICAgaWYgKG4gPCB0aGlzLmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgLy8gYHNsaWNlYCBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5ncy5cbiAgICAgICAgcmV0ID0gdGhpcy5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgICAgIHRoaXMuaGVhZC5kYXRhID0gdGhpcy5oZWFkLmRhdGEuc2xpY2Uobik7XG4gICAgICB9IGVsc2UgaWYgKG4gPT09IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgICAvLyBGaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2guXG4gICAgICAgIHJldCA9IHRoaXMuc2hpZnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlci5cbiAgICAgICAgcmV0ID0gaGFzU3RyaW5ncyA/IHRoaXMuX2dldFN0cmluZyhuKSA6IHRoaXMuX2dldEJ1ZmZlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpcnN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpcnN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIH1cblxuICAgIC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFN0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3RyaW5nKG4pIHtcbiAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgdmFyIGMgPSAxO1xuICAgICAgdmFyIHJldCA9IHAuZGF0YTtcbiAgICAgIG4gLT0gcmV0Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgICAgIG4gLT0gbmI7XG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAocC5uZXh0KSB0aGlzLmhlYWQgPSBwLm5leHQ7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgKytjO1xuICAgICAgfVxuICAgICAgdGhpcy5sZW5ndGggLT0gYztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldEJ1ZmZlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0QnVmZmVyKG4pIHtcbiAgICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgIHZhciBjID0gMTtcbiAgICAgIHAuZGF0YS5jb3B5KHJldCk7XG4gICAgICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgICAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgICAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgICAgIG4gLT0gbmI7XG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAocC5uZXh0KSB0aGlzLmhlYWQgPSBwLm5leHQ7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgKytjO1xuICAgICAgfVxuICAgICAgdGhpcy5sZW5ndGggLT0gYztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoZSBsaW5rZWQgbGlzdCBvbmx5IHNob3dzIHRoZSBtaW5pbWFsIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbi5cbiAgfSwge1xuICAgIGtleTogY3VzdG9tLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gaW5zcGVjdCh0aGlzLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgICAgICAvLyBPbmx5IGluc3BlY3Qgb25lIGxldmVsLlxuICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgLy8gSXQgc2hvdWxkIG5vdCByZWN1cnNlLlxuICAgICAgICBjdXN0b21JbnNwZWN0OiBmYWxzZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTsiLCAiLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hZmludG9zaC9lbmQtb2Ytc3RyZWFtIHdpdGhcbi8vIHBlcm1pc3Npb24gZnJvbSB0aGUgYXV0aG9yLCBNYXRoaWFzIEJ1dXMgKEBtYWZpbnRvc2gpLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFO1xuZnVuY3Rpb24gb25jZShjYWxsYmFjaykge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gaXNSZXF1ZXN0KHN0cmVhbSkge1xuICByZXR1cm4gc3RyZWFtLnNldEhlYWRlciAmJiB0eXBlb2Ygc3RyZWFtLmFib3J0ID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gZW9zKHN0cmVhbSwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW9zKHN0cmVhbSwgbnVsbCwgb3B0cyk7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gIHZhciByZWFkYWJsZSA9IG9wdHMucmVhZGFibGUgfHwgb3B0cy5yZWFkYWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLnJlYWRhYmxlO1xuICB2YXIgd3JpdGFibGUgPSBvcHRzLndyaXRhYmxlIHx8IG9wdHMud3JpdGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS53cml0YWJsZTtcbiAgdmFyIG9ubGVnYWN5ZmluaXNoID0gZnVuY3Rpb24gb25sZWdhY3lmaW5pc2goKSB7XG4gICAgaWYgKCFzdHJlYW0ud3JpdGFibGUpIG9uZmluaXNoKCk7XG4gIH07XG4gIHZhciB3cml0YWJsZUVuZGVkID0gc3RyZWFtLl93cml0YWJsZVN0YXRlICYmIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZDtcbiAgdmFyIG9uZmluaXNoID0gZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgd3JpdGFibGUgPSBmYWxzZTtcbiAgICB3cml0YWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXJlYWRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG4gIHZhciByZWFkYWJsZUVuZGVkID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlICYmIHN0cmVhbS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkO1xuICB2YXIgb25lbmQgPSBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICByZWFkYWJsZSA9IGZhbHNlO1xuICAgIHJlYWRhYmxlRW5kZWQgPSB0cnVlO1xuICAgIGlmICghd3JpdGFibGUpIGNhbGxiYWNrLmNhbGwoc3RyZWFtKTtcbiAgfTtcbiAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICB9O1xuICB2YXIgb25jbG9zZSA9IGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgdmFyIGVycjtcbiAgICBpZiAocmVhZGFibGUgJiYgIXJlYWRhYmxlRW5kZWQpIHtcbiAgICAgIGlmICghc3RyZWFtLl9yZWFkYWJsZVN0YXRlIHx8ICFzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH1cbiAgICBpZiAod3JpdGFibGUgJiYgIXdyaXRhYmxlRW5kZWQpIHtcbiAgICAgIGlmICghc3RyZWFtLl93cml0YWJsZVN0YXRlIHx8ICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIG9ucmVxdWVzdCA9IGZ1bmN0aW9uIG9ucmVxdWVzdCgpIHtcbiAgICBzdHJlYW0ucmVxLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gIH07XG4gIGlmIChpc1JlcXVlc3Qoc3RyZWFtKSkge1xuICAgIHN0cmVhbS5vbignY29tcGxldGUnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLm9uKCdhYm9ydCcsIG9uY2xvc2UpO1xuICAgIGlmIChzdHJlYW0ucmVxKSBvbnJlcXVlc3QoKTtlbHNlIHN0cmVhbS5vbigncmVxdWVzdCcsIG9ucmVxdWVzdCk7XG4gIH0gZWxzZSBpZiAod3JpdGFibGUgJiYgIXN0cmVhbS5fd3JpdGFibGVTdGF0ZSkge1xuICAgIC8vIGxlZ2FjeSBzdHJlYW1zXG4gICAgc3RyZWFtLm9uKCdlbmQnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLm9uKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTtcbiAgfVxuICBzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTtcbiAgc3RyZWFtLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gIGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjb21wbGV0ZScsIG9uZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgb25jbG9zZSk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdyZXF1ZXN0Jywgb25yZXF1ZXN0KTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZW9zOyIsICIndXNlIHN0cmljdCc7XG5cbnZhciBfT2JqZWN0JHNldFByb3RvdHlwZU87XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG52YXIgZmluaXNoZWQgPSByZXF1aXJlKCcuL2VuZC1vZi1zdHJlYW0nKTtcbnZhciBrTGFzdFJlc29sdmUgPSBTeW1ib2woJ2xhc3RSZXNvbHZlJyk7XG52YXIga0xhc3RSZWplY3QgPSBTeW1ib2woJ2xhc3RSZWplY3QnKTtcbnZhciBrRXJyb3IgPSBTeW1ib2woJ2Vycm9yJyk7XG52YXIga0VuZGVkID0gU3ltYm9sKCdlbmRlZCcpO1xudmFyIGtMYXN0UHJvbWlzZSA9IFN5bWJvbCgnbGFzdFByb21pc2UnKTtcbnZhciBrSGFuZGxlUHJvbWlzZSA9IFN5bWJvbCgnaGFuZGxlUHJvbWlzZScpO1xudmFyIGtTdHJlYW0gPSBTeW1ib2woJ3N0cmVhbScpO1xuZnVuY3Rpb24gY3JlYXRlSXRlclJlc3VsdCh2YWx1ZSwgZG9uZSkge1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBkb25lOiBkb25lXG4gIH07XG59XG5mdW5jdGlvbiByZWFkQW5kUmVzb2x2ZShpdGVyKSB7XG4gIHZhciByZXNvbHZlID0gaXRlcltrTGFzdFJlc29sdmVdO1xuICBpZiAocmVzb2x2ZSAhPT0gbnVsbCkge1xuICAgIHZhciBkYXRhID0gaXRlcltrU3RyZWFtXS5yZWFkKCk7XG4gICAgLy8gd2UgZGVmZXIgaWYgZGF0YSBpcyBudWxsXG4gICAgLy8gd2UgY2FuIGJlIGV4cGVjdGluZyBlaXRoZXIgJ2VuZCcgb3JcbiAgICAvLyAnZXJyb3InXG4gICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgIGl0ZXJba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICBpdGVyW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgaXRlcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBvblJlYWRhYmxlKGl0ZXIpIHtcbiAgLy8gd2Ugd2FpdCBmb3IgdGhlIG5leHQgdGljaywgYmVjYXVzZSBpdCBtaWdodFxuICAvLyBlbWl0IGFuIGVycm9yIHdpdGggcHJvY2Vzcy5uZXh0VGlja1xuICBwcm9jZXNzLm5leHRUaWNrKHJlYWRBbmRSZXNvbHZlLCBpdGVyKTtcbn1cbmZ1bmN0aW9uIHdyYXBGb3JOZXh0KGxhc3RQcm9taXNlLCBpdGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbGFzdFByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXRlcltrRW5kZWRdKSB7XG4gICAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaXRlcltrSGFuZGxlUHJvbWlzZV0ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9LCByZWplY3QpO1xuICB9O1xufVxudmFyIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZnVuY3Rpb24gKCkge30pO1xudmFyIFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZigoX09iamVjdCRzZXRQcm90b3R5cGVPID0ge1xuICBnZXQgc3RyZWFtKCkge1xuICAgIHJldHVybiB0aGlzW2tTdHJlYW1dO1xuICB9LFxuICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgLy8gaWYgd2UgaGF2ZSBkZXRlY3RlZCBhbiBlcnJvciBpbiB0aGUgbWVhbndoaWxlXG4gICAgLy8gcmVqZWN0IHN0cmFpZ2h0IGF3YXlcbiAgICB2YXIgZXJyb3IgPSB0aGlzW2tFcnJvcl07XG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICBpZiAodGhpc1trRW5kZWRdKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgfVxuICAgIGlmICh0aGlzW2tTdHJlYW1dLmRlc3Ryb3llZCkge1xuICAgICAgLy8gV2UgbmVlZCB0byBkZWZlciB2aWEgbmV4dFRpY2sgYmVjYXVzZSBpZiAuZGVzdHJveShlcnIpIGlzXG4gICAgICAvLyBjYWxsZWQsIHRoZSBlcnJvciB3aWxsIGJlIGVtaXR0ZWQgdmlhIG5leHRUaWNrLCBhbmRcbiAgICAgIC8vIHdlIGNhbm5vdCBndWFyYW50ZWUgdGhhdCB0aGVyZSBpcyBubyBlcnJvciBsaW5nZXJpbmcgYXJvdW5kXG4gICAgICAvLyB3YWl0aW5nIHRvIGJlIGVtaXR0ZWQuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXNba0Vycm9yXSkge1xuICAgICAgICAgICAgcmVqZWN0KF90aGlzW2tFcnJvcl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGlmIHdlIGhhdmUgbXVsdGlwbGUgbmV4dCgpIGNhbGxzXG4gICAgLy8gd2Ugd2lsbCB3YWl0IGZvciB0aGUgcHJldmlvdXMgUHJvbWlzZSB0byBmaW5pc2hcbiAgICAvLyB0aGlzIGxvZ2ljIGlzIG9wdGltaXplZCB0byBzdXBwb3J0IGZvciBhd2FpdCBsb29wcyxcbiAgICAvLyB3aGVyZSBuZXh0KCkgaXMgb25seSBjYWxsZWQgb25jZSBhdCBhIHRpbWVcbiAgICB2YXIgbGFzdFByb21pc2UgPSB0aGlzW2tMYXN0UHJvbWlzZV07XG4gICAgdmFyIHByb21pc2U7XG4gICAgaWYgKGxhc3RQcm9taXNlKSB7XG4gICAgICBwcm9taXNlID0gbmV3IFByb21pc2Uod3JhcEZvck5leHQobGFzdFByb21pc2UsIHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmFzdCBwYXRoIG5lZWRlZCB0byBzdXBwb3J0IG11bHRpcGxlIHRoaXMucHVzaCgpXG4gICAgICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgdGhlIG5leHQoKSBxdWV1ZVxuICAgICAgdmFyIGRhdGEgPSB0aGlzW2tTdHJlYW1dLnJlYWQoKTtcbiAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgfVxuICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHRoaXNba0hhbmRsZVByb21pc2VdKTtcbiAgICB9XG4gICAgdGhpc1trTGFzdFByb21pc2VdID0gcHJvbWlzZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxufSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgU3ltYm9sLmFzeW5jSXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgXCJyZXR1cm5cIiwgZnVuY3Rpb24gX3JldHVybigpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG4gIC8vIGRlc3Ryb3koZXJyLCBjYikgaXMgYSBwcml2YXRlIEFQSVxuICAvLyB3ZSBjYW4gZ3VhcmFudGVlIHdlIGhhdmUgdGhhdCBoZXJlLCBiZWNhdXNlIHdlIGNvbnRyb2wgdGhlXG4gIC8vIFJlYWRhYmxlIGNsYXNzIHRoaXMgaXMgYXR0YWNoZWQgdG9cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBfdGhpczJba1N0cmVhbV0uZGVzdHJveShudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgfSk7XG4gIH0pO1xufSksIF9PYmplY3Qkc2V0UHJvdG90eXBlTyksIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUpO1xudmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcihzdHJlYW0pIHtcbiAgdmFyIF9PYmplY3QkY3JlYXRlO1xuICB2YXIgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgKF9PYmplY3QkY3JlYXRlID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga1N0cmVhbSwge1xuICAgIHZhbHVlOiBzdHJlYW0sXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0xhc3RSZXNvbHZlLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0xhc3RSZWplY3QsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrRXJyb3IsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrRW5kZWQsIHtcbiAgICB2YWx1ZTogc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0hhbmRsZVByb21pc2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZGF0YSA9IGl0ZXJhdG9yW2tTdHJlYW1dLnJlYWQoKTtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gcmVzb2x2ZTtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gcmVqZWN0O1xuICAgICAgfVxuICAgIH0sXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9PYmplY3QkY3JlYXRlKSk7XG4gIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICBmaW5pc2hlZChzdHJlYW0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyICYmIGVyci5jb2RlICE9PSAnRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UnKSB7XG4gICAgICB2YXIgcmVqZWN0ID0gaXRlcmF0b3Jba0xhc3RSZWplY3RdO1xuICAgICAgLy8gcmVqZWN0IGlmIHdlIGFyZSB3YWl0aW5nIGZvciBkYXRhIGluIHRoZSBQcm9taXNlXG4gICAgICAvLyByZXR1cm5lZCBieSBuZXh0KCkgYW5kIHN0b3JlIHRoZSBlcnJvclxuICAgICAgaWYgKHJlamVjdCAhPT0gbnVsbCkge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgaXRlcmF0b3Jba0Vycm9yXSA9IGVycjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlc29sdmUgPSBpdGVyYXRvcltrTGFzdFJlc29sdmVdO1xuICAgIGlmIChyZXNvbHZlICE9PSBudWxsKSB7XG4gICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICB9XG4gICAgaXRlcmF0b3Jba0VuZGVkXSA9IHRydWU7XG4gIH0pO1xuICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgb25SZWFkYWJsZS5iaW5kKG51bGwsIGl0ZXJhdG9yKSk7XG4gIHJldHVybiBpdGVyYXRvcjtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjsiLCAibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignUmVhZGFibGUuZnJvbSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyJylcbn07XG4iLCAiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gRUVsaXN0ZW5lckNvdW50KGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge30pLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWc7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uIGRlYnVnKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvYnVmZmVyX2xpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RhdGUnKSxcbiAgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG52YXIgX3JlcXVpcmUkY29kZXMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKS5jb2RlcyxcbiAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRiA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YsXG4gIEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsXG4gIEVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UO1xuXG4vLyBMYXp5IGxvYWRlZCB0byBpbXByb3ZlIHRoZSBzdGFydHVwIHBlcmZvcm1hbmNlLlxudmFyIFN0cmluZ0RlY29kZXI7XG52YXIgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yO1xudmFyIGZyb207XG5yZXF1aXJlKCdpbmhlcml0cycpKFJlYWRhYmxlLCBTdHJlYW0pO1xudmFyIGVycm9yT3JEZXN0cm95ID0gZGVzdHJveUltcGwuZXJyb3JPckRlc3Ryb3k7XG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgaWYgKHR5cGVvZiBpc0R1cGxleCAhPT0gJ2Jvb2xlYW4nKSBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9ucywgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIGlzRHVwbGV4KTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHRoaXMucGF1c2VkID0gdHJ1ZTtcblxuICAvLyBTaG91bGQgY2xvc2UgYmUgZW1pdHRlZCBvbiBkZXN0cm95LiBEZWZhdWx0cyB0byB0cnVlLlxuICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMuZW1pdENsb3NlICE9PSBmYWxzZTtcblxuICAvLyBTaG91bGQgLmRlc3Ryb3koKSBiZSBjYWxsZWQgYWZ0ZXIgJ2VuZCcgKGFuZCBwb3RlbnRpYWxseSAnZmluaXNoJylcbiAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgLy8gQ2hlY2tpbmcgZm9yIGEgU3RyZWFtLkR1cGxleCBpbnN0YW5jZSBpcyBmYXN0ZXIgaGVyZSBpbnN0ZWFkIG9mIGluc2lkZVxuICAvLyB0aGUgUmVhZGFibGVTdGF0ZSBjb25zdHJ1Y3RvciwgYXQgbGVhc3Qgd2l0aCBWOCA2LjVcbiAgdmFyIGlzRHVwbGV4ID0gdGhpcyBpbnN0YW5jZW9mIER1cGxleDtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMsIGlzRHVwbGV4KTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICBkZWJ1ZygncmVhZGFibGVBZGRDaHVuaycsIGNodW5rKTtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBuZXcgRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCgpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBuZXcgRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRigpKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdlIGNhbiBwdXNoIG1vcmUgZGF0YSBpZiB3ZSBhcmUgYmVsb3cgdGhlIGhpZ2hXYXRlck1hcmsuXG4gIC8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lIG1vcmUgYnl0ZXMuXG4gIC8vIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsIHN1Y2ggYXMgdGhlIHJlcGwuXG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdjaHVuaycsIFsnc3RyaW5nJywgJ0J1ZmZlcicsICdVaW50OEFycmF5J10sIGNodW5rKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHZhciBkZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gZGVjb2RlcjtcbiAgLy8gSWYgc2V0RW5jb2RpbmcobnVsbCksIGRlY29kZXIuZW5jb2RpbmcgZXF1YWxzIHV0ZjhcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlci5lbmNvZGluZztcblxuICAvLyBJdGVyYXRlIG92ZXIgY3VycmVudCBidWZmZXIgdG8gY29udmVydCBhbHJlYWR5IHN0b3JlZCBCdWZmZXJzOlxuICB2YXIgcCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmhlYWQ7XG4gIHZhciBjb250ZW50ID0gJyc7XG4gIHdoaWxlIChwICE9PSBudWxsKSB7XG4gICAgY29udGVudCArPSBkZWNvZGVyLndyaXRlKHAuZGF0YSk7XG4gICAgcCA9IHAubmV4dDtcbiAgfVxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICBpZiAoY29udGVudCAhPT0gJycpIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLnB1c2goY29udGVudCk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoID0gY29udGVudC5sZW5ndGg7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDFHQlxudmFyIE1BWF9IV00gPSAweDQwMDAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgLy8gVE9ETyhyb25hZyk6IFRocm93IEVSUl9WQUxVRV9PVVRfT0ZfUkFOR0UuXG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoKHN0YXRlLmhpZ2hXYXRlck1hcmsgIT09IDAgPyBzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayA6IHN0YXRlLmxlbmd0aCA+IDApIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBzdGF0ZS5sZW5ndGggPD0gc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgfVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuICByZXR1cm4gcmV0O1xufTtcbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBkZWJ1Zygnb25Fb2ZDaHVuaycpO1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBpZiAoc3RhdGUuc3luYykge1xuICAgIC8vIGlmIHdlIGFyZSBzeW5jLCB3YWl0IHVudGlsIG5leHQgdGljayB0byBlbWl0IHRoZSBkYXRhLlxuICAgIC8vIE90aGVyd2lzZSB3ZSByaXNrIGVtaXR0aW5nIGRhdGEgaW4gdGhlIGZsb3coKVxuICAgIC8vIHRoZSByZWFkYWJsZSBjb2RlIHRyaWdnZXJzIGR1cmluZyBhIHJlYWQoKSBjYWxsXG4gICAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gICAgfVxuICB9XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLm5lZWRSZWFkYWJsZSwgc3RhdGUuZW1pdHRlZFJlYWRhYmxlKTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdlbWl0UmVhZGFibGVfJywgc3RhdGUuZGVzdHJveWVkLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgaWYgKCFzdGF0ZS5kZXN0cm95ZWQgJiYgKHN0YXRlLmxlbmd0aCB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBzdHJlYW0gbmVlZHMgYW5vdGhlciByZWFkYWJsZSBldmVudCBpZlxuICAvLyAxLiBJdCBpcyBub3QgZmxvd2luZywgYXMgdGhlIGZsb3cgbWVjaGFuaXNtIHdpbGwgdGFrZVxuICAvLyAgICBjYXJlIG9mIGl0LlxuICAvLyAyLiBJdCBpcyBub3QgZW5kZWQuXG4gIC8vIDMuIEl0IGlzIGJlbG93IHRoZSBoaWdoV2F0ZXJNYXJrLCBzbyB3ZSBjYW4gc2NoZWR1bGVcbiAgLy8gICAgYW5vdGhlciByZWFkYWJsZSBsYXRlci5cbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgLy8gQXR0ZW1wdCB0byByZWFkIG1vcmUgZGF0YSBpZiB3ZSBzaG91bGQuXG4gIC8vXG4gIC8vIFRoZSBjb25kaXRpb25zIGZvciByZWFkaW5nIG1vcmUgZGF0YSBhcmUgKG9uZSBvZik6XG4gIC8vIC0gTm90IGVub3VnaCBkYXRhIGJ1ZmZlcmVkIChzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKS4gVGhlIGxvb3BcbiAgLy8gICBpcyByZXNwb25zaWJsZSBmb3IgZmlsbGluZyB0aGUgYnVmZmVyIHdpdGggZW5vdWdoIGRhdGEgaWYgc3VjaCBkYXRhXG4gIC8vICAgaXMgYXZhaWxhYmxlLiBJZiBoaWdoV2F0ZXJNYXJrIGlzIDAgYW5kIHdlIGFyZSBub3QgaW4gdGhlIGZsb3dpbmcgbW9kZVxuICAvLyAgIHdlIHNob3VsZCBfbm90XyBhdHRlbXB0IHRvIGJ1ZmZlciBhbnkgZXh0cmEgZGF0YS4gV2UnbGwgZ2V0IG1vcmUgZGF0YVxuICAvLyAgIHdoZW4gdGhlIHN0cmVhbSBjb25zdW1lciBjYWxscyByZWFkKCkgaW5zdGVhZC5cbiAgLy8gLSBObyBkYXRhIGluIHRoZSBidWZmZXIsIGFuZCB0aGUgc3RyZWFtIGlzIGluIGZsb3dpbmcgbW9kZS4gSW4gdGhpcyBtb2RlXG4gIC8vICAgdGhlIGxvb3AgYmVsb3cgaXMgcmVzcG9uc2libGUgZm9yIGVuc3VyaW5nIHJlYWQoKSBpcyBjYWxsZWQuIEZhaWxpbmcgdG9cbiAgLy8gICBjYWxsIHJlYWQgaGVyZSB3b3VsZCBhYm9ydCB0aGUgZmxvdyBhbmQgdGhlcmUncyBubyBvdGhlciBtZWNoYW5pc20gZm9yXG4gIC8vICAgY29udGludWluZyB0aGUgZmxvdyBpZiB0aGUgc3RyZWFtIGNvbnN1bWVyIGhhcyBqdXN0IHN1YnNjcmliZWQgdG8gdGhlXG4gIC8vICAgJ2RhdGEnIGV2ZW50LlxuICAvL1xuICAvLyBJbiBhZGRpdGlvbiB0byB0aGUgYWJvdmUgY29uZGl0aW9ucyB0byBrZWVwIHJlYWRpbmcgZGF0YSwgdGhlIGZvbGxvd2luZ1xuICAvLyBjb25kaXRpb25zIHByZXZlbnQgdGhlIGRhdGEgZnJvbSBiZWluZyByZWFkOlxuICAvLyAtIFRoZSBzdHJlYW0gaGFzIGVuZGVkIChzdGF0ZS5lbmRlZCkuXG4gIC8vIC0gVGhlcmUgaXMgYWxyZWFkeSBhIHBlbmRpbmcgJ3JlYWQnIG9wZXJhdGlvbiAoc3RhdGUucmVhZGluZykuIFRoaXMgaXMgYVxuICAvLyAgIGNhc2Ugd2hlcmUgdGhlIHRoZSBzdHJlYW0gaGFzIGNhbGxlZCB0aGUgaW1wbGVtZW50YXRpb24gZGVmaW5lZCBfcmVhZCgpXG4gIC8vICAgbWV0aG9kLCBidXQgdGhleSBhcmUgcHJvY2Vzc2luZyB0aGUgY2FsbCBhc3luY2hyb25vdXNseSBhbmQgaGF2ZSBfbm90X1xuICAvLyAgIGNhbGxlZCBwdXNoKCkgd2l0aCBuZXcgZGF0YS4gSW4gdGhpcyBjYXNlIHdlIHNraXAgcGVyZm9ybWluZyBtb3JlXG4gIC8vICAgcmVhZCgpcy4gVGhlIGV4ZWN1dGlvbiBlbmRzIGluIHRoaXMgbWV0aG9kIGFnYWluIGFmdGVyIHRoZSBfcmVhZCgpIGVuZHNcbiAgLy8gICB1cCBjYWxsaW5nIHB1c2goKSB3aXRoIG1vcmUgZGF0YS5cbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkpIHtcbiAgICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGVycm9yT3JEZXN0cm95KHRoaXMsIG5ldyBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCgnX3JlYWQoKScpKTtcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwcm9jZXNzLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBkZWJ1ZygnZGVzdC53cml0ZScsIHJldCk7XG4gICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBlcnJvck9yRGVzdHJveShkZXN0LCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cbiAgcmV0dXJuIGRlc3Q7XG59O1xuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwaXBlT25EcmFpbkZ1bmN0aW9uUmVzdWx0KCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHtcbiAgICBoYXNVbnBpcGVkOiBmYWxzZVxuICB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywge1xuICAgICAgaGFzVW5waXBlZDogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gdXBkYXRlIHJlYWRhYmxlTGlzdGVuaW5nIHNvIHRoYXQgcmVzdW1lKCkgbWF5IGJlIGEgbm8tb3BcbiAgICAvLyBhIGZldyBsaW5lcyBkb3duLiBUaGlzIGlzIG5lZWRlZCB0byBzdXBwb3J0IG9uY2UoJ3JlYWRhYmxlJykuXG4gICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSB0aGlzLmxpc3RlbmVyQ291bnQoJ3JlYWRhYmxlJykgPiAwO1xuXG4gICAgLy8gVHJ5IHN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmIChzdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgZGVidWcoJ29uIHJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5yZWFkaW5nKTtcbiAgICAgIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfSBlbHNlIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblJlYWRhYmxlLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIuY2FsbCh0aGlzLCBldiwgZm4pO1xuICBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIHNvbWVvbmUgc3RpbGwgbGlzdGVuaW5nIHRvXG4gICAgLy8gcmVhZGFibGUgYW5kIHJlc2V0IHRoZSBzdGF0ZS4gSG93ZXZlciB0aGlzIG5lZWRzIHRvIGhhcHBlblxuICAgIC8vIGFmdGVyIHJlYWRhYmxlIGhhcyBiZWVuIGVtaXR0ZWQgYnV0IGJlZm9yZSBJL08gKG5leHRUaWNrKSB0b1xuICAgIC8vIHN1cHBvcnQgb25jZSgncmVhZGFibGUnLCBmbikgY3ljbGVzLiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZ1xuICAgIC8vIHJlc3VtZSB3aXRoaW4gdGhlIHNhbWUgdGljayB3aWxsIGhhdmUgbm9cbiAgICAvLyBlZmZlY3QuXG4gICAgcHJvY2Vzcy5uZXh0VGljayh1cGRhdGVSZWFkYWJsZUxpc3RlbmluZywgdGhpcyk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2KSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBpZiAoZXYgPT09ICdyZWFkYWJsZScgfHwgZXYgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgaXMgc29tZW9uZSBzdGlsbCBsaXN0ZW5pbmcgdG9cbiAgICAvLyByZWFkYWJsZSBhbmQgcmVzZXQgdGhlIHN0YXRlLiBIb3dldmVyIHRoaXMgbmVlZHMgdG8gaGFwcGVuXG4gICAgLy8gYWZ0ZXIgcmVhZGFibGUgaGFzIGJlZW4gZW1pdHRlZCBidXQgYmVmb3JlIEkvTyAobmV4dFRpY2spIHRvXG4gICAgLy8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScsIGZuKSBjeWNsZXMuIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nXG4gICAgLy8gcmVzdW1lIHdpdGhpbiB0aGUgc2FtZSB0aWNrIHdpbGwgaGF2ZSBub1xuICAgIC8vIGVmZmVjdC5cbiAgICBwcm9jZXNzLm5leHRUaWNrKHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nLCB0aGlzKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbmZ1bmN0aW9uIHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nKHNlbGYpIHtcbiAgdmFyIHN0YXRlID0gc2VsZi5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzZWxmLmxpc3RlbmVyQ291bnQoJ3JlYWRhYmxlJykgPiAwO1xuICBpZiAoc3RhdGUucmVzdW1lU2NoZWR1bGVkICYmICFzdGF0ZS5wYXVzZWQpIHtcbiAgICAvLyBmbG93aW5nIG5lZWRzIHRvIGJlIHNldCB0byB0cnVlIG5vdywgb3RoZXJ3aXNlXG4gICAgLy8gdGhlIHVwY29taW5nIHJlc3VtZSB3aWxsIG5vdCBmbG93LlxuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuXG4gICAgLy8gY3J1ZGUgd2F5IHRvIGNoZWNrIGlmIHdlIHNob3VsZCByZXN1bWVcbiAgfSBlbHNlIGlmIChzZWxmLmxpc3RlbmVyQ291bnQoJ2RhdGEnKSA+IDApIHtcbiAgICBzZWxmLnJlc3VtZSgpO1xuICB9XG59XG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICAvLyB3ZSBmbG93IG9ubHkgaWYgdGhlcmUgaXMgbm8gb25lIGxpc3RlbmluZ1xuICAgIC8vIGZvciByZWFkYWJsZSwgYnV0IHdlIHN0aWxsIGhhdmUgdG8gY2FsbFxuICAgIC8vIHJlc3VtZSgpXG4gICAgc3RhdGUuZmxvd2luZyA9ICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZztcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHN0YXRlLnBhdXNlZCA9IGZhbHNlO1xuICByZXR1cm4gdGhpcztcbn07XG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGRlYnVnKCdyZXN1bWUnLCBzdGF0ZS5yZWFkaW5nKTtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZCA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCk7XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiBtZXRob2RXcmFwKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWV0aG9kV3JhcFJldHVybkZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdGhpcztcbn07XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWFkYWJsZS5wcm90b3R5cGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yJyk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IodGhpcyk7XG4gIH07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlRmxvd2luZycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gc3RhdGU7XG4gICAgfVxuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVMZW5ndGgnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmxlbmd0aDtcbiAgfVxufSk7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmZpcnN0KCk7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBzdGF0ZS5idWZmZXIuY29uc3VtZShuLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VuZFJlYWRhYmxlJywgc3RhdGUuZW5kRW1pdHRlZCk7XG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgZGVidWcoJ2VuZFJlYWRhYmxlTlQnLCBzdGF0ZS5lbmRFbWl0dGVkLCBzdGF0ZS5sZW5ndGgpO1xuXG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICAgIGlmIChzdGF0ZS5hdXRvRGVzdHJveSkge1xuICAgICAgLy8gSW4gY2FzZSBvZiBkdXBsZXggc3RyZWFtcyB3ZSBuZWVkIGEgd2F5IHRvIGRldGVjdFxuICAgICAgLy8gaWYgdGhlIHdyaXRhYmxlIHNpZGUgaXMgcmVhZHkgZm9yIGF1dG9EZXN0cm95IGFzIHdlbGxcbiAgICAgIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gICAgICBpZiAoIXdTdGF0ZSB8fCB3U3RhdGUuYXV0b0Rlc3Ryb3kgJiYgd1N0YXRlLmZpbmlzaGVkKSB7XG4gICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWFkYWJsZS5mcm9tID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBvcHRzKSB7XG4gICAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZnJvbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9mcm9tJyk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tKFJlYWRhYmxlLCBpdGVyYWJsZSwgb3B0cyk7XG4gIH07XG59XG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwgIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5yZXF1aXJlKCdpbmhlcml0cycpKER1cGxleCwgUmVhZGFibGUpO1xue1xuICAvLyBBbGxvdyB0aGUga2V5cyBhcnJheSB0byBiZSBHQydlZC5cbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIGlmIChvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICAgIGlmIChvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xuICAgIH1cbiAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlTGVuZ3RoJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGg7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gSWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcHJvY2Vzcy5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTsiLCAiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge30pLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RhdGUnKSxcbiAgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG52YXIgX3JlcXVpcmUkY29kZXMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKS5jb2RlcyxcbiAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxcbiAgRVJSX01VTFRJUExFX0NBTExCQUNLID0gX3JlcXVpcmUkY29kZXMuRVJSX01VTFRJUExFX0NBTExCQUNLLFxuICBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9DQU5OT1RfUElQRSxcbiAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRCxcbiAgRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMsXG4gIEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQsXG4gIEVSUl9VTktOT1dOX0VOQ09ESU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1VOS05PV05fRU5DT0RJTkc7XG52YXIgZXJyb3JPckRlc3Ryb3kgPSBkZXN0cm95SW1wbC5lcnJvck9yRGVzdHJveTtcbnJlcXVpcmUoJ2luaGVyaXRzJykoV3JpdGFibGUsIFN0cmVhbSk7XG5mdW5jdGlvbiBub3AoKSB7fVxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLFxuICAvLyBlLmcuIG9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlIHZzLiBvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZSwgZXRjLlxuICBpZiAodHlwZW9mIGlzRHVwbGV4ICE9PSAnYm9vbGVhbicpIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBnZXRIaWdoV2F0ZXJNYXJrKHRoaXMsIG9wdGlvbnMsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCBpc0R1cGxleCk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIFNob3VsZCBjbG9zZSBiZSBlbWl0dGVkIG9uIGRlc3Ryb3kuIERlZmF1bHRzIHRvIHRydWUuXG4gIHRoaXMuZW1pdENsb3NlID0gb3B0aW9ucy5lbWl0Q2xvc2UgIT09IGZhbHNlO1xuXG4gIC8vIFNob3VsZCAuZGVzdHJveSgpIGJlIGNhbGxlZCBhZnRlciAnZmluaXNoJyAoYW5kIHBvdGVudGlhbGx5ICdlbmQnKVxuICB0aGlzLmF1dG9EZXN0cm95ID0gISFvcHRpb25zLmF1dG9EZXN0cm95O1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVCdWZmZXJHZXR0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiByZWFsSGFzSW5zdGFuY2Uob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG5cbiAgLy8gQ2hlY2tpbmcgZm9yIGEgU3RyZWFtLkR1cGxleCBpbnN0YW5jZSBpcyBmYXN0ZXIgaGVyZSBpbnN0ZWFkIG9mIGluc2lkZVxuICAvLyB0aGUgV3JpdGFibGVTdGF0ZSBjb25zdHJ1Y3RvciwgYXQgbGVhc3Qgd2l0aCBWOCA2LjVcbiAgdmFyIGlzRHVwbGV4ID0gdGhpcyBpbnN0YW5jZW9mIER1cGxleDtcbiAgaWYgKCFpc0R1cGxleCAmJiAhcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpKSByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcywgaXNEdXBsZXgpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX1NUUkVBTV9DQU5OT1RfUElQRSgpKTtcbn07XG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EKCk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICBwcm9jZXNzLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciBlcjtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUygpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnY2h1bmsnLCBbJ3N0cmluZycsICdCdWZmZXInXSwgY2h1bmspO1xuICB9XG4gIGlmIChlcikge1xuICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG4gIGlmIChzdGF0ZS5lbmRpbmcpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5jb3JrZWQrKztcbn07XG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgRVJSX1VOS05PV05fRU5DT0RJTkcoZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVCdWZmZXInLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyKCk7XG4gIH1cbn0pO1xuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmIChzdGF0ZS5kZXN0cm95ZWQpIHN0YXRlLm9ud3JpdGUobmV3IEVSUl9TVFJFQU1fREVTVFJPWUVEKCd3cml0ZScpKTtlbHNlIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHByb2Nlc3MubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVSUl9NVUxUSVBMRV9DQUxMQkFDSygpO1xuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSkgfHwgc3RyZWFtLmRlc3Ryb3llZDtcbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEKCdfd3JpdGUoKScpKTtcbn07XG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xuICByZXR1cm4gdGhpcztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVMZW5ndGgnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmxlbmd0aDtcbiAgfVxufSk7XG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicgJiYgIXN0YXRlLmRlc3Ryb3llZCkge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgICAgaWYgKHN0YXRlLmF1dG9EZXN0cm95KSB7XG4gICAgICAgIC8vIEluIGNhc2Ugb2YgZHVwbGV4IHN0cmVhbXMgd2UgbmVlZCBhIHdheSB0byBkZXRlY3RcbiAgICAgICAgLy8gaWYgdGhlIHJlYWRhYmxlIHNpZGUgaXMgcmVhZHkgZm9yIGF1dG9EZXN0cm95IGFzIHdlbGxcbiAgICAgICAgdmFyIHJTdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgICAgICAgaWYgKCFyU3RhdGUgfHwgclN0YXRlLmF1dG9EZXN0cm95ICYmIHJTdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHByb2Nlc3MubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cblxuICAvLyByZXVzZSB0aGUgZnJlZSBjb3JrUmVxLlxuICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBjYihlcnIpO1xufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCd0cmlwbGUtYmVhbScpLFxuICAgIExFVkVMID0gX3JlcXVpcmUuTEVWRUw7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBUcmFuc3BvcnRTdHJlYW0uIFRoaXMgaXMgdGhlIGJhc2UgcHJvdG90eXBlXG4gKiB0aGF0IGFsbCBgd2luc3RvbiA+PSAzYCB0cmFuc3BvcnRzIHNob3VsZCBpbmhlcml0IGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoaXMgVHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5sZXZlbCAtIEhpZ2hlc3QgbGV2ZWwgYWNjb3JkaW5nIHRvIFJGQzU0MjQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuaGFuZGxlRXhjZXB0aW9ucyAtIElmIHRydWUsIGluZm8gd2l0aFxuICogeyBleGNlcHRpb246IHRydWUgfSB3aWxsIGJlIHdyaXR0ZW4uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmxvZyAtIEN1c3RvbSBsb2cgZnVuY3Rpb24gZm9yIHNpbXBsZSBUcmFuc3BvcnRcbiAqIGNyZWF0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmNsb3NlIC0gQ2FsbGVkIG9uIFwidW5waXBlXCIgZnJvbSBwYXJlbnQuXG4gKi9cblxuXG52YXIgVHJhbnNwb3J0U3RyZWFtID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUcmFuc3BvcnRTdHJlYW0oKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIFdyaXRhYmxlLmNhbGwodGhpcywgeyBvYmplY3RNb2RlOiB0cnVlLCBoaWdoV2F0ZXJNYXJrOiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgfSk7XG5cbiAgdGhpcy5mb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgdGhpcy5sZXZlbCA9IG9wdGlvbnMubGV2ZWw7XG4gIHRoaXMuaGFuZGxlRXhjZXB0aW9ucyA9IG9wdGlvbnMuaGFuZGxlRXhjZXB0aW9ucztcbiAgdGhpcy5oYW5kbGVSZWplY3Rpb25zID0gb3B0aW9ucy5oYW5kbGVSZWplY3Rpb25zO1xuICB0aGlzLnNpbGVudCA9IG9wdGlvbnMuc2lsZW50O1xuXG4gIGlmIChvcHRpb25zLmxvZykgdGhpcy5sb2cgPSBvcHRpb25zLmxvZztcbiAgaWYgKG9wdGlvbnMubG9ndikgdGhpcy5sb2d2ID0gb3B0aW9ucy5sb2d2O1xuICBpZiAob3B0aW9ucy5jbG9zZSkgdGhpcy5jbG9zZSA9IG9wdGlvbnMuY2xvc2U7XG5cbiAgLy8gR2V0IHRoZSBsZXZlbHMgZnJvbSB0aGUgc291cmNlIHdlIGFyZSBwaXBlZCBmcm9tLlxuICB0aGlzLm9uY2UoJ3BpcGUnLCBmdW5jdGlvbiAobG9nZ2VyKSB7XG4gICAgLy8gUmVtYXJrIChpbmRleHplcm8pOiB0aGlzIGJvb2trZWVwaW5nIGNhbiBvbmx5IHN1cHBvcnQgbXVsdGlwbGVcbiAgICAvLyBMb2dnZXIgcGFyZW50cyB3aXRoIHRoZSBzYW1lIGBsZXZlbHNgLiBUaGlzIGNvbWVzIGludG8gcGxheSBpblxuICAgIC8vIHRoZSBgd2luc3Rvbi5Db250YWluZXJgIGNvZGUgaW4gd2hpY2ggYGNvbnRhaW5lci5hZGRgIHRha2VzXG4gICAgLy8gYSBmdWxseSByZWFsaXplZCBzZXQgb2Ygb3B0aW9ucyB3aXRoIHByZS1jb25zdHJ1Y3RlZCBUcmFuc3BvcnRTdHJlYW1zLlxuICAgIF90aGlzLmxldmVscyA9IGxvZ2dlci5sZXZlbHM7XG4gICAgX3RoaXMucGFyZW50ID0gbG9nZ2VyO1xuICB9KTtcblxuICAvLyBJZiBhbmQvb3Igd2hlbiB0aGUgdHJhbnNwb3J0IGlzIHJlbW92ZWQgZnJvbSB0aGlzIGluc3RhbmNlXG4gIHRoaXMub25jZSgndW5waXBlJywgZnVuY3Rpb24gKHNyYykge1xuICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogdGhpcyBib29ra2VlcGluZyBjYW4gb25seSBzdXBwb3J0IG11bHRpcGxlXG4gICAgLy8gTG9nZ2VyIHBhcmVudHMgd2l0aCB0aGUgc2FtZSBgbGV2ZWxzYC4gVGhpcyBjb21lcyBpbnRvIHBsYXkgaW5cbiAgICAvLyB0aGUgYHdpbnN0b24uQ29udGFpbmVyYCBjb2RlIGluIHdoaWNoIGBjb250YWluZXIuYWRkYCB0YWtlc1xuICAgIC8vIGEgZnVsbHkgcmVhbGl6ZWQgc2V0IG9mIG9wdGlvbnMgd2l0aCBwcmUtY29uc3RydWN0ZWQgVHJhbnNwb3J0U3RyZWFtcy5cbiAgICBpZiAoc3JjID09PSBfdGhpcy5wYXJlbnQpIHtcbiAgICAgIF90aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICBpZiAoX3RoaXMuY2xvc2UpIHtcbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuLypcbiAqIEluaGVyaXQgZnJvbSBXcml0ZWFibGUgdXNpbmcgTm9kZS5qcyBidWlsdC1pbnNcbiAqL1xudXRpbC5pbmhlcml0cyhUcmFuc3BvcnRTdHJlYW0sIFdyaXRhYmxlKTtcblxuLyoqXG4gKiBXcml0ZXMgdGhlIGluZm8gb2JqZWN0IHRvIG91ciB0cmFuc3BvcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge21peGVkfSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHttaXhlZH0gZW5jIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqL1xuVHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUoaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICBpZiAodGhpcy5zaWxlbnQgfHwgaW5mby5leGNlcHRpb24gPT09IHRydWUgJiYgIXRoaXMuaGFuZGxlRXhjZXB0aW9ucykge1xuICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgfVxuXG4gIC8vIFJlbWFyazogVGhpcyBoYXMgdG8gYmUgaGFuZGxlZCBpbiB0aGUgYmFzZSB0cmFuc3BvcnQgbm93IGJlY2F1c2Ugd2VcbiAgLy8gY2Fubm90IGNvbmRpdGlvbmFsbHkgd3JpdGUgdG8gb3VyIHBpcGUgdGFyZ2V0cyBhcyBzdHJlYW0uIFdlIGFsd2F5c1xuICAvLyBwcmVmZXIgYW55IGV4cGxpY2l0IGxldmVsIHNldCBvbiB0aGUgVHJhbnNwb3J0IGl0c2VsZiBmYWxsaW5nIGJhY2sgdG9cbiAgLy8gYW55IGxldmVsIHNldCBvbiB0aGUgcGFyZW50LlxuICB2YXIgbGV2ZWwgPSB0aGlzLmxldmVsIHx8IHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmxldmVsO1xuXG4gIGlmICghbGV2ZWwgfHwgdGhpcy5sZXZlbHNbbGV2ZWxdID49IHRoaXMubGV2ZWxzW2luZm9bTEVWRUxdXSkge1xuICAgIGlmIChpbmZvICYmICF0aGlzLmZvcm1hdCkge1xuICAgICAgcmV0dXJuIHRoaXMubG9nKGluZm8sIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICB2YXIgZXJyU3RhdGUgPSB2b2lkIDA7XG4gICAgdmFyIHRyYW5zZm9ybWVkID0gdm9pZCAwO1xuXG4gICAgLy8gV2UgdHJhcChhbmQgcmUtdGhyb3cpIGFueSBlcnJvcnMgZ2VuZXJhdGVkIGJ5IHRoZSB1c2VyLXByb3ZpZGVkIGZvcm1hdCwgYnV0IGFsc29cbiAgICAvLyBndWFyYW50ZWUgdGhhdCB0aGUgc3RyZWFtcyBjYWxsYmFjayBpcyBpbnZva2VkIHNvIHRoYXQgd2UgY2FuIGNvbnRpbnVlIGZsb3dpbmcuXG4gICAgdHJ5IHtcbiAgICAgIHRyYW5zZm9ybWVkID0gdGhpcy5mb3JtYXQudHJhbnNmb3JtKE9iamVjdC5hc3NpZ24oe30sIGluZm8pLCB0aGlzLmZvcm1hdC5vcHRpb25zKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGVyclN0YXRlID0gZXJyO1xuICAgIH1cblxuICAgIGlmIChlcnJTdGF0ZSB8fCAhdHJhbnNmb3JtZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICBpZiAoZXJyU3RhdGUpIHRocm93IGVyclN0YXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvZyh0cmFuc2Zvcm1lZCwgY2FsbGJhY2spO1xuICB9XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyB0aGUgYmF0Y2ggb2YgaW5mbyBvYmplY3RzIChpLmUuIFwib2JqZWN0IGNodW5rc1wiKSB0byBvdXIgdHJhbnNwb3J0XG4gKiBpbnN0YW5jZSBhZnRlciBwZXJmb3JtaW5nIGFueSBuZWNlc3NhcnkgZmlsdGVyaW5nLlxuICogQHBhcmFtIHttaXhlZH0gY2h1bmtzIC0gVE9ETzogYWRkIHBhcmFtcyBkZXNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtcyBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJucyBkZXNjcmlwdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cblRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX3dyaXRldiA9IGZ1bmN0aW9uIF93cml0ZXYoY2h1bmtzLCBjYWxsYmFjaykge1xuICBpZiAodGhpcy5sb2d2KSB7XG4gICAgdmFyIGluZm9zID0gY2h1bmtzLmZpbHRlcih0aGlzLl9hY2NlcHQsIHRoaXMpO1xuICAgIGlmICghaW5mb3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuXG4gICAgLy8gUmVtYXJrIChpbmRleHplcm8pOiBmcm9tIGEgcGVyZm9ybWFuY2UgcGVyc3BlY3RpdmUgaWYgVHJhbnNwb3J0XG4gICAgLy8gaW1wbGVtZW50ZXJzIGRvIGNob29zZSB0byBpbXBsZW1lbnQgbG9ndiBzaG91bGQgd2UgbWFrZSBpdCB0aGVpclxuICAgIC8vIHJlc3BvbnNpYmlsaXR5IHRvIGludm9rZSB0aGVpciBmb3JtYXQ/XG4gICAgcmV0dXJuIHRoaXMubG9ndihpbmZvcywgY2FsbGJhY2spO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXRoaXMuX2FjY2VwdChjaHVua3NbaV0pKSBjb250aW51ZTtcblxuICAgIGlmIChjaHVua3NbaV0uY2h1bmsgJiYgIXRoaXMuZm9ybWF0KSB7XG4gICAgICB0aGlzLmxvZyhjaHVua3NbaV0uY2h1bmssIGNodW5rc1tpXS5jYWxsYmFjayk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgZXJyU3RhdGUgPSB2b2lkIDA7XG4gICAgdmFyIHRyYW5zZm9ybWVkID0gdm9pZCAwO1xuXG4gICAgLy8gV2UgdHJhcChhbmQgcmUtdGhyb3cpIGFueSBlcnJvcnMgZ2VuZXJhdGVkIGJ5IHRoZSB1c2VyLXByb3ZpZGVkIGZvcm1hdCwgYnV0IGFsc29cbiAgICAvLyBndWFyYW50ZWUgdGhhdCB0aGUgc3RyZWFtcyBjYWxsYmFjayBpcyBpbnZva2VkIHNvIHRoYXQgd2UgY2FuIGNvbnRpbnVlIGZsb3dpbmcuXG4gICAgdHJ5IHtcbiAgICAgIHRyYW5zZm9ybWVkID0gdGhpcy5mb3JtYXQudHJhbnNmb3JtKE9iamVjdC5hc3NpZ24oe30sIGNodW5rc1tpXS5jaHVuayksIHRoaXMuZm9ybWF0Lm9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyU3RhdGUgPSBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGVyclN0YXRlIHx8ICF0cmFuc2Zvcm1lZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgY2h1bmtzW2ldLmNhbGxiYWNrKCk7XG4gICAgICBpZiAoZXJyU3RhdGUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgdGhyb3cgZXJyU3RhdGU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nKHRyYW5zZm9ybWVkLCBjaHVua3NbaV0uY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhudWxsKTtcbn07XG5cbi8qKlxuICogUHJlZGljYXRlIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjZmllZCBgaW5mb2Agb24gdGhlXG4gKiBXcml0ZVJlcSwgYHdyaXRlYCwgc2hvdWxkIGJlIHBhc3NlZCBkb3duIGludG8gdGhlIGRlcml2ZWRcbiAqIFRyYW5zcG9ydFN0cmVhbSdzIEkvTyB2aWEgYC5sb2coaW5mbywgY2FsbGJhY2spYC5cbiAqIEBwYXJhbSB7V3JpdGVSZXF9IHdyaXRlIC0gd2luc3RvbkAzIE5vZGUuanMgV3JpdGVSZXEgZm9yIHRoZSBgaW5mb2Agb2JqZWN0XG4gKiByZXByZXNlbnRpbmcgdGhlIGxvZyBtZXNzYWdlLlxuICogQHJldHVybnMge0Jvb2xlYW59IC0gVmFsdWUgaW5kaWNhdGluZyBpZiB0aGUgYHdyaXRlYCBzaG91bGQgYmUgYWNjZXB0ZWQgJlxuICogbG9nZ2VkLlxuICovXG5UcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl9hY2NlcHQgPSBmdW5jdGlvbiBfYWNjZXB0KHdyaXRlKSB7XG4gIHZhciBpbmZvID0gd3JpdGUuY2h1bms7XG4gIGlmICh0aGlzLnNpbGVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFdlIGFsd2F5cyBwcmVmZXIgYW55IGV4cGxpY2l0IGxldmVsIHNldCBvbiB0aGUgVHJhbnNwb3J0IGl0c2VsZlxuICAvLyBmYWxsaW5nIGJhY2sgdG8gYW55IGxldmVsIHNldCBvbiB0aGUgcGFyZW50LlxuICB2YXIgbGV2ZWwgPSB0aGlzLmxldmVsIHx8IHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmxldmVsO1xuXG4gIC8vIEltbWVkaWF0ZWx5IGNoZWNrIHRoZSBhdmVyYWdlIGNhc2U6IGxvZyBsZXZlbCBmaWx0ZXJpbmcuXG4gIGlmIChpbmZvLmV4Y2VwdGlvbiA9PT0gdHJ1ZSB8fCAhbGV2ZWwgfHwgdGhpcy5sZXZlbHNbbGV2ZWxdID49IHRoaXMubGV2ZWxzW2luZm9bTEVWRUxdXSkge1xuICAgIC8vIEVuc3VyZSB0aGUgaW5mbyBvYmplY3QgaXMgdmFsaWQgYmFzZWQgb24gYHsgZXhjZXB0aW9uIH1gOlxuICAgIC8vIDEuIHsgaGFuZGxlRXhjZXB0aW9uczogdHJ1ZSB9OiBhbGwgYGluZm9gIG9iamVjdHMgYXJlIHZhbGlkXG4gICAgLy8gMi4geyBleGNlcHRpb246IGZhbHNlIH06IGFjY2VwdGVkIGJ5IGFsbCB0cmFuc3BvcnRzLlxuICAgIGlmICh0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgfHwgaW5mby5leGNlcHRpb24gIT09IHRydWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogX25vcCBpcyBzaG9ydCBmb3IgXCJObyBvcGVyYXRpb25cIlxuICogQHJldHVybnMge0Jvb2xlYW59IEludGVudGlvbmFsbHkgZmFsc2UuXG4gKi9cblRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX25vcCA9IGZ1bmN0aW9uIF9ub3AoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZmluZWRcbiAgcmV0dXJuIHZvaWQgdW5kZWZpbmVkO1xufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgICBMRVZFTCA9IF9yZXF1aXJlLkxFVkVMO1xuXG52YXIgVHJhbnNwb3J0U3RyZWFtID0gcmVxdWlyZSgnLi9tb2Rlcm4nKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIExlZ2FjeVRyYW5zcG9ydFN0cmVhbS4gVGhpcyBpcyBhbiBpbnRlcm5hbFxuICogd3JhcHBlciBgd2luc3RvbiA+PSAzYCB1c2VzIHRvIHdyYXAgb2xkZXIgdHJhbnNwb3J0cyBpbXBsZW1lbnRpbmdcbiAqIGxvZyhsZXZlbCwgbWVzc2FnZSwgbWV0YSkuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoaXMgVHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLlxuICogQHBhcmFtIHtUcmFuc3BvdH0gb3B0aW9ucy50cmFuc3BvcnQgLSB3aW5zdG9uQDIgb3Igb2xkZXIgVHJhbnNwb3J0IHRvIHdyYXAuXG4gKi9cblxudmFyIExlZ2FjeVRyYW5zcG9ydFN0cmVhbSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTGVnYWN5VHJhbnNwb3J0U3RyZWFtKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgVHJhbnNwb3J0U3RyZWFtLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIGlmICghb3B0aW9ucy50cmFuc3BvcnQgfHwgdHlwZW9mIG9wdGlvbnMudHJhbnNwb3J0LmxvZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0cmFuc3BvcnQsIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYSBsb2cgbWV0aG9kLicpO1xuICB9XG5cbiAgdGhpcy50cmFuc3BvcnQgPSBvcHRpb25zLnRyYW5zcG9ydDtcbiAgdGhpcy5sZXZlbCA9IHRoaXMubGV2ZWwgfHwgb3B0aW9ucy50cmFuc3BvcnQubGV2ZWw7XG4gIHRoaXMuaGFuZGxlRXhjZXB0aW9ucyA9IHRoaXMuaGFuZGxlRXhjZXB0aW9ucyB8fCBvcHRpb25zLnRyYW5zcG9ydC5oYW5kbGVFeGNlcHRpb25zO1xuXG4gIC8vIERpc3BsYXkgb3VyIGRlcHJlY2F0aW9uIG5vdGljZS5cbiAgdGhpcy5fZGVwcmVjYXRlZCgpO1xuXG4gIC8vIFByb3Blcmx5IGJ1YmJsZSB1cCBlcnJvcnMgZnJvbSB0aGUgdHJhbnNwb3J0IHRvIHRoZVxuICAvLyBMZWdhY3lUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2UsIGJ1dCBvbmx5IG9uY2Ugbm8gbWF0dGVyIGhvdyBtYW55IHRpbWVzXG4gIC8vIHRoaXMgdHJhbnNwb3J0IGlzIHNoYXJlZC5cbiAgZnVuY3Rpb24gdHJhbnNwb3J0RXJyb3IoZXJyKSB7XG4gICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyciwgdGhpcy50cmFuc3BvcnQpO1xuICB9XG5cbiAgaWYgKCF0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvcikge1xuICAgIHRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yID0gdHJhbnNwb3J0RXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5vbignZXJyb3InLCB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvcik7XG4gIH1cbn07XG5cbi8qXG4gKiBJbmhlcml0IGZyb20gVHJhbnNwb3J0U3RyZWFtIHVzaW5nIE5vZGUuanMgYnVpbHQtaW5zXG4gKi9cbnV0aWwuaW5oZXJpdHMoTGVnYWN5VHJhbnNwb3J0U3RyZWFtLCBUcmFuc3BvcnRTdHJlYW0pO1xuXG4vKipcbiAqIFdyaXRlcyB0aGUgaW5mbyBvYmplY3QgdG8gb3VyIHRyYW5zcG9ydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge21peGVkfSBlbmMgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZShpbmZvLCBlbmMsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLnNpbGVudCB8fCBpbmZvLmV4Y2VwdGlvbiA9PT0gdHJ1ZSAmJiAhdGhpcy5oYW5kbGVFeGNlcHRpb25zKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICB9XG5cbiAgLy8gUmVtYXJrOiBUaGlzIGhhcyB0byBiZSBoYW5kbGVkIGluIHRoZSBiYXNlIHRyYW5zcG9ydCBub3cgYmVjYXVzZSB3ZVxuICAvLyBjYW5ub3QgY29uZGl0aW9uYWxseSB3cml0ZSB0byBvdXIgcGlwZSB0YXJnZXRzIGFzIHN0cmVhbS5cbiAgaWYgKCF0aGlzLmxldmVsIHx8IHRoaXMubGV2ZWxzW3RoaXMubGV2ZWxdID49IHRoaXMubGV2ZWxzW2luZm9bTEVWRUxdXSkge1xuICAgIHRoaXMudHJhbnNwb3J0LmxvZyhpbmZvW0xFVkVMXSwgaW5mby5tZXNzYWdlLCBpbmZvLCB0aGlzLl9ub3ApO1xuICB9XG5cbiAgY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyB0aGUgYmF0Y2ggb2YgaW5mbyBvYmplY3RzIChpLmUuIFwib2JqZWN0IGNodW5rc1wiKSB0byBvdXIgdHJhbnNwb3J0XG4gKiBpbnN0YW5jZSBhZnRlciBwZXJmb3JtaW5nIGFueSBuZWNlc3NhcnkgZmlsdGVyaW5nLlxuICogQHBhcmFtIHttaXhlZH0gY2h1bmtzIC0gVE9ETzogYWRkIHBhcmFtcyBkZXNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtcyBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJucyBkZXNjcmlwdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbkxlZ2FjeVRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX3dyaXRldiA9IGZ1bmN0aW9uIF93cml0ZXYoY2h1bmtzLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0aGlzLl9hY2NlcHQoY2h1bmtzW2ldKSkge1xuICAgICAgdGhpcy50cmFuc3BvcnQubG9nKGNodW5rc1tpXS5jaHVua1tMRVZFTF0sIGNodW5rc1tpXS5jaHVuay5tZXNzYWdlLCBjaHVua3NbaV0uY2h1bmssIHRoaXMuX25vcCk7XG4gICAgICBjaHVua3NbaV0uY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIERpc3BsYXlzIGEgZGVwcmVjYXRpb24gbm90aWNlLiBEZWZpbmVkIGFzIGEgZnVuY3Rpb24gc28gaXQgY2FuIGJlXG4gKiBvdmVycmlkZW4gaW4gdGVzdHMuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl9kZXByZWNhdGVkID0gZnVuY3Rpb24gX2RlcHJlY2F0ZWQoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoW3RoaXMudHJhbnNwb3J0Lm5hbWUgKyAnIGlzIGEgbGVnYWN5IHdpbnN0b24gdHJhbnNwb3J0LiBDb25zaWRlciB1cGdyYWRpbmc6ICcsICctIFVwZ3JhZGUgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL3dpbnN0b25qcy93aW5zdG9uL2Jsb2IvbWFzdGVyL1VQR1JBREUtMy4wLm1kJ10uam9pbignXFxuJykpO1xufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBlcnJvciBoYW5kbGluZyBzdGF0ZSBvbiB0aGUgbGVnYWN5IHRyYW5zcG9ydCBhc3NvY2lhdGVkXG4gKiB3aXRoIHRoaXMgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gIGlmICh0aGlzLnRyYW5zcG9ydC5jbG9zZSkge1xuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBpZiAodGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvcik7XG4gICAgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IgPSBudWxsO1xuICB9XG59OyIsICIndXNlIHN0cmljdCc7XG5cbi8vIEV4cG9zZSBtb2Rlcm4gdHJhbnNwb3J0IGRpcmVjdGx5IGFzIHRoZSBleHBvcnRcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZGVybicpO1xuXG4vLyBFeHBvc2UgbGVnYWN5IHN0cmVhbVxubW9kdWxlLmV4cG9ydHMuTGVnYWN5VHJhbnNwb3J0U3RyZWFtID0gcmVxdWlyZSgnLi9sZWdhY3knKTsiLCAiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuLypcbiAqIGNvbnNvbGUuanM6IFRyYW5zcG9ydCBmb3Igb3V0cHV0dGluZyB0byB0aGUgY29uc29sZS5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCd0cmlwbGUtYmVhbScpLFxuICBMRVZFTCA9IF9yZXF1aXJlLkxFVkVMLFxuICBNRVNTQUdFID0gX3JlcXVpcmUuTUVTU0FHRTtcbnZhciBUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBmb3Igb3V0cHV0dGluZyB0byB0aGUgY29uc29sZS5cbiAqIEB0eXBlIHtDb25zb2xlfVxuICogQGV4dGVuZHMge1RyYW5zcG9ydFN0cmVhbX1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UcmFuc3BvcnRTdHJlYW0pIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgQ29uc29sZSB0cmFuc3BvcnQgb2JqZWN0IHJlc3BvbnNpYmxlIGZvclxuICAgKiBwZXJzaXN0aW5nIGxvZyBtZXNzYWdlcyBhbmQgbWV0YWRhdGEgdG8gYSB0ZXJtaW5hbCBvciBUVFkuXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9ucyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICovXG4gIGZ1bmN0aW9uIENvbnNvbGUoKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uc29sZSk7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIENvbnNvbGUsIFtvcHRpb25zXSk7XG5cbiAgICAvLyBFeHBvc2UgdGhlIG5hbWUgb2YgdGhpcyBUcmFuc3BvcnQgb24gdGhlIHByb3RvdHlwZVxuICAgIF90aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgJ2NvbnNvbGUnO1xuICAgIF90aGlzLnN0ZGVyckxldmVscyA9IF90aGlzLl9zdHJpbmdBcnJheVRvU2V0KG9wdGlvbnMuc3RkZXJyTGV2ZWxzKTtcbiAgICBfdGhpcy5jb25zb2xlV2FybkxldmVscyA9IF90aGlzLl9zdHJpbmdBcnJheVRvU2V0KG9wdGlvbnMuY29uc29sZVdhcm5MZXZlbHMpO1xuICAgIF90aGlzLmVvbCA9IHR5cGVvZiBvcHRpb25zLmVvbCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmVvbCA6IG9zLkVPTDtcbiAgICBfdGhpcy5mb3JjZUNvbnNvbGUgPSBvcHRpb25zLmZvcmNlQ29uc29sZSB8fCBmYWxzZTtcblxuICAgIC8vIEtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGxvZywgd2FybiwgYW5kIGVycm9yIGNvbnNvbGUgbWV0aG9kc1xuICAgIC8vIGluIGNhc2UgdGhleSBnZXQgcmVkaXJlY3RlZCB0byB0aGlzIHRyYW5zcG9ydCBhZnRlciB0aGUgbG9nZ2VyIGlzXG4gICAgLy8gaW5zdGFudGlhdGVkLiBUaGlzIHByZXZlbnRzIGEgY2lyY3VsYXIgcmVmZXJlbmNlIGlzc3VlLlxuICAgIF90aGlzLl9jb25zb2xlTG9nID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBfdGhpcy5fY29uc29sZVdhcm4gPSBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtcbiAgICBfdGhpcy5fY29uc29sZUVycm9yID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuICAgIF90aGlzLnNldE1heExpc3RlbmVycygzMCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcmUgbG9nZ2luZyBtZXRob2QgZXhwb3NlZCB0byBXaW5zdG9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqL1xuICBfaW5oZXJpdHMoQ29uc29sZSwgX1RyYW5zcG9ydFN0cmVhbSk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQ29uc29sZSwgW3tcbiAgICBrZXk6IFwibG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvZyhpbmZvLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmVtaXQoJ2xvZ2dlZCcsIGluZm8pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlbWFyazogd2hhdCBpZiB0aGVyZSBpcyBubyByYXcuLi4/XG4gICAgICBpZiAodGhpcy5zdGRlcnJMZXZlbHNbaW5mb1tMRVZFTF1dKSB7XG4gICAgICAgIGlmIChjb25zb2xlLl9zdGRlcnIgJiYgIXRoaXMuZm9yY2VDb25zb2xlKSB7XG4gICAgICAgICAgLy8gTm9kZS5qcyBtYXBzIGBwcm9jZXNzLnN0ZGVycmAgdG8gYGNvbnNvbGUuX3N0ZGVycmAuXG4gICAgICAgICAgY29uc29sZS5fc3RkZXJyLndyaXRlKFwiXCIuY29uY2F0KGluZm9bTUVTU0FHRV0pLmNvbmNhdCh0aGlzLmVvbCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IgYWRkcyBhIG5ld2xpbmVcbiAgICAgICAgICB0aGlzLl9jb25zb2xlRXJyb3IoaW5mb1tNRVNTQUdFXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY29uc29sZVdhcm5MZXZlbHNbaW5mb1tMRVZFTF1dKSB7XG4gICAgICAgIGlmIChjb25zb2xlLl9zdGRlcnIgJiYgIXRoaXMuZm9yY2VDb25zb2xlKSB7XG4gICAgICAgICAgLy8gTm9kZS5qcyBtYXBzIGBwcm9jZXNzLnN0ZGVycmAgdG8gYGNvbnNvbGUuX3N0ZGVycmAuXG4gICAgICAgICAgLy8gaW4gTm9kZS5qcyBjb25zb2xlLndhcm4gaXMgYW4gYWxpYXMgZm9yIGNvbnNvbGUuZXJyb3JcbiAgICAgICAgICBjb25zb2xlLl9zdGRlcnIud3JpdGUoXCJcIi5jb25jYXQoaW5mb1tNRVNTQUdFXSkuY29uY2F0KHRoaXMuZW9sKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY29uc29sZS53YXJuIGFkZHMgYSBuZXdsaW5lXG4gICAgICAgICAgdGhpcy5fY29uc29sZVdhcm4oaW5mb1tNRVNTQUdFXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY29uc29sZS5fc3Rkb3V0ICYmICF0aGlzLmZvcmNlQ29uc29sZSkge1xuICAgICAgICAvLyBOb2RlLmpzIG1hcHMgYHByb2Nlc3Muc3Rkb3V0YCB0byBgY29uc29sZS5fc3Rkb3V0YC5cbiAgICAgICAgY29uc29sZS5fc3Rkb3V0LndyaXRlKFwiXCIuY29uY2F0KGluZm9bTUVTU0FHRV0pLmNvbmNhdCh0aGlzLmVvbCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2cgYWRkcyBhIG5ld2xpbmUuXG4gICAgICAgIHRoaXMuX2NvbnNvbGVMb2coaW5mb1tNRVNTQUdFXSk7XG4gICAgICB9XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgU2V0LWxpa2Ugb2JqZWN0IHdpdGggc3RyQXJyYXkncyBlbGVtZW50cyBhcyBrZXlzIChlYWNoIHdpdGggdGhlXG4gICAgICogdmFsdWUgdHJ1ZSkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc3RyQXJyYXkgLSBBcnJheSBvZiBTZXQtZWxlbWVudHMgYXMgc3RyaW5ncy5cbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IFtlcnJNc2ddIC0gQ3VzdG9tIGVycm9yIG1lc3NhZ2UgdGhyb3duIG9uIGludmFsaWQgaW5wdXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX3N0cmluZ0FycmF5VG9TZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0cmluZ0FycmF5VG9TZXQoc3RyQXJyYXksIGVyck1zZykge1xuICAgICAgaWYgKCFzdHJBcnJheSkgcmV0dXJuIHt9O1xuICAgICAgZXJyTXNnID0gZXJyTXNnIHx8ICdDYW5ub3QgbWFrZSBzZXQgZnJvbSB0eXBlIG90aGVyIHRoYW4gQXJyYXkgb2Ygc3RyaW5nIGVsZW1lbnRzJztcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShzdHJBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyQXJyYXkucmVkdWNlKGZ1bmN0aW9uIChzZXQsIGVsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0W2VsXSA9IHRydWU7XG4gICAgICAgIHJldHVybiBzZXQ7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICB9XSk7XG59KFRyYW5zcG9ydFN0cmVhbSk7IiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNBcnJheUxpa2U7XG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB2YWx1ZS5sZW5ndGggPj0gMCAmJiB2YWx1ZS5sZW5ndGggJSAxID09PSAwO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncyAvKiwgY2FsbGJhY2sqLykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmdzLnBvcCgpO1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBhcmdzLCBjYWxsYmFjayk7XG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmFsbGJhY2sgPSBmYWxsYmFjaztcbmV4cG9ydHMud3JhcCA9IHdyYXA7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuXG52YXIgaGFzUXVldWVNaWNyb3Rhc2sgPSBleHBvcnRzLmhhc1F1ZXVlTWljcm90YXNrID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrID09PSAnZnVuY3Rpb24nICYmIHF1ZXVlTWljcm90YXNrO1xudmFyIGhhc1NldEltbWVkaWF0ZSA9IGV4cG9ydHMuaGFzU2V0SW1tZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBzZXRJbW1lZGlhdGU7XG52YXIgaGFzTmV4dFRpY2sgPSBleHBvcnRzLmhhc05leHRUaWNrID0gdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBmYWxsYmFjayhmbikge1xuICAgIHNldFRpbWVvdXQoZm4sIDApO1xufVxuXG5mdW5jdGlvbiB3cmFwKGRlZmVyKSB7XG4gICAgcmV0dXJuIChmbiwgLi4uYXJncykgPT4gZGVmZXIoKCkgPT4gZm4oLi4uYXJncykpO1xufVxuXG52YXIgX2RlZmVyO1xuXG5pZiAoaGFzUXVldWVNaWNyb3Rhc2spIHtcbiAgICBfZGVmZXIgPSBxdWV1ZU1pY3JvdGFzaztcbn0gZWxzZSBpZiAoaGFzU2V0SW1tZWRpYXRlKSB7XG4gICAgX2RlZmVyID0gc2V0SW1tZWRpYXRlO1xufSBlbHNlIGlmIChoYXNOZXh0VGljaykge1xuICAgIF9kZWZlciA9IHByb2Nlc3MubmV4dFRpY2s7XG59IGVsc2Uge1xuICAgIF9kZWZlciA9IGZhbGxiYWNrO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSB3cmFwKF9kZWZlcik7IiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXN5bmNpZnk7XG5cbnZhciBfaW5pdGlhbFBhcmFtcyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvaW5pdGlhbFBhcmFtcy5qcycpO1xuXG52YXIgX2luaXRpYWxQYXJhbXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5pdGlhbFBhcmFtcyk7XG5cbnZhciBfc2V0SW1tZWRpYXRlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zZXRJbW1lZGlhdGUuanMnKTtcblxudmFyIF9zZXRJbW1lZGlhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0SW1tZWRpYXRlKTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL2ludGVybmFsL3dyYXBBc3luYy5qcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRha2UgYSBzeW5jIGZ1bmN0aW9uIGFuZCBtYWtlIGl0IGFzeW5jLCBwYXNzaW5nIGl0cyByZXR1cm4gdmFsdWUgdG8gYVxuICogY2FsbGJhY2suIFRoaXMgaXMgdXNlZnVsIGZvciBwbHVnZ2luZyBzeW5jIGZ1bmN0aW9ucyBpbnRvIGEgd2F0ZXJmYWxsLFxuICogc2VyaWVzLCBvciBvdGhlciBhc3luYyBmdW5jdGlvbnMuIEFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBnZW5lcmF0ZWRcbiAqIGZ1bmN0aW9uIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIChleGNlcHQgZm9yIHRoZSBmaW5hbFxuICogY2FsbGJhY2sgYXJndW1lbnQpLiBFcnJvcnMgdGhyb3duIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cbiAqXG4gKiBJZiB0aGUgZnVuY3Rpb24gcGFzc2VkIHRvIGBhc3luY2lmeWAgcmV0dXJucyBhIFByb21pc2UsIHRoYXQgcHJvbWlzZXMnc1xuICogcmVzb2x2ZWQvcmVqZWN0ZWQgc3RhdGUgd2lsbCBiZSB1c2VkIHRvIGNhbGwgdGhlIGNhbGxiYWNrLCByYXRoZXIgdGhhbiBzaW1wbHlcbiAqIHRoZSBzeW5jaHJvbm91cyByZXR1cm4gdmFsdWUuXG4gKlxuICogVGhpcyBhbHNvIG1lYW5zIHlvdSBjYW4gYXN5bmNpZnkgRVMyMDE3IGBhc3luY2AgZnVuY3Rpb25zLlxuICpcbiAqIEBuYW1lIGFzeW5jaWZ5XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOlV0aWxzXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgd3JhcFN5bmNcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIC0gVGhlIHN5bmNocm9ub3VzIGZ1bmN0aW9uLCBvciBQcm9taXNlLXJldHVybmluZ1xuICogZnVuY3Rpb24gdG8gY29udmVydCB0byBhbiB7QGxpbmsgQXN5bmNGdW5jdGlvbn0uXG4gKiBAcmV0dXJucyB7QXN5bmNGdW5jdGlvbn0gQW4gYXN5bmNocm9ub3VzIHdyYXBwZXIgb2YgdGhlIGBmdW5jYC4gVG8gYmVcbiAqIGludm9rZWQgd2l0aCBgKGFyZ3MuLi4sIGNhbGxiYWNrKWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIHBhc3NpbmcgYSByZWd1bGFyIHN5bmNocm9ub3VzIGZ1bmN0aW9uXG4gKiBhc3luYy53YXRlcmZhbGwoW1xuICogICAgIGFzeW5jLmFwcGx5KGZzLnJlYWRGaWxlLCBmaWxlbmFtZSwgXCJ1dGY4XCIpLFxuICogICAgIGFzeW5jLmFzeW5jaWZ5KEpTT04ucGFyc2UpLFxuICogICAgIGZ1bmN0aW9uIChkYXRhLCBuZXh0KSB7XG4gKiAgICAgICAgIC8vIGRhdGEgaXMgdGhlIHJlc3VsdCBvZiBwYXJzaW5nIHRoZSB0ZXh0LlxuICogICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYSBwYXJzaW5nIGVycm9yLCBpdCB3b3VsZCBoYXZlIGJlZW4gY2F1Z2h0LlxuICogICAgIH1cbiAqIF0sIGNhbGxiYWNrKTtcbiAqXG4gKiAvLyBwYXNzaW5nIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgcHJvbWlzZVxuICogYXN5bmMud2F0ZXJmYWxsKFtcbiAqICAgICBhc3luYy5hcHBseShmcy5yZWFkRmlsZSwgZmlsZW5hbWUsIFwidXRmOFwiKSxcbiAqICAgICBhc3luYy5hc3luY2lmeShmdW5jdGlvbiAoY29udGVudHMpIHtcbiAqICAgICAgICAgcmV0dXJuIGRiLm1vZGVsLmNyZWF0ZShjb250ZW50cyk7XG4gKiAgICAgfSksXG4gKiAgICAgZnVuY3Rpb24gKG1vZGVsLCBuZXh0KSB7XG4gKiAgICAgICAgIC8vIGBtb2RlbGAgaXMgdGhlIGluc3RhbnRpYXRlZCBtb2RlbCBvYmplY3QuXG4gKiAgICAgICAgIC8vIElmIHRoZXJlIHdhcyBhbiBlcnJvciwgdGhpcyBmdW5jdGlvbiB3b3VsZCBiZSBza2lwcGVkLlxuICogICAgIH1cbiAqIF0sIGNhbGxiYWNrKTtcbiAqXG4gKiAvLyBlczIwMTcgZXhhbXBsZSwgdGhvdWdoIGBhc3luY2lmeWAgaXMgbm90IG5lZWRlZCBpZiB5b3VyIEpTIGVudmlyb25tZW50XG4gKiAvLyBzdXBwb3J0cyBhc3luYyBmdW5jdGlvbnMgb3V0IG9mIHRoZSBib3hcbiAqIHZhciBxID0gYXN5bmMucXVldWUoYXN5bmMuYXN5bmNpZnkoYXN5bmMgZnVuY3Rpb24oZmlsZSkge1xuICogICAgIHZhciBpbnRlcm1lZGlhdGVTdGVwID0gYXdhaXQgcHJvY2Vzc0ZpbGUoZmlsZSk7XG4gKiAgICAgcmV0dXJuIGF3YWl0IHNvbWVQcm9taXNlKGludGVybWVkaWF0ZVN0ZXApXG4gKiB9KSk7XG4gKlxuICogcS5wdXNoKGZpbGVzKTtcbiAqL1xuZnVuY3Rpb24gYXN5bmNpZnkoZnVuYykge1xuICAgIGlmICgoMCwgX3dyYXBBc3luYy5pc0FzeW5jKShmdW5jKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MgLyosIGNhbGxiYWNrKi8pIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVByb21pc2UocHJvbWlzZSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX2luaXRpYWxQYXJhbXMyLmRlZmF1bHQpKGZ1bmN0aW9uIChhcmdzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHJlc3VsdCBpcyBQcm9taXNlIG9iamVjdFxuICAgICAgICBpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVByb21pc2UocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByb21pc2UocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgaW52b2tlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHZhbHVlKTtcbiAgICB9LCBlcnIgPT4ge1xuICAgICAgICBpbnZva2VDYWxsYmFjayhjYWxsYmFjaywgZXJyICYmIChlcnIgaW5zdGFuY2VvZiBFcnJvciB8fCBlcnIubWVzc2FnZSkgPyBlcnIgOiBuZXcgRXJyb3IoZXJyKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnJvciwgdmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAoMCwgX3NldEltbWVkaWF0ZTIuZGVmYXVsdCkoZSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9LCBlcnIpO1xuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNBc3luY0l0ZXJhYmxlID0gZXhwb3J0cy5pc0FzeW5jR2VuZXJhdG9yID0gZXhwb3J0cy5pc0FzeW5jID0gdW5kZWZpbmVkO1xuXG52YXIgX2FzeW5jaWZ5ID0gcmVxdWlyZSgnLi4vYXN5bmNpZnkuanMnKTtcblxudmFyIF9hc3luY2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3luY2lmeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzQXN5bmMoZm4pIHtcbiAgICByZXR1cm4gZm5bU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0FzeW5jRnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc0FzeW5jR2VuZXJhdG9yKGZuKSB7XG4gICAgcmV0dXJuIGZuW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdBc3luY0dlbmVyYXRvcic7XG59XG5cbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIHdyYXBBc3luYyhhc3luY0ZuKSB7XG4gICAgaWYgKHR5cGVvZiBhc3luY0ZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGEgZnVuY3Rpb24nKTtcbiAgICByZXR1cm4gaXNBc3luYyhhc3luY0ZuKSA/ICgwLCBfYXN5bmNpZnkyLmRlZmF1bHQpKGFzeW5jRm4pIDogYXN5bmNGbjtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gd3JhcEFzeW5jO1xuZXhwb3J0cy5pc0FzeW5jID0gaXNBc3luYztcbmV4cG9ydHMuaXNBc3luY0dlbmVyYXRvciA9IGlzQXN5bmNHZW5lcmF0b3I7XG5leHBvcnRzLmlzQXN5bmNJdGVyYWJsZSA9IGlzQXN5bmNJdGVyYWJsZTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhd2FpdGlmeTtcbi8vIGNvbmRpdGlvbmFsbHkgcHJvbWlzaWZ5IGEgZnVuY3Rpb24uXG4vLyBvbmx5IHJldHVybiBhIHByb21pc2UgaWYgYSBjYWxsYmFjayBpcyBvbWl0dGVkXG5mdW5jdGlvbiBhd2FpdGlmeShhc3luY0ZuLCBhcml0eSkge1xuICAgIGlmICghYXJpdHkpIGFyaXR5ID0gYXN5bmNGbi5sZW5ndGg7XG4gICAgaWYgKCFhcml0eSkgdGhyb3cgbmV3IEVycm9yKCdhcml0eSBpcyB1bmRlZmluZWQnKTtcbiAgICBmdW5jdGlvbiBhd2FpdGFibGUoLi4uYXJncykge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbYXJpdHkgLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGFzeW5jRm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgYXJnc1thcml0eSAtIDFdID0gKGVyciwgLi4uY2JBcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoY2JBcmdzLmxlbmd0aCA+IDEgPyBjYkFyZ3MgOiBjYkFyZ3NbMF0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFzeW5jRm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdGFibGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlLmpzJyk7XG5cbnZhciBfaXNBcnJheUxpa2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNBcnJheUxpa2UpO1xuXG52YXIgX3dyYXBBc3luYyA9IHJlcXVpcmUoJy4vd3JhcEFzeW5jLmpzJyk7XG5cbnZhciBfd3JhcEFzeW5jMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dyYXBBc3luYyk7XG5cbnZhciBfYXdhaXRpZnkgPSByZXF1aXJlKCcuL2F3YWl0aWZ5LmpzJyk7XG5cbnZhciBfYXdhaXRpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXdhaXRpZnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2F3YWl0aWZ5Mi5kZWZhdWx0KSgoZWFjaGZuLCB0YXNrcywgY2FsbGJhY2spID0+IHtcbiAgICB2YXIgcmVzdWx0cyA9ICgwLCBfaXNBcnJheUxpa2UyLmRlZmF1bHQpKHRhc2tzKSA/IFtdIDoge307XG5cbiAgICBlYWNoZm4odGFza3MsICh0YXNrLCBrZXksIHRhc2tDYikgPT4ge1xuICAgICAgICAoMCwgX3dyYXBBc3luYzIuZGVmYXVsdCkodGFzaykoKGVyciwgLi4ucmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICBbcmVzdWx0XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdHNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIHRhc2tDYihlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCBlcnIgPT4gY2FsbGJhY2soZXJyLCByZXN1bHRzKSk7XG59LCAzKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gb25jZTtcbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICBmdW5jdGlvbiB3cmFwcGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGZuID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIHZhciBjYWxsRm4gPSBmbjtcbiAgICAgICAgZm4gPSBudWxsO1xuICAgICAgICBjYWxsRm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24od3JhcHBlciwgZm4pO1xuICAgIHJldHVybiB3cmFwcGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChjb2xsKSB7XG4gICAgcmV0dXJuIGNvbGxbU3ltYm9sLml0ZXJhdG9yXSAmJiBjb2xsW1N5bWJvbC5pdGVyYXRvcl0oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUl0ZXJhdG9yO1xuXG52YXIgX2lzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZS5qcycpO1xuXG52YXIgX2lzQXJyYXlMaWtlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQXJyYXlMaWtlKTtcblxudmFyIF9nZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3IuanMnKTtcblxudmFyIF9nZXRJdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5SXRlcmF0b3IoY29sbCkge1xuICAgIHZhciBpID0gLTE7XG4gICAgdmFyIGxlbiA9IGNvbGwubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICByZXR1cm4gKytpIDwgbGVuID8geyB2YWx1ZTogY29sbFtpXSwga2V5OiBpIH0gOiBudWxsO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVTMjAxNUl0ZXJhdG9yKGl0ZXJhdG9yKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChpdGVtLmRvbmUpIHJldHVybiBudWxsO1xuICAgICAgICBpKys7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBpdGVtLnZhbHVlLCBrZXk6IGkgfTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3RJdGVyYXRvcihvYmopIHtcbiAgICB2YXIgb2tleXMgPSBvYmogPyBPYmplY3Qua2V5cyhvYmopIDogW107XG4gICAgdmFyIGkgPSAtMTtcbiAgICB2YXIgbGVuID0gb2tleXMubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICB2YXIga2V5ID0gb2tleXNbKytpXTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGkgPCBsZW4gPyB7IHZhbHVlOiBvYmpba2V5XSwga2V5IH0gOiBudWxsO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yKGNvbGwpIHtcbiAgICBpZiAoKDAsIF9pc0FycmF5TGlrZTIuZGVmYXVsdCkoY29sbCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUFycmF5SXRlcmF0b3IoY29sbCk7XG4gICAgfVxuXG4gICAgdmFyIGl0ZXJhdG9yID0gKDAsIF9nZXRJdGVyYXRvcjIuZGVmYXVsdCkoY29sbCk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yID8gY3JlYXRlRVMyMDE1SXRlcmF0b3IoaXRlcmF0b3IpIDogY3JlYXRlT2JqZWN0SXRlcmF0b3IoY29sbCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9ubHlPbmNlO1xuZnVuY3Rpb24gb25seU9uY2UoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGZuID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJDYWxsYmFjayB3YXMgYWxyZWFkeSBjYWxsZWQuXCIpO1xuICAgICAgICB2YXIgY2FsbEZuID0gZm47XG4gICAgICAgIGZuID0gbnVsbDtcbiAgICAgICAgY2FsbEZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbi8vIEEgdGVtcG9yYXJ5IHZhbHVlIHVzZWQgdG8gaWRlbnRpZnkgaWYgdGhlIGxvb3Agc2hvdWxkIGJlIGJyb2tlbi5cbi8vIFNlZSAjMTA2NCwgIzEyOTNcbmNvbnN0IGJyZWFrTG9vcCA9IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gYnJlYWtMb29wO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXN5bmNFYWNoT2ZMaW1pdDtcblxudmFyIF9icmVha0xvb3AgPSByZXF1aXJlKCcuL2JyZWFrTG9vcC5qcycpO1xuXG52YXIgX2JyZWFrTG9vcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9icmVha0xvb3ApO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBmb3IgYXN5bmMgZ2VuZXJhdG9yc1xuZnVuY3Rpb24gYXN5bmNFYWNoT2ZMaW1pdChnZW5lcmF0b3IsIGxpbWl0LCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgIGxldCBjYW5jZWxlZCA9IGZhbHNlO1xuICAgIGxldCBhd2FpdGluZyA9IGZhbHNlO1xuICAgIGxldCBydW5uaW5nID0gMDtcbiAgICBsZXQgaWR4ID0gMDtcblxuICAgIGZ1bmN0aW9uIHJlcGxlbmlzaCgpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZygncmVwbGVuaXNoJylcbiAgICAgICAgaWYgKHJ1bm5pbmcgPj0gbGltaXQgfHwgYXdhaXRpbmcgfHwgZG9uZSkgcmV0dXJuO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXBsZW5pc2ggYXdhaXRpbmcnKVxuICAgICAgICBhd2FpdGluZyA9IHRydWU7XG4gICAgICAgIGdlbmVyYXRvci5uZXh0KCkudGhlbigoeyB2YWx1ZSwgZG9uZTogaXRlckRvbmUgfSkgPT4ge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZ290IHZhbHVlJywgdmFsdWUpXG4gICAgICAgICAgICBpZiAoY2FuY2VsZWQgfHwgZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgYXdhaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChpdGVyRG9uZSkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZG9uZSBuZXh0Q2InKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVubmluZysrO1xuICAgICAgICAgICAgaXRlcmF0ZWUodmFsdWUsIGlkeCwgaXRlcmF0ZWVDYWxsYmFjayk7XG4gICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgIHJlcGxlbmlzaCgpO1xuICAgICAgICB9KS5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWVDYWxsYmFjayhlcnIsIHJlc3VsdCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdpdGVyYXRlZUNhbGxiYWNrJylcbiAgICAgICAgcnVubmluZyAtPSAxO1xuICAgICAgICBpZiAoY2FuY2VsZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGhhbmRsZUVycm9yKGVycik7XG5cbiAgICAgICAgaWYgKGVyciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gX2JyZWFrTG9vcDIuZGVmYXVsdCB8fCBkb25lICYmIHJ1bm5pbmcgPD0gMCkge1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdkb25lIGl0ZXJDYicpXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVwbGVuaXNoKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmIChjYW5jZWxlZCkgcmV0dXJuO1xuICAgICAgICBhd2FpdGluZyA9IGZhbHNlO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9XG5cbiAgICByZXBsZW5pc2goKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9vbmNlID0gcmVxdWlyZSgnLi9vbmNlLmpzJyk7XG5cbnZhciBfb25jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmNlKTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoJy4vaXRlcmF0b3IuanMnKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfb25seU9uY2UgPSByZXF1aXJlKCcuL29ubHlPbmNlLmpzJyk7XG5cbnZhciBfb25seU9uY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seU9uY2UpO1xuXG52YXIgX3dyYXBBc3luYyA9IHJlcXVpcmUoJy4vd3JhcEFzeW5jLmpzJyk7XG5cbnZhciBfYXN5bmNFYWNoT2ZMaW1pdCA9IHJlcXVpcmUoJy4vYXN5bmNFYWNoT2ZMaW1pdC5qcycpO1xuXG52YXIgX2FzeW5jRWFjaE9mTGltaXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmNFYWNoT2ZMaW1pdCk7XG5cbnZhciBfYnJlYWtMb29wID0gcmVxdWlyZSgnLi9icmVha0xvb3AuanMnKTtcblxudmFyIF9icmVha0xvb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWtMb29wKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gbGltaXQgPT4ge1xuICAgIHJldHVybiAob2JqLCBpdGVyYXRlZSwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgY2FsbGJhY2sgPSAoMCwgX29uY2UyLmRlZmF1bHQpKGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKGxpbWl0IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdjb25jdXJyZW5jeSBsaW1pdCBjYW5ub3QgYmUgbGVzcyB0aGFuIDEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgX3dyYXBBc3luYy5pc0FzeW5jR2VuZXJhdG9yKShvYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIF9hc3luY0VhY2hPZkxpbWl0Mi5kZWZhdWx0KShvYmosIGxpbWl0LCBpdGVyYXRlZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgX3dyYXBBc3luYy5pc0FzeW5jSXRlcmFibGUpKG9iaikpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgX2FzeW5jRWFjaE9mTGltaXQyLmRlZmF1bHQpKG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSwgbGltaXQsIGl0ZXJhdGVlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHRFbGVtID0gKDAsIF9pdGVyYXRvcjIuZGVmYXVsdCkob2JqKTtcbiAgICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNhbmNlbGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBydW5uaW5nID0gMDtcbiAgICAgICAgdmFyIGxvb3BpbmcgPSBmYWxzZTtcblxuICAgICAgICBmdW5jdGlvbiBpdGVyYXRlZUNhbGxiYWNrKGVyciwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChjYW5jZWxlZCkgcmV0dXJuO1xuICAgICAgICAgICAgcnVubmluZyAtPSAxO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVyciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYW5jZWxlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBfYnJlYWtMb29wMi5kZWZhdWx0IHx8IGRvbmUgJiYgcnVubmluZyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghbG9vcGluZykge1xuICAgICAgICAgICAgICAgIHJlcGxlbmlzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGVuaXNoKCkge1xuICAgICAgICAgICAgbG9vcGluZyA9IHRydWU7XG4gICAgICAgICAgICB3aGlsZSAocnVubmluZyA8IGxpbWl0ICYmICFkb25lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBuZXh0RWxlbSgpO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocnVubmluZyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJ1bm5pbmcgKz0gMTtcbiAgICAgICAgICAgICAgICBpdGVyYXRlZShlbGVtLnZhbHVlLCBlbGVtLmtleSwgKDAsIF9vbmx5T25jZTIuZGVmYXVsdCkoaXRlcmF0ZWVDYWxsYmFjaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9vcGluZyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVwbGVuaXNoKCk7XG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9lYWNoT2ZMaW1pdDIgPSByZXF1aXJlKCcuL2ludGVybmFsL2VhY2hPZkxpbWl0LmpzJyk7XG5cbnZhciBfZWFjaE9mTGltaXQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaE9mTGltaXQyKTtcblxudmFyIF93cmFwQXN5bmMgPSByZXF1aXJlKCcuL2ludGVybmFsL3dyYXBBc3luYy5qcycpO1xuXG52YXIgX3dyYXBBc3luYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwQXN5bmMpO1xuXG52YXIgX2F3YWl0aWZ5ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9hd2FpdGlmeS5qcycpO1xuXG52YXIgX2F3YWl0aWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F3YWl0aWZ5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGVhY2hPZmBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNoT2Z9IGJ1dCBydW5zIGEgbWF4aW11bSBvZiBgbGltaXRgIGFzeW5jIG9wZXJhdGlvbnMgYXQgYVxuICogdGltZS5cbiAqXG4gKiBAbmFtZSBlYWNoT2ZMaW1pdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuZWFjaE9mXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZWFjaE9mfVxuICogQGFsaWFzIGZvckVhY2hPZkxpbWl0XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxBc3luY0l0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXN5bmMgb3BlcmF0aW9ucyBhdCBhIHRpbWUuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaFxuICogaXRlbSBpbiBgY29sbGAuIFRoZSBga2V5YCBpcyB0aGUgaXRlbSdzIGtleSwgb3IgaW5kZXggaW4gdGhlIGNhc2Ugb2YgYW5cbiAqIGFycmF5LlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBrZXksIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbFxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBJbnZva2VkIHdpdGggKGVycikuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gYSBwcm9taXNlLCBpZiBhIGNhbGxiYWNrIGlzIG9taXR0ZWRcbiAqL1xuZnVuY3Rpb24gZWFjaE9mTGltaXQoY29sbCwgbGltaXQsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiAoMCwgX2VhY2hPZkxpbWl0My5kZWZhdWx0KShsaW1pdCkoY29sbCwgKDAsIF93cmFwQXN5bmMyLmRlZmF1bHQpKGl0ZXJhdGVlKSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2F3YWl0aWZ5Mi5kZWZhdWx0KShlYWNoT2ZMaW1pdCwgNCk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZWFjaE9mTGltaXQgPSByZXF1aXJlKCcuL2VhY2hPZkxpbWl0LmpzJyk7XG5cbnZhciBfZWFjaE9mTGltaXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaE9mTGltaXQpO1xuXG52YXIgX2F3YWl0aWZ5ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9hd2FpdGlmeS5qcycpO1xuXG52YXIgX2F3YWl0aWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F3YWl0aWZ5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGVhY2hPZmBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNoT2Z9IGJ1dCBydW5zIG9ubHkgYSBzaW5nbGUgYXN5bmMgb3BlcmF0aW9uIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBlYWNoT2ZTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmVhY2hPZl17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2hPZn1cbiAqIEBhbGlhcyBmb3JFYWNoT2ZTZXJpZXNcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfEFzeW5jSXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwga2V5LCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGwgYGl0ZXJhdGVlYFxuICogZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICogQHJldHVybnMge1Byb21pc2V9IGEgcHJvbWlzZSwgaWYgYSBjYWxsYmFjayBpcyBvbWl0dGVkXG4gKi9cbmZ1bmN0aW9uIGVhY2hPZlNlcmllcyhjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gKDAsIF9lYWNoT2ZMaW1pdDIuZGVmYXVsdCkoY29sbCwgMSwgaXRlcmF0ZWUsIGNhbGxiYWNrKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfYXdhaXRpZnkyLmRlZmF1bHQpKGVhY2hPZlNlcmllcywgMyk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXJpZXM7XG5cbnZhciBfcGFyYWxsZWwyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9wYXJhbGxlbC5qcycpO1xuXG52YXIgX3BhcmFsbGVsMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmFsbGVsMik7XG5cbnZhciBfZWFjaE9mU2VyaWVzID0gcmVxdWlyZSgnLi9lYWNoT2ZTZXJpZXMuanMnKTtcblxudmFyIF9lYWNoT2ZTZXJpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaE9mU2VyaWVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBSdW4gdGhlIGZ1bmN0aW9ucyBpbiB0aGUgYHRhc2tzYCBjb2xsZWN0aW9uIGluIHNlcmllcywgZWFjaCBvbmUgcnVubmluZyBvbmNlXG4gKiB0aGUgcHJldmlvdXMgZnVuY3Rpb24gaGFzIGNvbXBsZXRlZC4gSWYgYW55IGZ1bmN0aW9ucyBpbiB0aGUgc2VyaWVzIHBhc3MgYW5cbiAqIGVycm9yIHRvIGl0cyBjYWxsYmFjaywgbm8gbW9yZSBmdW5jdGlvbnMgYXJlIHJ1biwgYW5kIGBjYWxsYmFja2AgaXNcbiAqIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSB2YWx1ZSBvZiB0aGUgZXJyb3IuIE90aGVyd2lzZSwgYGNhbGxiYWNrYFxuICogcmVjZWl2ZXMgYW4gYXJyYXkgb2YgcmVzdWx0cyB3aGVuIGB0YXNrc2AgaGF2ZSBjb21wbGV0ZWQuXG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byB1c2UgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXkuIEVhY2ggcHJvcGVydHkgd2lsbFxuICogYmUgcnVuIGFzIGEgZnVuY3Rpb24sIGFuZCB0aGUgcmVzdWx0cyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZmluYWwgYGNhbGxiYWNrYFxuICogYXMgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXkuIFRoaXMgY2FuIGJlIGEgbW9yZSByZWFkYWJsZSB3YXkgb2YgaGFuZGxpbmdcbiAqICByZXN1bHRzIGZyb20ge0BsaW5rIGFzeW5jLnNlcmllc30uXG4gKlxuICogKipOb3RlKiogdGhhdCB3aGlsZSBtYW55IGltcGxlbWVudGF0aW9ucyBwcmVzZXJ2ZSB0aGUgb3JkZXIgb2Ygb2JqZWN0XG4gKiBwcm9wZXJ0aWVzLCB0aGUgW0VDTUFTY3JpcHQgTGFuZ3VhZ2UgU3BlY2lmaWNhdGlvbl0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguNilcbiAqIGV4cGxpY2l0bHkgc3RhdGVzIHRoYXRcbiAqXG4gKiA+IFRoZSBtZWNoYW5pY3MgYW5kIG9yZGVyIG9mIGVudW1lcmF0aW5nIHRoZSBwcm9wZXJ0aWVzIGlzIG5vdCBzcGVjaWZpZWQuXG4gKlxuICogU28gaWYgeW91IHJlbHkgb24gdGhlIG9yZGVyIGluIHdoaWNoIHlvdXIgc2VyaWVzIG9mIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQsXG4gKiBhbmQgd2FudCB0aGlzIHRvIHdvcmsgb24gYWxsIHBsYXRmb3JtcywgY29uc2lkZXIgdXNpbmcgYW4gYXJyYXkuXG4gKlxuICogQG5hbWUgc2VyaWVzXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfEFzeW5jSXRlcmFibGV8T2JqZWN0fSB0YXNrcyAtIEEgY29sbGVjdGlvbiBjb250YWluaW5nXG4gKiBbYXN5bmMgZnVuY3Rpb25zXXtAbGluayBBc3luY0Z1bmN0aW9ufSB0byBydW4gaW4gc2VyaWVzLlxuICogRWFjaCBmdW5jdGlvbiBjYW4gY29tcGxldGUgd2l0aCBhbnkgbnVtYmVyIG9mIG9wdGlvbmFsIGByZXN1bHRgIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBbiBvcHRpb25hbCBjYWxsYmFjayB0byBydW4gb25jZSBhbGwgdGhlXG4gKiBmdW5jdGlvbnMgaGF2ZSBjb21wbGV0ZWQuIFRoaXMgZnVuY3Rpb24gZ2V0cyBhIHJlc3VsdHMgYXJyYXkgKG9yIG9iamVjdClcbiAqIGNvbnRhaW5pbmcgYWxsIHRoZSByZXN1bHQgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgYHRhc2tgIGNhbGxiYWNrcy4gSW52b2tlZFxuICogd2l0aCAoZXJyLCByZXN1bHQpLlxuICogQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlLCBpZiBubyBjYWxsYmFjayBpcyBwYXNzZWRcbiAqIEBleGFtcGxlXG4gKlxuICogLy9Vc2luZyBDYWxsYmFja3NcbiAqIGFzeW5jLnNlcmllcyhbXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIC8vIGRvIHNvbWUgYXN5bmMgdGFza1xuICogICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScpO1xuICogICAgICAgICB9LCAyMDApO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIC8vIHRoZW4gZG8gYW5vdGhlciBhc3luYyB0YXNrXG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAndHdvJyk7XG4gKiAgICAgICAgIH0sIDEwMCk7XG4gKiAgICAgfVxuICogXSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gKiAgICAgY29uc29sZS5sb2cocmVzdWx0cyk7XG4gKiAgICAgLy8gcmVzdWx0cyBpcyBlcXVhbCB0byBbJ29uZScsJ3R3byddXG4gKiB9KTtcbiAqXG4gKiAvLyBhbiBleGFtcGxlIHVzaW5nIG9iamVjdHMgaW5zdGVhZCBvZiBhcnJheXNcbiAqIGFzeW5jLnNlcmllcyh7XG4gKiAgICAgb25lOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgLy8gZG8gc29tZSBhc3luYyB0YXNrXG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAxKTtcbiAqICAgICAgICAgfSwgMjAwKTtcbiAqICAgICB9LFxuICogICAgIHR3bzogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIC8vIHRoZW4gZG8gYW5vdGhlciBhc3luYyB0YXNrXG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAyKTtcbiAqICAgICAgICAgfSwgMTAwKTtcbiAqICAgICB9XG4gKiB9LCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAqICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKTtcbiAqICAgICAvLyByZXN1bHRzIGlzIGVxdWFsIHRvOiB7IG9uZTogMSwgdHdvOiAyIH1cbiAqIH0pO1xuICpcbiAqIC8vVXNpbmcgUHJvbWlzZXNcbiAqIGFzeW5jLnNlcmllcyhbXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICdvbmUnKTtcbiAqICAgICAgICAgfSwgMjAwKTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAndHdvJyk7XG4gKiAgICAgICAgIH0sIDEwMCk7XG4gKiAgICAgfVxuICogXSkudGhlbihyZXN1bHRzID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKTtcbiAqICAgICAvLyByZXN1bHRzIGlzIGVxdWFsIHRvIFsnb25lJywndHdvJ11cbiAqIH0pLmNhdGNoKGVyciA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coZXJyKTtcbiAqIH0pO1xuICpcbiAqIC8vIGFuIGV4YW1wbGUgdXNpbmcgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXlcbiAqIGFzeW5jLnNlcmllcyh7XG4gKiAgICAgb25lOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgLy8gZG8gc29tZSBhc3luYyB0YXNrXG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAxKTtcbiAqICAgICAgICAgfSwgMjAwKTtcbiAqICAgICB9LFxuICogICAgIHR3bzogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIC8vIHRoZW4gZG8gYW5vdGhlciBhc3luYyB0YXNrXG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAyKTtcbiAqICAgICAgICAgfSwgMTAwKTtcbiAqICAgICB9XG4gKiB9KS50aGVuKHJlc3VsdHMgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKHJlc3VsdHMpO1xuICogICAgIC8vIHJlc3VsdHMgaXMgZXF1YWwgdG86IHsgb25lOiAxLCB0d286IDIgfVxuICogfSkuY2F0Y2goZXJyID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICogfSk7XG4gKlxuICogLy9Vc2luZyBhc3luYy9hd2FpdFxuICogYXN5bmMgKCkgPT4ge1xuICogICAgIHRyeSB7XG4gKiAgICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgYXN5bmMuc2VyaWVzKFtcbiAqICAgICAgICAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgICAgICAgICAgLy8gZG8gc29tZSBhc3luYyB0YXNrXG4gKiAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICdvbmUnKTtcbiAqICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICogICAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBkbyBhbm90aGVyIGFzeW5jIHRhc2tcbiAqICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ3R3bycpO1xuICogICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gKiAgICAgICAgICAgICB9XG4gKiAgICAgICAgIF0pO1xuICogICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKTtcbiAqICAgICAgICAgLy8gcmVzdWx0cyBpcyBlcXVhbCB0byBbJ29uZScsJ3R3byddXG4gKiAgICAgfVxuICogICAgIGNhdGNoIChlcnIpIHtcbiAqICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAqICAgICB9XG4gKiB9XG4gKlxuICogLy8gYW4gZXhhbXBsZSB1c2luZyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhbiBhcnJheVxuICogYXN5bmMgKCkgPT4ge1xuICogICAgIHRyeSB7XG4gKiAgICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgYXN5bmMucGFyYWxsZWwoe1xuICogICAgICAgICAgICAgb25lOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICAgICAgICAgIC8vIGRvIHNvbWUgYXN5bmMgdGFza1xuICogICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAxKTtcbiAqICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICogICAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAgdHdvOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gZG8gYW5vdGhlciBhc3luYyB0YXNrXG4gKiAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIDIpO1xuICogICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gKiAgICAgICAgICAgIH1cbiAqICAgICAgICAgfSk7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdHMpO1xuICogICAgICAgICAvLyByZXN1bHRzIGlzIGVxdWFsIHRvOiB7IG9uZTogMSwgdHdvOiAyIH1cbiAqICAgICB9XG4gKiAgICAgY2F0Y2ggKGVycikge1xuICogICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICogICAgIH1cbiAqIH1cbiAqXG4gKi9cbmZ1bmN0aW9uIHNlcmllcyh0YXNrcywgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gKDAsIF9wYXJhbGxlbDMuZGVmYXVsdCkoX2VhY2hPZlNlcmllczIuZGVmYXVsdCwgdGFza3MsIGNhbGxiYWNrKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vZXJyb3JzJykuY29kZXMsXG4gIEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsXG4gIEVSUl9NVUxUSVBMRV9DQUxMQkFDSyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxcbiAgRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcsXG4gIEVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMDtcbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5yZXF1aXJlKCdpbmhlcml0cycpKFRyYW5zZm9ybSwgRHVwbGV4KTtcbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcbiAgaWYgKGNiID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRVJSX01VTFRJUExFX0NBTExCQUNLKCkpO1xuICB9XG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcbiAgaWYgKGRhdGEgIT0gbnVsbClcbiAgICAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG4gIGNiKGVyKTtcbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCkge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ190cmFuc2Zvcm0oKScpKTtcbn07XG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgaWYgKGRhdGEgIT0gbnVsbClcbiAgICAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTtcblxuICAvLyBUT0RPKEJyaWRnZUFSKTogV3JpdGUgYSB0ZXN0IGZvciB0aGVzZSB0d28gZXJyb3IgY2FzZXNcbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzAoKTtcbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORygpO1xuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwgIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcbnJlcXVpcmUoJ2luaGVyaXRzJykoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyIsICIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL3B1bXAgd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVvcztcbmZ1bmN0aW9uIG9uY2UoY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cbnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLFxuICBFUlJfTUlTU0lOR19BUkdTID0gX3JlcXVpcmUkY29kZXMuRVJSX01JU1NJTkdfQVJHUyxcbiAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRDtcbmZ1bmN0aW9uIG5vb3AoZXJyKSB7XG4gIC8vIFJldGhyb3cgdGhlIGVycm9yIGlmIGl0IGV4aXN0cyB0byBhdm9pZCBzd2FsbG93aW5nIGl0XG4gIGlmIChlcnIpIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGRlc3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayk7XG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgc3RyZWFtLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICB9KTtcbiAgaWYgKGVvcyA9PT0gdW5kZWZpbmVkKSBlb3MgPSByZXF1aXJlKCcuL2VuZC1vZi1zdHJlYW0nKTtcbiAgZW9zKHN0cmVhbSwge1xuICAgIHJlYWRhYmxlOiByZWFkaW5nLFxuICAgIHdyaXRhYmxlOiB3cml0aW5nXG4gIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrKCk7XG4gIH0pO1xuICB2YXIgZGVzdHJveWVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGNsb3NlZCkgcmV0dXJuO1xuICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgLy8gcmVxdWVzdC5kZXN0cm95IGp1c3QgZG8gLmVuZCAtIC5hYm9ydCBpcyB3aGF0IHdlIHdhbnRcbiAgICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHJldHVybiBzdHJlYW0uYWJvcnQoKTtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gc3RyZWFtLmRlc3Ryb3koKTtcbiAgICBjYWxsYmFjayhlcnIgfHwgbmV3IEVSUl9TVFJFQU1fREVTVFJPWUVEKCdwaXBlJykpO1xuICB9O1xufVxuZnVuY3Rpb24gY2FsbChmbikge1xuICBmbigpO1xufVxuZnVuY3Rpb24gcGlwZShmcm9tLCB0bykge1xuICByZXR1cm4gZnJvbS5waXBlKHRvKTtcbn1cbmZ1bmN0aW9uIHBvcENhbGxiYWNrKHN0cmVhbXMpIHtcbiAgaWYgKCFzdHJlYW1zLmxlbmd0aCkgcmV0dXJuIG5vb3A7XG4gIGlmICh0eXBlb2Ygc3RyZWFtc1tzdHJlYW1zLmxlbmd0aCAtIDFdICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbm9vcDtcbiAgcmV0dXJuIHN0cmVhbXMucG9wKCk7XG59XG5mdW5jdGlvbiBwaXBlbGluZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0cmVhbXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3RyZWFtc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICB2YXIgY2FsbGJhY2sgPSBwb3BDYWxsYmFjayhzdHJlYW1zKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RyZWFtc1swXSkpIHN0cmVhbXMgPSBzdHJlYW1zWzBdO1xuICBpZiAoc3RyZWFtcy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ3N0cmVhbXMnKTtcbiAgfVxuICB2YXIgZXJyb3I7XG4gIHZhciBkZXN0cm95cyA9IHN0cmVhbXMubWFwKGZ1bmN0aW9uIChzdHJlYW0sIGkpIHtcbiAgICB2YXIgcmVhZGluZyA9IGkgPCBzdHJlYW1zLmxlbmd0aCAtIDE7XG4gICAgdmFyIHdyaXRpbmcgPSBpID4gMDtcbiAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gICAgICBpZiAoZXJyKSBkZXN0cm95cy5mb3JFYWNoKGNhbGwpO1xuICAgICAgaWYgKHJlYWRpbmcpIHJldHVybjtcbiAgICAgIGRlc3Ryb3lzLmZvckVhY2goY2FsbCk7XG4gICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3RyZWFtcy5yZWR1Y2UocGlwZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHBpcGVsaW5lOyIsICJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IGV4cG9ydHM7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuZXhwb3J0cy5maW5pc2hlZCA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvZW5kLW9mLXN0cmVhbS5qcycpO1xuZXhwb3J0cy5waXBlbGluZSA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanMnKTtcbiIsICIvKipcbiAqIENvbnRhaW5zIGFsbCBjb25maWd1cmVkIGFkYXB0ZXJzIGZvciB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQuXG4gKlxuICogQHR5cGUge0FycmF5fVxuICogQHB1YmxpY1xuICovXG52YXIgYWRhcHRlcnMgPSBbXTtcblxuLyoqXG4gKiBDb250YWlucyBhbGwgbW9kaWZpZXIgZnVuY3Rpb25zLlxuICpcbiAqIEB0eXBzIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xudmFyIG1vZGlmaWVycyA9IFtdO1xuXG4vKipcbiAqIE91ciBkZWZhdWx0IGxvZ2dlci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBsb2dnZXIgPSBmdW5jdGlvbiBkZXZudWxsKCkge307XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBuZXcgYWRhcHRlciB0aGF0IHdpbGwgdXNlZCB0byBmaW5kIGVudmlyb25tZW50cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhZGFwdGVyIEEgZnVuY3Rpb24gdGhhdCB3aWxsIHJldHVybiB0aGUgcG9zc2libGUgZW52LlxuICogQHJldHVybnMge0Jvb2xlYW59IEluZGljYXRpb24gb2YgYSBzdWNjZXNzZnVsIGFkZC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlKGFkYXB0ZXIpIHtcbiAgaWYgKH5hZGFwdGVycy5pbmRleE9mKGFkYXB0ZXIpKSByZXR1cm4gZmFsc2U7XG5cbiAgYWRhcHRlcnMucHVzaChhZGFwdGVyKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQXNzaWduIGEgbmV3IGxvZyBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9tIFRoZSBsb2cgbWV0aG9kLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBzZXQoY3VzdG9tKSB7XG4gIGxvZ2dlciA9IGN1c3RvbTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgbmFtZXNwYWNlIGlzIGFsbG93ZWQgYnkgYW55IG9mIG91ciBhZGFwdGVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2UgdGhhdCBuZWVkcyB0byBiZSBlbmFibGVkXG4gKiBAcmV0dXJucyB7Qm9vbGVhbnxQcm9taXNlfSBJbmRpY2F0aW9uIGlmIHRoZSBuYW1lc3BhY2UgaXMgZW5hYmxlZCBieSBvdXIgYWRhcHRlcnMuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZXNwYWNlKSB7XG4gIHZhciBhc3luYyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWRhcHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYWRhcHRlcnNbaV0uYXN5bmMpIHtcbiAgICAgIGFzeW5jLnB1c2goYWRhcHRlcnNbaV0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGFkYXB0ZXJzW2ldKG5hbWVzcGFjZSkpIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKCFhc3luYy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAvL1xuICAvLyBOb3cgdGhhdCB3ZSBrbm93IHRoYXQgd2UgQXN5bmMgZnVuY3Rpb25zLCB3ZSBrbm93IHdlIHJ1biBpbiBhbiBFUzZcbiAgLy8gZW52aXJvbm1lbnQgYW5kIGNhbiB1c2UgYWxsIHRoZSBBUEkncyB0aGF0IHRoZXkgb2ZmZXIsIGluIHRoaXMgY2FzZVxuICAvLyB3ZSB3YW50IHRvIHJldHVybiBhIFByb21pc2Ugc28gdGhhdCB3ZSBjYW4gYGF3YWl0YCBpbiBSZWFjdC1OYXRpdmVcbiAgLy8gZm9yIGFuIGFzeW5jIGFkYXB0ZXIuXG4gIC8vXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBwaW5reShyZXNvbHZlKSB7XG4gICAgUHJvbWlzZS5hbGwoXG4gICAgICBhc3luYy5tYXAoZnVuY3Rpb24gcHJlYmluZChmbikge1xuICAgICAgICByZXR1cm4gZm4obmFtZXNwYWNlKTtcbiAgICAgIH0pXG4gICAgKS50aGVuKGZ1bmN0aW9uIHJlc29sdmVkKHZhbHVlcykge1xuICAgICAgcmVzb2x2ZSh2YWx1ZXMuc29tZShCb29sZWFuKSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBtZXNzYWdlIG1vZGlmaWVyIHRvIHRoZSBkZWJ1Z2dlci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBNb2RpZmljYXRpb24gZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSW5kaWNhdGlvbiBvZiBhIHN1Y2Nlc3NmdWwgYWRkLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBtb2RpZnkoZm4pIHtcbiAgaWYgKH5tb2RpZmllcnMuaW5kZXhPZihmbikpIHJldHVybiBmYWxzZTtcblxuICBtb2RpZmllcnMucHVzaChmbik7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFdyaXRlIGRhdGEgdG8gdGhlIHN1cHBsaWVkIGxvZ2dlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWV0YSBNZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2cuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIEFyZ3VtZW50cyBmb3IgY29uc29sZS5sb2cuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHdyaXRlKCkge1xuICBsb2dnZXIuYXBwbHkobG9nZ2VyLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFByb2Nlc3MgdGhlIG1lc3NhZ2Ugd2l0aCB0aGUgbW9kaWZpZXJzLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gYmUgdHJhbnNmb3JtZWQgYnkgbW9kaWZlcnMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUcmFuc2Zvcm1lZCBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBwcm9jZXNzKG1lc3NhZ2UpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2RpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICBtZXNzYWdlID0gbW9kaWZpZXJzW2ldLmFwcGx5KG1vZGlmaWVyc1tpXSwgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBtZXNzYWdlO1xufVxuXG4vKipcbiAqIEludHJvZHVjZSBvcHRpb25zIHRvIHRoZSBsb2dnZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gQ2FsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFByb3BlcnRpZXMgdG8gaW50cm9kdWNlIG9uIGZuLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBUaGUgcGFzc2VkIGZ1bmN0aW9uXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGludHJvZHVjZShmbiwgb3B0aW9ucykge1xuICB2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucykge1xuICAgIGlmIChoYXMuY2FsbChvcHRpb25zLCBrZXkpKSB7XG4gICAgICBmbltrZXldID0gb3B0aW9uc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBOb3BlLCB3ZSdyZSBub3QgYWxsb3dlZCB0byB3cml0ZSBtZXNzYWdlcy5cbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gZmFsc2VcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gbm9wZShvcHRpb25zKSB7XG4gIG9wdGlvbnMuZW5hYmxlZCA9IGZhbHNlO1xuICBvcHRpb25zLm1vZGlmeSA9IG1vZGlmeTtcbiAgb3B0aW9ucy5zZXQgPSBzZXQ7XG4gIG9wdGlvbnMudXNlID0gdXNlO1xuXG4gIHJldHVybiBpbnRyb2R1Y2UoZnVuY3Rpb24gZGlhZ25vcGVzKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogWWVwLCB3ZSdyZSBhbGxvd2VkIHRvIHdyaXRlIGRlYnVnIG1lc3NhZ2VzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gVGhlIGZ1bmN0aW9uIHRoYXQgZG9lcyB0aGUgbG9nZ2luZy5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVwKG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBhY3R1YWwgZGVidWcgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBpbmRpY2F0aW9uIHRoYXQgd2UncmUgbG9nZ2luZy5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZnVuY3Rpb24gZGlhZ25vc3RpY3MoKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgd3JpdGUuY2FsbCh3cml0ZSwgb3B0aW9ucywgcHJvY2VzcyhhcmdzLCBvcHRpb25zKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBvcHRpb25zLmVuYWJsZWQgPSB0cnVlO1xuICBvcHRpb25zLm1vZGlmeSA9IG1vZGlmeTtcbiAgb3B0aW9ucy5zZXQgPSBzZXQ7XG4gIG9wdGlvbnMudXNlID0gdXNlO1xuXG4gIHJldHVybiBpbnRyb2R1Y2UoZGlhZ25vc3RpY3MsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFNpbXBsZSBoZWxwZXIgZnVuY3Rpb24gdG8gaW50cm9kdWNlIHZhcmlvdXMgb2YgaGVscGVyIG1ldGhvZHMgdG8gb3VyIGdpdmVuXG4gKiBkaWFnbm9zdGljcyBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaWFnbm9zdGljcyBUaGUgZGlhZ25vc3RpY3MgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGRpYWdub3N0aWNzXG4gKiBAcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKGRpYWdub3N0aWNzKSB7XG4gIGRpYWdub3N0aWNzLmludHJvZHVjZSA9IGludHJvZHVjZTtcbiAgZGlhZ25vc3RpY3MuZW5hYmxlZCA9IGVuYWJsZWQ7XG4gIGRpYWdub3N0aWNzLnByb2Nlc3MgPSBwcm9jZXNzO1xuICBkaWFnbm9zdGljcy5tb2RpZnkgPSBtb2RpZnk7XG4gIGRpYWdub3N0aWNzLndyaXRlID0gd3JpdGU7XG4gIGRpYWdub3N0aWNzLm5vcGUgPSBub3BlO1xuICBkaWFnbm9zdGljcy55ZXAgPSB5ZXA7XG4gIGRpYWdub3N0aWNzLnNldCA9IHNldDtcbiAgZGlhZ25vc3RpY3MudXNlID0gdXNlO1xuXG4gIHJldHVybiBkaWFnbm9zdGljcztcbn1cbiIsICIndXNlIHN0cmljdCdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdFwiYWxpY2VibHVlXCI6IFsyNDAsIDI0OCwgMjU1XSxcclxuXHRcImFudGlxdWV3aGl0ZVwiOiBbMjUwLCAyMzUsIDIxNV0sXHJcblx0XCJhcXVhXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJhcXVhbWFyaW5lXCI6IFsxMjcsIDI1NSwgMjEyXSxcclxuXHRcImF6dXJlXCI6IFsyNDAsIDI1NSwgMjU1XSxcclxuXHRcImJlaWdlXCI6IFsyNDUsIDI0NSwgMjIwXSxcclxuXHRcImJpc3F1ZVwiOiBbMjU1LCAyMjgsIDE5Nl0sXHJcblx0XCJibGFja1wiOiBbMCwgMCwgMF0sXHJcblx0XCJibGFuY2hlZGFsbW9uZFwiOiBbMjU1LCAyMzUsIDIwNV0sXHJcblx0XCJibHVlXCI6IFswLCAwLCAyNTVdLFxyXG5cdFwiYmx1ZXZpb2xldFwiOiBbMTM4LCA0MywgMjI2XSxcclxuXHRcImJyb3duXCI6IFsxNjUsIDQyLCA0Ml0sXHJcblx0XCJidXJseXdvb2RcIjogWzIyMiwgMTg0LCAxMzVdLFxyXG5cdFwiY2FkZXRibHVlXCI6IFs5NSwgMTU4LCAxNjBdLFxyXG5cdFwiY2hhcnRyZXVzZVwiOiBbMTI3LCAyNTUsIDBdLFxyXG5cdFwiY2hvY29sYXRlXCI6IFsyMTAsIDEwNSwgMzBdLFxyXG5cdFwiY29yYWxcIjogWzI1NSwgMTI3LCA4MF0sXHJcblx0XCJjb3JuZmxvd2VyYmx1ZVwiOiBbMTAwLCAxNDksIDIzN10sXHJcblx0XCJjb3Juc2lsa1wiOiBbMjU1LCAyNDgsIDIyMF0sXHJcblx0XCJjcmltc29uXCI6IFsyMjAsIDIwLCA2MF0sXHJcblx0XCJjeWFuXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJkYXJrYmx1ZVwiOiBbMCwgMCwgMTM5XSxcclxuXHRcImRhcmtjeWFuXCI6IFswLCAxMzksIDEzOV0sXHJcblx0XCJkYXJrZ29sZGVucm9kXCI6IFsxODQsIDEzNCwgMTFdLFxyXG5cdFwiZGFya2dyYXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2dyZWVuXCI6IFswLCAxMDAsIDBdLFxyXG5cdFwiZGFya2dyZXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2toYWtpXCI6IFsxODksIDE4MywgMTA3XSxcclxuXHRcImRhcmttYWdlbnRhXCI6IFsxMzksIDAsIDEzOV0sXHJcblx0XCJkYXJrb2xpdmVncmVlblwiOiBbODUsIDEwNywgNDddLFxyXG5cdFwiZGFya29yYW5nZVwiOiBbMjU1LCAxNDAsIDBdLFxyXG5cdFwiZGFya29yY2hpZFwiOiBbMTUzLCA1MCwgMjA0XSxcclxuXHRcImRhcmtyZWRcIjogWzEzOSwgMCwgMF0sXHJcblx0XCJkYXJrc2FsbW9uXCI6IFsyMzMsIDE1MCwgMTIyXSxcclxuXHRcImRhcmtzZWFncmVlblwiOiBbMTQzLCAxODgsIDE0M10sXHJcblx0XCJkYXJrc2xhdGVibHVlXCI6IFs3MiwgNjEsIDEzOV0sXHJcblx0XCJkYXJrc2xhdGVncmF5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmtzbGF0ZWdyZXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3R1cnF1b2lzZVwiOiBbMCwgMjA2LCAyMDldLFxyXG5cdFwiZGFya3Zpb2xldFwiOiBbMTQ4LCAwLCAyMTFdLFxyXG5cdFwiZGVlcHBpbmtcIjogWzI1NSwgMjAsIDE0N10sXHJcblx0XCJkZWVwc2t5Ymx1ZVwiOiBbMCwgMTkxLCAyNTVdLFxyXG5cdFwiZGltZ3JheVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkaW1ncmV5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRvZGdlcmJsdWVcIjogWzMwLCAxNDQsIDI1NV0sXHJcblx0XCJmaXJlYnJpY2tcIjogWzE3OCwgMzQsIDM0XSxcclxuXHRcImZsb3JhbHdoaXRlXCI6IFsyNTUsIDI1MCwgMjQwXSxcclxuXHRcImZvcmVzdGdyZWVuXCI6IFszNCwgMTM5LCAzNF0sXHJcblx0XCJmdWNoc2lhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJnYWluc2Jvcm9cIjogWzIyMCwgMjIwLCAyMjBdLFxyXG5cdFwiZ2hvc3R3aGl0ZVwiOiBbMjQ4LCAyNDgsIDI1NV0sXHJcblx0XCJnb2xkXCI6IFsyNTUsIDIxNSwgMF0sXHJcblx0XCJnb2xkZW5yb2RcIjogWzIxOCwgMTY1LCAzMl0sXHJcblx0XCJncmF5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImdyZWVuXCI6IFswLCAxMjgsIDBdLFxyXG5cdFwiZ3JlZW55ZWxsb3dcIjogWzE3MywgMjU1LCA0N10sXHJcblx0XCJncmV5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImhvbmV5ZGV3XCI6IFsyNDAsIDI1NSwgMjQwXSxcclxuXHRcImhvdHBpbmtcIjogWzI1NSwgMTA1LCAxODBdLFxyXG5cdFwiaW5kaWFucmVkXCI6IFsyMDUsIDkyLCA5Ml0sXHJcblx0XCJpbmRpZ29cIjogWzc1LCAwLCAxMzBdLFxyXG5cdFwiaXZvcnlcIjogWzI1NSwgMjU1LCAyNDBdLFxyXG5cdFwia2hha2lcIjogWzI0MCwgMjMwLCAxNDBdLFxyXG5cdFwibGF2ZW5kZXJcIjogWzIzMCwgMjMwLCAyNTBdLFxyXG5cdFwibGF2ZW5kZXJibHVzaFwiOiBbMjU1LCAyNDAsIDI0NV0sXHJcblx0XCJsYXduZ3JlZW5cIjogWzEyNCwgMjUyLCAwXSxcclxuXHRcImxlbW9uY2hpZmZvblwiOiBbMjU1LCAyNTAsIDIwNV0sXHJcblx0XCJsaWdodGJsdWVcIjogWzE3MywgMjE2LCAyMzBdLFxyXG5cdFwibGlnaHRjb3JhbFwiOiBbMjQwLCAxMjgsIDEyOF0sXHJcblx0XCJsaWdodGN5YW5cIjogWzIyNCwgMjU1LCAyNTVdLFxyXG5cdFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjogWzI1MCwgMjUwLCAyMTBdLFxyXG5cdFwibGlnaHRncmF5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0Z3JlZW5cIjogWzE0NCwgMjM4LCAxNDRdLFxyXG5cdFwibGlnaHRncmV5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0cGlua1wiOiBbMjU1LCAxODIsIDE5M10sXHJcblx0XCJsaWdodHNhbG1vblwiOiBbMjU1LCAxNjAsIDEyMl0sXHJcblx0XCJsaWdodHNlYWdyZWVuXCI6IFszMiwgMTc4LCAxNzBdLFxyXG5cdFwibGlnaHRza3libHVlXCI6IFsxMzUsIDIwNiwgMjUwXSxcclxuXHRcImxpZ2h0c2xhdGVncmF5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c2xhdGVncmV5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c3RlZWxibHVlXCI6IFsxNzYsIDE5NiwgMjIyXSxcclxuXHRcImxpZ2h0eWVsbG93XCI6IFsyNTUsIDI1NSwgMjI0XSxcclxuXHRcImxpbWVcIjogWzAsIDI1NSwgMF0sXHJcblx0XCJsaW1lZ3JlZW5cIjogWzUwLCAyMDUsIDUwXSxcclxuXHRcImxpbmVuXCI6IFsyNTAsIDI0MCwgMjMwXSxcclxuXHRcIm1hZ2VudGFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcIm1hcm9vblwiOiBbMTI4LCAwLCAwXSxcclxuXHRcIm1lZGl1bWFxdWFtYXJpbmVcIjogWzEwMiwgMjA1LCAxNzBdLFxyXG5cdFwibWVkaXVtYmx1ZVwiOiBbMCwgMCwgMjA1XSxcclxuXHRcIm1lZGl1bW9yY2hpZFwiOiBbMTg2LCA4NSwgMjExXSxcclxuXHRcIm1lZGl1bXB1cnBsZVwiOiBbMTQ3LCAxMTIsIDIxOV0sXHJcblx0XCJtZWRpdW1zZWFncmVlblwiOiBbNjAsIDE3OSwgMTEzXSxcclxuXHRcIm1lZGl1bXNsYXRlYmx1ZVwiOiBbMTIzLCAxMDQsIDIzOF0sXHJcblx0XCJtZWRpdW1zcHJpbmdncmVlblwiOiBbMCwgMjUwLCAxNTRdLFxyXG5cdFwibWVkaXVtdHVycXVvaXNlXCI6IFs3MiwgMjA5LCAyMDRdLFxyXG5cdFwibWVkaXVtdmlvbGV0cmVkXCI6IFsxOTksIDIxLCAxMzNdLFxyXG5cdFwibWlkbmlnaHRibHVlXCI6IFsyNSwgMjUsIDExMl0sXHJcblx0XCJtaW50Y3JlYW1cIjogWzI0NSwgMjU1LCAyNTBdLFxyXG5cdFwibWlzdHlyb3NlXCI6IFsyNTUsIDIyOCwgMjI1XSxcclxuXHRcIm1vY2Nhc2luXCI6IFsyNTUsIDIyOCwgMTgxXSxcclxuXHRcIm5hdmFqb3doaXRlXCI6IFsyNTUsIDIyMiwgMTczXSxcclxuXHRcIm5hdnlcIjogWzAsIDAsIDEyOF0sXHJcblx0XCJvbGRsYWNlXCI6IFsyNTMsIDI0NSwgMjMwXSxcclxuXHRcIm9saXZlXCI6IFsxMjgsIDEyOCwgMF0sXHJcblx0XCJvbGl2ZWRyYWJcIjogWzEwNywgMTQyLCAzNV0sXHJcblx0XCJvcmFuZ2VcIjogWzI1NSwgMTY1LCAwXSxcclxuXHRcIm9yYW5nZXJlZFwiOiBbMjU1LCA2OSwgMF0sXHJcblx0XCJvcmNoaWRcIjogWzIxOCwgMTEyLCAyMTRdLFxyXG5cdFwicGFsZWdvbGRlbnJvZFwiOiBbMjM4LCAyMzIsIDE3MF0sXHJcblx0XCJwYWxlZ3JlZW5cIjogWzE1MiwgMjUxLCAxNTJdLFxyXG5cdFwicGFsZXR1cnF1b2lzZVwiOiBbMTc1LCAyMzgsIDIzOF0sXHJcblx0XCJwYWxldmlvbGV0cmVkXCI6IFsyMTksIDExMiwgMTQ3XSxcclxuXHRcInBhcGF5YXdoaXBcIjogWzI1NSwgMjM5LCAyMTNdLFxyXG5cdFwicGVhY2hwdWZmXCI6IFsyNTUsIDIxOCwgMTg1XSxcclxuXHRcInBlcnVcIjogWzIwNSwgMTMzLCA2M10sXHJcblx0XCJwaW5rXCI6IFsyNTUsIDE5MiwgMjAzXSxcclxuXHRcInBsdW1cIjogWzIyMSwgMTYwLCAyMjFdLFxyXG5cdFwicG93ZGVyYmx1ZVwiOiBbMTc2LCAyMjQsIDIzMF0sXHJcblx0XCJwdXJwbGVcIjogWzEyOCwgMCwgMTI4XSxcclxuXHRcInJlYmVjY2FwdXJwbGVcIjogWzEwMiwgNTEsIDE1M10sXHJcblx0XCJyZWRcIjogWzI1NSwgMCwgMF0sXHJcblx0XCJyb3N5YnJvd25cIjogWzE4OCwgMTQzLCAxNDNdLFxyXG5cdFwicm95YWxibHVlXCI6IFs2NSwgMTA1LCAyMjVdLFxyXG5cdFwic2FkZGxlYnJvd25cIjogWzEzOSwgNjksIDE5XSxcclxuXHRcInNhbG1vblwiOiBbMjUwLCAxMjgsIDExNF0sXHJcblx0XCJzYW5keWJyb3duXCI6IFsyNDQsIDE2NCwgOTZdLFxyXG5cdFwic2VhZ3JlZW5cIjogWzQ2LCAxMzksIDg3XSxcclxuXHRcInNlYXNoZWxsXCI6IFsyNTUsIDI0NSwgMjM4XSxcclxuXHRcInNpZW5uYVwiOiBbMTYwLCA4MiwgNDVdLFxyXG5cdFwic2lsdmVyXCI6IFsxOTIsIDE5MiwgMTkyXSxcclxuXHRcInNreWJsdWVcIjogWzEzNSwgMjA2LCAyMzVdLFxyXG5cdFwic2xhdGVibHVlXCI6IFsxMDYsIDkwLCAyMDVdLFxyXG5cdFwic2xhdGVncmF5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNsYXRlZ3JleVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbm93XCI6IFsyNTUsIDI1MCwgMjUwXSxcclxuXHRcInNwcmluZ2dyZWVuXCI6IFswLCAyNTUsIDEyN10sXHJcblx0XCJzdGVlbGJsdWVcIjogWzcwLCAxMzAsIDE4MF0sXHJcblx0XCJ0YW5cIjogWzIxMCwgMTgwLCAxNDBdLFxyXG5cdFwidGVhbFwiOiBbMCwgMTI4LCAxMjhdLFxyXG5cdFwidGhpc3RsZVwiOiBbMjE2LCAxOTEsIDIxNl0sXHJcblx0XCJ0b21hdG9cIjogWzI1NSwgOTksIDcxXSxcclxuXHRcInR1cnF1b2lzZVwiOiBbNjQsIDIyNCwgMjA4XSxcclxuXHRcInZpb2xldFwiOiBbMjM4LCAxMzAsIDIzOF0sXHJcblx0XCJ3aGVhdFwiOiBbMjQ1LCAyMjIsIDE3OV0sXHJcblx0XCJ3aGl0ZVwiOiBbMjU1LCAyNTUsIDI1NV0sXHJcblx0XCJ3aGl0ZXNtb2tlXCI6IFsyNDUsIDI0NSwgMjQ1XSxcclxuXHRcInllbGxvd1wiOiBbMjU1LCAyNTUsIDBdLFxyXG5cdFwieWVsbG93Z3JlZW5cIjogWzE1NCwgMjA1LCA1MF1cclxufTtcclxuIiwgIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcnJheWlzaChvYmopIHtcblx0aWYgKCFvYmogfHwgdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gb2JqIGluc3RhbmNlb2YgQXJyYXkgfHwgQXJyYXkuaXNBcnJheShvYmopIHx8XG5cdFx0KG9iai5sZW5ndGggPj0gMCAmJiAob2JqLnNwbGljZSBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8XG5cdFx0XHQoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIChvYmoubGVuZ3RoIC0gMSkpICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnU3RyaW5nJykpKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheWlzaCA9IHJlcXVpcmUoJ2lzLWFycmF5aXNoJyk7XG5cbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG52YXIgc3dpenpsZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3dpenpsZShhcmdzKSB7XG5cdHZhciByZXN1bHRzID0gW107XG5cblx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHR2YXIgYXJnID0gYXJnc1tpXTtcblxuXHRcdGlmIChpc0FycmF5aXNoKGFyZykpIHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tL2phdmFzY3JpcHQtYXJyYXktY29uY2F0LXZzLXB1c2gvOThcblx0XHRcdHJlc3VsdHMgPSBjb25jYXQuY2FsbChyZXN1bHRzLCBzbGljZS5jYWxsKGFyZykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHRzLnB1c2goYXJnKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbnN3aXp6bGUud3JhcCA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBmbihzd2l6emxlKGFyZ3VtZW50cykpO1xuXHR9O1xufTtcbiIsICIvKiBNSVQgbGljZW5zZSAqL1xudmFyIGNvbG9yTmFtZXMgPSByZXF1aXJlKCdjb2xvci1uYW1lJyk7XG52YXIgc3dpenpsZSA9IHJlcXVpcmUoJ3NpbXBsZS1zd2l6emxlJyk7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QuaGFzT3duUHJvcGVydHk7XG5cbnZhciByZXZlcnNlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4vLyBjcmVhdGUgYSBsaXN0IG9mIHJldmVyc2UgY29sb3IgbmFtZXNcbmZvciAodmFyIG5hbWUgaW4gY29sb3JOYW1lcykge1xuXHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb2xvck5hbWVzLCBuYW1lKSkge1xuXHRcdHJldmVyc2VOYW1lc1tjb2xvck5hbWVzW25hbWVdXSA9IG5hbWU7XG5cdH1cbn1cblxudmFyIGNzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG5cdHRvOiB7fSxcblx0Z2V0OiB7fVxufTtcblxuY3MuZ2V0ID0gZnVuY3Rpb24gKHN0cmluZykge1xuXHR2YXIgcHJlZml4ID0gc3RyaW5nLnN1YnN0cmluZygwLCAzKS50b0xvd2VyQ2FzZSgpO1xuXHR2YXIgdmFsO1xuXHR2YXIgbW9kZWw7XG5cdHN3aXRjaCAocHJlZml4KSB7XG5cdFx0Y2FzZSAnaHNsJzpcblx0XHRcdHZhbCA9IGNzLmdldC5oc2woc3RyaW5nKTtcblx0XHRcdG1vZGVsID0gJ2hzbCc7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdod2InOlxuXHRcdFx0dmFsID0gY3MuZ2V0Lmh3YihzdHJpbmcpO1xuXHRcdFx0bW9kZWwgPSAnaHdiJztcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR2YWwgPSBjcy5nZXQucmdiKHN0cmluZyk7XG5cdFx0XHRtb2RlbCA9ICdyZ2InO1xuXHRcdFx0YnJlYWs7XG5cdH1cblxuXHRpZiAoIXZhbCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIHttb2RlbDogbW9kZWwsIHZhbHVlOiB2YWx9O1xufTtcblxuY3MuZ2V0LnJnYiA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0aWYgKCFzdHJpbmcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHZhciBhYmJyID0gL14jKFthLWYwLTldezMsNH0pJC9pO1xuXHR2YXIgaGV4ID0gL14jKFthLWYwLTldezZ9KShbYS1mMC05XXsyfSk/JC9pO1xuXHR2YXIgcmdiYSA9IC9ecmdiYT9cXChcXHMqKFsrLV0/XFxkKykoPz1bXFxzLF0pXFxzKig/OixcXHMqKT8oWystXT9cXGQrKSg/PVtcXHMsXSlcXHMqKD86LFxccyopPyhbKy1dP1xcZCspXFxzKig/OlssfFxcL11cXHMqKFsrLV0/W1xcZFxcLl0rKSglPylcXHMqKT9cXCkkLztcblx0dmFyIHBlciA9IC9ecmdiYT9cXChcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyosP1xccyooWystXT9bXFxkXFwuXSspXFwlXFxzKiw/XFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqKD86Wyx8XFwvXVxccyooWystXT9bXFxkXFwuXSspKCU/KVxccyopP1xcKSQvO1xuXHR2YXIga2V5d29yZCA9IC9eKFxcdyspJC87XG5cblx0dmFyIHJnYiA9IFswLCAwLCAwLCAxXTtcblx0dmFyIG1hdGNoO1xuXHR2YXIgaTtcblx0dmFyIGhleEFscGhhO1xuXG5cdGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChoZXgpKSB7XG5cdFx0aGV4QWxwaGEgPSBtYXRjaFsyXTtcblx0XHRtYXRjaCA9IG1hdGNoWzFdO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3NsaWNlLXZzLXN1YnN0ci12cy1zdWJzdHJpbmctbWV0aG9kcy1sb25nLXN0cmluZy8xOVxuXHRcdFx0dmFyIGkyID0gaSAqIDI7XG5cdFx0XHRyZ2JbaV0gPSBwYXJzZUludChtYXRjaC5zbGljZShpMiwgaTIgKyAyKSwgMTYpO1xuXHRcdH1cblxuXHRcdGlmIChoZXhBbHBoYSkge1xuXHRcdFx0cmdiWzNdID0gcGFyc2VJbnQoaGV4QWxwaGEsIDE2KSAvIDI1NTtcblx0XHR9XG5cdH0gZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goYWJicikpIHtcblx0XHRtYXRjaCA9IG1hdGNoWzFdO1xuXHRcdGhleEFscGhhID0gbWF0Y2hbM107XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0XHRyZ2JbaV0gPSBwYXJzZUludChtYXRjaFtpXSArIG1hdGNoW2ldLCAxNik7XG5cdFx0fVxuXG5cdFx0aWYgKGhleEFscGhhKSB7XG5cdFx0XHRyZ2JbM10gPSBwYXJzZUludChoZXhBbHBoYSArIGhleEFscGhhLCAxNikgLyAyNTU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKHJnYmEpKSB7XG5cdFx0Zm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0cmdiW2ldID0gcGFyc2VJbnQobWF0Y2hbaSArIDFdLCAwKTtcblx0XHR9XG5cblx0XHRpZiAobWF0Y2hbNF0pIHtcblx0XHRcdGlmIChtYXRjaFs1XSkge1xuXHRcdFx0XHRyZ2JbM10gPSBwYXJzZUZsb2F0KG1hdGNoWzRdKSAqIDAuMDE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZ2JbM10gPSBwYXJzZUZsb2F0KG1hdGNoWzRdKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2gocGVyKSkge1xuXHRcdGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRcdHJnYltpXSA9IE1hdGgucm91bmQocGFyc2VGbG9hdChtYXRjaFtpICsgMV0pICogMi41NSk7XG5cdFx0fVxuXG5cdFx0aWYgKG1hdGNoWzRdKSB7XG5cdFx0XHRpZiAobWF0Y2hbNV0pIHtcblx0XHRcdFx0cmdiWzNdID0gcGFyc2VGbG9hdChtYXRjaFs0XSkgKiAwLjAxO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmdiWzNdID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKGtleXdvcmQpKSB7XG5cdFx0aWYgKG1hdGNoWzFdID09PSAndHJhbnNwYXJlbnQnKSB7XG5cdFx0XHRyZXR1cm4gWzAsIDAsIDAsIDBdO1xuXHRcdH1cblxuXHRcdGlmICghaGFzT3duUHJvcGVydHkuY2FsbChjb2xvck5hbWVzLCBtYXRjaFsxXSkpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHJnYiA9IGNvbG9yTmFtZXNbbWF0Y2hbMV1dO1xuXHRcdHJnYlszXSA9IDE7XG5cblx0XHRyZXR1cm4gcmdiO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Zm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdHJnYltpXSA9IGNsYW1wKHJnYltpXSwgMCwgMjU1KTtcblx0fVxuXHRyZ2JbM10gPSBjbGFtcChyZ2JbM10sIDAsIDEpO1xuXG5cdHJldHVybiByZ2I7XG59O1xuXG5jcy5nZXQuaHNsID0gZnVuY3Rpb24gKHN0cmluZykge1xuXHRpZiAoIXN0cmluZykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIGhzbCA9IC9eaHNsYT9cXChcXHMqKFsrLV0/KD86XFxkezAsM31cXC4pP1xcZCspKD86ZGVnKT9cXHMqLD9cXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLD9cXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqKD86Wyx8XFwvXVxccyooWystXT8oPz1cXC5cXGR8XFxkKSg/OjB8WzEtOV1cXGQqKT8oPzpcXC5cXGQqKT8oPzpbZUVdWystXT9cXGQrKT8pXFxzKik/XFwpJC87XG5cdHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaChoc2wpO1xuXG5cdGlmIChtYXRjaCkge1xuXHRcdHZhciBhbHBoYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuXHRcdHZhciBoID0gKChwYXJzZUZsb2F0KG1hdGNoWzFdKSAlIDM2MCkgKyAzNjApICUgMzYwO1xuXHRcdHZhciBzID0gY2xhbXAocGFyc2VGbG9hdChtYXRjaFsyXSksIDAsIDEwMCk7XG5cdFx0dmFyIGwgPSBjbGFtcChwYXJzZUZsb2F0KG1hdGNoWzNdKSwgMCwgMTAwKTtcblx0XHR2YXIgYSA9IGNsYW1wKGlzTmFOKGFscGhhKSA/IDEgOiBhbHBoYSwgMCwgMSk7XG5cblx0XHRyZXR1cm4gW2gsIHMsIGwsIGFdO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59O1xuXG5jcy5nZXQuaHdiID0gZnVuY3Rpb24gKHN0cmluZykge1xuXHRpZiAoIXN0cmluZykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIGh3YiA9IC9eaHdiXFwoXFxzKihbKy1dP1xcZHswLDN9KD86XFwuXFxkKyk/KSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dPyg/PVxcLlxcZHxcXGQpKD86MHxbMS05XVxcZCopPyg/OlxcLlxcZCopPyg/OltlRV1bKy1dP1xcZCspPylcXHMqKT9cXCkkLztcblx0dmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKGh3Yik7XG5cblx0aWYgKG1hdGNoKSB7XG5cdFx0dmFyIGFscGhhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG5cdFx0dmFyIGggPSAoKHBhcnNlRmxvYXQobWF0Y2hbMV0pICUgMzYwKSArIDM2MCkgJSAzNjA7XG5cdFx0dmFyIHcgPSBjbGFtcChwYXJzZUZsb2F0KG1hdGNoWzJdKSwgMCwgMTAwKTtcblx0XHR2YXIgYiA9IGNsYW1wKHBhcnNlRmxvYXQobWF0Y2hbM10pLCAwLCAxMDApO1xuXHRcdHZhciBhID0gY2xhbXAoaXNOYU4oYWxwaGEpID8gMSA6IGFscGhhLCAwLCAxKTtcblx0XHRyZXR1cm4gW2gsIHcsIGIsIGFdO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59O1xuXG5jcy50by5oZXggPSBmdW5jdGlvbiAoKSB7XG5cdHZhciByZ2JhID0gc3dpenpsZShhcmd1bWVudHMpO1xuXG5cdHJldHVybiAoXG5cdFx0JyMnICtcblx0XHRoZXhEb3VibGUocmdiYVswXSkgK1xuXHRcdGhleERvdWJsZShyZ2JhWzFdKSArXG5cdFx0aGV4RG91YmxlKHJnYmFbMl0pICtcblx0XHQocmdiYVszXSA8IDFcblx0XHRcdD8gKGhleERvdWJsZShNYXRoLnJvdW5kKHJnYmFbM10gKiAyNTUpKSlcblx0XHRcdDogJycpXG5cdCk7XG59O1xuXG5jcy50by5yZ2IgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciByZ2JhID0gc3dpenpsZShhcmd1bWVudHMpO1xuXG5cdHJldHVybiByZ2JhLmxlbmd0aCA8IDQgfHwgcmdiYVszXSA9PT0gMVxuXHRcdD8gJ3JnYignICsgTWF0aC5yb3VuZChyZ2JhWzBdKSArICcsICcgKyBNYXRoLnJvdW5kKHJnYmFbMV0pICsgJywgJyArIE1hdGgucm91bmQocmdiYVsyXSkgKyAnKSdcblx0XHQ6ICdyZ2JhKCcgKyBNYXRoLnJvdW5kKHJnYmFbMF0pICsgJywgJyArIE1hdGgucm91bmQocmdiYVsxXSkgKyAnLCAnICsgTWF0aC5yb3VuZChyZ2JhWzJdKSArICcsICcgKyByZ2JhWzNdICsgJyknO1xufTtcblxuY3MudG8ucmdiLnBlcmNlbnQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciByZ2JhID0gc3dpenpsZShhcmd1bWVudHMpO1xuXG5cdHZhciByID0gTWF0aC5yb3VuZChyZ2JhWzBdIC8gMjU1ICogMTAwKTtcblx0dmFyIGcgPSBNYXRoLnJvdW5kKHJnYmFbMV0gLyAyNTUgKiAxMDApO1xuXHR2YXIgYiA9IE1hdGgucm91bmQocmdiYVsyXSAvIDI1NSAqIDEwMCk7XG5cblx0cmV0dXJuIHJnYmEubGVuZ3RoIDwgNCB8fCByZ2JhWzNdID09PSAxXG5cdFx0PyAncmdiKCcgKyByICsgJyUsICcgKyBnICsgJyUsICcgKyBiICsgJyUpJ1xuXHRcdDogJ3JnYmEoJyArIHIgKyAnJSwgJyArIGcgKyAnJSwgJyArIGIgKyAnJSwgJyArIHJnYmFbM10gKyAnKSc7XG59O1xuXG5jcy50by5oc2wgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBoc2xhID0gc3dpenpsZShhcmd1bWVudHMpO1xuXHRyZXR1cm4gaHNsYS5sZW5ndGggPCA0IHx8IGhzbGFbM10gPT09IDFcblx0XHQ/ICdoc2woJyArIGhzbGFbMF0gKyAnLCAnICsgaHNsYVsxXSArICclLCAnICsgaHNsYVsyXSArICclKSdcblx0XHQ6ICdoc2xhKCcgKyBoc2xhWzBdICsgJywgJyArIGhzbGFbMV0gKyAnJSwgJyArIGhzbGFbMl0gKyAnJSwgJyArIGhzbGFbM10gKyAnKSc7XG59O1xuXG4vLyBod2IgaXMgYSBiaXQgZGlmZmVyZW50IHRoYW4gcmdiKGEpICYgaHNsKGEpIHNpbmNlIHRoZXJlIGlzIG5vIGFscGhhIHNwZWNpZmljIHN5bnRheFxuLy8gKGh3YiBoYXZlIGFscGhhIG9wdGlvbmFsICYgMSBpcyBkZWZhdWx0IHZhbHVlKVxuY3MudG8uaHdiID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgaHdiYSA9IHN3aXp6bGUoYXJndW1lbnRzKTtcblxuXHR2YXIgYSA9ICcnO1xuXHRpZiAoaHdiYS5sZW5ndGggPj0gNCAmJiBod2JhWzNdICE9PSAxKSB7XG5cdFx0YSA9ICcsICcgKyBod2JhWzNdO1xuXHR9XG5cblx0cmV0dXJuICdod2IoJyArIGh3YmFbMF0gKyAnLCAnICsgaHdiYVsxXSArICclLCAnICsgaHdiYVsyXSArICclJyArIGEgKyAnKSc7XG59O1xuXG5jcy50by5rZXl3b3JkID0gZnVuY3Rpb24gKHJnYikge1xuXHRyZXR1cm4gcmV2ZXJzZU5hbWVzW3JnYi5zbGljZSgwLCAzKV07XG59O1xuXG4vLyBoZWxwZXJzXG5mdW5jdGlvbiBjbGFtcChudW0sIG1pbiwgbWF4KSB7XG5cdHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIG51bSksIG1heCk7XG59XG5cbmZ1bmN0aW9uIGhleERvdWJsZShudW0pIHtcblx0dmFyIHN0ciA9IE1hdGgucm91bmQobnVtKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0cmV0dXJuIChzdHIubGVuZ3RoIDwgMikgPyAnMCcgKyBzdHIgOiBzdHI7XG59XG4iLCAiJ3VzZSBzdHJpY3QnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRcImFsaWNlYmx1ZVwiOiBbMjQwLCAyNDgsIDI1NV0sXHJcblx0XCJhbnRpcXVld2hpdGVcIjogWzI1MCwgMjM1LCAyMTVdLFxyXG5cdFwiYXF1YVwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiYXF1YW1hcmluZVwiOiBbMTI3LCAyNTUsIDIxMl0sXHJcblx0XCJhenVyZVwiOiBbMjQwLCAyNTUsIDI1NV0sXHJcblx0XCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXHJcblx0XCJiaXNxdWVcIjogWzI1NSwgMjI4LCAxOTZdLFxyXG5cdFwiYmxhY2tcIjogWzAsIDAsIDBdLFxyXG5cdFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwgMjM1LCAyMDVdLFxyXG5cdFwiYmx1ZVwiOiBbMCwgMCwgMjU1XSxcclxuXHRcImJsdWV2aW9sZXRcIjogWzEzOCwgNDMsIDIyNl0sXHJcblx0XCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxyXG5cdFwiYnVybHl3b29kXCI6IFsyMjIsIDE4NCwgMTM1XSxcclxuXHRcImNhZGV0Ymx1ZVwiOiBbOTUsIDE1OCwgMTYwXSxcclxuXHRcImNoYXJ0cmV1c2VcIjogWzEyNywgMjU1LCAwXSxcclxuXHRcImNob2NvbGF0ZVwiOiBbMjEwLCAxMDUsIDMwXSxcclxuXHRcImNvcmFsXCI6IFsyNTUsIDEyNywgODBdLFxyXG5cdFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwgMTQ5LCAyMzddLFxyXG5cdFwiY29ybnNpbGtcIjogWzI1NSwgMjQ4LCAyMjBdLFxyXG5cdFwiY3JpbXNvblwiOiBbMjIwLCAyMCwgNjBdLFxyXG5cdFwiY3lhblwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiZGFya2JsdWVcIjogWzAsIDAsIDEzOV0sXHJcblx0XCJkYXJrY3lhblwiOiBbMCwgMTM5LCAxMzldLFxyXG5cdFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcclxuXHRcImRhcmtncmF5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtncmVlblwiOiBbMCwgMTAwLCAwXSxcclxuXHRcImRhcmtncmV5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtraGFraVwiOiBbMTg5LCAxODMsIDEwN10sXHJcblx0XCJkYXJrbWFnZW50YVwiOiBbMTM5LCAwLCAxMzldLFxyXG5cdFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcclxuXHRcImRhcmtvcmFuZ2VcIjogWzI1NSwgMTQwLCAwXSxcclxuXHRcImRhcmtvcmNoaWRcIjogWzE1MywgNTAsIDIwNF0sXHJcblx0XCJkYXJrcmVkXCI6IFsxMzksIDAsIDBdLFxyXG5cdFwiZGFya3NhbG1vblwiOiBbMjMzLCAxNTAsIDEyMl0sXHJcblx0XCJkYXJrc2VhZ3JlZW5cIjogWzE0MywgMTg4LCAxNDNdLFxyXG5cdFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsIDYxLCAxMzldLFxyXG5cdFwiZGFya3NsYXRlZ3JheVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrc2xhdGVncmV5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcclxuXHRcImRhcmt2aW9sZXRcIjogWzE0OCwgMCwgMjExXSxcclxuXHRcImRlZXBwaW5rXCI6IFsyNTUsIDIwLCAxNDddLFxyXG5cdFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcclxuXHRcImRpbWdyYXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZGltZ3JleVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkb2RnZXJibHVlXCI6IFszMCwgMTQ0LCAyNTVdLFxyXG5cdFwiZmlyZWJyaWNrXCI6IFsxNzgsIDM0LCAzNF0sXHJcblx0XCJmbG9yYWx3aGl0ZVwiOiBbMjU1LCAyNTAsIDI0MF0sXHJcblx0XCJmb3Jlc3RncmVlblwiOiBbMzQsIDEzOSwgMzRdLFxyXG5cdFwiZnVjaHNpYVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwiZ2FpbnNib3JvXCI6IFsyMjAsIDIyMCwgMjIwXSxcclxuXHRcImdob3N0d2hpdGVcIjogWzI0OCwgMjQ4LCAyNTVdLFxyXG5cdFwiZ29sZFwiOiBbMjU1LCAyMTUsIDBdLFxyXG5cdFwiZ29sZGVucm9kXCI6IFsyMTgsIDE2NSwgMzJdLFxyXG5cdFwiZ3JheVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJncmVlblwiOiBbMCwgMTI4LCAwXSxcclxuXHRcImdyZWVueWVsbG93XCI6IFsxNzMsIDI1NSwgNDddLFxyXG5cdFwiZ3JleVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJob25leWRld1wiOiBbMjQwLCAyNTUsIDI0MF0sXHJcblx0XCJob3RwaW5rXCI6IFsyNTUsIDEwNSwgMTgwXSxcclxuXHRcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxyXG5cdFwiaW5kaWdvXCI6IFs3NSwgMCwgMTMwXSxcclxuXHRcIml2b3J5XCI6IFsyNTUsIDI1NSwgMjQwXSxcclxuXHRcImtoYWtpXCI6IFsyNDAsIDIzMCwgMTQwXSxcclxuXHRcImxhdmVuZGVyXCI6IFsyMzAsIDIzMCwgMjUwXSxcclxuXHRcImxhdmVuZGVyYmx1c2hcIjogWzI1NSwgMjQwLCAyNDVdLFxyXG5cdFwibGF3bmdyZWVuXCI6IFsxMjQsIDI1MiwgMF0sXHJcblx0XCJsZW1vbmNoaWZmb25cIjogWzI1NSwgMjUwLCAyMDVdLFxyXG5cdFwibGlnaHRibHVlXCI6IFsxNzMsIDIxNiwgMjMwXSxcclxuXHRcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxyXG5cdFwibGlnaHRjeWFuXCI6IFsyMjQsIDI1NSwgMjU1XSxcclxuXHRcImxpZ2h0Z29sZGVucm9keWVsbG93XCI6IFsyNTAsIDI1MCwgMjEwXSxcclxuXHRcImxpZ2h0Z3JheVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodGdyZWVuXCI6IFsxNDQsIDIzOCwgMTQ0XSxcclxuXHRcImxpZ2h0Z3JleVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodHBpbmtcIjogWzI1NSwgMTgyLCAxOTNdLFxyXG5cdFwibGlnaHRzYWxtb25cIjogWzI1NSwgMTYwLCAxMjJdLFxyXG5cdFwibGlnaHRzZWFncmVlblwiOiBbMzIsIDE3OCwgMTcwXSxcclxuXHRcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDI1MF0sXHJcblx0XCJsaWdodHNsYXRlZ3JheVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHNsYXRlZ3JleVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXHJcblx0XCJsaWdodHllbGxvd1wiOiBbMjU1LCAyNTUsIDIyNF0sXHJcblx0XCJsaW1lXCI6IFswLCAyNTUsIDBdLFxyXG5cdFwibGltZWdyZWVuXCI6IFs1MCwgMjA1LCA1MF0sXHJcblx0XCJsaW5lblwiOiBbMjUwLCAyNDAsIDIzMF0sXHJcblx0XCJtYWdlbnRhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXHJcblx0XCJtZWRpdW1hcXVhbWFyaW5lXCI6IFsxMDIsIDIwNSwgMTcwXSxcclxuXHRcIm1lZGl1bWJsdWVcIjogWzAsIDAsIDIwNV0sXHJcblx0XCJtZWRpdW1vcmNoaWRcIjogWzE4NiwgODUsIDIxMV0sXHJcblx0XCJtZWRpdW1wdXJwbGVcIjogWzE0NywgMTEyLCAyMTldLFxyXG5cdFwibWVkaXVtc2VhZ3JlZW5cIjogWzYwLCAxNzksIDExM10sXHJcblx0XCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywgMTA0LCAyMzhdLFxyXG5cdFwibWVkaXVtc3ByaW5nZ3JlZW5cIjogWzAsIDI1MCwgMTU0XSxcclxuXHRcIm1lZGl1bXR1cnF1b2lzZVwiOiBbNzIsIDIwOSwgMjA0XSxcclxuXHRcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcclxuXHRcIm1pZG5pZ2h0Ymx1ZVwiOiBbMjUsIDI1LCAxMTJdLFxyXG5cdFwibWludGNyZWFtXCI6IFsyNDUsIDI1NSwgMjUwXSxcclxuXHRcIm1pc3R5cm9zZVwiOiBbMjU1LCAyMjgsIDIyNV0sXHJcblx0XCJtb2NjYXNpblwiOiBbMjU1LCAyMjgsIDE4MV0sXHJcblx0XCJuYXZham93aGl0ZVwiOiBbMjU1LCAyMjIsIDE3M10sXHJcblx0XCJuYXZ5XCI6IFswLCAwLCAxMjhdLFxyXG5cdFwib2xkbGFjZVwiOiBbMjUzLCAyNDUsIDIzMF0sXHJcblx0XCJvbGl2ZVwiOiBbMTI4LCAxMjgsIDBdLFxyXG5cdFwib2xpdmVkcmFiXCI6IFsxMDcsIDE0MiwgMzVdLFxyXG5cdFwib3JhbmdlXCI6IFsyNTUsIDE2NSwgMF0sXHJcblx0XCJvcmFuZ2VyZWRcIjogWzI1NSwgNjksIDBdLFxyXG5cdFwib3JjaGlkXCI6IFsyMTgsIDExMiwgMjE0XSxcclxuXHRcInBhbGVnb2xkZW5yb2RcIjogWzIzOCwgMjMyLCAxNzBdLFxyXG5cdFwicGFsZWdyZWVuXCI6IFsxNTIsIDI1MSwgMTUyXSxcclxuXHRcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwgMjM4LCAyMzhdLFxyXG5cdFwicGFsZXZpb2xldHJlZFwiOiBbMjE5LCAxMTIsIDE0N10sXHJcblx0XCJwYXBheWF3aGlwXCI6IFsyNTUsIDIzOSwgMjEzXSxcclxuXHRcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXHJcblx0XCJwZXJ1XCI6IFsyMDUsIDEzMywgNjNdLFxyXG5cdFwicGlua1wiOiBbMjU1LCAxOTIsIDIwM10sXHJcblx0XCJwbHVtXCI6IFsyMjEsIDE2MCwgMjIxXSxcclxuXHRcInBvd2RlcmJsdWVcIjogWzE3NiwgMjI0LCAyMzBdLFxyXG5cdFwicHVycGxlXCI6IFsxMjgsIDAsIDEyOF0sXHJcblx0XCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsIDUxLCAxNTNdLFxyXG5cdFwicmVkXCI6IFsyNTUsIDAsIDBdLFxyXG5cdFwicm9zeWJyb3duXCI6IFsxODgsIDE0MywgMTQzXSxcclxuXHRcInJveWFsYmx1ZVwiOiBbNjUsIDEwNSwgMjI1XSxcclxuXHRcInNhZGRsZWJyb3duXCI6IFsxMzksIDY5LCAxOV0sXHJcblx0XCJzYWxtb25cIjogWzI1MCwgMTI4LCAxMTRdLFxyXG5cdFwic2FuZHlicm93blwiOiBbMjQ0LCAxNjQsIDk2XSxcclxuXHRcInNlYWdyZWVuXCI6IFs0NiwgMTM5LCA4N10sXHJcblx0XCJzZWFzaGVsbFwiOiBbMjU1LCAyNDUsIDIzOF0sXHJcblx0XCJzaWVubmFcIjogWzE2MCwgODIsIDQ1XSxcclxuXHRcInNpbHZlclwiOiBbMTkyLCAxOTIsIDE5Ml0sXHJcblx0XCJza3libHVlXCI6IFsxMzUsIDIwNiwgMjM1XSxcclxuXHRcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcclxuXHRcInNsYXRlZ3JheVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbGF0ZWdyZXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXHJcblx0XCJzcHJpbmdncmVlblwiOiBbMCwgMjU1LCAxMjddLFxyXG5cdFwic3RlZWxibHVlXCI6IFs3MCwgMTMwLCAxODBdLFxyXG5cdFwidGFuXCI6IFsyMTAsIDE4MCwgMTQwXSxcclxuXHRcInRlYWxcIjogWzAsIDEyOCwgMTI4XSxcclxuXHRcInRoaXN0bGVcIjogWzIxNiwgMTkxLCAyMTZdLFxyXG5cdFwidG9tYXRvXCI6IFsyNTUsIDk5LCA3MV0sXHJcblx0XCJ0dXJxdW9pc2VcIjogWzY0LCAyMjQsIDIwOF0sXHJcblx0XCJ2aW9sZXRcIjogWzIzOCwgMTMwLCAyMzhdLFxyXG5cdFwid2hlYXRcIjogWzI0NSwgMjIyLCAxNzldLFxyXG5cdFwid2hpdGVcIjogWzI1NSwgMjU1LCAyNTVdLFxyXG5cdFwid2hpdGVzbW9rZVwiOiBbMjQ1LCAyNDUsIDI0NV0sXHJcblx0XCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcclxuXHRcInllbGxvd2dyZWVuXCI6IFsxNTQsIDIwNSwgNTBdXHJcbn07XHJcbiIsICIvKiBNSVQgbGljZW5zZSAqL1xudmFyIGNzc0tleXdvcmRzID0gcmVxdWlyZSgnY29sb3ItbmFtZScpO1xuXG4vLyBOT1RFOiBjb252ZXJzaW9ucyBzaG91bGQgb25seSByZXR1cm4gcHJpbWl0aXZlIHZhbHVlcyAoaS5lLiBhcnJheXMsIG9yXG4vLyAgICAgICB2YWx1ZXMgdGhhdCBnaXZlIGNvcnJlY3QgYHR5cGVvZmAgcmVzdWx0cykuXG4vLyAgICAgICBkbyBub3QgdXNlIGJveCB2YWx1ZXMgdHlwZXMgKGkuZS4gTnVtYmVyKCksIFN0cmluZygpLCBldGMuKVxuXG52YXIgcmV2ZXJzZUtleXdvcmRzID0ge307XG5mb3IgKHZhciBrZXkgaW4gY3NzS2V5d29yZHMpIHtcblx0aWYgKGNzc0tleXdvcmRzLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRyZXZlcnNlS2V5d29yZHNbY3NzS2V5d29yZHNba2V5XV0gPSBrZXk7XG5cdH1cbn1cblxudmFyIGNvbnZlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IHtcblx0cmdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3JnYid9LFxuXHRoc2w6IHtjaGFubmVsczogMywgbGFiZWxzOiAnaHNsJ30sXG5cdGhzdjoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdoc3YnfSxcblx0aHdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2h3Yid9LFxuXHRjbXlrOiB7Y2hhbm5lbHM6IDQsIGxhYmVsczogJ2NteWsnfSxcblx0eHl6OiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3h5eid9LFxuXHRsYWI6IHtjaGFubmVsczogMywgbGFiZWxzOiAnbGFiJ30sXG5cdGxjaDoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdsY2gnfSxcblx0aGV4OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydoZXgnXX0sXG5cdGtleXdvcmQ6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2tleXdvcmQnXX0sXG5cdGFuc2kxNjoge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsnYW5zaTE2J119LFxuXHRhbnNpMjU2OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydhbnNpMjU2J119LFxuXHRoY2c6IHtjaGFubmVsczogMywgbGFiZWxzOiBbJ2gnLCAnYycsICdnJ119LFxuXHRhcHBsZToge2NoYW5uZWxzOiAzLCBsYWJlbHM6IFsncjE2JywgJ2cxNicsICdiMTYnXX0sXG5cdGdyYXk6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2dyYXknXX1cbn07XG5cbi8vIGhpZGUgLmNoYW5uZWxzIGFuZCAubGFiZWxzIHByb3BlcnRpZXNcbmZvciAodmFyIG1vZGVsIGluIGNvbnZlcnQpIHtcblx0aWYgKGNvbnZlcnQuaGFzT3duUHJvcGVydHkobW9kZWwpKSB7XG5cdFx0aWYgKCEoJ2NoYW5uZWxzJyBpbiBjb252ZXJ0W21vZGVsXSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0XHR9XG5cblx0XHRpZiAoISgnbGFiZWxzJyBpbiBjb252ZXJ0W21vZGVsXSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVsIGxhYmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0XHR9XG5cblx0XHRpZiAoY29udmVydFttb2RlbF0ubGFiZWxzLmxlbmd0aCAhPT0gY29udmVydFttb2RlbF0uY2hhbm5lbHMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignY2hhbm5lbCBhbmQgbGFiZWwgY291bnRzIG1pc21hdGNoOiAnICsgbW9kZWwpO1xuXHRcdH1cblxuXHRcdHZhciBjaGFubmVscyA9IGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzO1xuXHRcdHZhciBsYWJlbHMgPSBjb252ZXJ0W21vZGVsXS5sYWJlbHM7XG5cdFx0ZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzO1xuXHRcdGRlbGV0ZSBjb252ZXJ0W21vZGVsXS5sYWJlbHM7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNoYW5uZWxzfSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnbGFiZWxzJywge3ZhbHVlOiBsYWJlbHN9KTtcblx0fVxufVxuXG5jb252ZXJ0LnJnYi5oc2wgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcblx0dmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuXHR2YXIgZGVsdGEgPSBtYXggLSBtaW47XG5cdHZhciBoO1xuXHR2YXIgcztcblx0dmFyIGw7XG5cblx0aWYgKG1heCA9PT0gbWluKSB7XG5cdFx0aCA9IDA7XG5cdH0gZWxzZSBpZiAociA9PT0gbWF4KSB7XG5cdFx0aCA9IChnIC0gYikgLyBkZWx0YTtcblx0fSBlbHNlIGlmIChnID09PSBtYXgpIHtcblx0XHRoID0gMiArIChiIC0gcikgLyBkZWx0YTtcblx0fSBlbHNlIGlmIChiID09PSBtYXgpIHtcblx0XHRoID0gNCArIChyIC0gZykgLyBkZWx0YTtcblx0fVxuXG5cdGggPSBNYXRoLm1pbihoICogNjAsIDM2MCk7XG5cblx0aWYgKGggPCAwKSB7XG5cdFx0aCArPSAzNjA7XG5cdH1cblxuXHRsID0gKG1pbiArIG1heCkgLyAyO1xuXG5cdGlmIChtYXggPT09IG1pbikge1xuXHRcdHMgPSAwO1xuXHR9IGVsc2UgaWYgKGwgPD0gMC41KSB7XG5cdFx0cyA9IGRlbHRhIC8gKG1heCArIG1pbik7XG5cdH0gZWxzZSB7XG5cdFx0cyA9IGRlbHRhIC8gKDIgLSBtYXggLSBtaW4pO1xuXHR9XG5cblx0cmV0dXJuIFtoLCBzICogMTAwLCBsICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmhzdiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHJkaWY7XG5cdHZhciBnZGlmO1xuXHR2YXIgYmRpZjtcblx0dmFyIGg7XG5cdHZhciBzO1xuXG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciB2ID0gTWF0aC5tYXgociwgZywgYik7XG5cdHZhciBkaWZmID0gdiAtIE1hdGgubWluKHIsIGcsIGIpO1xuXHR2YXIgZGlmZmMgPSBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiAodiAtIGMpIC8gNiAvIGRpZmYgKyAxIC8gMjtcblx0fTtcblxuXHRpZiAoZGlmZiA9PT0gMCkge1xuXHRcdGggPSBzID0gMDtcblx0fSBlbHNlIHtcblx0XHRzID0gZGlmZiAvIHY7XG5cdFx0cmRpZiA9IGRpZmZjKHIpO1xuXHRcdGdkaWYgPSBkaWZmYyhnKTtcblx0XHRiZGlmID0gZGlmZmMoYik7XG5cblx0XHRpZiAociA9PT0gdikge1xuXHRcdFx0aCA9IGJkaWYgLSBnZGlmO1xuXHRcdH0gZWxzZSBpZiAoZyA9PT0gdikge1xuXHRcdFx0aCA9ICgxIC8gMykgKyByZGlmIC0gYmRpZjtcblx0XHR9IGVsc2UgaWYgKGIgPT09IHYpIHtcblx0XHRcdGggPSAoMiAvIDMpICsgZ2RpZiAtIHJkaWY7XG5cdFx0fVxuXHRcdGlmIChoIDwgMCkge1xuXHRcdFx0aCArPSAxO1xuXHRcdH0gZWxzZSBpZiAoaCA+IDEpIHtcblx0XHRcdGggLT0gMTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gW1xuXHRcdGggKiAzNjAsXG5cdFx0cyAqIDEwMCxcblx0XHR2ICogMTAwXG5cdF07XG59O1xuXG5jb252ZXJ0LnJnYi5od2IgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdO1xuXHR2YXIgZyA9IHJnYlsxXTtcblx0dmFyIGIgPSByZ2JbMl07XG5cdHZhciBoID0gY29udmVydC5yZ2IuaHNsKHJnYilbMF07XG5cdHZhciB3ID0gMSAvIDI1NSAqIE1hdGgubWluKHIsIE1hdGgubWluKGcsIGIpKTtcblxuXHRiID0gMSAtIDEgLyAyNTUgKiBNYXRoLm1heChyLCBNYXRoLm1heChnLCBiKSk7XG5cblx0cmV0dXJuIFtoLCB3ICogMTAwLCBiICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmNteWsgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBjO1xuXHR2YXIgbTtcblx0dmFyIHk7XG5cdHZhciBrO1xuXG5cdGsgPSBNYXRoLm1pbigxIC0gciwgMSAtIGcsIDEgLSBiKTtcblx0YyA9ICgxIC0gciAtIGspIC8gKDEgLSBrKSB8fCAwO1xuXHRtID0gKDEgLSBnIC0gaykgLyAoMSAtIGspIHx8IDA7XG5cdHkgPSAoMSAtIGIgLSBrKSAvICgxIC0gaykgfHwgMDtcblxuXHRyZXR1cm4gW2MgKiAxMDAsIG0gKiAxMDAsIHkgKiAxMDAsIGsgKiAxMDBdO1xufTtcblxuLyoqXG4gKiBTZWUgaHR0cHM6Ly9lbi5tLndpa2lwZWRpYS5vcmcvd2lraS9FdWNsaWRlYW5fZGlzdGFuY2UjU3F1YXJlZF9FdWNsaWRlYW5fZGlzdGFuY2VcbiAqICovXG5mdW5jdGlvbiBjb21wYXJhdGl2ZURpc3RhbmNlKHgsIHkpIHtcblx0cmV0dXJuIChcblx0XHRNYXRoLnBvdyh4WzBdIC0geVswXSwgMikgK1xuXHRcdE1hdGgucG93KHhbMV0gLSB5WzFdLCAyKSArXG5cdFx0TWF0aC5wb3coeFsyXSAtIHlbMl0sIDIpXG5cdCk7XG59XG5cbmNvbnZlcnQucmdiLmtleXdvcmQgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByZXZlcnNlZCA9IHJldmVyc2VLZXl3b3Jkc1tyZ2JdO1xuXHRpZiAocmV2ZXJzZWQpIHtcblx0XHRyZXR1cm4gcmV2ZXJzZWQ7XG5cdH1cblxuXHR2YXIgY3VycmVudENsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuXHR2YXIgY3VycmVudENsb3Nlc3RLZXl3b3JkO1xuXG5cdGZvciAodmFyIGtleXdvcmQgaW4gY3NzS2V5d29yZHMpIHtcblx0XHRpZiAoY3NzS2V5d29yZHMuaGFzT3duUHJvcGVydHkoa2V5d29yZCkpIHtcblx0XHRcdHZhciB2YWx1ZSA9IGNzc0tleXdvcmRzW2tleXdvcmRdO1xuXG5cdFx0XHQvLyBDb21wdXRlIGNvbXBhcmF0aXZlIGRpc3RhbmNlXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBjb21wYXJhdGl2ZURpc3RhbmNlKHJnYiwgdmFsdWUpO1xuXG5cdFx0XHQvLyBDaGVjayBpZiBpdHMgbGVzcywgaWYgc28gc2V0IGFzIGNsb3Nlc3Rcblx0XHRcdGlmIChkaXN0YW5jZSA8IGN1cnJlbnRDbG9zZXN0RGlzdGFuY2UpIHtcblx0XHRcdFx0Y3VycmVudENsb3Nlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuXHRcdFx0XHRjdXJyZW50Q2xvc2VzdEtleXdvcmQgPSBrZXl3b3JkO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjdXJyZW50Q2xvc2VzdEtleXdvcmQ7XG59O1xuXG5jb252ZXJ0LmtleXdvcmQucmdiID0gZnVuY3Rpb24gKGtleXdvcmQpIHtcblx0cmV0dXJuIGNzc0tleXdvcmRzW2tleXdvcmRdO1xufTtcblxuY29udmVydC5yZ2IueHl6ID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgciA9IHJnYlswXSAvIDI1NTtcblx0dmFyIGcgPSByZ2JbMV0gLyAyNTU7XG5cdHZhciBiID0gcmdiWzJdIC8gMjU1O1xuXG5cdC8vIGFzc3VtZSBzUkdCXG5cdHIgPSByID4gMC4wNDA0NSA/IE1hdGgucG93KCgociArIDAuMDU1KSAvIDEuMDU1KSwgMi40KSA6IChyIC8gMTIuOTIpO1xuXHRnID0gZyA+IDAuMDQwNDUgPyBNYXRoLnBvdygoKGcgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCkgOiAoZyAvIDEyLjkyKTtcblx0YiA9IGIgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKChiICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpIDogKGIgLyAxMi45Mik7XG5cblx0dmFyIHggPSAociAqIDAuNDEyNCkgKyAoZyAqIDAuMzU3NikgKyAoYiAqIDAuMTgwNSk7XG5cdHZhciB5ID0gKHIgKiAwLjIxMjYpICsgKGcgKiAwLjcxNTIpICsgKGIgKiAwLjA3MjIpO1xuXHR2YXIgeiA9IChyICogMC4wMTkzKSArIChnICogMC4xMTkyKSArIChiICogMC45NTA1KTtcblxuXHRyZXR1cm4gW3ggKiAxMDAsIHkgKiAxMDAsIHogKiAxMDBdO1xufTtcblxuY29udmVydC5yZ2IubGFiID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgeHl6ID0gY29udmVydC5yZ2IueHl6KHJnYik7XG5cdHZhciB4ID0geHl6WzBdO1xuXHR2YXIgeSA9IHh5elsxXTtcblx0dmFyIHogPSB4eXpbMl07XG5cdHZhciBsO1xuXHR2YXIgYTtcblx0dmFyIGI7XG5cblx0eCAvPSA5NS4wNDc7XG5cdHkgLz0gMTAwO1xuXHR6IC89IDEwOC44ODM7XG5cblx0eCA9IHggPiAwLjAwODg1NiA/IE1hdGgucG93KHgsIDEgLyAzKSA6ICg3Ljc4NyAqIHgpICsgKDE2IC8gMTE2KTtcblx0eSA9IHkgPiAwLjAwODg1NiA/IE1hdGgucG93KHksIDEgLyAzKSA6ICg3Ljc4NyAqIHkpICsgKDE2IC8gMTE2KTtcblx0eiA9IHogPiAwLjAwODg1NiA/IE1hdGgucG93KHosIDEgLyAzKSA6ICg3Ljc4NyAqIHopICsgKDE2IC8gMTE2KTtcblxuXHRsID0gKDExNiAqIHkpIC0gMTY7XG5cdGEgPSA1MDAgKiAoeCAtIHkpO1xuXHRiID0gMjAwICogKHkgLSB6KTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5oc2wucmdiID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgaCA9IGhzbFswXSAvIDM2MDtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgdDE7XG5cdHZhciB0Mjtcblx0dmFyIHQzO1xuXHR2YXIgcmdiO1xuXHR2YXIgdmFsO1xuXG5cdGlmIChzID09PSAwKSB7XG5cdFx0dmFsID0gbCAqIDI1NTtcblx0XHRyZXR1cm4gW3ZhbCwgdmFsLCB2YWxdO1xuXHR9XG5cblx0aWYgKGwgPCAwLjUpIHtcblx0XHR0MiA9IGwgKiAoMSArIHMpO1xuXHR9IGVsc2Uge1xuXHRcdHQyID0gbCArIHMgLSBsICogcztcblx0fVxuXG5cdHQxID0gMiAqIGwgLSB0MjtcblxuXHRyZ2IgPSBbMCwgMCwgMF07XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0dDMgPSBoICsgMSAvIDMgKiAtKGkgLSAxKTtcblx0XHRpZiAodDMgPCAwKSB7XG5cdFx0XHR0MysrO1xuXHRcdH1cblx0XHRpZiAodDMgPiAxKSB7XG5cdFx0XHR0My0tO1xuXHRcdH1cblxuXHRcdGlmICg2ICogdDMgPCAxKSB7XG5cdFx0XHR2YWwgPSB0MSArICh0MiAtIHQxKSAqIDYgKiB0Mztcblx0XHR9IGVsc2UgaWYgKDIgKiB0MyA8IDEpIHtcblx0XHRcdHZhbCA9IHQyO1xuXHRcdH0gZWxzZSBpZiAoMyAqIHQzIDwgMikge1xuXHRcdFx0dmFsID0gdDEgKyAodDIgLSB0MSkgKiAoMiAvIDMgLSB0MykgKiA2O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWwgPSB0MTtcblx0XHR9XG5cblx0XHRyZ2JbaV0gPSB2YWwgKiAyNTU7XG5cdH1cblxuXHRyZXR1cm4gcmdiO1xufTtcblxuY29udmVydC5oc2wuaHN2ID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgaCA9IGhzbFswXTtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgc21pbiA9IHM7XG5cdHZhciBsbWluID0gTWF0aC5tYXgobCwgMC4wMSk7XG5cdHZhciBzdjtcblx0dmFyIHY7XG5cblx0bCAqPSAyO1xuXHRzICo9IChsIDw9IDEpID8gbCA6IDIgLSBsO1xuXHRzbWluICo9IGxtaW4gPD0gMSA/IGxtaW4gOiAyIC0gbG1pbjtcblx0diA9IChsICsgcykgLyAyO1xuXHRzdiA9IGwgPT09IDAgPyAoMiAqIHNtaW4pIC8gKGxtaW4gKyBzbWluKSA6ICgyICogcykgLyAobCArIHMpO1xuXG5cdHJldHVybiBbaCwgc3YgKiAxMDAsIHYgKiAxMDBdO1xufTtcblxuY29udmVydC5oc3YucmdiID0gZnVuY3Rpb24gKGhzdikge1xuXHR2YXIgaCA9IGhzdlswXSAvIDYwO1xuXHR2YXIgcyA9IGhzdlsxXSAvIDEwMDtcblx0dmFyIHYgPSBoc3ZbMl0gLyAxMDA7XG5cdHZhciBoaSA9IE1hdGguZmxvb3IoaCkgJSA2O1xuXG5cdHZhciBmID0gaCAtIE1hdGguZmxvb3IoaCk7XG5cdHZhciBwID0gMjU1ICogdiAqICgxIC0gcyk7XG5cdHZhciBxID0gMjU1ICogdiAqICgxIC0gKHMgKiBmKSk7XG5cdHZhciB0ID0gMjU1ICogdiAqICgxIC0gKHMgKiAoMSAtIGYpKSk7XG5cdHYgKj0gMjU1O1xuXG5cdHN3aXRjaCAoaGkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRyZXR1cm4gW3YsIHQsIHBdO1xuXHRcdGNhc2UgMTpcblx0XHRcdHJldHVybiBbcSwgdiwgcF07XG5cdFx0Y2FzZSAyOlxuXHRcdFx0cmV0dXJuIFtwLCB2LCB0XTtcblx0XHRjYXNlIDM6XG5cdFx0XHRyZXR1cm4gW3AsIHEsIHZdO1xuXHRcdGNhc2UgNDpcblx0XHRcdHJldHVybiBbdCwgcCwgdl07XG5cdFx0Y2FzZSA1OlxuXHRcdFx0cmV0dXJuIFt2LCBwLCBxXTtcblx0fVxufTtcblxuY29udmVydC5oc3YuaHNsID0gZnVuY3Rpb24gKGhzdikge1xuXHR2YXIgaCA9IGhzdlswXTtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXHR2YXIgdm1pbiA9IE1hdGgubWF4KHYsIDAuMDEpO1xuXHR2YXIgbG1pbjtcblx0dmFyIHNsO1xuXHR2YXIgbDtcblxuXHRsID0gKDIgLSBzKSAqIHY7XG5cdGxtaW4gPSAoMiAtIHMpICogdm1pbjtcblx0c2wgPSBzICogdm1pbjtcblx0c2wgLz0gKGxtaW4gPD0gMSkgPyBsbWluIDogMiAtIGxtaW47XG5cdHNsID0gc2wgfHwgMDtcblx0bCAvPSAyO1xuXG5cdHJldHVybiBbaCwgc2wgKiAxMDAsIGwgKiAxMDBdO1xufTtcblxuLy8gaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3NzLWNvbG9yLyNod2ItdG8tcmdiXG5jb252ZXJ0Lmh3Yi5yZ2IgPSBmdW5jdGlvbiAoaHdiKSB7XG5cdHZhciBoID0gaHdiWzBdIC8gMzYwO1xuXHR2YXIgd2ggPSBod2JbMV0gLyAxMDA7XG5cdHZhciBibCA9IGh3YlsyXSAvIDEwMDtcblx0dmFyIHJhdGlvID0gd2ggKyBibDtcblx0dmFyIGk7XG5cdHZhciB2O1xuXHR2YXIgZjtcblx0dmFyIG47XG5cblx0Ly8gd2ggKyBibCBjYW50IGJlID4gMVxuXHRpZiAocmF0aW8gPiAxKSB7XG5cdFx0d2ggLz0gcmF0aW87XG5cdFx0YmwgLz0gcmF0aW87XG5cdH1cblxuXHRpID0gTWF0aC5mbG9vcig2ICogaCk7XG5cdHYgPSAxIC0gYmw7XG5cdGYgPSA2ICogaCAtIGk7XG5cblx0aWYgKChpICYgMHgwMSkgIT09IDApIHtcblx0XHRmID0gMSAtIGY7XG5cdH1cblxuXHRuID0gd2ggKyBmICogKHYgLSB3aCk7IC8vIGxpbmVhciBpbnRlcnBvbGF0aW9uXG5cblx0dmFyIHI7XG5cdHZhciBnO1xuXHR2YXIgYjtcblx0c3dpdGNoIChpKSB7XG5cdFx0ZGVmYXVsdDpcblx0XHRjYXNlIDY6XG5cdFx0Y2FzZSAwOiByID0gdjsgZyA9IG47IGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAxOiByID0gbjsgZyA9IHY7IGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAyOiByID0gd2g7IGcgPSB2OyBiID0gbjsgYnJlYWs7XG5cdFx0Y2FzZSAzOiByID0gd2g7IGcgPSBuOyBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA0OiByID0gbjsgZyA9IHdoOyBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA1OiByID0gdjsgZyA9IHdoOyBiID0gbjsgYnJlYWs7XG5cdH1cblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC5jbXlrLnJnYiA9IGZ1bmN0aW9uIChjbXlrKSB7XG5cdHZhciBjID0gY215a1swXSAvIDEwMDtcblx0dmFyIG0gPSBjbXlrWzFdIC8gMTAwO1xuXHR2YXIgeSA9IGNteWtbMl0gLyAxMDA7XG5cdHZhciBrID0gY215a1szXSAvIDEwMDtcblx0dmFyIHI7XG5cdHZhciBnO1xuXHR2YXIgYjtcblxuXHRyID0gMSAtIE1hdGgubWluKDEsIGMgKiAoMSAtIGspICsgayk7XG5cdGcgPSAxIC0gTWF0aC5taW4oMSwgbSAqICgxIC0gaykgKyBrKTtcblx0YiA9IDEgLSBNYXRoLm1pbigxLCB5ICogKDEgLSBrKSArIGspO1xuXG5cdHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59O1xuXG5jb252ZXJ0Lnh5ei5yZ2IgPSBmdW5jdGlvbiAoeHl6KSB7XG5cdHZhciB4ID0geHl6WzBdIC8gMTAwO1xuXHR2YXIgeSA9IHh5elsxXSAvIDEwMDtcblx0dmFyIHogPSB4eXpbMl0gLyAxMDA7XG5cdHZhciByO1xuXHR2YXIgZztcblx0dmFyIGI7XG5cblx0ciA9ICh4ICogMy4yNDA2KSArICh5ICogLTEuNTM3MikgKyAoeiAqIC0wLjQ5ODYpO1xuXHRnID0gKHggKiAtMC45Njg5KSArICh5ICogMS44NzU4KSArICh6ICogMC4wNDE1KTtcblx0YiA9ICh4ICogMC4wNTU3KSArICh5ICogLTAuMjA0MCkgKyAoeiAqIDEuMDU3MCk7XG5cblx0Ly8gYXNzdW1lIHNSR0Jcblx0ciA9IHIgPiAwLjAwMzEzMDhcblx0XHQ/ICgoMS4wNTUgKiBNYXRoLnBvdyhyLCAxLjAgLyAyLjQpKSAtIDAuMDU1KVxuXHRcdDogciAqIDEyLjkyO1xuXG5cdGcgPSBnID4gMC4wMDMxMzA4XG5cdFx0PyAoKDEuMDU1ICogTWF0aC5wb3coZywgMS4wIC8gMi40KSkgLSAwLjA1NSlcblx0XHQ6IGcgKiAxMi45MjtcblxuXHRiID0gYiA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIE1hdGgucG93KGIsIDEuMCAvIDIuNCkpIC0gMC4wNTUpXG5cdFx0OiBiICogMTIuOTI7XG5cblx0ciA9IE1hdGgubWluKE1hdGgubWF4KDAsIHIpLCAxKTtcblx0ZyA9IE1hdGgubWluKE1hdGgubWF4KDAsIGcpLCAxKTtcblx0YiA9IE1hdGgubWluKE1hdGgubWF4KDAsIGIpLCAxKTtcblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC54eXoubGFiID0gZnVuY3Rpb24gKHh5eikge1xuXHR2YXIgeCA9IHh5elswXTtcblx0dmFyIHkgPSB4eXpbMV07XG5cdHZhciB6ID0geHl6WzJdO1xuXHR2YXIgbDtcblx0dmFyIGE7XG5cdHZhciBiO1xuXG5cdHggLz0gOTUuMDQ3O1xuXHR5IC89IDEwMDtcblx0eiAvPSAxMDguODgzO1xuXG5cdHggPSB4ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiAoNy43ODcgKiB4KSArICgxNiAvIDExNik7XG5cdHkgPSB5ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh5LCAxIC8gMykgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG5cdHogPSB6ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh6LCAxIC8gMykgOiAoNy43ODcgKiB6KSArICgxNiAvIDExNik7XG5cblx0bCA9ICgxMTYgKiB5KSAtIDE2O1xuXHRhID0gNTAwICogKHggLSB5KTtcblx0YiA9IDIwMCAqICh5IC0geik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQubGFiLnh5eiA9IGZ1bmN0aW9uIChsYWIpIHtcblx0dmFyIGwgPSBsYWJbMF07XG5cdHZhciBhID0gbGFiWzFdO1xuXHR2YXIgYiA9IGxhYlsyXTtcblx0dmFyIHg7XG5cdHZhciB5O1xuXHR2YXIgejtcblxuXHR5ID0gKGwgKyAxNikgLyAxMTY7XG5cdHggPSBhIC8gNTAwICsgeTtcblx0eiA9IHkgLSBiIC8gMjAwO1xuXG5cdHZhciB5MiA9IE1hdGgucG93KHksIDMpO1xuXHR2YXIgeDIgPSBNYXRoLnBvdyh4LCAzKTtcblx0dmFyIHoyID0gTWF0aC5wb3coeiwgMyk7XG5cdHkgPSB5MiA+IDAuMDA4ODU2ID8geTIgOiAoeSAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuXHR4ID0geDIgPiAwLjAwODg1NiA/IHgyIDogKHggLSAxNiAvIDExNikgLyA3Ljc4Nztcblx0eiA9IHoyID4gMC4wMDg4NTYgPyB6MiA6ICh6IC0gMTYgLyAxMTYpIC8gNy43ODc7XG5cblx0eCAqPSA5NS4wNDc7XG5cdHkgKj0gMTAwO1xuXHR6ICo9IDEwOC44ODM7XG5cblx0cmV0dXJuIFt4LCB5LCB6XTtcbn07XG5cbmNvbnZlcnQubGFiLmxjaCA9IGZ1bmN0aW9uIChsYWIpIHtcblx0dmFyIGwgPSBsYWJbMF07XG5cdHZhciBhID0gbGFiWzFdO1xuXHR2YXIgYiA9IGxhYlsyXTtcblx0dmFyIGhyO1xuXHR2YXIgaDtcblx0dmFyIGM7XG5cblx0aHIgPSBNYXRoLmF0YW4yKGIsIGEpO1xuXHRoID0gaHIgKiAzNjAgLyAyIC8gTWF0aC5QSTtcblxuXHRpZiAoaCA8IDApIHtcblx0XHRoICs9IDM2MDtcblx0fVxuXG5cdGMgPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG5cblx0cmV0dXJuIFtsLCBjLCBoXTtcbn07XG5cbmNvbnZlcnQubGNoLmxhYiA9IGZ1bmN0aW9uIChsY2gpIHtcblx0dmFyIGwgPSBsY2hbMF07XG5cdHZhciBjID0gbGNoWzFdO1xuXHR2YXIgaCA9IGxjaFsyXTtcblx0dmFyIGE7XG5cdHZhciBiO1xuXHR2YXIgaHI7XG5cblx0aHIgPSBoIC8gMzYwICogMiAqIE1hdGguUEk7XG5cdGEgPSBjICogTWF0aC5jb3MoaHIpO1xuXHRiID0gYyAqIE1hdGguc2luKGhyKTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5yZ2IuYW5zaTE2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIHIgPSBhcmdzWzBdO1xuXHR2YXIgZyA9IGFyZ3NbMV07XG5cdHZhciBiID0gYXJnc1syXTtcblx0dmFyIHZhbHVlID0gMSBpbiBhcmd1bWVudHMgPyBhcmd1bWVudHNbMV0gOiBjb252ZXJ0LnJnYi5oc3YoYXJncylbMl07IC8vIGhzdiAtPiBhbnNpMTYgb3B0aW1pemF0aW9uXG5cblx0dmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlIC8gNTApO1xuXG5cdGlmICh2YWx1ZSA9PT0gMCkge1xuXHRcdHJldHVybiAzMDtcblx0fVxuXG5cdHZhciBhbnNpID0gMzBcblx0XHQrICgoTWF0aC5yb3VuZChiIC8gMjU1KSA8PCAyKVxuXHRcdHwgKE1hdGgucm91bmQoZyAvIDI1NSkgPDwgMSlcblx0XHR8IE1hdGgucm91bmQociAvIDI1NSkpO1xuXG5cdGlmICh2YWx1ZSA9PT0gMikge1xuXHRcdGFuc2kgKz0gNjA7XG5cdH1cblxuXHRyZXR1cm4gYW5zaTtcbn07XG5cbmNvbnZlcnQuaHN2LmFuc2kxNiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdC8vIG9wdGltaXphdGlvbiBoZXJlOyB3ZSBhbHJlYWR5IGtub3cgdGhlIHZhbHVlIGFuZCBkb24ndCBuZWVkIHRvIGdldFxuXHQvLyBpdCBjb252ZXJ0ZWQgZm9yIHVzLlxuXHRyZXR1cm4gY29udmVydC5yZ2IuYW5zaTE2KGNvbnZlcnQuaHN2LnJnYihhcmdzKSwgYXJnc1syXSk7XG59O1xuXG5jb252ZXJ0LnJnYi5hbnNpMjU2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIHIgPSBhcmdzWzBdO1xuXHR2YXIgZyA9IGFyZ3NbMV07XG5cdHZhciBiID0gYXJnc1syXTtcblxuXHQvLyB3ZSB1c2UgdGhlIGV4dGVuZGVkIGdyZXlzY2FsZSBwYWxldHRlIGhlcmUsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZlxuXHQvLyBibGFjayBhbmQgd2hpdGUuIG5vcm1hbCBwYWxldHRlIG9ubHkgaGFzIDQgZ3JleXNjYWxlIHNoYWRlcy5cblx0aWYgKHIgPT09IGcgJiYgZyA9PT0gYikge1xuXHRcdGlmIChyIDwgOCkge1xuXHRcdFx0cmV0dXJuIDE2O1xuXHRcdH1cblxuXHRcdGlmIChyID4gMjQ4KSB7XG5cdFx0XHRyZXR1cm4gMjMxO1xuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLnJvdW5kKCgociAtIDgpIC8gMjQ3KSAqIDI0KSArIDIzMjtcblx0fVxuXG5cdHZhciBhbnNpID0gMTZcblx0XHQrICgzNiAqIE1hdGgucm91bmQociAvIDI1NSAqIDUpKVxuXHRcdCsgKDYgKiBNYXRoLnJvdW5kKGcgLyAyNTUgKiA1KSlcblx0XHQrIE1hdGgucm91bmQoYiAvIDI1NSAqIDUpO1xuXG5cdHJldHVybiBhbnNpO1xufTtcblxuY29udmVydC5hbnNpMTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIGNvbG9yID0gYXJncyAlIDEwO1xuXG5cdC8vIGhhbmRsZSBncmV5c2NhbGVcblx0aWYgKGNvbG9yID09PSAwIHx8IGNvbG9yID09PSA3KSB7XG5cdFx0aWYgKGFyZ3MgPiA1MCkge1xuXHRcdFx0Y29sb3IgKz0gMy41O1xuXHRcdH1cblxuXHRcdGNvbG9yID0gY29sb3IgLyAxMC41ICogMjU1O1xuXG5cdFx0cmV0dXJuIFtjb2xvciwgY29sb3IsIGNvbG9yXTtcblx0fVxuXG5cdHZhciBtdWx0ID0gKH5+KGFyZ3MgPiA1MCkgKyAxKSAqIDAuNTtcblx0dmFyIHIgPSAoKGNvbG9yICYgMSkgKiBtdWx0KSAqIDI1NTtcblx0dmFyIGcgPSAoKChjb2xvciA+PiAxKSAmIDEpICogbXVsdCkgKiAyNTU7XG5cdHZhciBiID0gKCgoY29sb3IgPj4gMikgJiAxKSAqIG11bHQpICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LmFuc2kyNTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Ly8gaGFuZGxlIGdyZXlzY2FsZVxuXHRpZiAoYXJncyA+PSAyMzIpIHtcblx0XHR2YXIgYyA9IChhcmdzIC0gMjMyKSAqIDEwICsgODtcblx0XHRyZXR1cm4gW2MsIGMsIGNdO1xuXHR9XG5cblx0YXJncyAtPSAxNjtcblxuXHR2YXIgcmVtO1xuXHR2YXIgciA9IE1hdGguZmxvb3IoYXJncyAvIDM2KSAvIDUgKiAyNTU7XG5cdHZhciBnID0gTWF0aC5mbG9vcigocmVtID0gYXJncyAlIDM2KSAvIDYpIC8gNSAqIDI1NTtcblx0dmFyIGIgPSAocmVtICUgNikgLyA1ICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LnJnYi5oZXggPSBmdW5jdGlvbiAoYXJncykge1xuXHR2YXIgaW50ZWdlciA9ICgoTWF0aC5yb3VuZChhcmdzWzBdKSAmIDB4RkYpIDw8IDE2KVxuXHRcdCsgKChNYXRoLnJvdW5kKGFyZ3NbMV0pICYgMHhGRikgPDwgOClcblx0XHQrIChNYXRoLnJvdW5kKGFyZ3NbMl0pICYgMHhGRik7XG5cblx0dmFyIHN0cmluZyA9IGludGVnZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiAnMDAwMDAwJy5zdWJzdHJpbmcoc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59O1xuXG5jb252ZXJ0LmhleC5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHR2YXIgbWF0Y2ggPSBhcmdzLnRvU3RyaW5nKDE2KS5tYXRjaCgvW2EtZjAtOV17Nn18W2EtZjAtOV17M30vaSk7XG5cdGlmICghbWF0Y2gpIHtcblx0XHRyZXR1cm4gWzAsIDAsIDBdO1xuXHR9XG5cblx0dmFyIGNvbG9yU3RyaW5nID0gbWF0Y2hbMF07XG5cblx0aWYgKG1hdGNoWzBdLmxlbmd0aCA9PT0gMykge1xuXHRcdGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoY2hhcikge1xuXHRcdFx0cmV0dXJuIGNoYXIgKyBjaGFyO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0dmFyIGludGVnZXIgPSBwYXJzZUludChjb2xvclN0cmluZywgMTYpO1xuXHR2YXIgciA9IChpbnRlZ2VyID4+IDE2KSAmIDB4RkY7XG5cdHZhciBnID0gKGludGVnZXIgPj4gOCkgJiAweEZGO1xuXHR2YXIgYiA9IGludGVnZXIgJiAweEZGO1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LnJnYi5oY2cgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBtYXggPSBNYXRoLm1heChNYXRoLm1heChyLCBnKSwgYik7XG5cdHZhciBtaW4gPSBNYXRoLm1pbihNYXRoLm1pbihyLCBnKSwgYik7XG5cdHZhciBjaHJvbWEgPSAobWF4IC0gbWluKTtcblx0dmFyIGdyYXlzY2FsZTtcblx0dmFyIGh1ZTtcblxuXHRpZiAoY2hyb21hIDwgMSkge1xuXHRcdGdyYXlzY2FsZSA9IG1pbiAvICgxIC0gY2hyb21hKTtcblx0fSBlbHNlIHtcblx0XHRncmF5c2NhbGUgPSAwO1xuXHR9XG5cblx0aWYgKGNocm9tYSA8PSAwKSB7XG5cdFx0aHVlID0gMDtcblx0fSBlbHNlXG5cdGlmIChtYXggPT09IHIpIHtcblx0XHRodWUgPSAoKGcgLSBiKSAvIGNocm9tYSkgJSA2O1xuXHR9IGVsc2Vcblx0aWYgKG1heCA9PT0gZykge1xuXHRcdGh1ZSA9IDIgKyAoYiAtIHIpIC8gY2hyb21hO1xuXHR9IGVsc2Uge1xuXHRcdGh1ZSA9IDQgKyAociAtIGcpIC8gY2hyb21hICsgNDtcblx0fVxuXG5cdGh1ZSAvPSA2O1xuXHRodWUgJT0gMTtcblxuXHRyZXR1cm4gW2h1ZSAqIDM2MCwgY2hyb21hICogMTAwLCBncmF5c2NhbGUgKiAxMDBdO1xufTtcblxuY29udmVydC5oc2wuaGNnID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgcyA9IGhzbFsxXSAvIDEwMDtcblx0dmFyIGwgPSBoc2xbMl0gLyAxMDA7XG5cdHZhciBjID0gMTtcblx0dmFyIGYgPSAwO1xuXG5cdGlmIChsIDwgMC41KSB7XG5cdFx0YyA9IDIuMCAqIHMgKiBsO1xuXHR9IGVsc2Uge1xuXHRcdGMgPSAyLjAgKiBzICogKDEuMCAtIGwpO1xuXHR9XG5cblx0aWYgKGMgPCAxLjApIHtcblx0XHRmID0gKGwgLSAwLjUgKiBjKSAvICgxLjAgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHNsWzBdLCBjICogMTAwLCBmICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHN2LmhjZyA9IGZ1bmN0aW9uIChoc3YpIHtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXG5cdHZhciBjID0gcyAqIHY7XG5cdHZhciBmID0gMDtcblxuXHRpZiAoYyA8IDEuMCkge1xuXHRcdGYgPSAodiAtIGMpIC8gKDEgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHN2WzBdLCBjICogMTAwLCBmICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLnJnYiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGggPSBoY2dbMF0gLyAzNjA7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHRpZiAoYyA9PT0gMC4wKSB7XG5cdFx0cmV0dXJuIFtnICogMjU1LCBnICogMjU1LCBnICogMjU1XTtcblx0fVxuXG5cdHZhciBwdXJlID0gWzAsIDAsIDBdO1xuXHR2YXIgaGkgPSAoaCAlIDEpICogNjtcblx0dmFyIHYgPSBoaSAlIDE7XG5cdHZhciB3ID0gMSAtIHY7XG5cdHZhciBtZyA9IDA7XG5cblx0c3dpdGNoIChNYXRoLmZsb29yKGhpKSkge1xuXHRcdGNhc2UgMDpcblx0XHRcdHB1cmVbMF0gPSAxOyBwdXJlWzFdID0gdjsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMTpcblx0XHRcdHB1cmVbMF0gPSB3OyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMjpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgMzpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gdzsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGNhc2UgNDpcblx0XHRcdHB1cmVbMF0gPSB2OyBwdXJlWzFdID0gMDsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRwdXJlWzBdID0gMTsgcHVyZVsxXSA9IDA7IHB1cmVbMl0gPSB3O1xuXHR9XG5cblx0bWcgPSAoMS4wIC0gYykgKiBnO1xuXG5cdHJldHVybiBbXG5cdFx0KGMgKiBwdXJlWzBdICsgbWcpICogMjU1LFxuXHRcdChjICogcHVyZVsxXSArIG1nKSAqIDI1NSxcblx0XHQoYyAqIHB1cmVbMl0gKyBtZykgKiAyNTVcblx0XTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzdiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGMgPSBoY2dbMV0gLyAxMDA7XG5cdHZhciBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdHZhciB2ID0gYyArIGcgKiAoMS4wIC0gYyk7XG5cdHZhciBmID0gMDtcblxuXHRpZiAodiA+IDAuMCkge1xuXHRcdGYgPSBjIC8gdjtcblx0fVxuXG5cdHJldHVybiBbaGNnWzBdLCBmICogMTAwLCB2ICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzbCA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGMgPSBoY2dbMV0gLyAxMDA7XG5cdHZhciBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdHZhciBsID0gZyAqICgxLjAgLSBjKSArIDAuNSAqIGM7XG5cdHZhciBzID0gMDtcblxuXHRpZiAobCA+IDAuMCAmJiBsIDwgMC41KSB7XG5cdFx0cyA9IGMgLyAoMiAqIGwpO1xuXHR9IGVsc2Vcblx0aWYgKGwgPj0gMC41ICYmIGwgPCAxLjApIHtcblx0XHRzID0gYyAvICgyICogKDEgLSBsKSk7XG5cdH1cblxuXHRyZXR1cm4gW2hjZ1swXSwgcyAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5od2IgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblx0dmFyIHYgPSBjICsgZyAqICgxLjAgLSBjKTtcblx0cmV0dXJuIFtoY2dbMF0sICh2IC0gYykgKiAxMDAsICgxIC0gdikgKiAxMDBdO1xufTtcblxuY29udmVydC5od2IuaGNnID0gZnVuY3Rpb24gKGh3Yikge1xuXHR2YXIgdyA9IGh3YlsxXSAvIDEwMDtcblx0dmFyIGIgPSBod2JbMl0gLyAxMDA7XG5cdHZhciB2ID0gMSAtIGI7XG5cdHZhciBjID0gdiAtIHc7XG5cdHZhciBnID0gMDtcblxuXHRpZiAoYyA8IDEpIHtcblx0XHRnID0gKHYgLSBjKSAvICgxIC0gYyk7XG5cdH1cblxuXHRyZXR1cm4gW2h3YlswXSwgYyAqIDEwMCwgZyAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmFwcGxlLnJnYiA9IGZ1bmN0aW9uIChhcHBsZSkge1xuXHRyZXR1cm4gWyhhcHBsZVswXSAvIDY1NTM1KSAqIDI1NSwgKGFwcGxlWzFdIC8gNjU1MzUpICogMjU1LCAoYXBwbGVbMl0gLyA2NTUzNSkgKiAyNTVdO1xufTtcblxuY29udmVydC5yZ2IuYXBwbGUgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHJldHVybiBbKHJnYlswXSAvIDI1NSkgKiA2NTUzNSwgKHJnYlsxXSAvIDI1NSkgKiA2NTUzNSwgKHJnYlsyXSAvIDI1NSkgKiA2NTUzNV07XG59O1xuXG5jb252ZXJ0LmdyYXkucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFthcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1XTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oc2wgPSBjb252ZXJ0LmdyYXkuaHN2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFswLCAwLCBhcmdzWzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5od2IgPSBmdW5jdGlvbiAoZ3JheSkge1xuXHRyZXR1cm4gWzAsIDEwMCwgZ3JheVswXV07XG59O1xuXG5jb252ZXJ0LmdyYXkuY215ayA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdHJldHVybiBbMCwgMCwgMCwgZ3JheVswXV07XG59O1xuXG5jb252ZXJ0LmdyYXkubGFiID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0cmV0dXJuIFtncmF5WzBdLCAwLCAwXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oZXggPSBmdW5jdGlvbiAoZ3JheSkge1xuXHR2YXIgdmFsID0gTWF0aC5yb3VuZChncmF5WzBdIC8gMTAwICogMjU1KSAmIDB4RkY7XG5cdHZhciBpbnRlZ2VyID0gKHZhbCA8PCAxNikgKyAodmFsIDw8IDgpICsgdmFsO1xuXG5cdHZhciBzdHJpbmcgPSBpbnRlZ2VyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHRyZXR1cm4gJzAwMDAwMCcuc3Vic3RyaW5nKHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufTtcblxuY29udmVydC5yZ2IuZ3JheSA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHZhbCA9IChyZ2JbMF0gKyByZ2JbMV0gKyByZ2JbMl0pIC8gMztcblx0cmV0dXJuIFt2YWwgLyAyNTUgKiAxMDBdO1xufTtcbiIsICJ2YXIgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG5cbi8qXG5cdHRoaXMgZnVuY3Rpb24gcm91dGVzIGEgbW9kZWwgdG8gYWxsIG90aGVyIG1vZGVscy5cblxuXHRhbGwgZnVuY3Rpb25zIHRoYXQgYXJlIHJvdXRlZCBoYXZlIGEgcHJvcGVydHkgYC5jb252ZXJzaW9uYCBhdHRhY2hlZFxuXHR0byB0aGUgcmV0dXJuZWQgc3ludGhldGljIGZ1bmN0aW9uLiBUaGlzIHByb3BlcnR5IGlzIGFuIGFycmF5XG5cdG9mIHN0cmluZ3MsIGVhY2ggd2l0aCB0aGUgc3RlcHMgaW4gYmV0d2VlbiB0aGUgJ2Zyb20nIGFuZCAndG8nXG5cdGNvbG9yIG1vZGVscyAoaW5jbHVzaXZlKS5cblxuXHRjb252ZXJzaW9ucyB0aGF0IGFyZSBub3QgcG9zc2libGUgc2ltcGx5IGFyZSBub3QgaW5jbHVkZWQuXG4qL1xuXG5mdW5jdGlvbiBidWlsZEdyYXBoKCkge1xuXHR2YXIgZ3JhcGggPSB7fTtcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL29iamVjdC1rZXlzLXZzLWZvci1pbi13aXRoLWNsb3N1cmUvM1xuXHR2YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuXG5cdGZvciAodmFyIGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRncmFwaFttb2RlbHNbaV1dID0ge1xuXHRcdFx0Ly8gaHR0cDovL2pzcGVyZi5jb20vMS12cy1pbmZpbml0eVxuXHRcdFx0Ly8gbWljcm8tb3B0LCBidXQgdGhpcyBpcyBzaW1wbGUuXG5cdFx0XHRkaXN0YW5jZTogLTEsXG5cdFx0XHRwYXJlbnQ6IG51bGxcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIGdyYXBoO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CcmVhZHRoLWZpcnN0X3NlYXJjaFxuZnVuY3Rpb24gZGVyaXZlQkZTKGZyb21Nb2RlbCkge1xuXHR2YXIgZ3JhcGggPSBidWlsZEdyYXBoKCk7XG5cdHZhciBxdWV1ZSA9IFtmcm9tTW9kZWxdOyAvLyB1bnNoaWZ0IC0+IHF1ZXVlIC0+IHBvcFxuXG5cdGdyYXBoW2Zyb21Nb2RlbF0uZGlzdGFuY2UgPSAwO1xuXG5cdHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcblx0XHR2YXIgY3VycmVudCA9IHF1ZXVlLnBvcCgpO1xuXHRcdHZhciBhZGphY2VudHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9uc1tjdXJyZW50XSk7XG5cblx0XHRmb3IgKHZhciBsZW4gPSBhZGphY2VudHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHR2YXIgYWRqYWNlbnQgPSBhZGphY2VudHNbaV07XG5cdFx0XHR2YXIgbm9kZSA9IGdyYXBoW2FkamFjZW50XTtcblxuXHRcdFx0aWYgKG5vZGUuZGlzdGFuY2UgPT09IC0xKSB7XG5cdFx0XHRcdG5vZGUuZGlzdGFuY2UgPSBncmFwaFtjdXJyZW50XS5kaXN0YW5jZSArIDE7XG5cdFx0XHRcdG5vZGUucGFyZW50ID0gY3VycmVudDtcblx0XHRcdFx0cXVldWUudW5zaGlmdChhZGphY2VudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGdyYXBoO1xufVxuXG5mdW5jdGlvbiBsaW5rKGZyb20sIHRvKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoYXJncykge1xuXHRcdHJldHVybiB0byhmcm9tKGFyZ3MpKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpIHtcblx0dmFyIHBhdGggPSBbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50LCB0b01vZGVsXTtcblx0dmFyIGZuID0gY29udmVyc2lvbnNbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50XVt0b01vZGVsXTtcblxuXHR2YXIgY3VyID0gZ3JhcGhbdG9Nb2RlbF0ucGFyZW50O1xuXHR3aGlsZSAoZ3JhcGhbY3VyXS5wYXJlbnQpIHtcblx0XHRwYXRoLnVuc2hpZnQoZ3JhcGhbY3VyXS5wYXJlbnQpO1xuXHRcdGZuID0gbGluayhjb252ZXJzaW9uc1tncmFwaFtjdXJdLnBhcmVudF1bY3VyXSwgZm4pO1xuXHRcdGN1ciA9IGdyYXBoW2N1cl0ucGFyZW50O1xuXHR9XG5cblx0Zm4uY29udmVyc2lvbiA9IHBhdGg7XG5cdHJldHVybiBmbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnJvbU1vZGVsKSB7XG5cdHZhciBncmFwaCA9IGRlcml2ZUJGUyhmcm9tTW9kZWwpO1xuXHR2YXIgY29udmVyc2lvbiA9IHt9O1xuXG5cdHZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhncmFwaCk7XG5cdGZvciAodmFyIGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHR2YXIgdG9Nb2RlbCA9IG1vZGVsc1tpXTtcblx0XHR2YXIgbm9kZSA9IGdyYXBoW3RvTW9kZWxdO1xuXG5cdFx0aWYgKG5vZGUucGFyZW50ID09PSBudWxsKSB7XG5cdFx0XHQvLyBubyBwb3NzaWJsZSBjb252ZXJzaW9uLCBvciB0aGlzIG5vZGUgaXMgdGhlIHNvdXJjZSBtb2RlbC5cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnZlcnNpb25bdG9Nb2RlbF0gPSB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCk7XG5cdH1cblxuXHRyZXR1cm4gY29udmVyc2lvbjtcbn07XG5cbiIsICJ2YXIgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG52YXIgcm91dGUgPSByZXF1aXJlKCcuL3JvdXRlJyk7XG5cbnZhciBjb252ZXJ0ID0ge307XG5cbnZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cbmZ1bmN0aW9uIHdyYXBSYXcoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmbihhcmdzKTtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbmZ1bmN0aW9uIHdyYXBSb3VuZGVkKGZuKSB7XG5cdHZhciB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoYXJncykge1xuXHRcdGlmIChhcmdzID09PSB1bmRlZmluZWQgfHwgYXJncyA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHR2YXIgcmVzdWx0ID0gZm4oYXJncyk7XG5cblx0XHQvLyB3ZSdyZSBhc3N1bWluZyB0aGUgcmVzdWx0IGlzIGFuIGFycmF5IGhlcmUuXG5cdFx0Ly8gc2VlIG5vdGljZSBpbiBjb252ZXJzaW9ucy5qczsgZG9uJ3QgdXNlIGJveCB0eXBlc1xuXHRcdC8vIGluIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yICh2YXIgbGVuID0gcmVzdWx0Lmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRyZXN1bHRbaV0gPSBNYXRoLnJvdW5kKHJlc3VsdFtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbm1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0Y29udmVydFtmcm9tTW9kZWxdID0ge307XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2NoYW5uZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0ubGFiZWxzfSk7XG5cblx0dmFyIHJvdXRlcyA9IHJvdXRlKGZyb21Nb2RlbCk7XG5cdHZhciByb3V0ZU1vZGVscyA9IE9iamVjdC5rZXlzKHJvdXRlcyk7XG5cblx0cm91dGVNb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAodG9Nb2RlbCkge1xuXHRcdHZhciBmbiA9IHJvdXRlc1t0b01vZGVsXTtcblxuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXSA9IHdyYXBSb3VuZGVkKGZuKTtcblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0ucmF3ID0gd3JhcFJhdyhmbik7XG5cdH0pO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydDtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBjb2xvclN0cmluZyA9IHJlcXVpcmUoJ2NvbG9yLXN0cmluZycpO1xudmFyIGNvbnZlcnQgPSByZXF1aXJlKCdjb2xvci1jb252ZXJ0Jyk7XG5cbnZhciBfc2xpY2UgPSBbXS5zbGljZTtcblxudmFyIHNraXBwZWRNb2RlbHMgPSBbXG5cdC8vIHRvIGJlIGhvbmVzdCwgSSBkb24ndCByZWFsbHkgZmVlbCBsaWtlIGtleXdvcmQgYmVsb25ncyBpbiBjb2xvciBjb252ZXJ0LCBidXQgZWguXG5cdCdrZXl3b3JkJyxcblxuXHQvLyBncmF5IGNvbmZsaWN0cyB3aXRoIHNvbWUgbWV0aG9kIG5hbWVzLCBhbmQgaGFzIGl0cyBvd24gbWV0aG9kIGRlZmluZWQuXG5cdCdncmF5JyxcblxuXHQvLyBzaG91bGRuJ3QgcmVhbGx5IGJlIGluIGNvbG9yLWNvbnZlcnQgZWl0aGVyLi4uXG5cdCdoZXgnXG5dO1xuXG52YXIgaGFzaGVkTW9kZWxLZXlzID0ge307XG5PYmplY3Qua2V5cyhjb252ZXJ0KS5mb3JFYWNoKGZ1bmN0aW9uIChtb2RlbCkge1xuXHRoYXNoZWRNb2RlbEtleXNbX3NsaWNlLmNhbGwoY29udmVydFttb2RlbF0ubGFiZWxzKS5zb3J0KCkuam9pbignJyldID0gbW9kZWw7XG59KTtcblxudmFyIGxpbWl0ZXJzID0ge307XG5cbmZ1bmN0aW9uIENvbG9yKG9iaiwgbW9kZWwpIHtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIENvbG9yKSkge1xuXHRcdHJldHVybiBuZXcgQ29sb3Iob2JqLCBtb2RlbCk7XG5cdH1cblxuXHRpZiAobW9kZWwgJiYgbW9kZWwgaW4gc2tpcHBlZE1vZGVscykge1xuXHRcdG1vZGVsID0gbnVsbDtcblx0fVxuXG5cdGlmIChtb2RlbCAmJiAhKG1vZGVsIGluIGNvbnZlcnQpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1vZGVsOiAnICsgbW9kZWwpO1xuXHR9XG5cblx0dmFyIGk7XG5cdHZhciBjaGFubmVscztcblxuXHRpZiAob2JqID09IG51bGwpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuXHRcdHRoaXMubW9kZWwgPSAncmdiJztcblx0XHR0aGlzLmNvbG9yID0gWzAsIDAsIDBdO1xuXHRcdHRoaXMudmFscGhhID0gMTtcblx0fSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBDb2xvcikge1xuXHRcdHRoaXMubW9kZWwgPSBvYmoubW9kZWw7XG5cdFx0dGhpcy5jb2xvciA9IG9iai5jb2xvci5zbGljZSgpO1xuXHRcdHRoaXMudmFscGhhID0gb2JqLnZhbHBoYTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuXHRcdHZhciByZXN1bHQgPSBjb2xvclN0cmluZy5nZXQob2JqKTtcblx0XHRpZiAocmVzdWx0ID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBjb2xvciBmcm9tIHN0cmluZzogJyArIG9iaik7XG5cdFx0fVxuXG5cdFx0dGhpcy5tb2RlbCA9IHJlc3VsdC5tb2RlbDtcblx0XHRjaGFubmVscyA9IGNvbnZlcnRbdGhpcy5tb2RlbF0uY2hhbm5lbHM7XG5cdFx0dGhpcy5jb2xvciA9IHJlc3VsdC52YWx1ZS5zbGljZSgwLCBjaGFubmVscyk7XG5cdFx0dGhpcy52YWxwaGEgPSB0eXBlb2YgcmVzdWx0LnZhbHVlW2NoYW5uZWxzXSA9PT0gJ251bWJlcicgPyByZXN1bHQudmFsdWVbY2hhbm5lbHNdIDogMTtcblx0fSBlbHNlIGlmIChvYmoubGVuZ3RoKSB7XG5cdFx0dGhpcy5tb2RlbCA9IG1vZGVsIHx8ICdyZ2InO1xuXHRcdGNoYW5uZWxzID0gY29udmVydFt0aGlzLm1vZGVsXS5jaGFubmVscztcblx0XHR2YXIgbmV3QXJyID0gX3NsaWNlLmNhbGwob2JqLCAwLCBjaGFubmVscyk7XG5cdFx0dGhpcy5jb2xvciA9IHplcm9BcnJheShuZXdBcnIsIGNoYW5uZWxzKTtcblx0XHR0aGlzLnZhbHBoYSA9IHR5cGVvZiBvYmpbY2hhbm5lbHNdID09PSAnbnVtYmVyJyA/IG9ialtjaGFubmVsc10gOiAxO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdudW1iZXInKSB7XG5cdFx0Ly8gdGhpcyBpcyBhbHdheXMgUkdCIC0gY2FuIGJlIGNvbnZlcnRlZCBsYXRlciBvbi5cblx0XHRvYmogJj0gMHhGRkZGRkY7XG5cdFx0dGhpcy5tb2RlbCA9ICdyZ2InO1xuXHRcdHRoaXMuY29sb3IgPSBbXG5cdFx0XHQob2JqID4+IDE2KSAmIDB4RkYsXG5cdFx0XHQob2JqID4+IDgpICYgMHhGRixcblx0XHRcdG9iaiAmIDB4RkZcblx0XHRdO1xuXHRcdHRoaXMudmFscGhhID0gMTtcblx0fSBlbHNlIHtcblx0XHR0aGlzLnZhbHBoYSA9IDE7XG5cblx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cdFx0aWYgKCdhbHBoYScgaW4gb2JqKSB7XG5cdFx0XHRrZXlzLnNwbGljZShrZXlzLmluZGV4T2YoJ2FscGhhJyksIDEpO1xuXHRcdFx0dGhpcy52YWxwaGEgPSB0eXBlb2Ygb2JqLmFscGhhID09PSAnbnVtYmVyJyA/IG9iai5hbHBoYSA6IDA7XG5cdFx0fVxuXG5cdFx0dmFyIGhhc2hlZEtleXMgPSBrZXlzLnNvcnQoKS5qb2luKCcnKTtcblx0XHRpZiAoIShoYXNoZWRLZXlzIGluIGhhc2hlZE1vZGVsS2V5cykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHBhcnNlIGNvbG9yIGZyb20gb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkob2JqKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5tb2RlbCA9IGhhc2hlZE1vZGVsS2V5c1toYXNoZWRLZXlzXTtcblxuXHRcdHZhciBsYWJlbHMgPSBjb252ZXJ0W3RoaXMubW9kZWxdLmxhYmVscztcblx0XHR2YXIgY29sb3IgPSBbXTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb2xvci5wdXNoKG9ialtsYWJlbHNbaV1dKTtcblx0XHR9XG5cblx0XHR0aGlzLmNvbG9yID0gemVyb0FycmF5KGNvbG9yKTtcblx0fVxuXG5cdC8vIHBlcmZvcm0gbGltaXRhdGlvbnMgKGNsYW1waW5nLCBldGMuKVxuXHRpZiAobGltaXRlcnNbdGhpcy5tb2RlbF0pIHtcblx0XHRjaGFubmVscyA9IGNvbnZlcnRbdGhpcy5tb2RlbF0uY2hhbm5lbHM7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGNoYW5uZWxzOyBpKyspIHtcblx0XHRcdHZhciBsaW1pdCA9IGxpbWl0ZXJzW3RoaXMubW9kZWxdW2ldO1xuXHRcdFx0aWYgKGxpbWl0KSB7XG5cdFx0XHRcdHRoaXMuY29sb3JbaV0gPSBsaW1pdCh0aGlzLmNvbG9yW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR0aGlzLnZhbHBoYSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHRoaXMudmFscGhhKSk7XG5cblx0aWYgKE9iamVjdC5mcmVlemUpIHtcblx0XHRPYmplY3QuZnJlZXplKHRoaXMpO1xuXHR9XG59XG5cbkNvbG9yLnByb3RvdHlwZSA9IHtcblx0dG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zdHJpbmcoKTtcblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpc1t0aGlzLm1vZGVsXSgpO1xuXHR9LFxuXG5cdHN0cmluZzogZnVuY3Rpb24gKHBsYWNlcykge1xuXHRcdHZhciBzZWxmID0gdGhpcy5tb2RlbCBpbiBjb2xvclN0cmluZy50byA/IHRoaXMgOiB0aGlzLnJnYigpO1xuXHRcdHNlbGYgPSBzZWxmLnJvdW5kKHR5cGVvZiBwbGFjZXMgPT09ICdudW1iZXInID8gcGxhY2VzIDogMSk7XG5cdFx0dmFyIGFyZ3MgPSBzZWxmLnZhbHBoYSA9PT0gMSA/IHNlbGYuY29sb3IgOiBzZWxmLmNvbG9yLmNvbmNhdCh0aGlzLnZhbHBoYSk7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLnRvW3NlbGYubW9kZWxdKGFyZ3MpO1xuXHR9LFxuXG5cdHBlcmNlbnRTdHJpbmc6IGZ1bmN0aW9uIChwbGFjZXMpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXMucmdiKCkucm91bmQodHlwZW9mIHBsYWNlcyA9PT0gJ251bWJlcicgPyBwbGFjZXMgOiAxKTtcblx0XHR2YXIgYXJncyA9IHNlbGYudmFscGhhID09PSAxID8gc2VsZi5jb2xvciA6IHNlbGYuY29sb3IuY29uY2F0KHRoaXMudmFscGhhKTtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcudG8ucmdiLnBlcmNlbnQoYXJncyk7XG5cdH0sXG5cblx0YXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWxwaGEgPT09IDEgPyB0aGlzLmNvbG9yLnNsaWNlKCkgOiB0aGlzLmNvbG9yLmNvbmNhdCh0aGlzLnZhbHBoYSk7XG5cdH0sXG5cblx0b2JqZWN0OiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xuXHRcdHZhciBjaGFubmVscyA9IGNvbnZlcnRbdGhpcy5tb2RlbF0uY2hhbm5lbHM7XG5cdFx0dmFyIGxhYmVscyA9IGNvbnZlcnRbdGhpcy5tb2RlbF0ubGFiZWxzO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjaGFubmVsczsgaSsrKSB7XG5cdFx0XHRyZXN1bHRbbGFiZWxzW2ldXSA9IHRoaXMuY29sb3JbaV07XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMudmFscGhhICE9PSAxKSB7XG5cdFx0XHRyZXN1bHQuYWxwaGEgPSB0aGlzLnZhbHBoYTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXG5cdHVuaXRBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZ2IgPSB0aGlzLnJnYigpLmNvbG9yO1xuXHRcdHJnYlswXSAvPSAyNTU7XG5cdFx0cmdiWzFdIC89IDI1NTtcblx0XHRyZ2JbMl0gLz0gMjU1O1xuXG5cdFx0aWYgKHRoaXMudmFscGhhICE9PSAxKSB7XG5cdFx0XHRyZ2IucHVzaCh0aGlzLnZhbHBoYSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJnYjtcblx0fSxcblxuXHR1bml0T2JqZWN0OiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJnYiA9IHRoaXMucmdiKCkub2JqZWN0KCk7XG5cdFx0cmdiLnIgLz0gMjU1O1xuXHRcdHJnYi5nIC89IDI1NTtcblx0XHRyZ2IuYiAvPSAyNTU7XG5cblx0XHRpZiAodGhpcy52YWxwaGEgIT09IDEpIHtcblx0XHRcdHJnYi5hbHBoYSA9IHRoaXMudmFscGhhO1xuXHRcdH1cblxuXHRcdHJldHVybiByZ2I7XG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uIChwbGFjZXMpIHtcblx0XHRwbGFjZXMgPSBNYXRoLm1heChwbGFjZXMgfHwgMCwgMCk7XG5cdFx0cmV0dXJuIG5ldyBDb2xvcih0aGlzLmNvbG9yLm1hcChyb3VuZFRvUGxhY2UocGxhY2VzKSkuY29uY2F0KHRoaXMudmFscGhhKSwgdGhpcy5tb2RlbCk7XG5cdH0sXG5cblx0YWxwaGE6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIG5ldyBDb2xvcih0aGlzLmNvbG9yLmNvbmNhdChNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2YWwpKSksIHRoaXMubW9kZWwpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnZhbHBoYTtcblx0fSxcblxuXHQvLyByZ2Jcblx0cmVkOiBnZXRzZXQoJ3JnYicsIDAsIG1heGZuKDI1NSkpLFxuXHRncmVlbjogZ2V0c2V0KCdyZ2InLCAxLCBtYXhmbigyNTUpKSxcblx0Ymx1ZTogZ2V0c2V0KCdyZ2InLCAyLCBtYXhmbigyNTUpKSxcblxuXHRodWU6IGdldHNldChbJ2hzbCcsICdoc3YnLCAnaHNsJywgJ2h3YicsICdoY2cnXSwgMCwgZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gKCh2YWwgJSAzNjApICsgMzYwKSAlIDM2MDsgfSksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYnJhY2Utc3R5bGVcblxuXHRzYXR1cmF0aW9ubDogZ2V0c2V0KCdoc2wnLCAxLCBtYXhmbigxMDApKSxcblx0bGlnaHRuZXNzOiBnZXRzZXQoJ2hzbCcsIDIsIG1heGZuKDEwMCkpLFxuXG5cdHNhdHVyYXRpb252OiBnZXRzZXQoJ2hzdicsIDEsIG1heGZuKDEwMCkpLFxuXHR2YWx1ZTogZ2V0c2V0KCdoc3YnLCAyLCBtYXhmbigxMDApKSxcblxuXHRjaHJvbWE6IGdldHNldCgnaGNnJywgMSwgbWF4Zm4oMTAwKSksXG5cdGdyYXk6IGdldHNldCgnaGNnJywgMiwgbWF4Zm4oMTAwKSksXG5cblx0d2hpdGU6IGdldHNldCgnaHdiJywgMSwgbWF4Zm4oMTAwKSksXG5cdHdibGFjazogZ2V0c2V0KCdod2InLCAyLCBtYXhmbigxMDApKSxcblxuXHRjeWFuOiBnZXRzZXQoJ2NteWsnLCAwLCBtYXhmbigxMDApKSxcblx0bWFnZW50YTogZ2V0c2V0KCdjbXlrJywgMSwgbWF4Zm4oMTAwKSksXG5cdHllbGxvdzogZ2V0c2V0KCdjbXlrJywgMiwgbWF4Zm4oMTAwKSksXG5cdGJsYWNrOiBnZXRzZXQoJ2NteWsnLCAzLCBtYXhmbigxMDApKSxcblxuXHR4OiBnZXRzZXQoJ3h5eicsIDAsIG1heGZuKDEwMCkpLFxuXHR5OiBnZXRzZXQoJ3h5eicsIDEsIG1heGZuKDEwMCkpLFxuXHR6OiBnZXRzZXQoJ3h5eicsIDIsIG1heGZuKDEwMCkpLFxuXG5cdGw6IGdldHNldCgnbGFiJywgMCwgbWF4Zm4oMTAwKSksXG5cdGE6IGdldHNldCgnbGFiJywgMSksXG5cdGI6IGdldHNldCgnbGFiJywgMiksXG5cblx0a2V5d29yZDogZnVuY3Rpb24gKHZhbCkge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKHZhbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnZlcnRbdGhpcy5tb2RlbF0ua2V5d29yZCh0aGlzLmNvbG9yKTtcblx0fSxcblxuXHRoZXg6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIG5ldyBDb2xvcih2YWwpO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb2xvclN0cmluZy50by5oZXgodGhpcy5yZ2IoKS5yb3VuZCgpLmNvbG9yKTtcblx0fSxcblxuXHRyZ2JOdW1iZXI6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy5yZ2IoKS5jb2xvcjtcblx0XHRyZXR1cm4gKChyZ2JbMF0gJiAweEZGKSA8PCAxNikgfCAoKHJnYlsxXSAmIDB4RkYpIDw8IDgpIHwgKHJnYlsyXSAmIDB4RkYpO1xuXHR9LFxuXG5cdGx1bWlub3NpdHk6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG5cdFx0dmFyIHJnYiA9IHRoaXMucmdiKCkuY29sb3I7XG5cblx0XHR2YXIgbHVtID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBjaGFuID0gcmdiW2ldIC8gMjU1O1xuXHRcdFx0bHVtW2ldID0gKGNoYW4gPD0gMC4wMzkyOCkgPyBjaGFuIC8gMTIuOTIgOiBNYXRoLnBvdygoKGNoYW4gKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDAuMjEyNiAqIGx1bVswXSArIDAuNzE1MiAqIGx1bVsxXSArIDAuMDcyMiAqIGx1bVsyXTtcblx0fSxcblxuXHRjb250cmFzdDogZnVuY3Rpb24gKGNvbG9yMikge1xuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jY29udHJhc3QtcmF0aW9kZWZcblx0XHR2YXIgbHVtMSA9IHRoaXMubHVtaW5vc2l0eSgpO1xuXHRcdHZhciBsdW0yID0gY29sb3IyLmx1bWlub3NpdHkoKTtcblxuXHRcdGlmIChsdW0xID4gbHVtMikge1xuXHRcdFx0cmV0dXJuIChsdW0xICsgMC4wNSkgLyAobHVtMiArIDAuMDUpO1xuXHRcdH1cblxuXHRcdHJldHVybiAobHVtMiArIDAuMDUpIC8gKGx1bTEgKyAwLjA1KTtcblx0fSxcblxuXHRsZXZlbDogZnVuY3Rpb24gKGNvbG9yMikge1xuXHRcdHZhciBjb250cmFzdFJhdGlvID0gdGhpcy5jb250cmFzdChjb2xvcjIpO1xuXHRcdGlmIChjb250cmFzdFJhdGlvID49IDcuMSkge1xuXHRcdFx0cmV0dXJuICdBQUEnO1xuXHRcdH1cblxuXHRcdHJldHVybiAoY29udHJhc3RSYXRpbyA+PSA0LjUpID8gJ0FBJyA6ICcnO1xuXHR9LFxuXG5cdGlzRGFyazogZnVuY3Rpb24gKCkge1xuXHRcdC8vIFlJUSBlcXVhdGlvbiBmcm9tIGh0dHA6Ly8yNHdheXMub3JnLzIwMTAvY2FsY3VsYXRpbmctY29sb3ItY29udHJhc3Rcblx0XHR2YXIgcmdiID0gdGhpcy5yZ2IoKS5jb2xvcjtcblx0XHR2YXIgeWlxID0gKHJnYlswXSAqIDI5OSArIHJnYlsxXSAqIDU4NyArIHJnYlsyXSAqIDExNCkgLyAxMDAwO1xuXHRcdHJldHVybiB5aXEgPCAxMjg7XG5cdH0sXG5cblx0aXNMaWdodDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAhdGhpcy5pc0RhcmsoKTtcblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy5yZ2IoKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0cmdiLmNvbG9yW2ldID0gMjU1IC0gcmdiLmNvbG9yW2ldO1xuXHRcdH1cblx0XHRyZXR1cm4gcmdiO1xuXHR9LFxuXG5cdGxpZ2h0ZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLmhzbCgpO1xuXHRcdGhzbC5jb2xvclsyXSArPSBoc2wuY29sb3JbMl0gKiByYXRpbztcblx0XHRyZXR1cm4gaHNsO1xuXHR9LFxuXG5cdGRhcmtlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMuaHNsKCk7XG5cdFx0aHNsLmNvbG9yWzJdIC09IGhzbC5jb2xvclsyXSAqIHJhdGlvO1xuXHRcdHJldHVybiBoc2w7XG5cdH0sXG5cblx0c2F0dXJhdGU6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLmhzbCgpO1xuXHRcdGhzbC5jb2xvclsxXSArPSBoc2wuY29sb3JbMV0gKiByYXRpbztcblx0XHRyZXR1cm4gaHNsO1xuXHR9LFxuXG5cdGRlc2F0dXJhdGU6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLmhzbCgpO1xuXHRcdGhzbC5jb2xvclsxXSAtPSBoc2wuY29sb3JbMV0gKiByYXRpbztcblx0XHRyZXR1cm4gaHNsO1xuXHR9LFxuXG5cdHdoaXRlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGh3YiA9IHRoaXMuaHdiKCk7XG5cdFx0aHdiLmNvbG9yWzFdICs9IGh3Yi5jb2xvclsxXSAqIHJhdGlvO1xuXHRcdHJldHVybiBod2I7XG5cdH0sXG5cblx0YmxhY2tlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGh3YiA9IHRoaXMuaHdiKCk7XG5cdFx0aHdiLmNvbG9yWzJdICs9IGh3Yi5jb2xvclsyXSAqIHJhdGlvO1xuXHRcdHJldHVybiBod2I7XG5cdH0sXG5cblx0Z3JheXNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HcmF5c2NhbGUjQ29udmVydGluZ19jb2xvcl90b19ncmF5c2NhbGVcblx0XHR2YXIgcmdiID0gdGhpcy5yZ2IoKS5jb2xvcjtcblx0XHR2YXIgdmFsID0gcmdiWzBdICogMC4zICsgcmdiWzFdICogMC41OSArIHJnYlsyXSAqIDAuMTE7XG5cdFx0cmV0dXJuIENvbG9yLnJnYih2YWwsIHZhbCwgdmFsKTtcblx0fSxcblxuXHRmYWRlOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHRyZXR1cm4gdGhpcy5hbHBoYSh0aGlzLnZhbHBoYSAtICh0aGlzLnZhbHBoYSAqIHJhdGlvKSk7XG5cdH0sXG5cblx0b3BhcXVlcjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWxwaGEodGhpcy52YWxwaGEgKyAodGhpcy52YWxwaGEgKiByYXRpbykpO1xuXHR9LFxuXG5cdHJvdGF0ZTogZnVuY3Rpb24gKGRlZ3JlZXMpIHtcblx0XHR2YXIgaHNsID0gdGhpcy5oc2woKTtcblx0XHR2YXIgaHVlID0gaHNsLmNvbG9yWzBdO1xuXHRcdGh1ZSA9IChodWUgKyBkZWdyZWVzKSAlIDM2MDtcblx0XHRodWUgPSBodWUgPCAwID8gMzYwICsgaHVlIDogaHVlO1xuXHRcdGhzbC5jb2xvclswXSA9IGh1ZTtcblx0XHRyZXR1cm4gaHNsO1xuXHR9LFxuXG5cdG1peDogZnVuY3Rpb24gKG1peGluQ29sb3IsIHdlaWdodCkge1xuXHRcdC8vIHBvcnRlZCBmcm9tIHNhc3MgaW1wbGVtZW50YXRpb24gaW4gQ1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXNzL2xpYnNhc3MvYmxvYi8wZTZiNGEyODUwMDkyMzU2YWEzZWNlMDdjNmIyNDlmMDIyMWNhY2VkL2Z1bmN0aW9ucy5jcHAjTDIwOVxuXHRcdGlmICghbWl4aW5Db2xvciB8fCAhbWl4aW5Db2xvci5yZ2IpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXJndW1lbnQgdG8gXCJtaXhcIiB3YXMgbm90IGEgQ29sb3IgaW5zdGFuY2UsIGJ1dCByYXRoZXIgYW4gaW5zdGFuY2Ugb2YgJyArIHR5cGVvZiBtaXhpbkNvbG9yKTtcblx0XHR9XG5cdFx0dmFyIGNvbG9yMSA9IG1peGluQ29sb3IucmdiKCk7XG5cdFx0dmFyIGNvbG9yMiA9IHRoaXMucmdiKCk7XG5cdFx0dmFyIHAgPSB3ZWlnaHQgPT09IHVuZGVmaW5lZCA/IDAuNSA6IHdlaWdodDtcblxuXHRcdHZhciB3ID0gMiAqIHAgLSAxO1xuXHRcdHZhciBhID0gY29sb3IxLmFscGhhKCkgLSBjb2xvcjIuYWxwaGEoKTtcblxuXHRcdHZhciB3MSA9ICgoKHcgKiBhID09PSAtMSkgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuXHRcdHZhciB3MiA9IDEgLSB3MTtcblxuXHRcdHJldHVybiBDb2xvci5yZ2IoXG5cdFx0XHRcdHcxICogY29sb3IxLnJlZCgpICsgdzIgKiBjb2xvcjIucmVkKCksXG5cdFx0XHRcdHcxICogY29sb3IxLmdyZWVuKCkgKyB3MiAqIGNvbG9yMi5ncmVlbigpLFxuXHRcdFx0XHR3MSAqIGNvbG9yMS5ibHVlKCkgKyB3MiAqIGNvbG9yMi5ibHVlKCksXG5cdFx0XHRcdGNvbG9yMS5hbHBoYSgpICogcCArIGNvbG9yMi5hbHBoYSgpICogKDEgLSBwKSk7XG5cdH1cbn07XG5cbi8vIG1vZGVsIGNvbnZlcnNpb24gbWV0aG9kcyBhbmQgc3RhdGljIGNvbnN0cnVjdG9yc1xuT2JqZWN0LmtleXMoY29udmVydCkuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcblx0aWYgKHNraXBwZWRNb2RlbHMuaW5kZXhPZihtb2RlbCkgIT09IC0xKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIGNoYW5uZWxzID0gY29udmVydFttb2RlbF0uY2hhbm5lbHM7XG5cblx0Ly8gY29udmVyc2lvbiBtZXRob2RzXG5cdENvbG9yLnByb3RvdHlwZVttb2RlbF0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMubW9kZWwgPT09IG1vZGVsKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKHRoaXMpO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKGFyZ3VtZW50cywgbW9kZWwpO1xuXHRcdH1cblxuXHRcdHZhciBuZXdBbHBoYSA9IHR5cGVvZiBhcmd1bWVudHNbY2hhbm5lbHNdID09PSAnbnVtYmVyJyA/IGNoYW5uZWxzIDogdGhpcy52YWxwaGE7XG5cdFx0cmV0dXJuIG5ldyBDb2xvcihhc3NlcnRBcnJheShjb252ZXJ0W3RoaXMubW9kZWxdW21vZGVsXS5yYXcodGhpcy5jb2xvcikpLmNvbmNhdChuZXdBbHBoYSksIG1vZGVsKTtcblx0fTtcblxuXHQvLyAnc3RhdGljJyBjb25zdHJ1Y3Rpb24gbWV0aG9kc1xuXHRDb2xvclttb2RlbF0gPSBmdW5jdGlvbiAoY29sb3IpIHtcblx0XHRpZiAodHlwZW9mIGNvbG9yID09PSAnbnVtYmVyJykge1xuXHRcdFx0Y29sb3IgPSB6ZXJvQXJyYXkoX3NsaWNlLmNhbGwoYXJndW1lbnRzKSwgY2hhbm5lbHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IENvbG9yKGNvbG9yLCBtb2RlbCk7XG5cdH07XG59KTtcblxuZnVuY3Rpb24gcm91bmRUbyhudW0sIHBsYWNlcykge1xuXHRyZXR1cm4gTnVtYmVyKG51bS50b0ZpeGVkKHBsYWNlcykpO1xufVxuXG5mdW5jdGlvbiByb3VuZFRvUGxhY2UocGxhY2VzKSB7XG5cdHJldHVybiBmdW5jdGlvbiAobnVtKSB7XG5cdFx0cmV0dXJuIHJvdW5kVG8obnVtLCBwbGFjZXMpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBnZXRzZXQobW9kZWwsIGNoYW5uZWwsIG1vZGlmaWVyKSB7XG5cdG1vZGVsID0gQXJyYXkuaXNBcnJheShtb2RlbCkgPyBtb2RlbCA6IFttb2RlbF07XG5cblx0bW9kZWwuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuXHRcdChsaW1pdGVyc1ttXSB8fCAobGltaXRlcnNbbV0gPSBbXSkpW2NoYW5uZWxdID0gbW9kaWZpZXI7XG5cdH0pO1xuXG5cdG1vZGVsID0gbW9kZWxbMF07XG5cblx0cmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcblx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdGlmIChtb2RpZmllcikge1xuXHRcdFx0XHR2YWwgPSBtb2RpZmllcih2YWwpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQgPSB0aGlzW21vZGVsXSgpO1xuXHRcdFx0cmVzdWx0LmNvbG9yW2NoYW5uZWxdID0gdmFsO1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRyZXN1bHQgPSB0aGlzW21vZGVsXSgpLmNvbG9yW2NoYW5uZWxdO1xuXHRcdGlmIChtb2RpZmllcikge1xuXHRcdFx0cmVzdWx0ID0gbW9kaWZpZXIocmVzdWx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xufVxuXG5mdW5jdGlvbiBtYXhmbihtYXgpIHtcblx0cmV0dXJuIGZ1bmN0aW9uICh2KSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKG1heCwgdikpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBhc3NlcnRBcnJheSh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbCA6IFt2YWxdO1xufVxuXG5mdW5jdGlvbiB6ZXJvQXJyYXkoYXJyLCBsZW5ndGgpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdGlmICh0eXBlb2YgYXJyW2ldICE9PSAnbnVtYmVyJykge1xuXHRcdFx0YXJyW2ldID0gMDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9yO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqKlxuICogQ29udmVydCBzdHJpbmcgdG8gaGV4IGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGV4dCB0byBoYXNoIGFuZCBjb252ZXJ0IHRvIGhleC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhleChzdHIpIHtcbiAgZm9yIChcbiAgICB2YXIgaSA9IDAsIGhhc2ggPSAwO1xuICAgIGkgPCBzdHIubGVuZ3RoO1xuICAgIGhhc2ggPSBzdHIuY2hhckNvZGVBdChpKyspICsgKChoYXNoIDw8IDUpIC0gaGFzaClcbiAgKTtcblxuICB2YXIgY29sb3IgPSBNYXRoLmZsb29yKFxuICAgIE1hdGguYWJzKFxuICAgICAgKE1hdGguc2luKGhhc2gpICogMTAwMDApICUgMSAqIDE2Nzc3MjE2XG4gICAgKVxuICApLnRvU3RyaW5nKDE2KTtcblxuICByZXR1cm4gJyMnICsgQXJyYXkoNiAtIGNvbG9yLmxlbmd0aCArIDEpLmpvaW4oJzAnKSArIGNvbG9yO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBjb2xvciA9IHJlcXVpcmUoJ2NvbG9yJylcbiAgLCBoZXggPSByZXF1aXJlKCd0ZXh0LWhleCcpO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgY29sb3IgZm9yIGEgZ2l2ZW4gbmFtZS4gQnV0IGJlIHJlYXNvbmFibHkgc21hcnQgYWJvdXQgaXQgYnlcbiAqIHVuZGVyc3RhbmRpbmcgbmFtZSBzcGFjZXMgYW5kIGNvbG9yaW5nIGVhY2ggbmFtZXNwYWNlIGEgYml0IGxpZ2h0ZXIgc28gdGhleVxuICogc3RpbGwgaGF2ZSB0aGUgc2FtZSBiYXNlIGNvbG9yIGFzIHRoZSByb290LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZVxuICogQHBhcmFtIHtzdHJpbmd9IFtkZWxpbWl0ZXJdIFRoZSBkZWxpbWl0ZXJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbG9yXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29sb3JzcGFjZShuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuICB2YXIgc3BsaXQgPSBuYW1lc3BhY2Uuc3BsaXQoZGVsaW1pdGVyIHx8ICc6Jyk7XG4gIHZhciBiYXNlID0gaGV4KHNwbGl0WzBdKTtcblxuICBpZiAoIXNwbGl0Lmxlbmd0aCkgcmV0dXJuIGJhc2U7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzcGxpdC5sZW5ndGggLSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgYmFzZSA9IGNvbG9yKGJhc2UpXG4gICAgLm1peChjb2xvcihoZXgoc3BsaXRbaSArIDFdKSkpXG4gICAgLnNhdHVyYXRlKDEpXG4gICAgLmhleCgpO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59O1xuIiwgInZhciBjb2xvcnNwYWNlID0gcmVxdWlyZSgnY29sb3JzcGFjZScpO1xuXG4vKipcbiAqIFByZWZpeCB0aGUgbWVzc2FnZXMgd2l0aCBhIGNvbG9yZWQgbmFtZXNwYWNlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IG1lc3NhZ2VzIFRoZSBtZXNzYWdlcyBhcnJheSB0aGF0IGlzIGdldHRpbmcgd3JpdHRlbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgZm9yIGRpYWdub3N0aWNzLlxuICogQHJldHVybnMge0FycmF5fSBBbHRlcmVkIG1lc3NhZ2VzIGFycmF5LlxuICogQHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbG9yTmFtZXNwYWNlKGFyZ3MsIG9wdGlvbnMpIHtcbiAgdmFyIG5hbWVzcGFjZSA9IG9wdGlvbnMubmFtZXNwYWNlO1xuXG4gIGlmIChvcHRpb25zLmNvbG9ycyA9PT0gZmFsc2UpIHtcbiAgICBhcmdzWzBdID0gbmFtZXNwYWNlICsnOiAnKyBhcmdzWzBdO1xuICAgIHJldHVybiBhcmdzO1xuICB9XG5cbiAgdmFyIGNvbG9yID0gY29sb3JzcGFjZShuYW1lc3BhY2UpO1xuXG4gIC8vXG4gIC8vIFRoZSBjb25zb2xlIEFQSSBzdXBwb3J0cyBhIHNwZWNpYWwgJWMgZm9ybWF0dGVyIGluIGJyb3dzZXJzLiBUaGlzIGlzIHVzZWRcbiAgLy8gdG8gc3R5bGUgY29uc29sZSBtZXNzYWdlcyB3aXRoIGFueSBDU1Mgc3R5bGluZywgaW4gb3VyIGNhc2Ugd2Ugd2FudCB0b1xuICAvLyB1c2UgY29sb3JpemUgdGhlIG5hbWVzcGFjZSBmb3IgY2xhcml0eS4gQXMgdGhlc2UgYXJlIGZvcm1hdHRlcnMsIGFuZFxuICAvLyB3ZSBuZWVkIHRvIGluamVjdCBvdXIgQ1NTIHN0cmluZyBhcyBzZWNvbmQgbWVzc2FnZXMgYXJndW1lbnQgc28gaXRcbiAgLy8gZ2V0cyBwaWNrZWQgdXAgY29ycmVjdGx5LlxuICAvL1xuICBhcmdzWzBdID0gJyVjJysgbmFtZXNwYWNlICsnOiVjICcrIGFyZ3NbMF07XG4gIGFyZ3Muc3BsaWNlKDEsIDAsICdjb2xvcjonKyBjb2xvciwgJ2NvbG9yOmluaGVyaXQnKTtcblxuICByZXR1cm4gYXJncztcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIG5hbWVzcGFjZSBpcyBhbGxvd2VkIGJ5IHRoZSBnaXZlbiB2YXJpYWJsZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBuYW1lc3BhY2UgdGhhdCBzaG91bGQgYmUgaW5jbHVkZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFyaWFibGUgVmFsdWUgdGhhdCBuZWVkcyB0byBiZSB0ZXN0ZWQuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSW5kaWNhdGlvbiBpZiBuYW1lc3BhY2UgaXMgZW5hYmxlZC5cbiAqIEBwdWJsaWNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmFibGVkKG5hbWUsIHZhcmlhYmxlKSB7XG4gIGlmICghdmFyaWFibGUpIHJldHVybiBmYWxzZTtcblxuICB2YXIgdmFyaWFibGVzID0gdmFyaWFibGUuc3BsaXQoL1tcXHMsXSsvKVxuICAgICwgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCB2YXJpYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXJpYWJsZSA9IHZhcmlhYmxlc1tpXS5yZXBsYWNlKCcqJywgJy4qPycpO1xuXG4gICAgaWYgKCctJyA9PT0gdmFyaWFibGUuY2hhckF0KDApKSB7XG4gICAgICBpZiAoKG5ldyBSZWdFeHAoJ14nKyB2YXJpYWJsZS5zdWJzdHIoMSkgKyckJykpLnRlc3QobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoKG5ldyBSZWdFeHAoJ14nKyB2YXJpYWJsZSArJyQnKSkudGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsICJ2YXIgZW5hYmxlZCA9IHJlcXVpcmUoJ2VuYWJsZWQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IEFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gVGhlIGFkYXB0ZXIgbG9naWMuXG4gKiBAcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhZGFwdGVyKG5hbWVzcGFjZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZW5hYmxlZChuYW1lc3BhY2UsIGZuKCkpO1xuICAgIH0gY2F0Y2ggKGUpIHsgLyogQW55IGZhaWx1cmUgbWVhbnMgdGhhdCB3ZSBmb3VuZCBub3RoaW5nICovIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn1cbiIsICJ2YXIgYWRhcHRlciA9IHJlcXVpcmUoJy4vJyk7XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIHZhbHVlcyBmcm9tIHByb2Nlc3MuZW52LlxuICpcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBwdWJsaWNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhZGFwdGVyKGZ1bmN0aW9uIHN0b3JhZ2UoKSB7XG4gIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKSB8fCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGlhZ25vc3RpY3MnKTtcbn0pO1xuIiwgInZhciBhZGFwdGVyID0gcmVxdWlyZSgnLi8nKTtcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgdmFsdWVzIGZyb20gcHJvY2Vzcy5lbnYuXG4gKlxuICogQHR5cGUge0Z1bmN0aW9ufVxuICogQHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGFkYXB0ZXIoZnVuY3Rpb24gaGFzaCgpIHtcbiAgcmV0dXJuIC8oZGVidWd8ZGlhZ25vc3RpY3MpPShbXiZdKykvaS5leGVjKHdpbmRvdy5sb2NhdGlvbi5oYXNoKVsyXTtcbn0pO1xuIiwgIi8qKlxuICogQW4gaWRpb3QgcHJvb2YgbG9nZ2VyIHRvIGJlIHVzZWQgYXMgZGVmYXVsdC4gV2UndmUgd3JhcHBlZCBpdCBpbiBhIHRyeS9jYXRjaFxuICogc3RhdGVtZW50IHRvIGVuc3VyZSB0aGUgZW52aXJvbm1lbnRzIHdpdGhvdXQgdGhlIGBjb25zb2xlYCBBUEkgZG8gbm90IGNyYXNoXG4gKiBhcyB3ZWxsIGFzIGFuIGFkZGl0aW9uYWwgZml4IGZvciBhbmNpZW50IGJyb3dzZXJzIGxpa2UgSUU4IHdoZXJlIHRoZVxuICogYGNvbnNvbGUubG9nYCBBUEkgZG9lc24ndCBoYXZlIGFuIGBhcHBseWAsIHNvIHdlIG5lZWQgdG8gdXNlIHRoZSBGdW5jdGlvbidzXG4gKiBhcHBseSBmdW5jdGlvbmFsaXR5IHRvIGFwcGx5IHRoZSBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1ldGEgT3B0aW9ucyBvZiB0aGUgbG9nZ2VyLlxuICogQHBhcmFtIHtBcnJheX0gbWVzc2FnZXMgVGhlIGFjdHVhbGwgbWVzc2FnZSB0aGF0IG5lZWRzIHRvIGJlIGxvZ2dlZC5cbiAqIEBwdWJsaWNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0YSwgbWVzc2FnZXMpIHtcbiAgLy9cbiAgLy8gU28geWVhLiBJRTggZG9lc24ndCBoYXZlIGFuIGFwcGx5IHNvIHdlIG5lZWQgYSB3b3JrIGFyb3VuZCB0byBwdWtlIHRoZVxuICAvLyBhcmd1bWVudHMgaW4gcGxhY2UuXG4gIC8vXG4gIHRyeSB7IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBtZXNzYWdlcyk7IH1cbiAgY2F0Y2ggKGUpIHt9XG59XG4iLCAidmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2RpYWdub3N0aWNzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGRpYWdub3N0aWNzIGxvZ2dlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2UgaXQgc2hvdWxkIGVuYWJsZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gVGhlIGxvZ2dlci5cbiAqIEBwdWJsaWNcbiAqL1xudmFyIGRpYWdub3N0aWNzID0gY3JlYXRlKGZ1bmN0aW9uIGRldihuYW1lc3BhY2UsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBvcHRpb25zLnByb2QgPSBmYWxzZTtcbiAgb3B0aW9ucy5kZXYgPSB0cnVlO1xuXG4gIGlmICghZGV2LmVuYWJsZWQobmFtZXNwYWNlKSAmJiAhKG9wdGlvbnMuZm9yY2UgfHwgZGV2LmZvcmNlKSkge1xuICAgIHJldHVybiBkZXYubm9wZShvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBkZXYueWVwKG9wdGlvbnMpO1xufSk7XG5cbi8vXG4vLyBDb25maWd1cmUgdGhlIGxvZ2dlciBmb3IgdGhlIGdpdmVuIGVudmlyb25tZW50LlxuLy9cbmRpYWdub3N0aWNzLm1vZGlmeShyZXF1aXJlKCcuLi9tb2RpZmllcnMvbmFtZXNwYWNlJykpO1xuZGlhZ25vc3RpY3MudXNlKHJlcXVpcmUoJy4uL2FkYXB0ZXJzL2xvY2Fsc3RvcmFnZScpKTtcbmRpYWdub3N0aWNzLnVzZShyZXF1aXJlKCcuLi9hZGFwdGVycy9oYXNoJykpO1xuZGlhZ25vc3RpY3Muc2V0KHJlcXVpcmUoJy4uL2xvZ2dlci9jb25zb2xlJykpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBkaWFnbm9zdGljcyBsb2dnZXIuXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBkaWFnbm9zdGljcztcbiIsICIvL1xuLy8gU2VsZWN0IHRoZSBjb3JyZWN0IGJ1aWxkIHZlcnNpb24gZGVwZW5kaW5nIG9uIHRoZSBlbnZpcm9ubWVudC5cbi8vXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RldmVsb3BtZW50LmpzJyk7XG59XG4iLCAiLyoqXG4gKiB0YWlsLWZpbGUuanM6IFRPRE86IGFkZCBmaWxlIGhlYWRlciBkZXNjcmlwdGlvbi5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKSxcbiAgU3RyaW5nRGVjb2RlciA9IF9yZXF1aXJlLlN0cmluZ0RlY29kZXI7XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJyksXG4gIFN0cmVhbSA9IF9yZXF1aXJlMi5TdHJlYW07XG5cbi8qKlxuICogU2ltcGxlIG5vLW9wIGZ1bmN0aW9uLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8qKlxuICogVE9ETzogYWRkIGZ1bmN0aW9uIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0YWlsLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gaXRlciAtIEl0ZXJhdG9yIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZXZlcnkgbGluZS5cbiogYHRhaWwgLWZgIGEgZmlsZS4gT3B0aW9ucyBtdXN0IGluY2x1ZGUgZmlsZS5cbiAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBpdGVyKSB7XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MoNjQgKiAxMDI0KTtcbiAgdmFyIGRlY29kZSA9IG5ldyBTdHJpbmdEZWNvZGVyKCd1dGY4Jyk7XG4gIHZhciBzdHJlYW0gPSBuZXcgU3RyZWFtKCk7XG4gIHZhciBidWZmID0gJyc7XG4gIHZhciBwb3MgPSAwO1xuICB2YXIgcm93ID0gMDtcbiAgaWYgKG9wdGlvbnMuc3RhcnQgPT09IC0xKSB7XG4gICAgZGVsZXRlIG9wdGlvbnMuc3RhcnQ7XG4gIH1cbiAgc3RyZWFtLnJlYWRhYmxlID0gdHJ1ZTtcbiAgc3RyZWFtLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpO1xuICB9O1xuICBmcy5vcGVuKG9wdGlvbnMuZmlsZSwgJ2ErJywgJzA2NDQnLCBmdW5jdGlvbiAoZXJyLCBmZCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGlmICghaXRlcikge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcihlcnIpO1xuICAgICAgfVxuICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgKGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICBpZiAoc3RyZWFtLmRlc3Ryb3llZCkge1xuICAgICAgICBmcy5jbG9zZShmZCwgbm9vcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcy5yZWFkKGZkLCBidWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGgsIHBvcywgZnVuY3Rpb24gKGVycm9yLCBieXRlcykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoIWl0ZXIpIHtcbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYnl0ZXMpIHtcbiAgICAgICAgICBpZiAoYnVmZikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnQgPT0gbnVsbCB8fCByb3cgPiBvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgICAgICAgIGlmICghaXRlcikge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdsaW5lJywgYnVmZik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlcihudWxsLCBidWZmKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm93Kys7XG4gICAgICAgICAgICBidWZmID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHJlYWQsIDEwMDApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXRhID0gZGVjb2RlLndyaXRlKGJ1ZmZlci5zbGljZSgwLCBieXRlcykpO1xuICAgICAgICBpZiAoIWl0ZXIpIHtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSAoYnVmZiArIGRhdGEpLnNwbGl0KC9cXG4rLyk7XG4gICAgICAgIHZhciBsID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICAgIGlmIChvcHRpb25zLnN0YXJ0ID09IG51bGwgfHwgcm93ID4gb3B0aW9ucy5zdGFydCkge1xuICAgICAgICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdsaW5lJywgZGF0YVtpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpdGVyKG51bGwsIGRhdGFbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByb3crKztcbiAgICAgICAgfVxuICAgICAgICBidWZmID0gZGF0YVtsXTtcbiAgICAgICAgcG9zICs9IGJ5dGVzO1xuICAgICAgICByZXR1cm4gcmVhZCgpO1xuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfSk7XG4gIGlmICghaXRlcikge1xuICAgIHJldHVybiBzdHJlYW07XG4gIH1cbiAgcmV0dXJuIHN0cmVhbS5kZXN0cm95O1xufTsiLCAiLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSxtYXgtc3RhdGVtZW50cyAqL1xuLyoqXG4gKiBmaWxlLmpzOiBUcmFuc3BvcnQgZm9yIG91dHB1dHRpbmcgdG8gYSBsb2NhbCBsb2cgZmlsZS5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfcmVhZE9ubHlFcnJvcihyKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiJyArIHIgKyAnXCIgaXMgcmVhZC1vbmx5Jyk7IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBlKSB7IGlmIChlICYmIChcIm9iamVjdFwiID09IF90eXBlb2YoZSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7IGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkgeyBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZih0KSB7IHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KTsgfSwgX2dldFByb3RvdHlwZU9mKHQpOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHModCwgZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlICYmIG51bGwgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGUgJiYgZS5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHQsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGUgJiYgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YodCwgZSkgeyByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7IHJldHVybiB0Ll9fcHJvdG9fXyA9IGUsIHQ7IH0sIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGFzeW5jU2VyaWVzID0gcmVxdWlyZSgnYXN5bmMvc2VyaWVzJyk7XG52YXIgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIE1FU1NBR0UgPSBfcmVxdWlyZS5NRVNTQUdFO1xudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpLFxuICBTdHJlYW0gPSBfcmVxdWlyZTIuU3RyZWFtLFxuICBQYXNzVGhyb3VnaCA9IF9yZXF1aXJlMi5QYXNzVGhyb3VnaDtcbnZhciBUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnQGRhYmgvZGlhZ25vc3RpY3MnKSgnd2luc3RvbjpmaWxlJyk7XG52YXIgb3MgPSByZXF1aXJlKCdvcycpO1xudmFyIHRhaWxGaWxlID0gcmVxdWlyZSgnLi4vdGFpbC1maWxlJyk7XG5cbi8qKlxuICogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIGEgbG9jYWwgbG9nIGZpbGUuXG4gKiBAdHlwZSB7RmlsZX1cbiAqIEBleHRlbmRzIHtUcmFuc3BvcnRTdHJlYW19XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVHJhbnNwb3J0U3RyZWFtKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIEZpbGUgdHJhbnNwb3J0IG9iamVjdCByZXNwb25zaWJsZSBmb3JcbiAgICogcGVyc2lzdGluZyBsb2cgbWVzc2FnZXMgYW5kIG1ldGFkYXRhIHRvIG9uZSBvciBtb3JlIGZpbGVzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAqL1xuICBmdW5jdGlvbiBGaWxlKCkge1xuICAgIHZhciBfdGhpcztcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbGUpO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBGaWxlLCBbb3B0aW9uc10pO1xuXG4gICAgLy8gRXhwb3NlIHRoZSBuYW1lIG9mIHRoaXMgVHJhbnNwb3J0IG9uIHRoZSBwcm90b3R5cGUuXG4gICAgX3RoaXMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCAnZmlsZSc7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gd2hpY2ggdGhyb3dzIGFuIGBFcnJvcmAgaW4gdGhlIGV2ZW50IHRoYXQgYW55IG9mIHRoZVxuICAgIC8vIHJlc3Qgb2YgdGhlIGFyZ3VtZW50cyBpcyBwcmVzZW50IGluIGBvcHRpb25zYC5cbiAgICBmdW5jdGlvbiB0aHJvd0lmKHRhcmdldCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGFyZ3Muc2xpY2UoMSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAob3B0aW9uc1tuYW1lXSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgXCIuY29uY2F0KG5hbWUsIFwiIGFuZCBcIikuY29uY2F0KHRhcmdldCwgXCIgdG9nZXRoZXJcIikpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTZXR1cCB0aGUgYmFzZSBzdHJlYW0gdGhhdCBhbHdheXMgZ2V0cyBwaXBlZCB0byB0byBoYW5kbGUgYnVmZmVyaW5nLlxuICAgIF90aGlzLl9zdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2goKTtcbiAgICBfdGhpcy5fc3RyZWFtLnNldE1heExpc3RlbmVycygzMCk7XG5cbiAgICAvLyBCaW5kIHRoaXMgY29udGV4dCBmb3IgbGlzdGVuZXIgbWV0aG9kcy5cbiAgICBfdGhpcy5fb25FcnJvciA9IF90aGlzLl9vbkVycm9yLmJpbmQoX3RoaXMpO1xuICAgIGlmIChvcHRpb25zLmZpbGVuYW1lIHx8IG9wdGlvbnMuZGlybmFtZSkge1xuICAgICAgdGhyb3dJZignZmlsZW5hbWUgb3IgZGlybmFtZScsICdzdHJlYW0nKTtcbiAgICAgIF90aGlzLl9iYXNlbmFtZSA9IF90aGlzLmZpbGVuYW1lID0gb3B0aW9ucy5maWxlbmFtZSA/IHBhdGguYmFzZW5hbWUob3B0aW9ucy5maWxlbmFtZSkgOiAnd2luc3Rvbi5sb2cnO1xuICAgICAgX3RoaXMuZGlybmFtZSA9IG9wdGlvbnMuZGlybmFtZSB8fCBwYXRoLmRpcm5hbWUob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucy5vcHRpb25zIHx8IHtcbiAgICAgICAgZmxhZ3M6ICdhJ1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc3RyZWFtKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdvcHRpb25zLnN0cmVhbSB3aWxsIGJlIHJlbW92ZWQgaW4gd2luc3RvbkA0LiBVc2Ugd2luc3Rvbi50cmFuc3BvcnRzLlN0cmVhbScpO1xuICAgICAgdGhyb3dJZignc3RyZWFtJywgJ2ZpbGVuYW1lJywgJ21heHNpemUnKTtcbiAgICAgIF90aGlzLl9kZXN0ID0gX3RoaXMuX3N0cmVhbS5waXBlKF90aGlzLl9zZXR1cFN0cmVhbShvcHRpb25zLnN0cmVhbSkpO1xuICAgICAgX3RoaXMuZGlybmFtZSA9IHBhdGguZGlybmFtZShfdGhpcy5fZGVzdC5wYXRoKTtcbiAgICAgIC8vIFdlIG5lZWQgdG8gbGlzdGVuIGZvciBkcmFpbiBldmVudHMgd2hlbiB3cml0ZSgpIHJldHVybnMgZmFsc2UuIFRoaXNcbiAgICAgIC8vIGNhbiBtYWtlIG5vZGUgbWFkIGF0IHRpbWVzLlxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBsb2cgdG8gZmlsZSB3aXRob3V0IGZpbGVuYW1lIG9yIHN0cmVhbS4nKTtcbiAgICB9XG4gICAgX3RoaXMubWF4c2l6ZSA9IG9wdGlvbnMubWF4c2l6ZSB8fCBudWxsO1xuICAgIF90aGlzLnJvdGF0aW9uRm9ybWF0ID0gb3B0aW9ucy5yb3RhdGlvbkZvcm1hdCB8fCBmYWxzZTtcbiAgICBfdGhpcy56aXBwZWRBcmNoaXZlID0gb3B0aW9ucy56aXBwZWRBcmNoaXZlIHx8IGZhbHNlO1xuICAgIF90aGlzLm1heEZpbGVzID0gb3B0aW9ucy5tYXhGaWxlcyB8fCBudWxsO1xuICAgIF90aGlzLmVvbCA9IHR5cGVvZiBvcHRpb25zLmVvbCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmVvbCA6IG9zLkVPTDtcbiAgICBfdGhpcy50YWlsYWJsZSA9IG9wdGlvbnMudGFpbGFibGUgfHwgZmFsc2U7XG4gICAgX3RoaXMubGF6eSA9IG9wdGlvbnMubGF6eSB8fCBmYWxzZTtcblxuICAgIC8vIEludGVybmFsIHN0YXRlIHZhcmlhYmxlcyByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBmaWxlcyB0aGlzIGluc3RhbmNlXG4gICAgLy8gaGFzIGNyZWF0ZWQgYW5kIHRoZSBjdXJyZW50IHNpemUgKGluIGJ5dGVzKSBvZiB0aGUgY3VycmVudCBsb2dmaWxlLlxuICAgIF90aGlzLl9zaXplID0gMDtcbiAgICBfdGhpcy5fcGVuZGluZ1NpemUgPSAwO1xuICAgIF90aGlzLl9jcmVhdGVkID0gMDtcbiAgICBfdGhpcy5fZHJhaW4gPSBmYWxzZTtcbiAgICBfdGhpcy5fb3BlbmluZyA9IGZhbHNlO1xuICAgIF90aGlzLl9lbmRpbmcgPSBmYWxzZTtcbiAgICBfdGhpcy5fZmlsZUV4aXN0ID0gZmFsc2U7XG4gICAgaWYgKF90aGlzLmRpcm5hbWUpIF90aGlzLl9jcmVhdGVMb2dEaXJJZk5vdEV4aXN0KF90aGlzLmRpcm5hbWUpO1xuICAgIGlmICghX3RoaXMubGF6eSkgX3RoaXMub3BlbigpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoRmlsZSwgX1RyYW5zcG9ydFN0cmVhbSk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRmlsZSwgW3tcbiAgICBrZXk6IFwiZmluaXNoSWZFbmRpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluaXNoSWZFbmRpbmcoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIGlmICh0aGlzLl9lbmRpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX29wZW5pbmcpIHtcbiAgICAgICAgICB0aGlzLm9uY2UoJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIuX3N0cmVhbS5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZW1pdCgnZmluaXNoJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuX3N0cmVhbS5lbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3N0cmVhbS5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmVtaXQoJ2ZpbmlzaCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNldEltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9zdHJlYW0uZW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3JlIGxvZ2dpbmcgbWV0aG9kIGV4cG9zZWQgdG8gV2luc3Rvbi4gTWV0YWRhdGEgaXMgb3B0aW9uYWwuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKGluZm8pIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIC8vIFJlbWFyazogKGpjcnVnenopIFdoYXQgaXMgbmVjZXNzYXJ5IGFib3V0IHRoaXMgY2FsbGJhY2sobnVsbCwgdHJ1ZSkgbm93XG4gICAgICAvLyB3aGVuIHRoaW5raW5nIGFib3V0IDMueD8gU2hvdWxkIHNpbGVudCBiZSBoYW5kbGVkIGluIHRoZSBiYXNlXG4gICAgICAvLyBUcmFuc3BvcnRTdHJlYW0gX3dyaXRlIG1ldGhvZD9cbiAgICAgIGlmICh0aGlzLnNpbGVudCkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gT3V0cHV0IHN0cmVhbSBidWZmZXIgaXMgZnVsbCBhbmQgaGFzIGFza2VkIHVzIHRvIHdhaXQgZm9yIHRoZSBkcmFpbiBldmVudFxuICAgICAgaWYgKHRoaXMuX2RyYWluKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbS5vbmNlKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMuX2RyYWluID0gZmFsc2U7XG4gICAgICAgICAgX3RoaXMzLmxvZyhpbmZvLCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fcm90YXRlKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbS5vbmNlKCdyb3RhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLl9yb3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICBfdGhpczMubG9nKGluZm8sIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmxhenkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maWxlRXhpc3QpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX29wZW5pbmcpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm9uY2UoJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczMuX2ZpbGVFeGlzdCA9IHRydWU7XG4gICAgICAgICAgICBfdGhpczMubG9nKGluZm8sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX25lZWRzTmV3RmlsZSh0aGlzLl9wZW5kaW5nU2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLl9kZXN0Lm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpczMuX29wZW5pbmcpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLm9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzMy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczMubG9nKGluZm8sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEdyYWIgdGhlIHJhdyBzdHJpbmcgYW5kIGFwcGVuZCB0aGUgZXhwZWN0ZWQgRU9MLlxuICAgICAgdmFyIG91dHB1dCA9IFwiXCIuY29uY2F0KGluZm9bTUVTU0FHRV0pLmNvbmNhdCh0aGlzLmVvbCk7XG4gICAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuYnl0ZUxlbmd0aChvdXRwdXQpO1xuXG4gICAgICAvLyBBZnRlciB3ZSBoYXZlIHdyaXR0ZW4gdG8gdGhlIFBhc3NUaHJvdWdoIGNoZWNrIHRvIHNlZSBpZiB3ZSBuZWVkXG4gICAgICAvLyB0byByb3RhdGUgdG8gdGhlIG5leHQgZmlsZS5cbiAgICAgIC8vXG4gICAgICAvLyBSZW1hcms6IFRoaXMgZ2V0cyBjYWxsZWQgdG9vIGVhcmx5IGFuZCBkb2VzIG5vdCBkZXBpY3Qgd2hlbiBkYXRhXG4gICAgICAvLyBoYXMgYmVlbiBhY3R1YWxseSBmbHVzaGVkIHRvIGRpc2suXG4gICAgICBmdW5jdGlvbiBsb2dnZWQoKSB7XG4gICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuICAgICAgICB0aGlzLl9zaXplICs9IGJ5dGVzO1xuICAgICAgICB0aGlzLl9wZW5kaW5nU2l6ZSAtPSBieXRlcztcbiAgICAgICAgZGVidWcoJ2xvZ2dlZCAlcyAlcycsIHRoaXMuX3NpemUsIG91dHB1dCk7XG4gICAgICAgIHRoaXMuZW1pdCgnbG9nZ2VkJywgaW5mbyk7XG5cbiAgICAgICAgLy8gRG8gbm90IGF0dGVtcHQgdG8gcm90YXRlIGZpbGVzIHdoaWxlIHJvdGF0aW5nXG4gICAgICAgIGlmICh0aGlzLl9yb3RhdGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEbyBub3QgYXR0ZW1wdCB0byByb3RhdGUgZmlsZXMgd2hpbGUgb3BlbmluZ1xuICAgICAgICBpZiAodGhpcy5fb3BlbmluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBuZWVkIHRvIGVuZCB0aGUgc3RyZWFtIGFuZCBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAgICBpZiAoIXRoaXMuX25lZWRzTmV3RmlsZSgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxhenkpIHtcbiAgICAgICAgICB0aGlzLl9lbmRTdHJlYW0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXM0LmVtaXQoJ2ZpbGVjbG9zZWQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGhlIGN1cnJlbnQgc3RyZWFtLCBlbnN1cmUgaXQgZmx1c2hlcyBhbmQgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgICAgLy8gVGhpcyBjb3VsZCBwb3RlbnRpYWxseSBiZSBvcHRpbWl6ZWQgdG8gbm90IHJ1biBhIHN0YXQgY2FsbCBidXQgaXRzXG4gICAgICAgIC8vIHRoZSBzYWZlc3Qgd2F5IHNpbmNlIHdlIGFyZSBzdXBwb3J0aW5nIGBtYXhGaWxlc2AuXG4gICAgICAgIHRoaXMuX3JvdGF0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2VuZFN0cmVhbShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC5fcm90YXRlRmlsZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gS2VlcCB0cmFjayBvZiB0aGUgcGVuZGluZyBieXRlcyBiZWluZyB3cml0dGVuIHdoaWxlIGZpbGVzIGFyZSBvcGVuaW5nXG4gICAgICAvLyBpbiBvcmRlciB0byBwcm9wZXJseSByb3RhdGUgdGhlIFBhc3NUaHJvdWdoIHRoaXMuX3N0cmVhbSB3aGVuIHRoZSBmaWxlXG4gICAgICAvLyBldmVudHVhbGx5IGRvZXMgb3Blbi5cbiAgICAgIHRoaXMuX3BlbmRpbmdTaXplICs9IGJ5dGVzO1xuICAgICAgaWYgKHRoaXMuX29wZW5pbmcgJiYgIXRoaXMucm90YXRlZFdoaWxlT3BlbmluZyAmJiB0aGlzLl9uZWVkc05ld0ZpbGUodGhpcy5fc2l6ZSArIHRoaXMuX3BlbmRpbmdTaXplKSkge1xuICAgICAgICB0aGlzLnJvdGF0ZWRXaGlsZU9wZW5pbmcgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHdyaXR0ZW4gPSB0aGlzLl9zdHJlYW0ud3JpdGUob3V0cHV0LCBsb2dnZWQuYmluZCh0aGlzKSk7XG4gICAgICBpZiAoIXdyaXR0ZW4pIHtcbiAgICAgICAgdGhpcy5fZHJhaW4gPSB0cnVlO1xuICAgICAgICB0aGlzLl9zdHJlYW0ub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLl9kcmFpbiA9IGZhbHNlO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgIH1cbiAgICAgIGRlYnVnKCd3cml0dGVuJywgd3JpdHRlbiwgdGhpcy5fZHJhaW4pO1xuICAgICAgdGhpcy5maW5pc2hJZkVuZGluZygpO1xuICAgICAgcmV0dXJuIHdyaXR0ZW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcnkgdGhlIHRyYW5zcG9ydC4gT3B0aW9ucyBvYmplY3QgaXMgb3B0aW9uYWwuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBMb2dnbHktbGlrZSBxdWVyeSBvcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQ29udGludWF0aW9uIHRvIHJlc3BvbmQgdG8gd2hlbiBjb21wbGV0ZS5cbiAgICAgKiBUT0RPOiBSZWZhY3RvciBtZS5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJxdWVyeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBxdWVyeShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IG5vcm1hbGl6ZVF1ZXJ5KG9wdGlvbnMpO1xuICAgICAgdmFyIGZpbGUgPSBwYXRoLmpvaW4odGhpcy5kaXJuYW1lLCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgIHZhciBidWZmID0gJyc7XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgdmFyIHJvdyA9IDA7XG4gICAgICB2YXIgc3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlLCB7XG4gICAgICAgIGVuY29kaW5nOiAndXRmOCdcbiAgICAgIH0pO1xuICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHN0cmVhbS5yZWFkYWJsZSkge1xuICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyLmNvZGUgIT09ICdFTk9FTlQnID8gY2FsbGJhY2soZXJyKSA6IGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBkYXRhID0gKGJ1ZmYgKyBkYXRhKS5zcGxpdCgvXFxuKy8pO1xuICAgICAgICB2YXIgbCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5zdGFydCB8fCByb3cgPj0gb3B0aW9ucy5zdGFydCkge1xuICAgICAgICAgICAgYWRkKGRhdGFbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByb3crKztcbiAgICAgICAgfVxuICAgICAgICBidWZmID0gZGF0YVtsXTtcbiAgICAgIH0pO1xuICAgICAgc3RyZWFtLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGJ1ZmYpIHtcbiAgICAgICAgICBhZGQoYnVmZiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMub3JkZXIgPT09ICdkZXNjJykge1xuICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgIH0pO1xuICAgICAgZnVuY3Rpb24gYWRkKGJ1ZmYsIGF0dGVtcHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgbG9nID0gSlNPTi5wYXJzZShidWZmKTtcbiAgICAgICAgICBpZiAoY2hlY2sobG9nKSkge1xuICAgICAgICAgICAgcHVzaChsb2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmICghYXR0ZW1wdCkge1xuICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwdXNoKGxvZykge1xuICAgICAgICBpZiAob3B0aW9ucy5yb3dzICYmIHJlc3VsdHMubGVuZ3RoID49IG9wdGlvbnMucm93cyAmJiBvcHRpb25zLm9yZGVyICE9PSAnZGVzYycpIHtcbiAgICAgICAgICBpZiAoc3RyZWFtLnJlYWRhYmxlKSB7XG4gICAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZmllbGRzKSB7XG4gICAgICAgICAgbG9nID0gb3B0aW9ucy5maWVsZHMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBsb2dba2V5XTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm9yZGVyID09PSAnZGVzYycpIHtcbiAgICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPj0gb3B0aW9ucy5yb3dzKSB7XG4gICAgICAgICAgICByZXN1bHRzLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMucHVzaChsb2cpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gY2hlY2sobG9nKSB7XG4gICAgICAgIGlmICghbG9nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdHlwZW9mKGxvZykgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aW1lID0gbmV3IERhdGUobG9nLnRpbWVzdGFtcCk7XG4gICAgICAgIGlmIChvcHRpb25zLmZyb20gJiYgdGltZSA8IG9wdGlvbnMuZnJvbSB8fCBvcHRpb25zLnVudGlsICYmIHRpbWUgPiBvcHRpb25zLnVudGlsIHx8IG9wdGlvbnMubGV2ZWwgJiYgb3B0aW9ucy5sZXZlbCAhPT0gbG9nLmxldmVsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbm9ybWFsaXplUXVlcnkob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAvLyBsaW1pdFxuICAgICAgICBvcHRpb25zLnJvd3MgPSBvcHRpb25zLnJvd3MgfHwgb3B0aW9ucy5saW1pdCB8fCAxMDtcblxuICAgICAgICAvLyBzdGFydGluZyByb3cgb2Zmc2V0XG4gICAgICAgIG9wdGlvbnMuc3RhcnQgPSBvcHRpb25zLnN0YXJ0IHx8IDA7XG5cbiAgICAgICAgLy8gbm93XG4gICAgICAgIG9wdGlvbnMudW50aWwgPSBvcHRpb25zLnVudGlsIHx8IG5ldyBEYXRlKCk7XG4gICAgICAgIGlmIChfdHlwZW9mKG9wdGlvbnMudW50aWwpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIG9wdGlvbnMudW50aWwgPSBuZXcgRGF0ZShvcHRpb25zLnVudGlsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vdyAtIDI0XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSB8fCBvcHRpb25zLnVudGlsIC0gMjQgKiA2MCAqIDYwICogMTAwMDtcbiAgICAgICAgaWYgKF90eXBlb2Yob3B0aW9ucy5mcm9tKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBvcHRpb25zLmZyb20gPSBuZXcgRGF0ZShvcHRpb25zLmZyb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gJ2FzYycgb3IgJ2Rlc2MnXG4gICAgICAgIG9wdGlvbnMub3JkZXIgPSBvcHRpb25zLm9yZGVyIHx8ICdkZXNjJztcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxvZyBzdHJlYW0gZm9yIHRoaXMgdHJhbnNwb3J0LiBPcHRpb25zIG9iamVjdCBpcyBvcHRpb25hbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFN0cmVhbSBvcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtTdHJlYW19IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKiBUT0RPOiBSZWZhY3RvciBtZS5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJzdHJlYW1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RyZWFtKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGZpbGUgPSBwYXRoLmpvaW4odGhpcy5kaXJuYW1lLCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgIHZhciBzdHJlYW0gPSBuZXcgU3RyZWFtKCk7XG4gICAgICB2YXIgdGFpbCA9IHtcbiAgICAgICAgZmlsZTogZmlsZSxcbiAgICAgICAgc3RhcnQ6IG9wdGlvbnMuc3RhcnRcbiAgICAgIH07XG4gICAgICBzdHJlYW0uZGVzdHJveSA9IHRhaWxGaWxlKHRhaWwsIGZ1bmN0aW9uIChlcnIsIGxpbmUpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBsaW5lKTtcbiAgICAgICAgICBsaW5lID0gSlNPTi5wYXJzZShsaW5lKTtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgnbG9nJywgbGluZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0byBzZWUgdGhlIGZpbGVzaXplIG9mLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwib3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG4gICAgICAvLyBJZiB3ZSBkbyBub3QgaGF2ZSBhIGZpbGVuYW1lIHRoZW4gd2Ugd2VyZSBwYXNzZWQgYSBzdHJlYW0gYW5kXG4gICAgICAvLyBkb24ndCBuZWVkIHRvIGtlZXAgdHJhY2sgb2Ygc2l6ZS5cbiAgICAgIGlmICghdGhpcy5maWxlbmFtZSkgcmV0dXJuO1xuICAgICAgaWYgKHRoaXMuX29wZW5pbmcpIHJldHVybjtcbiAgICAgIHRoaXMuX29wZW5pbmcgPSB0cnVlO1xuXG4gICAgICAvLyBTdGF0IHRoZSB0YXJnZXQgZmlsZSB0byBnZXQgdGhlIHNpemUgYW5kIGNyZWF0ZSB0aGUgc3RyZWFtLlxuICAgICAgdGhpcy5zdGF0KGZ1bmN0aW9uIChlcnIsIHNpemUpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBfdGhpczUuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnKCdzdGF0IGRvbmU6ICVzIHsgc2l6ZTogJXMgfScsIF90aGlzNS5maWxlbmFtZSwgc2l6ZSk7XG4gICAgICAgIF90aGlzNS5fc2l6ZSA9IHNpemU7XG4gICAgICAgIF90aGlzNS5fZGVzdCA9IF90aGlzNS5fY3JlYXRlU3RyZWFtKF90aGlzNS5fc3RyZWFtKTtcbiAgICAgICAgX3RoaXM1Ll9vcGVuaW5nID0gZmFsc2U7XG4gICAgICAgIF90aGlzNS5vbmNlKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghX3RoaXM1Ll9zdHJlYW0uZW1pdCgncm90YXRlJykpIHtcbiAgICAgICAgICAgIF90aGlzNS5fcm90YXRlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXQgdGhlIGZpbGUgYW5kIGFzc2VzcyBpbmZvcm1hdGlvbiBpbiBvcmRlciB0byBjcmVhdGUgdGhlIHByb3BlciBzdHJlYW0uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJzdGF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXQoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX2dldEZpbGUoKTtcbiAgICAgIHZhciBmdWxscGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUsIHRhcmdldCk7XG4gICAgICBmcy5zdGF0KGZ1bGxwYXRoLCBmdW5jdGlvbiAoZXJyLCBzdGF0KSB7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICAgICAgZGVidWcoJ0VOT0VOVFx1MDBBMG9rJywgZnVsbHBhdGgpO1xuICAgICAgICAgIC8vIFVwZGF0ZSBpbnRlcm5hbGx5IHRyYWNrZWQgZmlsZW5hbWUgd2l0aCB0aGUgbmV3IHRhcmdldCBuYW1lLlxuICAgICAgICAgIF90aGlzNi5maWxlbmFtZSA9IHRhcmdldDtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGRlYnVnKFwiZXJyIFwiLmNvbmNhdChlcnIuY29kZSwgXCIgXCIpLmNvbmNhdChmdWxscGF0aCkpO1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3RhdCB8fCBfdGhpczYuX25lZWRzTmV3RmlsZShzdGF0LnNpemUpKSB7XG4gICAgICAgICAgLy8gSWYgYHN0YXRzLnNpemVgIGlzIGdyZWF0ZXIgdGhhbiB0aGUgYG1heHNpemVgIGZvciB0aGlzXG4gICAgICAgICAgLy8gaW5zdGFuY2UgdGhlbiB0cnkgYWdhaW4uXG4gICAgICAgICAgcmV0dXJuIF90aGlzNi5faW5jRmlsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM2LnN0YXQoY2FsbGJhY2spO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT25jZSB3ZSBoYXZlIGZpZ3VyZWQgb3V0IHdoYXQgdGhlIGZpbGVuYW1lIGlzLCBzZXQgaXRcbiAgICAgICAgLy8gYW5kIHJldHVybiB0aGUgc2l6ZS5cbiAgICAgICAgX3RoaXM2LmZpbGVuYW1lID0gdGFyZ2V0O1xuICAgICAgICBjYWxsYmFjayhudWxsLCBzdGF0LnNpemUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBzdHJlYW0gYXNzb2NpYXRlZCB3aXRoIHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJjbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZShjYikge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG4gICAgICBpZiAoIXRoaXMuX3N0cmVhbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9zdHJlYW0uZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgY2IoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBfdGhpczcuZW1pdCgnZmx1c2gnKTtcbiAgICAgICAgX3RoaXM3LmVtaXQoJ2Nsb3NlZCcpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVE9ETzogYWRkIG1ldGhvZCBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9uZWVkc05ld0ZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX25lZWRzTmV3RmlsZShzaXplKSB7XG4gICAgICBzaXplID0gc2l6ZSB8fCB0aGlzLl9zaXplO1xuICAgICAgcmV0dXJuIHRoaXMubWF4c2l6ZSAmJiBzaXplID49IHRoaXMubWF4c2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUT0RPOiBhZGQgbWV0aG9kIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVyciAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9vbkVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkVycm9yKGVycikge1xuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVE9ETzogYWRkIG1ldGhvZCBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9zZXR1cFN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXBTdHJlYW0oc3RyZWFtKSB7XG4gICAgICBzdHJlYW0ub24oJ2Vycm9yJywgdGhpcy5fb25FcnJvcik7XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRPRE86IGFkZCBtZXRob2QgZGVzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbSAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfY2xlYW51cFN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2xlYW51cFN0cmVhbShzdHJlYW0pIHtcbiAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9vbkVycm9yKTtcbiAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRPRE86IGFkZCBtZXRob2QgZGVzY3JpcHRpb24uXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX3JvdGF0ZUZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JvdGF0ZUZpbGUoKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcbiAgICAgIHRoaXMuX2luY0ZpbGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM4Lm9wZW4oKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVucGlwZSBmcm9tIHRoZSBzdHJlYW0gdGhhdCBoYXMgYmVlbiBtYXJrZWQgYXMgZnVsbCBhbmQgZW5kIGl0IHNvIGl0XG4gICAgICogZmx1c2hlcyB0byBkaXNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBDYWxsYmFjayBmb3Igd2hlbiB0aGUgY3VycmVudCBmaWxlIGhhcyBjbG9zZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfZW5kU3RyZWFtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbmRTdHJlYW0oKSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZnVuY3Rpb24gKCkge307XG4gICAgICBpZiAodGhpcy5fZGVzdCkge1xuICAgICAgICB0aGlzLl9zdHJlYW0udW5waXBlKHRoaXMuX2Rlc3QpO1xuICAgICAgICB0aGlzLl9kZXN0LmVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM5Ll9jbGVhbnVwU3RyZWFtKF90aGlzOS5fZGVzdCk7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFdyaXRhYmxlU3RyZWFtIGZvciB0aGUgYWN0aXZlIGZpbGUgb24gdGhpcyBpbnN0YW5jZS4gSWYgd2VcbiAgICAgKiBzaG91bGQgZ3ppcCB0aGUgZmlsZSB0aGVuIGEgemxpYiBzdHJlYW0gaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWRhYmxlU3RyZWFtfSBzb3VyY2UgXHUyMDEzUGFzc1Rocm91Z2ggdG8gcGlwZSB0byB0aGUgZmlsZSB3aGVuIG9wZW4uXG4gICAgICogQHJldHVybnMge1dyaXRhYmxlU3RyZWFtfSBTdHJlYW0gdGhhdCB3cml0ZXMgdG8gZGlzayBmb3IgdGhlIGFjdGl2ZSBmaWxlLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9jcmVhdGVTdHJlYW1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZVN0cmVhbShzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcbiAgICAgIHZhciBmdWxscGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUsIHRoaXMuZmlsZW5hbWUpO1xuICAgICAgZGVidWcoJ2NyZWF0ZSBzdHJlYW0gc3RhcnQnLCBmdWxscGF0aCwgdGhpcy5vcHRpb25zKTtcbiAgICAgIHZhciBkZXN0ID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZnVsbHBhdGgsIHRoaXMub3B0aW9ucylcbiAgICAgIC8vIFRPRE86IFdoYXQgc2hvdWxkIHdlIGRvIHdpdGggZXJyb3JzIGhlcmU/XG4gICAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gZGVidWcoZXJyKTtcbiAgICAgIH0pLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRlYnVnKCdjbG9zZScsIGRlc3QucGF0aCwgZGVzdC5ieXRlc1dyaXR0ZW4pO1xuICAgICAgfSkub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKCdmaWxlIG9wZW4gb2snLCBmdWxscGF0aCk7XG4gICAgICAgIF90aGlzMTAuZW1pdCgnb3BlbicsIGZ1bGxwYXRoKTtcbiAgICAgICAgc291cmNlLnBpcGUoZGVzdCk7XG5cbiAgICAgICAgLy8gSWYgcm90YXRpb24gb2NjdXJlZCBkdXJpbmcgdGhlIG9wZW4gb3BlcmF0aW9uIHRoZW4gd2UgaW1tZWRpYXRlbHlcbiAgICAgICAgLy8gc3RhcnQgd3JpdGluZyB0byBhIG5ldyBQYXNzVGhyb3VnaCwgYmVnaW4gb3BlbmluZyB0aGUgbmV4dCBmaWxlXG4gICAgICAgIC8vIGFuZCBjbGVhbnVwIHRoZSBwcmV2aW91cyBzb3VyY2UgYW5kIGRlc3Qgb25jZSB0aGUgc291cmNlIGhhcyBkcmFpbmVkLlxuICAgICAgICBpZiAoX3RoaXMxMC5yb3RhdGVkV2hpbGVPcGVuaW5nKSB7XG4gICAgICAgICAgX3RoaXMxMC5fc3RyZWFtID0gbmV3IFBhc3NUaHJvdWdoKCk7XG4gICAgICAgICAgX3RoaXMxMC5fc3RyZWFtLnNldE1heExpc3RlbmVycygzMCk7XG4gICAgICAgICAgX3RoaXMxMC5fcm90YXRlRmlsZSgpO1xuICAgICAgICAgIF90aGlzMTAucm90YXRlZFdoaWxlT3BlbmluZyA9IGZhbHNlO1xuICAgICAgICAgIF90aGlzMTAuX2NsZWFudXBTdHJlYW0oZGVzdCk7XG4gICAgICAgICAgc291cmNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGRlYnVnKCdjcmVhdGUgc3RyZWFtIG9rJywgZnVsbHBhdGgpO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVE9ETzogYWRkIG1ldGhvZCBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9pbmNGaWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbmNGaWxlKGNhbGxiYWNrKSB7XG4gICAgICBkZWJ1ZygnX2luY0ZpbGUnLCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgIHZhciBleHQgPSBwYXRoLmV4dG5hbWUodGhpcy5fYmFzZW5hbWUpO1xuICAgICAgdmFyIGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZSh0aGlzLl9iYXNlbmFtZSwgZXh0KTtcbiAgICAgIHZhciB0YXNrcyA9IFtdO1xuICAgICAgaWYgKHRoaXMuemlwcGVkQXJjaGl2ZSkge1xuICAgICAgICB0YXNrcy5wdXNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIHZhciBudW0gPSB0aGlzLl9jcmVhdGVkID4gMCAmJiAhdGhpcy50YWlsYWJsZSA/IHRoaXMuX2NyZWF0ZWQgOiAnJztcbiAgICAgICAgICB0aGlzLl9jb21wcmVzc0ZpbGUocGF0aC5qb2luKHRoaXMuZGlybmFtZSwgXCJcIi5jb25jYXQoYmFzZW5hbWUpLmNvbmNhdChudW0pLmNvbmNhdChleHQpKSwgcGF0aC5qb2luKHRoaXMuZGlybmFtZSwgXCJcIi5jb25jYXQoYmFzZW5hbWUpLmNvbmNhdChudW0pLmNvbmNhdChleHQsIFwiLmd6XCIpKSwgY2IpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgfVxuICAgICAgdGFza3MucHVzaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRhaWxhYmxlKSB7XG4gICAgICAgICAgdGhpcy5fY3JlYXRlZCArPSAxO1xuICAgICAgICAgIHRoaXMuX2NoZWNrTWF4RmlsZXNJbmNyZW1lbnRpbmcoZXh0LCBiYXNlbmFtZSwgY2IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2NoZWNrTWF4RmlsZXNUYWlsYWJsZShleHQsIGJhc2VuYW1lLCBjYik7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICBhc3luY1Nlcmllcyh0YXNrcywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgZmlsZW5hbWUgdG8gdXNlIGZvciB0aGlzIGluc3RhbmNlIGluIHRoZSBjYXNlIHRoYXQgbG9nXG4gICAgICogZmlsZXNpemVzIGFyZSBiZWluZyBjYXBwZWQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldEZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEZpbGUoKSB7XG4gICAgICB2YXIgZXh0ID0gcGF0aC5leHRuYW1lKHRoaXMuX2Jhc2VuYW1lKTtcbiAgICAgIHZhciBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUodGhpcy5fYmFzZW5hbWUsIGV4dCk7XG4gICAgICB2YXIgaXNSb3RhdGlvbiA9IHRoaXMucm90YXRpb25Gb3JtYXQgPyB0aGlzLnJvdGF0aW9uRm9ybWF0KCkgOiB0aGlzLl9jcmVhdGVkO1xuXG4gICAgICAvLyBDYXZlYXQgZW1wdG9yIChpbmRleHplcm8pOiByb3RhdGlvbkZvcm1hdCgpIHdhcyBicm9rZW4gYnkgZGVzaWduIFdoZW5cbiAgICAgIC8vIGNvbWJpbmVkIHdpdGggbWF4IGZpbGVzIGJlY2F1c2UgdGhlIHNldCBvZiBmaWxlcyB0byB1bmxpbmsgaXMgbmV2ZXJcbiAgICAgIC8vIHN0b3JlZC5cbiAgICAgIHJldHVybiAhdGhpcy50YWlsYWJsZSAmJiB0aGlzLl9jcmVhdGVkID8gXCJcIi5jb25jYXQoYmFzZW5hbWUpLmNvbmNhdChpc1JvdGF0aW9uKS5jb25jYXQoZXh0KSA6IFwiXCIuY29uY2F0KGJhc2VuYW1lKS5jb25jYXQoZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmNyZW1lbnQgdGhlIG51bWJlciBvZiBmaWxlcyBjcmVhdGVkIG9yIGNoZWNrZWQgYnkgdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBleHQgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHttaXhlZH0gYmFzZW5hbWUgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHttaXhlZH0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9jaGVja01heEZpbGVzSW5jcmVtZW50aW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja01heEZpbGVzSW5jcmVtZW50aW5nKGV4dCwgYmFzZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBDaGVjayBmb3IgbWF4RmlsZXMgb3B0aW9uIGFuZCBkZWxldGUgZmlsZS5cbiAgICAgIGlmICghdGhpcy5tYXhGaWxlcyB8fCB0aGlzLl9jcmVhdGVkIDwgdGhpcy5tYXhGaWxlcykge1xuICAgICAgICByZXR1cm4gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIHZhciBvbGRlc3QgPSB0aGlzLl9jcmVhdGVkIC0gdGhpcy5tYXhGaWxlcztcbiAgICAgIHZhciBpc09sZGVzdCA9IG9sZGVzdCAhPT0gMCA/IG9sZGVzdCA6ICcnO1xuICAgICAgdmFyIGlzWmlwcGVkID0gdGhpcy56aXBwZWRBcmNoaXZlID8gJy5neicgOiAnJztcbiAgICAgIHZhciBmaWxlUGF0aCA9IFwiXCIuY29uY2F0KGJhc2VuYW1lKS5jb25jYXQoaXNPbGRlc3QpLmNvbmNhdChleHQpLmNvbmNhdChpc1ppcHBlZCk7XG4gICAgICB2YXIgdGFyZ2V0ID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSwgZmlsZVBhdGgpO1xuICAgICAgZnMudW5saW5rKHRhcmdldCwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJvbGwgZmlsZXMgZm9yd2FyZCBiYXNlZCBvbiBpbnRlZ2VyLCB1cCB0byBtYXhGaWxlcy4gZS5nLiBpZiBiYXNlIGlmXG4gICAgICogZmlsZS5sb2cgYW5kIGl0IGJlY29tZXMgb3ZlcnNpemVkLCByb2xsIHRvIGZpbGUxLmxvZywgYW5kIGFsbG93IGZpbGUubG9nXG4gICAgICogdG8gYmUgcmUtdXNlZC4gSWYgZmlsZSBpcyBvdmVyc2l6ZWQgYWdhaW4sIHJvbGwgZmlsZTEubG9nIHRvIGZpbGUyLmxvZyxcbiAgICAgKiByb2xsIGZpbGUubG9nIHRvIGZpbGUxLmxvZywgYW5kIHNvIG9uLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGV4dCAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBiYXNlbmFtZSAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2NoZWNrTWF4RmlsZXNUYWlsYWJsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2hlY2tNYXhGaWxlc1RhaWxhYmxlKGV4dCwgYmFzZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7XG4gICAgICB2YXIgdGFza3MgPSBbXTtcbiAgICAgIGlmICghdGhpcy5tYXhGaWxlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnN0IGlzWmlwcGVkID0gdGhpcy56aXBwZWRBcmNoaXZlID8gJy5neicgOiAnJztcbiAgICAgIHZhciBpc1ppcHBlZCA9IHRoaXMuemlwcGVkQXJjaGl2ZSA/ICcuZ3onIDogJyc7XG4gICAgICBmb3IgKHZhciB4ID0gdGhpcy5tYXhGaWxlcyAtIDE7IHggPiAxOyB4LS0pIHtcbiAgICAgICAgdGFza3MucHVzaChmdW5jdGlvbiAoaSwgY2IpIHtcbiAgICAgICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG4gICAgICAgICAgdmFyIGZpbGVOYW1lID0gXCJcIi5jb25jYXQoYmFzZW5hbWUpLmNvbmNhdChpIC0gMSkuY29uY2F0KGV4dCkuY29uY2F0KGlzWmlwcGVkKTtcbiAgICAgICAgICB2YXIgdG1wcGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUsIGZpbGVOYW1lKTtcbiAgICAgICAgICBmcy5leGlzdHModG1wcGF0aCwgZnVuY3Rpb24gKGV4aXN0cykge1xuICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNiKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsZU5hbWUgPSBcIlwiLmNvbmNhdChiYXNlbmFtZSkuY29uY2F0KGkpLmNvbmNhdChleHQpLmNvbmNhdChpc1ppcHBlZCk7XG4gICAgICAgICAgICBmcy5yZW5hbWUodG1wcGF0aCwgcGF0aC5qb2luKF90aGlzMTEuZGlybmFtZSwgZmlsZU5hbWUpLCBjYik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0uYmluZCh0aGlzLCB4KSk7XG4gICAgICB9XG4gICAgICBhc3luY1Nlcmllcyh0YXNrcywgZnVuY3Rpb24gKCkge1xuICAgICAgICBmcy5yZW5hbWUocGF0aC5qb2luKF90aGlzMTIuZGlybmFtZSwgXCJcIi5jb25jYXQoYmFzZW5hbWUpLmNvbmNhdChleHQpLmNvbmNhdChpc1ppcHBlZCkpLCBwYXRoLmpvaW4oX3RoaXMxMi5kaXJuYW1lLCBcIlwiLmNvbmNhdChiYXNlbmFtZSwgXCIxXCIpLmNvbmNhdChleHQpLmNvbmNhdChpc1ppcHBlZCkpLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wcmVzc2VzIHNyYyB0byBkZXN0IHdpdGggZ3ppcCBhbmQgdW5saW5rcyBzcmNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjIC0gcGF0aCB0byBzb3VyY2UgZmlsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGVzdCAtIHBhdGggdG8gemlwcGVkIGRlc3RpbmF0aW9uIGZpbGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBjYWxsYmFjayBjYWxsZWQgYWZ0ZXIgZmlsZSBoYXMgYmVlbiBjb21wcmVzc2VkLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfY29tcHJlc3NGaWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jb21wcmVzc0ZpbGUoc3JjLCBkZXN0LCBjYWxsYmFjaykge1xuICAgICAgZnMuYWNjZXNzKHNyYywgZnMuRl9PSywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGd6aXAgPSB6bGliLmNyZWF0ZUd6aXAoKTtcbiAgICAgICAgdmFyIGlucCA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oc3JjKTtcbiAgICAgICAgdmFyIG91dCA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKGRlc3QpO1xuICAgICAgICBvdXQub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmcy51bmxpbmsoc3JjLCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbnAucGlwZShnemlwKS5waXBlKG91dCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2NyZWF0ZUxvZ0RpcklmTm90RXhpc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUxvZ0RpcklmTm90RXhpc3QoZGlyUGF0aCkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc3luYyAqL1xuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGRpclBhdGgpKSB7XG4gICAgICAgIGZzLm1rZGlyU3luYyhkaXJQYXRoLCB7XG4gICAgICAgICAgcmVjdXJzaXZlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zeW5jICovXG4gICAgfVxuICB9XSk7XG59KFRyYW5zcG9ydFN0cmVhbSk7IiwgIi8qKlxuICogaHR0cC5qczogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIGEganNvbi1ycGNzZXJ2ZXIuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSwgciwgdCkgeyByZXR1cm4gKHIgPSBfdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7IHZhbHVlOiB0LCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pIDogZVtyXSA9IHQsIGU7IH1cbmZ1bmN0aW9uIF9yZWFkT25seUVycm9yKHIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignXCInICsgciArICdcIiBpcyByZWFkLW9ubHknKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKSxcbiAgU3RyZWFtID0gX3JlcXVpcmUuU3RyZWFtO1xudmFyIFRyYW5zcG9ydFN0cmVhbSA9IHJlcXVpcmUoJ3dpbnN0b24tdHJhbnNwb3J0Jyk7XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnc2FmZS1zdGFibGUtc3RyaW5naWZ5JyksXG4gIGNvbmZpZ3VyZSA9IF9yZXF1aXJlMi5jb25maWd1cmU7XG5cbi8qKlxuICogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIGEganNvbi1ycGMgc2VydmVyLlxuICogQHR5cGUge1N0cmVhbX1cbiAqIEBleHRlbmRzIHtUcmFuc3BvcnRTdHJlYW19XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVHJhbnNwb3J0U3RyZWFtKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIEh0dHAgdHJhbnNwb3J0IG9iamVjdCByZXNwb25zaWJsZSBmb3JcbiAgICogcGVyc2lzdGluZyBsb2cgbWVzc2FnZXMgYW5kIG1ldGFkYXRhIHRvIGEgdGVybWluYWwgb3IgVFRZLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgZnVuY3Rpb24gSHR0cCgpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIdHRwKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgSHR0cCwgW29wdGlvbnNdKTtcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBfdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lIHx8ICdodHRwJztcbiAgICBfdGhpcy5zc2wgPSAhIW9wdGlvbnMuc3NsO1xuICAgIF90aGlzLmhvc3QgPSBvcHRpb25zLmhvc3QgfHwgJ2xvY2FsaG9zdCc7XG4gICAgX3RoaXMucG9ydCA9IG9wdGlvbnMucG9ydDtcbiAgICBfdGhpcy5hdXRoID0gb3B0aW9ucy5hdXRoO1xuICAgIF90aGlzLnBhdGggPSBvcHRpb25zLnBhdGggfHwgJyc7XG4gICAgX3RoaXMubWF4aW11bURlcHRoID0gb3B0aW9ucy5tYXhpbXVtRGVwdGg7XG4gICAgX3RoaXMuYWdlbnQgPSBvcHRpb25zLmFnZW50O1xuICAgIF90aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307XG4gICAgX3RoaXMuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgX3RoaXMuYmF0Y2ggPSBvcHRpb25zLmJhdGNoIHx8IGZhbHNlO1xuICAgIF90aGlzLmJhdGNoSW50ZXJ2YWwgPSBvcHRpb25zLmJhdGNoSW50ZXJ2YWwgfHwgNTAwMDtcbiAgICBfdGhpcy5iYXRjaENvdW50ID0gb3B0aW9ucy5iYXRjaENvdW50IHx8IDEwO1xuICAgIF90aGlzLmJhdGNoT3B0aW9ucyA9IFtdO1xuICAgIF90aGlzLmJhdGNoVGltZW91dElEID0gLTE7XG4gICAgX3RoaXMuYmF0Y2hDYWxsYmFjayA9IHt9O1xuICAgIGlmICghX3RoaXMucG9ydCkge1xuICAgICAgX3RoaXMucG9ydCA9IF90aGlzLnNzbCA/IDQ0MyA6IDgwO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBsb2dnaW5nIG1ldGhvZCBleHBvc2VkIHRvIFdpbnN0b24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIF9pbmhlcml0cyhIdHRwLCBfVHJhbnNwb3J0U3RyZWFtKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhIdHRwLCBbe1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKGluZm8sIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHRoaXMuX3JlcXVlc3QoaW5mbywgbnVsbCwgbnVsbCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLnN0YXR1c0NvZGUgIT09IDIwMCkge1xuICAgICAgICAgIGVyciA9IG5ldyBFcnJvcihcIkludmFsaWQgSFRUUCBTdGF0dXMgQ29kZTogXCIuY29uY2F0KHJlcy5zdGF0dXNDb2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIF90aGlzMi5lbWl0KCd3YXJuJywgZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczIuZW1pdCgnbG9nZ2VkJywgaW5mbyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1hcms6IChqY3J1Z3p6KSBGaXJlIGFuZCBmb3JnZXQgaGVyZSBzbyByZXF1ZXN0cyBkb250IGNhdXNlIGJ1ZmZlcmluZ1xuICAgICAgLy8gYW5kIGJsb2NrIG1vcmUgcmVxdWVzdHMgZnJvbSBoYXBwZW5pbmc/XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBRdWVyeSB0aGUgdHJhbnNwb3J0LiBPcHRpb25zIG9iamVjdCBpcyBvcHRpb25hbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtICBMb2dnbHktbGlrZSBxdWVyeSBvcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQ29udGludWF0aW9uIHRvIHJlc3BvbmQgdG8gd2hlbiBjb21wbGV0ZS5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInF1ZXJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHF1ZXJ5KG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6ICdxdWVyeScsXG4gICAgICAgIHBhcmFtczogdGhpcy5ub3JtYWxpemVRdWVyeShvcHRpb25zKVxuICAgICAgfTtcbiAgICAgIHZhciBhdXRoID0gb3B0aW9ucy5wYXJhbXMuYXV0aCB8fCBudWxsO1xuICAgICAgZGVsZXRlIG9wdGlvbnMucGFyYW1zLmF1dGg7XG4gICAgICB2YXIgcGF0aCA9IG9wdGlvbnMucGFyYW1zLnBhdGggfHwgbnVsbDtcbiAgICAgIGRlbGV0ZSBvcHRpb25zLnBhcmFtcy5wYXRoO1xuICAgICAgdGhpcy5fcmVxdWVzdChvcHRpb25zLCBhdXRoLCBwYXRoLCBmdW5jdGlvbiAoZXJyLCByZXMsIGJvZHkpIHtcbiAgICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgICAgZXJyID0gbmV3IEVycm9yKFwiSW52YWxpZCBIVFRQIFN0YXR1cyBDb2RlOiBcIi5jb25jYXQocmVzLnN0YXR1c0NvZGUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGJvZHkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxvZyBzdHJlYW0gZm9yIHRoaXMgdHJhbnNwb3J0LiBPcHRpb25zIG9iamVjdCBpcyBvcHRpb25hbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFN0cmVhbSBvcHRpb25zIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtTdHJlYW19IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvblxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdHJlYW0oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgc3RyZWFtID0gbmV3IFN0cmVhbSgpO1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnc3RyZWFtJyxcbiAgICAgICAgcGFyYW1zOiBvcHRpb25zXG4gICAgICB9O1xuICAgICAgdmFyIHBhdGggPSBvcHRpb25zLnBhcmFtcy5wYXRoIHx8IG51bGw7XG4gICAgICBkZWxldGUgb3B0aW9ucy5wYXJhbXMucGF0aDtcbiAgICAgIHZhciBhdXRoID0gb3B0aW9ucy5wYXJhbXMuYXV0aCB8fCBudWxsO1xuICAgICAgZGVsZXRlIG9wdGlvbnMucGFyYW1zLmF1dGg7XG4gICAgICB2YXIgYnVmZiA9ICcnO1xuICAgICAgdmFyIHJlcSA9IHRoaXMuX3JlcXVlc3Qob3B0aW9ucywgYXV0aCwgcGF0aCk7XG4gICAgICBzdHJlYW0uZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcS5kZXN0cm95KCk7XG4gICAgICB9O1xuICAgICAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgZGF0YSA9IChidWZmICsgZGF0YSkuc3BsaXQoL1xcbisvKTtcbiAgICAgICAgdmFyIGwgPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2xvZycsIEpTT04ucGFyc2UoZGF0YVtpXSkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBidWZmID0gZGF0YVtsXTtcbiAgICAgIH0pO1xuICAgICAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZSBhIHJlcXVlc3QgdG8gYSB3aW5zdG9uZCBzZXJ2ZXIgb3IgYW55IGh0dHAgc2VydmVyIHdoaWNoIGNhblxuICAgICAqIGhhbmRsZSBqc29uLXJwYy5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zIC0gT3B0aW9ucyB0byBzZW50IHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0P30gYXV0aCAtIGF1dGhlbnRpY2F0aW9uIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHJlcXVlc3QgcGF0aFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQ29udGludWF0aW9uIHRvIHJlc3BvbmQgdG8gd2hlbiBjb21wbGV0ZS5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfcmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVxdWVzdChvcHRpb25zLCBhdXRoLCBwYXRoLCBjYWxsYmFjaykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBhdXRoID0gYXV0aCB8fCB0aGlzLmF1dGg7XG4gICAgICBwYXRoID0gcGF0aCB8fCB0aGlzLnBhdGggfHwgJyc7XG4gICAgICBpZiAodGhpcy5iYXRjaCkge1xuICAgICAgICB0aGlzLl9kb0JhdGNoKG9wdGlvbnMsIGNhbGxiYWNrLCBhdXRoLCBwYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2RvUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjaywgYXV0aCwgcGF0aCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBvciBtZW1vcml6ZSB0aGUgb3B0aW9ucyBhY2NvcmRpbmcgdG8gYmF0Y2ggY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdGlvbnMgLSBPcHRpb25zIHRvIHNlbnQgdGhlIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBDb250aW51YXRpb24gdG8gcmVzcG9uZCB0byB3aGVuIGNvbXBsZXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0P30gYXV0aCAtIGF1dGhlbnRpY2F0aW9uIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHJlcXVlc3QgcGF0aFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9kb0JhdGNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kb0JhdGNoKG9wdGlvbnMsIGNhbGxiYWNrLCBhdXRoLCBwYXRoKSB7XG4gICAgICB0aGlzLmJhdGNoT3B0aW9ucy5wdXNoKG9wdGlvbnMpO1xuICAgICAgaWYgKHRoaXMuYmF0Y2hPcHRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBGaXJzdCBtZXNzYWdlIHN0b3JlZCwgaXQncyB0aW1lIHRvIHN0YXJ0IHRoZSB0aW1lb3V0IVxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB0aGlzLmJhdGNoQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgdGhpcy5iYXRjaFRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIHRpbWVvdXQgaXMgcmVhY2hlZCwgc2VuZCBhbGwgbWVzc2FnZXMgdG8gZW5kcG9pbnRcbiAgICAgICAgICBtZS5iYXRjaFRpbWVvdXRJRCA9IC0xO1xuICAgICAgICAgIG1lLl9kb0JhdGNoUmVxdWVzdChtZS5iYXRjaENhbGxiYWNrLCBhdXRoLCBwYXRoKTtcbiAgICAgICAgfSwgdGhpcy5iYXRjaEludGVydmFsKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmJhdGNoT3B0aW9ucy5sZW5ndGggPT09IHRoaXMuYmF0Y2hDb3VudCkge1xuICAgICAgICAvLyBtYXggYmF0Y2ggY291bnQgaXMgcmVhY2hlZCwgc2VuZCBhbGwgbWVzc2FnZXMgdG8gZW5kcG9pbnRcbiAgICAgICAgdGhpcy5fZG9CYXRjaFJlcXVlc3QodGhpcy5iYXRjaENhbGxiYWNrLCBhdXRoLCBwYXRoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWF0ZSBhIHJlcXVlc3Qgd2l0aCB0aGUgbWVtb3JpemVkIGJhdGNoIG9wdGlvbnMsIHN0b3AgdGhlIGJhdGNoIHRpbWVvdXRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIENvbnRpbnVhdGlvbiB0byByZXNwb25kIHRvIHdoZW4gY29tcGxldGUuXG4gICAgICogQHBhcmFtIHtPYmplY3Q/fSBhdXRoIC0gYXV0aGVudGljYXRpb24gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gcmVxdWVzdCBwYXRoXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2RvQmF0Y2hSZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kb0JhdGNoUmVxdWVzdChjYWxsYmFjaywgYXV0aCwgcGF0aCkge1xuICAgICAgaWYgKHRoaXMuYmF0Y2hUaW1lb3V0SUQgPiAwKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmJhdGNoVGltZW91dElEKTtcbiAgICAgICAgdGhpcy5iYXRjaFRpbWVvdXRJRCA9IC0xO1xuICAgICAgfVxuICAgICAgdmFyIGJhdGNoT3B0aW9uc0NvcHkgPSB0aGlzLmJhdGNoT3B0aW9ucy5zbGljZSgpO1xuICAgICAgdGhpcy5iYXRjaE9wdGlvbnMgPSBbXTtcbiAgICAgIHRoaXMuX2RvUmVxdWVzdChiYXRjaE9wdGlvbnNDb3B5LCBjYWxsYmFjaywgYXV0aCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZSBhIHJlcXVlc3QgdG8gYSB3aW5zdG9uZCBzZXJ2ZXIgb3IgYW55IGh0dHAgc2VydmVyIHdoaWNoIGNhblxuICAgICAqIGhhbmRsZSBqc29uLXJwYy5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zIC0gT3B0aW9ucyB0byBzZW50IHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQ29udGludWF0aW9uIHRvIHJlc3BvbmQgdG8gd2hlbiBjb21wbGV0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdD99IGF1dGggLSBhdXRoZW50aWNhdGlvbiBvcHRpb25zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSByZXF1ZXN0IHBhdGhcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfZG9SZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kb1JlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2ssIGF1dGgsIHBhdGgpIHtcbiAgICAgIC8vIFByZXBhcmUgb3B0aW9ucyBmb3Igb3V0Z29pbmcgSFRUUCByZXF1ZXN0XG4gICAgICB2YXIgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuaGVhZGVycyk7XG4gICAgICBpZiAoYXV0aCAmJiBhdXRoLmJlYXJlcikge1xuICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBcIkJlYXJlciBcIi5jb25jYXQoYXV0aC5iZWFyZXIpO1xuICAgICAgfVxuICAgICAgdmFyIHJlcSA9ICh0aGlzLnNzbCA/IGh0dHBzIDogaHR0cCkucmVxdWVzdChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoaXMub3B0aW9ucyksIHt9LCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICAgIHBvcnQ6IHRoaXMucG9ydCxcbiAgICAgICAgcGF0aDogXCIvXCIuY29uY2F0KHBhdGgucmVwbGFjZSgvXlxcLy8sICcnKSksXG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgIGF1dGg6IGF1dGggJiYgYXV0aC51c2VybmFtZSAmJiBhdXRoLnBhc3N3b3JkID8gXCJcIi5jb25jYXQoYXV0aC51c2VybmFtZSwgXCI6XCIpLmNvbmNhdChhdXRoLnBhc3N3b3JkKSA6ICcnLFxuICAgICAgICBhZ2VudDogdGhpcy5hZ2VudFxuICAgICAgfSkpO1xuICAgICAgcmVxLm9uKCdlcnJvcicsIGNhbGxiYWNrKTtcbiAgICAgIHJlcS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIHJldHVybiByZXMub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzKTtcbiAgICAgICAgfSkucmVzdW1lKCk7XG4gICAgICB9KTtcbiAgICAgIHZhciBqc29uU3RyaW5naWZ5ID0gY29uZmlndXJlKF9vYmplY3RTcHJlYWQoe30sIHRoaXMubWF4aW11bURlcHRoICYmIHtcbiAgICAgICAgbWF4aW11bURlcHRoOiB0aGlzLm1heGltdW1EZXB0aFxuICAgICAgfSkpO1xuICAgICAgcmVxLmVuZChCdWZmZXIuZnJvbShqc29uU3RyaW5naWZ5KG9wdGlvbnMsIHRoaXMub3B0aW9ucy5yZXBsYWNlciksICd1dGY4JykpO1xuICAgIH1cbiAgfV0pO1xufShUcmFuc3BvcnRTdHJlYW0pOyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzU3RyZWFtID0gc3RyZWFtID0+XG5cdHN0cmVhbSAhPT0gbnVsbCAmJlxuXHR0eXBlb2Ygc3RyZWFtID09PSAnb2JqZWN0JyAmJlxuXHR0eXBlb2Ygc3RyZWFtLnBpcGUgPT09ICdmdW5jdGlvbic7XG5cbmlzU3RyZWFtLndyaXRhYmxlID0gc3RyZWFtID0+XG5cdGlzU3RyZWFtKHN0cmVhbSkgJiZcblx0c3RyZWFtLndyaXRhYmxlICE9PSBmYWxzZSAmJlxuXHR0eXBlb2Ygc3RyZWFtLl93cml0ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHR0eXBlb2Ygc3RyZWFtLl93cml0YWJsZVN0YXRlID09PSAnb2JqZWN0JztcblxuaXNTdHJlYW0ucmVhZGFibGUgPSBzdHJlYW0gPT5cblx0aXNTdHJlYW0oc3RyZWFtKSAmJlxuXHRzdHJlYW0ucmVhZGFibGUgIT09IGZhbHNlICYmXG5cdHR5cGVvZiBzdHJlYW0uX3JlYWQgPT09ICdmdW5jdGlvbicgJiZcblx0dHlwZW9mIHN0cmVhbS5fcmVhZGFibGVTdGF0ZSA9PT0gJ29iamVjdCc7XG5cbmlzU3RyZWFtLmR1cGxleCA9IHN0cmVhbSA9PlxuXHRpc1N0cmVhbS53cml0YWJsZShzdHJlYW0pICYmXG5cdGlzU3RyZWFtLnJlYWRhYmxlKHN0cmVhbSk7XG5cbmlzU3RyZWFtLnRyYW5zZm9ybSA9IHN0cmVhbSA9PlxuXHRpc1N0cmVhbS5kdXBsZXgoc3RyZWFtKSAmJlxuXHR0eXBlb2Ygc3RyZWFtLl90cmFuc2Zvcm0gPT09ICdmdW5jdGlvbic7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJlYW07XG4iLCAiLyoqXG4gKiBzdHJlYW0uanM6IFRyYW5zcG9ydCBmb3Igb3V0cHV0dGluZyB0byBhbnkgYXJiaXRyYXJ5IHN0cmVhbS5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBpc1N0cmVhbSA9IHJlcXVpcmUoJ2lzLXN0cmVhbScpO1xudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgTUVTU0FHRSA9IF9yZXF1aXJlLk1FU1NBR0U7XG52YXIgb3MgPSByZXF1aXJlKCdvcycpO1xudmFyIFRyYW5zcG9ydFN0cmVhbSA9IHJlcXVpcmUoJ3dpbnN0b24tdHJhbnNwb3J0Jyk7XG5cbi8qKlxuICogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIGFueSBhcmJpdHJhcnkgc3RyZWFtLlxuICogQHR5cGUge1N0cmVhbX1cbiAqIEBleHRlbmRzIHtUcmFuc3BvcnRTdHJlYW19XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVHJhbnNwb3J0U3RyZWFtKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIENvbnNvbGUgdHJhbnNwb3J0IG9iamVjdCByZXNwb25zaWJsZSBmb3JcbiAgICogcGVyc2lzdGluZyBsb2cgbWVzc2FnZXMgYW5kIG1ldGFkYXRhIHRvIGEgdGVybWluYWwgb3IgVFRZLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAqL1xuICBmdW5jdGlvbiBTdHJlYW0oKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RyZWFtKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgU3RyZWFtLCBbb3B0aW9uc10pO1xuICAgIGlmICghb3B0aW9ucy5zdHJlYW0gfHwgIWlzU3RyZWFtKG9wdGlvbnMuc3RyZWFtKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLnN0cmVhbSBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG5cbiAgICAvLyBXZSBuZWVkIHRvIGxpc3RlbiBmb3IgZHJhaW4gZXZlbnRzIHdoZW4gd3JpdGUoKSByZXR1cm5zIGZhbHNlLiBUaGlzIGNhblxuICAgIC8vIG1ha2Ugbm9kZSBtYWQgYXQgdGltZXMuXG4gICAgX3RoaXMuX3N0cmVhbSA9IG9wdGlvbnMuc3RyZWFtO1xuICAgIF90aGlzLl9zdHJlYW0uc2V0TWF4TGlzdGVuZXJzKEluZmluaXR5KTtcbiAgICBfdGhpcy5pc09iamVjdE1vZGUgPSBvcHRpb25zLnN0cmVhbS5fd3JpdGFibGVTdGF0ZS5vYmplY3RNb2RlO1xuICAgIF90aGlzLmVvbCA9IHR5cGVvZiBvcHRpb25zLmVvbCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmVvbCA6IG9zLkVPTDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBsb2dnaW5nIG1ldGhvZCBleHBvc2VkIHRvIFdpbnN0b24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIF9pbmhlcml0cyhTdHJlYW0sIF9UcmFuc3BvcnRTdHJlYW0pO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFN0cmVhbSwgW3tcbiAgICBrZXk6IFwibG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvZyhpbmZvLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmVtaXQoJ2xvZ2dlZCcsIGluZm8pO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5pc09iamVjdE1vZGUpIHtcbiAgICAgICAgdGhpcy5fc3RyZWFtLndyaXRlKGluZm8pO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N0cmVhbS53cml0ZShcIlwiLmNvbmNhdChpbmZvW01FU1NBR0VdKS5jb25jYXQodGhpcy5lb2wpKTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfV0pO1xufShUcmFuc3BvcnRTdHJlYW0pOyIsICIvKipcbiAqIHRyYW5zcG9ydHMuanM6IFNldCBvZiBhbGwgdHJhbnNwb3J0cyBXaW5zdG9uIGtub3dzIGFib3V0LlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVE9ETzogYWRkIHByb3BlcnR5IGRlc2NyaXB0aW9uLlxuICogQHR5cGUge0NvbnNvbGV9XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQ29uc29sZScsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb25zb2xlJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFRPRE86IGFkZCBwcm9wZXJ0eSBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtGaWxlfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0ZpbGUnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vZmlsZScpO1xuICB9XG59KTtcblxuLyoqXG4gKiBUT0RPOiBhZGQgcHJvcGVydHkgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7SHR0cH1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdIdHRwJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2h0dHAnKTtcbiAgfVxufSk7XG5cbi8qKlxuICogVE9ETzogYWRkIHByb3BlcnR5IGRlc2NyaXB0aW9uLlxuICogQHR5cGUge1N0cmVhbX1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTdHJlYW0nLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vc3RyZWFtJyk7XG4gIH1cbn0pOyIsICIvKipcbiAqIGluZGV4LmpzOiBEZWZhdWx0IHNldHRpbmdzIGZvciBhbGwgbGV2ZWxzIHRoYXQgd2luc3RvbiBrbm93cyBhYm91dC5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nZm9ybSA9IHJlcXVpcmUoJ2xvZ2Zvcm0nKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIGNvbmZpZ3MgPSBfcmVxdWlyZS5jb25maWdzO1xuXG4vKipcbiAqIEV4cG9ydCBjb25maWcgc2V0IGZvciB0aGUgQ0xJLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5jbGkgPSBsb2dmb3JtLmxldmVscyhjb25maWdzLmNsaSk7XG5cbi8qKlxuICogRXhwb3J0IGNvbmZpZyBzZXQgZm9yIG5wbS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMubnBtID0gbG9nZm9ybS5sZXZlbHMoY29uZmlncy5ucG0pO1xuXG4vKipcbiAqIEV4cG9ydCBjb25maWcgc2V0IGZvciB0aGUgc3lzbG9nLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5zeXNsb2cgPSBsb2dmb3JtLmxldmVscyhjb25maWdzLnN5c2xvZyk7XG5cbi8qKlxuICogSG9pc3QgYWRkQ29sb3JzIGZyb20gbG9nZm9ybSB3aGVyZSBpdCB3YXMgcmVmYWN0b3JlZCBpbnRvIGluIHdpbnN0b25AMy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuYWRkQ29sb3JzID0gbG9nZm9ybS5sZXZlbHM7IiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2lzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9pc0FycmF5TGlrZS5qcycpO1xuXG52YXIgX2lzQXJyYXlMaWtlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQXJyYXlMaWtlKTtcblxudmFyIF9icmVha0xvb3AgPSByZXF1aXJlKCcuL2ludGVybmFsL2JyZWFrTG9vcC5qcycpO1xuXG52YXIgX2JyZWFrTG9vcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9icmVha0xvb3ApO1xuXG52YXIgX2VhY2hPZkxpbWl0ID0gcmVxdWlyZSgnLi9lYWNoT2ZMaW1pdC5qcycpO1xuXG52YXIgX2VhY2hPZkxpbWl0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VhY2hPZkxpbWl0KTtcblxudmFyIF9vbmNlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9vbmNlLmpzJyk7XG5cbnZhciBfb25jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmNlKTtcblxudmFyIF9vbmx5T25jZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvb25seU9uY2UuanMnKTtcblxudmFyIF9vbmx5T25jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmx5T25jZSk7XG5cbnZhciBfd3JhcEFzeW5jID0gcmVxdWlyZSgnLi9pbnRlcm5hbC93cmFwQXN5bmMuanMnKTtcblxudmFyIF93cmFwQXN5bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcEFzeW5jKTtcblxudmFyIF9hd2FpdGlmeSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvYXdhaXRpZnkuanMnKTtcblxudmFyIF9hd2FpdGlmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hd2FpdGlmeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGVhY2hPZiBpbXBsZW1lbnRhdGlvbiBvcHRpbWl6ZWQgZm9yIGFycmF5LWxpa2VzXG5mdW5jdGlvbiBlYWNoT2ZBcnJheUxpa2UoY29sbCwgaXRlcmF0ZWUsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSAoMCwgX29uY2UyLmRlZmF1bHQpKGNhbGxiYWNrKTtcbiAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICBjb21wbGV0ZWQgPSAwLFxuICAgICAgICB7IGxlbmd0aCB9ID0gY29sbCxcbiAgICAgICAgY2FuY2VsZWQgPSBmYWxzZTtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZXJhdG9yQ2FsbGJhY2soZXJyLCB2YWx1ZSkge1xuICAgICAgICBpZiAoZXJyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYW5jZWxlZCA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9IGVsc2UgaWYgKCsrY29tcGxldGVkID09PSBsZW5ndGggfHwgdmFsdWUgPT09IF9icmVha0xvb3AyLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKGNvbGxbaW5kZXhdLCBpbmRleCwgKDAsIF9vbmx5T25jZTIuZGVmYXVsdCkoaXRlcmF0b3JDYWxsYmFjaykpO1xuICAgIH1cbn1cblxuLy8gYSBnZW5lcmljIHZlcnNpb24gb2YgZWFjaE9mIHdoaWNoIGNhbiBoYW5kbGUgYXJyYXksIG9iamVjdCwgYW5kIGl0ZXJhdG9yIGNhc2VzLlxuZnVuY3Rpb24gZWFjaE9mR2VuZXJpYyhjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gKDAsIF9lYWNoT2ZMaW1pdDIuZGVmYXVsdCkoY29sbCwgSW5maW5pdHksIGl0ZXJhdGVlLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogTGlrZSBbYGVhY2hgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZWFjaH0sIGV4Y2VwdCB0aGF0IGl0IHBhc3NlcyB0aGUga2V5IChvciBpbmRleCkgYXMgdGhlIHNlY29uZCBhcmd1bWVudFxuICogdG8gdGhlIGl0ZXJhdGVlLlxuICpcbiAqIEBuYW1lIGVhY2hPZlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQGFsaWFzIGZvckVhY2hPZlxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBzZWUgW2FzeW5jLmVhY2hde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNofVxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxBc3luY0l0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQSBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoXG4gKiBpdGVtIGluIGBjb2xsYC5cbiAqIFRoZSBga2V5YCBpcyB0aGUgaXRlbSdzIGtleSwgb3IgaW5kZXggaW4gdGhlIGNhc2Ugb2YgYW4gYXJyYXkuXG4gKiBJbnZva2VkIHdpdGggKGl0ZW0sIGtleSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gYWxsXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLCBvciBhbiBlcnJvciBvY2N1cnMuIEludm9rZWQgd2l0aCAoZXJyKS5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBhIHByb21pc2UsIGlmIGEgY2FsbGJhY2sgaXMgb21pdHRlZFxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBkZXYuanNvbiBpcyBhIGZpbGUgY29udGFpbmluZyBhIHZhbGlkIGpzb24gb2JqZWN0IGNvbmZpZyBmb3IgZGV2IGVudmlyb25tZW50XG4gKiAvLyBkZXYuanNvbiBpcyBhIGZpbGUgY29udGFpbmluZyBhIHZhbGlkIGpzb24gb2JqZWN0IGNvbmZpZyBmb3IgdGVzdCBlbnZpcm9ubWVudFxuICogLy8gcHJvZC5qc29uIGlzIGEgZmlsZSBjb250YWluaW5nIGEgdmFsaWQganNvbiBvYmplY3QgY29uZmlnIGZvciBwcm9kIGVudmlyb25tZW50XG4gKiAvLyBpbnZhbGlkLmpzb24gaXMgYSBmaWxlIHdpdGggYSBtYWxmb3JtZWQganNvbiBvYmplY3RcbiAqXG4gKiBsZXQgY29uZmlncyA9IHt9OyAvL2dsb2JhbCB2YXJpYWJsZVxuICogbGV0IHZhbGlkQ29uZmlnRmlsZU1hcCA9IHtkZXY6ICdkZXYuanNvbicsIHRlc3Q6ICd0ZXN0Lmpzb24nLCBwcm9kOiAncHJvZC5qc29uJ307XG4gKiBsZXQgaW52YWxpZENvbmZpZ0ZpbGVNYXAgPSB7ZGV2OiAnZGV2Lmpzb24nLCB0ZXN0OiAndGVzdC5qc29uJywgaW52YWxpZDogJ2ludmFsaWQuanNvbid9O1xuICpcbiAqIC8vIGFzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0IHJlYWRzIGEganNvbiBmaWxlIGFuZCBwYXJzZXMgdGhlIGNvbnRlbnRzIGFzIGpzb24gb2JqZWN0XG4gKiBmdW5jdGlvbiBwYXJzZUZpbGUoZmlsZSwga2V5LCBjYWxsYmFjaykge1xuICogICAgIGZzLnJlYWRGaWxlKGZpbGUsIFwidXRmOFwiLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAqICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGJhY2soZXJyKTtcbiAqICAgICAgICAgdHJ5IHtcbiAqICAgICAgICAgICAgIGNvbmZpZ3Nba2V5XSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gKiAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAqICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAqICAgICAgICAgfVxuICogICAgICAgICBjYWxsYmFjaygpO1xuICogICAgIH0pO1xuICogfVxuICpcbiAqIC8vIFVzaW5nIGNhbGxiYWNrc1xuICogYXN5bmMuZm9yRWFjaE9mKHZhbGlkQ29uZmlnRmlsZU1hcCwgcGFyc2VGaWxlLCBmdW5jdGlvbiAoZXJyKSB7XG4gKiAgICAgaWYgKGVycikge1xuICogICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgY29uc29sZS5sb2coY29uZmlncyk7XG4gKiAgICAgICAgIC8vIGNvbmZpZ3MgaXMgbm93IGEgbWFwIG9mIEpTT04gZGF0YSwgZS5nLlxuICogICAgICAgICAvLyB7IGRldjogLy9wYXJzZWQgZGV2Lmpzb24sIHRlc3Q6IC8vcGFyc2VkIHRlc3QuanNvbiwgcHJvZDogLy9wYXJzZWQgcHJvZC5qc29ufVxuICogICAgIH1cbiAqIH0pO1xuICpcbiAqIC8vRXJyb3IgaGFuZGluZ1xuICogYXN5bmMuZm9yRWFjaE9mKGludmFsaWRDb25maWdGaWxlTWFwLCBwYXJzZUZpbGUsIGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgICBpZiAoZXJyKSB7XG4gKiAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAqICAgICAgICAgLy8gSlNPTiBwYXJzZSBlcnJvciBleGNlcHRpb25cbiAqICAgICB9IGVsc2Uge1xuICogICAgICAgICBjb25zb2xlLmxvZyhjb25maWdzKTtcbiAqICAgICB9XG4gKiB9KTtcbiAqXG4gKiAvLyBVc2luZyBQcm9taXNlc1xuICogYXN5bmMuZm9yRWFjaE9mKHZhbGlkQ29uZmlnRmlsZU1hcCwgcGFyc2VGaWxlKVxuICogLnRoZW4oICgpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhjb25maWdzKTtcbiAqICAgICAvLyBjb25maWdzIGlzIG5vdyBhIG1hcCBvZiBKU09OIGRhdGEsIGUuZy5cbiAqICAgICAvLyB7IGRldjogLy9wYXJzZWQgZGV2Lmpzb24sIHRlc3Q6IC8vcGFyc2VkIHRlc3QuanNvbiwgcHJvZDogLy9wYXJzZWQgcHJvZC5qc29ufVxuICogfSkuY2F0Y2goIGVyciA9PiB7XG4gKiAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICogfSk7XG4gKlxuICogLy9FcnJvciBoYW5kaW5nXG4gKiBhc3luYy5mb3JFYWNoT2YoaW52YWxpZENvbmZpZ0ZpbGVNYXAsIHBhcnNlRmlsZSlcbiAqIC50aGVuKCAoKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coY29uZmlncyk7XG4gKiB9KS5jYXRjaCggZXJyID0+IHtcbiAqICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gKiAgICAgLy8gSlNPTiBwYXJzZSBlcnJvciBleGNlcHRpb25cbiAqIH0pO1xuICpcbiAqIC8vIFVzaW5nIGFzeW5jL2F3YWl0XG4gKiBhc3luYyAoKSA9PiB7XG4gKiAgICAgdHJ5IHtcbiAqICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGFzeW5jLmZvckVhY2hPZih2YWxpZENvbmZpZ0ZpbGVNYXAsIHBhcnNlRmlsZSk7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKGNvbmZpZ3MpO1xuICogICAgICAgICAvLyBjb25maWdzIGlzIG5vdyBhIG1hcCBvZiBKU09OIGRhdGEsIGUuZy5cbiAqICAgICAgICAgLy8geyBkZXY6IC8vcGFyc2VkIGRldi5qc29uLCB0ZXN0OiAvL3BhcnNlZCB0ZXN0Lmpzb24sIHByb2Q6IC8vcGFyc2VkIHByb2QuanNvbn1cbiAqICAgICB9XG4gKiAgICAgY2F0Y2ggKGVycikge1xuICogICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICogICAgIH1cbiAqIH1cbiAqXG4gKiAvL0Vycm9yIGhhbmRpbmdcbiAqIGFzeW5jICgpID0+IHtcbiAqICAgICB0cnkge1xuICogICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgYXN5bmMuZm9yRWFjaE9mKGludmFsaWRDb25maWdGaWxlTWFwLCBwYXJzZUZpbGUpO1xuICogICAgICAgICBjb25zb2xlLmxvZyhjb25maWdzKTtcbiAqICAgICB9XG4gKiAgICAgY2F0Y2ggKGVycikge1xuICogICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICogICAgICAgICAvLyBKU09OIHBhcnNlIGVycm9yIGV4Y2VwdGlvblxuICogICAgIH1cbiAqIH1cbiAqXG4gKi9cbmZ1bmN0aW9uIGVhY2hPZihjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZWFjaE9mSW1wbGVtZW50YXRpb24gPSAoMCwgX2lzQXJyYXlMaWtlMi5kZWZhdWx0KShjb2xsKSA/IGVhY2hPZkFycmF5TGlrZSA6IGVhY2hPZkdlbmVyaWM7XG4gICAgcmV0dXJuIGVhY2hPZkltcGxlbWVudGF0aW9uKGNvbGwsICgwLCBfd3JhcEFzeW5jMi5kZWZhdWx0KShpdGVyYXRlZSksIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9hd2FpdGlmeTIuZGVmYXVsdCkoZWFjaE9mLCAzKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3dpdGhvdXRJbmRleDtcbmZ1bmN0aW9uIF93aXRob3V0SW5kZXgoaXRlcmF0ZWUpIHtcbiAgICByZXR1cm4gKHZhbHVlLCBpbmRleCwgY2FsbGJhY2spID0+IGl0ZXJhdGVlKHZhbHVlLCBjYWxsYmFjayk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZWFjaE9mID0gcmVxdWlyZSgnLi9lYWNoT2YuanMnKTtcblxudmFyIF9lYWNoT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaE9mKTtcblxudmFyIF93aXRob3V0SW5kZXggPSByZXF1aXJlKCcuL2ludGVybmFsL3dpdGhvdXRJbmRleC5qcycpO1xuXG52YXIgX3dpdGhvdXRJbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aXRob3V0SW5kZXgpO1xuXG52YXIgX3dyYXBBc3luYyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvd3JhcEFzeW5jLmpzJyk7XG5cbnZhciBfd3JhcEFzeW5jMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dyYXBBc3luYyk7XG5cbnZhciBfYXdhaXRpZnkgPSByZXF1aXJlKCcuL2ludGVybmFsL2F3YWl0aWZ5LmpzJyk7XG5cbnZhciBfYXdhaXRpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXdhaXRpZnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEFwcGxpZXMgdGhlIGZ1bmN0aW9uIGBpdGVyYXRlZWAgdG8gZWFjaCBpdGVtIGluIGBjb2xsYCwgaW4gcGFyYWxsZWwuXG4gKiBUaGUgYGl0ZXJhdGVlYCBpcyBjYWxsZWQgd2l0aCBhbiBpdGVtIGZyb20gdGhlIGxpc3QsIGFuZCBhIGNhbGxiYWNrIGZvciB3aGVuXG4gKiBpdCBoYXMgZmluaXNoZWQuIElmIHRoZSBgaXRlcmF0ZWVgIHBhc3NlcyBhbiBlcnJvciB0byBpdHMgYGNhbGxiYWNrYCwgdGhlXG4gKiBtYWluIGBjYWxsYmFja2AgKGZvciB0aGUgYGVhY2hgIGZ1bmN0aW9uKSBpcyBpbW1lZGlhdGVseSBjYWxsZWQgd2l0aCB0aGVcbiAqIGVycm9yLlxuICpcbiAqIE5vdGUsIHRoYXQgc2luY2UgdGhpcyBmdW5jdGlvbiBhcHBsaWVzIGBpdGVyYXRlZWAgdG8gZWFjaCBpdGVtIGluIHBhcmFsbGVsLFxuICogdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIGl0ZXJhdGVlIGZ1bmN0aW9ucyB3aWxsIGNvbXBsZXRlIGluIG9yZGVyLlxuICpcbiAqIEBuYW1lIGVhY2hcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBhbGlhcyBmb3JFYWNoXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxBc3luY0l0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gdG8gYXBwbHkgdG9cbiAqIGVhY2ggaXRlbSBpbiBgY29sbGAuIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogVGhlIGFycmF5IGluZGV4IGlzIG5vdCBwYXNzZWQgdG8gdGhlIGl0ZXJhdGVlLlxuICogSWYgeW91IG5lZWQgdGhlIGluZGV4LCB1c2UgYGVhY2hPZmAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGxcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICogQHJldHVybnMge1Byb21pc2V9IGEgcHJvbWlzZSwgaWYgYSBjYWxsYmFjayBpcyBvbWl0dGVkXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIGRpcjEgaXMgYSBkaXJlY3RvcnkgdGhhdCBjb250YWlucyBmaWxlMS50eHQsIGZpbGUyLnR4dFxuICogLy8gZGlyMiBpcyBhIGRpcmVjdG9yeSB0aGF0IGNvbnRhaW5zIGZpbGUzLnR4dCwgZmlsZTQudHh0XG4gKiAvLyBkaXIzIGlzIGEgZGlyZWN0b3J5IHRoYXQgY29udGFpbnMgZmlsZTUudHh0XG4gKiAvLyBkaXI0IGRvZXMgbm90IGV4aXN0XG4gKlxuICogY29uc3QgZmlsZUxpc3QgPSBbICdkaXIxL2ZpbGUyLnR4dCcsICdkaXIyL2ZpbGUzLnR4dCcsICdkaXIvZmlsZTUudHh0J107XG4gKiBjb25zdCB3aXRoTWlzc2luZ0ZpbGVMaXN0ID0gWydkaXIxL2ZpbGUxLnR4dCcsICdkaXI0L2ZpbGUyLnR4dCddO1xuICpcbiAqIC8vIGFzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0IGRlbGV0ZXMgYSBmaWxlXG4gKiBjb25zdCBkZWxldGVGaWxlID0gZnVuY3Rpb24oZmlsZSwgY2FsbGJhY2spIHtcbiAqICAgICBmcy51bmxpbmsoZmlsZSwgY2FsbGJhY2spO1xuICogfTtcbiAqXG4gKiAvLyBVc2luZyBjYWxsYmFja3NcbiAqIGFzeW5jLmVhY2goZmlsZUxpc3QsIGRlbGV0ZUZpbGUsIGZ1bmN0aW9uKGVycikge1xuICogICAgIGlmKCBlcnIgKSB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgY29uc29sZS5sb2coJ0FsbCBmaWxlcyBoYXZlIGJlZW4gZGVsZXRlZCBzdWNjZXNzZnVsbHknKTtcbiAqICAgICB9XG4gKiB9KTtcbiAqXG4gKiAvLyBFcnJvciBIYW5kbGluZ1xuICogYXN5bmMuZWFjaCh3aXRoTWlzc2luZ0ZpbGVMaXN0LCBkZWxldGVGaWxlLCBmdW5jdGlvbihlcnIpe1xuICogICAgIGNvbnNvbGUubG9nKGVycik7XG4gKiAgICAgLy8gWyBFcnJvcjogRU5PRU5UOiBubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5IF1cbiAqICAgICAvLyBzaW5jZSBkaXI0L2ZpbGUyLnR4dCBkb2VzIG5vdCBleGlzdFxuICogICAgIC8vIGRpcjEvZmlsZTEudHh0IGNvdWxkIGhhdmUgYmVlbiBkZWxldGVkXG4gKiB9KTtcbiAqXG4gKiAvLyBVc2luZyBQcm9taXNlc1xuICogYXN5bmMuZWFjaChmaWxlTGlzdCwgZGVsZXRlRmlsZSlcbiAqIC50aGVuKCAoKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coJ0FsbCBmaWxlcyBoYXZlIGJlZW4gZGVsZXRlZCBzdWNjZXNzZnVsbHknKTtcbiAqIH0pLmNhdGNoKCBlcnIgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKGVycik7XG4gKiB9KTtcbiAqXG4gKiAvLyBFcnJvciBIYW5kbGluZ1xuICogYXN5bmMuZWFjaChmaWxlTGlzdCwgZGVsZXRlRmlsZSlcbiAqIC50aGVuKCAoKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coJ0FsbCBmaWxlcyBoYXZlIGJlZW4gZGVsZXRlZCBzdWNjZXNzZnVsbHknKTtcbiAqIH0pLmNhdGNoKCBlcnIgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKGVycik7XG4gKiAgICAgLy8gWyBFcnJvcjogRU5PRU5UOiBubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5IF1cbiAqICAgICAvLyBzaW5jZSBkaXI0L2ZpbGUyLnR4dCBkb2VzIG5vdCBleGlzdFxuICogICAgIC8vIGRpcjEvZmlsZTEudHh0IGNvdWxkIGhhdmUgYmVlbiBkZWxldGVkXG4gKiB9KTtcbiAqXG4gKiAvLyBVc2luZyBhc3luYy9hd2FpdFxuICogYXN5bmMgKCkgPT4ge1xuICogICAgIHRyeSB7XG4gKiAgICAgICAgIGF3YWl0IGFzeW5jLmVhY2goZmlsZXMsIGRlbGV0ZUZpbGUpO1xuICogICAgIH1cbiAqICAgICBjYXRjaCAoZXJyKSB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gKiAgICAgfVxuICogfVxuICpcbiAqIC8vIEVycm9yIEhhbmRsaW5nXG4gKiBhc3luYyAoKSA9PiB7XG4gKiAgICAgdHJ5IHtcbiAqICAgICAgICAgYXdhaXQgYXN5bmMuZWFjaCh3aXRoTWlzc2luZ0ZpbGVMaXN0LCBkZWxldGVGaWxlKTtcbiAqICAgICB9XG4gKiAgICAgY2F0Y2ggKGVycikge1xuICogICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICogICAgICAgICAvLyBbIEVycm9yOiBFTk9FTlQ6IG5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkgXVxuICogICAgICAgICAvLyBzaW5jZSBkaXI0L2ZpbGUyLnR4dCBkb2VzIG5vdCBleGlzdFxuICogICAgICAgICAvLyBkaXIxL2ZpbGUxLnR4dCBjb3VsZCBoYXZlIGJlZW4gZGVsZXRlZFxuICogICAgIH1cbiAqIH1cbiAqXG4gKi9cbmZ1bmN0aW9uIGVhY2hMaW1pdChjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gKDAsIF9lYWNoT2YyLmRlZmF1bHQpKGNvbGwsICgwLCBfd2l0aG91dEluZGV4Mi5kZWZhdWx0KSgoMCwgX3dyYXBBc3luYzIuZGVmYXVsdCkoaXRlcmF0ZWUpKSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2F3YWl0aWZ5Mi5kZWZhdWx0KShlYWNoTGltaXQsIDMpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBFeHRyYWN0IG5hbWVzIGZyb20gZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB3aG8ncyBuYW1lIHdlIG5lZWQgdG8gZXh0cmFjdC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBuYW1lKGZuKSB7XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGZuLmRpc3BsYXlOYW1lICYmIGZuLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICByZXR1cm4gZm4uZGlzcGxheU5hbWU7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBmbi5uYW1lICYmIGZuLm5hbWUpIHtcbiAgICByZXR1cm4gZm4ubmFtZTtcbiAgfVxuXG4gIC8vXG4gIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgY29uc3RydWN0b3IgaGFzIGEgbmFtZS5cbiAgLy9cbiAgaWYgKFxuICAgICAgICdvYmplY3QnID09PSB0eXBlb2YgZm5cbiAgICAmJiBmbi5jb25zdHJ1Y3RvclxuICAgICYmICdzdHJpbmcnID09PSB0eXBlb2YgZm4uY29uc3RydWN0b3IubmFtZVxuICApIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gIC8vXG4gIC8vIHRvU3RyaW5nIHRoZSBnaXZlbiBmdW5jdGlvbiBhbmQgYXR0ZW1wdCB0byBwYXJzZSBpdCBvdXQgb2YgaXQsIG9yIGRldGVybWluZVxuICAvLyB0aGUgY2xhc3MuXG4gIC8vXG4gIHZhciBuYW1lZCA9IGZuLnRvU3RyaW5nKClcbiAgICAsIHR5cGUgPSB0b1N0cmluZy5jYWxsKGZuKS5zbGljZSg4LCAtMSk7XG5cbiAgaWYgKCdGdW5jdGlvbicgPT09IHR5cGUpIHtcbiAgICBuYW1lZCA9IG5hbWVkLnN1YnN0cmluZyhuYW1lZC5pbmRleE9mKCcoJykgKyAxLCBuYW1lZC5pbmRleE9mKCcpJykpO1xuICB9IGVsc2Uge1xuICAgIG5hbWVkID0gdHlwZTtcbiAgfVxuXG4gIHJldHVybiBuYW1lZCB8fCAnYW5vbnltb3VzJztcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbmFtZSA9IHJlcXVpcmUoJ2ZuLm5hbWUnKTtcblxuLyoqXG4gKiBXcmFwIGNhbGxiYWNrcyB0byBwcmV2ZW50IGRvdWJsZSBleGVjdXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdGhhdCBzaG91bGQgb25seSBiZSBjYWxsZWQgb25jZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSB3cmFwcGVkIGNhbGxiYWNrIHdoaWNoIHByZXZlbnRzIG11bHRpcGxlIGV4ZWN1dGlvbnMuXG4gKiBAcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb25lKGZuKSB7XG4gIHZhciBjYWxsZWQgPSAwXG4gICAgLCB2YWx1ZTtcblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRoYXQgcHJldmVudHMgZG91YmxlIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIG9uZXRpbWUoKSB7XG4gICAgaWYgKGNhbGxlZCkgcmV0dXJuIHZhbHVlO1xuXG4gICAgY2FsbGVkID0gMTtcbiAgICB2YWx1ZSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZm4gPSBudWxsO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLy9cbiAgLy8gVG8gbWFrZSBkZWJ1Z2dpbmcgbW9yZSBlYXN5IHdlIHdhbnQgdG8gdXNlIHRoZSBuYW1lIG9mIHRoZSBzdXBwbGllZFxuICAvLyBmdW5jdGlvbi4gU28gd2hlbiB5b3UgbG9vayBhdCB0aGUgZnVuY3Rpb25zIHRoYXQgYXJlIGFzc2lnbmVkIHRvIGV2ZW50XG4gIC8vIGxpc3RlbmVycyB5b3UgZG9uJ3Qgc2VlIGEgbG9hZCBvZiBgb25ldGltZWAgZnVuY3Rpb25zIGJ1dCBhY3R1YWxseSB0aGVcbiAgLy8gbmFtZXMgb2YgdGhlIGZ1bmN0aW9ucyB0aGF0IHRoaXMgbW9kdWxlIHdpbGwgY2FsbC5cbiAgLy9cbiAgLy8gTk9URTogV2UgY2Fubm90IG92ZXJyaWRlIHRoZSBgbmFtZWAgcHJvcGVydHksIGFzIHRoYXQgaXMgYHJlYWRPbmx5YFxuICAvLyBwcm9wZXJ0eSwgc28gZGlzcGxheU5hbWUgd2lsbCBoYXZlIHRvIGRvLlxuICAvL1xuICBvbmV0aW1lLmRpc3BsYXlOYW1lID0gbmFtZShmbik7XG4gIHJldHVybiBvbmV0aW1lO1xufTtcbiIsICJleHBvcnRzLmdldCA9IGZ1bmN0aW9uKGJlbG93Rm4pIHtcbiAgdmFyIG9sZExpbWl0ID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0O1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBJbmZpbml0eTtcblxuICB2YXIgZHVtbXlPYmplY3QgPSB7fTtcblxuICB2YXIgdjhIYW5kbGVyID0gRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7XG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gZnVuY3Rpb24oZHVtbXlPYmplY3QsIHY4U3RhY2tUcmFjZSkge1xuICAgIHJldHVybiB2OFN0YWNrVHJhY2U7XG4gIH07XG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15T2JqZWN0LCBiZWxvd0ZuIHx8IGV4cG9ydHMuZ2V0KTtcblxuICB2YXIgdjhTdGFja1RyYWNlID0gZHVtbXlPYmplY3Quc3RhY2s7XG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gdjhIYW5kbGVyO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBvbGRMaW1pdDtcblxuICByZXR1cm4gdjhTdGFja1RyYWNlO1xufTtcblxuZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uKGVycikge1xuICBpZiAoIWVyci5zdGFjaykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGxpbmVzID0gZXJyLnN0YWNrLnNwbGl0KCdcXG4nKS5zbGljZSgxKTtcblxuICByZXR1cm4gbGluZXNcbiAgICAubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIGlmIChsaW5lLm1hdGNoKC9eXFxzKlstXXs0LH0kLykpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZVBhcnNlZENhbGxTaXRlKHtcbiAgICAgICAgICBmaWxlTmFtZTogbGluZSxcbiAgICAgICAgICBsaW5lTnVtYmVyOiBudWxsLFxuICAgICAgICAgIGZ1bmN0aW9uTmFtZTogbnVsbCxcbiAgICAgICAgICB0eXBlTmFtZTogbnVsbCxcbiAgICAgICAgICBtZXRob2ROYW1lOiBudWxsLFxuICAgICAgICAgIGNvbHVtbk51bWJlcjogbnVsbCxcbiAgICAgICAgICAnbmF0aXZlJzogbnVsbCxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaW5lTWF0Y2ggPSBsaW5lLm1hdGNoKC9hdCAoPzooLispXFxzK1xcKCk/KD86KC4rPyk6KFxcZCspKD86OihcXGQrKSk/fChbXildKykpXFwpPy8pO1xuICAgICAgaWYgKCFsaW5lTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JqZWN0ID0gbnVsbDtcbiAgICAgIHZhciBtZXRob2QgPSBudWxsO1xuICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IG51bGw7XG4gICAgICB2YXIgdHlwZU5hbWUgPSBudWxsO1xuICAgICAgdmFyIG1ldGhvZE5hbWUgPSBudWxsO1xuICAgICAgdmFyIGlzTmF0aXZlID0gKGxpbmVNYXRjaFs1XSA9PT0gJ25hdGl2ZScpO1xuXG4gICAgICBpZiAobGluZU1hdGNoWzFdKSB7XG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IGxpbmVNYXRjaFsxXTtcbiAgICAgICAgdmFyIG1ldGhvZFN0YXJ0ID0gZnVuY3Rpb25OYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChmdW5jdGlvbk5hbWVbbWV0aG9kU3RhcnQtMV0gPT0gJy4nKVxuICAgICAgICAgIG1ldGhvZFN0YXJ0LS07XG4gICAgICAgIGlmIChtZXRob2RTdGFydCA+IDApIHtcbiAgICAgICAgICBvYmplY3QgPSBmdW5jdGlvbk5hbWUuc3Vic3RyKDAsIG1ldGhvZFN0YXJ0KTtcbiAgICAgICAgICBtZXRob2QgPSBmdW5jdGlvbk5hbWUuc3Vic3RyKG1ldGhvZFN0YXJ0ICsgMSk7XG4gICAgICAgICAgdmFyIG9iamVjdEVuZCA9IG9iamVjdC5pbmRleE9mKCcuTW9kdWxlJyk7XG4gICAgICAgICAgaWYgKG9iamVjdEVuZCA+IDApIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZS5zdWJzdHIob2JqZWN0RW5kICsgMSk7XG4gICAgICAgICAgICBvYmplY3QgPSBvYmplY3Quc3Vic3RyKDAsIG9iamVjdEVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHR5cGVOYW1lID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICB0eXBlTmFtZSA9IG9iamVjdDtcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCA9PT0gJzxhbm9ueW1vdXM+Jykge1xuICAgICAgICBtZXRob2ROYW1lID0gbnVsbDtcbiAgICAgICAgZnVuY3Rpb25OYW1lID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BlcnRpZXMgPSB7XG4gICAgICAgIGZpbGVOYW1lOiBsaW5lTWF0Y2hbMl0gfHwgbnVsbCxcbiAgICAgICAgbGluZU51bWJlcjogcGFyc2VJbnQobGluZU1hdGNoWzNdLCAxMCkgfHwgbnVsbCxcbiAgICAgICAgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUsXG4gICAgICAgIHR5cGVOYW1lOiB0eXBlTmFtZSxcbiAgICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgICAgY29sdW1uTnVtYmVyOiBwYXJzZUludChsaW5lTWF0Y2hbNF0sIDEwKSB8fCBudWxsLFxuICAgICAgICAnbmF0aXZlJzogaXNOYXRpdmUsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc2VsZi5fY3JlYXRlUGFyc2VkQ2FsbFNpdGUocHJvcGVydGllcyk7XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uKGNhbGxTaXRlKSB7XG4gICAgICByZXR1cm4gISFjYWxsU2l0ZTtcbiAgICB9KTtcbn07XG5cbmZ1bmN0aW9uIENhbGxTaXRlKHByb3BlcnRpZXMpIHtcbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcykge1xuICAgIHRoaXNbcHJvcGVydHldID0gcHJvcGVydGllc1twcm9wZXJ0eV07XG4gIH1cbn1cblxudmFyIHN0clByb3BlcnRpZXMgPSBbXG4gICd0aGlzJyxcbiAgJ3R5cGVOYW1lJyxcbiAgJ2Z1bmN0aW9uTmFtZScsXG4gICdtZXRob2ROYW1lJyxcbiAgJ2ZpbGVOYW1lJyxcbiAgJ2xpbmVOdW1iZXInLFxuICAnY29sdW1uTnVtYmVyJyxcbiAgJ2Z1bmN0aW9uJyxcbiAgJ2V2YWxPcmlnaW4nXG5dO1xudmFyIGJvb2xQcm9wZXJ0aWVzID0gW1xuICAndG9wTGV2ZWwnLFxuICAnZXZhbCcsXG4gICduYXRpdmUnLFxuICAnY29uc3RydWN0b3InXG5dO1xuc3RyUHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICBDYWxsU2l0ZS5wcm90b3R5cGVbcHJvcGVydHldID0gbnVsbDtcbiAgQ2FsbFNpdGUucHJvdG90eXBlWydnZXQnICsgcHJvcGVydHlbMF0udG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnN1YnN0cigxKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICB9XG59KTtcbmJvb2xQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gIENhbGxTaXRlLnByb3RvdHlwZVtwcm9wZXJ0eV0gPSBmYWxzZTtcbiAgQ2FsbFNpdGUucHJvdG90eXBlWydpcycgKyBwcm9wZXJ0eVswXS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gIH1cbn0pO1xuXG5leHBvcnRzLl9jcmVhdGVQYXJzZWRDYWxsU2l0ZSA9IGZ1bmN0aW9uKHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIG5ldyBDYWxsU2l0ZShwcm9wZXJ0aWVzKTtcbn07XG4iLCAiLyoqXG4gKiBleGNlcHRpb24tc3RyZWFtLmpzOiBUT0RPOiBhZGQgZmlsZSBoZWFkZXIgaGFuZGxlci5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpLFxuICBXcml0YWJsZSA9IF9yZXF1aXJlLldyaXRhYmxlO1xuXG4vKipcbiAqIFRPRE86IGFkZCBjbGFzcyBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtFeGNlcHRpb25TdHJlYW19XG4gKiBAZXh0ZW5kcyB7V3JpdGFibGV9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfV3JpdGFibGUpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgRXhjZXB0aW9uU3RyZWFtIHJlc3BvbnNpYmxlIGZvciB3cmFwcGluZyBhXG4gICAqIFRyYW5zcG9ydFN0cmVhbTsgb25seSBhbGxvd2luZyB3cml0ZXMgb2YgYGluZm9gIG9iamVjdHMgd2l0aFxuICAgKiBgaW5mby5leGNlcHRpb25gIHNldCB0byB0cnVlLlxuICAgKiBAcGFyYW0geyFUcmFuc3BvcnRTdHJlYW19IHRyYW5zcG9ydCAtIFN0cmVhbSB0byBmaWx0ZXIgdG8gZXhjZXB0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gRXhjZXB0aW9uU3RyZWFtKHRyYW5zcG9ydCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXhjZXB0aW9uU3RyZWFtKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgRXhjZXB0aW9uU3RyZWFtLCBbe1xuICAgICAgb2JqZWN0TW9kZTogdHJ1ZVxuICAgIH1dKTtcbiAgICBpZiAoIXRyYW5zcG9ydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGNlcHRpb25TdHJlYW0gcmVxdWlyZXMgYSBUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2UuJyk7XG4gICAgfVxuXG4gICAgLy8gUmVtYXJrIChpbmRleHplcm8pOiB3ZSBzZXQgYGhhbmRsZUV4Y2VwdGlvbnNgIGhlcmUgYmVjYXVzZSBpdCdzIHRoZVxuICAgIC8vIHByZWRpY2F0ZSBjaGVja2VkIGluIEV4Y2VwdGlvbkhhbmRsZXIucHJvdG90eXBlLl9fZ2V0RXhjZXB0aW9uSGFuZGxlcnNcbiAgICBfdGhpcy5oYW5kbGVFeGNlcHRpb25zID0gdHJ1ZTtcbiAgICBfdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyB0aGUgaW5mbyBvYmplY3QgdG8gb3VyIHRyYW5zcG9ydCBpbnN0YW5jZSBpZiAoYW5kIG9ubHkgaWYpIHRoZVxuICAgKiBgZXhjZXB0aW9uYCBwcm9wZXJ0eSBpcyBzZXQgb24gdGhlIGluZm8uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGVuYyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHBhcmFtIHttaXhlZH0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaGVyaXRzKEV4Y2VwdGlvblN0cmVhbSwgX1dyaXRhYmxlKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhFeGNlcHRpb25TdHJlYW0sIFt7XG4gICAga2V5OiBcIl93cml0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfd3JpdGUoaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGluZm8uZXhjZXB0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydC5sb2coaW5mbywgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfV0pO1xufShXcml0YWJsZSk7IiwgIi8qKlxuICogZXhjZXB0aW9uLWhhbmRsZXIuanM6IE9iamVjdCBmb3IgaGFuZGxpbmcgdW5jYXVnaHRFeGNlcHRpb24gZXZlbnRzLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG52YXIgYXN5bmNGb3JFYWNoID0gcmVxdWlyZSgnYXN5bmMvZm9yRWFjaCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnQGRhYmgvZGlhZ25vc3RpY3MnKSgnd2luc3RvbjpleGNlcHRpb24nKTtcbnZhciBvbmNlID0gcmVxdWlyZSgnb25lLXRpbWUnKTtcbnZhciBzdGFja1RyYWNlID0gcmVxdWlyZSgnc3RhY2stdHJhY2UnKTtcbnZhciBFeGNlcHRpb25TdHJlYW0gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbi1zdHJlYW0nKTtcblxuLyoqXG4gKiBPYmplY3QgZm9yIGhhbmRsaW5nIHVuY2F1Z2h0RXhjZXB0aW9uIGV2ZW50cy5cbiAqIEB0eXBlIHtFeGNlcHRpb25IYW5kbGVyfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBUT0RPOiBhZGQgY29udHJ1Y3RvciBkZXNjcmlwdGlvblxuICAgKiBAcGFyYW0geyFMb2dnZXJ9IGxvZ2dlciAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gRXhjZXB0aW9uSGFuZGxlcihsb2dnZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXhjZXB0aW9uSGFuZGxlcik7XG4gICAgaWYgKCFsb2dnZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTG9nZ2VyIGlzIHJlcXVpcmVkIHRvIGhhbmRsZSBleGNlcHRpb25zJyk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgIHRoaXMuaGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBgdW5jYXVnaHRFeGNlcHRpb25gIGV2ZW50cyBmb3IgdGhlIGN1cnJlbnQgcHJvY2VzcyBieSBhZGRpbmcgYW55XG4gICAqIGhhbmRsZXJzIHBhc3NlZCBpbi5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRXhjZXB0aW9uSGFuZGxlciwgW3tcbiAgICBrZXk6IFwiaGFuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICByZXR1cm4gYXJnLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fYWRkSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fYWRkSGFuZGxlcihhcmcpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXRoaXMuY2F0Y2hlcikge1xuICAgICAgICB0aGlzLmNhdGNoZXIgPSB0aGlzLl91bmNhdWdodEV4Y2VwdGlvbi5iaW5kKHRoaXMpO1xuICAgICAgICBwcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIHRoaXMuY2F0Y2hlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbnkgaGFuZGxlcnMgdG8gYHVuY2F1Z2h0RXhjZXB0aW9uYCBldmVudHMgZm9yIHRoZSBjdXJyZW50XG4gICAgICogcHJvY2Vzcy4gVGhpcyBkb2VzIG5vdCBtb2RpZnkgdGhlIHN0YXRlIG9mIHRoZSBgdGhpcy5oYW5kbGVyc2Agc2V0LlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidW5oYW5kbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5oYW5kbGUoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIGlmICh0aGlzLmNhdGNoZXIpIHtcbiAgICAgICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcigndW5jYXVnaHRFeGNlcHRpb24nLCB0aGlzLmNhdGNoZXIpO1xuICAgICAgICB0aGlzLmNhdGNoZXIgPSBmYWxzZTtcbiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmhhbmRsZXJzLnZhbHVlcygpKS5mb3JFYWNoKGZ1bmN0aW9uICh3cmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5sb2dnZXIudW5waXBlKHdyYXBwZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUT0RPOiBhZGQgbWV0aG9kIGRlc2NyaXB0aW9uXG4gICAgICogQHBhcmFtIHtFcnJvcn0gZXJyIC0gRXJyb3IgdG8gZ2V0IGluZm9ybWF0aW9uIGFib3V0LlxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldEFsbEluZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsSW5mbyhlcnIpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gbnVsbDtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgbWVzc2FnZSA9IHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogZXJyLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogZXJyLFxuICAgICAgICAvLyBUT0RPIChpbmRleHplcm8pOiBob3cgZG8gd2UgY29uZmlndXJlIHRoaXM/XG4gICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiBbXCJ1bmNhdWdodEV4Y2VwdGlvbjogXCIuY29uY2F0KG1lc3NhZ2UgfHwgJyhubyBlcnJvciBtZXNzYWdlKScpLCBlcnIgJiYgZXJyLnN0YWNrIHx8ICcgIE5vIHN0YWNrIHRyYWNlJ10uam9pbignXFxuJyksXG4gICAgICAgIHN0YWNrOiBlcnIgJiYgZXJyLnN0YWNrLFxuICAgICAgICBleGNlcHRpb246IHRydWUsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCkudG9TdHJpbmcoKSxcbiAgICAgICAgcHJvY2VzczogdGhpcy5nZXRQcm9jZXNzSW5mbygpLFxuICAgICAgICBvczogdGhpcy5nZXRPc0luZm8oKSxcbiAgICAgICAgdHJhY2U6IHRoaXMuZ2V0VHJhY2UoZXJyKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCByZWxldmFudCBwcm9jZXNzIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRQcm9jZXNzSW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9jZXNzSW5mbygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBpZDogcHJvY2Vzcy5waWQsXG4gICAgICAgIHVpZDogcHJvY2Vzcy5nZXR1aWQgPyBwcm9jZXNzLmdldHVpZCgpIDogbnVsbCxcbiAgICAgICAgZ2lkOiBwcm9jZXNzLmdldGdpZCA/IHByb2Nlc3MuZ2V0Z2lkKCkgOiBudWxsLFxuICAgICAgICBjd2Q6IHByb2Nlc3MuY3dkKCksXG4gICAgICAgIGV4ZWNQYXRoOiBwcm9jZXNzLmV4ZWNQYXRoLFxuICAgICAgICB2ZXJzaW9uOiBwcm9jZXNzLnZlcnNpb24sXG4gICAgICAgIGFyZ3Y6IHByb2Nlc3MuYXJndixcbiAgICAgICAgbWVtb3J5VXNhZ2U6IHByb2Nlc3MubWVtb3J5VXNhZ2UoKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCByZWxldmFudCBPUyBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnRseSBydW5uaW5nIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0T3NJbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9zSW5mbygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxvYWRhdmc6IG9zLmxvYWRhdmcoKSxcbiAgICAgICAgdXB0aW1lOiBvcy51cHRpbWUoKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgc3RhY2sgdHJhY2UgZm9yIHRoZSBzcGVjaWZpZWQgZXJyb3IuXG4gICAgICogQHBhcmFtIHttaXhlZH0gZXJyIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldFRyYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYWNlKGVycikge1xuICAgICAgdmFyIHRyYWNlID0gZXJyID8gc3RhY2tUcmFjZS5wYXJzZShlcnIpIDogc3RhY2tUcmFjZS5nZXQoKTtcbiAgICAgIHJldHVybiB0cmFjZS5tYXAoZnVuY3Rpb24gKHNpdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb2x1bW46IHNpdGUuZ2V0Q29sdW1uTnVtYmVyKCksXG4gICAgICAgICAgZmlsZTogc2l0ZS5nZXRGaWxlTmFtZSgpLFxuICAgICAgICAgIFwiZnVuY3Rpb25cIjogc2l0ZS5nZXRGdW5jdGlvbk5hbWUoKSxcbiAgICAgICAgICBsaW5lOiBzaXRlLmdldExpbmVOdW1iZXIoKSxcbiAgICAgICAgICBtZXRob2Q6IHNpdGUuZ2V0TWV0aG9kTmFtZSgpLFxuICAgICAgICAgIFwibmF0aXZlXCI6IHNpdGUuaXNOYXRpdmUoKVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGVscGVyIG1ldGhvZCB0byBhZGQgYSB0cmFuc3BvcnQgYXMgYW4gZXhjZXB0aW9uIGhhbmRsZXIuXG4gICAgICogQHBhcmFtIHtUcmFuc3BvcnR9IGhhbmRsZXIgLSBUaGUgdHJhbnNwb3J0IHRvIGFkZCBhcyBhbiBleGNlcHRpb24gaGFuZGxlci5cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfYWRkSGFuZGxlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgICBpZiAoIXRoaXMuaGFuZGxlcnMuaGFzKGhhbmRsZXIpKSB7XG4gICAgICAgIGhhbmRsZXIuaGFuZGxlRXhjZXB0aW9ucyA9IHRydWU7XG4gICAgICAgIHZhciB3cmFwcGVyID0gbmV3IEV4Y2VwdGlvblN0cmVhbShoYW5kbGVyKTtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoaGFuZGxlciwgd3JhcHBlcik7XG4gICAgICAgIHRoaXMubG9nZ2VyLnBpcGUod3JhcHBlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhbGwgcmVsZXZhbnQgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBgZXJyYCBhbmQgZXhpdHMgdGhlIGN1cnJlbnRcbiAgICAgKiBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVyciAtIEVycm9yIHRvIGhhbmRsZVxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX3VuY2F1Z2h0RXhjZXB0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91bmNhdWdodEV4Y2VwdGlvbihlcnIpIHtcbiAgICAgIHZhciBpbmZvID0gdGhpcy5nZXRBbGxJbmZvKGVycik7XG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLl9nZXRFeGNlcHRpb25IYW5kbGVycygpO1xuICAgICAgLy8gQ2FsY3VsYXRlIGlmIHdlIHNob3VsZCBleGl0IG9uIHRoaXMgZXJyb3JcbiAgICAgIHZhciBkb0V4aXQgPSB0eXBlb2YgdGhpcy5sb2dnZXIuZXhpdE9uRXJyb3IgPT09ICdmdW5jdGlvbicgPyB0aGlzLmxvZ2dlci5leGl0T25FcnJvcihlcnIpIDogdGhpcy5sb2dnZXIuZXhpdE9uRXJyb3I7XG4gICAgICB2YXIgdGltZW91dDtcbiAgICAgIGlmICghaGFuZGxlcnMubGVuZ3RoICYmIGRvRXhpdCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ3dpbnN0b246IGV4aXRPbkVycm9yIGNhbm5vdCBiZSB0cnVlIHdpdGggbm8gZXhjZXB0aW9uIGhhbmRsZXJzLicpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ3dpbnN0b246IG5vdCBleGl0aW5nIHByb2Nlc3MuJyk7XG4gICAgICAgIGRvRXhpdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZ3JhY2VmdWxFeGl0KCkge1xuICAgICAgICBkZWJ1ZygnZG9FeGl0JywgZG9FeGl0KTtcbiAgICAgICAgZGVidWcoJ3Byb2Nlc3MuX2V4aXRpbmcnLCBwcm9jZXNzLl9leGl0aW5nKTtcbiAgICAgICAgaWYgKGRvRXhpdCAmJiAhcHJvY2Vzcy5fZXhpdGluZykge1xuICAgICAgICAgIC8vIFJlbWFyazogQ3VycmVudGx5IGlnbm9yaW5nIGFueSBleGNlcHRpb25zIGZyb20gdHJhbnNwb3J0cyB3aGVuXG4gICAgICAgICAgLy8gY2F0Y2hpbmcgdW5jYXVnaHQgZXhjZXB0aW9ucy5cbiAgICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1leGl0XG4gICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWhhbmRsZXJzIHx8IGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhncmFjZWZ1bEV4aXQpO1xuICAgICAgfVxuXG4gICAgICAvLyBMb2cgdG8gYWxsIHRyYW5zcG9ydHMgYXR0ZW1wdGluZyB0byBsaXN0ZW4gZm9yIHdoZW4gdGhleSBhcmUgY29tcGxldGVkLlxuICAgICAgYXN5bmNGb3JFYWNoKGhhbmRsZXJzLCBmdW5jdGlvbiAoaGFuZGxlciwgbmV4dCkge1xuICAgICAgICB2YXIgZG9uZSA9IG9uY2UobmV4dCk7XG4gICAgICAgIHZhciB0cmFuc3BvcnQgPSBoYW5kbGVyLnRyYW5zcG9ydCB8fCBoYW5kbGVyO1xuXG4gICAgICAgIC8vIERlYnVnIHdyYXBwaW5nIHNvIHRoYXQgd2UgY2FuIGluc3BlY3Qgd2hhdCdzIGdvaW5nIG9uIHVuZGVyIHRoZSBjb3ZlcnMuXG4gICAgICAgIGZ1bmN0aW9uIG9uRG9uZShldmVudCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWJ1ZyhldmVudCk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc3BvcnQuX2VuZGluZyA9IHRydWU7XG4gICAgICAgIHRyYW5zcG9ydC5vbmNlKCdmaW5pc2gnLCBvbkRvbmUoJ2ZpbmlzaGVkJykpO1xuICAgICAgICB0cmFuc3BvcnQub25jZSgnZXJyb3InLCBvbkRvbmUoJ2Vycm9yJykpO1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZG9FeGl0ICYmIGdyYWNlZnVsRXhpdCgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coaW5mbyk7XG5cbiAgICAgIC8vIElmIGV4aXRPbkVycm9yIGlzIHRydWUsIHRoZW4gb25seSBhbGxvdyB0aGUgbG9nZ2luZyBvZiBleGNlcHRpb25zIHRvXG4gICAgICAvLyB0YWtlIHVwIHRvIGAzMDAwbXNgLlxuICAgICAgaWYgKGRvRXhpdCkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChncmFjZWZ1bEV4aXQsIDMwMDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgdHJhbnNwb3J0cyBhbmQgZXhjZXB0aW9uSGFuZGxlcnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge0FycmF5fSAtIExpc3Qgb2YgdHJhbnNwb3J0cyBhbmQgZXhjZXB0aW9uSGFuZGxlcnMgZm9yIHRoaXNcbiAgICAgKiBpbnN0YW5jZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9nZXRFeGNlcHRpb25IYW5kbGVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RXhjZXB0aW9uSGFuZGxlcnMoKSB7XG4gICAgICAvLyBSZW1hcmsgKGluZGV4emVybyk6IHNpbmNlIGBsb2dnZXIudHJhbnNwb3J0c2AgcmV0dXJucyBhbGwgb2YgdGhlIHBpcGVzXG4gICAgICAvLyBmcm9tIHRoZSBfcmVhZGFibGVTdGF0ZSBvZiB0aGUgc3RyZWFtIHdlIGFjdHVhbGx5IGdldCB0aGUgam9pbiBvZiB0aGVcbiAgICAgIC8vIGV4cGxpY2l0IGhhbmRsZXJzIGFuZCB0aGUgaW1wbGljaXQgdHJhbnNwb3J0cyB3aXRoXG4gICAgICAvLyBgaGFuZGxlRXhjZXB0aW9uczogdHJ1ZWBcbiAgICAgIHJldHVybiB0aGlzLmxvZ2dlci50cmFuc3BvcnRzLmZpbHRlcihmdW5jdGlvbiAod3JhcCkge1xuICAgICAgICB2YXIgdHJhbnNwb3J0ID0gd3JhcC50cmFuc3BvcnQgfHwgd3JhcDtcbiAgICAgICAgcmV0dXJuIHRyYW5zcG9ydC5oYW5kbGVFeGNlcHRpb25zO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG59KCk7IiwgIi8qKlxuICogcmVqZWN0aW9uLXN0cmVhbS5qczogVE9ETzogYWRkIGZpbGUgaGVhZGVyIGhhbmRsZXIuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKSxcbiAgV3JpdGFibGUgPSBfcmVxdWlyZS5Xcml0YWJsZTtcblxuLyoqXG4gKiBUT0RPOiBhZGQgY2xhc3MgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7UmVqZWN0aW9uU3RyZWFtfVxuICogQGV4dGVuZHMge1dyaXRhYmxlfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1dyaXRhYmxlKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIFJlamVjdGlvblN0cmVhbSByZXNwb25zaWJsZSBmb3Igd3JhcHBpbmcgYVxuICAgKiBUcmFuc3BvcnRTdHJlYW07IG9ubHkgYWxsb3dpbmcgd3JpdGVzIG9mIGBpbmZvYCBvYmplY3RzIHdpdGhcbiAgICogYGluZm8ucmVqZWN0aW9uYCBzZXQgdG8gdHJ1ZS5cbiAgICogQHBhcmFtIHshVHJhbnNwb3J0U3RyZWFtfSB0cmFuc3BvcnQgLSBTdHJlYW0gdG8gZmlsdGVyIHRvIHJlamVjdGlvbnNcbiAgICovXG4gIGZ1bmN0aW9uIFJlamVjdGlvblN0cmVhbSh0cmFuc3BvcnQpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlamVjdGlvblN0cmVhbSk7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIFJlamVjdGlvblN0cmVhbSwgW3tcbiAgICAgIG9iamVjdE1vZGU6IHRydWVcbiAgICB9XSk7XG4gICAgaWYgKCF0cmFuc3BvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVqZWN0aW9uU3RyZWFtIHJlcXVpcmVzIGEgVHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLicpO1xuICAgIH1cbiAgICBfdGhpcy5oYW5kbGVSZWplY3Rpb25zID0gdHJ1ZTtcbiAgICBfdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyB0aGUgaW5mbyBvYmplY3QgdG8gb3VyIHRyYW5zcG9ydCBpbnN0YW5jZSBpZiAoYW5kIG9ubHkgaWYpIHRoZVxuICAgKiBgcmVqZWN0aW9uYCBwcm9wZXJ0eSBpcyBzZXQgb24gdGhlIGluZm8uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGVuYyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHBhcmFtIHttaXhlZH0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaGVyaXRzKFJlamVjdGlvblN0cmVhbSwgX1dyaXRhYmxlKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhSZWplY3Rpb25TdHJlYW0sIFt7XG4gICAga2V5OiBcIl93cml0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfd3JpdGUoaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGluZm8ucmVqZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydC5sb2coaW5mbywgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfV0pO1xufShXcml0YWJsZSk7IiwgIi8qKlxuICogZXhjZXB0aW9uLWhhbmRsZXIuanM6IE9iamVjdCBmb3IgaGFuZGxpbmcgdW5jYXVnaHRFeGNlcHRpb24gZXZlbnRzLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG52YXIgYXN5bmNGb3JFYWNoID0gcmVxdWlyZSgnYXN5bmMvZm9yRWFjaCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnQGRhYmgvZGlhZ25vc3RpY3MnKSgnd2luc3RvbjpyZWplY3Rpb24nKTtcbnZhciBvbmNlID0gcmVxdWlyZSgnb25lLXRpbWUnKTtcbnZhciBzdGFja1RyYWNlID0gcmVxdWlyZSgnc3RhY2stdHJhY2UnKTtcbnZhciBSZWplY3Rpb25TdHJlYW0gPSByZXF1aXJlKCcuL3JlamVjdGlvbi1zdHJlYW0nKTtcblxuLyoqXG4gKiBPYmplY3QgZm9yIGhhbmRsaW5nIHVuaGFuZGxlZFJlamVjdGlvbiBldmVudHMuXG4gKiBAdHlwZSB7UmVqZWN0aW9uSGFuZGxlcn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogVE9ETzogYWRkIGNvbnRydWN0b3IgZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHshTG9nZ2VyfSBsb2dnZXIgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb25cbiAgICovXG4gIGZ1bmN0aW9uIFJlamVjdGlvbkhhbmRsZXIobG9nZ2VyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlamVjdGlvbkhhbmRsZXIpO1xuICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvZ2dlciBpcyByZXF1aXJlZCB0byBoYW5kbGUgcmVqZWN0aW9ucycpO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLmhhbmRsZXJzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYHVuaGFuZGxlZFJlamVjdGlvbmAgZXZlbnRzIGZvciB0aGUgY3VycmVudCBwcm9jZXNzIGJ5IGFkZGluZyBhbnlcbiAgICogaGFuZGxlcnMgcGFzc2VkIGluLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhSZWplY3Rpb25IYW5kbGVyLCBbe1xuICAgIGtleTogXCJoYW5kbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgIHJldHVybiBhcmcuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9hZGRIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9hZGRIYW5kbGVyKGFyZyk7XG4gICAgICB9KTtcbiAgICAgIGlmICghdGhpcy5jYXRjaGVyKSB7XG4gICAgICAgIHRoaXMuY2F0Y2hlciA9IHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbi5iaW5kKHRoaXMpO1xuICAgICAgICBwcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCB0aGlzLmNhdGNoZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW55IGhhbmRsZXJzIHRvIGB1bmhhbmRsZWRSZWplY3Rpb25gIGV2ZW50cyBmb3IgdGhlIGN1cnJlbnRcbiAgICAgKiBwcm9jZXNzLiBUaGlzIGRvZXMgbm90IG1vZGlmeSB0aGUgc3RhdGUgb2YgdGhlIGB0aGlzLmhhbmRsZXJzYCBzZXQuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ1bmhhbmRsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmhhbmRsZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgaWYgKHRoaXMuY2F0Y2hlcikge1xuICAgICAgICBwcm9jZXNzLnJlbW92ZUxpc3RlbmVyKCd1bmhhbmRsZWRSZWplY3Rpb24nLCB0aGlzLmNhdGNoZXIpO1xuICAgICAgICB0aGlzLmNhdGNoZXIgPSBmYWxzZTtcbiAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmhhbmRsZXJzLnZhbHVlcygpKS5mb3JFYWNoKGZ1bmN0aW9uICh3cmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5sb2dnZXIudW5waXBlKHdyYXBwZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUT0RPOiBhZGQgbWV0aG9kIGRlc2NyaXB0aW9uXG4gICAgICogQHBhcmFtIHtFcnJvcn0gZXJyIC0gRXJyb3IgdG8gZ2V0IGluZm9ybWF0aW9uIGFib3V0LlxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldEFsbEluZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsSW5mbyhlcnIpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gbnVsbDtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgbWVzc2FnZSA9IHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnID8gZXJyIDogZXJyLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogZXJyLFxuICAgICAgICAvLyBUT0RPIChpbmRleHplcm8pOiBob3cgZG8gd2UgY29uZmlndXJlIHRoaXM/XG4gICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiBbXCJ1bmhhbmRsZWRSZWplY3Rpb246IFwiLmNvbmNhdChtZXNzYWdlIHx8ICcobm8gZXJyb3IgbWVzc2FnZSknKSwgZXJyICYmIGVyci5zdGFjayB8fCAnICBObyBzdGFjayB0cmFjZSddLmpvaW4oJ1xcbicpLFxuICAgICAgICBzdGFjazogZXJyICYmIGVyci5zdGFjayxcbiAgICAgICAgcmVqZWN0aW9uOiB0cnVlLFxuICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLnRvU3RyaW5nKCksXG4gICAgICAgIHByb2Nlc3M6IHRoaXMuZ2V0UHJvY2Vzc0luZm8oKSxcbiAgICAgICAgb3M6IHRoaXMuZ2V0T3NJbmZvKCksXG4gICAgICAgIHRyYWNlOiB0aGlzLmdldFRyYWNlKGVycilcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgcmVsZXZhbnQgcHJvY2VzcyBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnRseSBydW5uaW5nIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UHJvY2Vzc0luZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvY2Vzc0luZm8oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwaWQ6IHByb2Nlc3MucGlkLFxuICAgICAgICB1aWQ6IHByb2Nlc3MuZ2V0dWlkID8gcHJvY2Vzcy5nZXR1aWQoKSA6IG51bGwsXG4gICAgICAgIGdpZDogcHJvY2Vzcy5nZXRnaWQgPyBwcm9jZXNzLmdldGdpZCgpIDogbnVsbCxcbiAgICAgICAgY3dkOiBwcm9jZXNzLmN3ZCgpLFxuICAgICAgICBleGVjUGF0aDogcHJvY2Vzcy5leGVjUGF0aCxcbiAgICAgICAgdmVyc2lvbjogcHJvY2Vzcy52ZXJzaW9uLFxuICAgICAgICBhcmd2OiBwcm9jZXNzLmFyZ3YsXG4gICAgICAgIG1lbW9yeVVzYWdlOiBwcm9jZXNzLm1lbW9yeVVzYWdlKClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgcmVsZXZhbnQgT1MgaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldE9zSW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPc0luZm8oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsb2FkYXZnOiBvcy5sb2FkYXZnKCksXG4gICAgICAgIHVwdGltZTogb3MudXB0aW1lKClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0YWNrIHRyYWNlIGZvciB0aGUgc3BlY2lmaWVkIGVycm9yLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGVyciAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRUcmFjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFjZShlcnIpIHtcbiAgICAgIHZhciB0cmFjZSA9IGVyciA/IHN0YWNrVHJhY2UucGFyc2UoZXJyKSA6IHN0YWNrVHJhY2UuZ2V0KCk7XG4gICAgICByZXR1cm4gdHJhY2UubWFwKGZ1bmN0aW9uIChzaXRlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29sdW1uOiBzaXRlLmdldENvbHVtbk51bWJlcigpLFxuICAgICAgICAgIGZpbGU6IHNpdGUuZ2V0RmlsZU5hbWUoKSxcbiAgICAgICAgICBcImZ1bmN0aW9uXCI6IHNpdGUuZ2V0RnVuY3Rpb25OYW1lKCksXG4gICAgICAgICAgbGluZTogc2l0ZS5nZXRMaW5lTnVtYmVyKCksXG4gICAgICAgICAgbWV0aG9kOiBzaXRlLmdldE1ldGhvZE5hbWUoKSxcbiAgICAgICAgICBcIm5hdGl2ZVwiOiBzaXRlLmlzTmF0aXZlKClcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBtZXRob2QgdG8gYWRkIGEgdHJhbnNwb3J0IGFzIGFuIGV4Y2VwdGlvbiBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSB7VHJhbnNwb3J0fSBoYW5kbGVyIC0gVGhlIHRyYW5zcG9ydCB0byBhZGQgYXMgYW4gZXhjZXB0aW9uIGhhbmRsZXIuXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2FkZEhhbmRsZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZEhhbmRsZXIoaGFuZGxlcikge1xuICAgICAgaWYgKCF0aGlzLmhhbmRsZXJzLmhhcyhoYW5kbGVyKSkge1xuICAgICAgICBoYW5kbGVyLmhhbmRsZVJlamVjdGlvbnMgPSB0cnVlO1xuICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBSZWplY3Rpb25TdHJlYW0oaGFuZGxlcik7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMuc2V0KGhhbmRsZXIsIHdyYXBwZXIpO1xuICAgICAgICB0aGlzLmxvZ2dlci5waXBlKHdyYXBwZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYWxsIHJlbGV2YW50IGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgYGVycmAgYW5kIGV4aXRzIHRoZSBjdXJyZW50XG4gICAgICogcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnIgLSBFcnJvciB0byBoYW5kbGVcbiAgICAgKiBAcmV0dXJucyB7bWl4ZWR9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl91bmhhbmRsZWRSZWplY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VuaGFuZGxlZFJlamVjdGlvbihlcnIpIHtcbiAgICAgIHZhciBpbmZvID0gdGhpcy5nZXRBbGxJbmZvKGVycik7XG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLl9nZXRSZWplY3Rpb25IYW5kbGVycygpO1xuICAgICAgLy8gQ2FsY3VsYXRlIGlmIHdlIHNob3VsZCBleGl0IG9uIHRoaXMgZXJyb3JcbiAgICAgIHZhciBkb0V4aXQgPSB0eXBlb2YgdGhpcy5sb2dnZXIuZXhpdE9uRXJyb3IgPT09ICdmdW5jdGlvbicgPyB0aGlzLmxvZ2dlci5leGl0T25FcnJvcihlcnIpIDogdGhpcy5sb2dnZXIuZXhpdE9uRXJyb3I7XG4gICAgICB2YXIgdGltZW91dDtcbiAgICAgIGlmICghaGFuZGxlcnMubGVuZ3RoICYmIGRvRXhpdCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ3dpbnN0b246IGV4aXRPbkVycm9yIGNhbm5vdCBiZSB0cnVlIHdpdGggbm8gcmVqZWN0aW9uIGhhbmRsZXJzLicpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ3dpbnN0b246IG5vdCBleGl0aW5nIHByb2Nlc3MuJyk7XG4gICAgICAgIGRvRXhpdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZ3JhY2VmdWxFeGl0KCkge1xuICAgICAgICBkZWJ1ZygnZG9FeGl0JywgZG9FeGl0KTtcbiAgICAgICAgZGVidWcoJ3Byb2Nlc3MuX2V4aXRpbmcnLCBwcm9jZXNzLl9leGl0aW5nKTtcbiAgICAgICAgaWYgKGRvRXhpdCAmJiAhcHJvY2Vzcy5fZXhpdGluZykge1xuICAgICAgICAgIC8vIFJlbWFyazogQ3VycmVudGx5IGlnbm9yaW5nIGFueSByZWplY3Rpb25zIGZyb20gdHJhbnNwb3J0cyB3aGVuXG4gICAgICAgICAgLy8gY2F0Y2hpbmcgdW5oYW5kbGVkIHJlamVjdGlvbnMuXG4gICAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZXhpdFxuICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFoYW5kbGVycyB8fCBoYW5kbGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZ3JhY2VmdWxFeGl0KTtcbiAgICAgIH1cblxuICAgICAgLy8gTG9nIHRvIGFsbCB0cmFuc3BvcnRzIGF0dGVtcHRpbmcgdG8gbGlzdGVuIGZvciB3aGVuIHRoZXkgYXJlIGNvbXBsZXRlZC5cbiAgICAgIGFzeW5jRm9yRWFjaChoYW5kbGVycywgZnVuY3Rpb24gKGhhbmRsZXIsIG5leHQpIHtcbiAgICAgICAgdmFyIGRvbmUgPSBvbmNlKG5leHQpO1xuICAgICAgICB2YXIgdHJhbnNwb3J0ID0gaGFuZGxlci50cmFuc3BvcnQgfHwgaGFuZGxlcjtcblxuICAgICAgICAvLyBEZWJ1ZyB3cmFwcGluZyBzbyB0aGF0IHdlIGNhbiBpbnNwZWN0IHdoYXQncyBnb2luZyBvbiB1bmRlciB0aGUgY292ZXJzLlxuICAgICAgICBmdW5jdGlvbiBvbkRvbmUoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGVidWcoZXZlbnQpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNwb3J0Ll9lbmRpbmcgPSB0cnVlO1xuICAgICAgICB0cmFuc3BvcnQub25jZSgnZmluaXNoJywgb25Eb25lKCdmaW5pc2hlZCcpKTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uY2UoJ2Vycm9yJywgb25Eb25lKCdlcnJvcicpKTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRvRXhpdCAmJiBncmFjZWZ1bEV4aXQoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGluZm8pO1xuXG4gICAgICAvLyBJZiBleGl0T25FcnJvciBpcyB0cnVlLCB0aGVuIG9ubHkgYWxsb3cgdGhlIGxvZ2dpbmcgb2YgZXhjZXB0aW9ucyB0b1xuICAgICAgLy8gdGFrZSB1cCB0byBgMzAwMG1zYC5cbiAgICAgIGlmIChkb0V4aXQpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZ3JhY2VmdWxFeGl0LCAzMDAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIHRyYW5zcG9ydHMgYW5kIGV4Y2VwdGlvbkhhbmRsZXJzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gLSBMaXN0IG9mIHRyYW5zcG9ydHMgYW5kIGV4Y2VwdGlvbkhhbmRsZXJzIGZvciB0aGlzXG4gICAgICogaW5zdGFuY2UuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0UmVqZWN0aW9uSGFuZGxlcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFJlamVjdGlvbkhhbmRsZXJzKCkge1xuICAgICAgLy8gUmVtYXJrIChpbmRleHplcm8pOiBzaW5jZSBgbG9nZ2VyLnRyYW5zcG9ydHNgIHJldHVybnMgYWxsIG9mIHRoZSBwaXBlc1xuICAgICAgLy8gZnJvbSB0aGUgX3JlYWRhYmxlU3RhdGUgb2YgdGhlIHN0cmVhbSB3ZSBhY3R1YWxseSBnZXQgdGhlIGpvaW4gb2YgdGhlXG4gICAgICAvLyBleHBsaWNpdCBoYW5kbGVycyBhbmQgdGhlIGltcGxpY2l0IHRyYW5zcG9ydHMgd2l0aFxuICAgICAgLy8gYGhhbmRsZVJlamVjdGlvbnM6IHRydWVgXG4gICAgICByZXR1cm4gdGhpcy5sb2dnZXIudHJhbnNwb3J0cy5maWx0ZXIoZnVuY3Rpb24gKHdyYXApIHtcbiAgICAgICAgdmFyIHRyYW5zcG9ydCA9IHdyYXAudHJhbnNwb3J0IHx8IHdyYXA7XG4gICAgICAgIHJldHVybiB0cmFuc3BvcnQuaGFuZGxlUmVqZWN0aW9ucztcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xufSgpOyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBXcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuY29uc3QgeyBMRVZFTCB9ID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIFRyYW5zcG9ydFN0cmVhbS4gVGhpcyBpcyB0aGUgYmFzZSBwcm90b3R5cGVcbiAqIHRoYXQgYWxsIGB3aW5zdG9uID49IDNgIHRyYW5zcG9ydHMgc2hvdWxkIGluaGVyaXQgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhpcyBUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmxldmVsIC0gSGlnaGVzdCBsZXZlbCBhY2NvcmRpbmcgdG8gUkZDNTQyNC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5oYW5kbGVFeGNlcHRpb25zIC0gSWYgdHJ1ZSwgaW5mbyB3aXRoXG4gKiB7IGV4Y2VwdGlvbjogdHJ1ZSB9IHdpbGwgYmUgd3JpdHRlbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMubG9nIC0gQ3VzdG9tIGxvZyBmdW5jdGlvbiBmb3Igc2ltcGxlIFRyYW5zcG9ydFxuICogY3JlYXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuY2xvc2UgLSBDYWxsZWQgb24gXCJ1bnBpcGVcIiBmcm9tIHBhcmVudC5cbiAqL1xuY29uc3QgVHJhbnNwb3J0U3RyZWFtID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUcmFuc3BvcnRTdHJlYW0ob3B0aW9ucyA9IHt9KSB7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgeyBvYmplY3RNb2RlOiB0cnVlLCBoaWdoV2F0ZXJNYXJrOiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgfSk7XG5cbiAgdGhpcy5mb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgdGhpcy5sZXZlbCA9IG9wdGlvbnMubGV2ZWw7XG4gIHRoaXMuaGFuZGxlRXhjZXB0aW9ucyA9IG9wdGlvbnMuaGFuZGxlRXhjZXB0aW9ucztcbiAgdGhpcy5oYW5kbGVSZWplY3Rpb25zID0gb3B0aW9ucy5oYW5kbGVSZWplY3Rpb25zO1xuICB0aGlzLnNpbGVudCA9IG9wdGlvbnMuc2lsZW50O1xuXG4gIGlmIChvcHRpb25zLmxvZykgdGhpcy5sb2cgPSBvcHRpb25zLmxvZztcbiAgaWYgKG9wdGlvbnMubG9ndikgdGhpcy5sb2d2ID0gb3B0aW9ucy5sb2d2O1xuICBpZiAob3B0aW9ucy5jbG9zZSkgdGhpcy5jbG9zZSA9IG9wdGlvbnMuY2xvc2U7XG5cbiAgLy8gR2V0IHRoZSBsZXZlbHMgZnJvbSB0aGUgc291cmNlIHdlIGFyZSBwaXBlZCBmcm9tLlxuICB0aGlzLm9uY2UoJ3BpcGUnLCBsb2dnZXIgPT4ge1xuICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogdGhpcyBib29ra2VlcGluZyBjYW4gb25seSBzdXBwb3J0IG11bHRpcGxlXG4gICAgLy8gTG9nZ2VyIHBhcmVudHMgd2l0aCB0aGUgc2FtZSBgbGV2ZWxzYC4gVGhpcyBjb21lcyBpbnRvIHBsYXkgaW5cbiAgICAvLyB0aGUgYHdpbnN0b24uQ29udGFpbmVyYCBjb2RlIGluIHdoaWNoIGBjb250YWluZXIuYWRkYCB0YWtlc1xuICAgIC8vIGEgZnVsbHkgcmVhbGl6ZWQgc2V0IG9mIG9wdGlvbnMgd2l0aCBwcmUtY29uc3RydWN0ZWQgVHJhbnNwb3J0U3RyZWFtcy5cbiAgICB0aGlzLmxldmVscyA9IGxvZ2dlci5sZXZlbHM7XG4gICAgdGhpcy5wYXJlbnQgPSBsb2dnZXI7XG4gIH0pO1xuXG4gIC8vIElmIGFuZC9vciB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgaW5zdGFuY2VcbiAgdGhpcy5vbmNlKCd1bnBpcGUnLCBzcmMgPT4ge1xuICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogdGhpcyBib29ra2VlcGluZyBjYW4gb25seSBzdXBwb3J0IG11bHRpcGxlXG4gICAgLy8gTG9nZ2VyIHBhcmVudHMgd2l0aCB0aGUgc2FtZSBgbGV2ZWxzYC4gVGhpcyBjb21lcyBpbnRvIHBsYXkgaW5cbiAgICAvLyB0aGUgYHdpbnN0b24uQ29udGFpbmVyYCBjb2RlIGluIHdoaWNoIGBjb250YWluZXIuYWRkYCB0YWtlc1xuICAgIC8vIGEgZnVsbHkgcmVhbGl6ZWQgc2V0IG9mIG9wdGlvbnMgd2l0aCBwcmUtY29uc3RydWN0ZWQgVHJhbnNwb3J0U3RyZWFtcy5cbiAgICBpZiAoc3JjID09PSB0aGlzLnBhcmVudCkge1xuICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgaWYgKHRoaXMuY2xvc2UpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG4vKlxuICogSW5oZXJpdCBmcm9tIFdyaXRlYWJsZSB1c2luZyBOb2RlLmpzIGJ1aWx0LWluc1xuICovXG51dGlsLmluaGVyaXRzKFRyYW5zcG9ydFN0cmVhbSwgV3JpdGFibGUpO1xuXG4vKipcbiAqIFdyaXRlcyB0aGUgaW5mbyBvYmplY3QgdG8gb3VyIHRyYW5zcG9ydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge21peGVkfSBlbmMgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5UcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZShpbmZvLCBlbmMsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLnNpbGVudCB8fCAoaW5mby5leGNlcHRpb24gPT09IHRydWUgJiYgIXRoaXMuaGFuZGxlRXhjZXB0aW9ucykpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gIH1cblxuICAvLyBSZW1hcms6IFRoaXMgaGFzIHRvIGJlIGhhbmRsZWQgaW4gdGhlIGJhc2UgdHJhbnNwb3J0IG5vdyBiZWNhdXNlIHdlXG4gIC8vIGNhbm5vdCBjb25kaXRpb25hbGx5IHdyaXRlIHRvIG91ciBwaXBlIHRhcmdldHMgYXMgc3RyZWFtLiBXZSBhbHdheXNcbiAgLy8gcHJlZmVyIGFueSBleHBsaWNpdCBsZXZlbCBzZXQgb24gdGhlIFRyYW5zcG9ydCBpdHNlbGYgZmFsbGluZyBiYWNrIHRvXG4gIC8vIGFueSBsZXZlbCBzZXQgb24gdGhlIHBhcmVudC5cbiAgY29uc3QgbGV2ZWwgPSB0aGlzLmxldmVsIHx8ICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5sZXZlbCk7XG5cbiAgaWYgKCFsZXZlbCB8fCB0aGlzLmxldmVsc1tsZXZlbF0gPj0gdGhpcy5sZXZlbHNbaW5mb1tMRVZFTF1dKSB7XG4gICAgaWYgKGluZm8gJiYgIXRoaXMuZm9ybWF0KSB7XG4gICAgICByZXR1cm4gdGhpcy5sb2coaW5mbywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGxldCBlcnJTdGF0ZTtcbiAgICBsZXQgdHJhbnNmb3JtZWQ7XG5cbiAgICAvLyBXZSB0cmFwKGFuZCByZS10aHJvdykgYW55IGVycm9ycyBnZW5lcmF0ZWQgYnkgdGhlIHVzZXItcHJvdmlkZWQgZm9ybWF0LCBidXQgYWxzb1xuICAgIC8vIGd1YXJhbnRlZSB0aGF0IHRoZSBzdHJlYW1zIGNhbGxiYWNrIGlzIGludm9rZWQgc28gdGhhdCB3ZSBjYW4gY29udGludWUgZmxvd2luZy5cbiAgICB0cnkge1xuICAgICAgdHJhbnNmb3JtZWQgPSB0aGlzLmZvcm1hdC50cmFuc2Zvcm0oT2JqZWN0LmFzc2lnbih7fSwgaW5mbyksIHRoaXMuZm9ybWF0Lm9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyU3RhdGUgPSBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGVyclN0YXRlIHx8ICF0cmFuc2Zvcm1lZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIGlmIChlcnJTdGF0ZSkgdGhyb3cgZXJyU3RhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9nKHRyYW5zZm9ybWVkLCBjYWxsYmFjayk7XG4gIH1cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG4gIHJldHVybiBjYWxsYmFjayhudWxsKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIHRoZSBiYXRjaCBvZiBpbmZvIG9iamVjdHMgKGkuZS4gXCJvYmplY3QgY2h1bmtzXCIpIHRvIG91ciB0cmFuc3BvcnRcbiAqIGluc3RhbmNlIGFmdGVyIHBlcmZvcm1pbmcgYW55IG5lY2Vzc2FyeSBmaWx0ZXJpbmcuXG4gKiBAcGFyYW0ge21peGVkfSBjaHVua3MgLSBUT0RPOiBhZGQgcGFyYW1zIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW1zIGRlc2NyaXB0aW9uLlxuICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm5zIGRlc2NyaXB0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuVHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fd3JpdGV2ID0gZnVuY3Rpb24gX3dyaXRldihjaHVua3MsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLmxvZ3YpIHtcbiAgICBjb25zdCBpbmZvcyA9IGNodW5rcy5maWx0ZXIodGhpcy5fYWNjZXB0LCB0aGlzKTtcbiAgICBpZiAoIWluZm9zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgIH1cblxuICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogZnJvbSBhIHBlcmZvcm1hbmNlIHBlcnNwZWN0aXZlIGlmIFRyYW5zcG9ydFxuICAgIC8vIGltcGxlbWVudGVycyBkbyBjaG9vc2UgdG8gaW1wbGVtZW50IGxvZ3Ygc2hvdWxkIHdlIG1ha2UgaXQgdGhlaXJcbiAgICAvLyByZXNwb25zaWJpbGl0eSB0byBpbnZva2UgdGhlaXIgZm9ybWF0P1xuICAgIHJldHVybiB0aGlzLmxvZ3YoaW5mb3MsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCF0aGlzLl9hY2NlcHQoY2h1bmtzW2ldKSkgY29udGludWU7XG5cbiAgICBpZiAoY2h1bmtzW2ldLmNodW5rICYmICF0aGlzLmZvcm1hdCkge1xuICAgICAgdGhpcy5sb2coY2h1bmtzW2ldLmNodW5rLCBjaHVua3NbaV0uY2FsbGJhY2spO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbGV0IGVyclN0YXRlO1xuICAgIGxldCB0cmFuc2Zvcm1lZDtcblxuICAgIC8vIFdlIHRyYXAoYW5kIHJlLXRocm93KSBhbnkgZXJyb3JzIGdlbmVyYXRlZCBieSB0aGUgdXNlci1wcm92aWRlZCBmb3JtYXQsIGJ1dCBhbHNvXG4gICAgLy8gZ3VhcmFudGVlIHRoYXQgdGhlIHN0cmVhbXMgY2FsbGJhY2sgaXMgaW52b2tlZCBzbyB0aGF0IHdlIGNhbiBjb250aW51ZSBmbG93aW5nLlxuICAgIHRyeSB7XG4gICAgICB0cmFuc2Zvcm1lZCA9IHRoaXMuZm9ybWF0LnRyYW5zZm9ybShcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgY2h1bmtzW2ldLmNodW5rKSxcbiAgICAgICAgdGhpcy5mb3JtYXQub3B0aW9uc1xuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGVyclN0YXRlID0gZXJyO1xuICAgIH1cblxuICAgIGlmIChlcnJTdGF0ZSB8fCAhdHJhbnNmb3JtZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgIGNodW5rc1tpXS5jYWxsYmFjaygpO1xuICAgICAgaWYgKGVyclN0YXRlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIHRocm93IGVyclN0YXRlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZyh0cmFuc2Zvcm1lZCwgY2h1bmtzW2ldLmNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIFByZWRpY2F0ZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2ZpZWQgYGluZm9gIG9uIHRoZVxuICogV3JpdGVSZXEsIGB3cml0ZWAsIHNob3VsZCBiZSBwYXNzZWQgZG93biBpbnRvIHRoZSBkZXJpdmVkXG4gKiBUcmFuc3BvcnRTdHJlYW0ncyBJL08gdmlhIGAubG9nKGluZm8sIGNhbGxiYWNrKWAuXG4gKiBAcGFyYW0ge1dyaXRlUmVxfSB3cml0ZSAtIHdpbnN0b25AMyBOb2RlLmpzIFdyaXRlUmVxIGZvciB0aGUgYGluZm9gIG9iamVjdFxuICogcmVwcmVzZW50aW5nIHRoZSBsb2cgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAtIFZhbHVlIGluZGljYXRpbmcgaWYgdGhlIGB3cml0ZWAgc2hvdWxkIGJlIGFjY2VwdGVkICZcbiAqIGxvZ2dlZC5cbiAqL1xuVHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fYWNjZXB0ID0gZnVuY3Rpb24gX2FjY2VwdCh3cml0ZSkge1xuICBjb25zdCBpbmZvID0gd3JpdGUuY2h1bms7XG4gIGlmICh0aGlzLnNpbGVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFdlIGFsd2F5cyBwcmVmZXIgYW55IGV4cGxpY2l0IGxldmVsIHNldCBvbiB0aGUgVHJhbnNwb3J0IGl0c2VsZlxuICAvLyBmYWxsaW5nIGJhY2sgdG8gYW55IGxldmVsIHNldCBvbiB0aGUgcGFyZW50LlxuICBjb25zdCBsZXZlbCA9IHRoaXMubGV2ZWwgfHwgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmxldmVsKTtcblxuICAvLyBJbW1lZGlhdGVseSBjaGVjayB0aGUgYXZlcmFnZSBjYXNlOiBsb2cgbGV2ZWwgZmlsdGVyaW5nLlxuICBpZiAoXG4gICAgaW5mby5leGNlcHRpb24gPT09IHRydWUgfHxcbiAgICAhbGV2ZWwgfHxcbiAgICB0aGlzLmxldmVsc1tsZXZlbF0gPj0gdGhpcy5sZXZlbHNbaW5mb1tMRVZFTF1dXG4gICkge1xuICAgIC8vIEVuc3VyZSB0aGUgaW5mbyBvYmplY3QgaXMgdmFsaWQgYmFzZWQgb24gYHsgZXhjZXB0aW9uIH1gOlxuICAgIC8vIDEuIHsgaGFuZGxlRXhjZXB0aW9uczogdHJ1ZSB9OiBhbGwgYGluZm9gIG9iamVjdHMgYXJlIHZhbGlkXG4gICAgLy8gMi4geyBleGNlcHRpb246IGZhbHNlIH06IGFjY2VwdGVkIGJ5IGFsbCB0cmFuc3BvcnRzLlxuICAgIGlmICh0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgfHwgaW5mby5leGNlcHRpb24gIT09IHRydWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogX25vcCBpcyBzaG9ydCBmb3IgXCJObyBvcGVyYXRpb25cIlxuICogQHJldHVybnMge0Jvb2xlYW59IEludGVudGlvbmFsbHkgZmFsc2UuXG4gKi9cblRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX25vcCA9IGZ1bmN0aW9uIF9ub3AoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZmluZWRcbiAgcmV0dXJuIHZvaWQgdW5kZWZpbmVkO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCB7IExFVkVMIH0gPSByZXF1aXJlKCd0cmlwbGUtYmVhbScpO1xuY29uc3QgVHJhbnNwb3J0U3RyZWFtID0gcmVxdWlyZSgnLi9tb2Rlcm4nKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIExlZ2FjeVRyYW5zcG9ydFN0cmVhbS4gVGhpcyBpcyBhbiBpbnRlcm5hbFxuICogd3JhcHBlciBgd2luc3RvbiA+PSAzYCB1c2VzIHRvIHdyYXAgb2xkZXIgdHJhbnNwb3J0cyBpbXBsZW1lbnRpbmdcbiAqIGxvZyhsZXZlbCwgbWVzc2FnZSwgbWV0YSkuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoaXMgVHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLlxuICogQHBhcmFtIHtUcmFuc3BvdH0gb3B0aW9ucy50cmFuc3BvcnQgLSB3aW5zdG9uQDIgb3Igb2xkZXIgVHJhbnNwb3J0IHRvIHdyYXAuXG4gKi9cblxuY29uc3QgTGVnYWN5VHJhbnNwb3J0U3RyZWFtID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBMZWdhY3lUcmFuc3BvcnRTdHJlYW0ob3B0aW9ucyA9IHt9KSB7XG4gIFRyYW5zcG9ydFN0cmVhbS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBpZiAoIW9wdGlvbnMudHJhbnNwb3J0IHx8IHR5cGVvZiBvcHRpb25zLnRyYW5zcG9ydC5sb2cgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdHJhbnNwb3J0LCBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGEgbG9nIG1ldGhvZC4nKTtcbiAgfVxuXG4gIHRoaXMudHJhbnNwb3J0ID0gb3B0aW9ucy50cmFuc3BvcnQ7XG4gIHRoaXMubGV2ZWwgPSB0aGlzLmxldmVsIHx8IG9wdGlvbnMudHJhbnNwb3J0LmxldmVsO1xuICB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgPSB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgfHwgb3B0aW9ucy50cmFuc3BvcnQuaGFuZGxlRXhjZXB0aW9ucztcblxuICAvLyBEaXNwbGF5IG91ciBkZXByZWNhdGlvbiBub3RpY2UuXG4gIHRoaXMuX2RlcHJlY2F0ZWQoKTtcblxuICAvLyBQcm9wZXJseSBidWJibGUgdXAgZXJyb3JzIGZyb20gdGhlIHRyYW5zcG9ydCB0byB0aGVcbiAgLy8gTGVnYWN5VHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLCBidXQgb25seSBvbmNlIG5vIG1hdHRlciBob3cgbWFueSB0aW1lc1xuICAvLyB0aGlzIHRyYW5zcG9ydCBpcyBzaGFyZWQuXG4gIGZ1bmN0aW9uIHRyYW5zcG9ydEVycm9yKGVycikge1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIsIHRoaXMudHJhbnNwb3J0KTtcbiAgfVxuXG4gIGlmICghdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvciA9IHRyYW5zcG9ydEVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmFuc3BvcnQub24oJ2Vycm9yJywgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpO1xuICB9XG59O1xuXG4vKlxuICogSW5oZXJpdCBmcm9tIFRyYW5zcG9ydFN0cmVhbSB1c2luZyBOb2RlLmpzIGJ1aWx0LWluc1xuICovXG51dGlsLmluaGVyaXRzKExlZ2FjeVRyYW5zcG9ydFN0cmVhbSwgVHJhbnNwb3J0U3RyZWFtKTtcblxuLyoqXG4gKiBXcml0ZXMgdGhlIGluZm8gb2JqZWN0IHRvIG91ciB0cmFuc3BvcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge21peGVkfSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHttaXhlZH0gZW5jIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqL1xuTGVnYWN5VHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUoaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICBpZiAodGhpcy5zaWxlbnQgfHwgKGluZm8uZXhjZXB0aW9uID09PSB0cnVlICYmICF0aGlzLmhhbmRsZUV4Y2VwdGlvbnMpKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICB9XG5cbiAgLy8gUmVtYXJrOiBUaGlzIGhhcyB0byBiZSBoYW5kbGVkIGluIHRoZSBiYXNlIHRyYW5zcG9ydCBub3cgYmVjYXVzZSB3ZVxuICAvLyBjYW5ub3QgY29uZGl0aW9uYWxseSB3cml0ZSB0byBvdXIgcGlwZSB0YXJnZXRzIGFzIHN0cmVhbS5cbiAgaWYgKCF0aGlzLmxldmVsIHx8IHRoaXMubGV2ZWxzW3RoaXMubGV2ZWxdID49IHRoaXMubGV2ZWxzW2luZm9bTEVWRUxdXSkge1xuICAgIHRoaXMudHJhbnNwb3J0LmxvZyhpbmZvW0xFVkVMXSwgaW5mby5tZXNzYWdlLCBpbmZvLCB0aGlzLl9ub3ApO1xuICB9XG5cbiAgY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyB0aGUgYmF0Y2ggb2YgaW5mbyBvYmplY3RzIChpLmUuIFwib2JqZWN0IGNodW5rc1wiKSB0byBvdXIgdHJhbnNwb3J0XG4gKiBpbnN0YW5jZSBhZnRlciBwZXJmb3JtaW5nIGFueSBuZWNlc3NhcnkgZmlsdGVyaW5nLlxuICogQHBhcmFtIHttaXhlZH0gY2h1bmtzIC0gVE9ETzogYWRkIHBhcmFtcyBkZXNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtcyBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJucyBkZXNjcmlwdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbkxlZ2FjeVRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX3dyaXRldiA9IGZ1bmN0aW9uIF93cml0ZXYoY2h1bmtzLCBjYWxsYmFjaykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0aGlzLl9hY2NlcHQoY2h1bmtzW2ldKSkge1xuICAgICAgdGhpcy50cmFuc3BvcnQubG9nKFxuICAgICAgICBjaHVua3NbaV0uY2h1bmtbTEVWRUxdLFxuICAgICAgICBjaHVua3NbaV0uY2h1bmsubWVzc2FnZSxcbiAgICAgICAgY2h1bmtzW2ldLmNodW5rLFxuICAgICAgICB0aGlzLl9ub3BcbiAgICAgICk7XG4gICAgICBjaHVua3NbaV0uY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIERpc3BsYXlzIGEgZGVwcmVjYXRpb24gbm90aWNlLiBEZWZpbmVkIGFzIGEgZnVuY3Rpb24gc28gaXQgY2FuIGJlXG4gKiBvdmVycmlkZW4gaW4gdGVzdHMuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl9kZXByZWNhdGVkID0gZnVuY3Rpb24gX2RlcHJlY2F0ZWQoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoW1xuICAgIGAke3RoaXMudHJhbnNwb3J0Lm5hbWV9IGlzIGEgbGVnYWN5IHdpbnN0b24gdHJhbnNwb3J0LiBDb25zaWRlciB1cGdyYWRpbmc6IGAsXG4gICAgJy0gVXBncmFkZSBkb2NzOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24vYmxvYi9tYXN0ZXIvVVBHUkFERS0zLjAubWQnXG4gIF0uam9pbignXFxuJykpO1xufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBlcnJvciBoYW5kbGluZyBzdGF0ZSBvbiB0aGUgbGVnYWN5IHRyYW5zcG9ydCBhc3NvY2lhdGVkXG4gKiB3aXRoIHRoaXMgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gIGlmICh0aGlzLnRyYW5zcG9ydC5jbG9zZSkge1xuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBpZiAodGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvcik7XG4gICAgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IgPSBudWxsO1xuICB9XG59O1xuIiwgIi8qKlxuICogcHJvZmlsZXIuanM6IFRPRE86IGFkZCBmaWxlIGhlYWRlciBkZXNjcmlwdGlvbi5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRPRE86IGFkZCBjbGFzcyBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtQcm9maWxlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciBQcm9maWxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIFByb2ZpbGVyIGluc3RhbmNlIHVzZWQgYnlcbiAgICogYExvZ2dlci5wcm90b3R5cGUuc3RhcnRUaW1lcmAuIFdoZW4gZG9uZSBpcyBjYWxsZWQgdGhlIHRpbWVyIHdpbGwgZmluaXNoXG4gICAqIGFuZCBsb2cgdGhlIGR1cmF0aW9uLlxuICAgKiBAcGFyYW0geyFMb2dnZXJ9IGxvZ2dlciAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIFByb2ZpbGVyKGxvZ2dlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9maWxlcik7XG4gICAgdmFyIExvZ2dlciA9IHJlcXVpcmUoJy4vbG9nZ2VyJyk7XG4gICAgaWYgKF90eXBlb2YobG9nZ2VyKSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShsb2dnZXIpIHx8ICEobG9nZ2VyIGluc3RhbmNlb2YgTG9nZ2VyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dnZXIgaXMgcmVxdWlyZWQgZm9yIHByb2ZpbGluZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgIHRoaXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmRzIHRoZSBjdXJyZW50IHRpbWVyIChpLmUuIFByb2ZpbGVyKSBpbnN0YW5jZSBhbmQgbG9ncyB0aGUgYG1zZ2AgYWxvbmdcbiAgICogd2l0aCB0aGUgZHVyYXRpb24gc2luY2UgY3JlYXRpb24uXG4gICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhQcm9maWxlciwgW3tcbiAgICBrZXk6IFwiZG9uZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ0NhbGxiYWNrIGZ1bmN0aW9uIG5vIGxvbmdlciBzdXBwb3J0ZWQgYXMgb2Ygd2luc3RvbkAzLjAuMCcpO1xuICAgICAgICBhcmdzLnBvcCgpO1xuICAgICAgfVxuICAgICAgdmFyIGluZm8gPSBfdHlwZW9mKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkgPT09ICdvYmplY3QnID8gYXJncy5wb3AoKSA6IHt9O1xuICAgICAgaW5mby5sZXZlbCA9IGluZm8ubGV2ZWwgfHwgJ2luZm8nO1xuICAgICAgaW5mby5kdXJhdGlvbk1zID0gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnQ7XG4gICAgICByZXR1cm4gdGhpcy5sb2dnZXIud3JpdGUoaW5mbyk7XG4gICAgfVxuICB9XSk7XG59KCk7XG47XG5tb2R1bGUuZXhwb3J0cyA9IFByb2ZpbGVyOyIsICIndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBEaXNwbGF5cyBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgdGhlIHNvdXJjZSBvZlxuICogdGhlIGZvcm1hdCB3aGVuIGl0IGlzIGludmFsaWQuXG4gKi9cbmNsYXNzIEludmFsaWRGb3JtYXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoZm9ybWF0Rm4pIHtcbiAgICBzdXBlcihgRm9ybWF0IGZ1bmN0aW9ucyBtdXN0IGJlIHN5bmNocm9ub3VzIHRha2luZyBhIHR3byBhcmd1bWVudHM6IChpbmZvLCBvcHRzKVxuRm91bmQ6ICR7Zm9ybWF0Rm4udG9TdHJpbmcoKS5zcGxpdCgnXFxuJylbMF19XFxuYCk7XG5cbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBJbnZhbGlkRm9ybWF0RXJyb3IpO1xuICB9XG59XG5cbi8qXG4gKiBmdW5jdGlvbiBmb3JtYXQgKGZvcm1hdEZuKVxuICogUmV0dXJucyBhIGNyZWF0ZSBmdW5jdGlvbiBmb3IgdGhlIGBmb3JtYXRGbmAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZm9ybWF0Rm4gPT4ge1xuICBpZiAoZm9ybWF0Rm4ubGVuZ3RoID4gMikge1xuICAgIHRocm93IG5ldyBJbnZhbGlkRm9ybWF0RXJyb3IoZm9ybWF0Rm4pO1xuICB9XG5cbiAgLypcbiAgICogZnVuY3Rpb24gRm9ybWF0IChvcHRpb25zKVxuICAgKiBCYXNlIHByb3RvdHlwZSB3aGljaCBjYWxscyBhIGBfZm9ybWF0YFxuICAgKiBmdW5jdGlvbiBhbmQgcHVzaGVzIHRoZSByZXN1bHQuXG4gICAqL1xuICBmdW5jdGlvbiBGb3JtYXQob3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIEZvcm1hdC5wcm90b3R5cGUudHJhbnNmb3JtID0gZm9ybWF0Rm47XG5cbiAgLy9cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBuZXcgaW5zdGFuY2VzIG9mXG4gIC8vIEZvcm1hdFdyYXAgZm9yIHNpbXBsZSBzeW50YXggbGlrZTpcbiAgLy9cbiAgLy8gcmVxdWlyZSgnd2luc3RvbicpLmZvcm1hdHMuanNvbigpO1xuICAvL1xuICBmdW5jdGlvbiBjcmVhdGVGb3JtYXRXcmFwKG9wdHMpIHtcbiAgICByZXR1cm4gbmV3IEZvcm1hdChvcHRzKTtcbiAgfVxuXG4gIC8vXG4gIC8vIEV4cG9zZSB0aGUgRm9ybWF0V3JhcCB0aHJvdWdoIHRoZSBjcmVhdGUgZnVuY3Rpb25cbiAgLy8gZm9yIHRlc3RhYmlsaXR5LlxuICAvL1xuICBjcmVhdGVGb3JtYXRXcmFwLkZvcm1hdCA9IEZvcm1hdDtcbiAgcmV0dXJuIGNyZWF0ZUZvcm1hdFdyYXA7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnLi9mb3JtYXQnKTtcbmNvbnN0IHsgTUVTU0FHRSB9ID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKTtcbmNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJ3NhZmUtc3RhYmxlLXN0cmluZ2lmeScpO1xuXG4vKlxuICogZnVuY3Rpb24gcmVwbGFjZXIgKGtleSwgdmFsdWUpXG4gKiBIYW5kbGVzIHByb3BlciBzdHJpbmdpZmljYXRpb24gb2YgQnVmZmVyIGFuZCBiaWdpbnQgb3V0cHV0LlxuICovXG5mdW5jdGlvbiByZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gIC8vIHNhZmUtc3RhYmxlLXN0cmluZ2lmeSBkb2VzIHN1cHBvcnQgQmlnSW50LCBob3dldmVyLCBpdCBkb2Vzbid0IHdyYXAgdGhlIHZhbHVlIGluIHF1b3Rlcy5cbiAgLy8gTGVhZGluZyB0byBhIGxvc3MgaW4gZmlkZWxpdHkgaWYgdGhlIHJlc3VsdGluZyBzdHJpbmcgaXMgcGFyc2VkLlxuICAvLyBJdCB3b3VsZCBhbHNvIGJlIGEgYnJlYWtpbmcgY2hhbmdlIGZvciBsb2dmb3JtLlxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JylcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKlxuICogZnVuY3Rpb24ganNvbiAoaW5mbylcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIEpTT04gZm9ybWF0IHRoYXQgdHVybnMgYSBsb2cgYGluZm9gXG4gKiBvYmplY3QgaW50byBwdXJlIEpTT04uIFRoaXMgd2FzIHByZXZpb3VzbHkgZXhwb3NlZCBhcyB7IGpzb246IHRydWUgfVxuICogdG8gdHJhbnNwb3J0cyBpbiBgd2luc3RvbiA8IDMuMC4wYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQoKGluZm8sIG9wdHMpID0+IHtcbiAgY29uc3QganNvblN0cmluZ2lmeSA9IHN0cmluZ2lmeS5jb25maWd1cmUob3B0cyk7XG4gIGluZm9bTUVTU0FHRV0gPSBqc29uU3RyaW5naWZ5KGluZm8sIG9wdHMucmVwbGFjZXIgfHwgcmVwbGFjZXIsIG9wdHMuc3BhY2UpO1xuICByZXR1cm4gaW5mbztcbn0pO1xuIiwgIi8qKlxuICogbG9nZ2VyLmpzOiBUT0RPOiBhZGQgZmlsZSBoZWFkZXIgZGVzY3JpcHRpb24uXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHsgcmV0dXJuIChyID0gX3RvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgeyB2YWx1ZTogdCwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbcl0gPSB0LCBlOyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpLFxuICBTdHJlYW0gPSBfcmVxdWlyZS5TdHJlYW0sXG4gIFRyYW5zZm9ybSA9IF9yZXF1aXJlLlRyYW5zZm9ybTtcbnZhciBhc3luY0ZvckVhY2ggPSByZXF1aXJlKCdhc3luYy9mb3JFYWNoJyk7XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKSxcbiAgTEVWRUwgPSBfcmVxdWlyZTIuTEVWRUwsXG4gIFNQTEFUID0gX3JlcXVpcmUyLlNQTEFUO1xudmFyIGlzU3RyZWFtID0gcmVxdWlyZSgnaXMtc3RyZWFtJyk7XG52YXIgRXhjZXB0aW9uSGFuZGxlciA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uLWhhbmRsZXInKTtcbnZhciBSZWplY3Rpb25IYW5kbGVyID0gcmVxdWlyZSgnLi9yZWplY3Rpb24taGFuZGxlcicpO1xudmFyIExlZ2FjeVRyYW5zcG9ydFN0cmVhbSA9IHJlcXVpcmUoJ3dpbnN0b24tdHJhbnNwb3J0L2xlZ2FjeScpO1xudmFyIFByb2ZpbGVyID0gcmVxdWlyZSgnLi9wcm9maWxlcicpO1xudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJy4vY29tbW9uJyksXG4gIHdhcm4gPSBfcmVxdWlyZTMud2FybjtcbnZhciBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpO1xuXG4vKipcbiAqIENhcHR1cmVzIHRoZSBudW1iZXIgb2YgZm9ybWF0IChpLmUuICVzIHN0cmluZ3MpIGluIGEgZ2l2ZW4gc3RyaW5nLlxuICogQmFzZWQgb24gYHV0aWwuZm9ybWF0YCwgc2VlIE5vZGUuanMgc291cmNlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvYjFjOGYxNWM1ZjE2OWUwMjFmN2M0NmViN2IyMTlkZTk1ZmU5NzYwMy9saWIvdXRpbC5qcyNMMjAxLUwyMzBcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzY2RqaWZvTyVdL2c7XG5cbi8qKlxuICogVE9ETzogYWRkIGNsYXNzIGRlc2NyaXB0aW9uLlxuICogQHR5cGUge0xvZ2dlcn1cbiAqIEBleHRlbmRzIHtUcmFuc2Zvcm19XG4gKi9cbnZhciBMb2dnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UcmFuc2Zvcm0pIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgTG9nZ2VyIG9iamVjdCByZXNwb25zaWJsZSBmb3IgcGVyc2lzdGluZyBsb2dcbiAgICogbWVzc2FnZXMgYW5kIG1ldGFkYXRhIHRvIG9uZSBvciBtb3JlIHRyYW5zcG9ydHMuXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gb3B0aW9ucyAtIGZvb1xuICAgKi9cbiAgZnVuY3Rpb24gTG9nZ2VyKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvZ2dlcik7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIExvZ2dlciwgW3tcbiAgICAgIG9iamVjdE1vZGU6IHRydWVcbiAgICB9XSk7XG4gICAgX3RoaXMuY29uZmlndXJlKG9wdGlvbnMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoTG9nZ2VyLCBfVHJhbnNmb3JtKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhMb2dnZXIsIFt7XG4gICAga2V5OiBcImNoaWxkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoaWxkKGRlZmF1bHRSZXF1ZXN0TWV0YWRhdGEpIHtcbiAgICAgIHZhciBsb2dnZXIgPSB0aGlzO1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobG9nZ2VyLCB7XG4gICAgICAgIHdyaXRlOiB7XG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKGluZm8pIHtcbiAgICAgICAgICAgIHZhciBpbmZvQ2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UmVxdWVzdE1ldGFkYXRhLCBpbmZvKTtcblxuICAgICAgICAgICAgLy8gT2JqZWN0LmFzc2lnbiBkb2Vzbid0IGNvcHkgaW5oZXJpdGVkIEVycm9yXG4gICAgICAgICAgICAvLyBwcm9wZXJ0aWVzIHNvIHdlIGhhdmUgdG8gZG8gdGhhdCBleHBsaWNpdGx5XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gUmVtYXJrIChpbmRleHplcm8pOiB3ZSBzaG91bGQgcmVtb3ZlIHRoaXNcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBlcnJvcnMgZm9ybWF0IHdpbGwgaGFuZGxlIHRoaXMgY2FzZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBpZiAoaW5mbyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgIGluZm9DbG9uZS5zdGFjayA9IGluZm8uc3RhY2s7XG4gICAgICAgICAgICAgIGluZm9DbG9uZS5tZXNzYWdlID0gaW5mby5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLndyaXRlKGluZm9DbG9uZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGwgd2hvbGVzYWxlIHJlY29uZmlndXJlIHRoaXMgaW5zdGFuY2UgYnk6XG4gICAgICogMS4gUmVzZXR0aW5nIGFsbCB0cmFuc3BvcnRzLiBPbGRlciB0cmFuc3BvcnRzIHdpbGwgYmUgcmVtb3ZlZCBpbXBsaWNpdGx5LlxuICAgICAqIDIuIFNldCBhbGwgb3RoZXIgb3B0aW9ucyBpbmNsdWRpbmcgbGV2ZWxzLCBjb2xvcnMsIHJld3JpdGVycywgZmlsdGVycyxcbiAgICAgKiAgICBleGNlcHRpb25IYW5kbGVycywgZXRjLlxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb3B0aW9ucyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImNvbmZpZ3VyZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25maWd1cmUoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgc2lsZW50ID0gX3JlZi5zaWxlbnQsXG4gICAgICAgIGZvcm1hdCA9IF9yZWYuZm9ybWF0LFxuICAgICAgICBkZWZhdWx0TWV0YSA9IF9yZWYuZGVmYXVsdE1ldGEsXG4gICAgICAgIGxldmVscyA9IF9yZWYubGV2ZWxzLFxuICAgICAgICBfcmVmJGxldmVsID0gX3JlZi5sZXZlbCxcbiAgICAgICAgbGV2ZWwgPSBfcmVmJGxldmVsID09PSB2b2lkIDAgPyAnaW5mbycgOiBfcmVmJGxldmVsLFxuICAgICAgICBfcmVmJGV4aXRPbkVycm9yID0gX3JlZi5leGl0T25FcnJvcixcbiAgICAgICAgZXhpdE9uRXJyb3IgPSBfcmVmJGV4aXRPbkVycm9yID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRleGl0T25FcnJvcixcbiAgICAgICAgdHJhbnNwb3J0cyA9IF9yZWYudHJhbnNwb3J0cyxcbiAgICAgICAgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICAgIGVtaXRFcnJzID0gX3JlZi5lbWl0RXJycyxcbiAgICAgICAgZm9ybWF0dGVycyA9IF9yZWYuZm9ybWF0dGVycyxcbiAgICAgICAgcGFkTGV2ZWxzID0gX3JlZi5wYWRMZXZlbHMsXG4gICAgICAgIHJld3JpdGVycyA9IF9yZWYucmV3cml0ZXJzLFxuICAgICAgICBzdHJpcENvbG9ycyA9IF9yZWYuc3RyaXBDb2xvcnMsXG4gICAgICAgIGV4Y2VwdGlvbkhhbmRsZXJzID0gX3JlZi5leGNlcHRpb25IYW5kbGVycyxcbiAgICAgICAgcmVqZWN0aW9uSGFuZGxlcnMgPSBfcmVmLnJlamVjdGlvbkhhbmRsZXJzO1xuICAgICAgLy8gUmVzZXQgdHJhbnNwb3J0cyBpZiB3ZSBhbHJlYWR5IGhhdmUgdGhlbVxuICAgICAgaWYgKHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5zaWxlbnQgPSBzaWxlbnQ7XG4gICAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdCB8fCB0aGlzLmZvcm1hdCB8fCByZXF1aXJlKCdsb2dmb3JtL2pzb24nKSgpO1xuICAgICAgdGhpcy5kZWZhdWx0TWV0YSA9IGRlZmF1bHRNZXRhIHx8IG51bGw7XG4gICAgICAvLyBIb2lzdCBvdGhlciBvcHRpb25zIG9udG8gdGhpcyBpbnN0YW5jZS5cbiAgICAgIHRoaXMubGV2ZWxzID0gbGV2ZWxzIHx8IHRoaXMubGV2ZWxzIHx8IGNvbmZpZy5ucG0ubGV2ZWxzO1xuICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgICAgaWYgKHRoaXMuZXhjZXB0aW9ucykge1xuICAgICAgICB0aGlzLmV4Y2VwdGlvbnMudW5oYW5kbGUoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJlamVjdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yZWplY3Rpb25zLnVuaGFuZGxlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmV4Y2VwdGlvbnMgPSBuZXcgRXhjZXB0aW9uSGFuZGxlcih0aGlzKTtcbiAgICAgIHRoaXMucmVqZWN0aW9ucyA9IG5ldyBSZWplY3Rpb25IYW5kbGVyKHRoaXMpO1xuICAgICAgdGhpcy5wcm9maWxlcnMgPSB7fTtcbiAgICAgIHRoaXMuZXhpdE9uRXJyb3IgPSBleGl0T25FcnJvcjtcblxuICAgICAgLy8gQWRkIGFsbCB0cmFuc3BvcnRzIHdlIGhhdmUgYmVlbiBwcm92aWRlZC5cbiAgICAgIGlmICh0cmFuc3BvcnRzKSB7XG4gICAgICAgIHRyYW5zcG9ydHMgPSBBcnJheS5pc0FycmF5KHRyYW5zcG9ydHMpID8gdHJhbnNwb3J0cyA6IFt0cmFuc3BvcnRzXTtcbiAgICAgICAgdHJhbnNwb3J0cy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZCh0cmFuc3BvcnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb2xvcnMgfHwgZW1pdEVycnMgfHwgZm9ybWF0dGVycyB8fCBwYWRMZXZlbHMgfHwgcmV3cml0ZXJzIHx8IHN0cmlwQ29sb3JzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ3sgY29sb3JzLCBlbWl0RXJycywgZm9ybWF0dGVycywgcGFkTGV2ZWxzLCByZXdyaXRlcnMsIHN0cmlwQ29sb3JzIH0gd2VyZSByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgJ1VzZSBhIGN1c3RvbSB3aW5zdG9uLmZvcm1hdChmdW5jdGlvbikgaW5zdGVhZC4nLCAnU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24vdHJlZS9tYXN0ZXIvVVBHUkFERS0zLjAubWQnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgICBpZiAoZXhjZXB0aW9uSGFuZGxlcnMpIHtcbiAgICAgICAgdGhpcy5leGNlcHRpb25zLmhhbmRsZShleGNlcHRpb25IYW5kbGVycyk7XG4gICAgICB9XG4gICAgICBpZiAocmVqZWN0aW9uSGFuZGxlcnMpIHtcbiAgICAgICAgdGhpcy5yZWplY3Rpb25zLmhhbmRsZShyZWplY3Rpb25IYW5kbGVycyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzTGV2ZWxFbmFibGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzTGV2ZWxFbmFibGVkKGxldmVsKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBnaXZlbkxldmVsVmFsdWUgPSBnZXRMZXZlbFZhbHVlKHRoaXMubGV2ZWxzLCBsZXZlbCk7XG4gICAgICBpZiAoZ2l2ZW5MZXZlbFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBjb25maWd1cmVkTGV2ZWxWYWx1ZSA9IGdldExldmVsVmFsdWUodGhpcy5sZXZlbHMsIHRoaXMubGV2ZWwpO1xuICAgICAgaWYgKGNvbmZpZ3VyZWRMZXZlbFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy50cmFuc3BvcnRzIHx8IHRoaXMudHJhbnNwb3J0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZ3VyZWRMZXZlbFZhbHVlID49IGdpdmVuTGV2ZWxWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IHRoaXMudHJhbnNwb3J0cy5maW5kSW5kZXgoZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICAgICAgICB2YXIgdHJhbnNwb3J0TGV2ZWxWYWx1ZSA9IGdldExldmVsVmFsdWUoX3RoaXMzLmxldmVscywgdHJhbnNwb3J0LmxldmVsKTtcbiAgICAgICAgaWYgKHRyYW5zcG9ydExldmVsVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICB0cmFuc3BvcnRMZXZlbFZhbHVlID0gY29uZmlndXJlZExldmVsVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYW5zcG9ydExldmVsVmFsdWUgPj0gZ2l2ZW5MZXZlbFZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW5kZXggIT09IC0xO1xuICAgIH1cblxuICAgIC8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jICovXG4gICAgLyoqXG4gICAgICogRW5zdXJlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggYSBgbG9nYCBtZXRob2RcbiAgICAgKiBAcGFyYW0ge21peGVkfSBsZXZlbCAtIExldmVsIHRoZSBsb2cgbWVzc2FnZSBpcyB3cml0dGVuIGF0LlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IG1zZyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBtZXRhIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICAgLy8gU3VwcG9ydHMgdGhlIGV4aXN0aW5nIEFQSTpcbiAgICAgKiAgICBsb2dnZXIubG9nKCdpbmZvJywgJ0hlbGxvIHdvcmxkJywgeyBjdXN0b206IHRydWUgfSk7XG4gICAgICogICAgbG9nZ2VyLmxvZygnaW5mbycsIG5ldyBFcnJvcignWW8sIGl0XFwncyBvbiBmaXJlJykpO1xuICAgICAqXG4gICAgICogICAgLy8gUmVxdWlyZXMgd2luc3Rvbi5mb3JtYXQuc3BsYXQoKVxuICAgICAqICAgIGxvZ2dlci5sb2coJ2luZm8nLCAnJXMgJWQlJScsICdBIHN0cmluZycsIDUwLCB7IHRoaXNJc01ldGE6IHRydWUgfSk7XG4gICAgICpcbiAgICAgKiAgICAvLyBBbmQgdGhlIG5ldyBBUEkgd2l0aCBhIHNpbmdsZSBKU09OIGxpdGVyYWw6XG4gICAgICogICAgbG9nZ2VyLmxvZyh7IGxldmVsOiAnaW5mbycsIG1lc3NhZ2U6ICdIZWxsbyB3b3JsZCcsIGN1c3RvbTogdHJ1ZSB9KTtcbiAgICAgKiAgICBsb2dnZXIubG9nKHsgbGV2ZWw6ICdpbmZvJywgbWVzc2FnZTogbmV3IEVycm9yKCdZbywgaXRcXCdzIG9uIGZpcmUnKSB9KTtcbiAgICAgKlxuICAgICAqICAgIC8vIEFsc28gcmVxdWlyZXMgd2luc3Rvbi5mb3JtYXQuc3BsYXQoKVxuICAgICAqICAgIGxvZ2dlci5sb2coe1xuICAgICAqICAgICAgbGV2ZWw6ICdpbmZvJyxcbiAgICAgKiAgICAgIG1lc3NhZ2U6ICclcyAlZCUlJyxcbiAgICAgKiAgICAgIFtTUExBVF06IFsnQSBzdHJpbmcnLCA1MF0sXG4gICAgICogICAgICBtZXRhOiB7IHRoaXNJc01ldGE6IHRydWUgfVxuICAgICAqICAgIH0pO1xuICAgICAqXG4gICAgICovXG4gICAgLyogZXNsaW50LWVuYWJsZSB2YWxpZC1qc2RvYyAqL1xuICB9LCB7XG4gICAga2V5OiBcImxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2cobGV2ZWwsIG1zZykge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNwbGF0ID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgc3BsYXRbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtcGFyYW1zXG4gICAgICAvLyBPcHRpbWl6ZSBmb3IgdGhlIGhvdHBhdGggb2YgbG9nZ2luZyBKU09OIGxpdGVyYWxzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBZbyBkYXdnLCBJIGhlYXJkIHlvdSBsaWtlIGxldmVscyAuLi4gc2VyaW91c2x5IC4uLlxuICAgICAgICAvLyBJbiB0aGlzIGNvbnRleHQgdGhlIExIUyBgbGV2ZWxgIGhlcmUgaXMgYWN0dWFsbHkgdGhlIGBpbmZvYCBzbyByZWFkXG4gICAgICAgIC8vIHRoaXMgYXM6IGluZm9bTEVWRUxdID0gaW5mby5sZXZlbDtcbiAgICAgICAgbGV2ZWxbTEVWRUxdID0gbGV2ZWwubGV2ZWw7XG4gICAgICAgIHRoaXMuX2FkZERlZmF1bHRNZXRhKGxldmVsKTtcbiAgICAgICAgdGhpcy53cml0ZShsZXZlbCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBTbGlnaHRseSBsZXNzIGhvdHBhdGgsIGJ1dCB3b3J0aCBvcHRpbWl6aW5nIGZvci5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGlmIChtc2cgJiYgX3R5cGVvZihtc2cpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIG1zZ1tMRVZFTF0gPSBtc2cubGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICB0aGlzLl9hZGREZWZhdWx0TWV0YShtc2cpO1xuICAgICAgICAgIHRoaXMud3JpdGUobXNnKTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBtc2cgPSBfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eSh7fSwgTEVWRUwsIGxldmVsKSwgXCJsZXZlbFwiLCBsZXZlbCksIFwibWVzc2FnZVwiLCBtc2cpO1xuICAgICAgICB0aGlzLl9hZGREZWZhdWx0TWV0YShtc2cpO1xuICAgICAgICB0aGlzLndyaXRlKG1zZyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG1ldGEgPSBzcGxhdFswXTtcbiAgICAgIGlmIChfdHlwZW9mKG1ldGEpID09PSAnb2JqZWN0JyAmJiBtZXRhICE9PSBudWxsKSB7XG4gICAgICAgIC8vIEV4dHJhY3QgdG9rZW5zLCBpZiBub25lIGF2YWlsYWJsZSBkZWZhdWx0IHRvIGVtcHR5IGFycmF5IHRvXG4gICAgICAgIC8vIGVuc3VyZSBjb25zaXN0YW5jeSBpbiBleHBlY3RlZCByZXN1bHRzXG4gICAgICAgIHZhciB0b2tlbnMgPSBtc2cgJiYgbXNnLm1hdGNoICYmIG1zZy5tYXRjaChmb3JtYXRSZWdFeHApO1xuICAgICAgICBpZiAoIXRva2Vucykge1xuICAgICAgICAgIHZhciBpbmZvID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZhdWx0TWV0YSwgbWV0YSwgX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KHt9LCBMRVZFTCwgbGV2ZWwpLCBTUExBVCwgc3BsYXQpLCBcImxldmVsXCIsIGxldmVsKSwgXCJtZXNzYWdlXCIsIG1zZykpO1xuICAgICAgICAgIGlmIChtZXRhLm1lc3NhZ2UpIGluZm8ubWVzc2FnZSA9IFwiXCIuY29uY2F0KGluZm8ubWVzc2FnZSwgXCIgXCIpLmNvbmNhdChtZXRhLm1lc3NhZ2UpO1xuICAgICAgICAgIGlmIChtZXRhLnN0YWNrKSBpbmZvLnN0YWNrID0gbWV0YS5zdGFjaztcbiAgICAgICAgICBpZiAobWV0YS5jYXVzZSkgaW5mby5jYXVzZSA9IG1ldGEuY2F1c2U7XG4gICAgICAgICAgdGhpcy53cml0ZShpbmZvKTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy53cml0ZShPYmplY3QuYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRNZXRhLCBfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoe30sIExFVkVMLCBsZXZlbCksIFNQTEFULCBzcGxhdCksIFwibGV2ZWxcIiwgbGV2ZWwpLCBcIm1lc3NhZ2VcIiwgbXNnKSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVzaGVzIGRhdGEgc28gdGhhdCBpdCBjYW4gYmUgcGlja2VkIHVwIGJ5IGFsbCBvZiBvdXIgcGlwZSB0YXJnZXRzLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHttaXhlZH0gZW5jIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IGNhbGxiYWNrIC0gQ29udGludWVzIHN0cmVhbSBwcm9jZXNzaW5nLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfdHJhbnNmb3JtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF90cmFuc2Zvcm0oaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICAgICAgaWYgKHRoaXMuc2lsZW50KSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgfVxuXG4gICAgICAvLyBbTEVWRUxdIGlzIG9ubHkgc29mdCBndWFyYW50ZWVkIHRvIGJlIHNldCBoZXJlIHNpbmNlIHdlIGFyZSBhIHByb3BlclxuICAgICAgLy8gc3RyZWFtLiBJdCBpcyBsaWtlbHkgdGhhdCBgaW5mb2AgY2FtZSBpbiB0aHJvdWdoIGAubG9nKGluZm8pYCBvclxuICAgICAgLy8gYC5pbmZvKGluZm8pYC4gSWYgaXQgaXMgbm90IGRlZmluZWQsIGhvd2V2ZXIsIGRlZmluZSBpdC5cbiAgICAgIC8vIFRoaXMgTEVWRUwgc3ltYm9sIGlzIHByb3ZpZGVkIGJ5IGB0cmlwbGUtYmVhbWAgYW5kIGFsc28gdXNlZCBpbjpcbiAgICAgIC8vIC0gbG9nZm9ybVxuICAgICAgLy8gLSB3aW5zdG9uLXRyYW5zcG9ydFxuICAgICAgLy8gLSBhYnN0cmFjdC13aW5zdG9uLXRyYW5zcG9ydFxuICAgICAgaWYgKCFpbmZvW0xFVkVMXSkge1xuICAgICAgICBpbmZvW0xFVkVMXSA9IGluZm8ubGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbWFyazogcmVhbGx5IG5vdCBzdXJlIHdoYXQgdG8gZG8gaGVyZSwgYnV0IHRoaXMgaGFzIGJlZW4gcmVwb3J0ZWQgYXNcbiAgICAgIC8vIHZlcnkgY29uZnVzaW5nIGJ5IHByZSB3aW5zdG9uQDIuMC4wIHVzZXJzIGFzIHF1aXRlIGNvbmZ1c2luZyB3aGVuIHVzaW5nXG4gICAgICAvLyBjdXN0b20gbGV2ZWxzLlxuICAgICAgaWYgKCF0aGlzLmxldmVsc1tpbmZvW0xFVkVMXV0gJiYgdGhpcy5sZXZlbHNbaW5mb1tMRVZFTF1dICE9PSAwKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t3aW5zdG9uXSBVbmtub3duIGxvZ2dlciBsZXZlbDogJXMnLCBpbmZvW0xFVkVMXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbWFyazogbm90IHN1cmUgaWYgd2Ugc2hvdWxkIHNpbXBseSBlcnJvciBoZXJlLlxuICAgICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlLnBpcGVzKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t3aW5zdG9uXSBBdHRlbXB0IHRvIHdyaXRlIGxvZ3Mgd2l0aCBubyB0cmFuc3BvcnRzLCB3aGljaCBjYW4gaW5jcmVhc2UgbWVtb3J5IHVzYWdlOiAlaicsIGluZm8pO1xuICAgICAgfVxuXG4gICAgICAvLyBIZXJlIHdlIHdyaXRlIHRvIHRoZSBgZm9ybWF0YCBwaXBlLWNoYWluLCB3aGljaCBvbiBgcmVhZGFibGVgIGFib3ZlIHdpbGxcbiAgICAgIC8vIHB1c2ggdGhlIGZvcm1hdHRlZCBgaW5mb2AgT2JqZWN0IG9udG8gdGhlIGJ1ZmZlciBmb3IgdGhpcyBpbnN0YW5jZS4gV2UgdHJhcFxuICAgICAgLy8gKGFuZCByZS10aHJvdykgYW55IGVycm9ycyBnZW5lcmF0ZWQgYnkgdGhlIHVzZXItcHJvdmlkZWQgZm9ybWF0LCBidXQgYWxzb1xuICAgICAgLy8gZ3VhcmFudGVlIHRoYXQgdGhlIHN0cmVhbXMgY2FsbGJhY2sgaXMgaW52b2tlZCBzbyB0aGF0IHdlIGNhbiBjb250aW51ZSBmbG93aW5nLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5wdXNoKHRoaXMuZm9ybWF0LnRyYW5zZm9ybShpbmZvLCB0aGlzLmZvcm1hdC5vcHRpb25zKSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLl93cml0YWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGF5cyB0aGUgJ2ZpbmlzaCcgZXZlbnQgdW50aWwgYWxsIHRyYW5zcG9ydCBwaXBlIHRhcmdldHMgaGF2ZVxuICAgICAqIGFsc28gZW1pdHRlZCAnZmluaXNoJyBvciBhcmUgYWxyZWFkeSBmaW5pc2hlZC5cbiAgICAgKiBAcGFyYW0ge21peGVkfSBjYWxsYmFjayAtIENvbnRpbnVlcyBzdHJlYW0gcHJvY2Vzc2luZy5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfZmluYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmFsKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdHJhbnNwb3J0cyA9IHRoaXMudHJhbnNwb3J0cy5zbGljZSgpO1xuICAgICAgYXN5bmNGb3JFYWNoKHRyYW5zcG9ydHMsIGZ1bmN0aW9uICh0cmFuc3BvcnQsIG5leHQpIHtcbiAgICAgICAgaWYgKCF0cmFuc3BvcnQgfHwgdHJhbnNwb3J0LmZpbmlzaGVkKSByZXR1cm4gc2V0SW1tZWRpYXRlKG5leHQpO1xuICAgICAgICB0cmFuc3BvcnQub25jZSgnZmluaXNoJywgbmV4dCk7XG4gICAgICAgIHRyYW5zcG9ydC5lbmQoKTtcbiAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSB0cmFuc3BvcnQgdG8gdGhpcyBsb2dnZXIgaW5zdGFuY2UgYnkgcGlwaW5nIHRvIGl0LlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IHRyYW5zcG9ydCAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7TG9nZ2VyfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZCh0cmFuc3BvcnQpIHtcbiAgICAgIC8vIFN1cHBvcnQgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBhbGwgZXhpc3RpbmcgYHdpbnN0b24gPCAzLngueGBcbiAgICAgIC8vIHRyYW5zcG9ydHMgd2hpY2ggbWVldCBvbmUgb2YgdHdvIGNyaXRlcmlhOlxuICAgICAgLy8gMS4gVGhleSBpbmhlcml0IGZyb20gd2luc3Rvbi5UcmFuc3BvcnQgaW4gIDwgMy54Lnggd2hpY2ggaXMgTk9UIGEgc3RyZWFtLlxuICAgICAgLy8gMi4gVGhleSBleHBvc2UgYSBsb2cgbWV0aG9kIHdoaWNoIGhhcyBhIGxlbmd0aCBncmVhdGVyIHRoYW4gMiAoaS5lLiBtb3JlIHRoZW5cbiAgICAgIC8vICAgIGp1c3QgYGxvZyhpbmZvLCBjYWxsYmFjaylgLlxuICAgICAgdmFyIHRhcmdldCA9ICFpc1N0cmVhbSh0cmFuc3BvcnQpIHx8IHRyYW5zcG9ydC5sb2cubGVuZ3RoID4gMiA/IG5ldyBMZWdhY3lUcmFuc3BvcnRTdHJlYW0oe1xuICAgICAgICB0cmFuc3BvcnQ6IHRyYW5zcG9ydFxuICAgICAgfSkgOiB0cmFuc3BvcnQ7XG4gICAgICBpZiAoIXRhcmdldC5fd3JpdGFibGVTdGF0ZSB8fCAhdGFyZ2V0Ll93cml0YWJsZVN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnRzIG11c3QgV3JpdGFibGVTdHJlYW1zIGluIG9iamVjdE1vZGUuIFNldCB7IG9iamVjdE1vZGU6IHRydWUgfS4nKTtcbiAgICAgIH1cblxuICAgICAgLy8gTGlzdGVuIGZvciB0aGUgYGVycm9yYCBldmVudCBhbmQgdGhlIGB3YXJuYCBldmVudCBvbiB0aGUgbmV3IFRyYW5zcG9ydC5cbiAgICAgIHRoaXMuX29uRXZlbnQoJ2Vycm9yJywgdGFyZ2V0KTtcbiAgICAgIHRoaXMuX29uRXZlbnQoJ3dhcm4nLCB0YXJnZXQpO1xuICAgICAgdGhpcy5waXBlKHRhcmdldCk7XG4gICAgICBpZiAodHJhbnNwb3J0LmhhbmRsZUV4Y2VwdGlvbnMpIHtcbiAgICAgICAgdGhpcy5leGNlcHRpb25zLmhhbmRsZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zcG9ydC5oYW5kbGVSZWplY3Rpb25zKSB7XG4gICAgICAgIHRoaXMucmVqZWN0aW9ucy5oYW5kbGUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHRyYW5zcG9ydCBmcm9tIHRoaXMgbG9nZ2VyIGluc3RhbmNlIGJ5IHVucGlwaW5nIGZyb20gaXQuXG4gICAgICogQHBhcmFtIHttaXhlZH0gdHJhbnNwb3J0IC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKHRyYW5zcG9ydCkge1xuICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybiB0aGlzO1xuICAgICAgdmFyIHRhcmdldCA9IHRyYW5zcG9ydDtcbiAgICAgIGlmICghaXNTdHJlYW0odHJhbnNwb3J0KSB8fCB0cmFuc3BvcnQubG9nLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy50cmFuc3BvcnRzLmZpbHRlcihmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2gudHJhbnNwb3J0ID09PSB0cmFuc3BvcnQ7XG4gICAgICAgIH0pWzBdO1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB0aGlzLnVucGlwZSh0YXJnZXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgdHJhbnNwb3J0cyBmcm9tIHRoaXMgbG9nZ2VyIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXMudW5waXBlKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgcmVzb3VyY2VzIChzdHJlYW1zLCBldmVudCBsaXN0ZW5lcnMpIGZvciBhbGwgdHJhbnNwb3J0c1xuICAgICAqIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGluc3RhbmNlIChpZiBuZWNlc3NhcnkpLlxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJjbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIHRoaXMuZXhjZXB0aW9ucy51bmhhbmRsZSgpO1xuICAgICAgdGhpcy5yZWplY3Rpb25zLnVuaGFuZGxlKCk7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdGFyZ2V0YCBsZXZlbHMgc3BlY2lmaWVkIG9uIHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFRhcmdldCBsZXZlbHMgdG8gdXNlIG9uIHRoaXMgaW5zdGFuY2UuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0TGV2ZWxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldExldmVscygpIHtcbiAgICAgIHdhcm4uZGVwcmVjYXRlZCgnc2V0TGV2ZWxzJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcmllcyB0aGUgYWxsIHRyYW5zcG9ydHMgZm9yIHRoaXMgaW5zdGFuY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGBvcHRpb25zYC5cbiAgICAgKiBUaGlzIHdpbGwgYWdncmVnYXRlIGVhY2ggdHJhbnNwb3J0J3MgcmVzdWx0cyBpbnRvIG9uZSBvYmplY3QgY29udGFpbmluZ1xuICAgICAqIGEgcHJvcGVydHkgcGVyIHRyYW5zcG9ydC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFF1ZXJ5IG9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBDb250aW51YXRpb24gdG8gcmVzcG9uZCB0byB3aGVuIGNvbXBsZXRlLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInF1ZXJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHF1ZXJ5KG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICB2YXIgcXVlcnlPYmplY3QgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLnF1ZXJ5IHx8IHt9KTtcblxuICAgICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHF1ZXJ5IGEgc2luZ2xlIHRyYW5zcG9ydFxuICAgICAgZnVuY3Rpb24gcXVlcnlUcmFuc3BvcnQodHJhbnNwb3J0LCBuZXh0KSB7XG4gICAgICAgIGlmIChvcHRpb25zLnF1ZXJ5ICYmIHR5cGVvZiB0cmFuc3BvcnQuZm9ybWF0UXVlcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvcHRpb25zLnF1ZXJ5ID0gdHJhbnNwb3J0LmZvcm1hdFF1ZXJ5KHF1ZXJ5T2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc3BvcnQucXVlcnkob3B0aW9ucywgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB0cmFuc3BvcnQuZm9ybWF0UmVzdWx0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzID0gdHJhbnNwb3J0LmZvcm1hdFJlc3VsdHMocmVzLCBvcHRpb25zLmZvcm1hdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHQobnVsbCwgcmVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBhY2N1bXVsYXRlIHRoZSByZXN1bHRzIGZyb20gYHF1ZXJ5VHJhbnNwb3J0YCBpbnRvXG4gICAgICAvLyB0aGUgYHJlc3VsdHNgLlxuICAgICAgZnVuY3Rpb24gYWRkUmVzdWx0cyh0cmFuc3BvcnQsIG5leHQpIHtcbiAgICAgICAgcXVlcnlUcmFuc3BvcnQodHJhbnNwb3J0LCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAvLyBxdWVyeVRyYW5zcG9ydCBjb3VsZCBwb3RlbnRpYWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIG11bHRpcGxlIHRpbWVzXG4gICAgICAgICAgLy8gc2luY2UgVHJhbnNwb3J0IGNvZGUgY2FuIGJlIHVucHJlZGljdGFibGUuXG4gICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGVyciB8fCByZXN1bHQ7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJlc3VsdHNbdHJhbnNwb3J0Lm5hbWVdID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FsbGJhY2stcmV0dXJuXG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHQgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0cmFuc3BvcnRzIGluIHBhcmFsbGVsIHNldHRpbmcgdGhlIGFwcHJvcHJpYXRlIGtleSBpblxuICAgICAgLy8gdGhlIGByZXN1bHRzYC5cbiAgICAgIGFzeW5jRm9yRWFjaCh0aGlzLnRyYW5zcG9ydHMuZmlsdGVyKGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgcmV0dXJuICEhdHJhbnNwb3J0LnF1ZXJ5O1xuICAgICAgfSksIGFkZFJlc3VsdHMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxvZyBzdHJlYW0gZm9yIGFsbCB0cmFuc3BvcnRzLiBPcHRpb25zIG9iamVjdCBpcyBvcHRpb25hbC5cbiAgICAgKiBAcGFyYW17T2JqZWN0fSBvcHRpb25zPXt9IC0gU3RyZWFtIG9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge1N0cmVhbX0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdHJlYW0oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgb3V0ID0gbmV3IFN0cmVhbSgpO1xuICAgICAgdmFyIHN0cmVhbXMgPSBbXTtcbiAgICAgIG91dC5fc3RyZWFtcyA9IHN0cmVhbXM7XG4gICAgICBvdXQuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGkgPSBzdHJlYW1zLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHN0cmVhbXNbaV0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBDcmVhdGUgYSBsaXN0IG9mIGFsbCB0cmFuc3BvcnRzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAgdGhpcy50cmFuc3BvcnRzLmZpbHRlcihmdW5jdGlvbiAodHJhbnNwb3J0KSB7XG4gICAgICAgIHJldHVybiAhIXRyYW5zcG9ydC5zdHJlYW07XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgdmFyIHN0ciA9IHRyYW5zcG9ydC5zdHJlYW0ob3B0aW9ucyk7XG4gICAgICAgIGlmICghc3RyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbXMucHVzaChzdHIpO1xuICAgICAgICBzdHIub24oJ2xvZycsIGZ1bmN0aW9uIChsb2cpIHtcbiAgICAgICAgICBsb2cudHJhbnNwb3J0ID0gbG9nLnRyYW5zcG9ydCB8fCBbXTtcbiAgICAgICAgICBsb2cudHJhbnNwb3J0LnB1c2godHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICAgIG91dC5lbWl0KCdsb2cnLCBsb2cpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RyLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBlcnIudHJhbnNwb3J0ID0gZXJyLnRyYW5zcG9ydCB8fCBbXTtcbiAgICAgICAgICBlcnIudHJhbnNwb3J0LnB1c2godHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICAgIG91dC5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gYSBzcGVjaWZpYyB0aW1pbmcuIFdoZW4gZG9uZSBpcyBjYWxsZWRcbiAgICAgKiB0aGUgdGltZXIgd2lsbCBmaW5pc2ggYW5kIGxvZyB0aGUgZHVyYXRpb24uIGUuZy46XG4gICAgICogQHJldHVybnMge1Byb2ZpbGV9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgIGNvbnN0IHRpbWVyID0gd2luc3Rvbi5zdGFydFRpbWVyKClcbiAgICAgKiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgKiAgICAgIHRpbWVyLmRvbmUoe1xuICAgICAqICAgICAgICBtZXNzYWdlOiAnTG9nZ2luZyBtZXNzYWdlJ1xuICAgICAqICAgICAgfSk7XG4gICAgICogICAgfSwgMTAwMCk7XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRUaW1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFRpbWVyKCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9maWxlcih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFja3MgdGhlIHRpbWUgaW5iZXR3ZWVuIHN1YnNlcXVlbnQgY2FsbHMgdG8gdGhpcyBtZXRob2Qgd2l0aCB0aGUgc2FtZVxuICAgICAqIGBpZGAgcGFyYW1ldGVyLiBUaGUgc2Vjb25kIGNhbGwgdG8gdGhpcyBtZXRob2Qgd2lsbCBsb2cgdGhlIGRpZmZlcmVuY2UgaW5cbiAgICAgKiBtaWxsaXNlY29uZHMgYWxvbmcgd2l0aCB0aGUgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVW5pcXVlIGlkIG9mIHRoZSBwcm9maWxlclxuICAgICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gVE9ETzogYWRkIHJldHVybiBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGUoaWQpIHtcbiAgICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGlmICh0aGlzLnByb2ZpbGVyc1tpZF0pIHtcbiAgICAgICAgdmFyIHRpbWVFbmQgPSB0aGlzLnByb2ZpbGVyc1tpZF07XG4gICAgICAgIGRlbGV0ZSB0aGlzLnByb2ZpbGVyc1tpZF07XG5cbiAgICAgICAgLy8gQXR0ZW1wdCB0byBiZSBraW5kIHRvIHVzZXJzIGlmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIG9sZGVyIEFQSXMuXG4gICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAyXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKCdDYWxsYmFjayBmdW5jdGlvbiBubyBsb25nZXIgc3VwcG9ydGVkIGFzIG9mIHdpbnN0b25AMy4wLjAnKTtcbiAgICAgICAgICBhcmdzLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSBkdXJhdGlvbiBwcm9wZXJ0eSBvZiB0aGUgbWV0YWRhdGFcbiAgICAgICAgdmFyIGluZm8gPSBfdHlwZW9mKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkgPT09ICdvYmplY3QnID8gYXJncy5wb3AoKSA6IHt9O1xuICAgICAgICBpbmZvLmxldmVsID0gaW5mby5sZXZlbCB8fCAnaW5mbyc7XG4gICAgICAgIGluZm8uZHVyYXRpb25NcyA9IHRpbWUgLSB0aW1lRW5kO1xuICAgICAgICBpbmZvLm1lc3NhZ2UgPSBpbmZvLm1lc3NhZ2UgfHwgaWQ7XG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlKGluZm8pO1xuICAgICAgfVxuICAgICAgdGhpcy5wcm9maWxlcnNbaWRdID0gdGltZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHRvIGBleGNlcHRpb25zLmhhbmRsZWAgaW4gd2luc3RvbiA8IDMuMC4wLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJoYW5kbGVFeGNlcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUV4Y2VwdGlvbnMoKSB7XG4gICAgICB2YXIgX3RoaXMkZXhjZXB0aW9ucztcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQ6IC5oYW5kbGVFeGNlcHRpb25zKCkgd2lsbCBiZSByZW1vdmVkIGluIHdpbnN0b25ANC4gVXNlIC5leGNlcHRpb25zLmhhbmRsZSgpJyk7XG4gICAgICAoX3RoaXMkZXhjZXB0aW9ucyA9IHRoaXMuZXhjZXB0aW9ucykuaGFuZGxlLmFwcGx5KF90aGlzJGV4Y2VwdGlvbnMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgdG8gYGV4Y2VwdGlvbnMuaGFuZGxlYCBpbiB3aW5zdG9uIDwgMy4wLjAuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInVuaGFuZGxlRXhjZXB0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmhhbmRsZUV4Y2VwdGlvbnMoKSB7XG4gICAgICB2YXIgX3RoaXMkZXhjZXB0aW9uczI7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkOiAudW5oYW5kbGVFeGNlcHRpb25zKCkgd2lsbCBiZSByZW1vdmVkIGluIHdpbnN0b25ANC4gVXNlIC5leGNlcHRpb25zLnVuaGFuZGxlKCknKTtcbiAgICAgIChfdGhpcyRleGNlcHRpb25zMiA9IHRoaXMuZXhjZXB0aW9ucykudW5oYW5kbGUuYXBwbHkoX3RoaXMkZXhjZXB0aW9uczIsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhyb3cgYSBtb3JlIG1lYW5pbmdmdWwgZGVwcmVjYXRpb24gbm90aWNlXG4gICAgICogQHRocm93cyB7RXJyb3J9IC0gVE9ETzogYWRkIHRocm93cyBkZXNjcmlwdGlvbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJjbGlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xpKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFsnTG9nZ2VyLmNsaSgpIHdhcyByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAnLCAnVXNlIGEgY3VzdG9tIHdpbnN0b24uZm9ybWF0cy5jbGkoKSBpbnN0ZWFkLicsICdTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5zdG9uanMvd2luc3Rvbi90cmVlL21hc3Rlci9VUEdSQURFLTMuMC5tZCddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWJibGVzIHRoZSBgZXZlbnRgIHRoYXQgb2NjdXJlZCBvbiB0aGUgc3BlY2lmaWVkIGB0cmFuc3BvcnRgIHVwXG4gICAgICogZnJvbSB0aGlzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIFRoZSBldmVudCB0aGF0IG9jY3VyZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNwb3J0IC0gVHJhbnNwb3J0IG9uIHdoaWNoIHRoZSBldmVudCBvY2N1cmVkXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfb25FdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25FdmVudChldmVudCwgdHJhbnNwb3J0KSB7XG4gICAgICBmdW5jdGlvbiB0cmFuc3BvcnRFdmVudChlcnIpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dpbnN0b25qcy93aW5zdG9uL2lzc3Vlcy8xMzY0XG4gICAgICAgIGlmIChldmVudCA9PT0gJ2Vycm9yJyAmJiAhdGhpcy50cmFuc3BvcnRzLmluY2x1ZGVzKHRyYW5zcG9ydCkpIHtcbiAgICAgICAgICB0aGlzLmFkZCh0cmFuc3BvcnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgZXJyLCB0cmFuc3BvcnQpO1xuICAgICAgfVxuICAgICAgaWYgKCF0cmFuc3BvcnRbJ19fd2luc3RvbicgKyBldmVudF0pIHtcbiAgICAgICAgdHJhbnNwb3J0WydfX3dpbnN0b24nICsgZXZlbnRdID0gdHJhbnNwb3J0RXZlbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uKGV2ZW50LCB0cmFuc3BvcnRbJ19fd2luc3RvbicgKyBldmVudF0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfYWRkRGVmYXVsdE1ldGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZERlZmF1bHRNZXRhKG1zZykge1xuICAgICAgaWYgKHRoaXMuZGVmYXVsdE1ldGEpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihtc2csIHRoaXMuZGVmYXVsdE1ldGEpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xufShUcmFuc2Zvcm0pO1xuZnVuY3Rpb24gZ2V0TGV2ZWxWYWx1ZShsZXZlbHMsIGxldmVsKSB7XG4gIHZhciB2YWx1ZSA9IGxldmVsc1tsZXZlbF07XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgY3VycmVudCByZWFkYWJsZVN0YXRlIHBpcGUgdGFyZ2V0cyBmb3IgdGhpcyBMb2dnZXIgaW5zdGFuY2UuXG4gKiBAdHlwZSB7QXJyYXl8T2JqZWN0fVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTG9nZ2VyLnByb3RvdHlwZSwgJ3RyYW5zcG9ydHMnLCB7XG4gIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHZhciBwaXBlcyA9IHRoaXMuX3JlYWRhYmxlU3RhdGUucGlwZXM7XG4gICAgcmV0dXJuICFBcnJheS5pc0FycmF5KHBpcGVzKSA/IFtwaXBlc10uZmlsdGVyKEJvb2xlYW4pIDogcGlwZXM7XG4gIH1cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBMb2dnZXI7IiwgIi8qKlxuICogY3JlYXRlLWxvZ2dlci5qczogTG9nZ2VyIGZhY3RvcnkgZm9yIHdpbnN0b24gbG9nZ2VyIGluc3RhbmNlcy5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyksXG4gIExFVkVMID0gX3JlcXVpcmUuTEVWRUw7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbnZhciBMb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnQGRhYmgvZGlhZ25vc3RpY3MnKSgnd2luc3RvbjpjcmVhdGUtbG9nZ2VyJyk7XG5mdW5jdGlvbiBpc0xldmVsRW5hYmxlZEZ1bmN0aW9uTmFtZShsZXZlbCkge1xuICByZXR1cm4gJ2lzJyArIGxldmVsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGV2ZWwuc2xpY2UoMSkgKyAnRW5hYmxlZCc7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgd2luc3RvbiBMb2dnZXIuIENyZWF0ZXMgYSBuZXdcbiAqIHByb3RvdHlwZSBmb3IgZWFjaCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7IU9iamVjdH0gb3B0cyAtIE9wdGlvbnMgZm9yIHRoZSBjcmVhdGVkIGxvZ2dlci5cbiAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gQSBuZXdseSBjcmVhdGVkIGxvZ2dlciBpbnN0YW5jZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgLy9cbiAgLy8gRGVmYXVsdCBsZXZlbHM6IG5wbVxuICAvL1xuICBvcHRzLmxldmVscyA9IG9wdHMubGV2ZWxzIHx8IGNvbmZpZy5ucG0ubGV2ZWxzO1xuXG4gIC8qKlxuICAgKiBEZXJpdmVkTG9nZ2VyIHRvIGF0dGFjaCB0aGUgbG9ncyBsZXZlbCBtZXRob2RzLlxuICAgKiBAdHlwZSB7RGVyaXZlZExvZ2dlcn1cbiAgICogQGV4dGVuZHMge0xvZ2dlcn1cbiAgICovXG4gIHZhciBEZXJpdmVkTG9nZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTG9nZ2VyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNsYXNzIGRlcml2ZWQgbG9nZ2VyIGZvciB3aGljaCB0aGUgbGV2ZWxzIGNhbiBiZSBhdHRhY2hlZCB0b1xuICAgICAqIHRoZSBwcm90b3R5cGUgb2YuIFRoaXMgaXMgYSBWOCBvcHRpbWl6YXRpb24gdGhhdCBpcyB3ZWxsIGtub3cgdG8gaW5jcmVhc2VcbiAgICAgKiBwZXJmb3JtYW5jZSBvZiBwcm90b3R5cGUgZnVuY3Rpb25zLlxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBjcmVhdGVkIGxvZ2dlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBEZXJpdmVkTG9nZ2VyKG9wdGlvbnMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXJpdmVkTG9nZ2VyKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIERlcml2ZWRMb2dnZXIsIFtvcHRpb25zXSk7XG4gICAgfVxuICAgIF9pbmhlcml0cyhEZXJpdmVkTG9nZ2VyLCBfTG9nZ2VyKTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKERlcml2ZWRMb2dnZXIpO1xuICB9KExvZ2dlcik7XG4gIHZhciBsb2dnZXIgPSBuZXcgRGVyaXZlZExvZ2dlcihvcHRzKTtcblxuICAvL1xuICAvLyBDcmVhdGUgdGhlIGxvZyBsZXZlbCBtZXRob2RzIGZvciB0aGUgZGVyaXZlZCBsb2dnZXIuXG4gIC8vXG4gIE9iamVjdC5rZXlzKG9wdHMubGV2ZWxzKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXZlbCkge1xuICAgIGRlYnVnKCdEZWZpbmUgcHJvdG90eXBlIG1ldGhvZCBmb3IgXCIlc1wiJywgbGV2ZWwpO1xuICAgIGlmIChsZXZlbCA9PT0gJ2xvZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ0xldmVsIFwibG9nXCIgbm90IGRlZmluZWQ6IGNvbmZsaWN0cyB3aXRoIHRoZSBtZXRob2QgXCJsb2dcIi4gVXNlIGEgZGlmZmVyZW50IGxldmVsIG5hbWUuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBEZWZpbmUgcHJvdG90eXBlIG1ldGhvZHMgZm9yIGVhY2ggbG9nIGxldmVsIGUuZy46XG4gICAgLy8gbG9nZ2VyLmxvZygnaW5mbycsIG1zZykgaW1wbGllcyB0aGVzZSBtZXRob2RzIGFyZSBkZWZpbmVkOlxuICAgIC8vIC0gbG9nZ2VyLmluZm8obXNnKVxuICAgIC8vIC0gbG9nZ2VyLmlzSW5mb0VuYWJsZWQoKVxuICAgIC8vXG4gICAgLy8gUmVtYXJrOiB0byBzdXBwb3J0IGxvZ2dlci5jaGlsZCB0aGlzICoqTVVTVCoqIGJlIGEgZnVuY3Rpb25cbiAgICAvLyBzbyBpdCdsbCBhbHdheXMgYmUgY2FsbGVkIG9uIHRoZSBpbnN0YW5jZSBpbnN0ZWFkIG9mIGEgZml4ZWRcbiAgICAvLyBwbGFjZSBpbiB0aGUgcHJvdG90eXBlIGNoYWluLlxuICAgIC8vXG4gICAgRGVyaXZlZExvZ2dlci5wcm90b3R5cGVbbGV2ZWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gUHJlZmVyIGFueSBpbnN0YW5jZSBzY29wZSwgYnV0IGRlZmF1bHQgdG8gXCJyb290XCIgbG9nZ2VyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwgbG9nZ2VyO1xuXG4gICAgICAvLyBPcHRpbWl6ZSB0aGUgaG90LXBhdGggd2hpY2ggaXMgdGhlIHNpbmdsZSBvYmplY3QuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgbXNnID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGluZm8gPSBtc2cgJiYgbXNnLm1lc3NhZ2UgJiYgbXNnIHx8IHtcbiAgICAgICAgICBtZXNzYWdlOiBtc2dcbiAgICAgICAgfTtcbiAgICAgICAgaW5mby5sZXZlbCA9IGluZm9bTEVWRUxdID0gbGV2ZWw7XG4gICAgICAgIHNlbGYuX2FkZERlZmF1bHRNZXRhKGluZm8pO1xuICAgICAgICBzZWxmLndyaXRlKGluZm8pO1xuICAgICAgICByZXR1cm4gdGhpcyB8fCBsb2dnZXI7XG4gICAgICB9XG5cbiAgICAgIC8vIFdoZW4gcHJvdmlkZWQgbm90aGluZyBhc3N1bWUgdGhlIGVtcHR5IHN0cmluZ1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNlbGYubG9nKGxldmVsLCAnJyk7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UgYnVpbGQgYXJndW1lbnQgbGlzdCB3aGljaCBjb3VsZCBwb3RlbnRpYWxseSBjb25mb3JtIHRvXG4gICAgICAvLyBlaXRoZXI6XG4gICAgICAvLyAuIHYzIEFQSTogbG9nKG9iailcbiAgICAgIC8vIDIuIHYxL3YyIEFQSTogbG9nKGxldmVsLCBtc2csIC4uLiBbc3RyaW5nIGludGVycG9sYXRlXSwgW3ttZXRhZGF0YX1dLCBbY2FsbGJhY2tdKVxuICAgICAgcmV0dXJuIHNlbGYubG9nLmFwcGx5KHNlbGYsIFtsZXZlbF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuICAgIERlcml2ZWRMb2dnZXIucHJvdG90eXBlW2lzTGV2ZWxFbmFibGVkRnVuY3Rpb25OYW1lKGxldmVsKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMgfHwgbG9nZ2VyKS5pc0xldmVsRW5hYmxlZChsZXZlbCk7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBsb2dnZXI7XG59OyIsICIvKipcbiAqIGNvbnRhaW5lci5qczogSW52ZXJzaW9uIG9mIGNvbnRyb2wgY29udGFpbmVyIGZvciB3aW5zdG9uIGxvZ2dlciBpbnN0YW5jZXMuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIGNyZWF0ZUxvZ2dlciA9IHJlcXVpcmUoJy4vY3JlYXRlLWxvZ2dlcicpO1xuXG4vKipcbiAqIEludmVyc2lvbiBvZiBjb250cm9sIGNvbnRhaW5lciBmb3Igd2luc3RvbiBsb2dnZXIgaW5zdGFuY2VzLlxuICogQHR5cGUge0NvbnRhaW5lcn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBDb250YWluZXIgb2JqZWN0IHJlc3BvbnNpYmxlIGZvciBtYW5hZ2luZyBhXG4gICAqIHNldCBvZiBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlcyBiYXNlZCBvbiBzdHJpbmcgaWRzLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IFtvcHRpb25zPXt9XSAtIERlZmF1bHQgcGFzcy10aHJ1IG9wdGlvbnMgZm9yIExvZ2dlcnMuXG4gICAqL1xuICBmdW5jdGlvbiBDb250YWluZXIoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250YWluZXIpO1xuICAgIHRoaXMubG9nZ2VycyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIGB3aW5zdG9uLkxvZ2dlcmAgaW5zdGFuY2UgZm9yIHRoZSBzcGVjaWZpZWQgYGlkYC4gSWYgYW5cbiAgICogaW5zdGFuY2UgZG9lcyBub3QgZXhpc3QsIG9uZSBpcyBjcmVhdGVkLlxuICAgKiBAcGFyYW0geyFzdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBMb2dnZXIgdG8gZ2V0LlxuICAgKiBAcGFyYW0gez9PYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbnMgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXG4gICAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gQSBjb25maWd1cmVkIExvZ2dlciBpbnN0YW5jZSB3aXRoIGEgc3BlY2lmaWVkIGlkLlxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhDb250YWluZXIsIFt7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoaWQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoIXRoaXMubG9nZ2Vycy5oYXMoaWQpKSB7XG4gICAgICAgIC8vIFJlbWFyazogU2ltcGxlIHNoYWxsb3cgY2xvbmUgZm9yIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBpbiBjYXNlIHdlIHBhc3NcbiAgICAgICAgLy8gaW4gaW5zdGFudGlhdGVkIHByb3RveXBhbCBvYmplY3RzXG4gICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zIHx8IHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMudHJhbnNwb3J0cyB8fCB0aGlzLm9wdGlvbnMudHJhbnNwb3J0cztcblxuICAgICAgICAvLyBSZW1hcms6IE1ha2Ugc3VyZSBpZiB3ZSBoYXZlIGFuIGFycmF5IG9mIHRyYW5zcG9ydHMgd2Ugc2xpY2UgaXQgdG9cbiAgICAgICAgLy8gbWFrZSBjb3BpZXMgb2YgdGhvc2UgcmVmZXJlbmNlcy5cbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgb3B0aW9ucy50cmFuc3BvcnRzID0gQXJyYXkuaXNBcnJheShleGlzdGluZykgPyBleGlzdGluZy5zbGljZSgpIDogW2V4aXN0aW5nXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zLnRyYW5zcG9ydHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKG9wdGlvbnMpO1xuICAgICAgICBsb2dnZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fZGVsZXRlKGlkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubG9nZ2Vycy5zZXQoaWQsIGxvZ2dlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5sb2dnZXJzLmdldChpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmVpdmVzIGEgYHdpbnN0b24uTG9nZ2VyYCBpbnN0YW5jZSBmb3IgdGhlIHNwZWNpZmllZCBgaWRgLiBJZlxuICAgICAqIGFuIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0LCBvbmUgaXMgY3JlYXRlZC5cbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBMb2dnZXIgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9ucyBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7TG9nZ2VyfSAtIEEgY29uZmlndXJlZCBMb2dnZXIgaW5zdGFuY2Ugd2l0aCBhIHNwZWNpZmllZCBpZC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGlkLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5hZGQoaWQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBjb250YWluZXIgaGFzIGEgbG9nZ2VyIHdpdGggdGhlIGlkLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIExvZ2dlciBpbnN0YW5jZSB0byBmaW5kLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSAtIEJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyBpZiB0aGlzIGluc3RhbmNlIGhhcyBhXG4gICAgICogbG9nZ2VyIHdpdGggdGhlIHNwZWNpZmllZCBgaWRgLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImhhc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXMoaWQpIHtcbiAgICAgIHJldHVybiAhIXRoaXMubG9nZ2Vycy5oYXMoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlcyBhIGBMb2dnZXJgIGluc3RhbmNlIHdpdGggdGhlIHNwZWNpZmllZCBgaWRgIGlmIGl0IGV4aXN0cy5cbiAgICAgKiBJZiBubyBgaWRgIGlzIHN1cHBsaWVkIHRoZW4gYWxsIExvZ2dlcnMgYXJlIGNsb3NlZC5cbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBMb2dnZXIgaW5zdGFuY2UgdG8gY2xvc2UuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJjbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZShpZCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZUxvZ2dlcihpZCk7XG4gICAgICB9XG4gICAgICB0aGlzLmxvZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5fcmVtb3ZlTG9nZ2VyKGtleSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBsb2dnZXIgYmFzZWQgb24gdGhlIGlkLlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIGxvZ2dlciB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9yZW1vdmVMb2dnZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZUxvZ2dlcihpZCkge1xuICAgICAgaWYgKCF0aGlzLmxvZ2dlcnMuaGFzKGlkKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbG9nZ2VyID0gdGhpcy5sb2dnZXJzLmdldChpZCk7XG4gICAgICBsb2dnZXIuY2xvc2UoKTtcbiAgICAgIHRoaXMuX2RlbGV0ZShpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIGBMb2dnZXJgIGluc3RhbmNlIHdpdGggdGhlIHNwZWNpZmllZCBgaWRgLlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIExvZ2dlciBpbnN0YW5jZSB0byBkZWxldGUgZnJvbVxuICAgICAqIGNvbnRhaW5lci5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlbGV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGlkKSB7XG4gICAgICB0aGlzLmxvZ2dlcnNbXCJkZWxldGVcIl0oaWQpO1xuICAgIH1cbiAgfV0pO1xufSgpOyIsICIvKipcbiAqIHdpbnN0b24uanM6IFRvcC1sZXZlbCBpbmNsdWRlIGRlZmluaW5nIFdpbnN0b24uXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGxvZ2Zvcm0gPSByZXF1aXJlKCdsb2dmb3JtJyk7XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL3dpbnN0b24vY29tbW9uJyksXG4gIHdhcm4gPSBfcmVxdWlyZS53YXJuO1xuXG4vKipcbiAqIEV4cG9zZSB2ZXJzaW9uLiBVc2UgYHJlcXVpcmVgIG1ldGhvZCBmb3IgYHdlYnBhY2tgIHN1cHBvcnQuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5leHBvcnRzLnZlcnNpb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuLyoqXG4gKiBJbmNsdWRlIHRyYW5zcG9ydHMgZGVmaW5lZCBieSBkZWZhdWx0IGJ5IHdpbnN0b25cbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xuZXhwb3J0cy50cmFuc3BvcnRzID0gcmVxdWlyZSgnLi93aW5zdG9uL3RyYW5zcG9ydHMnKTtcbi8qKlxuICogRXhwb3NlIHV0aWxpdHkgbWV0aG9kc1xuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5jb25maWcgPSByZXF1aXJlKCcuL3dpbnN0b24vY29uZmlnJyk7XG4vKipcbiAqIEhvaXN0IGZvcm1hdC1yZWxhdGVkIGZ1bmN0aW9uYWxpdHkgZnJvbSBsb2dmb3JtLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5hZGRDb2xvcnMgPSBsb2dmb3JtLmxldmVscztcbi8qKlxuICogSG9pc3QgZm9ybWF0LXJlbGF0ZWQgZnVuY3Rpb25hbGl0eSBmcm9tIGxvZ2Zvcm0uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLmZvcm1hdCA9IGxvZ2Zvcm0uZm9ybWF0O1xuLyoqXG4gKiBFeHBvc2UgY29yZSBMb2dnaW5nLXJlbGF0ZWQgcHJvdG90eXBlcy5cbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0cy5jcmVhdGVMb2dnZXIgPSByZXF1aXJlKCcuL3dpbnN0b24vY3JlYXRlLWxvZ2dlcicpO1xuLyoqXG4gKiBFeHBvc2UgY29yZSBMb2dnaW5nLXJlbGF0ZWQgcHJvdG90eXBlcy5cbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0cy5Mb2dnZXIgPSByZXF1aXJlKCcuL3dpbnN0b24vbG9nZ2VyJyk7XG4vKipcbiAqIEV4cG9zZSBjb3JlIExvZ2dpbmctcmVsYXRlZCBwcm90b3R5cGVzLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5FeGNlcHRpb25IYW5kbGVyID0gcmVxdWlyZSgnLi93aW5zdG9uL2V4Y2VwdGlvbi1oYW5kbGVyJyk7XG4vKipcbiAqIEV4cG9zZSBjb3JlIExvZ2dpbmctcmVsYXRlZCBwcm90b3R5cGVzLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5SZWplY3Rpb25IYW5kbGVyID0gcmVxdWlyZSgnLi93aW5zdG9uL3JlamVjdGlvbi1oYW5kbGVyJyk7XG4vKipcbiAqIEV4cG9zZSBjb3JlIExvZ2dpbmctcmVsYXRlZCBwcm90b3R5cGVzLlxuICogQHR5cGUge0NvbnRhaW5lcn1cbiAqL1xuZXhwb3J0cy5Db250YWluZXIgPSByZXF1aXJlKCcuL3dpbnN0b24vY29udGFpbmVyJyk7XG4vKipcbiAqIEV4cG9zZSBjb3JlIExvZ2dpbmctcmVsYXRlZCBwcm90b3R5cGVzLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5UcmFuc3BvcnQgPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuLyoqXG4gKiBXZSBjcmVhdGUgYW5kIGV4cG9zZSBhIGRlZmF1bHQgYENvbnRhaW5lcmAgdG8gYHdpbnN0b24ubG9nZ2Vyc2Agc28gdGhhdCB0aGVcbiAqIHByb2dyYW1tZXIgbWF5IG1hbmFnZSBtdWx0aXBsZSBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlcyB3aXRob3V0IGFueVxuICogYWRkaXRpb25hbCBvdmVyaGVhZC5cbiAqIEBleGFtcGxlXG4gKiAgIC8vIHNvbWUtZmlsZTEuanNcbiAqICAgY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnd2luc3RvbicpLmxvZ2dlcnMuZ2V0KCdzb21ldGhpbmcnKTtcbiAqXG4gKiAgIC8vIHNvbWUtZmlsZTIuanNcbiAqICAgY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnd2luc3RvbicpLmxvZ2dlcnMuZ2V0KCdzb21ldGhpbmcnKTtcbiAqL1xuZXhwb3J0cy5sb2dnZXJzID0gbmV3IGV4cG9ydHMuQ29udGFpbmVyKCk7XG5cbi8qKlxuICogV2UgY3JlYXRlIGFuZCBleHBvc2UgYSAnZGVmYXVsdExvZ2dlcicgc28gdGhhdCB0aGUgcHJvZ3JhbW1lciBtYXkgZG8gdGhlXG4gKiBmb2xsb3dpbmcgd2l0aG91dCB0aGUgbmVlZCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2Ygd2luc3Rvbi5Mb2dnZXIgZGlyZWN0bHk6XG4gKiBAZXhhbXBsZVxuICogICBjb25zdCB3aW5zdG9uID0gcmVxdWlyZSgnd2luc3RvbicpO1xuICogICB3aW5zdG9uLmxvZygnaW5mbycsICdzb21lIG1lc3NhZ2UnKTtcbiAqICAgd2luc3Rvbi5lcnJvcignc29tZSBlcnJvcicpO1xuICovXG52YXIgZGVmYXVsdExvZ2dlciA9IGV4cG9ydHMuY3JlYXRlTG9nZ2VyKCk7XG5cbi8vIFBhc3MgdGhyb3VnaCB0aGUgdGFyZ2V0IG1ldGhvZHMgb250byBgd2luc3Rvbi5cbk9iamVjdC5rZXlzKGV4cG9ydHMuY29uZmlnLm5wbS5sZXZlbHMpLmNvbmNhdChbJ2xvZycsICdxdWVyeScsICdzdHJlYW0nLCAnYWRkJywgJ3JlbW92ZScsICdjbGVhcicsICdwcm9maWxlJywgJ3N0YXJ0VGltZXInLCAnaGFuZGxlRXhjZXB0aW9ucycsICd1bmhhbmRsZUV4Y2VwdGlvbnMnLCAnaGFuZGxlUmVqZWN0aW9ucycsICd1bmhhbmRsZVJlamVjdGlvbnMnLCAnY29uZmlndXJlJywgJ2NoaWxkJ10pLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICByZXR1cm4gZXhwb3J0c1ttZXRob2RdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyW21ldGhvZF0uYXBwbHkoZGVmYXVsdExvZ2dlciwgYXJndW1lbnRzKTtcbiAgfTtcbn0pO1xuXG4vKipcbiAqIERlZmluZSBnZXR0ZXIgLyBzZXR0ZXIgZm9yIHRoZSBkZWZhdWx0IGxvZ2dlciBsZXZlbCB3aGljaCBuZWVkIHRvIGJlIGV4cG9zZWRcbiAqIGJ5IHdpbnN0b24uXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2xldmVsJywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gZGVmYXVsdExvZ2dlci5sZXZlbDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgZGVmYXVsdExvZ2dlci5sZXZlbCA9IHZhbDtcbiAgfVxufSk7XG5cbi8qKlxuICogRGVmaW5lIGdldHRlciBmb3IgYGV4Y2VwdGlvbnNgIHdoaWNoIHJlcGxhY2VzIGBoYW5kbGVFeGNlcHRpb25zYCBhbmRcbiAqIGB1bmhhbmRsZUV4Y2VwdGlvbnNgLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdleGNlcHRpb25zJywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gZGVmYXVsdExvZ2dlci5leGNlcHRpb25zO1xuICB9XG59KTtcblxuLyoqXG4gKiBEZWZpbmUgZ2V0dGVyIGZvciBgcmVqZWN0aW9uc2Agd2hpY2ggcmVwbGFjZXMgYGhhbmRsZVJlamVjdGlvbnNgIGFuZFxuICogYHVuaGFuZGxlUmVqZWN0aW9uc2AuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3JlamVjdGlvbnMnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyLnJlamVjdGlvbnM7XG4gIH1cbn0pO1xuXG4vKipcbiAqIERlZmluZSBnZXR0ZXJzIC8gc2V0dGVycyBmb3IgYXBwcm9wcmlhdGUgcHJvcGVydGllcyBvZiB0aGUgZGVmYXVsdCBsb2dnZXJcbiAqIHdoaWNoIG5lZWQgdG8gYmUgZXhwb3NlZCBieSB3aW5zdG9uLlxuICogQHR5cGUge0xvZ2dlcn1cbiAqL1xuWydleGl0T25FcnJvciddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIHByb3AsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyW3Byb3BdO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICBkZWZhdWx0TG9nZ2VyW3Byb3BdID0gdmFsO1xuICAgIH1cbiAgfSk7XG59KTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCB0cmFuc3BvcnRzIGFuZCBleGNlcHRpb25IYW5kbGVycyBmb3IgdGhlIGRlZmF1bHQgd2luc3RvbiBsb2dnZXIuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2RlZmF1bHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBleGNlcHRpb25IYW5kbGVyczogZGVmYXVsdExvZ2dlci5leGNlcHRpb25IYW5kbGVycyxcbiAgICAgIHJlamVjdGlvbkhhbmRsZXJzOiBkZWZhdWx0TG9nZ2VyLnJlamVjdGlvbkhhbmRsZXJzLFxuICAgICAgdHJhbnNwb3J0czogZGVmYXVsdExvZ2dlci50cmFuc3BvcnRzXG4gICAgfTtcbiAgfVxufSk7XG5cbi8vIEhhdmUgZnJpZW5kbGllciBicmVha2FnZSBub3RpY2VzIGZvciBwcm9wZXJ0aWVzIHRoYXQgd2VyZSBleHBvc2VkIGJ5IGRlZmF1bHRcbi8vIG9uIHdpbnN0b24gPCAzLjAuXG53YXJuLmRlcHJlY2F0ZWQoZXhwb3J0cywgJ3NldExldmVscycpO1xud2Fybi5mb3JGdW5jdGlvbnMoZXhwb3J0cywgJ3VzZUZvcm1hdCcsIFsnY2xpJ10pO1xud2Fybi5mb3JQcm9wZXJ0aWVzKGV4cG9ydHMsICd1c2VGb3JtYXQnLCBbJ3BhZExldmVscycsICdzdHJpcENvbG9ycyddKTtcbndhcm4uZm9yRnVuY3Rpb25zKGV4cG9ydHMsICdkZXByZWNhdGVkJywgWydhZGRSZXdyaXRlcicsICdhZGRGaWx0ZXInLCAnY2xvbmUnLCAnZXh0ZW5kJ10pO1xud2Fybi5mb3JQcm9wZXJ0aWVzKGV4cG9ydHMsICdkZXByZWNhdGVkJywgWydlbWl0RXJycycsICdsZXZlbExlbmd0aCddKTsiLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgVmlld01hbmFnZXIgfSBmcm9tIFwiLi9jb3JlL3ZpZXctbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcIi4vY29yZS9pMThuXCI7XHJcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9jb3JlL2xvZ2dlcic7XHJcbmltcG9ydCB7IFRhc2tNYW5hZ2VyIH0gZnJvbSBcIi4vY29yZS90YXNrLW1hbmFnZXJcIjtcclxuaW1wb3J0IHsgU2V0dGluZ1RhYiB9IGZyb20gXCIuL3NldHRpbmdzL3NldHRpbmctdGFiXCI7XHJcbmltcG9ydCB7XHJcblx0REVGQVVMVF9TRVRUSU5HUyxcclxuXHRBZ2VuZGFQbHVnaW5TZXR0aW5ncyxcclxufSBmcm9tIFwiLi9zZXR0aW5ncy9zZXR0aW5nc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JzaWRpYW5BZ2VuZGEgZXh0ZW5kcyBQbHVnaW4ge1xyXG4gIHNldHRpbmdzOiBBZ2VuZGFQbHVnaW5TZXR0aW5ncztcclxuICBwcml2YXRlIHZpZXdNYW5hZ2VyOiBWaWV3TWFuYWdlciA7XHJcbiAgcHJpdmF0ZSBpMThuOiBJMThuO1xyXG4gIHByaXZhdGUgdGFza01hbmFnZXI6IFRhc2tNYW5hZ2VyOyBcclxuICBcclxuICAvLy8gQ29uc3RydWN0b3IgZGUgbGEgY2xhc2UgT2JzaWRpYW5BZ2VuZGFQbHVnaW4uXHJcbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG1hbmlmZXN0OiBhbnkpIHtcclxuICAgICAgc3VwZXIoYXBwLCBtYW5pZmVzdCk7XHJcbiAgICAgIHRoaXMuaTE4biA9IG5ldyBJMThuKGFwcCk7XHJcbiAgICAgIHRoaXMudGFza01hbmFnZXIgPSBuZXcgVGFza01hbmFnZXIoYXBwLCB0aGlzLmkxOG4sIHRoaXMpO1xyXG4gICAgICB0aGlzLnZpZXdNYW5hZ2VyID0gbmV3IFZpZXdNYW5hZ2VyKHRoaXMsIHRoaXMuaTE4biwgdGhpcy50YXNrTWFuYWdlcik7IC8vIFBhc2FyIGxhIGluc3RhbmNpYSBkZWwgcGx1Z2luXHJcbiAgfVxyXG5cclxuICAvLy8gTVx1MDBFOXRvZG8gZGUgaW5pY2lhbGl6YSBkZWwgcGx1Z2luLlxyXG4gIGFzeW5jIG9ubG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGxvZ2dlci5pbmZvKFwiQ2FyZ2FuZG8gZWwgcGx1Z2luIE9ic2lkaWFuIEFnZW5kYS4uLlwiKTtcclxuICAgIGNvbnN0IE9WRVJWSUVXX1ZJRVdfVFlQRSA9ICdvdmVydmlldy12aWV3JztcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuICAgICAgLy8gQ2FyZ2FyIGlkaW9tYSAocHVlZGVzIHVzYXIgdW5hIGNvbmZpZ3VyYWNpXHUwMEYzbiBvIGRldGVjdGFyIGVsIGlkaW9tYSBkZWwgc2lzdGVtYSlcclxuICAgICAgYXdhaXQgdGhpcy5pMThuLmxvYWRMYW5ndWFnZSh0aGlzLnNldHRpbmdzLmxhbmd1YWdlKTtcclxuXHJcbiAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcywgdGhpcy5pMThuKSk7XHJcblxyXG4gICAgICAvLyBDYXJnYXIgZXN0aWxvcyBDU1NcclxuICAgICAgYXdhaXQgdGhpcy5sb2FkU3R5bGVzKCk7XHJcblxyXG4gICAgICB0aGlzLmFkZFJpYmJvbkljb24oXCJjYWxlbmRhci1jaGVja1wiLCB0aGlzLmkxOG4udChcImFnZW5kYV90aXRsZVwiKSwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHRoaXMudmlld01hbmFnZXIuYWN0aXZhdGVWaWV3KE9WRVJWSUVXX1ZJRVdfVFlQRSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gUmVnaXN0cmFyIGV2ZW50b3NcclxuICAgICAgdGhpcy50YXNrTWFuYWdlci5yZWdpc3RlckV2ZW50cyh0aGlzKTtcclxuXHJcbiAgICAgIHRoaXMudmlld01hbmFnZXIucmVnaXN0ZXJWaWV3cygpO1xyXG4gICAgICBsb2dnZXIuaW5mbyhcIlZpc3RhcyByZWdpc3RyYWRhcyBjb3JyZWN0YW1lbnRlLlwiKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihgRXJyb3IgZHVyYW50ZSBsYSBjYXJnYSBkZWwgcGx1Z2luOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWRTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogQ2FyZ2EgbG9zIGVzdGlsb3MgQ1NTIGRlbCBwbHVnaW5cclxuICAqIEByZXR1cm5zIFByb21lc2EgcXVlIHNlIHJlc3VlbHZlIGN1YW5kbyBsb3MgZXN0aWxvcyBzZSBoYW4gY2FyZ2Fkb1xyXG4gICovXHJcbiAgcHJpdmF0ZSBhc3luYyBsb2FkU3R5bGVzKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgY3NzUGF0aCA9IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZ2V0UmVzb3VyY2VQYXRoKFxyXG4gICAgICAgICcub2JzaWRpYW4vcGx1Z2lucy9vYnNpZGlhbi1hZ2VuZGEvc3R5bGVzL3N0eWxlcy5jc3MnXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goY3NzUGF0aCk7XHJcblxyXG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcclxuICAgICAgICBjb25zdCBjc3NDb250ZW50ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gY3NzQ29udGVudDtcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcclxuICAgICAgICBsb2dnZXIuaW5mbyhcIkFyY2hpdm8gQ1NTIGNhcmdhZG8gY29ycmVjdGFtZW50ZS5cIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXJyb3IgYWwgY2FyZ2FyIGVsIGFyY2hpdm8gQ1NTOlwiLCByZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKGBFcnJvciBhbCBjYXJnYXIgZXN0aWxvcyBDU1M6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb251bmxvYWQoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnRGVzY2FyZ2FuZG8gcGx1Z2luIE9ic2lkaWFuIEFnZW5kYScpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIERlc3JlZ2lzdHJhciB2aXN0YXNcclxuICAgICAgaWYgKHRoaXMudmlld01hbmFnZXIpIHtcclxuICAgICAgICB0aGlzLnZpZXdNYW5hZ2VyLnVucmVnaXN0ZXJWaWV3cygpO1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKCdWaXN0YXMgZGVzcmVnaXN0cmFkYXMgY29ycmVjdGFtZW50ZScpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBEZXNyZWdpc3RyYXIgZXZlbnRvc1xyXG4gICAgICBpZiAodGhpcy50YXNrTWFuYWdlcikge1xyXG4gICAgICAgIHRoaXMudGFza01hbmFnZXIudW5yZWdpc3RlckV2ZW50cygpO1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKCdFdmVudG9zIGRlc3JlZ2lzdHJhZG9zIGNvcnJlY3RhbWVudGUnKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gRWxpbWluYXIgZXN0aWxvcyBhcGxpY2Fkb3NcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbZGF0YS1wbHVnaW49XCJvYnNpZGlhbi1hZ2VuZGFcIl0nKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gTGltcGlhciBjdWFscXVpZXIgdGllbXBvL2ludGVydmFsbyBxdWUgcHVlZGEgZXN0YXIgYWN0aXZvXHJcbiAgICAgIC8vIFNpIHR1IHBsdWdpbiB1dGlsaXphIHNldEludGVydmFsIG8gc2V0VGltZW91dFxyXG4gICAgICAvLyBjbGVhckludGVydmFsKHRoaXMuc29tZUludGVydmFsSWQpO1xyXG4gICAgICAvLyBjbGVhclRpbWVvdXQodGhpcy5zb21lVGltZW91dElkKTtcclxuICAgICAgXHJcbiAgICAgIC8vIExpbXBpYXIgcmVmZXJlbmNpYXNcclxuICAgICAgLy8gdGhpcy52aWV3TWFuYWdlciA9IG51bGw7XHJcbiAgICAgIC8vIHRoaXMudGFza01hbmFnZXIgPSBudWxsO1xyXG4gICAgICAvLyB0aGlzLmkxOG4gPSBudWxsO1xyXG4gICAgICBcclxuICAgICAgbG9nZ2VyLmluZm8oJ0xpbXBpZXphIGNvbXBsZXRhZGEsIHBsdWdpbiBkZXNhY3RpdmFkbyBjb24gXHUwMEU5eGl0bycpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKGBFcnJvciBkdXJhbnRlIGxhIGRlc2NhcmdhIGRlbCBwbHVnaW46ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFRGb2xkZXIgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBIYW5kbGViYXJzIGZyb20gJ2hhbmRsZWJhcnMnO1xyXG5pbXBvcnQgeyBJVGFzaywgRm9sZGVyTm9kZSB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBUYXNrTWFuYWdlciB9IGZyb20gJy4uL2NvcmUvdGFzay1tYW5hZ2VyJztcclxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XHJcbmltcG9ydCB7IFRhc2tQcmlvcml0eUljb24gfSBmcm9tICcuLi90eXBlcy9lbnVtcyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcbiAgcHJpdmF0ZSBwYXRoSGJzOiBzdHJpbmcgPSAnLm9ic2lkaWFuL3BsdWdpbnMvb2JzaWRpYW4tYWdlbmRhL3RlbXBsYXRlcy8nOyBcclxuICBwcml2YXRlIGhiczogc3RyaW5nID0gJy5oYnMnOyAvLyBFeHRlbnNpXHUwMEYzbiBkZSBsb3MgYXJjaGl2b3MgZGUgcGxhbnRpbGxhXHJcbiAgLy8gQVx1MDBGMWFkaXIgZXN0YSBwcm9waWVkYWQgcGFyYSBlbCBjYWNoXHUwMEU5OlxyXG4gIHByaXZhdGUgdGVtcGxhdGVDYWNoZTogUmVjb3JkPHN0cmluZywgSGFuZGxlYmFyc1RlbXBsYXRlRGVsZWdhdGU+ID0ge307XHJcbiAgcHJpdmF0ZSBoZWxwZXJzUmVnaXN0ZXJlZCA9IGZhbHNlOyAvLyBGbGFnIHBhcmEgdmVyaWZpY2FyIHNpIGxvcyBoZWxwZXJzIHlhIGVzdFx1MDBFMW4gcmVnaXN0cmFkb3NcclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIGdldEFsbFRhc2tzKHRhc2tNYW5hZ2VyOiBUYXNrTWFuYWdlcik6IFByb21pc2U8SVRhc2tbXT4ge1xyXG4gICAgLy9jb25zb2xlLmxvZyhcIkFjdHVhbGl6YW5kbyB0YXJlYXNcIik7IC8vIERlYnVnZ2luZyBsaW5lXHJcbiAgICByZXR1cm4gYXdhaXQgdGFza01hbmFnZXIuZ2V0QWxsVGFza3MoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhc3luYyBnZXRUb2RheVRhc2tzKHRhc2tNYW5hZ2VyOiBUYXNrTWFuYWdlcik6IFByb21pc2U8SVRhc2tbXT4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IHRhc2tNYW5hZ2VyLmdldFRvZGF5VGFza3MoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBncm91cFRhc2tzQnlGb2xkZXIodGFza3M6IElUYXNrW10pOiBSZWNvcmQ8c3RyaW5nLCBGb2xkZXJOb2RlPiB7XHJcbiAgICBjb25zdCByb290Rm9sZGVyczogUmVjb3JkPHN0cmluZywgRm9sZGVyTm9kZT4gPSB7fTtcclxuICAgIFxyXG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcclxuICAgICAgaWYgKCF0YXNrLmZpbGVQYXRoKSByZXR1cm47XHJcbiAgICAgIFxyXG4gICAgICAvLyBEaXZpZGlyIGxhIHJ1dGEgZGVsIGFyY2hpdm8gZW4gcGFydGVzXHJcbiAgICAgIGNvbnN0IHBhdGhQYXJ0cyA9IHRhc2suZmlsZVBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFNpIG5vIGhheSBwYXJ0ZXMgZGUgcnV0YSwgYXNpZ25hciBhIFwiUm9vdFwiXHJcbiAgICAgIGlmIChwYXRoUGFydHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgaWYgKCFyb290Rm9sZGVyc1snUm9vdCddKSB7XHJcbiAgICAgICAgICByb290Rm9sZGVyc1snUm9vdCddID0ge1xyXG4gICAgICAgICAgICBuYW1lOiAnUm9vdCcsXHJcbiAgICAgICAgICAgIGZ1bGxQYXRoOiAnUm9vdCcsXHJcbiAgICAgICAgICAgIHRhc2tzOiBbXSxcclxuICAgICAgICAgICAgc3ViZm9sZGVyczoge31cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJvb3RGb2xkZXJzWydSb290J10udGFza3MucHVzaCh0YXNrKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFByb2Nlc2FyIGxhIGplcmFycXVcdTAwRURhIGRlIGNhcnBldGFzXHJcbiAgICAgIGxldCBjdXJyZW50TGV2ZWwgPSByb290Rm9sZGVycztcclxuICAgICAgbGV0IGN1cnJlbnRQYXRoID0gJyc7XHJcbiAgICAgIFxyXG4gICAgICAvLyBJdGVyYXIgcG9yIGNhZGEgbml2ZWwgZGUgY2FycGV0YSAoZXhjZXB0byBlbCBcdTAwRkFsdGltbyBxdWUgZXMgZWwgYXJjaGl2bylcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoUGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgZm9sZGVyTmFtZSA9IHBhdGhQYXJ0c1tpXTtcclxuICAgICAgICBjdXJyZW50UGF0aCA9IGN1cnJlbnRQYXRoID8gYCR7Y3VycmVudFBhdGh9LyR7Zm9sZGVyTmFtZX1gIDogZm9sZGVyTmFtZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBQYXJhIGVsIHByaW1lciBuaXZlbCwgY3JlYXIgZW4gcm9vdEZvbGRlcnMgc2kgbm8gZXhpc3RlXHJcbiAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgIGlmICghY3VycmVudExldmVsW2ZvbGRlck5hbWVdKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbFtmb2xkZXJOYW1lXSA9IHtcclxuICAgICAgICAgICAgICBuYW1lOiBmb2xkZXJOYW1lLFxyXG4gICAgICAgICAgICAgIGZ1bGxQYXRoOiBmb2xkZXJOYW1lLFxyXG4gICAgICAgICAgICAgIHRhc2tzOiBbXSxcclxuICAgICAgICAgICAgICBzdWJmb2xkZXJzOiB7fVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gU2kgZXMgZWwgXHUwMEZBbHRpbW8gbml2ZWwgZGUgY2FycGV0YSwgYVx1MDBGMWFkaXIgbGEgdGFyZWEgYXF1XHUwMEVEXHJcbiAgICAgICAgICBpZiAoaSA9PT0gcGF0aFBhcnRzLmxlbmd0aCAtIDIpIHtcclxuICAgICAgICAgICAgY3VycmVudExldmVsW2ZvbGRlck5hbWVdLnRhc2tzLnB1c2godGFzayk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWxbZm9sZGVyTmFtZV0uc3ViZm9sZGVycztcclxuICAgICAgICB9IFxyXG4gICAgICAgIC8vIFBhcmEgbml2ZWxlcyBzdWJzZWN1ZW50ZXNcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGlmICghY3VycmVudExldmVsW2ZvbGRlck5hbWVdKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbFtmb2xkZXJOYW1lXSA9IHtcclxuICAgICAgICAgICAgICBuYW1lOiBmb2xkZXJOYW1lLFxyXG4gICAgICAgICAgICAgIGZ1bGxQYXRoOiBjdXJyZW50UGF0aCxcclxuICAgICAgICAgICAgICB0YXNrczogW10sXHJcbiAgICAgICAgICAgICAgc3ViZm9sZGVyczoge31cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIFNpIGVzIGVsIFx1MDBGQWx0aW1vIG5pdmVsIGRlIGNhcnBldGEsIGFcdTAwRjFhZGlyIGxhIHRhcmVhIGFxdVx1MDBFRFxyXG4gICAgICAgICAgaWYgKGkgPT09IHBhdGhQYXJ0cy5sZW5ndGggLSAyKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbFtmb2xkZXJOYW1lXS50YXNrcy5wdXNoKHRhc2spO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY3VycmVudExldmVsID0gY3VycmVudExldmVsW2ZvbGRlck5hbWVdLnN1YmZvbGRlcnM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHJvb3RGb2xkZXJzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmllcnRlIHVuYSBmZWNoYSBhIG9iamV0byBEYXRlIGRlIEphdmFTY3JpcHQgbWFudGVuaWVuZG8gZWwgZFx1MDBFRGEgY29ycmVjdG8gZW4gbGEgem9uYSBob3JhcmlhIGxvY2FsXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHRvTG9jYWxNaWRuaWdodChkYXRlSW5wdXQ6IGFueSk6IERhdGUgfCBudWxsIHtcclxuICAgIGlmICghZGF0ZUlucHV0KSByZXR1cm4gbnVsbDtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IGRhdGU6IERhdGU7XHJcbiAgICAgIFxyXG4gICAgICAvLyBTaSBlcyB1biBzdHJpbmcsIGNvbnZlcnRpciBkaXJlY3RhbWVudGVcclxuICAgICAgaWYgKHR5cGVvZiBkYXRlSW5wdXQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgLy8gQ3JlYXIgRGF0ZVRpbWUgZW4gem9uYSBob3JhcmlhIGxvY2FsLCB1c2FuZG8gc3RhcnRPZignZGF5JykgcGFyYSBnYXJhbnRpemFyIG1lZGlhbm9jaGVcclxuICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyhkYXRlSW5wdXQpLnN0YXJ0T2YoJ2RheScpLnRvSlNEYXRlKCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFNpIGVzIHVuIG9iamV0byBEYXRlLCBhc2VndXJhciBxdWUgc2VhIG1lZGlhbm9jaGUgZW4gem9uYSBob3JhcmlhIGxvY2FsXHJcbiAgICAgIGlmIChkYXRlSW5wdXQgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZUlucHV0KS5zdGFydE9mKCdkYXknKS50b0pTRGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBTaSB0aWVuZSBtXHUwMEU5dG9kbyB0b0pTRGF0ZSgpLCB1c2FybG8geSBsdWVnbyBhc2VndXJhciBxdWUgc2VhIG1lZGlhbm9jaGUgbG9jYWxcclxuICAgICAgaWYgKGRhdGVJbnB1dCAmJiB0eXBlb2YgZGF0ZUlucHV0LnRvSlNEYXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZUlucHV0LnRvSlNEYXRlKCkpLnN0YXJ0T2YoJ2RheScpLnRvSlNEYXRlKCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFx1MDBEQWx0aW1vIHJlY3Vyc286IGludGVudGFyIGNyZWFyIHVuYSBmZWNoYVxyXG4gICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZUlucHV0KTtcclxuICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZSkuc3RhcnRPZignZGF5JykudG9KU0RhdGUoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjb252ZXJ0aXIgZmVjaGE6XCIsIGVycm9yLCBkYXRlSW5wdXQpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCByZWdpc3RlckhhbmRsZWJhcnNIZWxwZXJzKGkxOG46IGFueSk6IHZvaWQge1xyXG4gICAgLy8gU2kgeWEgZXN0XHUwMEUxbiByZWdpc3RyYWRvcywgbm8gaGFjZXIgbmFkYVxyXG4gICAgaWYgKHRoaXMuaGVscGVyc1JlZ2lzdGVyZWQpIHJldHVybjtcclxuICAgIFxyXG4gICAgLy8gUmVnaXN0cmFyIGhlbHBlcnMgY29tdW5lcyBwYXJhIHRvZGFzIGxhcyB2aXN0YXNcclxuICAgIHRoaXMucmVnaXN0ZXJDb21tb25IZWxwZXJzKGkxOG4pO1xyXG4gICAgXHJcbiAgICAvLyBSZWdpc3RyYXIgaGVscGVycyBlc3BlY1x1MDBFRGZpY29zIHBhcmEgbGEgdmlzdGEgYWN0dWFsXHJcbiAgICB0aGlzLnJlZ2lzdGVyVmlld1NwZWNpZmljSGVscGVycyhpMThuKTtcclxuICBcclxuICAgIHRoaXMuaGVscGVyc1JlZ2lzdGVyZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0cmEgdG9kb3MgbG9zIGhlbHBlcnMgZGUgSGFuZGxlYmFycyBkZSB1bmEgc29sYSB2ZXpcclxuICAgKiBAcGFyYW0gaTE4biBTZXJ2aWNpbyBkZSBpbnRlcm5hY2lvbmFsaXphY2lcdTAwRjNuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHJlZ2lzdGVyQ29tbW9uSGVscGVycyhpMThuOiBhbnkpOiB2b2lkIHtcclxuICAgIFxyXG4gICAgLy8gSGVscGVyIHBhcmEgdHJhZHVjY2lcdTAwRjNuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwidFwiLCAoa2V5OiBzdHJpbmcpID0+IGkxOG4udChrZXkpKTtcclxuICAgIFxyXG4gICAgLy8gSGVscGVyIHBhcmEgZm9ybWF0ZWFyIGZlY2hhc1xyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImZvcm1hdERhdGVcIiwgZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICBpZiAoIWRhdGUpIHJldHVybiBcIlwiO1xyXG5cclxuICAgICAgLy8gU2kgZXMgdW4gc3RyaW5nLCBjb252ZXJ0aXIgYSBvYmpldG8gRGF0ZVRpbWVcclxuICAgICAgaWYgKHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tSVNPKGRhdGUpLnRvRm9ybWF0KCdkZCBNTU0geXl5eScpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBTaSB5YSBlcyB1biBvYmpldG8gRGF0ZVRpbWUgZGUgTHV4b25cclxuICAgICAgaWYgKGRhdGUuaXNMdXhvbkRhdGVUaW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGUudG9Gb3JtYXQoJ2RkIE1NTSB5eXl5Jyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFNpIGVzIHVuIG9iamV0byBEYXRlIGRlIEphdmFTY3JpcHRcclxuICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZSkudG9Gb3JtYXQoJ2RkIE1NTSB5eXl5Jyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEZhbGxiYWNrOiBpbnRlbnRhciBjb252ZXJ0aXIgY3VhbHF1aWVyIG90cm8gZm9ybWF0b1xyXG4gICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyhkYXRlLnRvU3RyaW5nKCkpLnRvRm9ybWF0KCdkZCBNTU0geXl5eScpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIEhlbHBlciBwYXJhIGNvbnZlcnRpciBwcmlvcmlkYWQgYSBcdTAwRURjb25vIHNlZ1x1MDBGQW4gZWwgZW51bVxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcInByaW9yaXR5SWNvblwiLCBmdW5jdGlvbihwcmlvcml0eSkge1xyXG4gICAgICBpZiAoIXByaW9yaXR5KSByZXR1cm4gXCJcIjtcclxuICAgICAgXHJcbiAgICAgIC8vIERldm9sdmVyIGRpcmVjdGFtZW50ZSBlbCB2YWxvciBkZWwgZW51bSBzaSBleGlzdGVcclxuICAgICAgaWYgKE9iamVjdC52YWx1ZXMoVGFza1ByaW9yaXR5SWNvbikuaW5jbHVkZXMocHJpb3JpdHkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHByaW9yaXR5O1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBTaSBlcyB1biBzdHJpbmcgcXVlIGNvaW5jaWRlIGNvbiB1bmEgY2xhdmUgZGVsIGVudW0gKGNhc2UgaW5zZW5zaXRpdmUpXHJcbiAgICAgIGNvbnN0IHVwcGVyY2FzZVByaW9yaXR5ID0gcHJpb3JpdHkudG9VcHBlckNhc2U/LigpIHx8IHByaW9yaXR5O1xyXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBUYXNrUHJpb3JpdHlJY29uKSB7XHJcbiAgICAgICAgaWYgKGtleS50b1VwcGVyQ2FzZSgpID09PSB1cHBlcmNhc2VQcmlvcml0eSkge1xyXG4gICAgICAgICAgcmV0dXJuIFRhc2tQcmlvcml0eUljb25ba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFZhbG9yIHBvciBkZWZlY3RvIHNpIG5vIGhheSBjb2luY2lkZW5jaWFcclxuICAgICAgcmV0dXJuICcgJztcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEhlbHBlciBwYXJhIG11bHRpcGxpY2FyIG5cdTAwRkFtZXJvcyAoXHUwMEZBdGlsIHBhcmEgbGEgc2FuZ3JcdTAwRURhKVxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcIm11bHRpcGx5XCIsIGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgcmV0dXJuIGEgKiBiO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSGVscGVyIHBhcmEgc3VtYXIgblx1MDBGQW1lcm9zIChcdTAwRkF0aWwgcGFyYSBpbmNyZW1lbnRhciBuaXZlbClcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJhZGRcIiwgZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICByZXR1cm4gYSArIGI7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICogTVx1MDBFOXRvZG8gcGFyYSByZWdpc3RyYXIgaGVscGVycyBlc3BlY1x1MDBFRGZpY29zIHBhcmEgY2FkYSB2aXN0YS5cclxuICogTGFzIGNsYXNlcyBoaWphcyBwdWVkZW4gc29icmVzY3JpYmlyIGVzdGUgbVx1MDBFOXRvZG8gcGFyYSByZWdpc3RyYXIgc3VzIHByb3Bpb3MgaGVscGVycy5cclxuICovXHJcbiAgcHJvdGVjdGVkIHJlZ2lzdGVyVmlld1NwZWNpZmljSGVscGVycyhpMThuOiBhbnkpOiB2b2lkIHtcclxuICAgIC8vIFBvciBkZWZlY3RvIG5vIHJlZ2lzdHJhIG5pbmdcdTAwRkFuIGhlbHBlciBlc3BlY1x1MDBFRGZpY29cclxuICAgIC8vIExhcyBjbGFzZXMgaGlqYXMgc29icmVzY3JpYmlyXHUwMEUxbiBlc3RlIG1cdTAwRTl0b2RvIHNlZ1x1MDBGQW4gc2VhIG5lY2VzYXJpb1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIHJlbmRlckhlYWRlcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBpMThuOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8vY29uc29sZS5sb2coXCJEaWJ1amEgZW5jYWJlemFkb1wiKTsgLy8gRGVidWdnaW5nIGxpbmVcclxuICAgIFxyXG4gICAgLy8gQnVzY2FyIGxhIHBsYW50aWxsYSBlbiBlbCBjYWNoXHUwMEU5IHByaW1lcm9cclxuICAgIGxldCBoZWFkZXJUZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVDYWNoZVsnaGVhZGVyJ107XHJcbiAgICBcclxuICAgIGlmICghaGVhZGVyVGVtcGxhdGUpIHtcclxuICAgICAgY29uc3QgaGVhZGVyUGF0aCA9IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZ2V0UmVzb3VyY2VQYXRoKHRoaXMucGF0aEhicyArICdoZWFkZXIuaGJzJyk7XHJcbiAgICAgIGNvbnN0IGhlYWRlclJlc3BvbnNlID0gYXdhaXQgZmV0Y2goaGVhZGVyUGF0aCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIWhlYWRlclJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNhcmdhciBsYSBwbGFudGlsbGEgZGVsIGVuY2FiZXphZG86XCIsIGhlYWRlclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc3QgaGVhZGVyU291cmNlID0gYXdhaXQgaGVhZGVyUmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICBoZWFkZXJUZW1wbGF0ZSA9IEhhbmRsZWJhcnMuY29tcGlsZShoZWFkZXJTb3VyY2UpO1xyXG4gICAgICB0aGlzLnRlbXBsYXRlQ2FjaGVbJ2hlYWRlciddID0gaGVhZGVyVGVtcGxhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGlidWphciBlbCBlbmNhYmV6YWRvXHJcbiAgICBjb25zdCBoZWFkZXJIdG1sID0gaGVhZGVyVGVtcGxhdGUoe30pO1xyXG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IGhlYWRlckh0bWw7XHJcblxyXG4gICAgLy8gSWRlbnRpZmljYXIgbGEgdmlzdGEgYWN0aXZhIHkgYXBsaWNhciBsYSBjbGFzZSBcImFjdGl2ZVwiXHJcbiAgICBjb25zdCBhY3RpdmVWaWV3VHlwZSA9IHRoaXMuZ2V0Vmlld1R5cGUoKTsgLy8gT2J0aWVuZSBlbCB0aXBvIGRlIHZpc3RhIGFjdHVhbFxyXG4gICAgY29uc3QgdGFicyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLmMtdGFiXCIpO1xyXG5cclxuICAgIHRhYnMuZm9yRWFjaCgodGFiKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhYklkID0gdGFiLmdldEF0dHJpYnV0ZShcImlkXCIpO1xyXG4gICAgICBcclxuICAgICAgLy8gVmVyaWZpY2FyIGNvaW5jaWRlbmNpYSBleGFjdGEgbyBzaSBlcyB1bmEgdmlzdGEgZGUgY2FsZW5kYXJpb1xyXG4gICAgICBjb25zdCBpc0NhbGVuZGFyVmlldyA9IGFjdGl2ZVZpZXdUeXBlLnN0YXJ0c1dpdGgoXCJjYWxlbmRhci1cIikgJiYgdGFiSWQgPT09IFwiY2FsZW5kYXItdmlldy10YWJcIjtcclxuICAgICAgY29uc3QgaXNFeGFjdE1hdGNoID0gdGFiSWQgPT09IGAke2FjdGl2ZVZpZXdUeXBlfS10YWJgO1xyXG4gICAgICBcclxuICAgICAgaWYgKGlzRXhhY3RNYXRjaCB8fCBpc0NhbGVuZGFyVmlldykge1xyXG4gICAgICAgIHRhYi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBMbyBtaXNtbyBwYXJhIGxvcyBjb250ZW5lZG9yZXMgZGUgcGVzdGFcdTAwRjFhc1xyXG4gICAgY29uc3QgdGFiQ29udGFpbmVycyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLmMtdGFiLWNvbnRhaW5lclwiKTtcclxuICAgIHRhYkNvbnRhaW5lcnMuZm9yRWFjaCgoYnV0dG9uQ29udGFpbmVyKSA9PiB7XHJcbiAgICAgIGNvbnN0IGRpdklkID0gYnV0dG9uQ29udGFpbmVyLmdldEF0dHJpYnV0ZShcImlkXCIpO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgaXNDYWxlbmRhckNvbnRhaW5lciA9IGFjdGl2ZVZpZXdUeXBlLnN0YXJ0c1dpdGgoXCJjYWxlbmRhci1cIikgJiYgZGl2SWQgPT09IFwiY2FsZW5kYXItdmlldy1jb250YWluZXJcIjtcclxuICAgICAgY29uc3QgaXNFeGFjdE1hdGNoID0gZGl2SWQgPT09IGAke2FjdGl2ZVZpZXdUeXBlfS1jb250YWluZXJgO1xyXG4gICAgICBcclxuICAgICAgaWYgKGlzRXhhY3RNYXRjaCB8fCBpc0NhbGVuZGFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIHJlbmRlclRlbXBsYXRlKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHRlbXBsYXRlUGF0aDogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIFxyXG4gICAgICAvLyBCdXNjYXIgbGEgcGxhbnRpbGxhIGVuIGVsIGNhY2hcdTAwRTkgcHJpbWVyb1xyXG4gICAgICBsZXQgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlQ2FjaGVbdGVtcGxhdGVQYXRoXTtcclxuICAgICAgXHJcbiAgICAgIC8vIFNpIG5vIGVzdFx1MDBFMSBlbiBjYWNoXHUwMEU5LCBjYXJnYXJsYVxyXG4gICAgICBpZiAoIXRlbXBsYXRlKSB7XHJcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmdldFJlc291cmNlUGF0aCh0aGlzLnBhdGhIYnMgKyB0ZW1wbGF0ZVBhdGggKyB0aGlzLmhicyk7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmdWxsUGF0aCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBhbCBjYXJnYXIgbGEgcGxhbnRpbGxhOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlU291cmNlID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgIHRlbXBsYXRlID0gSGFuZGxlYmFycy5jb21waWxlKHRlbXBsYXRlU291cmNlKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBHdWFyZGFyIGVuIGNhY2hcdTAwRTkgcGFyYSBmdXR1cm9zIHVzb3NcclxuICAgICAgICB0aGlzLnRlbXBsYXRlQ2FjaGVbdGVtcGxhdGVQYXRoXSA9IHRlbXBsYXRlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBEaWJ1amFyIGxhIHBsYW50aWxsYSBjb24gbG9zIGRhdG9zIHByb3BvcmNpb25hZG9zXHJcbiAgICAgIGNvbnN0IGh0bWwgPSB0ZW1wbGF0ZShkYXRhKTtcclxuXHJcbiAgICAgIC8vIEluc2VydGFyIGVsIGNvbnRlbmlkbyBIVE1MIGVuIGVsIGNvbnRlbmVkb3JcclxuICAgICAgY29udGFpbmVyLmlubmVySFRNTCArPSBodG1sO1xyXG4gICAgICAvL2NvbnNvbGUubG9nKFwiUGxhbnRpbGxhOlwiLCBodG1sKTsgLy8gRGVidWdnaW5nIGxpbmVcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHJlbmRlcml6YW5kbyB0ZW1wbGF0ZSAke3RlbXBsYXRlUGF0aH06YCwgZXJyb3IpO1xyXG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MICs9IGA8ZGl2IGNsYXNzPVwiZXJyb3JcIj5FcnJvciBhbCBjYXJnYXIgbGEgcGxhbnRpbGxhOiAke2Vycm9yLm1lc3NhZ2V9PC9kaXY+YDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhdHRhY2hFdmVudFRhYnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcGx1Z2luOiBhbnksIGxlYWY6IGFueSk6IHZvaWQge1xyXG4gICAgLy9jb25zb2xlLmxvZyhcIkFncmVnYW5kbyBldmVudG9zIGEgbG9zIGJvdG9uZXNcIik7IC8vIERlYnVnZ2luZyBsaW5lXHJcbiAgXHJcbiAgICBjb25zdCBhY3RpdmVWaWV3VHlwZSA9IHRoaXMuZ2V0Vmlld1R5cGUoKTsgLy8gT2J0aWVuZSBlbCB0aXBvIGRlIHZpc3RhIGFjdHVhbFxyXG4gICAgY29uc3QgdGFicyA9IFtcclxuICAgICAgeyBpZDogXCJvdmVydmlldy12aWV3LXRhYlwiLCB2aWV3OiBcIm92ZXJ2aWV3LXZpZXdcIiB9LFxyXG4gICAgICB7IGlkOiBcImxpc3Qtdmlldy10YWJcIiwgdmlldzogXCJsaXN0LXZpZXdcIiB9LFxyXG4gICAgICB7IGlkOiBcInRhYmxlLXZpZXctdGFiXCIsIHZpZXc6IFwidGFibGUtdmlld1wiIH0sXHJcbiAgICAgIHsgaWQ6IFwiY2FsZW5kYXItdmlldy10YWJcIiwgdmlldzogXCJjYWxlbmRhci1tb250aC12aWV3XCIgfSxcclxuICAgICAgeyBpZDogXCJ0aW1lbGluZS12aWV3LXRhYlwiLCB2aWV3OiBcInRpbWVsaW5lLXZpZXdcIiB9LFxyXG4gICAgICB7IGlkOiBcImdhbnR0LXZpZXctdGFiXCIsIHZpZXc6IFwiZ2FudHQtdmlld1wiIH0sXHJcbiAgICBdO1xyXG4gIFxyXG4gICAgdGFicy5mb3JFYWNoKCh0YWIpID0+IHtcclxuICAgICAgLy8gRXhjbHVpciBlbCBib3RcdTAwRjNuIGRlIGxhIHZpc3RhIGFjdGl2YVxyXG4gICAgICBpZiAodGFiLnZpZXcgPT09IGFjdGl2ZVZpZXdUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihgIyR7dGFiLmlkfWApO1xyXG4gICAgICBlbGVtZW50Py5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIHBsdWdpbi52aWV3TWFuYWdlci5hY3RpdmF0ZVZpZXcodGFiLnZpZXcsIGxlYWYpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gQVx1MDBGMWFkaXIgbVx1MDBFOXRvZG8gcGFyYSBtYW5lamFyIGV2ZW50b3MgZGUgbG9zIGdydXBvcyBkZSBjYXJwZXRhc1xyXG4gIHByb3RlY3RlZCBhZGRGb2xkZXJUb2dnbGVMaXN0ZW5lcnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29uc3QgZm9sZGVySGVhZGVycyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuZm9sZGVyLW5hbWUnKTtcclxuXHJcbiAgICBmb2xkZXJIZWFkZXJzLmZvckVhY2goaGVhZGVyID0+IHtcclxuICAgICAgaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZvbGRlckdyb3VwID0gaGVhZGVyLmNsb3Nlc3QoJy5mb2xkZXItZ3JvdXAnKTtcclxuICAgICAgICBmb2xkZXJHcm91cD8uY2xhc3NMaXN0LnRvZ2dsZSgnY29sbGFwc2VkJyk7XHJcblxyXG4gICAgICAgIC8vIEd1YXJkYXIgZXN0YWRvIGRlIHBsZWdhZG8gZW4gbG9jYWxTdG9yYWdlIHVzYW5kbyBsYSBydXRhIGNvbXBsZXRhXHJcbiAgICAgICAgaWYgKGZvbGRlckdyb3VwKSB7XHJcbiAgICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gZm9sZGVyR3JvdXAuZ2V0QXR0cmlidXRlKCdkYXRhLWZvbGRlci1wYXRoJyk7XHJcbiAgICAgICAgICBpZiAoZm9sZGVyUGF0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBpc0NvbGxhcHNlZCA9IGZvbGRlckdyb3VwLmNsYXNzTGlzdC5jb250YWlucygnY29sbGFwc2VkJyk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGBmb2xkZXJfJHtmb2xkZXJQYXRofV9jb2xsYXBzZWRgLCBpc0NvbGxhcHNlZC50b1N0cmluZygpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVzdGF1cmFyIGVzdGFkbyBkZSBwbGVnYWRvIGRlc2RlIGxvY2FsU3RvcmFnZVxyXG4gICAgY29uc3QgZm9sZGVyR3JvdXBzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb2xkZXItZ3JvdXAnKTtcclxuICAgIGZvbGRlckdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IGdyb3VwLmdldEF0dHJpYnV0ZSgnZGF0YS1mb2xkZXItcGF0aCcpO1xyXG4gICAgICBpZiAoZm9sZGVyUGF0aCkge1xyXG4gICAgICAgIGNvbnN0IGlzQ29sbGFwc2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYGZvbGRlcl8ke2ZvbGRlclBhdGh9X2NvbGxhcHNlZGApID09PSAndHJ1ZSc7XHJcbiAgICAgICAgaWYgKGlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICBncm91cC5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gQVx1MDBGMWFkaXIgbVx1MDBFOXRvZG8gcGFyYSBtYW5lamFyIGV2ZW50b3MgZGUgZG9ibGUgY2xpYyBlbiBsb3MgZWxlbWVudG9zIGRlIHRhcmVhXHJcbiAgcHJvdGVjdGVkIGFkZFRhc2tJdGVtQ2xpY2tMaXN0ZW5lcnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29uc3QgdGFza0l0ZW1zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrLWl0ZW0nKTtcclxuICAgIFxyXG4gICAgdGFza0l0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIC8vIEFncmVnYXIgY3Vyc29yIHBvaW50ZXIgcGFyYSBpbmRpY2FyIHF1ZSBlcyBjbGlja2VhYmxlXHJcbiAgICAgIGl0ZW0uYWRkQ2xhc3MoJ2NsaWNrYWJsZScpO1xyXG4gICAgICBcclxuICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsZS1wYXRoJyk7XHJcbiAgICAgICAgY29uc3QgbGluZU51bWJlciA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWxpbmUtbnVtYmVyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGZpbGVQYXRoKSB7XHJcbiAgICAgICAgICB0aGlzLm9wZW5UYXNrRmlsZShmaWxlUGF0aCwgbGluZU51bWJlciA/IHBhcnNlSW50KGxpbmVOdW1iZXIpIDogdW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHByb3RlY3RlZCBhc3luYyBvcGVuVGFza0ZpbGUoZmlsZVBhdGg6IHN0cmluZywgbGluZU51bWJlcj86IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gT2J0ZW5lciBlbCBhcmNoaXZvIGRlc2RlIGVsIHZhdWx0XHJcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xyXG4gICAgICBcclxuICAgICAgaWYgKCFmaWxlIHx8IGZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgTm8gc2UgcHVkbyBlbmNvbnRyYXIgZWwgYXJjaGl2bzogJHtmaWxlUGF0aH1gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEFicmlyIGVsIGFyY2hpdm8gZW4gdW5hIG51ZXZhIGhvamFcclxuICAgICAgY29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcclxuICAgICAgYXdhaXQgbGVhZi5vcGVuRmlsZShmaWxlIGFzIGFueSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBTaSBoYXkgdW4gblx1MDBGQW1lcm8gZGUgbFx1MDBFRG5lYSwgZGVzcGxhemFyc2UgYSBlc2EgbFx1MDBFRG5lYVxyXG4gICAgICBpZiAobGluZU51bWJlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgZWRpdG9yID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yO1xyXG4gICAgICAgIGlmIChlZGl0b3IpIHtcclxuICAgICAgICAgIC8vIFBvc2ljaW9uYXIgZW4gbGEgbFx1MDBFRG5lYSBlc3BlY1x1MDBFRGZpY2FcclxuICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0geyBsaW5lOiBsaW5lTnVtYmVyLCBjaDogMCB9O1xyXG4gICAgICAgICAgZWRpdG9yLnNldEN1cnNvcihwb3NpdGlvbik7XHJcbiAgICAgICAgICBlZGl0b3Iuc2Nyb2xsSW50b1ZpZXcoeyBmcm9tOiBwb3NpdGlvbiwgdG86IHBvc2l0aW9uIH0sIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgYWwgYWJyaXIgZWwgYXJjaGl2bzogJHtlcnJvcn1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhc3luYyByZW5kZXIodmlld1R5cGU6IHN0cmluZywgZGF0YTogYW55LCBpMThuOiBhbnksIHBsdWdpbjogYW55LCBsZWFmOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnNvbGUubG9nKGBEaWJ1amEgdmlzdGE6ICR7dmlld1R5cGV9YCk7IC8vIERlYnVnZ2luZyBsaW5lXHJcbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgY29udGFpbmVyLmVtcHR5KCk7IC8vIExpbXBpYSBlbCBjb250ZW5pZG8gcHJldmlvXHJcblxyXG4gICAgLy8gQ3JlYXIgZXN0cnVjdHVyYSBjb24gaGVhZGVyIGZpam8geSBjb250ZW5pZG8gY29uIHNjcm9sbFxyXG4gICAgY29udGFpbmVyLmFkZENsYXNzKFwiYWdlbmRhLWNvbnRhaW5lclwiKTtcclxuXHJcbiAgICAvLyBDb250ZW5lZG9yIGRlbCBoZWFkZXIgKGZpam8pXHJcbiAgICBjb25zdCBoZWFkZXJDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBcImFnZW5kYS1oZWFkZXItY29udGFpbmVyXCIgfSk7XHJcblxyXG4gICAgLy8gQ29udGVuZWRvciBkZWwgY29udGVuaWRvIChzY3JvbGxhYmxlKVxyXG4gICAgY29uc3QgY29udGVudENvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IFwiYWdlbmRhLWNvbnRlbnQtY29udGFpbmVyXCIgfSk7XHJcblxyXG4gICAgLy8gUmVnaXN0cmFyIGhlbHBlcnMgYW50ZXMgZGUgY3VhbHF1aWVyIHJlbmRlcml6YWRvXHJcbiAgICB0aGlzLnJlZ2lzdGVySGFuZGxlYmFyc0hlbHBlcnMoaTE4biB8fCBudWxsKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBQYXJhbGVsaXphciBvcGVyYWNpb25lcyBkZSByZW5kZXJpemFkb1xyXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgdGhpcy5yZW5kZXJIZWFkZXIoaGVhZGVyQ29udGFpbmVyLCBpMThuKSxcclxuICAgICAgICB0aGlzLnJlbmRlclRlbXBsYXRlKGNvbnRlbnRDb250YWluZXIsIHZpZXdUeXBlLCBkYXRhKVxyXG4gICAgICBdKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEFncmVnYXIgZXZlbnRvcyBhIGxvcyBib3RvbmVzXHJcbiAgICAgIHRoaXMuYXR0YWNoRXZlbnRUYWJzKGhlYWRlckNvbnRhaW5lciwgcGx1Z2luLCBsZWFmKTtcclxuXHJcbiAgICAgIC8vIFBPUiB1biBtXHUwMEU5dG9kbyBxdWUgbGFzIGNsYXNlcyBoaWphcyBwdWVkZW4gc29icmVzY3JpYmlyOlxyXG4gICAgICB0aGlzLnNldHVwVmlld1NwZWNpZmljRXZlbnRMaXN0ZW5lcnMoY29udGVudENvbnRhaW5lciwgZGF0YSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciByZW5kZXJpemFuZG8gdmlzdGEgJHt2aWV3VHlwZX06YCwgZXJyb3IpO1xyXG4gICAgICBjb250ZW50Q29udGFpbmVyLmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiPkVycm9yIGFsIGNhcmdhcjogJHtlcnJvci5tZXNzYWdlfTwvZGl2PmA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNXHUwMEU5dG9kbyBwYXJhIGNvbmZpZ3VyYXIgZXZlbnRvcyBlc3BlY1x1MDBFRGZpY29zIGRlIGxhIHZpc3RhXHJcbiAgICogTGFzIGNsYXNlcyBoaWphcyBwdWVkZW4gc29icmVzY3JpYmlyIGVzdGUgbVx1MDBFOXRvZG8gcGFyYSBpbXBsZW1lbnRhciBzdXMgcHJvcGlvcyBsaXN0ZW5lcnNcclxuICAgKiBAcGFyYW0gY29udGFpbmVyIEVsIGNvbnRlbmVkb3IgZG9uZGUgc2UgYXBsaWNhbiBsb3MgbGlzdGVuZXJzXHJcbiAgICogQHBhcmFtIGRhdGEgTG9zIGRhdG9zIHV0aWxpemFkb3MgcGFyYSBlbCByZW5kZXJpemFkb1xyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzZXR1cFZpZXdTcGVjaWZpY0V2ZW50TGlzdGVuZXJzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgLy8gSW1wbGVtZW50YWNpXHUwMEYzbiBiXHUwMEUxc2ljYSBxdWUgcHVlZGUgc2VyIHNvYnJlc2NyaXRhXHJcbiAgICAvLyBQb3IgZGVmZWN0bywgbm8gaGFjZSBuYWRhXHJcbiAgfVxyXG59IiwgIi8vIHRoZXNlIGFyZW4ndCByZWFsbHkgcHJpdmF0ZSwgYnV0IG5vciBhcmUgdGhleSByZWFsbHkgdXNlZnVsIHRvIGRvY3VtZW50XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgTHV4b25FcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWREYXRlVGltZUVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgIHN1cGVyKGBJbnZhbGlkIERhdGVUaW1lOiAke3JlYXNvbi50b01lc3NhZ2UoKX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkSW50ZXJ2YWxFcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihyZWFzb24pIHtcbiAgICBzdXBlcihgSW52YWxpZCBJbnRlcnZhbDogJHtyZWFzb24udG9NZXNzYWdlKCl9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZER1cmF0aW9uRXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgc3VwZXIoYEludmFsaWQgRHVyYXRpb246ICR7cmVhc29uLnRvTWVzc2FnZSgpfWApO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7fVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkVW5pdEVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHVuaXQpIHtcbiAgICBzdXBlcihgSW52YWxpZCB1bml0ICR7dW5pdH1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQXJndW1lbnRFcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige31cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgWm9uZUlzQWJzdHJhY3RFcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlpvbmUgaXMgYW4gYWJzdHJhY3QgY2xhc3NcIik7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3QgbiA9IFwibnVtZXJpY1wiLFxuICBzID0gXCJzaG9ydFwiLFxuICBsID0gXCJsb25nXCI7XG5cbmV4cG9ydCBjb25zdCBEQVRFX1NIT1JUID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbixcbiAgZGF5OiBuLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVfTUVEID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVfTUVEX1dJVEhfV0VFS0RBWSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgd2Vla2RheTogcyxcbn07XG5cbmV4cG9ydCBjb25zdCBEQVRFX0ZVTEwgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG59O1xuXG5leHBvcnQgY29uc3QgREFURV9IVUdFID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxufTtcblxuZXhwb3J0IGNvbnN0IFRJTUVfU0lNUExFID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG59O1xuXG5leHBvcnQgY29uc3QgVElNRV9XSVRIX1NFQ09ORFMgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxufTtcblxuZXhwb3J0IGNvbnN0IFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICB0aW1lWm9uZU5hbWU6IHMsXG59O1xuXG5leHBvcnQgY29uc3QgVElNRV9XSVRIX0xPTkdfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBsLFxufTtcblxuZXhwb3J0IGNvbnN0IFRJTUVfMjRfU0lNUExFID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIGhvdXJDeWNsZTogXCJoMjNcIixcbn07XG5cbmV4cG9ydCBjb25zdCBUSU1FXzI0X1dJVEhfU0VDT05EUyA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIGhvdXJDeWNsZTogXCJoMjNcIixcbn07XG5cbmV4cG9ydCBjb25zdCBUSU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICB0aW1lWm9uZU5hbWU6IHMsXG59O1xuXG5leHBvcnQgY29uc3QgVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiLFxuICB0aW1lWm9uZU5hbWU6IGwsXG59O1xuXG5leHBvcnQgY29uc3QgREFURVRJTUVfU0hPUlQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbn07XG5cbmV4cG9ydCBjb25zdCBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVUSU1FX01FRCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IHMsXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbn07XG5cbmV4cG9ydCBjb25zdCBEQVRFVElNRV9GVUxMID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHRpbWVab25lTmFtZTogcyxcbn07XG5cbmV4cG9ydCBjb25zdCBEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogcyxcbn07XG5cbmV4cG9ydCBjb25zdCBEQVRFVElNRV9IVUdFID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHRpbWVab25lTmFtZTogbCxcbn07XG5cbmV4cG9ydCBjb25zdCBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgd2Vla2RheTogbCxcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogbCxcbn07XG4iLCAiaW1wb3J0IHsgWm9uZUlzQWJzdHJhY3RFcnJvciB9IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuXG4vKipcbiAqIEBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWm9uZSB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB6b25lXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IHR5cGUoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGlzIHpvbmUuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgSUFOQSBuYW1lIG9mIHRoaXMgem9uZS5cbiAgICogRGVmYXVsdHMgdG8gYG5hbWVgIGlmIG5vdCBvdmVyd3JpdHRlbiBieSBhIHN1YmNsYXNzLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBpYW5hTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgb2Zmc2V0IGlzIGtub3duIHRvIGJlIGZpeGVkIGZvciB0aGUgd2hvbGUgeWVhci5cbiAgICogQGFic3RyYWN0XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgY29tbW9uIG5hbWUgKHN1Y2ggYXMgRVNUKSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcFxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25zIHRvIGFmZmVjdCB0aGUgZm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZvcm1hdCAtIFdoYXQgc3R5bGUgb2Ygb2Zmc2V0IHRvIHJldHVybi4gQWNjZXB0cyAnbG9uZycgb3IgJ3Nob3J0Jy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubG9jYWxlIC0gV2hhdCBsb2NhbGUgdG8gcmV0dXJuIHRoZSBvZmZzZXQgbmFtZSBpbi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgb2Zmc2V0TmFtZSh0cywgb3B0cykge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgdmFsdWUgYXMgYSBzdHJpbmdcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBvZmZzZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCAtIFdoYXQgc3R5bGUgb2Ygb2Zmc2V0IHRvIHJldHVybi5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VwdHMgJ25hcnJvdycsICdzaG9ydCcsIG9yICd0ZWNoaWUnLiBSZXR1cm5pbmcgJys2JywgJyswNjowMCcsIG9yICcrMDYwMCcgcmVzcGVjdGl2ZWx5XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG9mZnNldCBpbiBtaW51dGVzIGZvciB0aGlzIHpvbmUgYXQgdGhlIHNwZWNpZmllZCB0aW1lc3RhbXAuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gdHMgLSBFcG9jaCBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRvIGNvbXB1dGUgdGhlIG9mZnNldFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBvZmZzZXQodHMpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyBlcXVhbCB0byBhbm90aGVyIHpvbmVcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7Wm9uZX0gb3RoZXJab25lIC0gdGhlIHpvbmUgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBab25lIGlzIHZhbGlkLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgZm9ybWF0T2Zmc2V0LCBwYXJzZVpvbmVJbmZvIH0gZnJvbSBcIi4uL2ltcGwvdXRpbC5qc1wiO1xuaW1wb3J0IFpvbmUgZnJvbSBcIi4uL3pvbmUuanNcIjtcblxubGV0IHNpbmdsZXRvbiA9IG51bGw7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgbG9jYWwgem9uZSBmb3IgdGhpcyBKYXZhU2NyaXB0IGVudmlyb25tZW50LlxuICogQGltcGxlbWVudHMge1pvbmV9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN5c3RlbVpvbmUgZXh0ZW5kcyBab25lIHtcbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgbG9jYWwgem9uZVxuICAgKiBAcmV0dXJuIHtTeXN0ZW1ab25lfVxuICAgKi9cbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcbiAgICBpZiAoc2luZ2xldG9uID09PSBudWxsKSB7XG4gICAgICBzaW5nbGV0b24gPSBuZXcgU3lzdGVtWm9uZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc2luZ2xldG9uO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwic3lzdGVtXCI7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS50aW1lWm9uZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBpc1VuaXZlcnNhbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBvZmZzZXROYW1lKHRzLCB7IGZvcm1hdCwgbG9jYWxlIH0pIHtcbiAgICByZXR1cm4gcGFyc2Vab25lSW5mbyh0cywgZm9ybWF0LCBsb2NhbGUpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMub2Zmc2V0KHRzKSwgZm9ybWF0KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIG9mZnNldCh0cykge1xuICAgIHJldHVybiAtbmV3IERhdGUodHMpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcInN5c3RlbVwiO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBmb3JtYXRPZmZzZXQsIHBhcnNlWm9uZUluZm8sIGlzVW5kZWZpbmVkLCBvYmpUb0xvY2FsVFMgfSBmcm9tIFwiLi4vaW1wbC91dGlsLmpzXCI7XG5pbXBvcnQgWm9uZSBmcm9tIFwiLi4vem9uZS5qc1wiO1xuXG5jb25zdCBkdGZDYWNoZSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIG1ha2VEVEYoem9uZU5hbWUpIHtcbiAgbGV0IGR0ZiA9IGR0ZkNhY2hlLmdldCh6b25lTmFtZSk7XG4gIGlmIChkdGYgPT09IHVuZGVmaW5lZCkge1xuICAgIGR0ZiA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgIHRpbWVab25lOiB6b25lTmFtZSxcbiAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgZGF5OiBcIjItZGlnaXRcIixcbiAgICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgICAgbWludXRlOiBcIjItZGlnaXRcIixcbiAgICAgIHNlY29uZDogXCIyLWRpZ2l0XCIsXG4gICAgICBlcmE6IFwic2hvcnRcIixcbiAgICB9KTtcbiAgICBkdGZDYWNoZS5zZXQoem9uZU5hbWUsIGR0Zik7XG4gIH1cbiAgcmV0dXJuIGR0Zjtcbn1cblxuY29uc3QgdHlwZVRvUG9zID0ge1xuICB5ZWFyOiAwLFxuICBtb250aDogMSxcbiAgZGF5OiAyLFxuICBlcmE6IDMsXG4gIGhvdXI6IDQsXG4gIG1pbnV0ZTogNSxcbiAgc2Vjb25kOiA2LFxufTtcblxuZnVuY3Rpb24gaGFja3lPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXQoZGF0ZSkucmVwbGFjZSgvXFx1MjAwRS9nLCBcIlwiKSxcbiAgICBwYXJzZWQgPSAvKFxcZCspXFwvKFxcZCspXFwvKFxcZCspIChBRHxCQyksPyAoXFxkKyk6KFxcZCspOihcXGQrKS8uZXhlYyhmb3JtYXR0ZWQpLFxuICAgIFssIGZNb250aCwgZkRheSwgZlllYXIsIGZhZE9yQmMsIGZIb3VyLCBmTWludXRlLCBmU2Vjb25kXSA9IHBhcnNlZDtcbiAgcmV0dXJuIFtmWWVhciwgZk1vbnRoLCBmRGF5LCBmYWRPckJjLCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF07XG59XG5cbmZ1bmN0aW9uIHBhcnRzT2Zmc2V0KGR0ZiwgZGF0ZSkge1xuICBjb25zdCBmb3JtYXR0ZWQgPSBkdGYuZm9ybWF0VG9QYXJ0cyhkYXRlKTtcbiAgY29uc3QgZmlsbGVkID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZm9ybWF0dGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gZm9ybWF0dGVkW2ldO1xuICAgIGNvbnN0IHBvcyA9IHR5cGVUb1Bvc1t0eXBlXTtcblxuICAgIGlmICh0eXBlID09PSBcImVyYVwiKSB7XG4gICAgICBmaWxsZWRbcG9zXSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoIWlzVW5kZWZpbmVkKHBvcykpIHtcbiAgICAgIGZpbGxlZFtwb3NdID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpbGxlZDtcbn1cblxuY29uc3QgaWFuYVpvbmVDYWNoZSA9IG5ldyBNYXAoKTtcbi8qKlxuICogQSB6b25lIGlkZW50aWZpZWQgYnkgYW4gSUFOQSBpZGVudGlmaWVyLCBsaWtlIEFtZXJpY2EvTmV3X1lvcmtcbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJQU5BWm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBab25lIG5hbWVcbiAgICogQHJldHVybiB7SUFOQVpvbmV9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKG5hbWUpIHtcbiAgICBsZXQgem9uZSA9IGlhbmFab25lQ2FjaGUuZ2V0KG5hbWUpO1xuICAgIGlmICh6b25lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlhbmFab25lQ2FjaGUuc2V0KG5hbWUsICh6b25lID0gbmV3IElBTkFab25lKG5hbWUpKSk7XG4gICAgfVxuICAgIHJldHVybiB6b25lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IGxvY2FsIGNhY2hlcy4gU2hvdWxkIG9ubHkgYmUgbmVjZXNzYXJ5IGluIHRlc3Rpbmcgc2NlbmFyaW9zLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIHJlc2V0Q2FjaGUoKSB7XG4gICAgaWFuYVpvbmVDYWNoZS5jbGVhcigpO1xuICAgIGR0ZkNhY2hlLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBzdHJpbmcgaXMgYSB2YWxpZCBzcGVjaWZpZXIuIFRoaXMgb25seSBjaGVja3MgdGhlIHN0cmluZydzIGZvcm1hdCwgbm90IHRoYXQgdGhlIHNwZWNpZmllciBpZGVudGlmaWVzIGEga25vd24gem9uZTsgc2VlIGlzVmFsaWRab25lIGZvciB0aGF0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBzdHJpbmcgdG8gY2hlY2sgdmFsaWRpdHkgb25cbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFNwZWNpZmllcihcIkFtZXJpY2EvTmV3X1lvcmtcIikgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRTcGVjaWZpZXIoXCJTcG9ydH5+YmxvcnBcIikgLy89PiBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhpcyBmb3J3YXJkcyB0byBpc1ZhbGlkWm9uZSwgYmV0dGVyIHVzZSBgaXNWYWxpZFpvbmUoKWAgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc1ZhbGlkU3BlY2lmaWVyKHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkWm9uZShzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHN0cmluZyBpZGVudGlmaWVzIGEgcmVhbCB6b25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB6b25lIC0gVGhlIHN0cmluZyB0byBjaGVja1xuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShcIkFtZXJpY2EvTmV3X1lvcmtcIikgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRab25lKFwiRmFudGFzaWEvQ2FzdGxlXCIpIC8vPT4gZmFsc2VcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFpvbmUoXCJTcG9ydH5+YmxvcnBcIikgLy89PiBmYWxzZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzVmFsaWRab25lKHpvbmUpIHtcbiAgICBpZiAoIXpvbmUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwgeyB0aW1lWm9uZTogem9uZSB9KS5mb3JtYXQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKiogQHByaXZhdGUgKiovXG4gICAgdGhpcy56b25lTmFtZSA9IG5hbWU7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuICAgIHRoaXMudmFsaWQgPSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB6b25lLiBgaWFuYWAgZm9yIGFsbCBpbnN0YW5jZXMgb2YgYElBTkFab25lYC5cbiAgICogQG92ZXJyaWRlXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJpYW5hXCI7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhpcyB6b25lIChpLmUuIHRoZSBJQU5BIHpvbmUgbmFtZSkuXG4gICAqIEBvdmVycmlkZVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZU5hbWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBvZmZzZXQgaXMga25vd24gdG8gYmUgZml4ZWQgZm9yIHRoZSB3aG9sZSB5ZWFyOlxuICAgKiBBbHdheXMgcmV0dXJucyBmYWxzZSBmb3IgYWxsIElBTkEgem9uZXMuXG4gICAqIEBvdmVycmlkZVxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc1VuaXZlcnNhbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgY29tbW9uIG5hbWUgKHN1Y2ggYXMgRVNUKSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcFxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25zIHRvIGFmZmVjdCB0aGUgZm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZvcm1hdCAtIFdoYXQgc3R5bGUgb2Ygb2Zmc2V0IHRvIHJldHVybi4gQWNjZXB0cyAnbG9uZycgb3IgJ3Nob3J0Jy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubG9jYWxlIC0gV2hhdCBsb2NhbGUgdG8gcmV0dXJuIHRoZSBvZmZzZXQgbmFtZSBpbi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgb2Zmc2V0TmFtZSh0cywgeyBmb3JtYXQsIGxvY2FsZSB9KSB7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlLCB0aGlzLm5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9mZnNldCdzIHZhbHVlIGFzIGEgc3RyaW5nXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge251bWJlcn0gdHMgLSBFcG9jaCBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRvIGdldCB0aGUgb2Zmc2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgLSBXaGF0IHN0eWxlIG9mIG9mZnNldCB0byByZXR1cm4uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBBY2NlcHRzICduYXJyb3cnLCAnc2hvcnQnLCBvciAndGVjaGllJy4gUmV0dXJuaW5nICcrNicsICcrMDY6MDAnLCBvciAnKzA2MDAnIHJlc3BlY3RpdmVseVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBmb3JtYXRPZmZzZXQodHMsIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5vZmZzZXQodHMpLCBmb3JtYXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgZm9yIHRoaXMgem9uZSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcC5cbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gY29tcHV0ZSB0aGUgb2Zmc2V0XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIG9mZnNldCh0cykge1xuICAgIGlmICghdGhpcy52YWxpZCkgcmV0dXJuIE5hTjtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodHMpO1xuXG4gICAgaWYgKGlzTmFOKGRhdGUpKSByZXR1cm4gTmFOO1xuXG4gICAgY29uc3QgZHRmID0gbWFrZURURih0aGlzLm5hbWUpO1xuICAgIGxldCBbeWVhciwgbW9udGgsIGRheSwgYWRPckJjLCBob3VyLCBtaW51dGUsIHNlY29uZF0gPSBkdGYuZm9ybWF0VG9QYXJ0c1xuICAgICAgPyBwYXJ0c09mZnNldChkdGYsIGRhdGUpXG4gICAgICA6IGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSk7XG5cbiAgICBpZiAoYWRPckJjID09PSBcIkJDXCIpIHtcbiAgICAgIHllYXIgPSAtTWF0aC5hYnMoeWVhcikgKyAxO1xuICAgIH1cblxuICAgIC8vIGJlY2F1c2Ugd2UncmUgdXNpbmcgaG91cjEyIGFuZCBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDI1NTY0JmNhbj0yJnE9JTIyMjQlM0EwMCUyMiUyMGRhdGV0aW1lZm9ybWF0XG4gICAgY29uc3QgYWRqdXN0ZWRIb3VyID0gaG91ciA9PT0gMjQgPyAwIDogaG91cjtcblxuICAgIGNvbnN0IGFzVVRDID0gb2JqVG9Mb2NhbFRTKHtcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRheSxcbiAgICAgIGhvdXI6IGFkanVzdGVkSG91cixcbiAgICAgIG1pbnV0ZSxcbiAgICAgIHNlY29uZCxcbiAgICAgIG1pbGxpc2Vjb25kOiAwLFxuICAgIH0pO1xuXG4gICAgbGV0IGFzVFMgPSArZGF0ZTtcbiAgICBjb25zdCBvdmVyID0gYXNUUyAlIDEwMDA7XG4gICAgYXNUUyAtPSBvdmVyID49IDAgPyBvdmVyIDogMTAwMCArIG92ZXI7XG4gICAgcmV0dXJuIChhc1VUQyAtIGFzVFMpIC8gKDYwICogMTAwMCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBab25lIGlzIGVxdWFsIHRvIGFub3RoZXIgem9uZVxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtab25lfSBvdGhlclpvbmUgLSB0aGUgem9uZSB0byBjb21wYXJlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImlhbmFcIiAmJiBvdGhlclpvbmUubmFtZSA9PT0gdGhpcy5uYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyB2YWxpZC5cbiAgICogQG92ZXJyaWRlXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWQ7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBoYXNMb2NhbGVXZWVrSW5mbywgaGFzUmVsYXRpdmUsIHBhZFN0YXJ0LCByb3VuZFRvLCB2YWxpZGF0ZVdlZWtTZXR0aW5ncyB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmltcG9ydCAqIGFzIEVuZ2xpc2ggZnJvbSBcIi4vZW5nbGlzaC5qc1wiO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gXCIuLi9zZXR0aW5ncy5qc1wiO1xuaW1wb3J0IERhdGVUaW1lIGZyb20gXCIuLi9kYXRldGltZS5qc1wiO1xuaW1wb3J0IElBTkFab25lIGZyb20gXCIuLi96b25lcy9JQU5BWm9uZS5qc1wiO1xuXG4vLyB0b2RvIC0gcmVtYXAgY2FjaGluZ1xuXG5sZXQgaW50bExGQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGdldENhY2hlZExGKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgbGV0IGR0ZiA9IGludGxMRkNhY2hlW2tleV07XG4gIGlmICghZHRmKSB7XG4gICAgZHRmID0gbmV3IEludGwuTGlzdEZvcm1hdChsb2NTdHJpbmcsIG9wdHMpO1xuICAgIGludGxMRkNhY2hlW2tleV0gPSBkdGY7XG4gIH1cbiAgcmV0dXJuIGR0Zjtcbn1cblxuY29uc3QgaW50bERUQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRDYWNoZWREVEYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pO1xuICBsZXQgZHRmID0gaW50bERUQ2FjaGUuZ2V0KGtleSk7XG4gIGlmIChkdGYgPT09IHVuZGVmaW5lZCkge1xuICAgIGR0ZiA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bERUQ2FjaGUuc2V0KGtleSwgZHRmKTtcbiAgfVxuICByZXR1cm4gZHRmO1xufVxuXG5jb25zdCBpbnRsTnVtQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRDYWNoZWRJTkYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pO1xuICBsZXQgaW5mID0gaW50bE51bUNhY2hlLmdldChrZXkpO1xuICBpZiAoaW5mID09PSB1bmRlZmluZWQpIHtcbiAgICBpbmYgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jU3RyaW5nLCBvcHRzKTtcbiAgICBpbnRsTnVtQ2FjaGUuc2V0KGtleSwgaW5mKTtcbiAgfVxuICByZXR1cm4gaW5mO1xufVxuXG5jb25zdCBpbnRsUmVsQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRDYWNoZWRSVEYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3QgeyBiYXNlLCAuLi5jYWNoZUtleU9wdHMgfSA9IG9wdHM7IC8vIGV4Y2x1ZGUgYGJhc2VgIGZyb20gdGhlIG9wdGlvbnNcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgY2FjaGVLZXlPcHRzXSk7XG4gIGxldCBpbmYgPSBpbnRsUmVsQ2FjaGUuZ2V0KGtleSk7XG4gIGlmIChpbmYgPT09IHVuZGVmaW5lZCkge1xuICAgIGluZiA9IG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChsb2NTdHJpbmcsIG9wdHMpO1xuICAgIGludGxSZWxDYWNoZS5zZXQoa2V5LCBpbmYpO1xuICB9XG4gIHJldHVybiBpbmY7XG59XG5cbmxldCBzeXNMb2NhbGVDYWNoZSA9IG51bGw7XG5mdW5jdGlvbiBzeXN0ZW1Mb2NhbGUoKSB7XG4gIGlmIChzeXNMb2NhbGVDYWNoZSkge1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfSBlbHNlIHtcbiAgICBzeXNMb2NhbGVDYWNoZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlO1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfVxufVxuXG5jb25zdCBpbnRsUmVzb2x2ZWRPcHRpb25zQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRDYWNoZWRJbnRSZXNvbHZlZE9wdGlvbnMobG9jU3RyaW5nKSB7XG4gIGxldCBvcHRzID0gaW50bFJlc29sdmVkT3B0aW9uc0NhY2hlLmdldChsb2NTdHJpbmcpO1xuICBpZiAob3B0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgb3B0cyA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY1N0cmluZykucmVzb2x2ZWRPcHRpb25zKCk7XG4gICAgaW50bFJlc29sdmVkT3B0aW9uc0NhY2hlLnNldChsb2NTdHJpbmcsIG9wdHMpO1xuICB9XG4gIHJldHVybiBvcHRzO1xufVxuXG5jb25zdCB3ZWVrSW5mb0NhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0Q2FjaGVkV2Vla0luZm8obG9jU3RyaW5nKSB7XG4gIGxldCBkYXRhID0gd2Vla0luZm9DYWNoZS5nZXQobG9jU3RyaW5nKTtcbiAgaWYgKCFkYXRhKSB7XG4gICAgY29uc3QgbG9jYWxlID0gbmV3IEludGwuTG9jYWxlKGxvY1N0cmluZyk7XG4gICAgLy8gYnJvd3NlcnMgY3VycmVudGx5IGltcGxlbWVudCB0aGlzIGFzIGEgcHJvcGVydHksIGJ1dCBzcGVjIHNheXMgaXQgc2hvdWxkIGJlIGEgZ2V0dGVyIGZ1bmN0aW9uXG4gICAgZGF0YSA9IFwiZ2V0V2Vla0luZm9cIiBpbiBsb2NhbGUgPyBsb2NhbGUuZ2V0V2Vla0luZm8oKSA6IGxvY2FsZS53ZWVrSW5mbztcbiAgICAvLyBtaW5pbWFsRGF5cyB3YXMgcmVtb3ZlZCBmcm9tIFdlZWtJbmZvOiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pbnRsLWxvY2FsZS1pbmZvL2lzc3Vlcy84NlxuICAgIGlmICghKFwibWluaW1hbERheXNcIiBpbiBkYXRhKSkge1xuICAgICAgZGF0YSA9IHsgLi4uZmFsbGJhY2tXZWVrU2V0dGluZ3MsIC4uLmRhdGEgfTtcbiAgICB9XG4gICAgd2Vla0luZm9DYWNoZS5zZXQobG9jU3RyaW5nLCBkYXRhKTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlU3RyKSB7XG4gIC8vIEkgcmVhbGx5IHdhbnQgdG8gYXZvaWQgd3JpdGluZyBhIEJDUCA0NyBwYXJzZXJcbiAgLy8gc2VlLCBlLmcuIGh0dHBzOi8vZ2l0aHViLmNvbS93b29vcm0vYmNwLTQ3XG4gIC8vIEluc3RlYWQsIHdlJ2xsIGRvIHRoaXM6XG5cbiAgLy8gYSkgaWYgdGhlIHN0cmluZyBoYXMgbm8gLXUgZXh0ZW5zaW9ucywganVzdCBsZWF2ZSBpdCBhbG9uZVxuICAvLyBiKSBpZiBpdCBkb2VzLCB1c2UgSW50bCB0byByZXNvbHZlIGV2ZXJ5dGhpbmdcbiAgLy8gYykgaWYgSW50bCBmYWlscywgdHJ5IGFnYWluIHdpdGhvdXQgdGhlIC11XG5cbiAgLy8gcHJpdmF0ZSBzdWJ0YWdzIGFuZCB1bmljb2RlIHN1YnRhZ3MgaGF2ZSBvcmRlcmluZyByZXF1aXJlbWVudHMsXG4gIC8vIGFuZCB3ZSdyZSBub3QgcHJvcGVybHkgcGFyc2luZyB0aGlzLCBzbyBqdXN0IHN0cmlwIG91dCB0aGVcbiAgLy8gcHJpdmF0ZSBvbmVzIGlmIHRoZXkgZXhpc3QuXG4gIGNvbnN0IHhJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXgtXCIpO1xuICBpZiAoeEluZGV4ICE9PSAtMSkge1xuICAgIGxvY2FsZVN0ciA9IGxvY2FsZVN0ci5zdWJzdHJpbmcoMCwgeEluZGV4KTtcbiAgfVxuXG4gIGNvbnN0IHVJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXUtXCIpO1xuICBpZiAodUluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBbbG9jYWxlU3RyXTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgb3B0aW9ucztcbiAgICBsZXQgc2VsZWN0ZWRTdHI7XG4gICAgdHJ5IHtcbiAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYobG9jYWxlU3RyKS5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgICAgIHNlbGVjdGVkU3RyID0gbG9jYWxlU3RyO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHNtYWxsZXIgPSBsb2NhbGVTdHIuc3Vic3RyaW5nKDAsIHVJbmRleCk7XG4gICAgICBvcHRpb25zID0gZ2V0Q2FjaGVkRFRGKHNtYWxsZXIpLnJlc29sdmVkT3B0aW9ucygpO1xuICAgICAgc2VsZWN0ZWRTdHIgPSBzbWFsbGVyO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhciB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gW3NlbGVjdGVkU3RyLCBudW1iZXJpbmdTeXN0ZW0sIGNhbGVuZGFyXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRsQ29uZmlnU3RyaW5nKGxvY2FsZVN0ciwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikge1xuICBpZiAob3V0cHV0Q2FsZW5kYXIgfHwgbnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgaWYgKCFsb2NhbGVTdHIuaW5jbHVkZXMoXCItdS1cIikpIHtcbiAgICAgIGxvY2FsZVN0ciArPSBcIi11XCI7XG4gICAgfVxuXG4gICAgaWYgKG91dHB1dENhbGVuZGFyKSB7XG4gICAgICBsb2NhbGVTdHIgKz0gYC1jYS0ke291dHB1dENhbGVuZGFyfWA7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlcmluZ1N5c3RlbSkge1xuICAgICAgbG9jYWxlU3RyICs9IGAtbnUtJHtudW1iZXJpbmdTeXN0ZW19YDtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZVN0cjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbG9jYWxlU3RyO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcE1vbnRocyhmKSB7XG4gIGNvbnN0IG1zID0gW107XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IDEyOyBpKyspIHtcbiAgICBjb25zdCBkdCA9IERhdGVUaW1lLnV0YygyMDA5LCBpLCAxKTtcbiAgICBtcy5wdXNoKGYoZHQpKTtcbiAgfVxuICByZXR1cm4gbXM7XG59XG5cbmZ1bmN0aW9uIG1hcFdlZWtkYXlzKGYpIHtcbiAgY29uc3QgbXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNzsgaSsrKSB7XG4gICAgY29uc3QgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzICsgaSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cbiAgcmV0dXJuIG1zO1xufVxuXG5mdW5jdGlvbiBsaXN0U3R1ZmYobG9jLCBsZW5ndGgsIGVuZ2xpc2hGbiwgaW50bEZuKSB7XG4gIGNvbnN0IG1vZGUgPSBsb2MubGlzdGluZ01vZGUoKTtcblxuICBpZiAobW9kZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJlblwiKSB7XG4gICAgcmV0dXJuIGVuZ2xpc2hGbihsZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnRsRm4obGVuZ3RoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdXBwb3J0c0Zhc3ROdW1iZXJzKGxvYykge1xuICBpZiAobG9jLm51bWJlcmluZ1N5c3RlbSAmJiBsb2MubnVtYmVyaW5nU3lzdGVtICE9PSBcImxhdG5cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgbG9jLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIgfHxcbiAgICAgICFsb2MubG9jYWxlIHx8XG4gICAgICBsb2MubG9jYWxlLnN0YXJ0c1dpdGgoXCJlblwiKSB8fFxuICAgICAgZ2V0Q2FjaGVkSW50UmVzb2x2ZWRPcHRpb25zKGxvYy5sb2NhbGUpLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCJcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBQb2x5TnVtYmVyRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoaW50bCwgZm9yY2VTaW1wbGUsIG9wdHMpIHtcbiAgICB0aGlzLnBhZFRvID0gb3B0cy5wYWRUbyB8fCAwO1xuICAgIHRoaXMuZmxvb3IgPSBvcHRzLmZsb29yIHx8IGZhbHNlO1xuXG4gICAgY29uc3QgeyBwYWRUbywgZmxvb3IsIC4uLm90aGVyT3B0cyB9ID0gb3B0cztcblxuICAgIGlmICghZm9yY2VTaW1wbGUgfHwgT2JqZWN0LmtleXMob3RoZXJPcHRzKS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBpbnRsT3B0cyA9IHsgdXNlR3JvdXBpbmc6IGZhbHNlLCAuLi5vcHRzIH07XG4gICAgICBpZiAob3B0cy5wYWRUbyA+IDApIGludGxPcHRzLm1pbmltdW1JbnRlZ2VyRGlnaXRzID0gb3B0cy5wYWRUbztcbiAgICAgIHRoaXMuaW5mID0gZ2V0Q2FjaGVkSU5GKGludGwsIGludGxPcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoaSkge1xuICAgIGlmICh0aGlzLmluZikge1xuICAgICAgY29uc3QgZml4ZWQgPSB0aGlzLmZsb29yID8gTWF0aC5mbG9vcihpKSA6IGk7XG4gICAgICByZXR1cm4gdGhpcy5pbmYuZm9ybWF0KGZpeGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGJyb3dzZXIncyBudW1iZXJmb3JtYXR0ZXIgZGVmYXVsdHNcbiAgICAgIGNvbnN0IGZpeGVkID0gdGhpcy5mbG9vciA/IE1hdGguZmxvb3IoaSkgOiByb3VuZFRvKGksIDMpO1xuICAgICAgcmV0dXJuIHBhZFN0YXJ0KGZpeGVkLCB0aGlzLnBhZFRvKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNsYXNzIFBvbHlEYXRlRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoZHQsIGludGwsIG9wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMub3JpZ2luYWxab25lID0gdW5kZWZpbmVkO1xuXG4gICAgbGV0IHogPSB1bmRlZmluZWQ7XG4gICAgaWYgKHRoaXMub3B0cy50aW1lWm9uZSkge1xuICAgICAgLy8gRG9uJ3QgYXBwbHkgYW55IHdvcmthcm91bmRzIGlmIGEgdGltZVpvbmUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBvcHRzXG4gICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgfSBlbHNlIGlmIChkdC56b25lLnR5cGUgPT09IFwiZml4ZWRcIikge1xuICAgICAgLy8gVVRDLTggb3IgRXRjL1VUQy04IGFyZSBub3QgcGFydCBvZiB0emRhdGEsIG9ubHkgRXRjL0dNVCs4IGFuZCB0aGUgbGlrZS5cbiAgICAgIC8vIFRoYXQgaXMgd2h5IGZpeGVkLW9mZnNldCBUWiBpcyBzZXQgdG8gdGhhdCB1bmxlc3MgaXQgaXM6XG4gICAgICAvLyAxLiBSZXByZXNlbnRpbmcgb2Zmc2V0IDAgd2hlbiBVVEMgaXMgdXNlZCB0byBtYWludGFpbiBwcmV2aW91cyBiZWhhdmlvciBhbmQgZG9lcyBub3QgYmVjb21lIEdNVC5cbiAgICAgIC8vIDIuIFVuc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyOlxuICAgICAgLy8gICAgLSBzb21lIGRvIG5vdCBzdXBwb3J0IEV0Yy9cbiAgICAgIC8vICAgIC0gPCBFdGMvR01ULTE0LCA+IEV0Yy9HTVQrMTIsIGFuZCAzMC1taW51dGUgb3IgNDUtbWludXRlIG9mZnNldHMgYXJlIG5vdCBwYXJ0IG9mIHR6ZGF0YVxuICAgICAgY29uc3QgZ210T2Zmc2V0ID0gLTEgKiAoZHQub2Zmc2V0IC8gNjApO1xuICAgICAgY29uc3Qgb2Zmc2V0WiA9IGdtdE9mZnNldCA+PSAwID8gYEV0Yy9HTVQrJHtnbXRPZmZzZXR9YCA6IGBFdGMvR01UJHtnbXRPZmZzZXR9YDtcbiAgICAgIGlmIChkdC5vZmZzZXQgIT09IDAgJiYgSUFOQVpvbmUuY3JlYXRlKG9mZnNldFopLnZhbGlkKSB7XG4gICAgICAgIHogPSBvZmZzZXRaO1xuICAgICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3QgYWxsIGZpeGVkLW9mZnNldCB6b25lcyBsaWtlIEV0Yy8rNDozMCBhcmUgcHJlc2VudCBpbiB0emRhdGEgc29cbiAgICAgICAgLy8gd2UgbWFudWFsbHkgYXBwbHkgdGhlIG9mZnNldCBhbmQgc3Vic3RpdHV0ZSB0aGUgem9uZSBhcyBuZWVkZWQuXG4gICAgICAgIHogPSBcIlVUQ1wiO1xuICAgICAgICB0aGlzLmR0ID0gZHQub2Zmc2V0ID09PSAwID8gZHQgOiBkdC5zZXRab25lKFwiVVRDXCIpLnBsdXMoeyBtaW51dGVzOiBkdC5vZmZzZXQgfSk7XG4gICAgICAgIHRoaXMub3JpZ2luYWxab25lID0gZHQuem9uZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGR0LnpvbmUudHlwZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgIH0gZWxzZSBpZiAoZHQuem9uZS50eXBlID09PSBcImlhbmFcIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgeiA9IGR0LnpvbmUubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3VzdG9tIHpvbmVzIGNhbiBoYXZlIGFueSBvZmZzZXQgLyBvZmZzZXROYW1lIHNvIHdlIGp1c3QgbWFudWFsbHlcbiAgICAgIC8vIGFwcGx5IHRoZSBvZmZzZXQgYW5kIHN1YnN0aXR1dGUgdGhlIHpvbmUgYXMgbmVlZGVkLlxuICAgICAgeiA9IFwiVVRDXCI7XG4gICAgICB0aGlzLmR0ID0gZHQuc2V0Wm9uZShcIlVUQ1wiKS5wbHVzKHsgbWludXRlczogZHQub2Zmc2V0IH0pO1xuICAgICAgdGhpcy5vcmlnaW5hbFpvbmUgPSBkdC56b25lO1xuICAgIH1cblxuICAgIGNvbnN0IGludGxPcHRzID0geyAuLi50aGlzLm9wdHMgfTtcbiAgICBpbnRsT3B0cy50aW1lWm9uZSA9IGludGxPcHRzLnRpbWVab25lIHx8IHo7XG4gICAgdGhpcy5kdGYgPSBnZXRDYWNoZWREVEYoaW50bCwgaW50bE9wdHMpO1xuICB9XG5cbiAgZm9ybWF0KCkge1xuICAgIGlmICh0aGlzLm9yaWdpbmFsWm9uZSkge1xuICAgICAgLy8gSWYgd2UgaGF2ZSB0byBzdWJzdGl0dXRlIGluIHRoZSBhY3R1YWwgem9uZSBuYW1lLCB3ZSBoYXZlIHRvIHVzZVxuICAgICAgLy8gZm9ybWF0VG9QYXJ0cyBzbyB0aGF0IHRoZSB0aW1lem9uZSBjYW4gYmUgcmVwbGFjZWQuXG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXRUb1BhcnRzKClcbiAgICAgICAgLm1hcCgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSlcbiAgICAgICAgLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmR0Zi5mb3JtYXQodGhpcy5kdC50b0pTRGF0ZSgpKTtcbiAgfVxuXG4gIGZvcm1hdFRvUGFydHMoKSB7XG4gICAgY29uc3QgcGFydHMgPSB0aGlzLmR0Zi5mb3JtYXRUb1BhcnRzKHRoaXMuZHQudG9KU0RhdGUoKSk7XG4gICAgaWYgKHRoaXMub3JpZ2luYWxab25lKSB7XG4gICAgICByZXR1cm4gcGFydHMubWFwKChwYXJ0KSA9PiB7XG4gICAgICAgIGlmIChwYXJ0LnR5cGUgPT09IFwidGltZVpvbmVOYW1lXCIpIHtcbiAgICAgICAgICBjb25zdCBvZmZzZXROYW1lID0gdGhpcy5vcmlnaW5hbFpvbmUub2Zmc2V0TmFtZSh0aGlzLmR0LnRzLCB7XG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuZHQubG9jYWxlLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLm9wdHMudGltZVpvbmVOYW1lLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5wYXJ0LFxuICAgICAgICAgICAgdmFsdWU6IG9mZnNldE5hbWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGFydDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbiAgfVxuXG4gIHJlc29sdmVkT3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5kdGYucmVzb2x2ZWRPcHRpb25zKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBQb2x5UmVsRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoaW50bCwgaXNFbmdsaXNoLCBvcHRzKSB7XG4gICAgdGhpcy5vcHRzID0geyBzdHlsZTogXCJsb25nXCIsIC4uLm9wdHMgfTtcbiAgICBpZiAoIWlzRW5nbGlzaCAmJiBoYXNSZWxhdGl2ZSgpKSB7XG4gICAgICB0aGlzLnJ0ZiA9IGdldENhY2hlZFJURihpbnRsLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoY291bnQsIHVuaXQpIHtcbiAgICBpZiAodGhpcy5ydGYpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ0Zi5mb3JtYXQoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRW5nbGlzaC5mb3JtYXRSZWxhdGl2ZVRpbWUodW5pdCwgY291bnQsIHRoaXMub3B0cy5udW1lcmljLCB0aGlzLm9wdHMuc3R5bGUgIT09IFwibG9uZ1wiKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXRUb1BhcnRzKGNvdW50LCB1bml0KSB7XG4gICAgaWYgKHRoaXMucnRmKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydGYuZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZmFsbGJhY2tXZWVrU2V0dGluZ3MgPSB7XG4gIGZpcnN0RGF5OiAxLFxuICBtaW5pbWFsRGF5czogNCxcbiAgd2Vla2VuZDogWzYsIDddLFxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGUge1xuICBzdGF0aWMgZnJvbU9wdHMob3B0cykge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKFxuICAgICAgb3B0cy5sb2NhbGUsXG4gICAgICBvcHRzLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgIG9wdHMub3V0cHV0Q2FsZW5kYXIsXG4gICAgICBvcHRzLndlZWtTZXR0aW5ncyxcbiAgICAgIG9wdHMuZGVmYXVsdFRvRU5cbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIsIHdlZWtTZXR0aW5ncywgZGVmYXVsdFRvRU4gPSBmYWxzZSkge1xuICAgIGNvbnN0IHNwZWNpZmllZExvY2FsZSA9IGxvY2FsZSB8fCBTZXR0aW5ncy5kZWZhdWx0TG9jYWxlO1xuICAgIC8vIHRoZSBzeXN0ZW0gbG9jYWxlIGlzIHVzZWZ1bCBmb3IgaHVtYW4tcmVhZGFibGUgc3RyaW5ncyBidXQgYW5ub3lpbmcgZm9yIHBhcnNpbmcvZm9ybWF0dGluZyBrbm93biBmb3JtYXRzXG4gICAgY29uc3QgbG9jYWxlUiA9IHNwZWNpZmllZExvY2FsZSB8fCAoZGVmYXVsdFRvRU4gPyBcImVuLVVTXCIgOiBzeXN0ZW1Mb2NhbGUoKSk7XG4gICAgY29uc3QgbnVtYmVyaW5nU3lzdGVtUiA9IG51bWJlcmluZ1N5c3RlbSB8fCBTZXR0aW5ncy5kZWZhdWx0TnVtYmVyaW5nU3lzdGVtO1xuICAgIGNvbnN0IG91dHB1dENhbGVuZGFyUiA9IG91dHB1dENhbGVuZGFyIHx8IFNldHRpbmdzLmRlZmF1bHRPdXRwdXRDYWxlbmRhcjtcbiAgICBjb25zdCB3ZWVrU2V0dGluZ3NSID0gdmFsaWRhdGVXZWVrU2V0dGluZ3Mod2Vla1NldHRpbmdzKSB8fCBTZXR0aW5ncy5kZWZhdWx0V2Vla1NldHRpbmdzO1xuICAgIHJldHVybiBuZXcgTG9jYWxlKGxvY2FsZVIsIG51bWJlcmluZ1N5c3RlbVIsIG91dHB1dENhbGVuZGFyUiwgd2Vla1NldHRpbmdzUiwgc3BlY2lmaWVkTG9jYWxlKTtcbiAgfVxuXG4gIHN0YXRpYyByZXNldENhY2hlKCkge1xuICAgIHN5c0xvY2FsZUNhY2hlID0gbnVsbDtcbiAgICBpbnRsRFRDYWNoZS5jbGVhcigpO1xuICAgIGludGxOdW1DYWNoZS5jbGVhcigpO1xuICAgIGludGxSZWxDYWNoZS5jbGVhcigpO1xuICAgIGludGxSZXNvbHZlZE9wdGlvbnNDYWNoZS5jbGVhcigpO1xuICAgIHdlZWtJbmZvQ2FjaGUuY2xlYXIoKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tT2JqZWN0KHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyLCB3ZWVrU2V0dGluZ3MgfSA9IHt9KSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyLCB3ZWVrU2V0dGluZ3MpO1xuICB9XG5cbiAgY29uc3RydWN0b3IobG9jYWxlLCBudW1iZXJpbmcsIG91dHB1dENhbGVuZGFyLCB3ZWVrU2V0dGluZ3MsIHNwZWNpZmllZExvY2FsZSkge1xuICAgIGNvbnN0IFtwYXJzZWRMb2NhbGUsIHBhcnNlZE51bWJlcmluZ1N5c3RlbSwgcGFyc2VkT3V0cHV0Q2FsZW5kYXJdID0gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlKTtcblxuICAgIHRoaXMubG9jYWxlID0gcGFyc2VkTG9jYWxlO1xuICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID0gbnVtYmVyaW5nIHx8IHBhcnNlZE51bWJlcmluZ1N5c3RlbSB8fCBudWxsO1xuICAgIHRoaXMub3V0cHV0Q2FsZW5kYXIgPSBvdXRwdXRDYWxlbmRhciB8fCBwYXJzZWRPdXRwdXRDYWxlbmRhciB8fCBudWxsO1xuICAgIHRoaXMud2Vla1NldHRpbmdzID0gd2Vla1NldHRpbmdzO1xuICAgIHRoaXMuaW50bCA9IGludGxDb25maWdTdHJpbmcodGhpcy5sb2NhbGUsIHRoaXMubnVtYmVyaW5nU3lzdGVtLCB0aGlzLm91dHB1dENhbGVuZGFyKTtcblxuICAgIHRoaXMud2Vla2RheXNDYWNoZSA9IHsgZm9ybWF0OiB7fSwgc3RhbmRhbG9uZToge30gfTtcbiAgICB0aGlzLm1vbnRoc0NhY2hlID0geyBmb3JtYXQ6IHt9LCBzdGFuZGFsb25lOiB7fSB9O1xuICAgIHRoaXMubWVyaWRpZW1DYWNoZSA9IG51bGw7XG4gICAgdGhpcy5lcmFDYWNoZSA9IHt9O1xuXG4gICAgdGhpcy5zcGVjaWZpZWRMb2NhbGUgPSBzcGVjaWZpZWRMb2NhbGU7XG4gICAgdGhpcy5mYXN0TnVtYmVyc0NhY2hlZCA9IG51bGw7XG4gIH1cblxuICBnZXQgZmFzdE51bWJlcnMoKSB7XG4gICAgaWYgKHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5mYXN0TnVtYmVyc0NhY2hlZCA9IHN1cHBvcnRzRmFzdE51bWJlcnModGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQ7XG4gIH1cblxuICBsaXN0aW5nTW9kZSgpIHtcbiAgICBjb25zdCBpc0FjdHVhbGx5RW4gPSB0aGlzLmlzRW5nbGlzaCgpO1xuICAgIGNvbnN0IGhhc05vV2VpcmRuZXNzID1cbiAgICAgICh0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gbnVsbCB8fCB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIpICYmXG4gICAgICAodGhpcy5vdXRwdXRDYWxlbmRhciA9PT0gbnVsbCB8fCB0aGlzLm91dHB1dENhbGVuZGFyID09PSBcImdyZWdvcnlcIik7XG4gICAgcmV0dXJuIGlzQWN0dWFsbHlFbiAmJiBoYXNOb1dlaXJkbmVzcyA/IFwiZW5cIiA6IFwiaW50bFwiO1xuICB9XG5cbiAgY2xvbmUoYWx0cykge1xuICAgIGlmICghYWx0cyB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhbHRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShcbiAgICAgICAgYWx0cy5sb2NhbGUgfHwgdGhpcy5zcGVjaWZpZWRMb2NhbGUsXG4gICAgICAgIGFsdHMubnVtYmVyaW5nU3lzdGVtIHx8IHRoaXMubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBhbHRzLm91dHB1dENhbGVuZGFyIHx8IHRoaXMub3V0cHV0Q2FsZW5kYXIsXG4gICAgICAgIHZhbGlkYXRlV2Vla1NldHRpbmdzKGFsdHMud2Vla1NldHRpbmdzKSB8fCB0aGlzLndlZWtTZXR0aW5ncyxcbiAgICAgICAgYWx0cy5kZWZhdWx0VG9FTiB8fCBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZWRlZmF1bHRUb0VOKGFsdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKHsgLi4uYWx0cywgZGVmYXVsdFRvRU46IHRydWUgfSk7XG4gIH1cblxuICByZWRlZmF1bHRUb1N5c3RlbShhbHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSh7IC4uLmFsdHMsIGRlZmF1bHRUb0VOOiBmYWxzZSB9KTtcbiAgfVxuXG4gIG1vbnRocyhsZW5ndGgsIGZvcm1hdCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIEVuZ2xpc2gubW9udGhzLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnRsID0gZm9ybWF0ID8geyBtb250aDogbGVuZ3RoLCBkYXk6IFwibnVtZXJpY1wiIH0gOiB7IG1vbnRoOiBsZW5ndGggfSxcbiAgICAgICAgZm9ybWF0U3RyID0gZm9ybWF0ID8gXCJmb3JtYXRcIiA6IFwic3RhbmRhbG9uZVwiO1xuICAgICAgaWYgKCF0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkge1xuICAgICAgICB0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSA9IG1hcE1vbnRocygoZHQpID0+IHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJtb250aFwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tb250aHNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF07XG4gICAgfSk7XG4gIH1cblxuICB3ZWVrZGF5cyhsZW5ndGgsIGZvcm1hdCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIEVuZ2xpc2gud2Vla2RheXMsICgpID0+IHtcbiAgICAgIGNvbnN0IGludGwgPSBmb3JtYXRcbiAgICAgICAgICA/IHsgd2Vla2RheTogbGVuZ3RoLCB5ZWFyOiBcIm51bWVyaWNcIiwgbW9udGg6IFwibG9uZ1wiLCBkYXk6IFwibnVtZXJpY1wiIH1cbiAgICAgICAgICA6IHsgd2Vla2RheTogbGVuZ3RoIH0sXG4gICAgICAgIGZvcm1hdFN0ciA9IGZvcm1hdCA/IFwiZm9ybWF0XCIgOiBcInN0YW5kYWxvbmVcIjtcbiAgICAgIGlmICghdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkge1xuICAgICAgICB0aGlzLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwV2Vla2RheXMoKGR0KSA9PlxuICAgICAgICAgIHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJ3ZWVrZGF5XCIpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTtcbiAgICB9KTtcbiAgfVxuXG4gIG1lcmlkaWVtcygpIHtcbiAgICByZXR1cm4gbGlzdFN0dWZmKFxuICAgICAgdGhpcyxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgICgpID0+IEVuZ2xpc2gubWVyaWRpZW1zLFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBJbiB0aGVvcnkgdGhlcmUgY291bGQgYmUgYXJpYml0cmFyeSBkYXkgcGVyaW9kcy4gV2UncmUgZ29ubmEgYXNzdW1lIHRoZXJlIGFyZSBleGFjdGx5IHR3b1xuICAgICAgICAvLyBmb3IgQU0gYW5kIFBNLiBUaGlzIGlzIHByb2JhYmx5IHdyb25nLCBidXQgaXQncyBtYWtlcyBwYXJzaW5nIHdheSBlYXNpZXIuXG4gICAgICAgIGlmICghdGhpcy5tZXJpZGllbUNhY2hlKSB7XG4gICAgICAgICAgY29uc3QgaW50bCA9IHsgaG91cjogXCJudW1lcmljXCIsIGhvdXJDeWNsZTogXCJoMTJcIiB9O1xuICAgICAgICAgIHRoaXMubWVyaWRpZW1DYWNoZSA9IFtEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzLCA5KSwgRGF0ZVRpbWUudXRjKDIwMTYsIDExLCAxMywgMTkpXS5tYXAoXG4gICAgICAgICAgICAoZHQpID0+IHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJkYXlwZXJpb2RcIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWVyaWRpZW1DYWNoZTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgZXJhcyhsZW5ndGgpIHtcbiAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIGxlbmd0aCwgRW5nbGlzaC5lcmFzLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnRsID0geyBlcmE6IGxlbmd0aCB9O1xuXG4gICAgICAvLyBUaGlzIGlzIHByb2JsZW1hdGljLiBEaWZmZXJlbnQgY2FsZW5kYXJzIGFyZSBnb2luZyB0byBkZWZpbmUgZXJhcyB0b3RhbGx5IGRpZmZlcmVudGx5LiBXaGF0IEkgbmVlZCBpcyB0aGUgbWluaW11bSBzZXQgb2YgZGF0ZXNcbiAgICAgIC8vIHRvIGRlZmluaXRlbHkgZW51bWVyYXRlIHRoZW0uXG4gICAgICBpZiAoIXRoaXMuZXJhQ2FjaGVbbGVuZ3RoXSkge1xuICAgICAgICB0aGlzLmVyYUNhY2hlW2xlbmd0aF0gPSBbRGF0ZVRpbWUudXRjKC00MCwgMSwgMSksIERhdGVUaW1lLnV0YygyMDE3LCAxLCAxKV0ubWFwKChkdCkgPT5cbiAgICAgICAgICB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwiZXJhXCIpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmVyYUNhY2hlW2xlbmd0aF07XG4gICAgfSk7XG4gIH1cblxuICBleHRyYWN0KGR0LCBpbnRsT3B0cywgZmllbGQpIHtcbiAgICBjb25zdCBkZiA9IHRoaXMuZHRGb3JtYXR0ZXIoZHQsIGludGxPcHRzKSxcbiAgICAgIHJlc3VsdHMgPSBkZi5mb3JtYXRUb1BhcnRzKCksXG4gICAgICBtYXRjaGluZyA9IHJlc3VsdHMuZmluZCgobSkgPT4gbS50eXBlLnRvTG93ZXJDYXNlKCkgPT09IGZpZWxkKTtcbiAgICByZXR1cm4gbWF0Y2hpbmcgPyBtYXRjaGluZy52YWx1ZSA6IG51bGw7XG4gIH1cblxuICBudW1iZXJGb3JtYXR0ZXIob3B0cyA9IHt9KSB7XG4gICAgLy8gdGhpcyBmb3JjZXNpbXBsZSBvcHRpb24gaXMgbmV2ZXIgdXNlZCAodGhlIG9ubHkgY2FsbGVyIHNob3J0LWNpcmN1aXRzIG9uIGl0LCBidXQgaXQgc2VlbXMgc2FmZXIgdG8gbGVhdmUpXG4gICAgLy8gKGluIGNvbnRyYXN0LCB0aGUgcmVzdCBvZiB0aGUgY29uZGl0aW9uIGlzIHVzZWQgaGVhdmlseSlcbiAgICByZXR1cm4gbmV3IFBvbHlOdW1iZXJGb3JtYXR0ZXIodGhpcy5pbnRsLCBvcHRzLmZvcmNlU2ltcGxlIHx8IHRoaXMuZmFzdE51bWJlcnMsIG9wdHMpO1xuICB9XG5cbiAgZHRGb3JtYXR0ZXIoZHQsIGludGxPcHRzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFBvbHlEYXRlRm9ybWF0dGVyKGR0LCB0aGlzLmludGwsIGludGxPcHRzKTtcbiAgfVxuXG4gIHJlbEZvcm1hdHRlcihvcHRzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFBvbHlSZWxGb3JtYXR0ZXIodGhpcy5pbnRsLCB0aGlzLmlzRW5nbGlzaCgpLCBvcHRzKTtcbiAgfVxuXG4gIGxpc3RGb3JtYXR0ZXIob3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIGdldENhY2hlZExGKHRoaXMuaW50bCwgb3B0cyk7XG4gIH1cblxuICBpc0VuZ2xpc2goKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMubG9jYWxlID09PSBcImVuXCIgfHxcbiAgICAgIHRoaXMubG9jYWxlLnRvTG93ZXJDYXNlKCkgPT09IFwiZW4tdXNcIiB8fFxuICAgICAgZ2V0Q2FjaGVkSW50UmVzb2x2ZWRPcHRpb25zKHRoaXMuaW50bCkubG9jYWxlLnN0YXJ0c1dpdGgoXCJlbi11c1wiKVxuICAgICk7XG4gIH1cblxuICBnZXRXZWVrU2V0dGluZ3MoKSB7XG4gICAgaWYgKHRoaXMud2Vla1NldHRpbmdzKSB7XG4gICAgICByZXR1cm4gdGhpcy53ZWVrU2V0dGluZ3M7XG4gICAgfSBlbHNlIGlmICghaGFzTG9jYWxlV2Vla0luZm8oKSkge1xuICAgICAgcmV0dXJuIGZhbGxiYWNrV2Vla1NldHRpbmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0Q2FjaGVkV2Vla0luZm8odGhpcy5sb2NhbGUpO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0YXJ0T2ZXZWVrKCkge1xuICAgIHJldHVybiB0aGlzLmdldFdlZWtTZXR0aW5ncygpLmZpcnN0RGF5O1xuICB9XG5cbiAgZ2V0TWluRGF5c0luRmlyc3RXZWVrKCkge1xuICAgIHJldHVybiB0aGlzLmdldFdlZWtTZXR0aW5ncygpLm1pbmltYWxEYXlzO1xuICB9XG5cbiAgZ2V0V2Vla2VuZERheXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0V2Vla1NldHRpbmdzKCkud2Vla2VuZDtcbiAgfVxuXG4gIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmxvY2FsZSA9PT0gb3RoZXIubG9jYWxlICYmXG4gICAgICB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gb3RoZXIubnVtYmVyaW5nU3lzdGVtICYmXG4gICAgICB0aGlzLm91dHB1dENhbGVuZGFyID09PSBvdGhlci5vdXRwdXRDYWxlbmRhclxuICAgICk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYExvY2FsZSgke3RoaXMubG9jYWxlfSwgJHt0aGlzLm51bWJlcmluZ1N5c3RlbX0sICR7dGhpcy5vdXRwdXRDYWxlbmRhcn0pYDtcbiAgfVxufVxuIiwgImltcG9ydCB7IGZvcm1hdE9mZnNldCwgc2lnbmVkT2Zmc2V0IH0gZnJvbSBcIi4uL2ltcGwvdXRpbC5qc1wiO1xuaW1wb3J0IFpvbmUgZnJvbSBcIi4uL3pvbmUuanNcIjtcblxubGV0IHNpbmdsZXRvbiA9IG51bGw7XG5cbi8qKlxuICogQSB6b25lIHdpdGggYSBmaXhlZCBvZmZzZXQgKG1lYW5pbmcgbm8gRFNUKVxuICogQGltcGxlbWVudHMge1pvbmV9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpeGVkT2Zmc2V0Wm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIFVUQ1xuICAgKiBAcmV0dXJuIHtGaXhlZE9mZnNldFpvbmV9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHV0Y0luc3RhbmNlKCkge1xuICAgIGlmIChzaW5nbGV0b24gPT09IG51bGwpIHtcbiAgICAgIHNpbmdsZXRvbiA9IG5ldyBGaXhlZE9mZnNldFpvbmUoMCk7XG4gICAgfVxuICAgIHJldHVybiBzaW5nbGV0b247XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGluc3RhbmNlIHdpdGggYSBzcGVjaWZpZWQgb2Zmc2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGluIG1pbnV0ZXNcbiAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfVxuICAgKi9cbiAgc3RhdGljIGluc3RhbmNlKG9mZnNldCkge1xuICAgIHJldHVybiBvZmZzZXQgPT09IDAgPyBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2UgOiBuZXcgRml4ZWRPZmZzZXRab25lKG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGluc3RhbmNlIG9mIEZpeGVkT2Zmc2V0Wm9uZSBmcm9tIGEgVVRDIG9mZnNldCBzdHJpbmcsIGxpa2UgXCJVVEMrNlwiXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzIC0gVGhlIG9mZnNldCBzdHJpbmcgdG8gcGFyc2VcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDKzZcIilcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDKzA2XCIpXG4gICAqIEBleGFtcGxlIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcihcIlVUQy02OjAwXCIpXG4gICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICovXG4gIHN0YXRpYyBwYXJzZVNwZWNpZmllcihzKSB7XG4gICAgaWYgKHMpIHtcbiAgICAgIGNvbnN0IHIgPSBzLm1hdGNoKC9edXRjKD86KFsrLV1cXGR7MSwyfSkoPzo6KFxcZHsyfSkpPyk/JC9pKTtcbiAgICAgIGlmIChyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRml4ZWRPZmZzZXRab25lKHNpZ25lZE9mZnNldChyWzFdLCByWzJdKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3RydWN0b3Iob2Zmc2V0KSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKiogQHByaXZhdGUgKiovXG4gICAgdGhpcy5maXhlZCA9IG9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB6b25lLiBgZml4ZWRgIGZvciBhbGwgaW5zdGFuY2VzIG9mIGBGaXhlZE9mZnNldFpvbmVgLlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcImZpeGVkXCI7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhpcyB6b25lLlxuICAgKiBBbGwgZml4ZWQgem9uZXMnIG5hbWVzIGFsd2F5cyBzdGFydCB3aXRoIFwiVVRDXCIgKHBsdXMgb3B0aW9uYWwgb2Zmc2V0KVxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkID09PSAwID8gXCJVVENcIiA6IGBVVEMke2Zvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBcIm5hcnJvd1wiKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBJQU5BIG5hbWUgb2YgdGhpcyB6b25lLCBpLmUuIGBFdGMvVVRDYCBvciBgRXRjL0dNVCsvLW5uYFxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBpYW5hTmFtZSgpIHtcbiAgICBpZiAodGhpcy5maXhlZCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFwiRXRjL1VUQ1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYEV0Yy9HTVQke2Zvcm1hdE9mZnNldCgtdGhpcy5maXhlZCwgXCJuYXJyb3dcIil9YDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgY29tbW9uIG5hbWUgYXQgdGhlIHNwZWNpZmllZCB0aW1lc3RhbXAuXG4gICAqXG4gICAqIEZvciBmaXhlZCBvZmZzZXQgem9uZXMgdGhpcyBlcXVhbHMgdG8gdGhlIHpvbmUgbmFtZS5cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBvZmZzZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgdmFsdWUgYXMgYSBzdHJpbmdcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBvZmZzZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCAtIFdoYXQgc3R5bGUgb2Ygb2Zmc2V0IHRvIHJldHVybi5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VwdHMgJ25hcnJvdycsICdzaG9ydCcsIG9yICd0ZWNoaWUnLiBSZXR1cm5pbmcgJys2JywgJyswNjowMCcsIG9yICcrMDYwMCcgcmVzcGVjdGl2ZWx5XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGZvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBmb3JtYXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgb2Zmc2V0IGlzIGtub3duIHRvIGJlIGZpeGVkIGZvciB0aGUgd2hvbGUgeWVhcjpcbiAgICogQWx3YXlzIHJldHVybnMgdHJ1ZSBmb3IgYWxsIGZpeGVkIG9mZnNldCB6b25lcy5cbiAgICogQG92ZXJyaWRlXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgZm9yIHRoaXMgem9uZSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcC5cbiAgICpcbiAgICogRm9yIGZpeGVkIG9mZnNldCB6b25lcywgdGhpcyBpcyBjb25zdGFudCBhbmQgZG9lcyBub3QgZGVwZW5kIG9uIGEgdGltZXN0YW1wLlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgb2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyBlcXVhbCB0byBhbm90aGVyIHpvbmUgKGkuZS4gYWxzbyBmaXhlZCBhbmQgc2FtZSBvZmZzZXQpXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge1pvbmV9IG90aGVyWm9uZSAtIHRoZSB6b25lIHRvIGNvbXBhcmVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09IFwiZml4ZWRcIiAmJiBvdGhlclpvbmUuZml4ZWQgPT09IHRoaXMuZml4ZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBab25lIGlzIHZhbGlkOlxuICAgKiBBbGwgZml4ZWQgb2Zmc2V0IHpvbmVzIGFyZSB2YWxpZC5cbiAgICogQG92ZXJyaWRlXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsICJpbXBvcnQgWm9uZSBmcm9tIFwiLi4vem9uZS5qc1wiO1xuXG4vKipcbiAqIEEgem9uZSB0aGF0IGZhaWxlZCB0byBwYXJzZS4gWW91IHNob3VsZCBuZXZlciBuZWVkIHRvIGluc3RhbnRpYXRlIHRoaXMuXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgY29uc3RydWN0b3Ioem9uZU5hbWUpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKiAgQHByaXZhdGUgKi9cbiAgICB0aGlzLnpvbmVOYW1lID0gem9uZU5hbWU7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJpbnZhbGlkXCI7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBpc1VuaXZlcnNhbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBvZmZzZXROYW1lKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZm9ybWF0T2Zmc2V0KCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgb2Zmc2V0KCkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBlcXVhbHMoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmltcG9ydCBab25lIGZyb20gXCIuLi96b25lLmpzXCI7XG5pbXBvcnQgSUFOQVpvbmUgZnJvbSBcIi4uL3pvbmVzL0lBTkFab25lLmpzXCI7XG5pbXBvcnQgRml4ZWRPZmZzZXRab25lIGZyb20gXCIuLi96b25lcy9maXhlZE9mZnNldFpvbmUuanNcIjtcbmltcG9ydCBJbnZhbGlkWm9uZSBmcm9tIFwiLi4vem9uZXMvaW52YWxpZFpvbmUuanNcIjtcblxuaW1wb3J0IHsgaXNVbmRlZmluZWQsIGlzU3RyaW5nLCBpc051bWJlciB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmltcG9ydCBTeXN0ZW1ab25lIGZyb20gXCIuLi96b25lcy9zeXN0ZW1ab25lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVab25lKGlucHV0LCBkZWZhdWx0Wm9uZSkge1xuICBsZXQgb2Zmc2V0O1xuICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpIHx8IGlucHV0ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRab25lO1xuICB9IGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgWm9uZSkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfSBlbHNlIGlmIChpc1N0cmluZyhpbnB1dCkpIHtcbiAgICBjb25zdCBsb3dlcmVkID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobG93ZXJlZCA9PT0gXCJkZWZhdWx0XCIpIHJldHVybiBkZWZhdWx0Wm9uZTtcbiAgICBlbHNlIGlmIChsb3dlcmVkID09PSBcImxvY2FsXCIgfHwgbG93ZXJlZCA9PT0gXCJzeXN0ZW1cIikgcmV0dXJuIFN5c3RlbVpvbmUuaW5zdGFuY2U7XG4gICAgZWxzZSBpZiAobG93ZXJlZCA9PT0gXCJ1dGNcIiB8fCBsb3dlcmVkID09PSBcImdtdFwiKSByZXR1cm4gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlO1xuICAgIGVsc2UgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcihsb3dlcmVkKSB8fCBJQU5BWm9uZS5jcmVhdGUoaW5wdXQpO1xuICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgIHJldHVybiBGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2UoaW5wdXQpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiBcIm9mZnNldFwiIGluIGlucHV0ICYmIHR5cGVvZiBpbnB1dC5vZmZzZXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIFRoaXMgaXMgZHVtYiwgYnV0IHRoZSBpbnN0YW5jZW9mIGNoZWNrIGFib3ZlIGRvZXNuJ3Qgc2VlbSB0byByZWFsbHkgd29ya1xuICAgIC8vIHNvIHdlJ3JlIGR1Y2sgY2hlY2tpbmcgaXRcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBJbnZhbGlkWm9uZShpbnB1dCk7XG4gIH1cbn1cbiIsICJjb25zdCBudW1iZXJpbmdTeXN0ZW1zID0ge1xuICBhcmFiOiBcIltcXHUwNjYwLVxcdTA2NjldXCIsXG4gIGFyYWJleHQ6IFwiW1xcdTA2RjAtXFx1MDZGOV1cIixcbiAgYmFsaTogXCJbXFx1MUI1MC1cXHUxQjU5XVwiLFxuICBiZW5nOiBcIltcXHUwOUU2LVxcdTA5RUZdXCIsXG4gIGRldmE6IFwiW1xcdTA5NjYtXFx1MDk2Rl1cIixcbiAgZnVsbHdpZGU6IFwiW1xcdUZGMTAtXFx1RkYxOV1cIixcbiAgZ3VqcjogXCJbXFx1MEFFNi1cXHUwQUVGXVwiLFxuICBoYW5pZGVjOiBcIltcdTMwMDd8XHU0RTAwfFx1NEU4Q3xcdTRFMDl8XHU1NkRCfFx1NEU5NHxcdTUxNkR8XHU0RTAzfFx1NTE2QnxcdTRFNURdXCIsXG4gIGtobXI6IFwiW1xcdTE3RTAtXFx1MTdFOV1cIixcbiAga25kYTogXCJbXFx1MENFNi1cXHUwQ0VGXVwiLFxuICBsYW9vOiBcIltcXHUwRUQwLVxcdTBFRDldXCIsXG4gIGxpbWI6IFwiW1xcdTE5NDYtXFx1MTk0Rl1cIixcbiAgbWx5bTogXCJbXFx1MEQ2Ni1cXHUwRDZGXVwiLFxuICBtb25nOiBcIltcXHUxODEwLVxcdTE4MTldXCIsXG4gIG15bXI6IFwiW1xcdTEwNDAtXFx1MTA0OV1cIixcbiAgb3J5YTogXCJbXFx1MEI2Ni1cXHUwQjZGXVwiLFxuICB0YW1sZGVjOiBcIltcXHUwQkU2LVxcdTBCRUZdXCIsXG4gIHRlbHU6IFwiW1xcdTBDNjYtXFx1MEM2Rl1cIixcbiAgdGhhaTogXCJbXFx1MEU1MC1cXHUwRTU5XVwiLFxuICB0aWJ0OiBcIltcXHUwRjIwLVxcdTBGMjldXCIsXG4gIGxhdG46IFwiXFxcXGRcIixcbn07XG5cbmNvbnN0IG51bWJlcmluZ1N5c3RlbXNVVEYxNiA9IHtcbiAgYXJhYjogWzE2MzIsIDE2NDFdLFxuICBhcmFiZXh0OiBbMTc3NiwgMTc4NV0sXG4gIGJhbGk6IFs2OTkyLCA3MDAxXSxcbiAgYmVuZzogWzI1MzQsIDI1NDNdLFxuICBkZXZhOiBbMjQwNiwgMjQxNV0sXG4gIGZ1bGx3aWRlOiBbNjUyOTYsIDY1MzAzXSxcbiAgZ3VqcjogWzI3OTAsIDI3OTldLFxuICBraG1yOiBbNjExMiwgNjEyMV0sXG4gIGtuZGE6IFszMzAyLCAzMzExXSxcbiAgbGFvbzogWzM3OTIsIDM4MDFdLFxuICBsaW1iOiBbNjQ3MCwgNjQ3OV0sXG4gIG1seW06IFszNDMwLCAzNDM5XSxcbiAgbW9uZzogWzYxNjAsIDYxNjldLFxuICBteW1yOiBbNDE2MCwgNDE2OV0sXG4gIG9yeWE6IFsyOTE4LCAyOTI3XSxcbiAgdGFtbGRlYzogWzMwNDYsIDMwNTVdLFxuICB0ZWx1OiBbMzE3NCwgMzE4M10sXG4gIHRoYWk6IFszNjY0LCAzNjczXSxcbiAgdGlidDogWzM4NzIsIDM4ODFdLFxufTtcblxuY29uc3QgaGFuaWRlY0NoYXJzID0gbnVtYmVyaW5nU3lzdGVtcy5oYW5pZGVjLnJlcGxhY2UoL1tcXFt8XFxdXS9nLCBcIlwiKS5zcGxpdChcIlwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGlnaXRzKHN0cikge1xuICBsZXQgdmFsdWUgPSBwYXJzZUludChzdHIsIDEwKTtcbiAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgIHZhbHVlID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICBpZiAoc3RyW2ldLnNlYXJjaChudW1iZXJpbmdTeXN0ZW1zLmhhbmlkZWMpICE9PSAtMSkge1xuICAgICAgICB2YWx1ZSArPSBoYW5pZGVjQ2hhcnMuaW5kZXhPZihzdHJbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbnVtYmVyaW5nU3lzdGVtc1VURjE2KSB7XG4gICAgICAgICAgY29uc3QgW21pbiwgbWF4XSA9IG51bWJlcmluZ1N5c3RlbXNVVEYxNltrZXldO1xuICAgICAgICAgIGlmIChjb2RlID49IG1pbiAmJiBjb2RlIDw9IG1heCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gY29kZSAtIG1pbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8vIGNhY2hlIG9mIHtudW1iZXJpbmdTeXN0ZW06IHthcHBlbmQ6IHJlZ2V4fX1cbmNvbnN0IGRpZ2l0UmVnZXhDYWNoZSA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiByZXNldERpZ2l0UmVnZXhDYWNoZSgpIHtcbiAgZGlnaXRSZWdleENhY2hlLmNsZWFyKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWdpdFJlZ2V4KHsgbnVtYmVyaW5nU3lzdGVtIH0sIGFwcGVuZCA9IFwiXCIpIHtcbiAgY29uc3QgbnMgPSBudW1iZXJpbmdTeXN0ZW0gfHwgXCJsYXRuXCI7XG5cbiAgbGV0IGFwcGVuZENhY2hlID0gZGlnaXRSZWdleENhY2hlLmdldChucyk7XG4gIGlmIChhcHBlbmRDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXBwZW5kQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgZGlnaXRSZWdleENhY2hlLnNldChucywgYXBwZW5kQ2FjaGUpO1xuICB9XG4gIGxldCByZWdleCA9IGFwcGVuZENhY2hlLmdldChhcHBlbmQpO1xuICBpZiAocmVnZXggPT09IHVuZGVmaW5lZCkge1xuICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChgJHtudW1iZXJpbmdTeXN0ZW1zW25zXX0ke2FwcGVuZH1gKTtcbiAgICBhcHBlbmRDYWNoZS5zZXQoYXBwZW5kLCByZWdleCk7XG4gIH1cblxuICByZXR1cm4gcmVnZXg7XG59XG4iLCAiaW1wb3J0IFN5c3RlbVpvbmUgZnJvbSBcIi4vem9uZXMvc3lzdGVtWm9uZS5qc1wiO1xuaW1wb3J0IElBTkFab25lIGZyb20gXCIuL3pvbmVzL0lBTkFab25lLmpzXCI7XG5pbXBvcnQgTG9jYWxlIGZyb20gXCIuL2ltcGwvbG9jYWxlLmpzXCI7XG5pbXBvcnQgRGF0ZVRpbWUgZnJvbSBcIi4vZGF0ZXRpbWUuanNcIjtcblxuaW1wb3J0IHsgbm9ybWFsaXplWm9uZSB9IGZyb20gXCIuL2ltcGwvem9uZVV0aWwuanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlV2Vla1NldHRpbmdzIH0gZnJvbSBcIi4vaW1wbC91dGlsLmpzXCI7XG5pbXBvcnQgeyByZXNldERpZ2l0UmVnZXhDYWNoZSB9IGZyb20gXCIuL2ltcGwvZGlnaXRzLmpzXCI7XG5cbmxldCBub3cgPSAoKSA9PiBEYXRlLm5vdygpLFxuICBkZWZhdWx0Wm9uZSA9IFwic3lzdGVtXCIsXG4gIGRlZmF1bHRMb2NhbGUgPSBudWxsLFxuICBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtID0gbnVsbCxcbiAgZGVmYXVsdE91dHB1dENhbGVuZGFyID0gbnVsbCxcbiAgdHdvRGlnaXRDdXRvZmZZZWFyID0gNjAsXG4gIHRocm93T25JbnZhbGlkLFxuICBkZWZhdWx0V2Vla1NldHRpbmdzID0gbnVsbDtcblxuLyoqXG4gKiBTZXR0aW5ncyBjb250YWlucyBzdGF0aWMgZ2V0dGVycyBhbmQgc2V0dGVycyB0aGF0IGNvbnRyb2wgTHV4b24ncyBvdmVyYWxsIGJlaGF2aW9yLiBMdXhvbiBpcyBhIHNpbXBsZSBsaWJyYXJ5IHdpdGggZmV3IG9wdGlvbnMsIGJ1dCB0aGUgb25lcyBpdCBkb2VzIGhhdmUgbGl2ZSBoZXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXR0aW5ncyB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNhbGxiYWNrIGZvciByZXR1cm5pbmcgdGhlIGN1cnJlbnQgdGltZXN0YW1wLlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqL1xuICBzdGF0aWMgZ2V0IG5vdygpIHtcbiAgICByZXR1cm4gbm93O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAqIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgbnVtYmVyLCB3aGljaCB3aWxsIGJlIGludGVycHJldGVkIGFzIGFuIEVwb2NoIG1pbGxpc2Vjb25kIGNvdW50XG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQGV4YW1wbGUgU2V0dGluZ3Mubm93ID0gKCkgPT4gRGF0ZS5ub3coKSArIDMwMDAgLy8gcHJldGVuZCBpdCBpcyAzIHNlY29uZHMgaW4gdGhlIGZ1dHVyZVxuICAgKiBAZXhhbXBsZSBTZXR0aW5ncy5ub3cgPSAoKSA9PiAwIC8vIGFsd2F5cyBwcmV0ZW5kIGl0J3MgSmFuIDEsIDE5NzAgYXQgbWlkbmlnaHQgaW4gVVRDIHRpbWVcbiAgICovXG4gIHN0YXRpYyBzZXQgbm93KG4pIHtcbiAgICBub3cgPSBuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCB0aW1lIHpvbmUgdG8gY3JlYXRlIERhdGVUaW1lcyBpbi4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogVXNlIHRoZSB2YWx1ZSBcInN5c3RlbVwiIHRvIHJlc2V0IHRoaXMgdmFsdWUgdG8gdGhlIHN5c3RlbSdzIHRpbWUgem9uZS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBzZXQgZGVmYXVsdFpvbmUoem9uZSkge1xuICAgIGRlZmF1bHRab25lID0gem9uZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgdGltZSB6b25lIG9iamVjdCBjdXJyZW50bHkgdXNlZCB0byBjcmVhdGUgRGF0ZVRpbWVzLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgc3lzdGVtJ3MgdGltZSB6b25lICh0aGUgb25lIHNldCBvbiB0aGUgbWFjaGluZSB0aGF0IHJ1bnMgdGhpcyBjb2RlKS5cbiAgICogQHR5cGUge1pvbmV9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRab25lKCkge1xuICAgIHJldHVybiBub3JtYWxpemVab25lKGRlZmF1bHRab25lLCBTeXN0ZW1ab25lLmluc3RhbmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdExvY2FsZSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdExvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBzZXQgZGVmYXVsdExvY2FsZShsb2NhbGUpIHtcbiAgICBkZWZhdWx0TG9jYWxlID0gbG9jYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCBudW1iZXJpbmcgc3lzdGVtIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE51bWJlcmluZ1N5c3RlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGRlZmF1bHQgbnVtYmVyaW5nIHN5c3RlbSB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgc2V0IGRlZmF1bHROdW1iZXJpbmdTeXN0ZW0obnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bWJlcmluZ1N5c3RlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgb3V0cHV0IGNhbGVuZGFyIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE91dHB1dENhbGVuZGFyKCkge1xuICAgIHJldHVybiBkZWZhdWx0T3V0cHV0Q2FsZW5kYXI7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IG91dHB1dCBjYWxlbmRhciB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgc2V0IGRlZmF1bHRPdXRwdXRDYWxlbmRhcihvdXRwdXRDYWxlbmRhcikge1xuICAgIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG91dHB1dENhbGVuZGFyO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFdlZWtTZXR0aW5nc1xuICAgKiBAcHJvcGVydHkge251bWJlcn0gZmlyc3REYXlcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbmltYWxEYXlzXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyW119IHdlZWtlbmRcbiAgICovXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1dlZWtTZXR0aW5nc3xudWxsfVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0V2Vla1NldHRpbmdzKCkge1xuICAgIHJldHVybiBkZWZhdWx0V2Vla1NldHRpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSBkZWZhdWx0IGxvY2FsZSB3ZWVrIHNldHRpbmdzLCBpLmUuIHRoZSBzdGFydCBvZiB0aGUgd2VlaywgdGhlIHdlZWtlbmQgYW5kXG4gICAqIGhvdyBtYW55IGRheXMgYXJlIHJlcXVpcmVkIGluIHRoZSBmaXJzdCB3ZWVrIG9mIGEgeWVhci5cbiAgICogRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtXZWVrU2V0dGluZ3N8bnVsbH0gd2Vla1NldHRpbmdzXG4gICAqL1xuICBzdGF0aWMgc2V0IGRlZmF1bHRXZWVrU2V0dGluZ3Mod2Vla1NldHRpbmdzKSB7XG4gICAgZGVmYXVsdFdlZWtTZXR0aW5ncyA9IHZhbGlkYXRlV2Vla1NldHRpbmdzKHdlZWtTZXR0aW5ncyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXRvZmYgeWVhciBmb3Igd2hldGhlciBhIDItZGlnaXQgeWVhciBzdHJpbmcgaXMgaW50ZXJwcmV0ZWQgaW4gdGhlIGN1cnJlbnQgb3IgcHJldmlvdXMgY2VudHVyeS4gTnVtYmVycyBoaWdoZXIgdGhhbiB0aGUgY3V0b2ZmIHdpbGwgYmUgY29uc2lkZXJlZCB0byBtZWFuIDE5eHggYW5kIG51bWJlcnMgbG93ZXIgb3IgZXF1YWwgdG8gdGhlIGN1dG9mZiB3aWxsIGJlIGNvbnNpZGVyZWQgMjB4eC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHN0YXRpYyBnZXQgdHdvRGlnaXRDdXRvZmZZZWFyKCkge1xuICAgIHJldHVybiB0d29EaWdpdEN1dG9mZlllYXI7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjdXRvZmYgeWVhciBmb3Igd2hldGhlciBhIDItZGlnaXQgeWVhciBzdHJpbmcgaXMgaW50ZXJwcmV0ZWQgaW4gdGhlIGN1cnJlbnQgb3IgcHJldmlvdXMgY2VudHVyeS4gTnVtYmVycyBoaWdoZXIgdGhhbiB0aGUgY3V0b2ZmIHdpbGwgYmUgY29uc2lkZXJlZCB0byBtZWFuIDE5eHggYW5kIG51bWJlcnMgbG93ZXIgb3IgZXF1YWwgdG8gdGhlIGN1dG9mZiB3aWxsIGJlIGNvbnNpZGVyZWQgMjB4eC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGV4YW1wbGUgU2V0dGluZ3MudHdvRGlnaXRDdXRvZmZZZWFyID0gMCAvLyBhbGwgJ3l5JyBhcmUgaW50ZXJwcmV0ZWQgYXMgMjB0aCBjZW50dXJ5XG4gICAqIEBleGFtcGxlIFNldHRpbmdzLnR3b0RpZ2l0Q3V0b2ZmWWVhciA9IDk5IC8vIGFsbCAneXknIGFyZSBpbnRlcnByZXRlZCBhcyAyMXN0IGNlbnR1cnlcbiAgICogQGV4YW1wbGUgU2V0dGluZ3MudHdvRGlnaXRDdXRvZmZZZWFyID0gNTAgLy8gJzQ5JyAtPiAyMDQ5OyAnNTAnIC0+IDE5NTBcbiAgICogQGV4YW1wbGUgU2V0dGluZ3MudHdvRGlnaXRDdXRvZmZZZWFyID0gMTk1MCAvLyBpbnRlcnByZXRlZCBhcyA1MFxuICAgKiBAZXhhbXBsZSBTZXR0aW5ncy50d29EaWdpdEN1dG9mZlllYXIgPSAyMDUwIC8vIEFMU08gaW50ZXJwcmV0ZWQgYXMgNTBcbiAgICovXG4gIHN0YXRpYyBzZXQgdHdvRGlnaXRDdXRvZmZZZWFyKGN1dG9mZlllYXIpIHtcbiAgICB0d29EaWdpdEN1dG9mZlllYXIgPSBjdXRvZmZZZWFyICUgMTAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIEx1eG9uIHdpbGwgdGhyb3cgd2hlbiBpdCBlbmNvdW50ZXJzIGludmFsaWQgRGF0ZVRpbWVzLCBEdXJhdGlvbnMsIG9yIEludGVydmFsc1xuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgdGhyb3dPbkludmFsaWQoKSB7XG4gICAgcmV0dXJuIHRocm93T25JbnZhbGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB3aGV0aGVyIEx1eG9uIHdpbGwgdGhyb3cgd2hlbiBpdCBlbmNvdW50ZXJzIGludmFsaWQgRGF0ZVRpbWVzLCBEdXJhdGlvbnMsIG9yIEludGVydmFsc1xuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBzZXQgdGhyb3dPbkludmFsaWQodCkge1xuICAgIHRocm93T25JbnZhbGlkID0gdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBMdXhvbidzIGdsb2JhbCBjYWNoZXMuIFNob3VsZCBvbmx5IGJlIG5lY2Vzc2FyeSBpbiB0ZXN0aW5nIHNjZW5hcmlvcy5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHN0YXRpYyByZXNldENhY2hlcygpIHtcbiAgICBMb2NhbGUucmVzZXRDYWNoZSgpO1xuICAgIElBTkFab25lLnJlc2V0Q2FjaGUoKTtcbiAgICBEYXRlVGltZS5yZXNldENhY2hlKCk7XG4gICAgcmVzZXREaWdpdFJlZ2V4Q2FjaGUoKTtcbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWQge1xuICBjb25zdHJ1Y3RvcihyZWFzb24sIGV4cGxhbmF0aW9uKSB7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy5leHBsYW5hdGlvbiA9IGV4cGxhbmF0aW9uO1xuICB9XG5cbiAgdG9NZXNzYWdlKCkge1xuICAgIGlmICh0aGlzLmV4cGxhbmF0aW9uKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5yZWFzb259OiAke3RoaXMuZXhwbGFuYXRpb259YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIGludGVnZXJCZXR3ZWVuLFxuICBpc0xlYXBZZWFyLFxuICB0aW1lT2JqZWN0LFxuICBkYXlzSW5ZZWFyLFxuICBkYXlzSW5Nb250aCxcbiAgd2Vla3NJbldlZWtZZWFyLFxuICBpc0ludGVnZXIsXG4gIGlzVW5kZWZpbmVkLFxufSBmcm9tIFwiLi91dGlsLmpzXCI7XG5pbXBvcnQgSW52YWxpZCBmcm9tIFwiLi9pbnZhbGlkLmpzXCI7XG5pbXBvcnQgeyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvciB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcblxuY29uc3Qgbm9uTGVhcExhZGRlciA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sXG4gIGxlYXBMYWRkZXIgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdO1xuXG5mdW5jdGlvbiB1bml0T3V0T2ZSYW5nZSh1bml0LCB2YWx1ZSkge1xuICByZXR1cm4gbmV3IEludmFsaWQoXG4gICAgXCJ1bml0IG91dCBvZiByYW5nZVwiLFxuICAgIGB5b3Ugc3BlY2lmaWVkICR7dmFsdWV9IChvZiB0eXBlICR7dHlwZW9mIHZhbHVlfSkgYXMgYSAke3VuaXR9LCB3aGljaCBpcyBpbnZhbGlkYFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF5T2ZXZWVrKHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoIC0gMSwgZGF5KSk7XG5cbiAgaWYgKHllYXIgPCAxMDAgJiYgeWVhciA+PSAwKSB7XG4gICAgZC5zZXRVVENGdWxsWWVhcihkLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwKTtcbiAgfVxuXG4gIGNvbnN0IGpzID0gZC5nZXRVVENEYXkoKTtcblxuICByZXR1cm4ganMgPT09IDAgPyA3IDoganM7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgcmV0dXJuIGRheSArIChpc0xlYXBZZWFyKHllYXIpID8gbGVhcExhZGRlciA6IG5vbkxlYXBMYWRkZXIpW21vbnRoIC0gMV07XG59XG5cbmZ1bmN0aW9uIHVuY29tcHV0ZU9yZGluYWwoeWVhciwgb3JkaW5hbCkge1xuICBjb25zdCB0YWJsZSA9IGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcixcbiAgICBtb250aDAgPSB0YWJsZS5maW5kSW5kZXgoKGkpID0+IGkgPCBvcmRpbmFsKSxcbiAgICBkYXkgPSBvcmRpbmFsIC0gdGFibGVbbW9udGgwXTtcbiAgcmV0dXJuIHsgbW9udGg6IG1vbnRoMCArIDEsIGRheSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNvV2Vla2RheVRvTG9jYWwoaXNvV2Vla2RheSwgc3RhcnRPZldlZWspIHtcbiAgcmV0dXJuICgoaXNvV2Vla2RheSAtIHN0YXJ0T2ZXZWVrICsgNykgJSA3KSArIDE7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ3JlZ29yaWFuVG9XZWVrKGdyZWdPYmosIG1pbkRheXNJbkZpcnN0V2VlayA9IDQsIHN0YXJ0T2ZXZWVrID0gMSkge1xuICBjb25zdCB7IHllYXIsIG1vbnRoLCBkYXkgfSA9IGdyZWdPYmosXG4gICAgb3JkaW5hbCA9IGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpLFxuICAgIHdlZWtkYXkgPSBpc29XZWVrZGF5VG9Mb2NhbChkYXlPZldlZWsoeWVhciwgbW9udGgsIGRheSksIHN0YXJ0T2ZXZWVrKTtcblxuICBsZXQgd2Vla051bWJlciA9IE1hdGguZmxvb3IoKG9yZGluYWwgLSB3ZWVrZGF5ICsgMTQgLSBtaW5EYXlzSW5GaXJzdFdlZWspIC8gNyksXG4gICAgd2Vla1llYXI7XG5cbiAgaWYgKHdlZWtOdW1iZXIgPCAxKSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyIC0gMTtcbiAgICB3ZWVrTnVtYmVyID0gd2Vla3NJbldlZWtZZWFyKHdlZWtZZWFyLCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKTtcbiAgfSBlbHNlIGlmICh3ZWVrTnVtYmVyID4gd2Vla3NJbldlZWtZZWFyKHllYXIsIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspKSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyICsgMTtcbiAgICB3ZWVrTnVtYmVyID0gMTtcbiAgfSBlbHNlIHtcbiAgICB3ZWVrWWVhciA9IHllYXI7XG4gIH1cblxuICByZXR1cm4geyB3ZWVrWWVhciwgd2Vla051bWJlciwgd2Vla2RheSwgLi4udGltZU9iamVjdChncmVnT2JqKSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2Vla1RvR3JlZ29yaWFuKHdlZWtEYXRhLCBtaW5EYXlzSW5GaXJzdFdlZWsgPSA0LCBzdGFydE9mV2VlayA9IDEpIHtcbiAgY29uc3QgeyB3ZWVrWWVhciwgd2Vla051bWJlciwgd2Vla2RheSB9ID0gd2Vla0RhdGEsXG4gICAgd2Vla2RheU9mSmFuNCA9IGlzb1dlZWtkYXlUb0xvY2FsKGRheU9mV2Vlayh3ZWVrWWVhciwgMSwgbWluRGF5c0luRmlyc3RXZWVrKSwgc3RhcnRPZldlZWspLFxuICAgIHllYXJJbkRheXMgPSBkYXlzSW5ZZWFyKHdlZWtZZWFyKTtcblxuICBsZXQgb3JkaW5hbCA9IHdlZWtOdW1iZXIgKiA3ICsgd2Vla2RheSAtIHdlZWtkYXlPZkphbjQgLSA3ICsgbWluRGF5c0luRmlyc3RXZWVrLFxuICAgIHllYXI7XG5cbiAgaWYgKG9yZGluYWwgPCAxKSB7XG4gICAgeWVhciA9IHdlZWtZZWFyIC0gMTtcbiAgICBvcmRpbmFsICs9IGRheXNJblllYXIoeWVhcik7XG4gIH0gZWxzZSBpZiAob3JkaW5hbCA+IHllYXJJbkRheXMpIHtcbiAgICB5ZWFyID0gd2Vla1llYXIgKyAxO1xuICAgIG9yZGluYWwgLT0gZGF5c0luWWVhcih3ZWVrWWVhcik7XG4gIH0gZWxzZSB7XG4gICAgeWVhciA9IHdlZWtZZWFyO1xuICB9XG5cbiAgY29uc3QgeyBtb250aCwgZGF5IH0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpO1xuICByZXR1cm4geyB5ZWFyLCBtb250aCwgZGF5LCAuLi50aW1lT2JqZWN0KHdlZWtEYXRhKSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JlZ29yaWFuVG9PcmRpbmFsKGdyZWdEYXRhKSB7XG4gIGNvbnN0IHsgeWVhciwgbW9udGgsIGRheSB9ID0gZ3JlZ0RhdGE7XG4gIGNvbnN0IG9yZGluYWwgPSBjb21wdXRlT3JkaW5hbCh5ZWFyLCBtb250aCwgZGF5KTtcbiAgcmV0dXJuIHsgeWVhciwgb3JkaW5hbCwgLi4udGltZU9iamVjdChncmVnRGF0YSkgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9yZGluYWxUb0dyZWdvcmlhbihvcmRpbmFsRGF0YSkge1xuICBjb25zdCB7IHllYXIsIG9yZGluYWwgfSA9IG9yZGluYWxEYXRhO1xuICBjb25zdCB7IG1vbnRoLCBkYXkgfSA9IHVuY29tcHV0ZU9yZGluYWwoeWVhciwgb3JkaW5hbCk7XG4gIHJldHVybiB7IHllYXIsIG1vbnRoLCBkYXksIC4uLnRpbWVPYmplY3Qob3JkaW5hbERhdGEpIH07XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgbG9jYWwgd2VlayB1bml0cyBsaWtlIGxvY2FsV2Vla2RheSBhcmUgdXNlZCBpbiBvYmouXG4gKiBJZiBzbywgdmFsaWRhdGVzIHRoYXQgdGhleSBhcmUgbm90IG1peGVkIHdpdGggSVNPIHdlZWsgdW5pdHMgYW5kIHRoZW4gY29waWVzIHRoZW0gdG8gdGhlIG5vcm1hbCB3ZWVrIHVuaXQgcHJvcGVydGllcy5cbiAqIE1vZGlmaWVzIG9iaiBpbi1wbGFjZSFcbiAqIEBwYXJhbSBvYmogdGhlIG9iamVjdCB2YWx1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZXNMb2NhbFdlZWtWYWx1ZXMob2JqLCBsb2MpIHtcbiAgY29uc3QgaGFzTG9jYWxlV2Vla0RhdGEgPVxuICAgICFpc1VuZGVmaW5lZChvYmoubG9jYWxXZWVrZGF5KSB8fFxuICAgICFpc1VuZGVmaW5lZChvYmoubG9jYWxXZWVrTnVtYmVyKSB8fFxuICAgICFpc1VuZGVmaW5lZChvYmoubG9jYWxXZWVrWWVhcik7XG4gIGlmIChoYXNMb2NhbGVXZWVrRGF0YSkge1xuICAgIGNvbnN0IGhhc0lzb1dlZWtEYXRhID1cbiAgICAgICFpc1VuZGVmaW5lZChvYmoud2Vla2RheSkgfHwgIWlzVW5kZWZpbmVkKG9iai53ZWVrTnVtYmVyKSB8fCAhaXNVbmRlZmluZWQob2JqLndlZWtZZWFyKTtcblxuICAgIGlmIChoYXNJc29XZWVrRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFxuICAgICAgICBcIkNhbm5vdCBtaXggbG9jYWxlLWJhc2VkIHdlZWsgZmllbGRzIHdpdGggSVNPLWJhc2VkIHdlZWsgZmllbGRzXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQob2JqLmxvY2FsV2Vla2RheSkpIG9iai53ZWVrZGF5ID0gb2JqLmxvY2FsV2Vla2RheTtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKG9iai5sb2NhbFdlZWtOdW1iZXIpKSBvYmoud2Vla051bWJlciA9IG9iai5sb2NhbFdlZWtOdW1iZXI7XG4gICAgaWYgKCFpc1VuZGVmaW5lZChvYmoubG9jYWxXZWVrWWVhcikpIG9iai53ZWVrWWVhciA9IG9iai5sb2NhbFdlZWtZZWFyO1xuICAgIGRlbGV0ZSBvYmoubG9jYWxXZWVrZGF5O1xuICAgIGRlbGV0ZSBvYmoubG9jYWxXZWVrTnVtYmVyO1xuICAgIGRlbGV0ZSBvYmoubG9jYWxXZWVrWWVhcjtcbiAgICByZXR1cm4ge1xuICAgICAgbWluRGF5c0luRmlyc3RXZWVrOiBsb2MuZ2V0TWluRGF5c0luRmlyc3RXZWVrKCksXG4gICAgICBzdGFydE9mV2VlazogbG9jLmdldFN0YXJ0T2ZXZWVrKCksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyBtaW5EYXlzSW5GaXJzdFdlZWs6IDQsIHN0YXJ0T2ZXZWVrOiAxIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ludmFsaWRXZWVrRGF0YShvYmosIG1pbkRheXNJbkZpcnN0V2VlayA9IDQsIHN0YXJ0T2ZXZWVrID0gMSkge1xuICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLndlZWtZZWFyKSxcbiAgICB2YWxpZFdlZWsgPSBpbnRlZ2VyQmV0d2VlbihcbiAgICAgIG9iai53ZWVrTnVtYmVyLFxuICAgICAgMSxcbiAgICAgIHdlZWtzSW5XZWVrWWVhcihvYmoud2Vla1llYXIsIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspXG4gICAgKSxcbiAgICB2YWxpZFdlZWtkYXkgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla2RheSwgMSwgNyk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrWWVhclwiLCBvYmoud2Vla1llYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZFdlZWspIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrXCIsIG9iai53ZWVrTnVtYmVyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRXZWVrZGF5KSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwid2Vla2RheVwiLCBvYmoud2Vla2RheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNJbnZhbGlkT3JkaW5hbERhdGEob2JqKSB7XG4gIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoueWVhciksXG4gICAgdmFsaWRPcmRpbmFsID0gaW50ZWdlckJldHdlZW4ob2JqLm9yZGluYWwsIDEsIGRheXNJblllYXIob2JqLnllYXIpKTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInllYXJcIiwgb2JqLnllYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE9yZGluYWwpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJvcmRpbmFsXCIsIG9iai5vcmRpbmFsKTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikge1xuICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLnllYXIpLFxuICAgIHZhbGlkTW9udGggPSBpbnRlZ2VyQmV0d2VlbihvYmoubW9udGgsIDEsIDEyKSxcbiAgICB2YWxpZERheSA9IGludGVnZXJCZXR3ZWVuKG9iai5kYXksIDEsIGRheXNJbk1vbnRoKG9iai55ZWFyLCBvYmoubW9udGgpKTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInllYXJcIiwgb2JqLnllYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1vbnRoKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibW9udGhcIiwgb2JqLm1vbnRoKTtcbiAgfSBlbHNlIGlmICghdmFsaWREYXkpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJkYXlcIiwgb2JqLmRheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNJbnZhbGlkVGltZURhdGEob2JqKSB7XG4gIGNvbnN0IHsgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kIH0gPSBvYmo7XG4gIGNvbnN0IHZhbGlkSG91ciA9XG4gICAgICBpbnRlZ2VyQmV0d2Vlbihob3VyLCAwLCAyMykgfHxcbiAgICAgIChob3VyID09PSAyNCAmJiBtaW51dGUgPT09IDAgJiYgc2Vjb25kID09PSAwICYmIG1pbGxpc2Vjb25kID09PSAwKSxcbiAgICB2YWxpZE1pbnV0ZSA9IGludGVnZXJCZXR3ZWVuKG1pbnV0ZSwgMCwgNTkpLFxuICAgIHZhbGlkU2Vjb25kID0gaW50ZWdlckJldHdlZW4oc2Vjb25kLCAwLCA1OSksXG4gICAgdmFsaWRNaWxsaXNlY29uZCA9IGludGVnZXJCZXR3ZWVuKG1pbGxpc2Vjb25kLCAwLCA5OTkpO1xuXG4gIGlmICghdmFsaWRIb3VyKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwiaG91clwiLCBob3VyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRNaW51dGUpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJtaW51dGVcIiwgbWludXRlKTtcbiAgfSBlbHNlIGlmICghdmFsaWRTZWNvbmQpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJzZWNvbmRcIiwgc2Vjb25kKTtcbiAgfSBlbHNlIGlmICghdmFsaWRNaWxsaXNlY29uZCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm1pbGxpc2Vjb25kXCIsIG1pbGxpc2Vjb25kKTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cbiIsICIvKlxuICBUaGlzIGlzIGp1c3QgYSBqdW5rIGRyYXdlciwgY29udGFpbmluZyBhbnl0aGluZyB1c2VkIGFjcm9zcyBtdWx0aXBsZSBjbGFzc2VzLlxuICBCZWNhdXNlIEx1eG9uIGlzIHNtYWxsKGlzaCksIHRoaXMgc2hvdWxkIHN0YXkgc21hbGwgYW5kIHdlIHdvbid0IHdvcnJ5IGFib3V0IHNwbGl0dGluZ1xuICBpdCB1cCBpbnRvLCBzYXksIHBhcnNpbmdVdGlsLmpzIGFuZCBiYXNpY1V0aWwuanMgYW5kIHNvIG9uLiBCdXQgdGhleSBhcmUgZGl2aWRlZCB1cCBieSBmZWF0dXJlIGFyZWEuXG4qL1xuXG5pbXBvcnQgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcbmltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi4vc2V0dGluZ3MuanNcIjtcbmltcG9ydCB7IGRheU9mV2VlaywgaXNvV2Vla2RheVRvTG9jYWwgfSBmcm9tIFwiLi9jb252ZXJzaW9ucy5qc1wiO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuLy8gVFlQRVNcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcInVuZGVmaW5lZFwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwibnVtYmVyXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVnZXIobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwibnVtYmVyXCIgJiYgbyAlIDEgPT09IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZShvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09IFwiW29iamVjdCBEYXRlXVwiO1xufVxuXG4vLyBDQVBBQklMSVRJRVNcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlbGF0aXZlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgSW50bCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhIUludGwuUmVsYXRpdmVUaW1lRm9ybWF0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNMb2NhbGVXZWVrSW5mbygpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gKFxuICAgICAgdHlwZW9mIEludGwgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICEhSW50bC5Mb2NhbGUgJiZcbiAgICAgIChcIndlZWtJbmZvXCIgaW4gSW50bC5Mb2NhbGUucHJvdG90eXBlIHx8IFwiZ2V0V2Vla0luZm9cIiBpbiBJbnRsLkxvY2FsZS5wcm90b3R5cGUpXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBPQkpFQ1RTIEFORCBBUlJBWVNcblxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlQXJyYXkodGhpbmcpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpbmcpID8gdGhpbmcgOiBbdGhpbmddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmVzdEJ5KGFyciwgYnksIGNvbXBhcmUpIHtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBhcnIucmVkdWNlKChiZXN0LCBuZXh0KSA9PiB7XG4gICAgY29uc3QgcGFpciA9IFtieShuZXh0KSwgbmV4dF07XG4gICAgaWYgKCFiZXN0KSB7XG4gICAgICByZXR1cm4gcGFpcjtcbiAgICB9IGVsc2UgaWYgKGNvbXBhcmUoYmVzdFswXSwgcGFpclswXSkgPT09IGJlc3RbMF0pIHtcbiAgICAgIHJldHVybiBiZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFpcjtcbiAgICB9XG4gIH0sIG51bGwpWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGljayhvYmosIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKChhLCBrKSA9PiB7XG4gICAgYVtrXSA9IG9ialtrXTtcbiAgICByZXR1cm4gYTtcbiAgfSwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlV2Vla1NldHRpbmdzKHNldHRpbmdzKSB7XG4gIGlmIChzZXR0aW5ncyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNldHRpbmdzICE9PSBcIm9iamVjdFwiKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiV2VlayBzZXR0aW5ncyBtdXN0IGJlIGFuIG9iamVjdFwiKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoXG4gICAgICAhaW50ZWdlckJldHdlZW4oc2V0dGluZ3MuZmlyc3REYXksIDEsIDcpIHx8XG4gICAgICAhaW50ZWdlckJldHdlZW4oc2V0dGluZ3MubWluaW1hbERheXMsIDEsIDcpIHx8XG4gICAgICAhQXJyYXkuaXNBcnJheShzZXR0aW5ncy53ZWVrZW5kKSB8fFxuICAgICAgc2V0dGluZ3Mud2Vla2VuZC5zb21lKCh2KSA9PiAhaW50ZWdlckJldHdlZW4odiwgMSwgNykpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJJbnZhbGlkIHdlZWsgc2V0dGluZ3NcIik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBmaXJzdERheTogc2V0dGluZ3MuZmlyc3REYXksXG4gICAgICBtaW5pbWFsRGF5czogc2V0dGluZ3MubWluaW1hbERheXMsXG4gICAgICB3ZWVrZW5kOiBBcnJheS5mcm9tKHNldHRpbmdzLndlZWtlbmQpLFxuICAgIH07XG4gIH1cbn1cblxuLy8gTlVNQkVSUyBBTkQgU1RSSU5HU1xuXG5leHBvcnQgZnVuY3Rpb24gaW50ZWdlckJldHdlZW4odGhpbmcsIGJvdHRvbSwgdG9wKSB7XG4gIHJldHVybiBpc0ludGVnZXIodGhpbmcpICYmIHRoaW5nID49IGJvdHRvbSAmJiB0aGluZyA8PSB0b3A7XG59XG5cbi8vIHggJSBuIGJ1dCB0YWtlcyB0aGUgc2lnbiBvZiBuIGluc3RlYWQgb2YgeFxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yTW9kKHgsIG4pIHtcbiAgcmV0dXJuIHggLSBuICogTWF0aC5mbG9vcih4IC8gbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRTdGFydChpbnB1dCwgbiA9IDIpIHtcbiAgY29uc3QgaXNOZWcgPSBpbnB1dCA8IDA7XG4gIGxldCBwYWRkZWQ7XG4gIGlmIChpc05lZykge1xuICAgIHBhZGRlZCA9IFwiLVwiICsgKFwiXCIgKyAtaW5wdXQpLnBhZFN0YXJ0KG4sIFwiMFwiKTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkZWQgPSAoXCJcIiArIGlucHV0KS5wYWRTdGFydChuLCBcIjBcIik7XG4gIH1cbiAgcmV0dXJuIHBhZGRlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW50ZWdlcihzdHJpbmcpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHN0cmluZykgfHwgc3RyaW5nID09PSBudWxsIHx8IHN0cmluZyA9PT0gXCJcIikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgMTApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZsb2F0aW5nKHN0cmluZykge1xuICBpZiAoaXNVbmRlZmluZWQoc3RyaW5nKSB8fCBzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHJpbmcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1pbGxpcyhmcmFjdGlvbikge1xuICAvLyBSZXR1cm4gdW5kZWZpbmVkIChpbnN0ZWFkIG9mIDApIGluIHRoZXNlIGNhc2VzLCB3aGVyZSBmcmFjdGlvbiBpcyBub3Qgc2V0XG4gIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvbikgfHwgZnJhY3Rpb24gPT09IG51bGwgfHwgZnJhY3Rpb24gPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGYgPSBwYXJzZUZsb2F0KFwiMC5cIiArIGZyYWN0aW9uKSAqIDEwMDA7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kVG8obnVtYmVyLCBkaWdpdHMsIHRvd2FyZFplcm8gPSBmYWxzZSkge1xuICBjb25zdCBmYWN0b3IgPSAxMCAqKiBkaWdpdHMsXG4gICAgcm91bmRlciA9IHRvd2FyZFplcm8gPyBNYXRoLnRydW5jIDogTWF0aC5yb3VuZDtcbiAgcmV0dXJuIHJvdW5kZXIobnVtYmVyICogZmFjdG9yKSAvIGZhY3Rvcjtcbn1cblxuLy8gREFURSBCQVNJQ1NcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICBjb25zdCBtb2RNb250aCA9IGZsb29yTW9kKG1vbnRoIC0gMSwgMTIpICsgMSxcbiAgICBtb2RZZWFyID0geWVhciArIChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuXG4gIGlmIChtb2RNb250aCA9PT0gMikge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKG1vZFllYXIpID8gMjkgOiAyODtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gWzMxLCBudWxsLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV1bbW9kTW9udGggLSAxXTtcbiAgfVxufVxuXG4vLyBjb252ZXJ0IGEgY2FsZW5kYXIgb2JqZWN0IHRvIGEgbG9jYWwgdGltZXN0YW1wIChlcG9jaCwgYnV0IHdpdGggdGhlIG9mZnNldCBiYWtlZCBpbilcbmV4cG9ydCBmdW5jdGlvbiBvYmpUb0xvY2FsVFMob2JqKSB7XG4gIGxldCBkID0gRGF0ZS5VVEMoXG4gICAgb2JqLnllYXIsXG4gICAgb2JqLm1vbnRoIC0gMSxcbiAgICBvYmouZGF5LFxuICAgIG9iai5ob3VyLFxuICAgIG9iai5taW51dGUsXG4gICAgb2JqLnNlY29uZCxcbiAgICBvYmoubWlsbGlzZWNvbmRcbiAgKTtcblxuICAvLyBmb3IgbGVnYWN5IHJlYXNvbnMsIHllYXJzIGJldHdlZW4gMCBhbmQgOTkgYXJlIGludGVycHJldGVkIGFzIDE5WFg7IHJldmVydCB0aGF0XG4gIGlmIChvYmoueWVhciA8IDEwMCAmJiBvYmoueWVhciA+PSAwKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQpO1xuICAgIC8vIHNldCB0aGUgbW9udGggYW5kIGRheSBhZ2FpbiwgdGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB5ZWFyIDIwMDAgaXMgYSBsZWFwIHllYXIsIGJ1dCB5ZWFyIDEwMCBpcyBub3RcbiAgICAvLyBzbyBpZiBvYmoueWVhciBpcyBpbiA5OSwgYnV0IG9iai5kYXkgbWFrZXMgaXQgcm9sbCBvdmVyIGludG8geWVhciAxMDAsXG4gICAgLy8gdGhlIGNhbGN1bGF0aW9ucyBkb25lIGJ5IERhdGUuVVRDIGFyZSB1c2luZyB5ZWFyIDIwMDAgLSB3aGljaCBpcyBpbmNvcnJlY3RcbiAgICBkLnNldFVUQ0Z1bGxZZWFyKG9iai55ZWFyLCBvYmoubW9udGggLSAxLCBvYmouZGF5KTtcbiAgfVxuICByZXR1cm4gK2Q7XG59XG5cbi8vIGFkYXB0ZWQgZnJvbSBtb21lbnQuanM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2Jsb2IvMDAwYWMxODAwZTYyMGY3NzBmNGViMzFiNWFlOTA4ZjYxNjdiMGFiMi9zcmMvbGliL3VuaXRzL3dlZWstY2FsZW5kYXItdXRpbHMuanNcbmZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKSB7XG4gIGNvbnN0IGZ3ZGx3ID0gaXNvV2Vla2RheVRvTG9jYWwoZGF5T2ZXZWVrKHllYXIsIDEsIG1pbkRheXNJbkZpcnN0V2VlayksIHN0YXJ0T2ZXZWVrKTtcbiAgcmV0dXJuIC1md2RsdyArIG1pbkRheXNJbkZpcnN0V2VlayAtIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWVrc0luV2Vla1llYXIod2Vla1llYXIsIG1pbkRheXNJbkZpcnN0V2VlayA9IDQsIHN0YXJ0T2ZXZWVrID0gMSkge1xuICBjb25zdCB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHdlZWtZZWFyLCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKTtcbiAgY29uc3Qgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQod2Vla1llYXIgKyAxLCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKTtcbiAgcmV0dXJuIChkYXlzSW5ZZWFyKHdlZWtZZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhcikge1xuICBpZiAoeWVhciA+IDk5KSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSByZXR1cm4geWVhciA+IFNldHRpbmdzLnR3b0RpZ2l0Q3V0b2ZmWWVhciA/IDE5MDAgKyB5ZWFyIDogMjAwMCArIHllYXI7XG59XG5cbi8vIFBBUlNJTkdcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWm9uZUluZm8odHMsIG9mZnNldEZvcm1hdCwgbG9jYWxlLCB0aW1lWm9uZSA9IG51bGwpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKSxcbiAgICBpbnRsT3B0cyA9IHtcbiAgICAgIGhvdXJDeWNsZTogXCJoMjNcIixcbiAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgZGF5OiBcIjItZGlnaXRcIixcbiAgICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgICAgbWludXRlOiBcIjItZGlnaXRcIixcbiAgICB9O1xuXG4gIGlmICh0aW1lWm9uZSkge1xuICAgIGludGxPcHRzLnRpbWVab25lID0gdGltZVpvbmU7XG4gIH1cblxuICBjb25zdCBtb2RpZmllZCA9IHsgdGltZVpvbmVOYW1lOiBvZmZzZXRGb3JtYXQsIC4uLmludGxPcHRzIH07XG5cbiAgY29uc3QgcGFyc2VkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBtb2RpZmllZClcbiAgICAuZm9ybWF0VG9QYXJ0cyhkYXRlKVxuICAgIC5maW5kKChtKSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0aW1lem9uZW5hbWVcIik7XG4gIHJldHVybiBwYXJzZWQgPyBwYXJzZWQudmFsdWUgOiBudWxsO1xufVxuXG4vLyBzaWduZWRPZmZzZXQoJy01JywgJzMwJykgLT4gLTMzMFxuZXhwb3J0IGZ1bmN0aW9uIHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpIHtcbiAgbGV0IG9mZkhvdXIgPSBwYXJzZUludChvZmZIb3VyU3RyLCAxMCk7XG5cbiAgLy8gZG9uJ3QgfHwgdGhpcyBiZWNhdXNlIHdlIHdhbnQgdG8gcHJlc2VydmUgLTBcbiAgaWYgKE51bWJlci5pc05hTihvZmZIb3VyKSkge1xuICAgIG9mZkhvdXIgPSAwO1xuICB9XG5cbiAgY29uc3Qgb2ZmTWluID0gcGFyc2VJbnQob2ZmTWludXRlU3RyLCAxMCkgfHwgMCxcbiAgICBvZmZNaW5TaWduZWQgPSBvZmZIb3VyIDwgMCB8fCBPYmplY3QuaXMob2ZmSG91ciwgLTApID8gLW9mZk1pbiA6IG9mZk1pbjtcbiAgcmV0dXJuIG9mZkhvdXIgKiA2MCArIG9mZk1pblNpZ25lZDtcbn1cblxuLy8gQ09FUkNJT05cblxuZXhwb3J0IGZ1bmN0aW9uIGFzTnVtYmVyKHZhbHVlKSB7XG4gIGNvbnN0IG51bWVyaWNWYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlID09PSBcIlwiIHx8IE51bWJlci5pc05hTihudW1lcmljVmFsdWUpKVxuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCB1bml0IHZhbHVlICR7dmFsdWV9YCk7XG4gIHJldHVybiBudW1lcmljVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVyKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSB7fTtcbiAgZm9yIChjb25zdCB1IGluIG9iaikge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShvYmosIHUpKSB7XG4gICAgICBjb25zdCB2ID0gb2JqW3VdO1xuICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplcih1KV0gPSBhc051bWJlcih2KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgdmFsdWUgYXMgYSBzdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBvZmZzZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgLSBXaGF0IHN0eWxlIG9mIG9mZnNldCB0byByZXR1cm4uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgQWNjZXB0cyAnbmFycm93JywgJ3Nob3J0Jywgb3IgJ3RlY2hpZScuIFJldHVybmluZyAnKzYnLCAnKzA2OjAwJywgb3IgJyswNjAwJyByZXNwZWN0aXZlbHlcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE9mZnNldChvZmZzZXQsIGZvcm1hdCkge1xuICBjb25zdCBob3VycyA9IE1hdGgudHJ1bmMoTWF0aC5hYnMob2Zmc2V0IC8gNjApKSxcbiAgICBtaW51dGVzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQgJSA2MCkpLFxuICAgIHNpZ24gPSBvZmZzZXQgPj0gMCA/IFwiK1wiIDogXCItXCI7XG5cbiAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgIHJldHVybiBgJHtzaWdufSR7cGFkU3RhcnQoaG91cnMsIDIpfToke3BhZFN0YXJ0KG1pbnV0ZXMsIDIpfWA7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIGAke3NpZ259JHtob3Vyc30ke21pbnV0ZXMgPiAwID8gYDoke21pbnV0ZXN9YCA6IFwiXCJ9YDtcbiAgICBjYXNlIFwidGVjaGllXCI6XG4gICAgICByZXR1cm4gYCR7c2lnbn0ke3BhZFN0YXJ0KGhvdXJzLCAyKX0ke3BhZFN0YXJ0KG1pbnV0ZXMsIDIpfWA7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBWYWx1ZSBmb3JtYXQgJHtmb3JtYXR9IGlzIG91dCBvZiByYW5nZSBmb3IgcHJvcGVydHkgZm9ybWF0YCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVPYmplY3Qob2JqKSB7XG4gIHJldHVybiBwaWNrKG9iaiwgW1wiaG91clwiLCBcIm1pbnV0ZVwiLCBcInNlY29uZFwiLCBcIm1pbGxpc2Vjb25kXCJdKTtcbn1cbiIsICJpbXBvcnQgKiBhcyBGb3JtYXRzIGZyb20gXCIuL2Zvcm1hdHMuanNcIjtcbmltcG9ydCB7IHBpY2sgfSBmcm9tIFwiLi91dGlsLmpzXCI7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmopIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgT2JqZWN0LmtleXMob2JqKS5zb3J0KCkpO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZXhwb3J0IGNvbnN0IG1vbnRoc0xvbmcgPSBbXG4gIFwiSmFudWFyeVwiLFxuICBcIkZlYnJ1YXJ5XCIsXG4gIFwiTWFyY2hcIixcbiAgXCJBcHJpbFwiLFxuICBcIk1heVwiLFxuICBcIkp1bmVcIixcbiAgXCJKdWx5XCIsXG4gIFwiQXVndXN0XCIsXG4gIFwiU2VwdGVtYmVyXCIsXG4gIFwiT2N0b2JlclwiLFxuICBcIk5vdmVtYmVyXCIsXG4gIFwiRGVjZW1iZXJcIixcbl07XG5cbmV4cG9ydCBjb25zdCBtb250aHNTaG9ydCA9IFtcbiAgXCJKYW5cIixcbiAgXCJGZWJcIixcbiAgXCJNYXJcIixcbiAgXCJBcHJcIixcbiAgXCJNYXlcIixcbiAgXCJKdW5cIixcbiAgXCJKdWxcIixcbiAgXCJBdWdcIixcbiAgXCJTZXBcIixcbiAgXCJPY3RcIixcbiAgXCJOb3ZcIixcbiAgXCJEZWNcIixcbl07XG5cbmV4cG9ydCBjb25zdCBtb250aHNOYXJyb3cgPSBbXCJKXCIsIFwiRlwiLCBcIk1cIiwgXCJBXCIsIFwiTVwiLCBcIkpcIiwgXCJKXCIsIFwiQVwiLCBcIlNcIiwgXCJPXCIsIFwiTlwiLCBcIkRcIl07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb250aHMobGVuZ3RoKSB7XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFsuLi5tb250aHNOYXJyb3ddO1xuICAgIGNhc2UgXCJzaG9ydFwiOlxuICAgICAgcmV0dXJuIFsuLi5tb250aHNTaG9ydF07XG4gICAgY2FzZSBcImxvbmdcIjpcbiAgICAgIHJldHVybiBbLi4ubW9udGhzTG9uZ107XG4gICAgY2FzZSBcIm51bWVyaWNcIjpcbiAgICAgIHJldHVybiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIiwgXCIxMFwiLCBcIjExXCIsIFwiMTJcIl07XG4gICAgY2FzZSBcIjItZGlnaXRcIjpcbiAgICAgIHJldHVybiBbXCIwMVwiLCBcIjAyXCIsIFwiMDNcIiwgXCIwNFwiLCBcIjA1XCIsIFwiMDZcIiwgXCIwN1wiLCBcIjA4XCIsIFwiMDlcIiwgXCIxMFwiLCBcIjExXCIsIFwiMTJcIl07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB3ZWVrZGF5c0xvbmcgPSBbXG4gIFwiTW9uZGF5XCIsXG4gIFwiVHVlc2RheVwiLFxuICBcIldlZG5lc2RheVwiLFxuICBcIlRodXJzZGF5XCIsXG4gIFwiRnJpZGF5XCIsXG4gIFwiU2F0dXJkYXlcIixcbiAgXCJTdW5kYXlcIixcbl07XG5cbmV4cG9ydCBjb25zdCB3ZWVrZGF5c1Nob3J0ID0gW1wiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCIsIFwiU3VuXCJdO1xuXG5leHBvcnQgY29uc3Qgd2Vla2RheXNOYXJyb3cgPSBbXCJNXCIsIFwiVFwiLCBcIldcIiwgXCJUXCIsIFwiRlwiLCBcIlNcIiwgXCJTXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gd2Vla2RheXMobGVuZ3RoKSB7XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c05hcnJvd107XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLndlZWtkYXlzU2hvcnRdO1xuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gWy4uLndlZWtkYXlzTG9uZ107XG4gICAgY2FzZSBcIm51bWVyaWNcIjpcbiAgICAgIHJldHVybiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCJdO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbWVyaWRpZW1zID0gW1wiQU1cIiwgXCJQTVwiXTtcblxuZXhwb3J0IGNvbnN0IGVyYXNMb25nID0gW1wiQmVmb3JlIENocmlzdFwiLCBcIkFubm8gRG9taW5pXCJdO1xuXG5leHBvcnQgY29uc3QgZXJhc1Nob3J0ID0gW1wiQkNcIiwgXCJBRFwiXTtcblxuZXhwb3J0IGNvbnN0IGVyYXNOYXJyb3cgPSBbXCJCXCIsIFwiQVwiXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGVyYXMobGVuZ3RoKSB7XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFsuLi5lcmFzTmFycm93XTtcbiAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgIHJldHVybiBbLi4uZXJhc1Nob3J0XTtcbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFsuLi5lcmFzTG9uZ107XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJpZGllbUZvckRhdGVUaW1lKGR0KSB7XG4gIHJldHVybiBtZXJpZGllbXNbZHQuaG91ciA8IDEyID8gMCA6IDFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2Vla2RheUZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIHdlZWtkYXlzKGxlbmd0aClbZHQud2Vla2RheSAtIDFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9udGhGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSB7XG4gIHJldHVybiBtb250aHMobGVuZ3RoKVtkdC5tb250aCAtIDFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJhRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gZXJhcyhsZW5ndGgpW2R0LnllYXIgPCAwID8gMCA6IDFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmVUaW1lKHVuaXQsIGNvdW50LCBudW1lcmljID0gXCJhbHdheXNcIiwgbmFycm93ID0gZmFsc2UpIHtcbiAgY29uc3QgdW5pdHMgPSB7XG4gICAgeWVhcnM6IFtcInllYXJcIiwgXCJ5ci5cIl0sXG4gICAgcXVhcnRlcnM6IFtcInF1YXJ0ZXJcIiwgXCJxdHIuXCJdLFxuICAgIG1vbnRoczogW1wibW9udGhcIiwgXCJtby5cIl0sXG4gICAgd2Vla3M6IFtcIndlZWtcIiwgXCJ3ay5cIl0sXG4gICAgZGF5czogW1wiZGF5XCIsIFwiZGF5XCIsIFwiZGF5c1wiXSxcbiAgICBob3VyczogW1wiaG91clwiLCBcImhyLlwiXSxcbiAgICBtaW51dGVzOiBbXCJtaW51dGVcIiwgXCJtaW4uXCJdLFxuICAgIHNlY29uZHM6IFtcInNlY29uZFwiLCBcInNlYy5cIl0sXG4gIH07XG5cbiAgY29uc3QgbGFzdGFibGUgPSBbXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCJdLmluZGV4T2YodW5pdCkgPT09IC0xO1xuXG4gIGlmIChudW1lcmljID09PSBcImF1dG9cIiAmJiBsYXN0YWJsZSkge1xuICAgIGNvbnN0IGlzRGF5ID0gdW5pdCA9PT0gXCJkYXlzXCI7XG4gICAgc3dpdGNoIChjb3VudCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInRvbW9ycm93XCIgOiBgbmV4dCAke3VuaXRzW3VuaXRdWzBdfWA7XG4gICAgICBjYXNlIC0xOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInllc3RlcmRheVwiIDogYGxhc3QgJHt1bml0c1t1bml0XVswXX1gO1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInRvZGF5XCIgOiBgdGhpcyAke3VuaXRzW3VuaXRdWzBdfWA7XG4gICAgICBkZWZhdWx0OiAvLyBmYWxsIHRocm91Z2hcbiAgICB9XG4gIH1cblxuICBjb25zdCBpc0luUGFzdCA9IE9iamVjdC5pcyhjb3VudCwgLTApIHx8IGNvdW50IDwgMCxcbiAgICBmbXRWYWx1ZSA9IE1hdGguYWJzKGNvdW50KSxcbiAgICBzaW5ndWxhciA9IGZtdFZhbHVlID09PSAxLFxuICAgIGxpbFVuaXRzID0gdW5pdHNbdW5pdF0sXG4gICAgZm10VW5pdCA9IG5hcnJvd1xuICAgICAgPyBzaW5ndWxhclxuICAgICAgICA/IGxpbFVuaXRzWzFdXG4gICAgICAgIDogbGlsVW5pdHNbMl0gfHwgbGlsVW5pdHNbMV1cbiAgICAgIDogc2luZ3VsYXJcbiAgICAgID8gdW5pdHNbdW5pdF1bMF1cbiAgICAgIDogdW5pdDtcbiAgcmV0dXJuIGlzSW5QYXN0ID8gYCR7Zm10VmFsdWV9ICR7Zm10VW5pdH0gYWdvYCA6IGBpbiAke2ZtdFZhbHVlfSAke2ZtdFVuaXR9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFN0cmluZyhrbm93bkZvcm1hdCkge1xuICAvLyB0aGVzZSBhbGwgaGF2ZSB0aGUgb2Zmc2V0cyByZW1vdmVkIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhlbVxuICAvLyB3aXRob3V0IGFsbCB0aGUgaW50bCBzdHVmZiB0aGlzIGlzIGJhY2tmaWxsaW5nXG4gIGNvbnN0IGZpbHRlcmVkID0gcGljayhrbm93bkZvcm1hdCwgW1xuICAgICAgXCJ3ZWVrZGF5XCIsXG4gICAgICBcImVyYVwiLFxuICAgICAgXCJ5ZWFyXCIsXG4gICAgICBcIm1vbnRoXCIsXG4gICAgICBcImRheVwiLFxuICAgICAgXCJob3VyXCIsXG4gICAgICBcIm1pbnV0ZVwiLFxuICAgICAgXCJzZWNvbmRcIixcbiAgICAgIFwidGltZVpvbmVOYW1lXCIsXG4gICAgICBcImhvdXJDeWNsZVwiLFxuICAgIF0pLFxuICAgIGtleSA9IHN0cmluZ2lmeShmaWx0ZXJlZCksXG4gICAgZGF0ZVRpbWVIdWdlID0gXCJFRUVFLCBMTExMIGQsIHl5eXksIGg6bW0gYVwiO1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURV9TSE9SVCk6XG4gICAgICByZXR1cm4gXCJNL2QveXl5eVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURV9NRUQpOlxuICAgICAgcmV0dXJuIFwiTExMIGQsIHl5eXlcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVfTUVEX1dJVEhfV0VFS0RBWSk6XG4gICAgICByZXR1cm4gXCJFRUUsIExMTCBkLCB5eXl5XCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5EQVRFX0ZVTEwpOlxuICAgICAgcmV0dXJuIFwiTExMTCBkLCB5eXl5XCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5EQVRFX0hVR0UpOlxuICAgICAgcmV0dXJuIFwiRUVFRSwgTExMTCBkLCB5eXl5XCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5USU1FX1NJTVBMRSk6XG4gICAgICByZXR1cm4gXCJoOm1tIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLlRJTUVfV0lUSF9TRUNPTkRTKTpcbiAgICAgIHJldHVybiBcImg6bW06c3MgYVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuVElNRV9XSVRIX1NIT1JUX09GRlNFVCk6XG4gICAgICByZXR1cm4gXCJoOm1tIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLlRJTUVfV0lUSF9MT05HX09GRlNFVCk6XG4gICAgICByZXR1cm4gXCJoOm1tIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLlRJTUVfMjRfU0lNUExFKTpcbiAgICAgIHJldHVybiBcIkhIOm1tXCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5USU1FXzI0X1dJVEhfU0VDT05EUyk6XG4gICAgICByZXR1cm4gXCJISDptbTpzc1wiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCk6XG4gICAgICByZXR1cm4gXCJISDptbVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUKTpcbiAgICAgIHJldHVybiBcIkhIOm1tXCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5EQVRFVElNRV9TSE9SVCk6XG4gICAgICByZXR1cm4gXCJNL2QveXl5eSwgaDptbSBhXCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5EQVRFVElNRV9NRUQpOlxuICAgICAgcmV0dXJuIFwiTExMIGQsIHl5eXksIGg6bW0gYVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURVRJTUVfRlVMTCk6XG4gICAgICByZXR1cm4gXCJMTExMIGQsIHl5eXksIGg6bW0gYVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURVRJTUVfSFVHRSk6XG4gICAgICByZXR1cm4gZGF0ZVRpbWVIdWdlO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTKTpcbiAgICAgIHJldHVybiBcIk0vZC95eXl5LCBoOm1tOnNzIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMpOlxuICAgICAgcmV0dXJuIFwiTExMIGQsIHl5eXksIGg6bW06c3MgYVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWSk6XG4gICAgICByZXR1cm4gXCJFRUUsIGQgTExMIHl5eXksIGg6bW0gYVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMpOlxuICAgICAgcmV0dXJuIFwiTExMTCBkLCB5eXl5LCBoOm1tOnNzIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTKTpcbiAgICAgIHJldHVybiBcIkVFRUUsIExMTEwgZCwgeXl5eSwgaDptbTpzcyBhXCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkYXRlVGltZUh1Z2U7XG4gIH1cbn1cbiIsICJpbXBvcnQgKiBhcyBFbmdsaXNoIGZyb20gXCIuL2VuZ2xpc2guanNcIjtcbmltcG9ydCAqIGFzIEZvcm1hdHMgZnJvbSBcIi4vZm9ybWF0cy5qc1wiO1xuaW1wb3J0IHsgcGFkU3RhcnQgfSBmcm9tIFwiLi91dGlsLmpzXCI7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVRva2VucyhzcGxpdHMsIHRva2VuVG9TdHJpbmcpIHtcbiAgbGV0IHMgPSBcIlwiO1xuICBmb3IgKGNvbnN0IHRva2VuIG9mIHNwbGl0cykge1xuICAgIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgICBzICs9IHRva2VuLnZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyArPSB0b2tlblRvU3RyaW5nKHRva2VuLnZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzO1xufVxuXG5jb25zdCBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzID0ge1xuICBEOiBGb3JtYXRzLkRBVEVfU0hPUlQsXG4gIEREOiBGb3JtYXRzLkRBVEVfTUVELFxuICBEREQ6IEZvcm1hdHMuREFURV9GVUxMLFxuICBEREREOiBGb3JtYXRzLkRBVEVfSFVHRSxcbiAgdDogRm9ybWF0cy5USU1FX1NJTVBMRSxcbiAgdHQ6IEZvcm1hdHMuVElNRV9XSVRIX1NFQ09ORFMsXG4gIHR0dDogRm9ybWF0cy5USU1FX1dJVEhfU0hPUlRfT0ZGU0VULFxuICB0dHR0OiBGb3JtYXRzLlRJTUVfV0lUSF9MT05HX09GRlNFVCxcbiAgVDogRm9ybWF0cy5USU1FXzI0X1NJTVBMRSxcbiAgVFQ6IEZvcm1hdHMuVElNRV8yNF9XSVRIX1NFQ09ORFMsXG4gIFRUVDogRm9ybWF0cy5USU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VULFxuICBUVFRUOiBGb3JtYXRzLlRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCxcbiAgZjogRm9ybWF0cy5EQVRFVElNRV9TSE9SVCxcbiAgZmY6IEZvcm1hdHMuREFURVRJTUVfTUVELFxuICBmZmY6IEZvcm1hdHMuREFURVRJTUVfRlVMTCxcbiAgZmZmZjogRm9ybWF0cy5EQVRFVElNRV9IVUdFLFxuICBGOiBGb3JtYXRzLkRBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyxcbiAgRkY6IEZvcm1hdHMuREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyxcbiAgRkZGOiBGb3JtYXRzLkRBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTLFxuICBGRkZGOiBGb3JtYXRzLkRBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTLFxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1hdHRlciB7XG4gIHN0YXRpYyBjcmVhdGUobG9jYWxlLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IEZvcm1hdHRlcihsb2NhbGUsIG9wdHMpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlRm9ybWF0KGZtdCkge1xuICAgIC8vIHdoaXRlLXNwYWNlIGlzIGFsd2F5cyBjb25zaWRlcmVkIGEgbGl0ZXJhbCBpbiB1c2VyLXByb3ZpZGVkIGZvcm1hdHNcbiAgICAvLyB0aGUgXCIgXCIgdG9rZW4gaGFzIGEgc3BlY2lhbCBtZWFuaW5nIChzZWUgdW5pdEZvclRva2VuKVxuXG4gICAgbGV0IGN1cnJlbnQgPSBudWxsLFxuICAgICAgY3VycmVudEZ1bGwgPSBcIlwiLFxuICAgICAgYnJhY2tldGVkID0gZmFsc2U7XG4gICAgY29uc3Qgc3BsaXRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSBmbXQuY2hhckF0KGkpO1xuICAgICAgaWYgKGMgPT09IFwiJ1wiKSB7XG4gICAgICAgIGlmIChjdXJyZW50RnVsbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3BsaXRzLnB1c2goeyBsaXRlcmFsOiBicmFja2V0ZWQgfHwgL15cXHMrJC8udGVzdChjdXJyZW50RnVsbCksIHZhbDogY3VycmVudEZ1bGwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgIGN1cnJlbnRGdWxsID0gXCJcIjtcbiAgICAgICAgYnJhY2tldGVkID0gIWJyYWNrZXRlZDtcbiAgICAgIH0gZWxzZSBpZiAoYnJhY2tldGVkKSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2UgaWYgKGMgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgY3VycmVudEZ1bGwgKz0gYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjdXJyZW50RnVsbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3BsaXRzLnB1c2goeyBsaXRlcmFsOiAvXlxccyskLy50ZXN0KGN1cnJlbnRGdWxsKSwgdmFsOiBjdXJyZW50RnVsbCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50RnVsbCA9IGM7XG4gICAgICAgIGN1cnJlbnQgPSBjO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50RnVsbC5sZW5ndGggPiAwKSB7XG4gICAgICBzcGxpdHMucHVzaCh7IGxpdGVyYWw6IGJyYWNrZXRlZCB8fCAvXlxccyskLy50ZXN0KGN1cnJlbnRGdWxsKSwgdmFsOiBjdXJyZW50RnVsbCB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3BsaXRzO1xuICB9XG5cbiAgc3RhdGljIG1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHModG9rZW4pIHtcbiAgICByZXR1cm4gbWFjcm9Ub2tlblRvRm9ybWF0T3B0c1t0b2tlbl07XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihsb2NhbGUsIGZvcm1hdE9wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSBmb3JtYXRPcHRzO1xuICAgIHRoaXMubG9jID0gbG9jYWxlO1xuICAgIHRoaXMuc3lzdGVtTG9jID0gbnVsbDtcbiAgfVxuXG4gIGZvcm1hdFdpdGhTeXN0ZW1EZWZhdWx0KGR0LCBvcHRzKSB7XG4gICAgaWYgKHRoaXMuc3lzdGVtTG9jID09PSBudWxsKSB7XG4gICAgICB0aGlzLnN5c3RlbUxvYyA9IHRoaXMubG9jLnJlZGVmYXVsdFRvU3lzdGVtKCk7XG4gICAgfVxuICAgIGNvbnN0IGRmID0gdGhpcy5zeXN0ZW1Mb2MuZHRGb3JtYXR0ZXIoZHQsIHsgLi4udGhpcy5vcHRzLCAuLi5vcHRzIH0pO1xuICAgIHJldHVybiBkZi5mb3JtYXQoKTtcbiAgfVxuXG4gIGR0Rm9ybWF0dGVyKGR0LCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5sb2MuZHRGb3JtYXR0ZXIoZHQsIHsgLi4udGhpcy5vcHRzLCAuLi5vcHRzIH0pO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWUoZHQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5kdEZvcm1hdHRlcihkdCwgb3B0cykuZm9ybWF0KCk7XG4gIH1cblxuICBmb3JtYXREYXRlVGltZVBhcnRzKGR0LCBvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuZHRGb3JtYXR0ZXIoZHQsIG9wdHMpLmZvcm1hdFRvUGFydHMoKTtcbiAgfVxuXG4gIGZvcm1hdEludGVydmFsKGludGVydmFsLCBvcHRzKSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmR0Rm9ybWF0dGVyKGludGVydmFsLnN0YXJ0LCBvcHRzKTtcbiAgICByZXR1cm4gZGYuZHRmLmZvcm1hdFJhbmdlKGludGVydmFsLnN0YXJ0LnRvSlNEYXRlKCksIGludGVydmFsLmVuZC50b0pTRGF0ZSgpKTtcbiAgfVxuXG4gIHJlc29sdmVkT3B0aW9ucyhkdCwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLmR0Rm9ybWF0dGVyKGR0LCBvcHRzKS5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgfVxuXG4gIG51bShuLCBwID0gMCkge1xuICAgIC8vIHdlIGdldCBzb21lIHBlcmYgb3V0IG9mIGRvaW5nIHRoaXMgaGVyZSwgYW5ub3lpbmdseVxuICAgIGlmICh0aGlzLm9wdHMuZm9yY2VTaW1wbGUpIHtcbiAgICAgIHJldHVybiBwYWRTdGFydChuLCBwKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRzID0geyAuLi50aGlzLm9wdHMgfTtcblxuICAgIGlmIChwID4gMCkge1xuICAgICAgb3B0cy5wYWRUbyA9IHA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9jLm51bWJlckZvcm1hdHRlcihvcHRzKS5mb3JtYXQobik7XG4gIH1cblxuICBmb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZtdCkge1xuICAgIGNvbnN0IGtub3duRW5nbGlzaCA9IHRoaXMubG9jLmxpc3RpbmdNb2RlKCkgPT09IFwiZW5cIixcbiAgICAgIHVzZURhdGVUaW1lRm9ybWF0dGVyID0gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgJiYgdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgIT09IFwiZ3JlZ29yeVwiLFxuICAgICAgc3RyaW5nID0gKG9wdHMsIGV4dHJhY3QpID0+IHRoaXMubG9jLmV4dHJhY3QoZHQsIG9wdHMsIGV4dHJhY3QpLFxuICAgICAgZm9ybWF0T2Zmc2V0ID0gKG9wdHMpID0+IHtcbiAgICAgICAgaWYgKGR0LmlzT2Zmc2V0Rml4ZWQgJiYgZHQub2Zmc2V0ID09PSAwICYmIG9wdHMuYWxsb3daKSB7XG4gICAgICAgICAgcmV0dXJuIFwiWlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGR0LmlzVmFsaWQgPyBkdC56b25lLmZvcm1hdE9mZnNldChkdC50cywgb3B0cy5mb3JtYXQpIDogXCJcIjtcbiAgICAgIH0sXG4gICAgICBtZXJpZGllbSA9ICgpID0+XG4gICAgICAgIGtub3duRW5nbGlzaFxuICAgICAgICAgID8gRW5nbGlzaC5tZXJpZGllbUZvckRhdGVUaW1lKGR0KVxuICAgICAgICAgIDogc3RyaW5nKHsgaG91cjogXCJudW1lcmljXCIsIGhvdXJDeWNsZTogXCJoMTJcIiB9LCBcImRheXBlcmlvZFwiKSxcbiAgICAgIG1vbnRoID0gKGxlbmd0aCwgc3RhbmRhbG9uZSkgPT5cbiAgICAgICAga25vd25FbmdsaXNoXG4gICAgICAgICAgPyBFbmdsaXNoLm1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aClcbiAgICAgICAgICA6IHN0cmluZyhzdGFuZGFsb25lID8geyBtb250aDogbGVuZ3RoIH0gOiB7IG1vbnRoOiBsZW5ndGgsIGRheTogXCJudW1lcmljXCIgfSwgXCJtb250aFwiKSxcbiAgICAgIHdlZWtkYXkgPSAobGVuZ3RoLCBzdGFuZGFsb25lKSA9PlxuICAgICAgICBrbm93bkVuZ2xpc2hcbiAgICAgICAgICA/IEVuZ2xpc2gud2Vla2RheUZvckRhdGVUaW1lKGR0LCBsZW5ndGgpXG4gICAgICAgICAgOiBzdHJpbmcoXG4gICAgICAgICAgICAgIHN0YW5kYWxvbmUgPyB7IHdlZWtkYXk6IGxlbmd0aCB9IDogeyB3ZWVrZGF5OiBsZW5ndGgsIG1vbnRoOiBcImxvbmdcIiwgZGF5OiBcIm51bWVyaWNcIiB9LFxuICAgICAgICAgICAgICBcIndlZWtkYXlcIlxuICAgICAgICAgICAgKSxcbiAgICAgIG1heWJlTWFjcm8gPSAodG9rZW4pID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0T3B0cyA9IEZvcm1hdHRlci5tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuKTtcbiAgICAgICAgaWYgKGZvcm1hdE9wdHMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgZm9ybWF0T3B0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZXJhID0gKGxlbmd0aCkgPT5cbiAgICAgICAga25vd25FbmdsaXNoID8gRW5nbGlzaC5lcmFGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSA6IHN0cmluZyh7IGVyYTogbGVuZ3RoIH0sIFwiZXJhXCIpLFxuICAgICAgdG9rZW5Ub1N0cmluZyA9ICh0b2tlbikgPT4ge1xuICAgICAgICAvLyBXaGVyZSBwb3NzaWJsZTogaHR0cHM6Ly9jbGRyLnVuaWNvZGUub3JnL3RyYW5zbGF0aW9uL2RhdGUtdGltZS9kYXRlLXRpbWUtc3ltYm9sc1xuICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgICAgLy8gbXNcbiAgICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm1pbGxpc2Vjb25kKTtcbiAgICAgICAgICBjYXNlIFwidVwiOlxuICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgICBjYXNlIFwiU1NTXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWlsbGlzZWNvbmQsIDMpO1xuICAgICAgICAgIC8vIHNlY29uZHNcbiAgICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LnNlY29uZCk7XG4gICAgICAgICAgY2FzZSBcInNzXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuc2Vjb25kLCAyKTtcbiAgICAgICAgICAvLyBmcmFjdGlvbmFsIHNlY29uZHNcbiAgICAgICAgICBjYXNlIFwidXVcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShNYXRoLmZsb29yKGR0Lm1pbGxpc2Vjb25kIC8gMTApLCAyKTtcbiAgICAgICAgICBjYXNlIFwidXV1XCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oTWF0aC5mbG9vcihkdC5taWxsaXNlY29uZCAvIDEwMCkpO1xuICAgICAgICAgIC8vIG1pbnV0ZXNcbiAgICAgICAgICBjYXNlIFwibVwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm1pbnV0ZSk7XG4gICAgICAgICAgY2FzZSBcIm1tXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWludXRlLCAyKTtcbiAgICAgICAgICAvLyBob3Vyc1xuICAgICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91ciAlIDEyID09PSAwID8gMTIgOiBkdC5ob3VyICUgMTIpO1xuICAgICAgICAgIGNhc2UgXCJoaFwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyLCAyKTtcbiAgICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIpO1xuICAgICAgICAgIGNhc2UgXCJISFwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIsIDIpO1xuICAgICAgICAgIC8vIG9mZnNldFxuICAgICAgICAgIGNhc2UgXCJaXCI6XG4gICAgICAgICAgICAvLyBsaWtlICs2XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHsgZm9ybWF0OiBcIm5hcnJvd1wiLCBhbGxvd1o6IHRoaXMub3B0cy5hbGxvd1ogfSk7XG4gICAgICAgICAgY2FzZSBcIlpaXCI6XG4gICAgICAgICAgICAvLyBsaWtlICswNjowMFxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldCh7IGZvcm1hdDogXCJzaG9ydFwiLCBhbGxvd1o6IHRoaXMub3B0cy5hbGxvd1ogfSk7XG4gICAgICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICAgICAgLy8gbGlrZSArMDYwMFxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldCh7IGZvcm1hdDogXCJ0ZWNoaWVcIiwgYWxsb3daOiB0aGlzLm9wdHMuYWxsb3daIH0pO1xuICAgICAgICAgIGNhc2UgXCJaWlpaXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEVTVFxuICAgICAgICAgICAgcmV0dXJuIGR0LnpvbmUub2Zmc2V0TmFtZShkdC50cywgeyBmb3JtYXQ6IFwic2hvcnRcIiwgbG9jYWxlOiB0aGlzLmxvYy5sb2NhbGUgfSk7XG4gICAgICAgICAgY2FzZSBcIlpaWlpaXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEVhc3Rlcm4gU3RhbmRhcmQgVGltZVxuICAgICAgICAgICAgcmV0dXJuIGR0LnpvbmUub2Zmc2V0TmFtZShkdC50cywgeyBmb3JtYXQ6IFwibG9uZ1wiLCBsb2NhbGU6IHRoaXMubG9jLmxvY2FsZSB9KTtcbiAgICAgICAgICAvLyB6b25lXG4gICAgICAgICAgY2FzZSBcInpcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgQW1lcmljYS9OZXdfWW9ya1xuICAgICAgICAgICAgcmV0dXJuIGR0LnpvbmVOYW1lO1xuICAgICAgICAgIC8vIG1lcmlkaWVtc1xuICAgICAgICAgIGNhc2UgXCJhXCI6XG4gICAgICAgICAgICByZXR1cm4gbWVyaWRpZW0oKTtcbiAgICAgICAgICAvLyBkYXRlc1xuICAgICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoeyBkYXk6IFwibnVtZXJpY1wiIH0sIFwiZGF5XCIpIDogdGhpcy5udW0oZHQuZGF5KTtcbiAgICAgICAgICBjYXNlIFwiZGRcIjpcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7IGRheTogXCIyLWRpZ2l0XCIgfSwgXCJkYXlcIikgOiB0aGlzLm51bShkdC5kYXksIDIpO1xuICAgICAgICAgIC8vIHdlZWtkYXlzIC0gc3RhbmRhbG9uZVxuICAgICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrZGF5KTtcbiAgICAgICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgICAgICAvLyBsaWtlICdUdWVzJ1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJzaG9ydFwiLCB0cnVlKTtcbiAgICAgICAgICBjYXNlIFwiY2NjY1wiOlxuICAgICAgICAgICAgLy8gbGlrZSAnVHVlc2RheSdcbiAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibG9uZ1wiLCB0cnVlKTtcbiAgICAgICAgICBjYXNlIFwiY2NjY2NcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgJ1QnXG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheShcIm5hcnJvd1wiLCB0cnVlKTtcbiAgICAgICAgICAvLyB3ZWVrZGF5cyAtIGZvcm1hdFxuICAgICAgICAgIGNhc2UgXCJFXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrZGF5KTtcbiAgICAgICAgICBjYXNlIFwiRUVFXCI6XG4gICAgICAgICAgICAvLyBsaWtlICdUdWVzJ1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJzaG9ydFwiLCBmYWxzZSk7XG4gICAgICAgICAgY2FzZSBcIkVFRUVcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgJ1R1ZXNkYXknXG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheShcImxvbmdcIiwgZmFsc2UpO1xuICAgICAgICAgIGNhc2UgXCJFRUVFRVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAnVCdcbiAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibmFycm93XCIsIGZhbHNlKTtcbiAgICAgICAgICAvLyBtb250aHMgLSBzdGFuZGFsb25lXG4gICAgICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMVxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyXG4gICAgICAgICAgICAgID8gc3RyaW5nKHsgbW9udGg6IFwibnVtZXJpY1wiLCBkYXk6IFwibnVtZXJpY1wiIH0sIFwibW9udGhcIilcbiAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC5tb250aCk7XG4gICAgICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDAxLCBkb2Vzbid0IHNlZW0gdG8gd29ya1xuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyXG4gICAgICAgICAgICAgID8gc3RyaW5nKHsgbW9udGg6IFwiMi1kaWdpdFwiLCBkYXk6IFwibnVtZXJpY1wiIH0sIFwibW9udGhcIilcbiAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC5tb250aCwgMik7XG4gICAgICAgICAgY2FzZSBcIkxMTFwiOlxuICAgICAgICAgICAgLy8gbGlrZSBKYW5cbiAgICAgICAgICAgIHJldHVybiBtb250aChcInNob3J0XCIsIHRydWUpO1xuICAgICAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEphbnVhcnlcbiAgICAgICAgICAgIHJldHVybiBtb250aChcImxvbmdcIiwgdHJ1ZSk7XG4gICAgICAgICAgY2FzZSBcIkxMTExMXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEpcbiAgICAgICAgICAgIHJldHVybiBtb250aChcIm5hcnJvd1wiLCB0cnVlKTtcbiAgICAgICAgICAvLyBtb250aHMgLSBmb3JtYXRcbiAgICAgICAgICBjYXNlIFwiTVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgPyBzdHJpbmcoeyBtb250aDogXCJudW1lcmljXCIgfSwgXCJtb250aFwiKVxuICAgICAgICAgICAgICA6IHRoaXMubnVtKGR0Lm1vbnRoKTtcbiAgICAgICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMDFcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlclxuICAgICAgICAgICAgICA/IHN0cmluZyh7IG1vbnRoOiBcIjItZGlnaXRcIiB9LCBcIm1vbnRoXCIpXG4gICAgICAgICAgICAgIDogdGhpcy5udW0oZHQubW9udGgsIDIpO1xuICAgICAgICAgIGNhc2UgXCJNTU1cIjpcbiAgICAgICAgICAgIC8vIGxpa2UgSmFuXG4gICAgICAgICAgICByZXR1cm4gbW9udGgoXCJzaG9ydFwiLCBmYWxzZSk7XG4gICAgICAgICAgY2FzZSBcIk1NTU1cIjpcbiAgICAgICAgICAgIC8vIGxpa2UgSmFudWFyeVxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoKFwibG9uZ1wiLCBmYWxzZSk7XG4gICAgICAgICAgY2FzZSBcIk1NTU1NXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEpcbiAgICAgICAgICAgIHJldHVybiBtb250aChcIm5hcnJvd1wiLCBmYWxzZSk7XG4gICAgICAgICAgLy8geWVhcnNcbiAgICAgICAgICBjYXNlIFwieVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAyMDE0XG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoeyB5ZWFyOiBcIm51bWVyaWNcIiB9LCBcInllYXJcIikgOiB0aGlzLm51bShkdC55ZWFyKTtcbiAgICAgICAgICBjYXNlIFwieXlcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMTRcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlclxuICAgICAgICAgICAgICA/IHN0cmluZyh7IHllYXI6IFwiMi1kaWdpdFwiIH0sIFwieWVhclwiKVxuICAgICAgICAgICAgICA6IHRoaXMubnVtKGR0LnllYXIudG9TdHJpbmcoKS5zbGljZSgtMiksIDIpO1xuICAgICAgICAgIGNhc2UgXCJ5eXl5XCI6XG4gICAgICAgICAgICAvLyBsaWtlIDAwMTJcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlclxuICAgICAgICAgICAgICA/IHN0cmluZyh7IHllYXI6IFwibnVtZXJpY1wiIH0sIFwieWVhclwiKVxuICAgICAgICAgICAgICA6IHRoaXMubnVtKGR0LnllYXIsIDQpO1xuICAgICAgICAgIGNhc2UgXCJ5eXl5eXlcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMDAwMDEyXG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgPyBzdHJpbmcoeyB5ZWFyOiBcIm51bWVyaWNcIiB9LCBcInllYXJcIilcbiAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC55ZWFyLCA2KTtcbiAgICAgICAgICAvLyBlcmFzXG4gICAgICAgICAgY2FzZSBcIkdcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgQURcbiAgICAgICAgICAgIHJldHVybiBlcmEoXCJzaG9ydFwiKTtcbiAgICAgICAgICBjYXNlIFwiR0dcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgQW5ubyBEb21pbmlcbiAgICAgICAgICAgIHJldHVybiBlcmEoXCJsb25nXCIpO1xuICAgICAgICAgIGNhc2UgXCJHR0dHR1wiOlxuICAgICAgICAgICAgcmV0dXJuIGVyYShcIm5hcnJvd1wiKTtcbiAgICAgICAgICBjYXNlIFwia2tcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrWWVhci50b1N0cmluZygpLnNsaWNlKC0yKSwgMik7XG4gICAgICAgICAgY2FzZSBcImtra2tcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrWWVhciwgNCk7XG4gICAgICAgICAgY2FzZSBcIldcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrTnVtYmVyKTtcbiAgICAgICAgICBjYXNlIFwiV1dcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrTnVtYmVyLCAyKTtcbiAgICAgICAgICBjYXNlIFwiblwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmxvY2FsV2Vla051bWJlcik7XG4gICAgICAgICAgY2FzZSBcIm5uXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubG9jYWxXZWVrTnVtYmVyLCAyKTtcbiAgICAgICAgICBjYXNlIFwiaWlcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5sb2NhbFdlZWtZZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcbiAgICAgICAgICBjYXNlIFwiaWlpaVwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmxvY2FsV2Vla1llYXIsIDQpO1xuICAgICAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQub3JkaW5hbCk7XG4gICAgICAgICAgY2FzZSBcIm9vb1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwsIDMpO1xuICAgICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5xdWFydGVyKTtcbiAgICAgICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMDFcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5xdWFydGVyLCAyKTtcbiAgICAgICAgICBjYXNlIFwiWFwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQudHMgLyAxMDAwKSk7XG4gICAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC50cyk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBtYXliZU1hY3JvKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgIHJldHVybiBzdHJpbmdpZnlUb2tlbnMoRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZtdCksIHRva2VuVG9TdHJpbmcpO1xuICB9XG5cbiAgZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKGR1ciwgZm10KSB7XG4gICAgY29uc3QgdG9rZW5Ub0ZpZWxkID0gKHRva2VuKSA9PiB7XG4gICAgICAgIHN3aXRjaCAodG9rZW5bMF0pIHtcbiAgICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwibWlsbGlzZWNvbmRcIjtcbiAgICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwic2Vjb25kXCI7XG4gICAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuICAgICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJob3VyXCI7XG4gICAgICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgICAgIHJldHVybiBcImRheVwiO1xuICAgICAgICAgIGNhc2UgXCJ3XCI6XG4gICAgICAgICAgICByZXR1cm4gXCJ3ZWVrXCI7XG4gICAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAgIHJldHVybiBcIm1vbnRoXCI7XG4gICAgICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgICAgIHJldHVybiBcInllYXJcIjtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0b2tlblRvU3RyaW5nID0gKGxpbGR1cikgPT4gKHRva2VuKSA9PiB7XG4gICAgICAgIGNvbnN0IG1hcHBlZCA9IHRva2VuVG9GaWVsZCh0b2tlbik7XG4gICAgICAgIGlmIChtYXBwZWQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0obGlsZHVyLmdldChtYXBwZWQpLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRva2VucyA9IEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLFxuICAgICAgcmVhbFRva2VucyA9IHRva2Vucy5yZWR1Y2UoXG4gICAgICAgIChmb3VuZCwgeyBsaXRlcmFsLCB2YWwgfSkgPT4gKGxpdGVyYWwgPyBmb3VuZCA6IGZvdW5kLmNvbmNhdCh2YWwpKSxcbiAgICAgICAgW11cbiAgICAgICksXG4gICAgICBjb2xsYXBzZWQgPSBkdXIuc2hpZnRUbyguLi5yZWFsVG9rZW5zLm1hcCh0b2tlblRvRmllbGQpLmZpbHRlcigodCkgPT4gdCkpO1xuICAgIHJldHVybiBzdHJpbmdpZnlUb2tlbnModG9rZW5zLCB0b2tlblRvU3RyaW5nKGNvbGxhcHNlZCkpO1xuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgdW50cnVuY2F0ZVllYXIsXG4gIHNpZ25lZE9mZnNldCxcbiAgcGFyc2VJbnRlZ2VyLFxuICBwYXJzZU1pbGxpcyxcbiAgaXNVbmRlZmluZWQsXG4gIHBhcnNlRmxvYXRpbmcsXG59IGZyb20gXCIuL3V0aWwuanNcIjtcbmltcG9ydCAqIGFzIEVuZ2xpc2ggZnJvbSBcIi4vZW5nbGlzaC5qc1wiO1xuaW1wb3J0IEZpeGVkT2Zmc2V0Wm9uZSBmcm9tIFwiLi4vem9uZXMvZml4ZWRPZmZzZXRab25lLmpzXCI7XG5pbXBvcnQgSUFOQVpvbmUgZnJvbSBcIi4uL3pvbmVzL0lBTkFab25lLmpzXCI7XG5cbi8qXG4gKiBUaGlzIGZpbGUgaGFuZGxlcyBwYXJzaW5nIGZvciB3ZWxsLXNwZWNpZmllZCBmb3JtYXRzLiBIZXJlJ3MgaG93IGl0IHdvcmtzOlxuICogVHdvIHRoaW5ncyBnbyBpbnRvIHBhcnNpbmc6IGEgcmVnZXggdG8gbWF0Y2ggd2l0aCBhbmQgYW4gZXh0cmFjdG9yIHRvIHRha2UgYXBhcnQgdGhlIGdyb3VwcyBpbiB0aGUgbWF0Y2guXG4gKiBBbiBleHRyYWN0b3IgaXMganVzdCBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSByZWdleCBtYXRjaCBhcnJheSBhbmQgcmV0dXJucyBhIHsgeWVhcjogLi4uLCBtb250aDogLi4uIH0gb2JqZWN0XG4gKiBwYXJzZSgpIGRvZXMgdGhlIHdvcmsgb2YgZXhlY3V0aW5nIHRoZSByZWdleCBhbmQgYXBwbHlpbmcgdGhlIGV4dHJhY3Rvci4gSXQgdGFrZXMgbXVsdGlwbGUgcmVnZXgvZXh0cmFjdG9yIHBhaXJzIHRvIHRyeSBpbiBzZXF1ZW5jZS5cbiAqIEV4dHJhY3RvcnMgY2FuIHRha2UgYSBcImN1cnNvclwiIHJlcHJlc2VudGluZyB0aGUgb2Zmc2V0IGluIHRoZSBtYXRjaCB0byBsb29rIGF0LiBUaGlzIG1ha2VzIGl0IGVhc3kgdG8gY29tYmluZSBleHRyYWN0b3JzLlxuICogY29tYmluZUV4dHJhY3RvcnMoKSBkb2VzIHRoZSB3b3JrIG9mIGNvbWJpbmluZyB0aGVtLCBrZWVwaW5nIHRyYWNrIG9mIHRoZSBjdXJzb3IgdGhyb3VnaCBtdWx0aXBsZSBleHRyYWN0aW9ucy5cbiAqIFNvbWUgZXh0cmFjdGlvbnMgYXJlIHN1cGVyIGR1bWIgYW5kIHNpbXBsZVBhcnNlIGFuZCBmcm9tU3RyaW5ncyBoZWxwIERSWSB0aGVtLlxuICovXG5cbmNvbnN0IGlhbmFSZWdleCA9IC9bQS1aYS16XystXXsxLDI1Nn0oPzo6P1xcL1tBLVphLXowLTlfKy1dezEsMjU2fSg/OlxcL1tBLVphLXowLTlfKy1dezEsMjU2fSk/KT8vO1xuXG5mdW5jdGlvbiBjb21iaW5lUmVnZXhlcyguLi5yZWdleGVzKSB7XG4gIGNvbnN0IGZ1bGwgPSByZWdleGVzLnJlZHVjZSgoZiwgcikgPT4gZiArIHIuc291cmNlLCBcIlwiKTtcbiAgcmV0dXJuIFJlZ0V4cChgXiR7ZnVsbH0kYCk7XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVFeHRyYWN0b3JzKC4uLmV4dHJhY3RvcnMpIHtcbiAgcmV0dXJuIChtKSA9PlxuICAgIGV4dHJhY3RvcnNcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChbbWVyZ2VkVmFscywgbWVyZ2VkWm9uZSwgY3Vyc29yXSwgZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBbdmFsLCB6b25lLCBuZXh0XSA9IGV4KG0sIGN1cnNvcik7XG4gICAgICAgICAgcmV0dXJuIFt7IC4uLm1lcmdlZFZhbHMsIC4uLnZhbCB9LCB6b25lIHx8IG1lcmdlZFpvbmUsIG5leHRdO1xuICAgICAgICB9LFxuICAgICAgICBbe30sIG51bGwsIDFdXG4gICAgICApXG4gICAgICAuc2xpY2UoMCwgMik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHMsIC4uLnBhdHRlcm5zKSB7XG4gIGlmIChzID09IG51bGwpIHtcbiAgICByZXR1cm4gW251bGwsIG51bGxdO1xuICB9XG5cbiAgZm9yIChjb25zdCBbcmVnZXgsIGV4dHJhY3Rvcl0gb2YgcGF0dGVybnMpIHtcbiAgICBjb25zdCBtID0gcmVnZXguZXhlYyhzKTtcbiAgICBpZiAobSkge1xuICAgICAgcmV0dXJuIGV4dHJhY3RvcihtKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtudWxsLCBudWxsXTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlUGFyc2UoLi4ua2V5cykge1xuICByZXR1cm4gKG1hdGNoLCBjdXJzb3IpID0+IHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBsZXQgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXRba2V5c1tpXV0gPSBwYXJzZUludGVnZXIobWF0Y2hbY3Vyc29yICsgaV0pO1xuICAgIH1cbiAgICByZXR1cm4gW3JldCwgbnVsbCwgY3Vyc29yICsgaV07XG4gIH07XG59XG5cbi8vIElTTyBhbmQgU1FMIHBhcnNpbmdcbmNvbnN0IG9mZnNldFJlZ2V4ID0gLyg/OihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8pLztcbmNvbnN0IGlzb0V4dGVuZGVkWm9uZSA9IGAoPzoke29mZnNldFJlZ2V4LnNvdXJjZX0/KD86XFxcXFsoJHtpYW5hUmVnZXguc291cmNlfSlcXFxcXSk/KT9gO1xuY29uc3QgaXNvVGltZUJhc2VSZWdleCA9IC8oXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Wy4sXShcXGR7MSwzMH0pKT8pPyk/LztcbmNvbnN0IGlzb1RpbWVSZWdleCA9IFJlZ0V4cChgJHtpc29UaW1lQmFzZVJlZ2V4LnNvdXJjZX0ke2lzb0V4dGVuZGVkWm9uZX1gKTtcbmNvbnN0IGlzb1RpbWVFeHRlbnNpb25SZWdleCA9IFJlZ0V4cChgKD86VCR7aXNvVGltZVJlZ2V4LnNvdXJjZX0pP2ApO1xuY29uc3QgaXNvWW1kUmVnZXggPSAvKFsrLV1cXGR7Nn18XFxkezR9KSg/Oi0/KFxcZFxcZCkoPzotPyhcXGRcXGQpKT8pPy87XG5jb25zdCBpc29XZWVrUmVnZXggPSAvKFxcZHs0fSktP1coXFxkXFxkKSg/Oi0/KFxcZCkpPy87XG5jb25zdCBpc29PcmRpbmFsUmVnZXggPSAvKFxcZHs0fSktPyhcXGR7M30pLztcbmNvbnN0IGV4dHJhY3RJU09XZWVrRGF0YSA9IHNpbXBsZVBhcnNlKFwid2Vla1llYXJcIiwgXCJ3ZWVrTnVtYmVyXCIsIFwid2Vla0RheVwiKTtcbmNvbnN0IGV4dHJhY3RJU09PcmRpbmFsRGF0YSA9IHNpbXBsZVBhcnNlKFwieWVhclwiLCBcIm9yZGluYWxcIik7XG5jb25zdCBzcWxZbWRSZWdleCA9IC8oXFxkezR9KS0oXFxkXFxkKS0oXFxkXFxkKS87IC8vIGR1bWJlZC1kb3duIHZlcnNpb24gb2YgdGhlIElTTyBvbmVcbmNvbnN0IHNxbFRpbWVSZWdleCA9IFJlZ0V4cChcbiAgYCR7aXNvVGltZUJhc2VSZWdleC5zb3VyY2V9ID8oPzoke29mZnNldFJlZ2V4LnNvdXJjZX18KCR7aWFuYVJlZ2V4LnNvdXJjZX0pKT9gXG4pO1xuY29uc3Qgc3FsVGltZUV4dGVuc2lvblJlZ2V4ID0gUmVnRXhwKGAoPzogJHtzcWxUaW1lUmVnZXguc291cmNlfSk/YCk7XG5cbmZ1bmN0aW9uIGludChtYXRjaCwgcG9zLCBmYWxsYmFjaykge1xuICBjb25zdCBtID0gbWF0Y2hbcG9zXTtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKG0pID8gZmFsbGJhY2sgOiBwYXJzZUludGVnZXIobSk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09ZbWQobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBpdGVtID0ge1xuICAgIHllYXI6IGludChtYXRjaCwgY3Vyc29yKSxcbiAgICBtb250aDogaW50KG1hdGNoLCBjdXJzb3IgKyAxLCAxKSxcbiAgICBkYXk6IGludChtYXRjaCwgY3Vyc29yICsgMiwgMSksXG4gIH07XG5cbiAgcmV0dXJuIFtpdGVtLCBudWxsLCBjdXJzb3IgKyAzXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElTT1RpbWUobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBpdGVtID0ge1xuICAgIGhvdXJzOiBpbnQobWF0Y2gsIGN1cnNvciwgMCksXG4gICAgbWludXRlczogaW50KG1hdGNoLCBjdXJzb3IgKyAxLCAwKSxcbiAgICBzZWNvbmRzOiBpbnQobWF0Y2gsIGN1cnNvciArIDIsIDApLFxuICAgIG1pbGxpc2Vjb25kczogcGFyc2VNaWxsaXMobWF0Y2hbY3Vyc29yICsgM10pLFxuICB9O1xuXG4gIHJldHVybiBbaXRlbSwgbnVsbCwgY3Vyc29yICsgNF07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09PZmZzZXQobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCBsb2NhbCA9ICFtYXRjaFtjdXJzb3JdICYmICFtYXRjaFtjdXJzb3IgKyAxXSxcbiAgICBmdWxsT2Zmc2V0ID0gc2lnbmVkT2Zmc2V0KG1hdGNoW2N1cnNvciArIDFdLCBtYXRjaFtjdXJzb3IgKyAyXSksXG4gICAgem9uZSA9IGxvY2FsID8gbnVsbCA6IEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShmdWxsT2Zmc2V0KTtcbiAgcmV0dXJuIFt7fSwgem9uZSwgY3Vyc29yICsgM107XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJQU5BWm9uZShtYXRjaCwgY3Vyc29yKSB7XG4gIGNvbnN0IHpvbmUgPSBtYXRjaFtjdXJzb3JdID8gSUFOQVpvbmUuY3JlYXRlKG1hdGNoW2N1cnNvcl0pIDogbnVsbDtcbiAgcmV0dXJuIFt7fSwgem9uZSwgY3Vyc29yICsgMV07XG59XG5cbi8vIElTTyB0aW1lIHBhcnNpbmdcblxuY29uc3QgaXNvVGltZU9ubHkgPSBSZWdFeHAoYF5UPyR7aXNvVGltZUJhc2VSZWdleC5zb3VyY2V9JGApO1xuXG4vLyBJU08gZHVyYXRpb24gcGFyc2luZ1xuXG5jb25zdCBpc29EdXJhdGlvbiA9XG4gIC9eLT9QKD86KD86KC0/XFxkezEsMjB9KD86XFwuXFxkezEsMjB9KT8pWSk/KD86KC0/XFxkezEsMjB9KD86XFwuXFxkezEsMjB9KT8pTSk/KD86KC0/XFxkezEsMjB9KD86XFwuXFxkezEsMjB9KT8pVyk/KD86KC0/XFxkezEsMjB9KD86XFwuXFxkezEsMjB9KT8pRCk/KD86VCg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KUgpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KU0pPyg/OigtP1xcZHsxLDIwfSkoPzpbLixdKC0/XFxkezEsMjB9KSk/Uyk/KT8pJC87XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09EdXJhdGlvbihtYXRjaCkge1xuICBjb25zdCBbcywgeWVhclN0ciwgbW9udGhTdHIsIHdlZWtTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIG1pbGxpc2Vjb25kc1N0cl0gPVxuICAgIG1hdGNoO1xuXG4gIGNvbnN0IGhhc05lZ2F0aXZlUHJlZml4ID0gc1swXSA9PT0gXCItXCI7XG4gIGNvbnN0IG5lZ2F0aXZlU2Vjb25kcyA9IHNlY29uZFN0ciAmJiBzZWNvbmRTdHJbMF0gPT09IFwiLVwiO1xuXG4gIGNvbnN0IG1heWJlTmVnYXRlID0gKG51bSwgZm9yY2UgPSBmYWxzZSkgPT5cbiAgICBudW0gIT09IHVuZGVmaW5lZCAmJiAoZm9yY2UgfHwgKG51bSAmJiBoYXNOZWdhdGl2ZVByZWZpeCkpID8gLW51bSA6IG51bTtcblxuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHllYXJzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHllYXJTdHIpKSxcbiAgICAgIG1vbnRoczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhtb250aFN0cikpLFxuICAgICAgd2Vla3M6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcod2Vla1N0cikpLFxuICAgICAgZGF5czogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhkYXlTdHIpKSxcbiAgICAgIGhvdXJzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKGhvdXJTdHIpKSxcbiAgICAgIG1pbnV0ZXM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcobWludXRlU3RyKSksXG4gICAgICBzZWNvbmRzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHNlY29uZFN0ciksIHNlY29uZFN0ciA9PT0gXCItMFwiKSxcbiAgICAgIG1pbGxpc2Vjb25kczogbWF5YmVOZWdhdGUocGFyc2VNaWxsaXMobWlsbGlzZWNvbmRzU3RyKSwgbmVnYXRpdmVTZWNvbmRzKSxcbiAgICB9LFxuICBdO1xufVxuXG4vLyBUaGVzZSBhcmUgYSBsaXR0bGUgYnJhaW5kZWFkLiBFRFQgKnNob3VsZCogdGVsbCB1cyB0aGF0IHdlJ3JlIGluLCBzYXksIEFtZXJpY2EvTmV3X1lvcmtcbi8vIGFuZCBub3QganVzdCB0aGF0IHdlJ3JlIGluIC0yNDAgKnJpZ2h0IG5vdyouIEJ1dCBzaW5jZSBJIGRvbid0IHRoaW5rIHRoZXNlIGFyZSB1c2VkIHRoYXQgb2Z0ZW5cbi8vIEknbSBqdXN0IGdvaW5nIHRvIGlnbm9yZSB0aGF0XG5jb25zdCBvYnNPZmZzZXRzID0ge1xuICBHTVQ6IDAsXG4gIEVEVDogLTQgKiA2MCxcbiAgRVNUOiAtNSAqIDYwLFxuICBDRFQ6IC01ICogNjAsXG4gIENTVDogLTYgKiA2MCxcbiAgTURUOiAtNiAqIDYwLFxuICBNU1Q6IC03ICogNjAsXG4gIFBEVDogLTcgKiA2MCxcbiAgUFNUOiAtOCAqIDYwLFxufTtcblxuZnVuY3Rpb24gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHllYXI6IHllYXJTdHIubGVuZ3RoID09PSAyID8gdW50cnVuY2F0ZVllYXIocGFyc2VJbnRlZ2VyKHllYXJTdHIpKSA6IHBhcnNlSW50ZWdlcih5ZWFyU3RyKSxcbiAgICBtb250aDogRW5nbGlzaC5tb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSArIDEsXG4gICAgZGF5OiBwYXJzZUludGVnZXIoZGF5U3RyKSxcbiAgICBob3VyOiBwYXJzZUludGVnZXIoaG91clN0ciksXG4gICAgbWludXRlOiBwYXJzZUludGVnZXIobWludXRlU3RyKSxcbiAgfTtcblxuICBpZiAoc2Vjb25kU3RyKSByZXN1bHQuc2Vjb25kID0gcGFyc2VJbnRlZ2VyKHNlY29uZFN0cik7XG4gIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgcmVzdWx0LndlZWtkYXkgPVxuICAgICAgd2Vla2RheVN0ci5sZW5ndGggPiAzXG4gICAgICAgID8gRW5nbGlzaC53ZWVrZGF5c0xvbmcuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDFcbiAgICAgICAgOiBFbmdsaXNoLndlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDE7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBSRkMgMjgyMi81MzIyXG5jb25zdCByZmMyODIyID1cbiAgL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSxcXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KD86KFsrLV1cXGRcXGQpKFxcZFxcZCkpKSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0UkZDMjgyMihtYXRjaCkge1xuICBjb25zdCBbXG4gICAgICAsXG4gICAgICB3ZWVrZGF5U3RyLFxuICAgICAgZGF5U3RyLFxuICAgICAgbW9udGhTdHIsXG4gICAgICB5ZWFyU3RyLFxuICAgICAgaG91clN0cixcbiAgICAgIG1pbnV0ZVN0cixcbiAgICAgIHNlY29uZFN0cixcbiAgICAgIG9ic09mZnNldCxcbiAgICAgIG1pbE9mZnNldCxcbiAgICAgIG9mZkhvdXJTdHIsXG4gICAgICBvZmZNaW51dGVTdHIsXG4gICAgXSA9IG1hdGNoLFxuICAgIHJlc3VsdCA9IGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKTtcblxuICBsZXQgb2Zmc2V0O1xuICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICB9IGVsc2UgaWYgKG1pbE9mZnNldCkge1xuICAgIG9mZnNldCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0ID0gc2lnbmVkT2Zmc2V0KG9mZkhvdXJTdHIsIG9mZk1pbnV0ZVN0cik7XG4gIH1cblxuICByZXR1cm4gW3Jlc3VsdCwgbmV3IEZpeGVkT2Zmc2V0Wm9uZShvZmZzZXQpXTtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICByZXR1cm4gc1xuICAgIC5yZXBsYWNlKC9cXChbXigpXSpcXCl8W1xcblxcdF0vZywgXCIgXCIpXG4gICAgLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCBcIiBcIilcbiAgICAudHJpbSgpO1xufVxuXG4vLyBodHRwIGRhdGVcblxuY29uc3QgcmZjMTEyMyA9XG4gICAgL14oTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSwgKFxcZFxcZCkgKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKSAoXFxkezR9KSAoXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKSBHTVQkLyxcbiAgcmZjODUwID1cbiAgICAvXihNb25kYXl8VHVlc2RheXxXZWRuZXNkYXl8VGh1cnNkYXl8RnJpZGF5fFNhdHVyZGF5fFN1bmRheSksIChcXGRcXGQpLShKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYyktKFxcZFxcZCkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgR01UJC8sXG4gIGFzY2lpID1cbiAgICAvXihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKCBcXGR8XFxkXFxkKSAoXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKSAoXFxkezR9KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0UkZDMTEyM09yODUwKG1hdGNoKSB7XG4gIGNvbnN0IFssIHdlZWtkYXlTdHIsIGRheVN0ciwgbW9udGhTdHIsIHllYXJTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyXSA9IG1hdGNoLFxuICAgIHJlc3VsdCA9IGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKTtcbiAgcmV0dXJuIFtyZXN1bHQsIEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZV07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RBU0NJSShtYXRjaCkge1xuICBjb25zdCBbLCB3ZWVrZGF5U3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0ciwgeWVhclN0cl0gPSBtYXRjaCxcbiAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG5jb25zdCBpc29ZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvWW1kUmVnZXgsIGlzb1RpbWVFeHRlbnNpb25SZWdleCk7XG5jb25zdCBpc29XZWVrV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1dlZWtSZWdleCwgaXNvVGltZUV4dGVuc2lvblJlZ2V4KTtcbmNvbnN0IGlzb09yZGluYWxXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvT3JkaW5hbFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xuY29uc3QgaXNvVGltZUNvbWJpbmVkUmVnZXggPSBjb21iaW5lUmVnZXhlcyhpc29UaW1lUmVnZXgpO1xuXG5jb25zdCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldCA9IGNvbWJpbmVFeHRyYWN0b3JzKFxuICBleHRyYWN0SVNPWW1kLFxuICBleHRyYWN0SVNPVGltZSxcbiAgZXh0cmFjdElTT09mZnNldCxcbiAgZXh0cmFjdElBTkFab25lXG4pO1xuY29uc3QgZXh0cmFjdElTT1dlZWtUaW1lQW5kT2Zmc2V0ID0gY29tYmluZUV4dHJhY3RvcnMoXG4gIGV4dHJhY3RJU09XZWVrRGF0YSxcbiAgZXh0cmFjdElTT1RpbWUsXG4gIGV4dHJhY3RJU09PZmZzZXQsXG4gIGV4dHJhY3RJQU5BWm9uZVxuKTtcbmNvbnN0IGV4dHJhY3RJU09PcmRpbmFsRGF0ZUFuZFRpbWUgPSBjb21iaW5lRXh0cmFjdG9ycyhcbiAgZXh0cmFjdElTT09yZGluYWxEYXRhLFxuICBleHRyYWN0SVNPVGltZSxcbiAgZXh0cmFjdElTT09mZnNldCxcbiAgZXh0cmFjdElBTkFab25lXG4pO1xuY29uc3QgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhcbiAgZXh0cmFjdElTT1RpbWUsXG4gIGV4dHJhY3RJU09PZmZzZXQsXG4gIGV4dHJhY3RJQU5BWm9uZVxuKTtcblxuLypcbiAqIEBwcml2YXRlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVNPRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShcbiAgICBzLFxuICAgIFtpc29ZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldF0sXG4gICAgW2lzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPV2Vla1RpbWVBbmRPZmZzZXRdLFxuICAgIFtpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT09yZGluYWxEYXRlQW5kVGltZV0sXG4gICAgW2lzb1RpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZUFuZE9mZnNldF1cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUkZDMjgyMkRhdGUocykge1xuICByZXR1cm4gcGFyc2UocHJlcHJvY2Vzc1JGQzI4MjIocyksIFtyZmMyODIyLCBleHRyYWN0UkZDMjgyMl0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIVFRQRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShcbiAgICBzLFxuICAgIFtyZmMxMTIzLCBleHRyYWN0UkZDMTEyM09yODUwXSxcbiAgICBbcmZjODUwLCBleHRyYWN0UkZDMTEyM09yODUwXSxcbiAgICBbYXNjaWksIGV4dHJhY3RBU0NJSV1cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVNPRHVyYXRpb24ocykge1xuICByZXR1cm4gcGFyc2UocywgW2lzb0R1cmF0aW9uLCBleHRyYWN0SVNPRHVyYXRpb25dKTtcbn1cblxuY29uc3QgZXh0cmFjdElTT1RpbWVPbmx5ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1RpbWUpO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJU09UaW1lT25seShzKSB7XG4gIHJldHVybiBwYXJzZShzLCBbaXNvVGltZU9ubHksIGV4dHJhY3RJU09UaW1lT25seV0pO1xufVxuXG5jb25zdCBzcWxZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoc3FsWW1kUmVnZXgsIHNxbFRpbWVFeHRlbnNpb25SZWdleCk7XG5jb25zdCBzcWxUaW1lQ29tYmluZWRSZWdleCA9IGNvbWJpbmVSZWdleGVzKHNxbFRpbWVSZWdleCk7XG5cbmNvbnN0IGV4dHJhY3RJU09UaW1lT2Zmc2V0QW5kSUFOQVpvbmUgPSBjb21iaW5lRXh0cmFjdG9ycyhcbiAgZXh0cmFjdElTT1RpbWUsXG4gIGV4dHJhY3RJU09PZmZzZXQsXG4gIGV4dHJhY3RJQU5BWm9uZVxuKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU1FMKHMpIHtcbiAgcmV0dXJuIHBhcnNlKFxuICAgIHMsXG4gICAgW3NxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09ZbWRUaW1lQW5kT2Zmc2V0XSxcbiAgICBbc3FsVGltZUNvbWJpbmVkUmVnZXgsIGV4dHJhY3RJU09UaW1lT2Zmc2V0QW5kSUFOQVpvbmVdXG4gICk7XG59XG4iLCAiaW1wb3J0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IsIEludmFsaWREdXJhdGlvbkVycm9yLCBJbnZhbGlkVW5pdEVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgRm9ybWF0dGVyIGZyb20gXCIuL2ltcGwvZm9ybWF0dGVyLmpzXCI7XG5pbXBvcnQgSW52YWxpZCBmcm9tIFwiLi9pbXBsL2ludmFsaWQuanNcIjtcbmltcG9ydCBMb2NhbGUgZnJvbSBcIi4vaW1wbC9sb2NhbGUuanNcIjtcbmltcG9ydCB7IHBhcnNlSVNPRHVyYXRpb24sIHBhcnNlSVNPVGltZU9ubHkgfSBmcm9tIFwiLi9pbXBsL3JlZ2V4UGFyc2VyLmpzXCI7XG5pbXBvcnQge1xuICBhc051bWJlcixcbiAgaGFzT3duUHJvcGVydHksXG4gIGlzTnVtYmVyLFxuICBpc1VuZGVmaW5lZCxcbiAgbm9ybWFsaXplT2JqZWN0LFxuICByb3VuZFRvLFxufSBmcm9tIFwiLi9pbXBsL3V0aWwuanNcIjtcbmltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi9zZXR0aW5ncy5qc1wiO1xuaW1wb3J0IERhdGVUaW1lIGZyb20gXCIuL2RhdGV0aW1lLmpzXCI7XG5cbmNvbnN0IElOVkFMSUQgPSBcIkludmFsaWQgRHVyYXRpb25cIjtcblxuLy8gdW5pdCBjb252ZXJzaW9uIGNvbnN0YW50c1xuZXhwb3J0IGNvbnN0IGxvd09yZGVyTWF0cml4ID0ge1xuICAgIHdlZWtzOiB7XG4gICAgICBkYXlzOiA3LFxuICAgICAgaG91cnM6IDcgKiAyNCxcbiAgICAgIG1pbnV0ZXM6IDcgKiAyNCAqIDYwLFxuICAgICAgc2Vjb25kczogNyAqIDI0ICogNjAgKiA2MCxcbiAgICAgIG1pbGxpc2Vjb25kczogNyAqIDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgfSxcbiAgICBkYXlzOiB7XG4gICAgICBob3VyczogMjQsXG4gICAgICBtaW51dGVzOiAyNCAqIDYwLFxuICAgICAgc2Vjb25kczogMjQgKiA2MCAqIDYwLFxuICAgICAgbWlsbGlzZWNvbmRzOiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgIH0sXG4gICAgaG91cnM6IHsgbWludXRlczogNjAsIHNlY29uZHM6IDYwICogNjAsIG1pbGxpc2Vjb25kczogNjAgKiA2MCAqIDEwMDAgfSxcbiAgICBtaW51dGVzOiB7IHNlY29uZHM6IDYwLCBtaWxsaXNlY29uZHM6IDYwICogMTAwMCB9LFxuICAgIHNlY29uZHM6IHsgbWlsbGlzZWNvbmRzOiAxMDAwIH0sXG4gIH0sXG4gIGNhc3VhbE1hdHJpeCA9IHtcbiAgICB5ZWFyczoge1xuICAgICAgcXVhcnRlcnM6IDQsXG4gICAgICBtb250aHM6IDEyLFxuICAgICAgd2Vla3M6IDUyLFxuICAgICAgZGF5czogMzY1LFxuICAgICAgaG91cnM6IDM2NSAqIDI0LFxuICAgICAgbWludXRlczogMzY1ICogMjQgKiA2MCxcbiAgICAgIHNlY29uZHM6IDM2NSAqIDI0ICogNjAgKiA2MCxcbiAgICAgIG1pbGxpc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMCxcbiAgICB9LFxuICAgIHF1YXJ0ZXJzOiB7XG4gICAgICBtb250aHM6IDMsXG4gICAgICB3ZWVrczogMTMsXG4gICAgICBkYXlzOiA5MSxcbiAgICAgIGhvdXJzOiA5MSAqIDI0LFxuICAgICAgbWludXRlczogOTEgKiAyNCAqIDYwLFxuICAgICAgc2Vjb25kczogOTEgKiAyNCAqIDYwICogNjAsXG4gICAgICBtaWxsaXNlY29uZHM6IDkxICogMjQgKiA2MCAqIDYwICogMTAwMCxcbiAgICB9LFxuICAgIG1vbnRoczoge1xuICAgICAgd2Vla3M6IDQsXG4gICAgICBkYXlzOiAzMCxcbiAgICAgIGhvdXJzOiAzMCAqIDI0LFxuICAgICAgbWludXRlczogMzAgKiAyNCAqIDYwLFxuICAgICAgc2Vjb25kczogMzAgKiAyNCAqIDYwICogNjAsXG4gICAgICBtaWxsaXNlY29uZHM6IDMwICogMjQgKiA2MCAqIDYwICogMTAwMCxcbiAgICB9LFxuXG4gICAgLi4ubG93T3JkZXJNYXRyaXgsXG4gIH0sXG4gIGRheXNJblllYXJBY2N1cmF0ZSA9IDE0NjA5Ny4wIC8gNDAwLFxuICBkYXlzSW5Nb250aEFjY3VyYXRlID0gMTQ2MDk3LjAgLyA0ODAwLFxuICBhY2N1cmF0ZU1hdHJpeCA9IHtcbiAgICB5ZWFyczoge1xuICAgICAgcXVhcnRlcnM6IDQsXG4gICAgICBtb250aHM6IDEyLFxuICAgICAgd2Vla3M6IGRheXNJblllYXJBY2N1cmF0ZSAvIDcsXG4gICAgICBkYXlzOiBkYXlzSW5ZZWFyQWNjdXJhdGUsXG4gICAgICBob3VyczogZGF5c0luWWVhckFjY3VyYXRlICogMjQsXG4gICAgICBtaW51dGVzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwLFxuICAgICAgc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwLFxuICAgICAgbWlsbGlzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgIH0sXG4gICAgcXVhcnRlcnM6IHtcbiAgICAgIG1vbnRoczogMyxcbiAgICAgIHdlZWtzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgLyAyOCxcbiAgICAgIGRheXM6IGRheXNJblllYXJBY2N1cmF0ZSAvIDQsXG4gICAgICBob3VyczogKGRheXNJblllYXJBY2N1cmF0ZSAqIDI0KSAvIDQsXG4gICAgICBtaW51dGVzOiAoZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCkgLyA0LFxuICAgICAgc2Vjb25kczogKGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCkgLyA0LFxuICAgICAgbWlsbGlzZWNvbmRzOiAoZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMTAwMCkgLyA0LFxuICAgIH0sXG4gICAgbW9udGhzOiB7XG4gICAgICB3ZWVrczogZGF5c0luTW9udGhBY2N1cmF0ZSAvIDcsXG4gICAgICBkYXlzOiBkYXlzSW5Nb250aEFjY3VyYXRlLFxuICAgICAgaG91cnM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCxcbiAgICAgIG1pbnV0ZXM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCAqIDYwLFxuICAgICAgc2Vjb25kczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCxcbiAgICAgIG1pbGxpc2Vjb25kczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgfSxcbiAgICAuLi5sb3dPcmRlck1hdHJpeCxcbiAgfTtcblxuLy8gdW5pdHMgb3JkZXJlZCBieSBzaXplXG5jb25zdCBvcmRlcmVkVW5pdHMgPSBbXG4gIFwieWVhcnNcIixcbiAgXCJxdWFydGVyc1wiLFxuICBcIm1vbnRoc1wiLFxuICBcIndlZWtzXCIsXG4gIFwiZGF5c1wiLFxuICBcImhvdXJzXCIsXG4gIFwibWludXRlc1wiLFxuICBcInNlY29uZHNcIixcbiAgXCJtaWxsaXNlY29uZHNcIixcbl07XG5cbmNvbnN0IHJldmVyc2VVbml0cyA9IG9yZGVyZWRVbml0cy5zbGljZSgwKS5yZXZlcnNlKCk7XG5cbi8vIGNsb25lIHJlYWxseSBtZWFucyBcImNyZWF0ZSBhbm90aGVyIGluc3RhbmNlIGp1c3QgbGlrZSB0aGlzIG9uZSwgYnV0IHdpdGggdGhlc2UgY2hhbmdlc1wiXG5mdW5jdGlvbiBjbG9uZShkdXIsIGFsdHMsIGNsZWFyID0gZmFsc2UpIHtcbiAgLy8gZGVlcCBtZXJnZSBmb3IgdmFsc1xuICBjb25zdCBjb25mID0ge1xuICAgIHZhbHVlczogY2xlYXIgPyBhbHRzLnZhbHVlcyA6IHsgLi4uZHVyLnZhbHVlcywgLi4uKGFsdHMudmFsdWVzIHx8IHt9KSB9LFxuICAgIGxvYzogZHVyLmxvYy5jbG9uZShhbHRzLmxvYyksXG4gICAgY29udmVyc2lvbkFjY3VyYWN5OiBhbHRzLmNvbnZlcnNpb25BY2N1cmFjeSB8fCBkdXIuY29udmVyc2lvbkFjY3VyYWN5LFxuICAgIG1hdHJpeDogYWx0cy5tYXRyaXggfHwgZHVyLm1hdHJpeCxcbiAgfTtcbiAgcmV0dXJuIG5ldyBEdXJhdGlvbihjb25mKTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Ub01pbGxpcyhtYXRyaXgsIHZhbHMpIHtcbiAgbGV0IHN1bSA9IHZhbHMubWlsbGlzZWNvbmRzID8/IDA7XG4gIGZvciAoY29uc3QgdW5pdCBvZiByZXZlcnNlVW5pdHMuc2xpY2UoMSkpIHtcbiAgICBpZiAodmFsc1t1bml0XSkge1xuICAgICAgc3VtICs9IHZhbHNbdW5pdF0gKiBtYXRyaXhbdW5pdF1bXCJtaWxsaXNlY29uZHNcIl07XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW07XG59XG5cbi8vIE5COiBtdXRhdGVzIHBhcmFtZXRlcnNcbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlcyhtYXRyaXgsIHZhbHMpIHtcbiAgLy8gdGhlIGxvZ2ljIGJlbG93IGFzc3VtZXMgdGhlIG92ZXJhbGwgdmFsdWUgb2YgdGhlIGR1cmF0aW9uIGlzIHBvc2l0aXZlXG4gIC8vIGlmIHRoaXMgaXMgbm90IHRoZSBjYXNlLCBmYWN0b3IgaXMgdXNlZCB0byBtYWtlIGl0IHNvXG4gIGNvbnN0IGZhY3RvciA9IGR1cmF0aW9uVG9NaWxsaXMobWF0cml4LCB2YWxzKSA8IDAgPyAtMSA6IDE7XG5cbiAgb3JkZXJlZFVuaXRzLnJlZHVjZVJpZ2h0KChwcmV2aW91cywgY3VycmVudCkgPT4ge1xuICAgIGlmICghaXNVbmRlZmluZWQodmFsc1tjdXJyZW50XSkpIHtcbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICBjb25zdCBwcmV2aW91c1ZhbCA9IHZhbHNbcHJldmlvdXNdICogZmFjdG9yO1xuICAgICAgICBjb25zdCBjb252ID0gbWF0cml4W2N1cnJlbnRdW3ByZXZpb3VzXTtcblxuICAgICAgICAvLyBpZiAocHJldmlvdXNWYWwgPCAwKTpcbiAgICAgICAgLy8gbG93ZXIgb3JkZXIgdW5pdCBpcyBuZWdhdGl2ZSAoZS5nLiB7IHllYXJzOiAyLCBkYXlzOiAtMiB9KVxuICAgICAgICAvLyBub3JtYWxpemUgdGhpcyBieSByZWR1Y2luZyB0aGUgaGlnaGVyIG9yZGVyIHVuaXQgYnkgdGhlIGFwcHJvcHJpYXRlIGFtb3VudFxuICAgICAgICAvLyBhbmQgaW5jcmVhc2luZyB0aGUgbG93ZXIgb3JkZXIgdW5pdFxuICAgICAgICAvLyB0aGlzIGNhbiBuZXZlciBtYWtlIHRoZSBoaWdoZXIgb3JkZXIgdW5pdCBuZWdhdGl2ZSwgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIG9ubHkgb3BlcmF0ZXNcbiAgICAgICAgLy8gb24gcG9zaXRpdmUgZHVyYXRpb25zLCBzbyB0aGUgYW1vdW50IG9mIHRpbWUgcmVwcmVzZW50ZWQgYnkgdGhlIGxvd2VyIG9yZGVyIHVuaXQgY2Fubm90XG4gICAgICAgIC8vIGJlIGxhcmdlciB0aGFuIHRoZSBoaWdoZXIgb3JkZXIgdW5pdFxuICAgICAgICAvLyBlbHNlOlxuICAgICAgICAvLyBsb3dlciBvcmRlciB1bml0IGlzIHBvc2l0aXZlIChlLmcuIHsgeWVhcnM6IDIsIGRheXM6IDQ1MCB9IG9yIHsgeWVhcnM6IC0yLCBkYXlzOiA0NTAgfSlcbiAgICAgICAgLy8gaW4gdGhpcyBjYXNlIHdlIGF0dGVtcHQgdG8gY29udmVydCBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGxvd2VyIG9yZGVyIHVuaXQgaW50b1xuICAgICAgICAvLyB0aGUgaGlnaGVyIG9yZGVyIG9uZVxuICAgICAgICAvL1xuICAgICAgICAvLyBNYXRoLmZsb29yIHRha2VzIGNhcmUgb2YgYm90aCBvZiB0aGVzZSBjYXNlcywgcm91bmRpbmcgYXdheSBmcm9tIDBcbiAgICAgICAgLy8gaWYgcHJldmlvdXNWYWwgPCAwIGl0IG1ha2VzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBsYXJnZXJcbiAgICAgICAgLy8gaWYgcHJldmlvdXNWYWwgPj0gaXQgbWFrZXMgdGhlIGFic29sdXRlIHZhbHVlIHNtYWxsZXJcbiAgICAgICAgY29uc3Qgcm9sbFVwID0gTWF0aC5mbG9vcihwcmV2aW91c1ZhbCAvIGNvbnYpO1xuICAgICAgICB2YWxzW2N1cnJlbnRdICs9IHJvbGxVcCAqIGZhY3RvcjtcbiAgICAgICAgdmFsc1twcmV2aW91c10gLT0gcm9sbFVwICogY29udiAqIGZhY3RvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJldmlvdXM7XG4gICAgfVxuICB9LCBudWxsKTtcblxuICAvLyB0cnkgdG8gY29udmVydCBhbnkgZGVjaW1hbHMgaW50byBzbWFsbGVyIHVuaXRzIGlmIHBvc3NpYmxlXG4gIC8vIGZvciBleGFtcGxlIGZvciB7IHllYXJzOiAyLjUsIGRheXM6IDAsIHNlY29uZHM6IDAgfSB3ZSB3YW50IHRvIGdldCB7IHllYXJzOiAyLCBkYXlzOiAxODIsIGhvdXJzOiAxMiB9XG4gIG9yZGVyZWRVbml0cy5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh2YWxzW2N1cnJlbnRdKSkge1xuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIGNvbnN0IGZyYWN0aW9uID0gdmFsc1twcmV2aW91c10gJSAxO1xuICAgICAgICB2YWxzW3ByZXZpb3VzXSAtPSBmcmFjdGlvbjtcbiAgICAgICAgdmFsc1tjdXJyZW50XSArPSBmcmFjdGlvbiAqIG1hdHJpeFtwcmV2aW91c11bY3VycmVudF07XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByZXZpb3VzO1xuICAgIH1cbiAgfSwgbnVsbCk7XG59XG5cbi8vIFJlbW92ZSBhbGwgcHJvcGVydGllcyB3aXRoIGEgdmFsdWUgb2YgMCBmcm9tIGFuIG9iamVjdFxuZnVuY3Rpb24gcmVtb3ZlWmVyb2VzKHZhbHMpIHtcbiAgY29uc3QgbmV3VmFscyA9IHt9O1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh2YWxzKSkge1xuICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgbmV3VmFsc1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdWYWxzO1xufVxuXG4vKipcbiAqIEEgRHVyYXRpb24gb2JqZWN0IHJlcHJlc2VudHMgYSBwZXJpb2Qgb2YgdGltZSwgbGlrZSBcIjIgbW9udGhzXCIgb3IgXCIxIGRheSwgMSBob3VyXCIuIENvbmNlcHR1YWxseSwgaXQncyBqdXN0IGEgbWFwIG9mIHVuaXRzIHRvIHRoZWlyIHF1YW50aXRpZXMsIGFjY29tcGFuaWVkIGJ5IHNvbWUgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIGFuZCBtZXRob2RzIGZvciBjcmVhdGluZywgcGFyc2luZywgaW50ZXJyb2dhdGluZywgdHJhbnNmb3JtaW5nLCBhbmQgZm9ybWF0dGluZyB0aGVtLiBUaGV5IGNhbiBiZSB1c2VkIG9uIHRoZWlyIG93biBvciBpbiBjb25qdW5jdGlvbiB3aXRoIG90aGVyIEx1eG9uIHR5cGVzOyBmb3IgZXhhbXBsZSwgeW91IGNhbiB1c2Uge0BsaW5rIERhdGVUaW1lI3BsdXN9IHRvIGFkZCBhIER1cmF0aW9uIG9iamVjdCB0byBhIERhdGVUaW1lLCBwcm9kdWNpbmcgYW5vdGhlciBEYXRlVGltZS5cbiAqXG4gKiBIZXJlIGlzIGEgYnJpZWYgb3ZlcnZpZXcgb2YgY29tbW9ubHkgdXNlZCBtZXRob2RzIGFuZCBnZXR0ZXJzIGluIER1cmF0aW9uOlxuICpcbiAqICogKipDcmVhdGlvbioqIFRvIGNyZWF0ZSBhIER1cmF0aW9uLCB1c2Uge0BsaW5rIER1cmF0aW9uLmZyb21NaWxsaXN9LCB7QGxpbmsgRHVyYXRpb24uZnJvbU9iamVjdH0sIG9yIHtAbGluayBEdXJhdGlvbi5mcm9tSVNPfS5cbiAqICogKipVbml0IHZhbHVlcyoqIFNlZSB0aGUge0BsaW5rIER1cmF0aW9uI3llYXJzfSwge0BsaW5rIER1cmF0aW9uI21vbnRoc30sIHtAbGluayBEdXJhdGlvbiN3ZWVrc30sIHtAbGluayBEdXJhdGlvbiNkYXlzfSwge0BsaW5rIER1cmF0aW9uI2hvdXJzfSwge0BsaW5rIER1cmF0aW9uI21pbnV0ZXN9LCB7QGxpbmsgRHVyYXRpb24jc2Vjb25kc30sIHtAbGluayBEdXJhdGlvbiNtaWxsaXNlY29uZHN9IGFjY2Vzc29ycy5cbiAqICogKipDb25maWd1cmF0aW9uKiogU2VlICB7QGxpbmsgRHVyYXRpb24jbG9jYWxlfSBhbmQge0BsaW5rIER1cmF0aW9uI251bWJlcmluZ1N5c3RlbX0gYWNjZXNzb3JzLlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKiogVG8gY3JlYXRlIG5ldyBEdXJhdGlvbnMgb3V0IG9mIG9sZCBvbmVzIHVzZSB7QGxpbmsgRHVyYXRpb24jcGx1c30sIHtAbGluayBEdXJhdGlvbiNtaW51c30sIHtAbGluayBEdXJhdGlvbiNub3JtYWxpemV9LCB7QGxpbmsgRHVyYXRpb24jc2V0fSwge0BsaW5rIER1cmF0aW9uI3JlY29uZmlndXJlfSwge0BsaW5rIER1cmF0aW9uI3NoaWZ0VG99LCBhbmQge0BsaW5rIER1cmF0aW9uI25lZ2F0ZX0uXG4gKiAqICoqT3V0cHV0KiogVG8gY29udmVydCB0aGUgRHVyYXRpb24gaW50byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHNlZSB7QGxpbmsgRHVyYXRpb24jYXN9LCB7QGxpbmsgRHVyYXRpb24jdG9JU099LCB7QGxpbmsgRHVyYXRpb24jdG9Gb3JtYXR9LCBhbmQge0BsaW5rIER1cmF0aW9uI3RvSlNPTn1cbiAqXG4gKiBUaGVyZSdzIGFyZSBtb3JlIG1ldGhvZHMgZG9jdW1lbnRlZCBiZWxvdy4gSW4gYWRkaXRpb24sIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHN1YnRsZXIgdG9waWNzIGxpa2UgaW50ZXJuYXRpb25hbGl6YXRpb24gYW5kIHZhbGlkaXR5LCBzZWUgdGhlIGV4dGVybmFsIGRvY3VtZW50YXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIER1cmF0aW9uIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBjb25zdCBhY2N1cmF0ZSA9IGNvbmZpZy5jb252ZXJzaW9uQWNjdXJhY3kgPT09IFwibG9uZ3Rlcm1cIiB8fCBmYWxzZTtcbiAgICBsZXQgbWF0cml4ID0gYWNjdXJhdGUgPyBhY2N1cmF0ZU1hdHJpeCA6IGNhc3VhbE1hdHJpeDtcblxuICAgIGlmIChjb25maWcubWF0cml4KSB7XG4gICAgICBtYXRyaXggPSBjb25maWcubWF0cml4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMudmFsdWVzID0gY29uZmlnLnZhbHVlcztcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmxvYyA9IGNvbmZpZy5sb2MgfHwgTG9jYWxlLmNyZWF0ZSgpO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuY29udmVyc2lvbkFjY3VyYWN5ID0gYWNjdXJhdGUgPyBcImxvbmd0ZXJtXCIgOiBcImNhc3VhbFwiO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaW52YWxpZCA9IGNvbmZpZy5pbnZhbGlkIHx8IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5pc0x1eG9uRHVyYXRpb24gPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBEdXJhdGlvbiBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IG9mIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbU1pbGxpcyhjb3VudCwgb3B0cykge1xuICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWlsbGlzZWNvbmRzOiBjb3VudCB9LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGEgSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCBrZXlzIGxpa2UgJ3llYXJzJyBhbmQgJ2hvdXJzJy5cbiAgICogSWYgdGhpcyBvYmplY3QgaXMgZW1wdHkgdGhlbiBhIHplcm8gbWlsbGlzZWNvbmRzIGR1cmF0aW9uIGlzIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gdGhlIG9iamVjdCB0byBjcmVhdGUgdGhlIERhdGVUaW1lIGZyb21cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai55ZWFyc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnF1YXJ0ZXJzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubW9udGhzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla3NcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5kYXlzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouaG91cnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taW51dGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouc2Vjb25kc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9W11dIC0gb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhpcyBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIHByZXNldCBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm1hdHJpeD1PYmplY3RdIC0gdGhlIGN1c3RvbSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbU9iamVjdChvYmosIG9wdHMgPSB7fSkge1xuICAgIGlmIChvYmogPT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgIGBEdXJhdGlvbi5mcm9tT2JqZWN0OiBhcmd1bWVudCBleHBlY3RlZCB0byBiZSBhbiBvYmplY3QsIGdvdCAke1xuICAgICAgICAgIG9iaiA9PT0gbnVsbCA/IFwibnVsbFwiIDogdHlwZW9mIG9ialxuICAgICAgICB9YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IER1cmF0aW9uKHtcbiAgICAgIHZhbHVlczogbm9ybWFsaXplT2JqZWN0KG9iaiwgRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdHMpLFxuICAgICAgY29udmVyc2lvbkFjY3VyYWN5OiBvcHRzLmNvbnZlcnNpb25BY2N1cmFjeSxcbiAgICAgIG1hdHJpeDogb3B0cy5tYXRyaXgsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBEdXJhdGlvbkxpa2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0IHwgbnVtYmVyIHwgRHVyYXRpb259IGR1cmF0aW9uTGlrZVxuICAgKiBPbmUgb2Y6XG4gICAqIC0gb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFycycgYW5kICdob3VycycuXG4gICAqIC0gbnVtYmVyIHJlcHJlc2VudGluZyBtaWxsaXNlY29uZHNcbiAgICogLSBEdXJhdGlvbiBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHN0YXRpYyBmcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uTGlrZSkge1xuICAgIGlmIChpc051bWJlcihkdXJhdGlvbkxpa2UpKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU1pbGxpcyhkdXJhdGlvbkxpa2UpO1xuICAgIH0gZWxzZSBpZiAoRHVyYXRpb24uaXNEdXJhdGlvbihkdXJhdGlvbkxpa2UpKSB7XG4gICAgICByZXR1cm4gZHVyYXRpb25MaWtlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uTGlrZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QoZHVyYXRpb25MaWtlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICBgVW5rbm93biBkdXJhdGlvbiBhcmd1bWVudCAke2R1cmF0aW9uTGlrZX0gb2YgdHlwZSAke3R5cGVvZiBkdXJhdGlvbkxpa2V9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBhbiBJU08gODYwMSBkdXJhdGlvbiBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGV4dCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBwcmVzZXQgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5tYXRyaXg9T2JqZWN0XSAtIHRoZSBwcmVzZXQgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjRHVyYXRpb25zXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1AzWTZNMVc0RFQxMkgzME01UycpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAzLCBtb250aHM6IDYsIHdlZWtzOiAxLCBkYXlzOiA0LCBob3VyczogMTIsIG1pbnV0ZXM6IDMwLCBzZWNvbmRzOiA1IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTTygnUFQyM0gnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjMgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQNVkzTScpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiA1LCBtb250aHM6IDMgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHN0YXRpYyBmcm9tSVNPKHRleHQsIG9wdHMpIHtcbiAgICBjb25zdCBbcGFyc2VkXSA9IHBhcnNlSVNPRHVyYXRpb24odGV4dCk7XG4gICAgaWYgKHBhcnNlZCkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QocGFyc2VkLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIGB0aGUgaW5wdXQgXCIke3RleHR9XCIgY2FuJ3QgYmUgcGFyc2VkIGFzIElTTyA4NjAxYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIER1cmF0aW9uIGZyb20gYW4gSVNPIDg2MDEgdGltZSBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGV4dCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBwcmVzZXQgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5tYXRyaXg9T2JqZWN0XSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnMTE6MjI6MzMuNDQ0JykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAyMiwgc2Vjb25kczogMzMsIG1pbGxpc2Vjb25kczogNDQ0IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJzExOjAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJ1QxMTowMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCcxMTAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJ1QxMTAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbUlTT1RpbWUodGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtwYXJzZWRdID0gcGFyc2VJU09UaW1lT25seSh0ZXh0KTtcbiAgICBpZiAocGFyc2VkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdChwYXJzZWQsIG9wdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcInVucGFyc2FibGVcIiwgYHRoZSBpbnB1dCBcIiR7dGV4dH1cIiBjYW4ndCBiZSBwYXJzZWQgYXMgSVNPIDg2MDFgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBzaW1wbGUgc3RyaW5nIG9mIHdoeSB0aGlzIGRhdGV0aW1lIGlzIGludmFsaWQuIFNob3VsZCBub3QgY29udGFpbiBwYXJhbWV0ZXJzIG9yIGFueXRoaW5nIGVsc2UgZGF0YS1kZXBlbmRlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtleHBsYW5hdGlvbj1udWxsXSAtIGxvbmdlciBleHBsYW5hdGlvbiwgbWF5IGluY2x1ZGUgcGFyYW1ldGVycyBhbmQgb3RoZXIgdXNlZnVsIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRHVyYXRpb24gaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZER1cmF0aW9uRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRHVyYXRpb24oeyBpbnZhbGlkIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIG5vcm1hbGl6ZVVuaXQodW5pdCkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB7XG4gICAgICB5ZWFyOiBcInllYXJzXCIsXG4gICAgICB5ZWFyczogXCJ5ZWFyc1wiLFxuICAgICAgcXVhcnRlcjogXCJxdWFydGVyc1wiLFxuICAgICAgcXVhcnRlcnM6IFwicXVhcnRlcnNcIixcbiAgICAgIG1vbnRoOiBcIm1vbnRoc1wiLFxuICAgICAgbW9udGhzOiBcIm1vbnRoc1wiLFxuICAgICAgd2VlazogXCJ3ZWVrc1wiLFxuICAgICAgd2Vla3M6IFwid2Vla3NcIixcbiAgICAgIGRheTogXCJkYXlzXCIsXG4gICAgICBkYXlzOiBcImRheXNcIixcbiAgICAgIGhvdXI6IFwiaG91cnNcIixcbiAgICAgIGhvdXJzOiBcImhvdXJzXCIsXG4gICAgICBtaW51dGU6IFwibWludXRlc1wiLFxuICAgICAgbWludXRlczogXCJtaW51dGVzXCIsXG4gICAgICBzZWNvbmQ6IFwic2Vjb25kc1wiLFxuICAgICAgc2Vjb25kczogXCJzZWNvbmRzXCIsXG4gICAgICBtaWxsaXNlY29uZDogXCJtaWxsaXNlY29uZHNcIixcbiAgICAgIG1pbGxpc2Vjb25kczogXCJtaWxsaXNlY29uZHNcIixcbiAgICB9W3VuaXQgPyB1bml0LnRvTG93ZXJDYXNlKCkgOiB1bml0XTtcblxuICAgIGlmICghbm9ybWFsaXplZCkgdGhyb3cgbmV3IEludmFsaWRVbml0RXJyb3IodW5pdCk7XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYSBEdXJhdGlvbi4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRHVyYXRpb24obykge1xuICAgIHJldHVybiAobyAmJiBvLmlzTHV4b25EdXJhdGlvbikgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0ICB0aGUgbG9jYWxlIG9mIGEgRHVyYXRpb24sIHN1Y2ggJ2VuLUdCJ1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubG9jYWxlIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEdXJhdGlvbiwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEdXJhdGlvblxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBzdHJpbmcuIFlvdSBtYXkgdXNlIHRoZXNlIHRva2VuczpcbiAgICogKiBgU2AgZm9yIG1pbGxpc2Vjb25kc1xuICAgKiAqIGBzYCBmb3Igc2Vjb25kc1xuICAgKiAqIGBtYCBmb3IgbWludXRlc1xuICAgKiAqIGBoYCBmb3IgaG91cnNcbiAgICogKiBgZGAgZm9yIGRheXNcbiAgICogKiBgd2AgZm9yIHdlZWtzXG4gICAqICogYE1gIGZvciBtb250aHNcbiAgICogKiBgeWAgZm9yIHllYXJzXG4gICAqIE5vdGVzOlxuICAgKiAqIEFkZCBwYWRkaW5nIGJ5IHJlcGVhdGluZyB0aGUgdG9rZW4sIGUuZy4gXCJ5eVwiIHBhZHMgdGhlIHllYXJzIHRvIHR3byBkaWdpdHMsIFwiaGhoaFwiIHBhZHMgdGhlIGhvdXJzIG91dCB0byBmb3VyIGRpZ2l0c1xuICAgKiAqIFRva2VucyBjYW4gYmUgZXNjYXBlZCBieSB3cmFwcGluZyB3aXRoIHNpbmdsZSBxdW90ZXMuXG4gICAqICogVGhlIGR1cmF0aW9uIHdpbGwgYmUgY29udmVydGVkIHRvIHRoZSBzZXQgb2YgdW5pdHMgaW4gdGhlIGZvcm1hdCBzdHJpbmcgdXNpbmcge0BsaW5rIER1cmF0aW9uI3NoaWZ0VG99IGFuZCB0aGUgRHVyYXRpb25zJ3MgY29udmVyc2lvbiBhY2N1cmFjeSBzZXR0aW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZmxvb3I9dHJ1ZV0gLSBmbG9vciBudW1lcmljYWwgdmFsdWVzXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcInkgZCBzXCIpIC8vPT4gXCIxIDYgMlwiXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcInl5IGRkIHNzc1wiKSAvLz0+IFwiMDEgMDYgMDAyXCJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvRm9ybWF0KFwiTSBTXCIpIC8vPT4gXCIxMiA1MTg0MDIwMDBcIlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0Zvcm1hdChmbXQsIG9wdHMgPSB7fSkge1xuICAgIC8vIHJldmVyc2UtY29tcGF0IHNpbmNlIDEuMjsgd2UgYWx3YXlzIHJvdW5kIGRvd24gbm93LCBuZXZlciB1cCwgYW5kIHdlIGRvIGl0IGJ5IGRlZmF1bHRcbiAgICBjb25zdCBmbXRPcHRzID0ge1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGZsb29yOiBvcHRzLnJvdW5kICE9PSBmYWxzZSAmJiBvcHRzLmZsb29yICE9PSBmYWxzZSxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRcbiAgICAgID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYywgZm10T3B0cykuZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKHRoaXMsIGZtdClcbiAgICAgIDogSU5WQUxJRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgRHVyYXRpb24gd2l0aCBhbGwgdW5pdHMgaW5jbHVkZWQuXG4gICAqIFRvIG1vZGlmeSBpdHMgYmVoYXZpb3IsIHVzZSBgbGlzdFN0eWxlYCBhbmQgYW55IEludGwuTnVtYmVyRm9ybWF0IG9wdGlvbiwgdGhvdWdoIGB1bml0RGlzcGxheWAgaXMgZXNwZWNpYWxseSByZWxldmFudC5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL051bWJlckZvcm1hdC9OdW1iZXJGb3JtYXQjb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIEZvcm1hdHRpbmcgb3B0aW9ucy4gQWNjZXB0cyB0aGUgc2FtZSBrZXlzIGFzIHRoZSBvcHRpb25zIHBhcmFtZXRlciBvZiB0aGUgbmF0aXZlIGBJbnRsLk51bWJlckZvcm1hdGAgY29uc3RydWN0b3IsIGFzIHdlbGwgYXMgYGxpc3RTdHlsZWAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5saXN0U3R5bGU9J25hcnJvdyddIC0gSG93IHRvIGZvcm1hdCB0aGUgbWVyZ2VkIGxpc3QuIENvcnJlc3BvbmRzIHRvIHRoZSBgc3R5bGVgIHByb3BlcnR5IG9mIHRoZSBvcHRpb25zIHBhcmFtZXRlciBvZiB0aGUgbmF0aXZlIGBJbnRsLkxpc3RGb3JtYXRgIGNvbnN0cnVjdG9yLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqc1xuICAgKiB2YXIgZHVyID0gRHVyYXRpb24uZnJvbU9iamVjdCh7IGRheXM6IDEsIGhvdXJzOiA1LCBtaW51dGVzOiA2IH0pXG4gICAqIGR1ci50b0h1bWFuKCkgLy89PiAnMSBkYXksIDUgaG91cnMsIDYgbWludXRlcydcbiAgICogZHVyLnRvSHVtYW4oeyBsaXN0U3R5bGU6IFwibG9uZ1wiIH0pIC8vPT4gJzEgZGF5LCA1IGhvdXJzLCBhbmQgNiBtaW51dGVzJ1xuICAgKiBkdXIudG9IdW1hbih7IHVuaXREaXNwbGF5OiBcInNob3J0XCIgfSkgLy89PiAnMSBkYXksIDUgaHIsIDYgbWluJ1xuICAgKiBgYGBcbiAgICovXG4gIHRvSHVtYW4ob3B0cyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEO1xuXG4gICAgY29uc3QgbCA9IG9yZGVyZWRVbml0c1xuICAgICAgLm1hcCgodW5pdCkgPT4ge1xuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLnZhbHVlc1t1bml0XTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sb2NcbiAgICAgICAgICAubnVtYmVyRm9ybWF0dGVyKHsgc3R5bGU6IFwidW5pdFwiLCB1bml0RGlzcGxheTogXCJsb25nXCIsIC4uLm9wdHMsIHVuaXQ6IHVuaXQuc2xpY2UoMCwgLTEpIH0pXG4gICAgICAgICAgLmZvcm1hdCh2YWwpO1xuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoKG4pID0+IG4pO1xuXG4gICAgcmV0dXJuIHRoaXMubG9jXG4gICAgICAubGlzdEZvcm1hdHRlcih7IHR5cGU6IFwiY29uanVuY3Rpb25cIiwgc3R5bGU6IG9wdHMubGlzdFN0eWxlIHx8IFwibmFycm93XCIsIC4uLm9wdHMgfSlcbiAgICAgIC5mb3JtYXQobCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEdXJhdGlvbidzIHZhbHVlcy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgdG9PYmplY3QoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB7fTtcbiAgICByZXR1cm4geyAuLi50aGlzLnZhbHVlcyB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uLlxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI0R1cmF0aW9uc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDMsIHNlY29uZHM6IDQ1IH0pLnRvSVNPKCkgLy89PiAnUDNZVDQ1UydcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNCwgc2Vjb25kczogNDUgfSkudG9JU08oKSAvLz0+ICdQNE1UNDVTJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbW9udGhzOiA1IH0pLnRvSVNPKCkgLy89PiAnUDVNJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWludXRlczogNSB9KS50b0lTTygpIC8vPT4gJ1BUNU0nXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtaWxsaXNlY29uZHM6IDYgfSkudG9JU08oKSAvLz0+ICdQVDAuMDA2UydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU08oKSB7XG4gICAgLy8gd2UgY291bGQgdXNlIHRoZSBmb3JtYXR0ZXIsIGJ1dCB0aGlzIGlzIGFuIGVhc2llciB3YXkgdG8gZ2V0IHRoZSBtaW5pbXVtIHN0cmluZ1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBzID0gXCJQXCI7XG4gICAgaWYgKHRoaXMueWVhcnMgIT09IDApIHMgKz0gdGhpcy55ZWFycyArIFwiWVwiO1xuICAgIGlmICh0aGlzLm1vbnRocyAhPT0gMCB8fCB0aGlzLnF1YXJ0ZXJzICE9PSAwKSBzICs9IHRoaXMubW9udGhzICsgdGhpcy5xdWFydGVycyAqIDMgKyBcIk1cIjtcbiAgICBpZiAodGhpcy53ZWVrcyAhPT0gMCkgcyArPSB0aGlzLndlZWtzICsgXCJXXCI7XG4gICAgaWYgKHRoaXMuZGF5cyAhPT0gMCkgcyArPSB0aGlzLmRheXMgKyBcIkRcIjtcbiAgICBpZiAodGhpcy5ob3VycyAhPT0gMCB8fCB0aGlzLm1pbnV0ZXMgIT09IDAgfHwgdGhpcy5zZWNvbmRzICE9PSAwIHx8IHRoaXMubWlsbGlzZWNvbmRzICE9PSAwKVxuICAgICAgcyArPSBcIlRcIjtcbiAgICBpZiAodGhpcy5ob3VycyAhPT0gMCkgcyArPSB0aGlzLmhvdXJzICsgXCJIXCI7XG4gICAgaWYgKHRoaXMubWludXRlcyAhPT0gMCkgcyArPSB0aGlzLm1pbnV0ZXMgKyBcIk1cIjtcbiAgICBpZiAodGhpcy5zZWNvbmRzICE9PSAwIHx8IHRoaXMubWlsbGlzZWNvbmRzICE9PSAwKVxuICAgICAgLy8gdGhpcyB3aWxsIGhhbmRsZSBcImZsb2F0aW5nIHBvaW50IG1hZG5lc3NcIiBieSByZW1vdmluZyBleHRyYSBkZWNpbWFsIHBsYWNlc1xuICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTg4MDA0L2lzLWZsb2F0aW5nLXBvaW50LW1hdGgtYnJva2VuXG4gICAgICBzICs9IHJvdW5kVG8odGhpcy5zZWNvbmRzICsgdGhpcy5taWxsaXNlY29uZHMgLyAxMDAwLCAzKSArIFwiU1wiO1xuICAgIGlmIChzID09PSBcIlBcIikgcyArPSBcIlQwU1wiO1xuICAgIHJldHVybiBzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uLCBmb3JtYXR0ZWQgYXMgYSB0aW1lIG9mIGRheS5cbiAgICogTm90ZSB0aGF0IHRoaXMgd2lsbCByZXR1cm4gbnVsbCBpZiB0aGUgZHVyYXRpb24gaXMgaW52YWxpZCwgbmVnYXRpdmUsIG9yIGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhbiAyNCBob3Vycy5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc01pbGxpc2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NTZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVByZWZpeD1mYWxzZV0gLSBpbmNsdWRlIHRoZSBgVGAgcHJlZml4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSgpIC8vPT4gJzExOjAwOjAwLjAwMCdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBzdXBwcmVzc01pbGxpc2Vjb25kczogdHJ1ZSB9KSAvLz0+ICcxMTowMDowMCdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBzdXBwcmVzc1NlY29uZHM6IHRydWUgfSkgLy89PiAnMTE6MDAnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgaW5jbHVkZVByZWZpeDogdHJ1ZSB9KSAvLz0+ICdUMTE6MDA6MDAuMDAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcxMTAwMDAuMDAwJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTT1RpbWUob3B0cyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgbWlsbGlzID0gdGhpcy50b01pbGxpcygpO1xuICAgIGlmIChtaWxsaXMgPCAwIHx8IG1pbGxpcyA+PSA4NjQwMDAwMCkgcmV0dXJuIG51bGw7XG5cbiAgICBvcHRzID0ge1xuICAgICAgc3VwcHJlc3NNaWxsaXNlY29uZHM6IGZhbHNlLFxuICAgICAgc3VwcHJlc3NTZWNvbmRzOiBmYWxzZSxcbiAgICAgIGluY2x1ZGVQcmVmaXg6IGZhbHNlLFxuICAgICAgZm9ybWF0OiBcImV4dGVuZGVkXCIsXG4gICAgICAuLi5vcHRzLFxuICAgICAgaW5jbHVkZU9mZnNldDogZmFsc2UsXG4gICAgfTtcblxuICAgIGNvbnN0IGRhdGVUaW1lID0gRGF0ZVRpbWUuZnJvbU1pbGxpcyhtaWxsaXMsIHsgem9uZTogXCJVVENcIiB9KTtcbiAgICByZXR1cm4gZGF0ZVRpbWUudG9JU09UaW1lKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIEpTT04uXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0lTTygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIGRlYnVnZ2luZy5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gYXBwcm9wcmlhdGUgZm9yIHRoZSBSRVBMLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBbU3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpXSgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gYER1cmF0aW9uIHsgdmFsdWVzOiAke0pTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVzKX0gfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgRHVyYXRpb24geyBJbnZhbGlkLCByZWFzb246ICR7dGhpcy5pbnZhbGlkUmVhc29ufSB9YDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBtaWxsaXNlY29uZHMgdmFsdWUgb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgdG9NaWxsaXMoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBOYU47XG5cbiAgICByZXR1cm4gZHVyYXRpb25Ub01pbGxpcyh0aGlzLm1hdHJpeCwgdGhpcy52YWx1ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gbWlsbGlzZWNvbmRzIHZhbHVlIG9mIHRoaXMgRHVyYXRpb24uIEFsaWFzIG9mIHtAbGluayB0b01pbGxpc31cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy50b01pbGxpcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBEdXJhdGlvbiBsb25nZXIgYnkgdGhlIHNwZWNpZmllZCBhbW91bnQuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgcGx1cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLFxuICAgICAgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IGsgb2Ygb3JkZXJlZFVuaXRzKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoZHVyLnZhbHVlcywgaykgfHwgaGFzT3duUHJvcGVydHkodGhpcy52YWx1ZXMsIGspKSB7XG4gICAgICAgIHJlc3VsdFtrXSA9IGR1ci5nZXQoaykgKyB0aGlzLmdldChrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUodGhpcywgeyB2YWx1ZXM6IHJlc3VsdCB9LCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIHRoaXMgRHVyYXRpb24gc2hvcnRlciBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgYW1vdW50IHRvIHN1YnRyYWN0LiBFaXRoZXIgYSBMdXhvbiBEdXJhdGlvbiwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCB0aGUgb2JqZWN0IGFyZ3VtZW50IHRvIER1cmF0aW9uLmZyb21PYmplY3QoKVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIG1pbnVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuXG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbik7XG4gICAgcmV0dXJuIHRoaXMucGx1cyhkdXIubmVnYXRlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIHRoaXMgRHVyYXRpb24gYnkgdGhlIHNwZWNpZmllZCBhbW91bnQuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIHVuaXQuIEFyaXR5IGlzIDEgb3IgMjogdGhlIHZhbHVlIG9mIHRoZSB1bml0IGFuZCwgb3B0aW9uYWxseSwgdGhlIHVuaXQgbmFtZS4gTXVzdCByZXR1cm4gYSBudW1iZXIuXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMSwgbWludXRlczogMzAgfSkubWFwVW5pdHMoeCA9PiB4ICogMikgLy89PiB7IGhvdXJzOiAyLCBtaW51dGVzOiA2MCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMSwgbWludXRlczogMzAgfSkubWFwVW5pdHMoKHgsIHUpID0+IHUgPT09IFwiaG91cnNcIiA/IHggKiAyIDogeCkgLy89PiB7IGhvdXJzOiAyLCBtaW51dGVzOiAzMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgbWFwVW5pdHMoZm4pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHRoaXMudmFsdWVzKSkge1xuICAgICAgcmVzdWx0W2tdID0gYXNOdW1iZXIoZm4odGhpcy52YWx1ZXNba10sIGspKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdmFsdWVzOiByZXN1bHQgfSwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkuZ2V0KCd5ZWFycycpIC8vPT4gMlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgnbW9udGhzJykgLy89PiAwXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkuZ2V0KCdkYXlzJykgLy89PiAzXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXNbRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1bml0KV07XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgdmFsdWVzIG9mIHNwZWNpZmllZCB1bml0cy4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSBhIG1hcHBpbmcgb2YgdW5pdHMgdG8gbnVtYmVyc1xuICAgKiBAZXhhbXBsZSBkdXIuc2V0KHsgeWVhcnM6IDIwMTcgfSlcbiAgICogQGV4YW1wbGUgZHVyLnNldCh7IGhvdXJzOiA4LCBtaW51dGVzOiAzMCB9KVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHNldCh2YWx1ZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG5cbiAgICBjb25zdCBtaXhlZCA9IHsgLi4udGhpcy52YWx1ZXMsIC4uLm5vcm1hbGl6ZU9iamVjdCh2YWx1ZXMsIER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpIH07XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdmFsdWVzOiBtaXhlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBsb2NhbGUgYW5kL29yIG51bWJlcmluZ1N5c3RlbS4gIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQGV4YW1wbGUgZHVyLnJlY29uZmlndXJlKHsgbG9jYWxlOiAnZW4tR0InIH0pXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgcmVjb25maWd1cmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgY29udmVyc2lvbkFjY3VyYWN5LCBtYXRyaXggfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSB9KTtcbiAgICBjb25zdCBvcHRzID0geyBsb2MsIG1hdHJpeCwgY29udmVyc2lvbkFjY3VyYWN5IH07XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBkdXJhdGlvbiBpbiB0aGUgc3BlY2lmaWVkIHVuaXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gYSB1bml0IHN1Y2ggYXMgJ21pbnV0ZXMnIG9yICdkYXlzJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMX0pLmFzKCdkYXlzJykgLy89PiAzNjVcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDF9KS5hcygnbW9udGhzJykgLy89PiAxMlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHtob3VyczogNjB9KS5hcygnZGF5cycpIC8vPT4gMi41XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGFzKHVuaXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5zaGlmdFRvKHVuaXQpLmdldCh1bml0KSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWR1Y2UgdGhpcyBEdXJhdGlvbiB0byBpdHMgY2Fub25pY2FsIHJlcHJlc2VudGF0aW9uIGluIGl0cyBjdXJyZW50IHVuaXRzLlxuICAgKiBBc3N1bWluZyB0aGUgb3ZlcmFsbCB2YWx1ZSBvZiB0aGUgRHVyYXRpb24gaXMgcG9zaXRpdmUsIHRoaXMgbWVhbnM6XG4gICAqIC0gZXhjZXNzaXZlIHZhbHVlcyBmb3IgbG93ZXItb3JkZXIgdW5pdHMgYXJlIGNvbnZlcnRlZCB0byBoaWdoZXItb3JkZXIgdW5pdHMgKGlmIHBvc3NpYmxlLCBzZWUgZmlyc3QgYW5kIHNlY29uZCBleGFtcGxlKVxuICAgKiAtIG5lZ2F0aXZlIGxvd2VyLW9yZGVyIHVuaXRzIGFyZSBjb252ZXJ0ZWQgdG8gaGlnaGVyIG9yZGVyIHVuaXRzICh0aGVyZSBtdXN0IGJlIHN1Y2ggYSBoaWdoZXIgb3JkZXIgdW5pdCwgb3RoZXJ3aXNlXG4gICAqICAgdGhlIG92ZXJhbGwgdmFsdWUgd291bGQgYmUgbmVnYXRpdmUsIHNlZSB0aGlyZCBleGFtcGxlKVxuICAgKiAtIGZyYWN0aW9uYWwgdmFsdWVzIGZvciBoaWdoZXItb3JkZXIgdW5pdHMgYXJlIGNvbnZlcnRlZCB0byBsb3dlci1vcmRlciB1bml0cyAoaWYgcG9zc2libGUsIHNlZSBmb3VydGggZXhhbXBsZSlcbiAgICpcbiAgICogSWYgdGhlIG92ZXJhbGwgdmFsdWUgaXMgbmVnYXRpdmUsIHRoZSByZXN1bHQgb2YgdGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgdGhpcy5uZWdhdGUoKS5ub3JtYWxpemUoKS5uZWdhdGUoKWAuXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMiwgZGF5czogNTAwMCB9KS5ub3JtYWxpemUoKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMTUsIGRheXM6IDI1NSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBkYXlzOiA1MDAwIH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGRheXM6IDUwMDAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEyLCBtaW51dGVzOiAtNDUgfSkubm9ybWFsaXplKCkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAxNSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMi41LCBkYXlzOiAwLCBob3VyczogMCB9KS5ub3JtYWxpemUoKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMiwgZGF5czogMTgyLCBob3VyczogMTIgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgdmFscyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICBub3JtYWxpemVWYWx1ZXModGhpcy5tYXRyaXgsIHZhbHMpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IHZhbHVlczogdmFscyB9LCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNjYWxlIHVuaXRzIHRvIGl0cyBsYXJnZXN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtaWxsaXNlY29uZHM6IDkwMDAwIH0pLnJlc2NhbGUoKS50b09iamVjdCgpIC8vPT4geyBtaW51dGVzOiAxLCBzZWNvbmRzOiAzMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgcmVzY2FsZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgdmFscyA9IHJlbW92ZVplcm9lcyh0aGlzLm5vcm1hbGl6ZSgpLnNoaWZ0VG9BbGwoKS50b09iamVjdCgpKTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywgeyB2YWx1ZXM6IHZhbHMgfSwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCB0aGlzIER1cmF0aW9uIGludG8gaXRzIHJlcHJlc2VudGF0aW9uIGluIGEgZGlmZmVyZW50IHNldCBvZiB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5zaGlmdFRvKCdtaW51dGVzJywgJ21pbGxpc2Vjb25kcycpLnRvT2JqZWN0KCkgLy89PiB7IG1pbnV0ZXM6IDYwLCBtaWxsaXNlY29uZHM6IDMwMDAwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzaGlmdFRvKC4uLnVuaXRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKHVuaXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdW5pdHMgPSB1bml0cy5tYXAoKHUpID0+IER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQodSkpO1xuXG4gICAgY29uc3QgYnVpbHQgPSB7fSxcbiAgICAgIGFjY3VtdWxhdGVkID0ge30sXG4gICAgICB2YWxzID0gdGhpcy50b09iamVjdCgpO1xuICAgIGxldCBsYXN0VW5pdDtcblxuICAgIGZvciAoY29uc3QgayBvZiBvcmRlcmVkVW5pdHMpIHtcbiAgICAgIGlmICh1bml0cy5pbmRleE9mKGspID49IDApIHtcbiAgICAgICAgbGFzdFVuaXQgPSBrO1xuXG4gICAgICAgIGxldCBvd24gPSAwO1xuXG4gICAgICAgIC8vIGFueXRoaW5nIHdlIGhhdmVuJ3QgYm9pbGVkIGRvd24geWV0IHNob3VsZCBnZXQgYm9pbGVkIHRvIHRoaXMgdW5pdFxuICAgICAgICBmb3IgKGNvbnN0IGFrIGluIGFjY3VtdWxhdGVkKSB7XG4gICAgICAgICAgb3duICs9IHRoaXMubWF0cml4W2FrXVtrXSAqIGFjY3VtdWxhdGVkW2FrXTtcbiAgICAgICAgICBhY2N1bXVsYXRlZFtha10gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGx1cyBhbnl0aGluZyB0aGF0J3MgYWxyZWFkeSBpbiB0aGlzIHVuaXRcbiAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHNba10pKSB7XG4gICAgICAgICAgb3duICs9IHZhbHNba107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvbmx5IGtlZXAgdGhlIGludGVnZXIgcGFydCBmb3Igbm93IGluIHRoZSBob3BlcyBvZiBwdXR0aW5nIGFueSBkZWNpbWFsIHBhcnRcbiAgICAgICAgLy8gaW50byBhIHNtYWxsZXIgdW5pdCBsYXRlclxuICAgICAgICBjb25zdCBpID0gTWF0aC50cnVuYyhvd24pO1xuICAgICAgICBidWlsdFtrXSA9IGk7XG4gICAgICAgIGFjY3VtdWxhdGVkW2tdID0gKG93biAqIDEwMDAgLSBpICogMTAwMCkgLyAxMDAwO1xuXG4gICAgICAgIC8vIG90aGVyd2lzZSwga2VlcCBpdCBpbiB0aGUgd2luZ3MgdG8gYm9pbCBpdCBsYXRlclxuICAgICAgfSBlbHNlIGlmIChpc051bWJlcih2YWxzW2tdKSkge1xuICAgICAgICBhY2N1bXVsYXRlZFtrXSA9IHZhbHNba107XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYW55dGhpbmcgbGVmdG92ZXIgYmVjb21lcyB0aGUgZGVjaW1hbCBmb3IgdGhlIGxhc3QgdW5pdFxuICAgIC8vIGxhc3RVbml0IG11c3QgYmUgZGVmaW5lZCBzaW5jZSB1bml0cyBpcyBub3QgZW1wdHlcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhY2N1bXVsYXRlZCkge1xuICAgICAgaWYgKGFjY3VtdWxhdGVkW2tleV0gIT09IDApIHtcbiAgICAgICAgYnVpbHRbbGFzdFVuaXRdICs9XG4gICAgICAgICAga2V5ID09PSBsYXN0VW5pdCA/IGFjY3VtdWxhdGVkW2tleV0gOiBhY2N1bXVsYXRlZFtrZXldIC8gdGhpcy5tYXRyaXhbbGFzdFVuaXRdW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgbm9ybWFsaXplVmFsdWVzKHRoaXMubWF0cml4LCBidWlsdCk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdmFsdWVzOiBidWlsdCB9LCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaGlmdCB0aGlzIER1cmF0aW9uIHRvIGFsbCBhdmFpbGFibGUgdW5pdHMuXG4gICAqIFNhbWUgYXMgc2hpZnRUbyhcInllYXJzXCIsIFwibW9udGhzXCIsIFwid2Vla3NcIiwgXCJkYXlzXCIsIFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiLCBcIm1pbGxpc2Vjb25kc1wiKVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHNoaWZ0VG9BbGwoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIHJldHVybiB0aGlzLnNoaWZ0VG8oXG4gICAgICBcInllYXJzXCIsXG4gICAgICBcIm1vbnRoc1wiLFxuICAgICAgXCJ3ZWVrc1wiLFxuICAgICAgXCJkYXlzXCIsXG4gICAgICBcImhvdXJzXCIsXG4gICAgICBcIm1pbnV0ZXNcIixcbiAgICAgIFwic2Vjb25kc1wiLFxuICAgICAgXCJtaWxsaXNlY29uZHNcIlxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBuZWdhdGl2ZSBvZiB0aGlzIER1cmF0aW9uLlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEsIHNlY29uZHM6IDMwIH0pLm5lZ2F0ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAtMSwgc2Vjb25kczogLTMwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBuZWdhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IG5lZ2F0ZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModGhpcy52YWx1ZXMpKSB7XG4gICAgICBuZWdhdGVkW2tdID0gdGhpcy52YWx1ZXNba10gPT09IDAgPyAwIDogLXRoaXMudmFsdWVzW2tdO1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmUodGhpcywgeyB2YWx1ZXM6IG5lZ2F0ZWQgfSwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB5ZWFycy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB5ZWFycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMueWVhcnMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHF1YXJ0ZXJzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHF1YXJ0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5xdWFydGVycyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbW9udGhzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG1vbnRocygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubW9udGhzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrc1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy53ZWVrcyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5cy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBkYXlzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5kYXlzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBob3Vycy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBob3VycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuaG91cnMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1pbnV0ZXMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgbWludXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWludXRlcyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc2Vjb25kcy5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnNlY29uZHMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1pbGxpc2Vjb25kcy5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG1pbGxpc2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWlsbGlzZWNvbmRzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBEdXJhdGlvbiBpcyBpbnZhbGlkLiBJbnZhbGlkIGR1cmF0aW9ucyBhcmUgcmV0dXJuZWQgYnkgZGlmZiBvcGVyYXRpb25zXG4gICAqIG9uIGludmFsaWQgRGF0ZVRpbWVzIG9yIEludGVydmFscy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPT09IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgRHVyYXRpb24gYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIER1cmF0aW9uIGlzIHZhbGlkXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldCBpbnZhbGlkUmVhc29uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQucmVhc29uIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIER1cmF0aW9uIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEdXJhdGlvbiBpcyB2YWxpZFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGludmFsaWRFeHBsYW5hdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLmV4cGxhbmF0aW9uIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVja1xuICAgKiBUd28gRHVyYXRpb25zIGFyZSBlcXVhbCBpZmYgdGhleSBoYXZlIHRoZSBzYW1lIHVuaXRzIGFuZCB0aGUgc2FtZSB2YWx1ZXMgZm9yIGVhY2ggdW5pdC5cbiAgICogQHBhcmFtIHtEdXJhdGlvbn0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVxdWFscyhvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkIHx8ICFvdGhlci5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmxvYy5lcXVhbHMob3RoZXIubG9jKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVxKHYxLCB2Mikge1xuICAgICAgLy8gQ29uc2lkZXIgMCBhbmQgdW5kZWZpbmVkIGFzIGVxdWFsXG4gICAgICBpZiAodjEgPT09IHVuZGVmaW5lZCB8fCB2MSA9PT0gMCkgcmV0dXJuIHYyID09PSB1bmRlZmluZWQgfHwgdjIgPT09IDA7XG4gICAgICByZXR1cm4gdjEgPT09IHYyO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgdSBvZiBvcmRlcmVkVW5pdHMpIHtcbiAgICAgIGlmICghZXEodGhpcy52YWx1ZXNbdV0sIG90aGVyLnZhbHVlc1t1XSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIiwgImltcG9ydCBEYXRlVGltZSwgeyBmcmllbmRseURhdGVUaW1lIH0gZnJvbSBcIi4vZGF0ZXRpbWUuanNcIjtcbmltcG9ydCBEdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gXCIuL3NldHRpbmdzLmpzXCI7XG5pbXBvcnQgeyBJbnZhbGlkQXJndW1lbnRFcnJvciwgSW52YWxpZEludGVydmFsRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmltcG9ydCBJbnZhbGlkIGZyb20gXCIuL2ltcGwvaW52YWxpZC5qc1wiO1xuaW1wb3J0IEZvcm1hdHRlciBmcm9tIFwiLi9pbXBsL2Zvcm1hdHRlci5qc1wiO1xuaW1wb3J0ICogYXMgRm9ybWF0cyBmcm9tIFwiLi9pbXBsL2Zvcm1hdHMuanNcIjtcblxuY29uc3QgSU5WQUxJRCA9IFwiSW52YWxpZCBJbnRlcnZhbFwiO1xuXG4vLyBjaGVja3MgaWYgdGhlIHN0YXJ0IGlzIGVxdWFsIHRvIG9yIGJlZm9yZSB0aGUgZW5kXG5mdW5jdGlvbiB2YWxpZGF0ZVN0YXJ0RW5kKHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCB8fCAhc3RhcnQuaXNWYWxpZCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwibWlzc2luZyBvciBpbnZhbGlkIHN0YXJ0XCIpO1xuICB9IGVsc2UgaWYgKCFlbmQgfHwgIWVuZC5pc1ZhbGlkKSB7XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJtaXNzaW5nIG9yIGludmFsaWQgZW5kXCIpO1xuICB9IGVsc2UgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXG4gICAgICBcImVuZCBiZWZvcmUgc3RhcnRcIixcbiAgICAgIGBUaGUgZW5kIG9mIGFuIGludGVydmFsIG11c3QgYmUgYWZ0ZXIgaXRzIHN0YXJ0LCBidXQgeW91IGhhZCBzdGFydD0ke3N0YXJ0LnRvSVNPKCl9IGFuZCBlbmQ9JHtlbmQudG9JU08oKX1gXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEFuIEludGVydmFsIG9iamVjdCByZXByZXNlbnRzIGEgaGFsZi1vcGVuIGludGVydmFsIG9mIHRpbWUsIHdoZXJlIGVhY2ggZW5kcG9pbnQgaXMgYSB7QGxpbmsgRGF0ZVRpbWV9LiBDb25jZXB0dWFsbHksIGl0J3MgYSBjb250YWluZXIgZm9yIHRob3NlIHR3byBlbmRwb2ludHMsIGFjY29tcGFuaWVkIGJ5IG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCBjb21wYXJpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS5cbiAqXG4gKiBIZXJlIGlzIGEgYnJpZWYgb3ZlcnZpZXcgb2YgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCBtZXRob2RzIGFuZCBnZXR0ZXJzIGluIEludGVydmFsOlxuICpcbiAqICogKipDcmVhdGlvbioqIFRvIGNyZWF0ZSBhbiBJbnRlcnZhbCwgdXNlIHtAbGluayBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzfSwge0BsaW5rIEludGVydmFsLmFmdGVyfSwge0BsaW5rIEludGVydmFsLmJlZm9yZX0sIG9yIHtAbGluayBJbnRlcnZhbC5mcm9tSVNPfS5cbiAqICogKipBY2Nlc3NvcnMqKiBVc2Uge0BsaW5rIEludGVydmFsI3N0YXJ0fSBhbmQge0BsaW5rIEludGVydmFsI2VuZH0gdG8gZ2V0IHRoZSBzdGFydCBhbmQgZW5kLlxuICogKiAqKkludGVycm9nYXRpb24qKiBUbyBhbmFseXplIHRoZSBJbnRlcnZhbCwgdXNlIHtAbGluayBJbnRlcnZhbCNjb3VudH0sIHtAbGluayBJbnRlcnZhbCNsZW5ndGh9LCB7QGxpbmsgSW50ZXJ2YWwjaGFzU2FtZX0sIHtAbGluayBJbnRlcnZhbCNjb250YWluc30sIHtAbGluayBJbnRlcnZhbCNpc0FmdGVyfSwgb3Ige0BsaW5rIEludGVydmFsI2lzQmVmb3JlfS5cbiAqICogKipUcmFuc2Zvcm1hdGlvbioqIFRvIGNyZWF0ZSBvdGhlciBJbnRlcnZhbHMgb3V0IG9mIHRoaXMgb25lLCB1c2Uge0BsaW5rIEludGVydmFsI3NldH0sIHtAbGluayBJbnRlcnZhbCNzcGxpdEF0fSwge0BsaW5rIEludGVydmFsI3NwbGl0Qnl9LCB7QGxpbmsgSW50ZXJ2YWwjZGl2aWRlRXF1YWxseX0sIHtAbGluayBJbnRlcnZhbC5tZXJnZX0sIHtAbGluayBJbnRlcnZhbC54b3J9LCB7QGxpbmsgSW50ZXJ2YWwjdW5pb259LCB7QGxpbmsgSW50ZXJ2YWwjaW50ZXJzZWN0aW9ufSwgb3Ige0BsaW5rIEludGVydmFsI2RpZmZlcmVuY2V9LlxuICogKiAqKkNvbXBhcmlzb24qKiBUbyBjb21wYXJlIHRoaXMgSW50ZXJ2YWwgdG8gYW5vdGhlciBvbmUsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjZXF1YWxzfSwge0BsaW5rIEludGVydmFsI292ZXJsYXBzfSwge0BsaW5rIEludGVydmFsI2FidXRzU3RhcnR9LCB7QGxpbmsgSW50ZXJ2YWwjYWJ1dHNFbmR9LCB7QGxpbmsgSW50ZXJ2YWwjZW5ndWxmc31cbiAqICogKipPdXRwdXQqKiBUbyBjb252ZXJ0IHRoZSBJbnRlcnZhbCBpbnRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgc2VlIHtAbGluayBJbnRlcnZhbCN0b1N0cmluZ30sIHtAbGluayBJbnRlcnZhbCN0b0xvY2FsZVN0cmluZ30sIHtAbGluayBJbnRlcnZhbCN0b0lTT30sIHtAbGluayBJbnRlcnZhbCN0b0lTT0RhdGV9LCB7QGxpbmsgSW50ZXJ2YWwjdG9JU09UaW1lfSwge0BsaW5rIEludGVydmFsI3RvRm9ybWF0fSwgYW5kIHtAbGluayBJbnRlcnZhbCN0b0R1cmF0aW9ufS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJ2YWwge1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucyA9IGNvbmZpZy5zdGFydDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmUgPSBjb25maWcuZW5kO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaW52YWxpZCA9IGNvbmZpZy5pbnZhbGlkIHx8IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5pc0x1eG9uSW50ZXJ2YWwgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnZhbGlkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gc2ltcGxlIHN0cmluZyBvZiB3aHkgdGhpcyBJbnRlcnZhbCBpcyBpbnZhbGlkLiBTaG91bGQgbm90IGNvbnRhaW4gcGFyYW1ldGVycyBvciBhbnl0aGluZyBlbHNlIGRhdGEtZGVwZW5kZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZXhwbGFuYXRpb249bnVsbF0gLSBsb25nZXIgZXhwbGFuYXRpb24sIG1heSBpbmNsdWRlIHBhcmFtZXRlcnMgYW5kIG90aGVyIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICBzdGF0aWMgaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uID0gbnVsbCkge1xuICAgIGlmICghcmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJuZWVkIHRvIHNwZWNpZnkgYSByZWFzb24gdGhlIEludGVydmFsIGlzIGludmFsaWRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTtcblxuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnRlcnZhbEVycm9yKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEludGVydmFsKHsgaW52YWxpZCB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYSBzdGFydCBEYXRlVGltZSBhbmQgYW4gZW5kIERhdGVUaW1lLiBJbmNsdXNpdmUgb2YgdGhlIHN0YXJ0IGJ1dCBub3QgdGhlIGVuZC5cbiAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gc3RhcnRcbiAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gZW5kXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgc3RhdGljIGZyb21EYXRlVGltZXMoc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGJ1aWx0U3RhcnQgPSBmcmllbmRseURhdGVUaW1lKHN0YXJ0KSxcbiAgICAgIGJ1aWx0RW5kID0gZnJpZW5kbHlEYXRlVGltZShlbmQpO1xuXG4gICAgY29uc3QgdmFsaWRhdGVFcnJvciA9IHZhbGlkYXRlU3RhcnRFbmQoYnVpbHRTdGFydCwgYnVpbHRFbmQpO1xuXG4gICAgaWYgKHZhbGlkYXRlRXJyb3IgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbCh7XG4gICAgICAgIHN0YXJ0OiBidWlsdFN0YXJ0LFxuICAgICAgICBlbmQ6IGJ1aWx0RW5kLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZUVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gSW50ZXJ2YWwgZnJvbSBhIHN0YXJ0IERhdGVUaW1lIGFuZCBhIER1cmF0aW9uIHRvIGV4dGVuZCB0by5cbiAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gc3RhcnRcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsLlxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBhZnRlcihzdGFydCwgZHVyYXRpb24pIHtcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKSxcbiAgICAgIGR0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCk7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQsIGR0LnBsdXMoZHVyKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYW4gZW5kIERhdGVUaW1lIGFuZCBhIER1cmF0aW9uIHRvIGV4dGVuZCBiYWNrd2FyZHMgdG8uXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IGVuZFxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwuXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgc3RhdGljIGJlZm9yZShlbmQsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksXG4gICAgICBkdCA9IGZyaWVuZGx5RGF0ZVRpbWUoZW5kKTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdC5taW51cyhkdXIpLCBkdCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYW4gSVNPIDg2MDEgc3RyaW5nLlxuICAgKiBBY2NlcHRzIGA8c3RhcnQ+LzxlbmQ+YCwgYDxzdGFydD4vPGR1cmF0aW9uPmAsIGFuZCBgPGR1cmF0aW9uPi88ZW5kPmAgZm9ybWF0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgSVNPIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHNdIC0gb3B0aW9ucyB0byBwYXNzIHtAbGluayBEYXRlVGltZSNmcm9tSVNPfSBhbmQgb3B0aW9uYWxseSB7QGxpbmsgRHVyYXRpb24jZnJvbUlTT31cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBmcm9tSVNPKHRleHQsIG9wdHMpIHtcbiAgICBjb25zdCBbcywgZV0gPSAodGV4dCB8fCBcIlwiKS5zcGxpdChcIi9cIiwgMik7XG4gICAgaWYgKHMgJiYgZSkge1xuICAgICAgbGV0IHN0YXJ0LCBzdGFydElzVmFsaWQ7XG4gICAgICB0cnkge1xuICAgICAgICBzdGFydCA9IERhdGVUaW1lLmZyb21JU08ocywgb3B0cyk7XG4gICAgICAgIHN0YXJ0SXNWYWxpZCA9IHN0YXJ0LmlzVmFsaWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHN0YXJ0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsZXQgZW5kLCBlbmRJc1ZhbGlkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZW5kID0gRGF0ZVRpbWUuZnJvbUlTTyhlLCBvcHRzKTtcbiAgICAgICAgZW5kSXNWYWxpZCA9IGVuZC5pc1ZhbGlkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlbmRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydElzVmFsaWQgJiYgZW5kSXNWYWxpZCkge1xuICAgICAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCwgZW5kKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0SXNWYWxpZCkge1xuICAgICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tSVNPKGUsIG9wdHMpO1xuICAgICAgICBpZiAoZHVyLmlzVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gSW50ZXJ2YWwuYWZ0ZXIoc3RhcnQsIGR1cik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZW5kSXNWYWxpZCkge1xuICAgICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tSVNPKHMsIG9wdHMpO1xuICAgICAgICBpZiAoZHVyLmlzVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gSW50ZXJ2YWwuYmVmb3JlKGVuZCwgZHVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcInVucGFyc2FibGVcIiwgYHRoZSBpbnB1dCBcIiR7dGV4dH1cIiBjYW4ndCBiZSBwYXJzZWQgYXMgSVNPIDg2MDFgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYW4gSW50ZXJ2YWwuIFdvcmtzIGFjcm9zcyBjb250ZXh0IGJvdW5kYXJpZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0ludGVydmFsKG8pIHtcbiAgICByZXR1cm4gKG8gJiYgby5pc0x1eG9uSW50ZXJ2YWwpIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0YXJ0IG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAdHlwZSB7RGF0ZVRpbWV9XG4gICAqL1xuICBnZXQgc3RhcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMucyA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZW5kIG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAdHlwZSB7RGF0ZVRpbWV9XG4gICAqL1xuICBnZXQgZW5kKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmUgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxhc3QgRGF0ZVRpbWUgaW5jbHVkZWQgaW4gdGhlIGludGVydmFsIChzaW5jZSBlbmQgaXMgbm90IHBhcnQgb2YgdGhlIGludGVydmFsKVxuICAgKiBAdHlwZSB7RGF0ZVRpbWV9XG4gICAqL1xuICBnZXQgbGFzdERhdGVUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyAodGhpcy5lID8gdGhpcy5lLm1pbnVzKDEpIDogbnVsbCkgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGF0IGxlYXN0IGl0cyBzdGFydCwgbWVhbmluZyB0aGF0IHRoZSBJbnRlcnZhbCBpc24ndCAnYmFja3dhcmRzJy5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkUmVhc29uID09PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIEludGVydmFsIGlzIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIEludGVydmFsIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBJbnRlcnZhbCBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgSW50ZXJ2YWwgaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbCBpbiB0aGUgc3BlY2lmaWVkIHVuaXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIHJldHVybiB0aGUgbGVuZ3RoIGluLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBsZW5ndGgodW5pdCA9IFwibWlsbGlzZWNvbmRzXCIpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy50b0R1cmF0aW9uKC4uLlt1bml0XSkuZ2V0KHVuaXQpIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvdW50IG9mIG1pbnV0ZXMsIGhvdXJzLCBkYXlzLCBtb250aHMsIG9yIHllYXJzIGluY2x1ZGVkIGluIHRoZSBJbnRlcnZhbCwgZXZlbiBpbiBwYXJ0LlxuICAgKiBVbmxpa2Uge0BsaW5rIEludGVydmFsI2xlbmd0aH0gdGhpcyBjb3VudHMgc2VjdGlvbnMgb2YgdGhlIGNhbGVuZGFyLCBub3QgcGVyaW9kcyBvZiB0aW1lLCBlLmcuIHNwZWNpZnlpbmcgJ2RheSdcbiAgICogYXNrcyAnd2hhdCBkYXRlcyBhcmUgaW5jbHVkZWQgaW4gdGhpcyBpbnRlcnZhbD8nLCBub3QgJ2hvdyBtYW55IGRheXMgbG9uZyBpcyB0aGlzIGludGVydmFsPydcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt1bml0PSdtaWxsaXNlY29uZHMnXSAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY291bnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnVzZUxvY2FsZVdlZWtzPWZhbHNlXSAtIElmIHRydWUsIHVzZSB3ZWVrcyBiYXNlZCBvbiB0aGUgbG9jYWxlLCBpLmUuIHVzZSB0aGUgbG9jYWxlLWRlcGVuZGVudCBzdGFydCBvZiB0aGUgd2VlazsgdGhpcyBvcGVyYXRpb24gd2lsbCBhbHdheXMgdXNlIHRoZSBsb2NhbGUgb2YgdGhlIHN0YXJ0IERhdGVUaW1lXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGNvdW50KHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBOYU47XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnN0YXJ0LnN0YXJ0T2YodW5pdCwgb3B0cyk7XG4gICAgbGV0IGVuZDtcbiAgICBpZiAob3B0cz8udXNlTG9jYWxlV2Vla3MpIHtcbiAgICAgIGVuZCA9IHRoaXMuZW5kLnJlY29uZmlndXJlKHsgbG9jYWxlOiBzdGFydC5sb2NhbGUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZCA9IHRoaXMuZW5kO1xuICAgIH1cbiAgICBlbmQgPSBlbmQuc3RhcnRPZih1bml0LCBvcHRzKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihlbmQuZGlmZihzdGFydCwgdW5pdCkuZ2V0KHVuaXQpKSArIChlbmQudmFsdWVPZigpICE9PSB0aGlzLmVuZC52YWx1ZU9mKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgYW5kIGVuZCBhcmUgYm90aCBpbiB0aGUgc2FtZSB1bml0IG9mIHRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNoZWNrIHNhbWVuZXNzIG9uXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXNTYW1lKHVuaXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5pc0VtcHR5KCkgfHwgdGhpcy5lLm1pbnVzKDEpLmhhc1NhbWUodGhpcy5zLCB1bml0KSA6IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgaGFzIHRoZSBzYW1lIHN0YXJ0IGFuZCBlbmQgRGF0ZVRpbWVzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5zLnZhbHVlT2YoKSA9PT0gdGhpcy5lLnZhbHVlT2YoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgaXMgYWZ0ZXIgdGhlIHNwZWNpZmllZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQWZ0ZXIoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPiBkYXRlVGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGJlZm9yZSB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNCZWZvcmUoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmUgPD0gZGF0ZVRpbWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBjb250YWlucyB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgY29udGFpbnMoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPD0gZGF0ZVRpbWUgJiYgdGhpcy5lID4gZGF0ZVRpbWU7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRzXCIgdGhlIHN0YXJ0IGFuZC9vciBlbmQgZGF0ZXMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlcyAtIHRoZSB2YWx1ZXMgdG8gc2V0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHZhbHVlcy5zdGFydCAtIHRoZSBzdGFydGluZyBEYXRlVGltZVxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSB2YWx1ZXMuZW5kIC0gdGhlIGVuZGluZyBEYXRlVGltZVxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHNldCh7IHN0YXJ0LCBlbmQgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0IHx8IHRoaXMucywgZW5kIHx8IHRoaXMuZSk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBhdCBlYWNoIG9mIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY291bnQuXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3BsaXRBdCguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHNvcnRlZCA9IGRhdGVUaW1lc1xuICAgICAgICAubWFwKGZyaWVuZGx5RGF0ZVRpbWUpXG4gICAgICAgIC5maWx0ZXIoKGQpID0+IHRoaXMuY29udGFpbnMoZCkpXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnRvTWlsbGlzKCkgLSBiLnRvTWlsbGlzKCkpLFxuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgIGxldCB7IHMgfSA9IHRoaXMsXG4gICAgICBpID0gMDtcblxuICAgIHdoaWxlIChzIDwgdGhpcy5lKSB7XG4gICAgICBjb25zdCBhZGRlZCA9IHNvcnRlZFtpXSB8fCB0aGlzLmUsXG4gICAgICAgIG5leHQgPSArYWRkZWQgPiArdGhpcy5lID8gdGhpcy5lIDogYWRkZWQ7XG4gICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBuZXh0KSk7XG4gICAgICBzID0gbmV4dDtcbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGludG8gc21hbGxlciBJbnRlcnZhbHMsIGVhY2ggb2YgdGhlIHNwZWNpZmllZCBsZW5ndGguXG4gICAqIExlZnQgb3ZlciB0aW1lIGlzIGdyb3VwZWQgaW50byBhIHNtYWxsZXIgaW50ZXJ2YWxcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBsZW5ndGggb2YgZWFjaCByZXN1bHRpbmcgaW50ZXJ2YWwuXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3BsaXRCeShkdXJhdGlvbikge1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIWR1ci5pc1ZhbGlkIHx8IGR1ci5hcyhcIm1pbGxpc2Vjb25kc1wiKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGxldCB7IHMgfSA9IHRoaXMsXG4gICAgICBpZHggPSAxLFxuICAgICAgbmV4dDtcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICB3aGlsZSAocyA8IHRoaXMuZSkge1xuICAgICAgY29uc3QgYWRkZWQgPSB0aGlzLnN0YXJ0LnBsdXMoZHVyLm1hcFVuaXRzKCh4KSA9PiB4ICogaWR4KSk7XG4gICAgICBuZXh0ID0gK2FkZGVkID4gK3RoaXMuZSA/IHRoaXMuZSA6IGFkZGVkO1xuICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMocywgbmV4dCkpO1xuICAgICAgcyA9IG5leHQ7XG4gICAgICBpZHggKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGludG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc21hbGxlciBpbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJPZlBhcnRzIC0gVGhlIG51bWJlciBvZiBJbnRlcnZhbHMgdG8gZGl2aWRlIHRoZSBJbnRlcnZhbCBpbnRvLlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIGRpdmlkZUVxdWFsbHkobnVtYmVyT2ZQYXJ0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gW107XG4gICAgcmV0dXJuIHRoaXMuc3BsaXRCeSh0aGlzLmxlbmd0aCgpIC8gbnVtYmVyT2ZQYXJ0cykuc2xpY2UoMCwgbnVtYmVyT2ZQYXJ0cyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBvdmVybGFwcyB3aXRoIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWxcbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG92ZXJsYXBzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZSA+IG90aGVyLnMgJiYgdGhpcy5zIDwgb3RoZXIuZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGFkamFjZW50IHRvIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwncyBzdGFydC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGFidXRzU3RhcnQob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiArdGhpcy5lID09PSArb3RoZXIucztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgaXMgYWRqYWNlbnQgdG8gdGhlIHNwZWNpZmllZCBJbnRlcnZhbCdzIGVuZC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGFidXRzRW5kKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gK290aGVyLmUgPT09ICt0aGlzLnM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgSW50ZXJ2YWwgZnVsbHkgY29udGFpbnMgdGhlIHNwZWNpZmllZCBJbnRlcnZhbCwgc3BlY2lmaWNhbGx5IGlmIHRoZSBpbnRlcnNlY3QgKG9mIHRoaXMgSW50ZXJ2YWwgYW5kIHRoZSBvdGhlciBJbnRlcnZhbCkgaXMgZXF1YWwgdG8gdGhlIG90aGVyIEludGVydmFsOyBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlbmd1bGZzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IG90aGVyLnMgJiYgdGhpcy5lID49IG90aGVyLmU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBoYXMgdGhlIHNhbWUgc3RhcnQgYW5kIGVuZCBhcyB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIW90aGVyLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zLmVxdWFscyhvdGhlci5zKSAmJiB0aGlzLmUuZXF1YWxzKG90aGVyLmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCByZXByZXNlbnRpbmcgdGhlIGludGVyc2VjdGlvbiBvZiB0aGlzIEludGVydmFsIGFuZCB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSByZXN1bHRpbmcgSW50ZXJ2YWwgaGFzIHRoZSBtYXhpbXVtIHN0YXJ0IHRpbWUgYW5kIHRoZSBtaW5pbXVtIGVuZCB0aW1lIG9mIHRoZSB0d28gSW50ZXJ2YWxzLlxuICAgKiBSZXR1cm5zIG51bGwgaWYgdGhlIGludGVyc2VjdGlvbiBpcyBlbXB0eSwgbWVhbmluZywgdGhlIGludGVydmFscyBkb24ndCBpbnRlcnNlY3QuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgaW50ZXJzZWN0aW9uKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHMgPSB0aGlzLnMgPiBvdGhlci5zID8gdGhpcy5zIDogb3RoZXIucyxcbiAgICAgIGUgPSB0aGlzLmUgPCBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTtcblxuICAgIGlmIChzID49IGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgdW5pb24gb2YgdGhpcyBJbnRlcnZhbCBhbmQgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogU3BlY2lmaWNhbGx5LCB0aGUgcmVzdWx0aW5nIEludGVydmFsIGhhcyB0aGUgbWluaW11bSBzdGFydCB0aW1lIGFuZCB0aGUgbWF4aW11bSBlbmQgdGltZSBvZiB0aGUgdHdvIEludGVydmFscy5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICB1bmlvbihvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBzID0gdGhpcy5zIDwgb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsXG4gICAgICBlID0gdGhpcy5lID4gb3RoZXIuZSA/IHRoaXMuZSA6IG90aGVyLmU7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMocywgZSk7XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgYW4gYXJyYXkgb2YgSW50ZXJ2YWxzIGludG8gYW4gZXF1aXZhbGVudCBtaW5pbWFsIHNldCBvZiBJbnRlcnZhbHMuXG4gICAqIENvbWJpbmVzIG92ZXJsYXBwaW5nIGFuZCBhZGphY2VudCBJbnRlcnZhbHMuXG4gICAqIFRoZSByZXN1bHRpbmcgYXJyYXkgd2lsbCBjb250YWluIHRoZSBJbnRlcnZhbHMgaW4gYXNjZW5kaW5nIG9yZGVyLCB0aGF0IGlzLCBzdGFydGluZyB3aXRoIHRoZSBlYXJsaWVzdCBJbnRlcnZhbFxuICAgKiBhbmQgZW5kaW5nIHdpdGggdGhlIGxhdGVzdC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gaW50ZXJ2YWxzXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIG1lcmdlKGludGVydmFscykge1xuICAgIGNvbnN0IFtmb3VuZCwgZmluYWxdID0gaW50ZXJ2YWxzXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5zIC0gYi5zKVxuICAgICAgLnJlZHVjZShcbiAgICAgICAgKFtzb2ZhciwgY3VycmVudF0sIGl0ZW0pID0+IHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBbc29mYXIsIGl0ZW1dO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudC5vdmVybGFwcyhpdGVtKSB8fCBjdXJyZW50LmFidXRzU3RhcnQoaXRlbSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbc29mYXIsIGN1cnJlbnQudW5pb24oaXRlbSldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3NvZmFyLmNvbmNhdChbY3VycmVudF0pLCBpdGVtXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtbXSwgbnVsbF1cbiAgICAgICk7XG4gICAgaWYgKGZpbmFsKSB7XG4gICAgICBmb3VuZC5wdXNoKGZpbmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBJbnRlcnZhbHMgcmVwcmVzZW50aW5nIHRoZSBzcGFucyBvZiB0aW1lIHRoYXQgb25seSBhcHBlYXIgaW4gb25lIG9mIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge0FycmF5fSBpbnRlcnZhbHNcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgeG9yKGludGVydmFscykge1xuICAgIGxldCBzdGFydCA9IG51bGwsXG4gICAgICBjdXJyZW50Q291bnQgPSAwO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXSxcbiAgICAgIGVuZHMgPSBpbnRlcnZhbHMubWFwKChpKSA9PiBbXG4gICAgICAgIHsgdGltZTogaS5zLCB0eXBlOiBcInNcIiB9LFxuICAgICAgICB7IHRpbWU6IGkuZSwgdHlwZTogXCJlXCIgfSxcbiAgICAgIF0pLFxuICAgICAgZmxhdHRlbmVkID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdCguLi5lbmRzKSxcbiAgICAgIGFyciA9IGZsYXR0ZW5lZC5zb3J0KChhLCBiKSA9PiBhLnRpbWUgLSBiLnRpbWUpO1xuXG4gICAgZm9yIChjb25zdCBpIG9mIGFycikge1xuICAgICAgY3VycmVudENvdW50ICs9IGkudHlwZSA9PT0gXCJzXCIgPyAxIDogLTE7XG5cbiAgICAgIGlmIChjdXJyZW50Q291bnQgPT09IDEpIHtcbiAgICAgICAgc3RhcnQgPSBpLnRpbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhcnQgJiYgK3N0YXJ0ICE9PSAraS50aW1lKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMoc3RhcnQsIGkudGltZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBJbnRlcnZhbC5tZXJnZShyZXN1bHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgcmVwcmVzZW50aW5nIHRoZSBzcGFuIG9mIHRpbWUgaW4gdGhpcyBJbnRlcnZhbCB0aGF0IGRvZXNuJ3Qgb3ZlcmxhcCB3aXRoIGFueSBvZiB0aGUgc3BlY2lmaWVkIEludGVydmFscy5cbiAgICogQHBhcmFtIHsuLi5JbnRlcnZhbH0gaW50ZXJ2YWxzXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgZGlmZmVyZW5jZSguLi5pbnRlcnZhbHMpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwueG9yKFt0aGlzXS5jb25jYXQoaW50ZXJ2YWxzKSlcbiAgICAgIC5tYXAoKGkpID0+IHRoaXMuaW50ZXJzZWN0aW9uKGkpKVxuICAgICAgLmZpbHRlcigoaSkgPT4gaSAmJiAhaS5pc0VtcHR5KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQ7XG4gICAgcmV0dXJuIGBbJHt0aGlzLnMudG9JU08oKX0gXHUyMDEzICR7dGhpcy5lLnRvSVNPKCl9KWA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsIGFwcHJvcHJpYXRlIGZvciB0aGUgUkVQTC5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgW1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKV0oKSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGBJbnRlcnZhbCB7IHN0YXJ0OiAke3RoaXMucy50b0lTTygpfSwgZW5kOiAke3RoaXMuZS50b0lTTygpfSB9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBJbnRlcnZhbCB7IEludmFsaWQsIHJlYXNvbjogJHt0aGlzLmludmFsaWRSZWFzb259IH1gO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRpbmcgdGhpcyBJbnRlcnZhbC4gQWNjZXB0cyB0aGUgc2FtZSBvcHRpb25zIGFzIHRoZVxuICAgKiBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIGFuZCBhbnkgcHJlc2V0cyBkZWZpbmVkIGJ5IEx1eG9uLCBzdWNoIGFzXG4gICAqIHtAbGluayBEYXRlVGltZS5EQVRFX0ZVTEx9IG9yIHtAbGluayBEYXRlVGltZS5USU1FX1NJTVBMRX0uIFRoZSBleGFjdCBiZWhhdmlvciBvZiB0aGlzIG1ldGhvZFxuICAgKiBpcyBicm93c2VyLXNwZWNpZmljLCBidXQgaW4gZ2VuZXJhbCBpdCB3aWxsIHJldHVybiBhbiBhcHByb3ByaWF0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGVcbiAgICogSW50ZXJ2YWwgaW4gdGhlIGFzc2lnbmVkIGxvY2FsZS4gRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW5cbiAgICogc3BlY2lmaWVkLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbZm9ybWF0T3B0cz1EYXRlVGltZS5EQVRFX1NIT1JUXSAtIEVpdGhlciBhIERhdGVUaW1lIHByZXNldCBvclxuICAgKiBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gT3B0aW9ucyB0byBvdmVycmlkZSB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgc3RhcnQgRGF0ZVRpbWUuXG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21JU08oJzIwMjItMTEtMDdUMDk6MDBaLzIwMjItMTEtMDhUMDk6MDBaJykudG9Mb2NhbGVTdHJpbmcoKTsgLy89PiAxMS83LzIwMjIgXHUyMDEzIDExLzgvMjAyMlxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tSVNPKCcyMDIyLTExLTA3VDA5OjAwWi8yMDIyLTExLTA4VDA5OjAwWicpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCk7IC8vPT4gTm92ZW1iZXIgNyBcdTIwMTMgOCwgMjAyMlxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tSVNPKCcyMDIyLTExLTA3VDA5OjAwWi8yMDIyLTExLTA4VDA5OjAwWicpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCwgeyBsb2NhbGU6ICdmci1GUicgfSk7IC8vPT4gN1x1MjAxMzggbm92ZW1icmUgMjAyMlxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tSVNPKCcyMDIyLTExLTA3VDE3OjAwWi8yMDIyLTExLTA3VDE5OjAwWicpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKTsgLy89PiA2OjAwIFx1MjAxMyA4OjAwIFBNXG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21JU08oJzIwMjItMTEtMDdUMTc6MDBaLzIwMjItMTEtMDdUMTk6MDBaJykudG9Mb2NhbGVTdHJpbmcoeyB3ZWVrZGF5OiAnc2hvcnQnLCBtb250aDogJ3Nob3J0JywgZGF5OiAnMi1kaWdpdCcsIGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSk7IC8vPT4gTW9uLCBOb3YgMDcsIDY6MDAgXHUyMDEzIDg6MDAgcFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0xvY2FsZVN0cmluZyhmb3JtYXRPcHRzID0gRm9ybWF0cy5EQVRFX1NIT1JULCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkXG4gICAgICA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5zLmxvYy5jbG9uZShvcHRzKSwgZm9ybWF0T3B0cykuZm9ybWF0SW50ZXJ2YWwodGhpcylcbiAgICAgIDogSU5WQUxJRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbC5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBzYW1lIG9wdGlvbnMgYXMge0BsaW5rIERhdGVUaW1lI3RvSVNPfVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTTyhvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9JU08ob3B0cyl9LyR7dGhpcy5lLnRvSVNPKG9wdHMpfWA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGRhdGUgb2YgdGhpcyBJbnRlcnZhbC5cbiAgICogVGhlIHRpbWUgY29tcG9uZW50cyBhcmUgaWdub3JlZC5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTT0RhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9JU09EYXRlKCl9LyR7dGhpcy5lLnRvSVNPRGF0ZSgpfWA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRpbWUgb2YgdGhpcyBJbnRlcnZhbC5cbiAgICogVGhlIGRhdGUgY29tcG9uZW50cyBhcmUgaWdub3JlZC5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBzYW1lIG9wdGlvbnMgYXMge0BsaW5rIERhdGVUaW1lI3RvSVNPfVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTT1RpbWUob3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRDtcbiAgICByZXR1cm4gYCR7dGhpcy5zLnRvSVNPVGltZShvcHRzKX0vJHt0aGlzLmUudG9JU09UaW1lKG9wdHMpfWA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXRcbiAgICogc3RyaW5nLiAqKllvdSBtYXkgbm90IHdhbnQgdGhpcy4qKiBTZWUge0BsaW5rIEludGVydmFsI3RvTG9jYWxlU3RyaW5nfSBmb3IgYSBtb3JlIGZsZXhpYmxlXG4gICAqIGZvcm1hdHRpbmcgdG9vbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGVGb3JtYXQgLSBUaGUgZm9ybWF0IHN0cmluZy4gVGhpcyBzdHJpbmcgZm9ybWF0cyB0aGUgc3RhcnQgYW5kIGVuZCB0aW1lLlxuICAgKiBTZWUge0BsaW5rIERhdGVUaW1lI3RvRm9ybWF0fSBmb3IgZGV0YWlscy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gICcgXHUyMDEzICddIC0gQSBzZXBhcmF0b3IgdG8gcGxhY2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZFxuICAgKiByZXByZXNlbnRhdGlvbnMuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvRm9ybWF0KGRhdGVGb3JtYXQsIHsgc2VwYXJhdG9yID0gXCIgXHUyMDEzIFwiIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRDtcbiAgICByZXR1cm4gYCR7dGhpcy5zLnRvRm9ybWF0KGRhdGVGb3JtYXQpfSR7c2VwYXJhdG9yfSR7dGhpcy5lLnRvRm9ybWF0KGRhdGVGb3JtYXQpfWA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgRHVyYXRpb24gcmVwcmVzZW50aW5nIHRoZSB0aW1lIHNwYW5uZWQgYnkgdGhpcyBpbnRlcnZhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFt1bml0PVsnbWlsbGlzZWNvbmRzJ11dIC0gdGhlIHVuaXQgb3IgdW5pdHMgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIGluY2x1ZGUgaW4gdGhlIGR1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbigpLnRvT2JqZWN0KCkgLy89PiB7IG1pbGxpc2Vjb25kczogODg0ODkyNTcgfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKCdkYXlzJykudG9PYmplY3QoKSAvLz0+IHsgZGF5czogMS4wMjQxODEyMTUyNzc3Nzc4IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbihbJ2hvdXJzJywgJ21pbnV0ZXMnXSkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDI0LCBtaW51dGVzOiAzNC44MjA5NSB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oWydob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnXSkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDI0LCBtaW51dGVzOiAzNCwgc2Vjb25kczogNDkuMjU3IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbignc2Vjb25kcycpLnRvT2JqZWN0KCkgLy89PiB7IHNlY29uZHM6IDg4NDg5LjI1NyB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgdG9EdXJhdGlvbih1bml0LCBvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKHRoaXMuaW52YWxpZFJlYXNvbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmUuZGlmZih0aGlzLnMsIHVuaXQsIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBtYXBGbiBvbiB0aGUgaW50ZXJ2YWwgc3RhcnQgYW5kIGVuZCwgcmV0dXJuaW5nIGEgbmV3IEludGVydmFsIGZyb20gdGhlIHJlc3VsdGluZyBEYXRlVGltZXNcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWFwRm5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLm1hcEVuZHBvaW50cyhlbmRwb2ludCA9PiBlbmRwb2ludC50b1VUQygpKVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS5tYXBFbmRwb2ludHMoZW5kcG9pbnQgPT4gZW5kcG9pbnQucGx1cyh7IGhvdXJzOiAyIH0pKVxuICAgKi9cbiAgbWFwRW5kcG9pbnRzKG1hcEZuKSB7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMobWFwRm4odGhpcy5zKSwgbWFwRm4odGhpcy5lKSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgRGF0ZVRpbWUgZnJvbSBcIi4vZGF0ZXRpbWUuanNcIjtcbmltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi9zZXR0aW5ncy5qc1wiO1xuaW1wb3J0IExvY2FsZSBmcm9tIFwiLi9pbXBsL2xvY2FsZS5qc1wiO1xuaW1wb3J0IElBTkFab25lIGZyb20gXCIuL3pvbmVzL0lBTkFab25lLmpzXCI7XG5pbXBvcnQgeyBub3JtYWxpemVab25lIH0gZnJvbSBcIi4vaW1wbC96b25lVXRpbC5qc1wiO1xuXG5pbXBvcnQgeyBoYXNMb2NhbGVXZWVrSW5mbywgaGFzUmVsYXRpdmUgfSBmcm9tIFwiLi9pbXBsL3V0aWwuanNcIjtcblxuLyoqXG4gKiBUaGUgSW5mbyBjbGFzcyBjb250YWlucyBzdGF0aWMgbWV0aG9kcyBmb3IgcmV0cmlldmluZyBnZW5lcmFsIHRpbWUgYW5kIGRhdGUgcmVsYXRlZCBkYXRhLiBGb3IgZXhhbXBsZSwgaXQgaGFzIG1ldGhvZHMgZm9yIGZpbmRpbmcgb3V0IGlmIGEgdGltZSB6b25lIGhhcyBhIERTVCwgZm9yIGxpc3RpbmcgdGhlIG1vbnRocyBpbiBhbnkgc3VwcG9ydGVkIGxvY2FsZSwgYW5kIGZvciBkaXNjb3ZlcmluZyB3aGljaCBvZiBMdXhvbiBmZWF0dXJlcyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmZvIHtcbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgem9uZSBjb250YWlucyBhIERTVC5cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW3pvbmU9J2xvY2FsJ10gLSBab25lIHRvIGNoZWNrLiBEZWZhdWx0cyB0byB0aGUgZW52aXJvbm1lbnQncyBsb2NhbCB6b25lLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGhhc0RTVCh6b25lID0gU2V0dGluZ3MuZGVmYXVsdFpvbmUpIHtcbiAgICBjb25zdCBwcm90byA9IERhdGVUaW1lLm5vdygpLnNldFpvbmUoem9uZSkuc2V0KHsgbW9udGg6IDEyIH0pO1xuXG4gICAgcmV0dXJuICF6b25lLmlzVW5pdmVyc2FsICYmIHByb3RvLm9mZnNldCAhPT0gcHJvdG8uc2V0KHsgbW9udGg6IDYgfSkub2Zmc2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgem9uZSBpcyBhIHZhbGlkIElBTkEgc3BlY2lmaWVyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gem9uZSAtIFpvbmUgdG8gY2hlY2tcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc1ZhbGlkSUFOQVpvbmUoem9uZSkge1xuICAgIHJldHVybiBJQU5BWm9uZS5pc1ZhbGlkWm9uZSh6b25lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgaW5wdXQgaW50byBhIHtAbGluayBab25lfSBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBJZiBgaW5wdXRgIGlzIGFscmVhZHkgYSBab25lIGluc3RhbmNlLCBpdCBpcyByZXR1cm5lZCB1bmNoYW5nZWQuXG4gICAqICogSWYgYGlucHV0YCBpcyBhIHN0cmluZyBjb250YWluaW5nIGEgdmFsaWQgdGltZSB6b25lIG5hbWUsIGEgWm9uZSBpbnN0YW5jZVxuICAgKiAgIHdpdGggdGhhdCBuYW1lIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYSBzdHJpbmcgdGhhdCBkb2Vzbid0IHJlZmVyIHRvIGEga25vd24gdGltZSB6b25lLCBhIFpvbmVcbiAgICogICBpbnN0YW5jZSB3aXRoIHtAbGluayBab25lI2lzVmFsaWR9ID09IGZhbHNlIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dCBpcyBhIG51bWJlciwgYSBab25lIGluc3RhbmNlIHdpdGggdGhlIHNwZWNpZmllZCBmaXhlZCBvZmZzZXRcbiAgICogICBpbiBtaW51dGVzIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLCB0aGUgZGVmYXVsdCB6b25lIGlzIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfG51bWJlcn0gW2lucHV0XSAtIHRoZSB2YWx1ZSB0byBiZSBjb252ZXJ0ZWRcbiAgICogQHJldHVybiB7Wm9uZX1cbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemVab25lKGlucHV0KSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVpvbmUoaW5wdXQsIFNldHRpbmdzLmRlZmF1bHRab25lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHdlZWtkYXkgb24gd2hpY2ggdGhlIHdlZWsgc3RhcnRzIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gbG9jYWxlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBzdGFydCBvZiB0aGUgd2VlaywgMSBmb3IgTW9uZGF5IHRocm91Z2ggNyBmb3IgU3VuZGF5XG4gICAqL1xuICBzdGF0aWMgZ2V0U3RhcnRPZldlZWsoeyBsb2NhbGUgPSBudWxsLCBsb2NPYmogPSBudWxsIH0gPSB7fSkge1xuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlKSkuZ2V0U3RhcnRPZldlZWsoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGRheXMgbmVjZXNzYXJ5IGluIGEgd2VlayBiZWZvcmUgaXQgaXMgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBuZXh0IHllYXIgYWNjb3JkaW5nXG4gICAqIHRvIHRoZSBnaXZlbiBsb2NhbGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHN0YXRpYyBnZXRNaW5pbXVtRGF5c0luRmlyc3RXZWVrKHsgbG9jYWxlID0gbnVsbCwgbG9jT2JqID0gbnVsbCB9ID0ge30pIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSkpLmdldE1pbkRheXNJbkZpcnN0V2VlaygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2Vla2RheXMsIHdoaWNoIGFyZSBjb25zaWRlcmVkIHRoZSB3ZWVrZW5kIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gbG9jYWxlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHJldHVybnMge251bWJlcltdfSBhbiBhcnJheSBvZiB3ZWVrZGF5cywgMSBmb3IgTW9uZGF5IHRocm91Z2ggNyBmb3IgU3VuZGF5XG4gICAqL1xuICBzdGF0aWMgZ2V0V2Vla2VuZFdlZWtkYXlzKHsgbG9jYWxlID0gbnVsbCwgbG9jT2JqID0gbnVsbCB9ID0ge30pIHtcbiAgICAvLyBjb3B5IHRoZSBhcnJheSwgYmVjYXVzZSB3ZSBjYWNoZSBpdCBpbnRlcm5hbGx5XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUpKS5nZXRXZWVrZW5kRGF5cygpLnNsaWNlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIHN0YW5kYWxvbmUgbW9udGggbmFtZXMuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibnVtZXJpY1wiLCBcIjItZGlnaXRcIiwgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygpWzBdIC8vPT4gJ0phbnVhcnknXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdzaG9ydCcpWzBdIC8vPT4gJ0phbidcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ251bWVyaWMnKVswXSAvLz0+ICcxJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnLCB7IGxvY2FsZTogJ2ZyLUNBJyB9IClbMF0gLy89PiAnamFudi4nXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdudW1lcmljJywgeyBsb2NhbGU6ICdhcicgfSlbMF0gLy89PiAnXHUwNjYxJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbG9uZycsIHsgb3V0cHV0Q2FsZW5kYXI6ICdpc2xhbWljJyB9KVswXSAvLz0+ICdSYWJpXHUwMkJCIEknXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIG1vbnRocyhcbiAgICBsZW5ndGggPSBcImxvbmdcIixcbiAgICB7IGxvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwsIGxvY09iaiA9IG51bGwsIG91dHB1dENhbGVuZGFyID0gXCJncmVnb3J5XCIgfSA9IHt9XG4gICkge1xuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKSkubW9udGhzKGxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGZvcm1hdCBtb250aCBuYW1lcy5cbiAgICogRm9ybWF0IG1vbnRocyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIG1vbnRocyBpbiB0aGF0IHRoZXkncmUgbWVhbnQgdG8gYXBwZWFyIG5leHQgdG8gdGhlIGRheSBvZiB0aGUgbW9udGguIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0XG4gICAqIGNoYW5nZXMgdGhlIHN0cmluZy5cbiAgICogU2VlIHtAbGluayBJbmZvI21vbnRoc31cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibnVtZXJpY1wiLCBcIjItZGlnaXRcIiwgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBtb250aHNGb3JtYXQoXG4gICAgbGVuZ3RoID0gXCJsb25nXCIsXG4gICAgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsLCBvdXRwdXRDYWxlbmRhciA9IFwiZ3JlZ29yeVwiIH0gPSB7fVxuICApIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikpLm1vbnRocyhsZW5ndGgsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIHdlZWsgbmFtZXMuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIHdlZWtkYXkgcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQGV4YW1wbGUgSW5mby53ZWVrZGF5cygpWzBdIC8vPT4gJ01vbmRheSdcbiAgICogQGV4YW1wbGUgSW5mby53ZWVrZGF5cygnc2hvcnQnKVswXSAvLz0+ICdNb24nXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdmci1DQScgfSlbMF0gLy89PiAnbHVuLidcbiAgICogQGV4YW1wbGUgSW5mby53ZWVrZGF5cygnc2hvcnQnLCB7IGxvY2FsZTogJ2FyJyB9KVswXSAvLz0+ICdcdTA2MjdcdTA2NDRcdTA2MjdcdTA2MkJcdTA2NDZcdTA2NEFcdTA2NDYnXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIHdlZWtkYXlzKGxlbmd0aCA9IFwibG9uZ1wiLCB7IGxvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwsIGxvY09iaiA9IG51bGwgfSA9IHt9KSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgbnVsbCkpLndlZWtkYXlzKGxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGZvcm1hdCB3ZWVrIG5hbWVzLlxuICAgKiBGb3JtYXQgd2Vla2RheXMgZGlmZmVyIGZyb20gc3RhbmRhbG9uZSB3ZWVrZGF5cyBpbiB0aGF0IHRoZXkncmUgbWVhbnQgdG8gYXBwZWFyIG5leHQgdG8gbW9yZSBkYXRlIGluZm9ybWF0aW9uLiBJbiBzb21lIGxhbmd1YWdlcywgdGhhdFxuICAgKiBjaGFuZ2VzIHRoZSBzdHJpbmcuXG4gICAqIFNlZSB7QGxpbmsgSW5mbyN3ZWVrZGF5c31cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPW51bGxdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgd2Vla2RheXNGb3JtYXQoXG4gICAgbGVuZ3RoID0gXCJsb25nXCIsXG4gICAgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsIH0gPSB7fVxuICApIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBudWxsKSkud2Vla2RheXMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgbWVyaWRpZW1zLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQGV4YW1wbGUgSW5mby5tZXJpZGllbXMoKSAvLz0+IFsgJ0FNJywgJ1BNJyBdXG4gICAqIEBleGFtcGxlIEluZm8ubWVyaWRpZW1zKHsgbG9jYWxlOiAnbXknIH0pIC8vPT4gWyAnXHUxMDE0XHUxMDM2XHUxMDE0XHUxMDAwXHUxMDNBJywgJ1x1MTAwQVx1MTAxNFx1MTAzMScgXVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBtZXJpZGllbXMoeyBsb2NhbGUgPSBudWxsIH0gPSB7fSkge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSkubWVyaWRpZW1zKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGVyYXMsIHN1Y2ggYXMgWydCQycsICdBRCddLiBUaGUgbG9jYWxlIGNhbiBiZSBzcGVjaWZpZWQsIGJ1dCB0aGUgY2FsZW5kYXIgc3lzdGVtIGlzIGFsd2F5cyBHcmVnb3JpYW4uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdzaG9ydCddIC0gdGhlIGxlbmd0aCBvZiB0aGUgZXJhIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwic2hvcnRcIiBvciBcImxvbmdcIi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBleGFtcGxlIEluZm8uZXJhcygpIC8vPT4gWyAnQkMnLCAnQUQnIF1cbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCdsb25nJykgLy89PiBbICdCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJyBdXG4gICAqIEBleGFtcGxlIEluZm8uZXJhcygnbG9uZycsIHsgbG9jYWxlOiAnZnInIH0pIC8vPT4gWyAnYXZhbnQgSlx1MDBFOXN1cy1DaHJpc3QnLCAnYXByXHUwMEU4cyBKXHUwMEU5c3VzLUNocmlzdCcgXVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBlcmFzKGxlbmd0aCA9IFwic2hvcnRcIiwgeyBsb2NhbGUgPSBudWxsIH0gPSB7fSkge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVsbCwgXCJncmVnb3J5XCIpLmVyYXMobGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHNldCBvZiBhdmFpbGFibGUgZmVhdHVyZXMgaW4gdGhpcyBlbnZpcm9ubWVudC5cbiAgICogU29tZSBmZWF0dXJlcyBvZiBMdXhvbiBhcmUgbm90IGF2YWlsYWJsZSBpbiBhbGwgZW52aXJvbm1lbnRzLiBGb3IgZXhhbXBsZSwgb24gb2xkZXIgYnJvd3NlcnMsIHJlbGF0aXZlIHRpbWUgZm9ybWF0dGluZyBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUuIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgKiBLZXlzOlxuICAgKiAqIGByZWxhdGl2ZWA6IHdoZXRoZXIgdGhpcyBlbnZpcm9ubWVudCBzdXBwb3J0cyByZWxhdGl2ZSB0aW1lIGZvcm1hdHRpbmdcbiAgICogKiBgbG9jYWxlV2Vla2A6IHdoZXRoZXIgdGhpcyBlbnZpcm9ubWVudCBzdXBwb3J0cyBkaWZmZXJlbnQgd2Vla2RheXMgZm9yIHRoZSBzdGFydCBvZiB0aGUgd2VlayBiYXNlZCBvbiB0aGUgbG9jYWxlXG4gICAqIEBleGFtcGxlIEluZm8uZmVhdHVyZXMoKSAvLz0+IHsgcmVsYXRpdmU6IGZhbHNlLCBsb2NhbGVXZWVrOiB0cnVlIH1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGZlYXR1cmVzKCkge1xuICAgIHJldHVybiB7IHJlbGF0aXZlOiBoYXNSZWxhdGl2ZSgpLCBsb2NhbGVXZWVrOiBoYXNMb2NhbGVXZWVrSW5mbygpIH07XG4gIH1cbn1cbiIsICJpbXBvcnQgRHVyYXRpb24gZnJvbSBcIi4uL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIGRheURpZmYoZWFybGllciwgbGF0ZXIpIHtcbiAgY29uc3QgdXRjRGF5U3RhcnQgPSAoZHQpID0+IGR0LnRvVVRDKDAsIHsga2VlcExvY2FsVGltZTogdHJ1ZSB9KS5zdGFydE9mKFwiZGF5XCIpLnZhbHVlT2YoKSxcbiAgICBtcyA9IHV0Y0RheVN0YXJ0KGxhdGVyKSAtIHV0Y0RheVN0YXJ0KGVhcmxpZXIpO1xuICByZXR1cm4gTWF0aC5mbG9vcihEdXJhdGlvbi5mcm9tTWlsbGlzKG1zKS5hcyhcImRheXNcIikpO1xufVxuXG5mdW5jdGlvbiBoaWdoT3JkZXJEaWZmcyhjdXJzb3IsIGxhdGVyLCB1bml0cykge1xuICBjb25zdCBkaWZmZXJzID0gW1xuICAgIFtcInllYXJzXCIsIChhLCBiKSA9PiBiLnllYXIgLSBhLnllYXJdLFxuICAgIFtcInF1YXJ0ZXJzXCIsIChhLCBiKSA9PiBiLnF1YXJ0ZXIgLSBhLnF1YXJ0ZXIgKyAoYi55ZWFyIC0gYS55ZWFyKSAqIDRdLFxuICAgIFtcIm1vbnRoc1wiLCAoYSwgYikgPT4gYi5tb250aCAtIGEubW9udGggKyAoYi55ZWFyIC0gYS55ZWFyKSAqIDEyXSxcbiAgICBbXG4gICAgICBcIndlZWtzXCIsXG4gICAgICAoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBkYXlzID0gZGF5RGlmZihhLCBiKTtcbiAgICAgICAgcmV0dXJuIChkYXlzIC0gKGRheXMgJSA3KSkgLyA3O1xuICAgICAgfSxcbiAgICBdLFxuICAgIFtcImRheXNcIiwgZGF5RGlmZl0sXG4gIF07XG5cbiAgY29uc3QgcmVzdWx0cyA9IHt9O1xuICBjb25zdCBlYXJsaWVyID0gY3Vyc29yO1xuICBsZXQgbG93ZXN0T3JkZXIsIGhpZ2hXYXRlcjtcblxuICAvKiBUaGlzIGxvb3AgdHJpZXMgdG8gZGlmZiB1c2luZyBsYXJnZXIgdW5pdHMgZmlyc3QuXG4gICAgIElmIHdlIG92ZXJzaG9vdCwgd2UgYmFja3RyYWNrIGFuZCB0cnkgdGhlIG5leHQgc21hbGxlciB1bml0LlxuICAgICBcImN1cnNvclwiIHN0YXJ0cyBvdXQgYXQgdGhlIGVhcmxpZXIgdGltZXN0YW1wIGFuZCBtb3ZlcyBjbG9zZXIgYW5kIGNsb3NlciB0byBcImxhdGVyXCJcbiAgICAgYXMgd2UgdXNlIHNtYWxsZXIgYW5kIHNtYWxsZXIgdW5pdHMuXG4gICAgIGhpZ2hXYXRlciBrZWVwcyB0cmFjayBvZiB3aGVyZSB3ZSB3b3VsZCBiZSBpZiB3ZSBhZGRlZCBvbmUgbW9yZSBvZiB0aGUgc21hbGxlc3QgdW5pdCxcbiAgICAgdGhpcyBpcyB1c2VkIGxhdGVyIHRvIHBvdGVudGlhbGx5IGNvbnZlcnQgYW55IGRpZmZlcmVuY2Ugc21hbGxlciB0aGFuIHRoZSBzbWFsbGVzdCBoaWdoZXIgb3JkZXIgdW5pdFxuICAgICBpbnRvIGEgZnJhY3Rpb24gb2YgdGhhdCBzbWFsbGVzdCBoaWdoZXIgb3JkZXIgdW5pdFxuICAqL1xuICBmb3IgKGNvbnN0IFt1bml0LCBkaWZmZXJdIG9mIGRpZmZlcnMpIHtcbiAgICBpZiAodW5pdHMuaW5kZXhPZih1bml0KSA+PSAwKSB7XG4gICAgICBsb3dlc3RPcmRlciA9IHVuaXQ7XG5cbiAgICAgIHJlc3VsdHNbdW5pdF0gPSBkaWZmZXIoY3Vyc29yLCBsYXRlcik7XG4gICAgICBoaWdoV2F0ZXIgPSBlYXJsaWVyLnBsdXMocmVzdWx0cyk7XG5cbiAgICAgIGlmIChoaWdoV2F0ZXIgPiBsYXRlcikge1xuICAgICAgICAvLyB3ZSBvdmVyc2hvdCB0aGUgZW5kIHBvaW50LCBiYWNrdHJhY2sgY3Vyc29yIGJ5IDFcbiAgICAgICAgcmVzdWx0c1t1bml0XS0tO1xuICAgICAgICBjdXJzb3IgPSBlYXJsaWVyLnBsdXMocmVzdWx0cyk7XG5cbiAgICAgICAgLy8gaWYgd2UgYXJlIHN0aWxsIG92ZXJzaG9vdGluZyBub3csIHdlIG5lZWQgdG8gYmFja3RyYWNrIGFnYWluXG4gICAgICAgIC8vIHRoaXMgaGFwcGVucyBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgd2hlbiBkaWZmaW5nIHRpbWVzIGluIGRpZmZlcmVudCB6b25lcyxcbiAgICAgICAgLy8gYmVjYXVzZSB0aGlzIGNhbGN1bGF0aW9uIGlnbm9yZXMgdGltZSB6b25lc1xuICAgICAgICBpZiAoY3Vyc29yID4gbGF0ZXIpIHtcbiAgICAgICAgICAvLyBrZWVwIHRoZSBcIm92ZXJzaG90IGJ5IDFcIiBhcm91bmQgYXMgaGlnaFdhdGVyXG4gICAgICAgICAgaGlnaFdhdGVyID0gY3Vyc29yO1xuICAgICAgICAgIC8vIGJhY2t0cmFjayBjdXJzb3IgYnkgMVxuICAgICAgICAgIHJlc3VsdHNbdW5pdF0tLTtcbiAgICAgICAgICBjdXJzb3IgPSBlYXJsaWVyLnBsdXMocmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvciA9IGhpZ2hXYXRlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW2N1cnNvciwgcmVzdWx0cywgaGlnaFdhdGVyLCBsb3dlc3RPcmRlcl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChlYXJsaWVyLCBsYXRlciwgdW5pdHMsIG9wdHMpIHtcbiAgbGV0IFtjdXJzb3IsIHJlc3VsdHMsIGhpZ2hXYXRlciwgbG93ZXN0T3JkZXJdID0gaGlnaE9yZGVyRGlmZnMoZWFybGllciwgbGF0ZXIsIHVuaXRzKTtcblxuICBjb25zdCByZW1haW5pbmdNaWxsaXMgPSBsYXRlciAtIGN1cnNvcjtcblxuICBjb25zdCBsb3dlck9yZGVyVW5pdHMgPSB1bml0cy5maWx0ZXIoXG4gICAgKHUpID0+IFtcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIiwgXCJtaWxsaXNlY29uZHNcIl0uaW5kZXhPZih1KSA+PSAwXG4gICk7XG5cbiAgaWYgKGxvd2VyT3JkZXJVbml0cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaGlnaFdhdGVyIDwgbGF0ZXIpIHtcbiAgICAgIGhpZ2hXYXRlciA9IGN1cnNvci5wbHVzKHsgW2xvd2VzdE9yZGVyXTogMSB9KTtcbiAgICB9XG5cbiAgICBpZiAoaGlnaFdhdGVyICE9PSBjdXJzb3IpIHtcbiAgICAgIHJlc3VsdHNbbG93ZXN0T3JkZXJdID0gKHJlc3VsdHNbbG93ZXN0T3JkZXJdIHx8IDApICsgcmVtYWluaW5nTWlsbGlzIC8gKGhpZ2hXYXRlciAtIGN1cnNvcik7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZHVyYXRpb24gPSBEdXJhdGlvbi5mcm9tT2JqZWN0KHJlc3VsdHMsIG9wdHMpO1xuXG4gIGlmIChsb3dlck9yZGVyVW5pdHMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBEdXJhdGlvbi5mcm9tTWlsbGlzKHJlbWFpbmluZ01pbGxpcywgb3B0cylcbiAgICAgIC5zaGlmdFRvKC4uLmxvd2VyT3JkZXJVbml0cylcbiAgICAgIC5wbHVzKGR1cmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBwYXJzZU1pbGxpcywgaXNVbmRlZmluZWQsIHVudHJ1bmNhdGVZZWFyLCBzaWduZWRPZmZzZXQsIGhhc093blByb3BlcnR5IH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuaW1wb3J0IEZvcm1hdHRlciBmcm9tIFwiLi9mb3JtYXR0ZXIuanNcIjtcbmltcG9ydCBGaXhlZE9mZnNldFpvbmUgZnJvbSBcIi4uL3pvbmVzL2ZpeGVkT2Zmc2V0Wm9uZS5qc1wiO1xuaW1wb3J0IElBTkFab25lIGZyb20gXCIuLi96b25lcy9JQU5BWm9uZS5qc1wiO1xuaW1wb3J0IERhdGVUaW1lIGZyb20gXCIuLi9kYXRldGltZS5qc1wiO1xuaW1wb3J0IHsgZGlnaXRSZWdleCwgcGFyc2VEaWdpdHMgfSBmcm9tIFwiLi9kaWdpdHMuanNcIjtcbmltcG9ydCB7IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy5qc1wiO1xuXG5jb25zdCBNSVNTSU5HX0ZUUCA9IFwibWlzc2luZyBJbnRsLkRhdGVUaW1lRm9ybWF0LmZvcm1hdFRvUGFydHMgc3VwcG9ydFwiO1xuXG5mdW5jdGlvbiBpbnRVbml0KHJlZ2V4LCBwb3N0ID0gKGkpID0+IGkpIHtcbiAgcmV0dXJuIHsgcmVnZXgsIGRlc2VyOiAoW3NdKSA9PiBwb3N0KHBhcnNlRGlnaXRzKHMpKSB9O1xufVxuXG5jb25zdCBOQlNQID0gU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApO1xuY29uc3Qgc3BhY2VPck5CU1AgPSBgWyAke05CU1B9XWA7XG5jb25zdCBzcGFjZU9yTkJTUFJlZ0V4cCA9IG5ldyBSZWdFeHAoc3BhY2VPck5CU1AsIFwiZ1wiKTtcblxuZnVuY3Rpb24gZml4TGlzdFJlZ2V4KHMpIHtcbiAgLy8gbWFrZSBkb3RzIG9wdGlvbmFsIGFuZCBhbHNvIG1ha2UgdGhlbSBsaXRlcmFsXG4gIC8vIG1ha2Ugc3BhY2UgYW5kIG5vbiBicmVha2FibGUgc3BhY2UgY2hhcmFjdGVycyBpbnRlcmNoYW5nZWFibGVcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwuL2csIFwiXFxcXC4/XCIpLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsIHNwYWNlT3JOQlNQKTtcbn1cblxuZnVuY3Rpb24gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykge1xuICByZXR1cm4gc1xuICAgIC5yZXBsYWNlKC9cXC4vZywgXCJcIikgLy8gaWdub3JlIGRvdHMgdGhhdCB3ZXJlIG1hZGUgb3B0aW9uYWxcbiAgICAucmVwbGFjZShzcGFjZU9yTkJTUFJlZ0V4cCwgXCIgXCIpIC8vIGludGVyY2hhbmdlIHNwYWNlIGFuZCBuYnNwXG4gICAgLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG9uZU9mKHN0cmluZ3MsIHN0YXJ0SW5kZXgpIHtcbiAgaWYgKHN0cmluZ3MgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVnZXg6IFJlZ0V4cChzdHJpbmdzLm1hcChmaXhMaXN0UmVnZXgpLmpvaW4oXCJ8XCIpKSxcbiAgICAgIGRlc2VyOiAoW3NdKSA9PlxuICAgICAgICBzdHJpbmdzLmZpbmRJbmRleCgoaSkgPT4gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykgPT09IHN0cmlwSW5zZW5zaXRpdml0aWVzKGkpKSArIHN0YXJ0SW5kZXgsXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvZmZzZXQocmVnZXgsIGdyb3Vwcykge1xuICByZXR1cm4geyByZWdleCwgZGVzZXI6IChbLCBoLCBtXSkgPT4gc2lnbmVkT2Zmc2V0KGgsIG0pLCBncm91cHMgfTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlKHJlZ2V4KSB7XG4gIHJldHVybiB7IHJlZ2V4LCBkZXNlcjogKFtzXSkgPT4gcyB9O1xufVxuXG5mdW5jdGlvbiBlc2NhcGVUb2tlbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB0b2tlblxuICogQHBhcmFtIHtMb2NhbGV9IGxvY1xuICovXG5mdW5jdGlvbiB1bml0Rm9yVG9rZW4odG9rZW4sIGxvYykge1xuICBjb25zdCBvbmUgPSBkaWdpdFJlZ2V4KGxvYyksXG4gICAgdHdvID0gZGlnaXRSZWdleChsb2MsIFwiezJ9XCIpLFxuICAgIHRocmVlID0gZGlnaXRSZWdleChsb2MsIFwiezN9XCIpLFxuICAgIGZvdXIgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7NH1cIiksXG4gICAgc2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezZ9XCIpLFxuICAgIG9uZU9yVHdvID0gZGlnaXRSZWdleChsb2MsIFwiezEsMn1cIiksXG4gICAgb25lVG9UaHJlZSA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDN9XCIpLFxuICAgIG9uZVRvU2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezEsNn1cIiksXG4gICAgb25lVG9OaW5lID0gZGlnaXRSZWdleChsb2MsIFwiezEsOX1cIiksXG4gICAgdHdvVG9Gb3VyID0gZGlnaXRSZWdleChsb2MsIFwiezIsNH1cIiksXG4gICAgZm91clRvU2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezQsNn1cIiksXG4gICAgbGl0ZXJhbCA9ICh0KSA9PiAoeyByZWdleDogUmVnRXhwKGVzY2FwZVRva2VuKHQudmFsKSksIGRlc2VyOiAoW3NdKSA9PiBzLCBsaXRlcmFsOiB0cnVlIH0pLFxuICAgIHVuaXRhdGUgPSAodCkgPT4ge1xuICAgICAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICAgICAgcmV0dXJuIGxpdGVyYWwodCk7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHQudmFsKSB7XG4gICAgICAgIC8vIGVyYVxuICAgICAgICBjYXNlIFwiR1wiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MuZXJhcyhcInNob3J0XCIpLCAwKTtcbiAgICAgICAgY2FzZSBcIkdHXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5lcmFzKFwibG9uZ1wiKSwgMCk7XG4gICAgICAgIC8vIHllYXJzXG4gICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9TaXgpO1xuICAgICAgICBjYXNlIFwieXlcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcbiAgICAgICAgY2FzZSBcInl5eXlcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChmb3VyKTtcbiAgICAgICAgY2FzZSBcInl5eXl5XCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQoZm91clRvU2l4KTtcbiAgICAgICAgY2FzZSBcInl5eXl5eVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHNpeCk7XG4gICAgICAgIC8vIG1vbnRoc1xuICAgICAgICBjYXNlIFwiTVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcIk1NXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSBcIk1NTVwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwic2hvcnRcIiwgdHJ1ZSksIDEpO1xuICAgICAgICBjYXNlIFwiTU1NTVwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwibG9uZ1wiLCB0cnVlKSwgMSk7XG4gICAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJzaG9ydFwiLCBmYWxzZSksIDEpO1xuICAgICAgICBjYXNlIFwiTExMTFwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwibG9uZ1wiLCBmYWxzZSksIDEpO1xuICAgICAgICAvLyBkYXRlc1xuICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcImRkXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgLy8gb3JkaW5hbHNcbiAgICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1RocmVlKTtcbiAgICAgICAgY2FzZSBcIm9vb1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTtcbiAgICAgICAgLy8gdGltZVxuICAgICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgXCJtbVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwicVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcInFxXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgXCJzc1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9UaHJlZSk7XG4gICAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0aHJlZSk7XG4gICAgICAgIGNhc2UgXCJ1XCI6XG4gICAgICAgICAgcmV0dXJuIHNpbXBsZShvbmVUb05pbmUpO1xuICAgICAgICBjYXNlIFwidXVcIjpcbiAgICAgICAgICByZXR1cm4gc2ltcGxlKG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcInV1dVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZSk7XG4gICAgICAgIC8vIG1lcmlkaWVtXG4gICAgICAgIGNhc2UgXCJhXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tZXJpZGllbXMoKSwgMCk7XG4gICAgICAgIC8vIHdlZWtZZWFyIChrKVxuICAgICAgICBjYXNlIFwia2tra1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KGZvdXIpO1xuICAgICAgICBjYXNlIFwia2tcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcbiAgICAgICAgLy8gd2Vla051bWJlciAoVylcbiAgICAgICAgY2FzZSBcIldcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIC8vIHdlZWtkYXlzXG4gICAgICAgIGNhc2UgXCJFXCI6XG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lKTtcbiAgICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJzaG9ydFwiLCBmYWxzZSksIDEpO1xuICAgICAgICBjYXNlIFwiRUVFRVwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJsb25nXCIsIGZhbHNlKSwgMSk7XG4gICAgICAgIGNhc2UgXCJjY2NcIjpcbiAgICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwic2hvcnRcIiwgdHJ1ZSksIDEpO1xuICAgICAgICBjYXNlIFwiY2NjY1wiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJsb25nXCIsIHRydWUpLCAxKTtcbiAgICAgICAgLy8gb2Zmc2V0L3pvbmVcbiAgICAgICAgY2FzZSBcIlpcIjpcbiAgICAgICAgY2FzZSBcIlpaXCI6XG4gICAgICAgICAgcmV0dXJuIG9mZnNldChuZXcgUmVnRXhwKGAoWystXSR7b25lT3JUd28uc291cmNlfSkoPzo6KCR7dHdvLnNvdXJjZX0pKT9gKSwgMik7XG4gICAgICAgIGNhc2UgXCJaWlpcIjpcbiAgICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSgke3R3by5zb3VyY2V9KT9gKSwgMik7XG4gICAgICAgIC8vIHdlIGRvbid0IHN1cHBvcnQgWlpaWiAoUFNUKSBvciBaWlpaWiAoUGFjaWZpYyBTdGFuZGFyZCBUaW1lKSBpbiBwYXJzaW5nXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBhbnkgd2F5IHRvIGZpZ3VyZSBvdXQgd2hhdCB0aGV5IGFyZVxuICAgICAgICBjYXNlIFwielwiOlxuICAgICAgICAgIHJldHVybiBzaW1wbGUoL1thLXpfKy0vXXsxLDI1Nn0/L2kpO1xuICAgICAgICAvLyB0aGlzIHNwZWNpYWwtY2FzZSBcInRva2VuXCIgcmVwcmVzZW50cyBhIHBsYWNlIHdoZXJlIGEgbWFjcm8tdG9rZW4gZXhwYW5kZWQgaW50byBhIHdoaXRlLXNwYWNlIGxpdGVyYWxcbiAgICAgICAgLy8gaW4gdGhpcyBjYXNlIHdlIGFjY2VwdCBhbnkgbm9uLW5ld2xpbmUgd2hpdGUtc3BhY2VcbiAgICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAgICByZXR1cm4gc2ltcGxlKC9bXlxcU1xcblxccl0vKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gIGNvbnN0IHVuaXQgPSB1bml0YXRlKHRva2VuKSB8fCB7XG4gICAgaW52YWxpZFJlYXNvbjogTUlTU0lOR19GVFAsXG4gIH07XG5cbiAgdW5pdC50b2tlbiA9IHRva2VuO1xuXG4gIHJldHVybiB1bml0O1xufVxuXG5jb25zdCBwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbCA9IHtcbiAgeWVhcjoge1xuICAgIFwiMi1kaWdpdFwiOiBcInl5XCIsXG4gICAgbnVtZXJpYzogXCJ5eXl5eVwiLFxuICB9LFxuICBtb250aDoge1xuICAgIG51bWVyaWM6IFwiTVwiLFxuICAgIFwiMi1kaWdpdFwiOiBcIk1NXCIsXG4gICAgc2hvcnQ6IFwiTU1NXCIsXG4gICAgbG9uZzogXCJNTU1NXCIsXG4gIH0sXG4gIGRheToge1xuICAgIG51bWVyaWM6IFwiZFwiLFxuICAgIFwiMi1kaWdpdFwiOiBcImRkXCIsXG4gIH0sXG4gIHdlZWtkYXk6IHtcbiAgICBzaG9ydDogXCJFRUVcIixcbiAgICBsb25nOiBcIkVFRUVcIixcbiAgfSxcbiAgZGF5cGVyaW9kOiBcImFcIixcbiAgZGF5UGVyaW9kOiBcImFcIixcbiAgaG91cjEyOiB7XG4gICAgbnVtZXJpYzogXCJoXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiaGhcIixcbiAgfSxcbiAgaG91cjI0OiB7XG4gICAgbnVtZXJpYzogXCJIXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiSEhcIixcbiAgfSxcbiAgbWludXRlOiB7XG4gICAgbnVtZXJpYzogXCJtXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwibW1cIixcbiAgfSxcbiAgc2Vjb25kOiB7XG4gICAgbnVtZXJpYzogXCJzXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwic3NcIixcbiAgfSxcbiAgdGltZVpvbmVOYW1lOiB7XG4gICAgbG9uZzogXCJaWlpaWlwiLFxuICAgIHNob3J0OiBcIlpaWlwiLFxuICB9LFxufTtcblxuZnVuY3Rpb24gdG9rZW5Gb3JQYXJ0KHBhcnQsIGZvcm1hdE9wdHMsIHJlc29sdmVkT3B0cykge1xuICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSBwYXJ0O1xuXG4gIGlmICh0eXBlID09PSBcImxpdGVyYWxcIikge1xuICAgIGNvbnN0IGlzU3BhY2UgPSAvXlxccyskLy50ZXN0KHZhbHVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGl0ZXJhbDogIWlzU3BhY2UsXG4gICAgICB2YWw6IGlzU3BhY2UgPyBcIiBcIiA6IHZhbHVlLFxuICAgIH07XG4gIH1cblxuICBjb25zdCBzdHlsZSA9IGZvcm1hdE9wdHNbdHlwZV07XG5cbiAgLy8gVGhlIHVzZXIgbWlnaHQgaGF2ZSBleHBsaWNpdGx5IHNwZWNpZmllZCBob3VyMTIgb3IgaG91ckN5Y2xlXG4gIC8vIGlmIHNvLCByZXNwZWN0IHRoZWlyIGRlY2lzaW9uXG4gIC8vIGlmIG5vdCwgcmVmZXIgYmFjayB0byB0aGUgcmVzb2x2ZWRPcHRzLCB3aGljaCBhcmUgYmFzZWQgb24gdGhlIGxvY2FsZVxuICBsZXQgYWN0dWFsVHlwZSA9IHR5cGU7XG4gIGlmICh0eXBlID09PSBcImhvdXJcIikge1xuICAgIGlmIChmb3JtYXRPcHRzLmhvdXIxMiAhPSBudWxsKSB7XG4gICAgICBhY3R1YWxUeXBlID0gZm9ybWF0T3B0cy5ob3VyMTIgPyBcImhvdXIxMlwiIDogXCJob3VyMjRcIjtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdE9wdHMuaG91ckN5Y2xlICE9IG51bGwpIHtcbiAgICAgIGlmIChmb3JtYXRPcHRzLmhvdXJDeWNsZSA9PT0gXCJoMTFcIiB8fCBmb3JtYXRPcHRzLmhvdXJDeWNsZSA9PT0gXCJoMTJcIikge1xuICAgICAgICBhY3R1YWxUeXBlID0gXCJob3VyMTJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdHVhbFR5cGUgPSBcImhvdXIyNFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0b2tlbnMgb25seSBkaWZmZXJlbnRpYXRlIGJldHdlZW4gMjQgaG91cnMgb3Igbm90LFxuICAgICAgLy8gc28gd2UgZG8gbm90IG5lZWQgdG8gY2hlY2sgaG91ckN5Y2xlIGhlcmUsIHdoaWNoIGlzIGxlc3Mgc3VwcG9ydGVkIGFueXdheXNcbiAgICAgIGFjdHVhbFR5cGUgPSByZXNvbHZlZE9wdHMuaG91cjEyID8gXCJob3VyMTJcIiA6IFwiaG91cjI0XCI7XG4gICAgfVxuICB9XG4gIGxldCB2YWwgPSBwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbFthY3R1YWxUeXBlXTtcbiAgaWYgKHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YWwgPSB2YWxbc3R5bGVdO1xuICB9XG5cbiAgaWYgKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaXRlcmFsOiBmYWxzZSxcbiAgICAgIHZhbCxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gYnVpbGRSZWdleCh1bml0cykge1xuICBjb25zdCByZSA9IHVuaXRzLm1hcCgodSkgPT4gdS5yZWdleCkucmVkdWNlKChmLCByKSA9PiBgJHtmfSgke3Iuc291cmNlfSlgLCBcIlwiKTtcbiAgcmV0dXJuIFtgXiR7cmV9JGAsIHVuaXRzXTtcbn1cblxuZnVuY3Rpb24gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycykge1xuICBjb25zdCBtYXRjaGVzID0gaW5wdXQubWF0Y2gocmVnZXgpO1xuXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgY29uc3QgYWxsID0ge307XG4gICAgbGV0IG1hdGNoSW5kZXggPSAxO1xuICAgIGZvciAoY29uc3QgaSBpbiBoYW5kbGVycykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5KGhhbmRsZXJzLCBpKSkge1xuICAgICAgICBjb25zdCBoID0gaGFuZGxlcnNbaV0sXG4gICAgICAgICAgZ3JvdXBzID0gaC5ncm91cHMgPyBoLmdyb3VwcyArIDEgOiAxO1xuICAgICAgICBpZiAoIWgubGl0ZXJhbCAmJiBoLnRva2VuKSB7XG4gICAgICAgICAgYWxsW2gudG9rZW4udmFsWzBdXSA9IGguZGVzZXIobWF0Y2hlcy5zbGljZShtYXRjaEluZGV4LCBtYXRjaEluZGV4ICsgZ3JvdXBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2hJbmRleCArPSBncm91cHM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbbWF0Y2hlcywgYWxsXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW21hdGNoZXMsIHt9XTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUZyb21NYXRjaGVzKG1hdGNoZXMpIHtcbiAgY29uc3QgdG9GaWVsZCA9ICh0b2tlbikgPT4ge1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgIHJldHVybiBcIm1pbGxpc2Vjb25kXCI7XG4gICAgICBjYXNlIFwic1wiOlxuICAgICAgICByZXR1cm4gXCJzZWNvbmRcIjtcbiAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuICAgICAgY2FzZSBcImhcIjpcbiAgICAgIGNhc2UgXCJIXCI6XG4gICAgICAgIHJldHVybiBcImhvdXJcIjtcbiAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIHJldHVybiBcImRheVwiO1xuICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgcmV0dXJuIFwib3JkaW5hbFwiO1xuICAgICAgY2FzZSBcIkxcIjpcbiAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgIHJldHVybiBcIm1vbnRoXCI7XG4gICAgICBjYXNlIFwieVwiOlxuICAgICAgICByZXR1cm4gXCJ5ZWFyXCI7XG4gICAgICBjYXNlIFwiRVwiOlxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla2RheVwiO1xuICAgICAgY2FzZSBcIldcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla051bWJlclwiO1xuICAgICAgY2FzZSBcImtcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla1llYXJcIjtcbiAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgIHJldHVybiBcInF1YXJ0ZXJcIjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcblxuICBsZXQgem9uZSA9IG51bGw7XG4gIGxldCBzcGVjaWZpY09mZnNldDtcbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnopKSB7XG4gICAgem9uZSA9IElBTkFab25lLmNyZWF0ZShtYXRjaGVzLnopO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLlopKSB7XG4gICAgaWYgKCF6b25lKSB7XG4gICAgICB6b25lID0gbmV3IEZpeGVkT2Zmc2V0Wm9uZShtYXRjaGVzLlopO1xuICAgIH1cbiAgICBzcGVjaWZpY09mZnNldCA9IG1hdGNoZXMuWjtcbiAgfVxuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5xKSkge1xuICAgIG1hdGNoZXMuTSA9IChtYXRjaGVzLnEgLSAxKSAqIDMgKyAxO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLmgpKSB7XG4gICAgaWYgKG1hdGNoZXMuaCA8IDEyICYmIG1hdGNoZXMuYSA9PT0gMSkge1xuICAgICAgbWF0Y2hlcy5oICs9IDEyO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hlcy5oID09PSAxMiAmJiBtYXRjaGVzLmEgPT09IDApIHtcbiAgICAgIG1hdGNoZXMuaCA9IDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1hdGNoZXMuRyA9PT0gMCAmJiBtYXRjaGVzLnkpIHtcbiAgICBtYXRjaGVzLnkgPSAtbWF0Y2hlcy55O1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnUpKSB7XG4gICAgbWF0Y2hlcy5TID0gcGFyc2VNaWxsaXMobWF0Y2hlcy51KTtcbiAgfVxuXG4gIGNvbnN0IHZhbHMgPSBPYmplY3Qua2V5cyhtYXRjaGVzKS5yZWR1Y2UoKHIsIGspID0+IHtcbiAgICBjb25zdCBmID0gdG9GaWVsZChrKTtcbiAgICBpZiAoZikge1xuICAgICAgcltmXSA9IG1hdGNoZXNba107XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gW3ZhbHMsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XTtcbn1cblxubGV0IGR1bW15RGF0ZVRpbWVDYWNoZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGdldER1bW15RGF0ZVRpbWUoKSB7XG4gIGlmICghZHVtbXlEYXRlVGltZUNhY2hlKSB7XG4gICAgZHVtbXlEYXRlVGltZUNhY2hlID0gRGF0ZVRpbWUuZnJvbU1pbGxpcygxNTU1NTU1NTU1NTU1KTtcbiAgfVxuXG4gIHJldHVybiBkdW1teURhdGVUaW1lQ2FjaGU7XG59XG5cbmZ1bmN0aW9uIG1heWJlRXhwYW5kTWFjcm9Ub2tlbih0b2tlbiwgbG9jYWxlKSB7XG4gIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0T3B0cyA9IEZvcm1hdHRlci5tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuLnZhbCk7XG4gIGNvbnN0IHRva2VucyA9IGZvcm1hdE9wdHNUb1Rva2Vucyhmb3JtYXRPcHRzLCBsb2NhbGUpO1xuXG4gIGlmICh0b2tlbnMgPT0gbnVsbCB8fCB0b2tlbnMuaW5jbHVkZXModW5kZWZpbmVkKSkge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRNYWNyb1Rva2Vucyh0b2tlbnMsIGxvY2FsZSkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdCguLi50b2tlbnMubWFwKCh0KSA9PiBtYXliZUV4cGFuZE1hY3JvVG9rZW4odCwgbG9jYWxlKSkpO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZXhwb3J0IGNsYXNzIFRva2VuUGFyc2VyIHtcbiAgY29uc3RydWN0b3IobG9jYWxlLCBmb3JtYXQpIHtcbiAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcbiAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICB0aGlzLnRva2VucyA9IGV4cGFuZE1hY3JvVG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmb3JtYXQpLCBsb2NhbGUpO1xuICAgIHRoaXMudW5pdHMgPSB0aGlzLnRva2Vucy5tYXAoKHQpID0+IHVuaXRGb3JUb2tlbih0LCBsb2NhbGUpKTtcbiAgICB0aGlzLmRpc3F1YWxpZnlpbmdVbml0ID0gdGhpcy51bml0cy5maW5kKCh0KSA9PiB0LmludmFsaWRSZWFzb24pO1xuXG4gICAgaWYgKCF0aGlzLmRpc3F1YWxpZnlpbmdVbml0KSB7XG4gICAgICBjb25zdCBbcmVnZXhTdHJpbmcsIGhhbmRsZXJzXSA9IGJ1aWxkUmVnZXgodGhpcy51bml0cyk7XG4gICAgICB0aGlzLnJlZ2V4ID0gUmVnRXhwKHJlZ2V4U3RyaW5nLCBcImlcIik7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgfVxuICB9XG5cbiAgZXhwbGFpbkZyb21Ub2tlbnMoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIHsgaW5wdXQsIHRva2VuczogdGhpcy50b2tlbnMsIGludmFsaWRSZWFzb246IHRoaXMuaW52YWxpZFJlYXNvbiB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBbcmF3TWF0Y2hlcywgbWF0Y2hlc10gPSBtYXRjaChpbnB1dCwgdGhpcy5yZWdleCwgdGhpcy5oYW5kbGVycyksXG4gICAgICAgIFtyZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XSA9IG1hdGNoZXNcbiAgICAgICAgICA/IGRhdGVUaW1lRnJvbU1hdGNoZXMobWF0Y2hlcylcbiAgICAgICAgICA6IFtudWxsLCBudWxsLCB1bmRlZmluZWRdO1xuICAgICAgaWYgKGhhc093blByb3BlcnR5KG1hdGNoZXMsIFwiYVwiKSAmJiBoYXNPd25Qcm9wZXJ0eShtYXRjaGVzLCBcIkhcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFxuICAgICAgICAgIFwiQ2FuJ3QgaW5jbHVkZSBtZXJpZGllbSB3aGVuIHNwZWNpZnlpbmcgMjQtaG91ciBmb3JtYXRcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIHRva2VuczogdGhpcy50b2tlbnMsXG4gICAgICAgIHJlZ2V4OiB0aGlzLnJlZ2V4LFxuICAgICAgICByYXdNYXRjaGVzLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICByZXN1bHQsXG4gICAgICAgIHpvbmUsXG4gICAgICAgIHNwZWNpZmljT2Zmc2V0LFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gIXRoaXMuZGlzcXVhbGlmeWluZ1VuaXQ7XG4gIH1cblxuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNxdWFsaWZ5aW5nVW5pdCA/IHRoaXMuZGlzcXVhbGlmeWluZ1VuaXQuaW52YWxpZFJlYXNvbiA6IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCkge1xuICBjb25zdCBwYXJzZXIgPSBuZXcgVG9rZW5QYXJzZXIobG9jYWxlLCBmb3JtYXQpO1xuICByZXR1cm4gcGFyc2VyLmV4cGxhaW5Gcm9tVG9rZW5zKGlucHV0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpIHtcbiAgY29uc3QgeyByZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0LCBpbnZhbGlkUmVhc29uIH0gPSBleHBsYWluRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpO1xuICByZXR1cm4gW3Jlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRSZWFzb25dO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIGxvY2FsZSkge1xuICBpZiAoIWZvcm1hdE9wdHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGZvcm1hdHRlciA9IEZvcm1hdHRlci5jcmVhdGUobG9jYWxlLCBmb3JtYXRPcHRzKTtcbiAgY29uc3QgZGYgPSBmb3JtYXR0ZXIuZHRGb3JtYXR0ZXIoZ2V0RHVtbXlEYXRlVGltZSgpKTtcbiAgY29uc3QgcGFydHMgPSBkZi5mb3JtYXRUb1BhcnRzKCk7XG4gIGNvbnN0IHJlc29sdmVkT3B0cyA9IGRmLnJlc29sdmVkT3B0aW9ucygpO1xuICByZXR1cm4gcGFydHMubWFwKChwKSA9PiB0b2tlbkZvclBhcnQocCwgZm9ybWF0T3B0cywgcmVzb2x2ZWRPcHRzKSk7XG59XG4iLCAiaW1wb3J0IER1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5pbXBvcnQgSW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi9zZXR0aW5ncy5qc1wiO1xuaW1wb3J0IEluZm8gZnJvbSBcIi4vaW5mby5qc1wiO1xuaW1wb3J0IEZvcm1hdHRlciBmcm9tIFwiLi9pbXBsL2Zvcm1hdHRlci5qc1wiO1xuaW1wb3J0IEZpeGVkT2Zmc2V0Wm9uZSBmcm9tIFwiLi96b25lcy9maXhlZE9mZnNldFpvbmUuanNcIjtcbmltcG9ydCBMb2NhbGUgZnJvbSBcIi4vaW1wbC9sb2NhbGUuanNcIjtcbmltcG9ydCB7XG4gIGlzVW5kZWZpbmVkLFxuICBtYXliZUFycmF5LFxuICBpc0RhdGUsXG4gIGlzTnVtYmVyLFxuICBiZXN0QnksXG4gIGRheXNJbk1vbnRoLFxuICBkYXlzSW5ZZWFyLFxuICBpc0xlYXBZZWFyLFxuICB3ZWVrc0luV2Vla1llYXIsXG4gIG5vcm1hbGl6ZU9iamVjdCxcbiAgcm91bmRUbyxcbiAgb2JqVG9Mb2NhbFRTLFxuICBwYWRTdGFydCxcbn0gZnJvbSBcIi4vaW1wbC91dGlsLmpzXCI7XG5pbXBvcnQgeyBub3JtYWxpemVab25lIH0gZnJvbSBcIi4vaW1wbC96b25lVXRpbC5qc1wiO1xuaW1wb3J0IGRpZmYgZnJvbSBcIi4vaW1wbC9kaWZmLmpzXCI7XG5pbXBvcnQgeyBwYXJzZVJGQzI4MjJEYXRlLCBwYXJzZUlTT0RhdGUsIHBhcnNlSFRUUERhdGUsIHBhcnNlU1FMIH0gZnJvbSBcIi4vaW1wbC9yZWdleFBhcnNlci5qc1wiO1xuaW1wb3J0IHtcbiAgcGFyc2VGcm9tVG9rZW5zLFxuICBleHBsYWluRnJvbVRva2VucyxcbiAgZm9ybWF0T3B0c1RvVG9rZW5zLFxuICBleHBhbmRNYWNyb1Rva2VucyxcbiAgVG9rZW5QYXJzZXIsXG59IGZyb20gXCIuL2ltcGwvdG9rZW5QYXJzZXIuanNcIjtcbmltcG9ydCB7XG4gIGdyZWdvcmlhblRvV2VlayxcbiAgd2Vla1RvR3JlZ29yaWFuLFxuICBncmVnb3JpYW5Ub09yZGluYWwsXG4gIG9yZGluYWxUb0dyZWdvcmlhbixcbiAgaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEsXG4gIGhhc0ludmFsaWRXZWVrRGF0YSxcbiAgaGFzSW52YWxpZE9yZGluYWxEYXRhLFxuICBoYXNJbnZhbGlkVGltZURhdGEsXG4gIHVzZXNMb2NhbFdlZWtWYWx1ZXMsXG4gIGlzb1dlZWtkYXlUb0xvY2FsLFxufSBmcm9tIFwiLi9pbXBsL2NvbnZlcnNpb25zLmpzXCI7XG5pbXBvcnQgKiBhcyBGb3JtYXRzIGZyb20gXCIuL2ltcGwvZm9ybWF0cy5qc1wiO1xuaW1wb3J0IHtcbiAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yLFxuICBJbnZhbGlkVW5pdEVycm9yLFxuICBJbnZhbGlkRGF0ZVRpbWVFcnJvcixcbn0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgSW52YWxpZCBmcm9tIFwiLi9pbXBsL2ludmFsaWQuanNcIjtcblxuY29uc3QgSU5WQUxJRCA9IFwiSW52YWxpZCBEYXRlVGltZVwiO1xuY29uc3QgTUFYX0RBVEUgPSA4LjY0ZTE1O1xuXG5mdW5jdGlvbiB1bnN1cHBvcnRlZFpvbmUoem9uZSkge1xuICByZXR1cm4gbmV3IEludmFsaWQoXCJ1bnN1cHBvcnRlZCB6b25lXCIsIGB0aGUgem9uZSBcIiR7em9uZS5uYW1lfVwiIGlzIG5vdCBzdXBwb3J0ZWRgKTtcbn1cblxuLy8gd2UgY2FjaGUgd2VlayBkYXRhIG9uIHRoZSBEVCBvYmplY3QgYW5kIHRoaXMgaW50ZXJtZWRpYXRlcyB0aGUgY2FjaGVcbi8qKlxuICogQHBhcmFtIHtEYXRlVGltZX0gZHRcbiAqL1xuZnVuY3Rpb24gcG9zc2libHlDYWNoZWRXZWVrRGF0YShkdCkge1xuICBpZiAoZHQud2Vla0RhdGEgPT09IG51bGwpIHtcbiAgICBkdC53ZWVrRGF0YSA9IGdyZWdvcmlhblRvV2VlayhkdC5jKTtcbiAgfVxuICByZXR1cm4gZHQud2Vla0RhdGE7XG59XG5cbi8qKlxuICogQHBhcmFtIHtEYXRlVGltZX0gZHRcbiAqL1xuZnVuY3Rpb24gcG9zc2libHlDYWNoZWRMb2NhbFdlZWtEYXRhKGR0KSB7XG4gIGlmIChkdC5sb2NhbFdlZWtEYXRhID09PSBudWxsKSB7XG4gICAgZHQubG9jYWxXZWVrRGF0YSA9IGdyZWdvcmlhblRvV2VlayhcbiAgICAgIGR0LmMsXG4gICAgICBkdC5sb2MuZ2V0TWluRGF5c0luRmlyc3RXZWVrKCksXG4gICAgICBkdC5sb2MuZ2V0U3RhcnRPZldlZWsoKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGR0LmxvY2FsV2Vla0RhdGE7XG59XG5cbi8vIGNsb25lIHJlYWxseSBtZWFucywgXCJtYWtlIGEgbmV3IG9iamVjdCB3aXRoIHRoZXNlIG1vZGlmaWNhdGlvbnNcIi4gYWxsIFwic2V0dGVyc1wiIHJlYWxseSB1c2UgdGhpc1xuLy8gdG8gY3JlYXRlIGEgbmV3IG9iamVjdCB3aGlsZSBvbmx5IGNoYW5naW5nIHNvbWUgb2YgdGhlIHByb3BlcnRpZXNcbmZ1bmN0aW9uIGNsb25lKGluc3QsIGFsdHMpIHtcbiAgY29uc3QgY3VycmVudCA9IHtcbiAgICB0czogaW5zdC50cyxcbiAgICB6b25lOiBpbnN0LnpvbmUsXG4gICAgYzogaW5zdC5jLFxuICAgIG86IGluc3QubyxcbiAgICBsb2M6IGluc3QubG9jLFxuICAgIGludmFsaWQ6IGluc3QuaW52YWxpZCxcbiAgfTtcbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7IC4uLmN1cnJlbnQsIC4uLmFsdHMsIG9sZDogY3VycmVudCB9KTtcbn1cblxuLy8gZmluZCB0aGUgcmlnaHQgb2Zmc2V0IGEgZ2l2ZW4gbG9jYWwgdGltZS4gVGhlIG8gaW5wdXQgaXMgb3VyIGd1ZXNzLCB3aGljaCBkZXRlcm1pbmVzIHdoaWNoXG4vLyBvZmZzZXQgd2UnbGwgcGljayBpbiBhbWJpZ3VvdXMgY2FzZXMgKGUuZy4gdGhlcmUgYXJlIHR3byAzIEFNcyBiL2MgRmFsbGJhY2sgRFNUKVxuZnVuY3Rpb24gZml4T2Zmc2V0KGxvY2FsVFMsIG8sIHR6KSB7XG4gIC8vIE91ciBVVEMgdGltZSBpcyBqdXN0IGEgZ3Vlc3MgYmVjYXVzZSBvdXIgb2Zmc2V0IGlzIGp1c3QgYSBndWVzc1xuICBsZXQgdXRjR3Vlc3MgPSBsb2NhbFRTIC0gbyAqIDYwICogMTAwMDtcblxuICAvLyBUZXN0IHdoZXRoZXIgdGhlIHpvbmUgbWF0Y2hlcyB0aGUgb2Zmc2V0IGZvciB0aGlzIHRzXG4gIGNvbnN0IG8yID0gdHoub2Zmc2V0KHV0Y0d1ZXNzKTtcblxuICAvLyBJZiBzbywgb2Zmc2V0IGRpZG4ndCBjaGFuZ2UgYW5kIHdlJ3JlIGRvbmVcbiAgaWYgKG8gPT09IG8yKSB7XG4gICAgcmV0dXJuIFt1dGNHdWVzcywgb107XG4gIH1cblxuICAvLyBJZiBub3QsIGNoYW5nZSB0aGUgdHMgYnkgdGhlIGRpZmZlcmVuY2UgaW4gdGhlIG9mZnNldFxuICB1dGNHdWVzcyAtPSAobzIgLSBvKSAqIDYwICogMTAwMDtcblxuICAvLyBJZiB0aGF0IGdpdmVzIHVzIHRoZSBsb2NhbCB0aW1lIHdlIHdhbnQsIHdlJ3JlIGRvbmVcbiAgY29uc3QgbzMgPSB0ei5vZmZzZXQodXRjR3Vlc3MpO1xuICBpZiAobzIgPT09IG8zKSB7XG4gICAgcmV0dXJuIFt1dGNHdWVzcywgbzJdO1xuICB9XG5cbiAgLy8gSWYgaXQncyBkaWZmZXJlbnQsIHdlJ3JlIGluIGEgaG9sZSB0aW1lLiBUaGUgb2Zmc2V0IGhhcyBjaGFuZ2VkLCBidXQgdGhlIHdlIGRvbid0IGFkanVzdCB0aGUgdGltZVxuICByZXR1cm4gW2xvY2FsVFMgLSBNYXRoLm1pbihvMiwgbzMpICogNjAgKiAxMDAwLCBNYXRoLm1heChvMiwgbzMpXTtcbn1cblxuLy8gY29udmVydCBhbiBlcG9jaCB0aW1lc3RhbXAgaW50byBhIGNhbGVuZGFyIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBvZmZzZXRcbmZ1bmN0aW9uIHRzVG9PYmoodHMsIG9mZnNldCkge1xuICB0cyArPSBvZmZzZXQgKiA2MCAqIDEwMDA7XG5cbiAgY29uc3QgZCA9IG5ldyBEYXRlKHRzKTtcblxuICByZXR1cm4ge1xuICAgIHllYXI6IGQuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICBtb250aDogZC5nZXRVVENNb250aCgpICsgMSxcbiAgICBkYXk6IGQuZ2V0VVRDRGF0ZSgpLFxuICAgIGhvdXI6IGQuZ2V0VVRDSG91cnMoKSxcbiAgICBtaW51dGU6IGQuZ2V0VVRDTWludXRlcygpLFxuICAgIHNlY29uZDogZC5nZXRVVENTZWNvbmRzKCksXG4gICAgbWlsbGlzZWNvbmQ6IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksXG4gIH07XG59XG5cbi8vIGNvbnZlcnQgYSBjYWxlbmRhciBvYmplY3QgdG8gYSBlcG9jaCB0aW1lc3RhbXBcbmZ1bmN0aW9uIG9ialRvVFMob2JqLCBvZmZzZXQsIHpvbmUpIHtcbiAgcmV0dXJuIGZpeE9mZnNldChvYmpUb0xvY2FsVFMob2JqKSwgb2Zmc2V0LCB6b25lKTtcbn1cblxuLy8gY3JlYXRlIGEgbmV3IERUIGluc3RhbmNlIGJ5IGFkZGluZyBhIGR1cmF0aW9uLCBhZGp1c3RpbmcgZm9yIERTVHNcbmZ1bmN0aW9uIGFkanVzdFRpbWUoaW5zdCwgZHVyKSB7XG4gIGNvbnN0IG9QcmUgPSBpbnN0Lm8sXG4gICAgeWVhciA9IGluc3QuYy55ZWFyICsgTWF0aC50cnVuYyhkdXIueWVhcnMpLFxuICAgIG1vbnRoID0gaW5zdC5jLm1vbnRoICsgTWF0aC50cnVuYyhkdXIubW9udGhzKSArIE1hdGgudHJ1bmMoZHVyLnF1YXJ0ZXJzKSAqIDMsXG4gICAgYyA9IHtcbiAgICAgIC4uLmluc3QuYyxcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRheTpcbiAgICAgICAgTWF0aC5taW4oaW5zdC5jLmRheSwgZGF5c0luTW9udGgoeWVhciwgbW9udGgpKSArXG4gICAgICAgIE1hdGgudHJ1bmMoZHVyLmRheXMpICtcbiAgICAgICAgTWF0aC50cnVuYyhkdXIud2Vla3MpICogNyxcbiAgICB9LFxuICAgIG1pbGxpc1RvQWRkID0gRHVyYXRpb24uZnJvbU9iamVjdCh7XG4gICAgICB5ZWFyczogZHVyLnllYXJzIC0gTWF0aC50cnVuYyhkdXIueWVhcnMpLFxuICAgICAgcXVhcnRlcnM6IGR1ci5xdWFydGVycyAtIE1hdGgudHJ1bmMoZHVyLnF1YXJ0ZXJzKSxcbiAgICAgIG1vbnRoczogZHVyLm1vbnRocyAtIE1hdGgudHJ1bmMoZHVyLm1vbnRocyksXG4gICAgICB3ZWVrczogZHVyLndlZWtzIC0gTWF0aC50cnVuYyhkdXIud2Vla3MpLFxuICAgICAgZGF5czogZHVyLmRheXMgLSBNYXRoLnRydW5jKGR1ci5kYXlzKSxcbiAgICAgIGhvdXJzOiBkdXIuaG91cnMsXG4gICAgICBtaW51dGVzOiBkdXIubWludXRlcyxcbiAgICAgIHNlY29uZHM6IGR1ci5zZWNvbmRzLFxuICAgICAgbWlsbGlzZWNvbmRzOiBkdXIubWlsbGlzZWNvbmRzLFxuICAgIH0pLmFzKFwibWlsbGlzZWNvbmRzXCIpLFxuICAgIGxvY2FsVFMgPSBvYmpUb0xvY2FsVFMoYyk7XG5cbiAgbGV0IFt0cywgb10gPSBmaXhPZmZzZXQobG9jYWxUUywgb1ByZSwgaW5zdC56b25lKTtcblxuICBpZiAobWlsbGlzVG9BZGQgIT09IDApIHtcbiAgICB0cyArPSBtaWxsaXNUb0FkZDtcbiAgICAvLyB0aGF0IGNvdWxkIGhhdmUgY2hhbmdlZCB0aGUgb2Zmc2V0IGJ5IGdvaW5nIG92ZXIgYSBEU1QsIGJ1dCB3ZSB3YW50IHRvIGtlZXAgdGhlIHRzIHRoZSBzYW1lXG4gICAgbyA9IGluc3Quem9uZS5vZmZzZXQodHMpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHMsIG8gfTtcbn1cblxuLy8gaGVscGVyIHVzZWZ1bCBpbiB0dXJuaW5nIHRoZSByZXN1bHRzIG9mIHBhcnNpbmcgaW50byByZWFsIGRhdGVzXG4vLyBieSBoYW5kbGluZyB0aGUgem9uZSBvcHRpb25zXG5mdW5jdGlvbiBwYXJzZURhdGFUb0RhdGVUaW1lKHBhcnNlZCwgcGFyc2VkWm9uZSwgb3B0cywgZm9ybWF0LCB0ZXh0LCBzcGVjaWZpY09mZnNldCkge1xuICBjb25zdCB7IHNldFpvbmUsIHpvbmUgfSA9IG9wdHM7XG4gIGlmICgocGFyc2VkICYmIE9iamVjdC5rZXlzKHBhcnNlZCkubGVuZ3RoICE9PSAwKSB8fCBwYXJzZWRab25lKSB7XG4gICAgY29uc3QgaW50ZXJwcmV0YXRpb25ab25lID0gcGFyc2VkWm9uZSB8fCB6b25lLFxuICAgICAgaW5zdCA9IERhdGVUaW1lLmZyb21PYmplY3QocGFyc2VkLCB7XG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIHpvbmU6IGludGVycHJldGF0aW9uWm9uZSxcbiAgICAgICAgc3BlY2lmaWNPZmZzZXQsXG4gICAgICB9KTtcbiAgICByZXR1cm4gc2V0Wm9uZSA/IGluc3QgOiBpbnN0LnNldFpvbmUoem9uZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXG4gICAgICBuZXcgSW52YWxpZChcInVucGFyc2FibGVcIiwgYHRoZSBpbnB1dCBcIiR7dGV4dH1cIiBjYW4ndCBiZSBwYXJzZWQgYXMgJHtmb3JtYXR9YClcbiAgICApO1xuICB9XG59XG5cbi8vIGlmIHlvdSB3YW50IHRvIG91dHB1dCBhIHRlY2huaWNhbCBmb3JtYXQgKGUuZy4gUkZDIDI4MjIpLCB0aGlzIGhlbHBlclxuLy8gaGVscHMgaGFuZGxlIHRoZSBkZXRhaWxzXG5mdW5jdGlvbiB0b1RlY2hGb3JtYXQoZHQsIGZvcm1hdCwgYWxsb3daID0gdHJ1ZSkge1xuICByZXR1cm4gZHQuaXNWYWxpZFxuICAgID8gRm9ybWF0dGVyLmNyZWF0ZShMb2NhbGUuY3JlYXRlKFwiZW4tVVNcIiksIHtcbiAgICAgICAgYWxsb3daLFxuICAgICAgICBmb3JjZVNpbXBsZTogdHJ1ZSxcbiAgICAgIH0pLmZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyhkdCwgZm9ybWF0KVxuICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gdG9JU09EYXRlKG8sIGV4dGVuZGVkKSB7XG4gIGNvbnN0IGxvbmdGb3JtYXQgPSBvLmMueWVhciA+IDk5OTkgfHwgby5jLnllYXIgPCAwO1xuICBsZXQgYyA9IFwiXCI7XG4gIGlmIChsb25nRm9ybWF0ICYmIG8uYy55ZWFyID49IDApIGMgKz0gXCIrXCI7XG4gIGMgKz0gcGFkU3RhcnQoby5jLnllYXIsIGxvbmdGb3JtYXQgPyA2IDogNCk7XG5cbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIi1cIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5tb250aCk7XG4gICAgYyArPSBcIi1cIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpO1xuICB9IGVsc2Uge1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLm1vbnRoKTtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpO1xuICB9XG4gIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiB0b0lTT1RpbWUoXG4gIG8sXG4gIGV4dGVuZGVkLFxuICBzdXBwcmVzc1NlY29uZHMsXG4gIHN1cHByZXNzTWlsbGlzZWNvbmRzLFxuICBpbmNsdWRlT2Zmc2V0LFxuICBleHRlbmRlZFpvbmVcbikge1xuICBsZXQgYyA9IHBhZFN0YXJ0KG8uYy5ob3VyKTtcbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIjpcIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpO1xuICAgIGlmIChvLmMubWlsbGlzZWNvbmQgIT09IDAgfHwgby5jLnNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NTZWNvbmRzKSB7XG4gICAgICBjICs9IFwiOlwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpO1xuICB9XG5cbiAgaWYgKG8uYy5taWxsaXNlY29uZCAhPT0gMCB8fCBvLmMuc2Vjb25kICE9PSAwIHx8ICFzdXBwcmVzc1NlY29uZHMpIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5zZWNvbmQpO1xuXG4gICAgaWYgKG8uYy5taWxsaXNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NNaWxsaXNlY29uZHMpIHtcbiAgICAgIGMgKz0gXCIuXCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KG8uYy5taWxsaXNlY29uZCwgMyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGluY2x1ZGVPZmZzZXQpIHtcbiAgICBpZiAoby5pc09mZnNldEZpeGVkICYmIG8ub2Zmc2V0ID09PSAwICYmICFleHRlbmRlZFpvbmUpIHtcbiAgICAgIGMgKz0gXCJaXCI7XG4gICAgfSBlbHNlIGlmIChvLm8gPCAwKSB7XG4gICAgICBjICs9IFwiLVwiO1xuICAgICAgYyArPSBwYWRTdGFydChNYXRoLnRydW5jKC1vLm8gLyA2MCkpO1xuICAgICAgYyArPSBcIjpcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYygtby5vICUgNjApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYyArPSBcIitcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYyhvLm8gLyA2MCkpO1xuICAgICAgYyArPSBcIjpcIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYyhvLm8gJSA2MCkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChleHRlbmRlZFpvbmUpIHtcbiAgICBjICs9IFwiW1wiICsgby56b25lLmlhbmFOYW1lICsgXCJdXCI7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5cbi8vIGRlZmF1bHRzIGZvciB1bnNwZWNpZmllZCB1bml0cyBpbiB0aGUgc3VwcG9ydGVkIGNhbGVuZGFyc1xuY29uc3QgZGVmYXVsdFVuaXRWYWx1ZXMgPSB7XG4gICAgbW9udGg6IDEsXG4gICAgZGF5OiAxLFxuICAgIGhvdXI6IDAsXG4gICAgbWludXRlOiAwLFxuICAgIHNlY29uZDogMCxcbiAgICBtaWxsaXNlY29uZDogMCxcbiAgfSxcbiAgZGVmYXVsdFdlZWtVbml0VmFsdWVzID0ge1xuICAgIHdlZWtOdW1iZXI6IDEsXG4gICAgd2Vla2RheTogMSxcbiAgICBob3VyOiAwLFxuICAgIG1pbnV0ZTogMCxcbiAgICBzZWNvbmQ6IDAsXG4gICAgbWlsbGlzZWNvbmQ6IDAsXG4gIH0sXG4gIGRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlcyA9IHtcbiAgICBvcmRpbmFsOiAxLFxuICAgIGhvdXI6IDAsXG4gICAgbWludXRlOiAwLFxuICAgIHNlY29uZDogMCxcbiAgICBtaWxsaXNlY29uZDogMCxcbiAgfTtcblxuLy8gVW5pdHMgaW4gdGhlIHN1cHBvcnRlZCBjYWxlbmRhcnMsIHNvcnRlZCBieSBiaWduZXNzXG5jb25zdCBvcmRlcmVkVW5pdHMgPSBbXCJ5ZWFyXCIsIFwibW9udGhcIiwgXCJkYXlcIiwgXCJob3VyXCIsIFwibWludXRlXCIsIFwic2Vjb25kXCIsIFwibWlsbGlzZWNvbmRcIl0sXG4gIG9yZGVyZWRXZWVrVW5pdHMgPSBbXG4gICAgXCJ3ZWVrWWVhclwiLFxuICAgIFwid2Vla051bWJlclwiLFxuICAgIFwid2Vla2RheVwiLFxuICAgIFwiaG91clwiLFxuICAgIFwibWludXRlXCIsXG4gICAgXCJzZWNvbmRcIixcbiAgICBcIm1pbGxpc2Vjb25kXCIsXG4gIF0sXG4gIG9yZGVyZWRPcmRpbmFsVW5pdHMgPSBbXCJ5ZWFyXCIsIFwib3JkaW5hbFwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXTtcblxuLy8gc3RhbmRhcmRpemUgY2FzZSBhbmQgcGx1cmFsaXR5IGluIHVuaXRzXG5mdW5jdGlvbiBub3JtYWxpemVVbml0KHVuaXQpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHtcbiAgICB5ZWFyOiBcInllYXJcIixcbiAgICB5ZWFyczogXCJ5ZWFyXCIsXG4gICAgbW9udGg6IFwibW9udGhcIixcbiAgICBtb250aHM6IFwibW9udGhcIixcbiAgICBkYXk6IFwiZGF5XCIsXG4gICAgZGF5czogXCJkYXlcIixcbiAgICBob3VyOiBcImhvdXJcIixcbiAgICBob3VyczogXCJob3VyXCIsXG4gICAgbWludXRlOiBcIm1pbnV0ZVwiLFxuICAgIG1pbnV0ZXM6IFwibWludXRlXCIsXG4gICAgcXVhcnRlcjogXCJxdWFydGVyXCIsXG4gICAgcXVhcnRlcnM6IFwicXVhcnRlclwiLFxuICAgIHNlY29uZDogXCJzZWNvbmRcIixcbiAgICBzZWNvbmRzOiBcInNlY29uZFwiLFxuICAgIG1pbGxpc2Vjb25kOiBcIm1pbGxpc2Vjb25kXCIsXG4gICAgbWlsbGlzZWNvbmRzOiBcIm1pbGxpc2Vjb25kXCIsXG4gICAgd2Vla2RheTogXCJ3ZWVrZGF5XCIsXG4gICAgd2Vla2RheXM6IFwid2Vla2RheVwiLFxuICAgIHdlZWtudW1iZXI6IFwid2Vla051bWJlclwiLFxuICAgIHdlZWtzbnVtYmVyOiBcIndlZWtOdW1iZXJcIixcbiAgICB3ZWVrbnVtYmVyczogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgd2Vla3llYXI6IFwid2Vla1llYXJcIixcbiAgICB3ZWVreWVhcnM6IFwid2Vla1llYXJcIixcbiAgICBvcmRpbmFsOiBcIm9yZGluYWxcIixcbiAgfVt1bml0LnRvTG93ZXJDYXNlKCldO1xuXG4gIGlmICghbm9ybWFsaXplZCkgdGhyb3cgbmV3IEludmFsaWRVbml0RXJyb3IodW5pdCk7XG5cbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRXaXRoTG9jYWxXZWVrcyh1bml0KSB7XG4gIHN3aXRjaCAodW5pdC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSBcImxvY2Fsd2Vla2RheVwiOlxuICAgIGNhc2UgXCJsb2NhbHdlZWtkYXlzXCI6XG4gICAgICByZXR1cm4gXCJsb2NhbFdlZWtkYXlcIjtcbiAgICBjYXNlIFwibG9jYWx3ZWVrbnVtYmVyXCI6XG4gICAgY2FzZSBcImxvY2Fsd2Vla251bWJlcnNcIjpcbiAgICAgIHJldHVybiBcImxvY2FsV2Vla051bWJlclwiO1xuICAgIGNhc2UgXCJsb2NhbHdlZWt5ZWFyXCI6XG4gICAgY2FzZSBcImxvY2Fsd2Vla3llYXJzXCI6XG4gICAgICByZXR1cm4gXCJsb2NhbFdlZWtZZWFyXCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBub3JtYWxpemVVbml0KHVuaXQpO1xuICB9XG59XG5cbi8vIGNhY2hlIG9mZnNldHMgZm9yIHpvbmVzIGJhc2VkIG9uIHRoZSBjdXJyZW50IHRpbWVzdGFtcCB3aGVuIHRoaXMgZnVuY3Rpb24gaXNcbi8vIGZpcnN0IGNhbGxlZC4gV2hlbiB3ZSBhcmUgaGFuZGxpbmcgYSBkYXRldGltZSBmcm9tIGNvbXBvbmVudHMgbGlrZSAoeWVhcixcbi8vIG1vbnRoLCBkYXksIGhvdXIpIGluIGEgdGltZSB6b25lLCB3ZSBuZWVkIGEgZ3Vlc3MgYWJvdXQgd2hhdCB0aGUgdGltZXpvbmVcbi8vIG9mZnNldCBpcyBzbyB0aGF0IHdlIGNhbiBjb252ZXJ0IGludG8gYSBVVEMgdGltZXN0YW1wLiBPbmUgd2F5IGlzIHRvIGZpbmQgdGhlXG4vLyBvZmZzZXQgb2Ygbm93IGluIHRoZSB6b25lLiBUaGUgYWN0dWFsIGRhdGUgbWF5IGhhdmUgYSBkaWZmZXJlbnQgb2Zmc2V0IChmb3Jcbi8vIGV4YW1wbGUsIGlmIHdlIGhhbmRsZSBhIGRhdGUgaW4gSnVuZSB3aGlsZSB3ZSdyZSBpbiBEZWNlbWJlciBpbiBhIHpvbmUgdGhhdFxuLy8gb2JzZXJ2ZXMgRFNUKSwgYnV0IHdlIGNhbiBjaGVjayBhbmQgYWRqdXN0IHRoYXQuXG4vL1xuLy8gV2hlbiBoYW5kbGluZyBtYW55IGRhdGVzLCBjYWxjdWxhdGluZyB0aGUgb2Zmc2V0IGZvciBub3cgZXZlcnkgdGltZSBpc1xuLy8gZXhwZW5zaXZlLiBJdCdzIGp1c3QgYSBndWVzcywgc28gd2UgY2FuIGNhY2hlIHRoZSBvZmZzZXQgdG8gdXNlIGV2ZW4gaWYgd2Vcbi8vIGFyZSByaWdodCBvbiBhIHRpbWUgY2hhbmdlIGJvdW5kYXJ5ICh3ZSdsbCBqdXN0IGNvcnJlY3QgaW4gdGhlIG90aGVyXG4vLyBkaXJlY3Rpb24pLiBVc2luZyBhIHRpbWVzdGFtcCBmcm9tIGZpcnN0IHJlYWQgaXMgYSBzbGlnaHQgb3B0aW1pemF0aW9uIGZvclxuLy8gaGFuZGxpbmcgZGF0ZXMgY2xvc2UgdG8gdGhlIGN1cnJlbnQgZGF0ZSwgc2luY2UgdGhvc2UgZGF0ZXMgd2lsbCB1c3VhbGx5IGJlXG4vLyBpbiB0aGUgc2FtZSBvZmZzZXQgKHdlIGNvdWxkIHNldCB0aGUgdGltZXN0YW1wIHN0YXRpY2FsbHksIGluc3RlYWQpLiBXZSB1c2UgYVxuLy8gc2luZ2xlIHRpbWVzdGFtcCBmb3IgYWxsIHpvbmVzIHRvIG1ha2UgdGhpbmdzIGEgYml0IG1vcmUgcHJlZGljdGFibGUuXG4vL1xuLy8gVGhpcyBpcyBzYWZlIGZvciBxdWlja0RUICh1c2VkIGJ5IGxvY2FsKCkgYW5kIHV0YygpKSBiZWNhdXNlIHdlIGRvbid0IGZpbGwgaW5cbi8vIGhpZ2hlci1vcmRlciB1bml0cyBmcm9tIHRzTm93IChhcyB3ZSBkbyBpbiBmcm9tT2JqZWN0LCB0aGlzIHJlcXVpcmVzIHRoYXRcbi8vIG9mZnNldCBpcyBjYWxjdWxhdGVkIGZyb20gdHNOb3cpLlxuLyoqXG4gKiBAcGFyYW0ge1pvbmV9IHpvbmVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ3Vlc3NPZmZzZXRGb3Jab25lKHpvbmUpIHtcbiAgaWYgKHpvbmVPZmZzZXRUcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgem9uZU9mZnNldFRzID0gU2V0dGluZ3Mubm93KCk7XG4gIH1cblxuICAvLyBEbyBub3QgY2FjaGUgYW55dGhpbmcgYnV0IElBTkEgem9uZXMsIGJlY2F1c2UgaXQgaXMgbm90IHNhZmUgdG8gZG8gc28uXG4gIC8vIEd1ZXNzaW5nIGFuIG9mZnNldCB3aGljaCBpcyBub3QgcHJlc2VudCBpbiB0aGUgem9uZSBjYW4gY2F1c2Ugd3JvbmcgcmVzdWx0cyBmcm9tIGZpeE9mZnNldFxuICBpZiAoem9uZS50eXBlICE9PSBcImlhbmFcIikge1xuICAgIHJldHVybiB6b25lLm9mZnNldCh6b25lT2Zmc2V0VHMpO1xuICB9XG4gIGNvbnN0IHpvbmVOYW1lID0gem9uZS5uYW1lO1xuICBsZXQgb2Zmc2V0R3Vlc3MgPSB6b25lT2Zmc2V0R3Vlc3NDYWNoZS5nZXQoem9uZU5hbWUpO1xuICBpZiAob2Zmc2V0R3Vlc3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG9mZnNldEd1ZXNzID0gem9uZS5vZmZzZXQoem9uZU9mZnNldFRzKTtcbiAgICB6b25lT2Zmc2V0R3Vlc3NDYWNoZS5zZXQoem9uZU5hbWUsIG9mZnNldEd1ZXNzKTtcbiAgfVxuICByZXR1cm4gb2Zmc2V0R3Vlc3M7XG59XG5cbi8vIHRoaXMgaXMgYSBkdW1iZWQgZG93biB2ZXJzaW9uIG9mIGZyb21PYmplY3QoKSB0aGF0IHJ1bnMgYWJvdXQgNjAlIGZhc3RlclxuLy8gYnV0IGRvZXNuJ3QgZG8gYW55IHZhbGlkYXRpb24sIG1ha2VzIGEgYnVuY2ggb2YgYXNzdW1wdGlvbnMgYWJvdXQgd2hhdCB1bml0c1xuLy8gYXJlIHByZXNlbnQsIGFuZCBzbyBvbi5cbmZ1bmN0aW9uIHF1aWNrRFQob2JqLCBvcHRzKSB7XG4gIGNvbnN0IHpvbmUgPSBub3JtYWxpemVab25lKG9wdHMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICBpZiAoIXpvbmUuaXNWYWxpZCkge1xuICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKHVuc3VwcG9ydGVkWm9uZSh6b25lKSk7XG4gIH1cblxuICBjb25zdCBsb2MgPSBMb2NhbGUuZnJvbU9iamVjdChvcHRzKTtcblxuICBsZXQgdHMsIG87XG5cbiAgLy8gYXNzdW1lIHdlIGhhdmUgdGhlIGhpZ2hlci1vcmRlciB1bml0c1xuICBpZiAoIWlzVW5kZWZpbmVkKG9iai55ZWFyKSkge1xuICAgIGZvciAoY29uc3QgdSBvZiBvcmRlcmVkVW5pdHMpIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChvYmpbdV0pKSB7XG4gICAgICAgIG9ialt1XSA9IGRlZmF1bHRVbml0VmFsdWVzW3VdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGludmFsaWQgPSBoYXNJbnZhbGlkR3JlZ29yaWFuRGF0YShvYmopIHx8IGhhc0ludmFsaWRUaW1lRGF0YShvYmopO1xuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9XG5cbiAgICBjb25zdCBvZmZzZXRQcm92aXMgPSBndWVzc09mZnNldEZvclpvbmUoem9uZSk7XG4gICAgW3RzLCBvXSA9IG9ialRvVFMob2JqLCBvZmZzZXRQcm92aXMsIHpvbmUpO1xuICB9IGVsc2Uge1xuICAgIHRzID0gU2V0dGluZ3Mubm93KCk7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGVUaW1lKHsgdHMsIHpvbmUsIGxvYywgbyB9KTtcbn1cblxuZnVuY3Rpb24gZGlmZlJlbGF0aXZlKHN0YXJ0LCBlbmQsIG9wdHMpIHtcbiAgY29uc3Qgcm91bmQgPSBpc1VuZGVmaW5lZChvcHRzLnJvdW5kKSA/IHRydWUgOiBvcHRzLnJvdW5kLFxuICAgIGZvcm1hdCA9IChjLCB1bml0KSA9PiB7XG4gICAgICBjID0gcm91bmRUbyhjLCByb3VuZCB8fCBvcHRzLmNhbGVuZGFyeSA/IDAgOiAyLCB0cnVlKTtcbiAgICAgIGNvbnN0IGZvcm1hdHRlciA9IGVuZC5sb2MuY2xvbmUob3B0cykucmVsRm9ybWF0dGVyKG9wdHMpO1xuICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXQoYywgdW5pdCk7XG4gICAgfSxcbiAgICBkaWZmZXIgPSAodW5pdCkgPT4ge1xuICAgICAgaWYgKG9wdHMuY2FsZW5kYXJ5KSB7XG4gICAgICAgIGlmICghZW5kLmhhc1NhbWUoc3RhcnQsIHVuaXQpKSB7XG4gICAgICAgICAgcmV0dXJuIGVuZC5zdGFydE9mKHVuaXQpLmRpZmYoc3RhcnQuc3RhcnRPZih1bml0KSwgdW5pdCkuZ2V0KHVuaXQpO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZW5kLmRpZmYoc3RhcnQsIHVuaXQpLmdldCh1bml0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gIGlmIChvcHRzLnVuaXQpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRpZmZlcihvcHRzLnVuaXQpLCBvcHRzLnVuaXQpO1xuICB9XG5cbiAgZm9yIChjb25zdCB1bml0IG9mIG9wdHMudW5pdHMpIHtcbiAgICBjb25zdCBjb3VudCA9IGRpZmZlcih1bml0KTtcbiAgICBpZiAoTWF0aC5hYnMoY291bnQpID49IDEpIHtcbiAgICAgIHJldHVybiBmb3JtYXQoY291bnQsIHVuaXQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHN0YXJ0ID4gZW5kID8gLTAgOiAwLCBvcHRzLnVuaXRzW29wdHMudW5pdHMubGVuZ3RoIC0gMV0pO1xufVxuXG5mdW5jdGlvbiBsYXN0T3B0cyhhcmdMaXN0KSB7XG4gIGxldCBvcHRzID0ge30sXG4gICAgYXJncztcbiAgaWYgKGFyZ0xpc3QubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnTGlzdFthcmdMaXN0Lmxlbmd0aCAtIDFdID09PSBcIm9iamVjdFwiKSB7XG4gICAgb3B0cyA9IGFyZ0xpc3RbYXJnTGlzdC5sZW5ndGggLSAxXTtcbiAgICBhcmdzID0gQXJyYXkuZnJvbShhcmdMaXN0KS5zbGljZSgwLCBhcmdMaXN0Lmxlbmd0aCAtIDEpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ0xpc3QpO1xuICB9XG4gIHJldHVybiBbb3B0cywgYXJnc107XG59XG5cbi8qKlxuICogVGltZXN0YW1wIHRvIHVzZSBmb3IgY2FjaGVkIHpvbmUgb2Zmc2V0IGd1ZXNzZXMgKGV4cG9zZWQgZm9yIHRlc3QpXG4gKi9cbmxldCB6b25lT2Zmc2V0VHM7XG4vKipcbiAqIENhY2hlIGZvciB6b25lIG9mZnNldCBndWVzc2VzIChleHBvc2VkIGZvciB0ZXN0KS5cbiAqXG4gKiBUaGlzIG9wdGltaXplcyBxdWlja0RUIHZpYSBndWVzc09mZnNldEZvclpvbmUgdG8gYXZvaWQgcmVwZWF0ZWQgY2FsbHMgb2ZcbiAqIHpvbmUub2Zmc2V0KCkuXG4gKi9cbmNvbnN0IHpvbmVPZmZzZXRHdWVzc0NhY2hlID0gbmV3IE1hcCgpO1xuXG4vKipcbiAqIEEgRGF0ZVRpbWUgaXMgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGRhdGUgYW5kIHRpbWUgYW5kIGFjY29tcGFueWluZyBtZXRob2RzLiBJdCBjb250YWlucyBjbGFzcyBhbmQgaW5zdGFuY2UgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS5cbiAqXG4gKiBBIERhdGVUaW1lIGNvbXByaXNlcyBvZjpcbiAqICogQSB0aW1lc3RhbXAuIEVhY2ggRGF0ZVRpbWUgaW5zdGFuY2UgcmVmZXJzIHRvIGEgc3BlY2lmaWMgbWlsbGlzZWNvbmQgb2YgdGhlIFVuaXggZXBvY2guXG4gKiAqIEEgdGltZSB6b25lLiBFYWNoIGluc3RhbmNlIGlzIGNvbnNpZGVyZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBzcGVjaWZpYyB6b25lIChieSBkZWZhdWx0IHRoZSBsb2NhbCBzeXN0ZW0ncyB6b25lKS5cbiAqICogQ29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIHRoYXQgZWZmZWN0IGhvdyBvdXRwdXQgc3RyaW5ncyBhcmUgZm9ybWF0dGVkLCBzdWNoIGFzIGBsb2NhbGVgLCBgbnVtYmVyaW5nU3lzdGVtYCwgYW5kIGBvdXRwdXRDYWxlbmRhcmAuXG4gKlxuICogSGVyZSBpcyBhIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgZnVuY3Rpb25hbGl0eSBpdCBwcm92aWRlczpcbiAqXG4gKiAqICoqQ3JlYXRpb24qKjogVG8gY3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBpdHMgY29tcG9uZW50cywgdXNlIG9uZSBvZiBpdHMgZmFjdG9yeSBjbGFzcyBtZXRob2RzOiB7QGxpbmsgRGF0ZVRpbWUubG9jYWx9LCB7QGxpbmsgRGF0ZVRpbWUudXRjfSwgYW5kIChtb3N0IGZsZXhpYmx5KSB7QGxpbmsgRGF0ZVRpbWUuZnJvbU9iamVjdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIHN0YW5kYXJkIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgRGF0ZVRpbWUuZnJvbUlTT30sIHtAbGluayBEYXRlVGltZS5mcm9tSFRUUH0sIGFuZCB7QGxpbmsgRGF0ZVRpbWUuZnJvbVJGQzI4MjJ9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBjdXN0b20gc3RyaW5nIGZvcm1hdCwgdXNlIHtAbGluayBEYXRlVGltZS5mcm9tRm9ybWF0fS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgbmF0aXZlIEpTIGRhdGUsIHVzZSB7QGxpbmsgRGF0ZVRpbWUuZnJvbUpTRGF0ZX0uXG4gKiAqICoqR3JlZ29yaWFuIGNhbGVuZGFyIGFuZCB0aW1lKio6IFRvIGV4YW1pbmUgdGhlIEdyZWdvcmlhbiBwcm9wZXJ0aWVzIG9mIGEgRGF0ZVRpbWUgaW5kaXZpZHVhbGx5IChpLmUgYXMgb3Bwb3NlZCB0byBjb2xsZWN0aXZlbHkgdGhyb3VnaCB7QGxpbmsgRGF0ZVRpbWUjdG9PYmplY3R9KSwgdXNlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjeWVhcn0sIHtAbGluayBEYXRlVGltZSNtb250aH0sXG4gKiB7QGxpbmsgRGF0ZVRpbWUjZGF5fSwge0BsaW5rIERhdGVUaW1lI2hvdXJ9LCB7QGxpbmsgRGF0ZVRpbWUjbWludXRlfSwge0BsaW5rIERhdGVUaW1lI3NlY29uZH0sIHtAbGluayBEYXRlVGltZSNtaWxsaXNlY29uZH0gYWNjZXNzb3JzLlxuICogKiAqKldlZWsgY2FsZW5kYXIqKjogRm9yIElTTyB3ZWVrIGNhbGVuZGFyIGF0dHJpYnV0ZXMsIHNlZSB0aGUge0BsaW5rIERhdGVUaW1lI3dlZWtZZWFyfSwge0BsaW5rIERhdGVUaW1lI3dlZWtOdW1iZXJ9LCBhbmQge0BsaW5rIERhdGVUaW1lI3dlZWtkYXl9IGFjY2Vzc29ycy5cbiAqICogKipDb25maWd1cmF0aW9uKiogU2VlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjbG9jYWxlfSBhbmQge0BsaW5rIERhdGVUaW1lI251bWJlcmluZ1N5c3RlbX0gYWNjZXNzb3JzLlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKio6IFRvIHRyYW5zZm9ybSB0aGUgRGF0ZVRpbWUgaW50byBvdGhlciBEYXRlVGltZXMsIHVzZSB7QGxpbmsgRGF0ZVRpbWUjc2V0fSwge0BsaW5rIERhdGVUaW1lI3JlY29uZmlndXJlfSwge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9LCB7QGxpbmsgRGF0ZVRpbWUjc2V0TG9jYWxlfSwge0BsaW5rIERhdGVUaW1lLnBsdXN9LCB7QGxpbmsgRGF0ZVRpbWUjbWludXN9LCB7QGxpbmsgRGF0ZVRpbWUjZW5kT2Z9LCB7QGxpbmsgRGF0ZVRpbWUjc3RhcnRPZn0sIHtAbGluayBEYXRlVGltZSN0b1VUQ30sIGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbH0uXG4gKiAqICoqT3V0cHV0Kio6IFRvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgdXNlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjdG9SZWxhdGl2ZX0sIHtAbGluayBEYXRlVGltZSN0b1JlbGF0aXZlQ2FsZW5kYXJ9LCB7QGxpbmsgRGF0ZVRpbWUjdG9KU09OfSwge0BsaW5rIERhdGVUaW1lI3RvSVNPfSwge0BsaW5rIERhdGVUaW1lI3RvSFRUUH0sIHtAbGluayBEYXRlVGltZSN0b09iamVjdH0sIHtAbGluayBEYXRlVGltZSN0b1JGQzI4MjJ9LCB7QGxpbmsgRGF0ZVRpbWUjdG9TdHJpbmd9LCB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9LCB7QGxpbmsgRGF0ZVRpbWUjdG9Gb3JtYXR9LCB7QGxpbmsgRGF0ZVRpbWUjdG9NaWxsaXN9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9KU0RhdGV9LlxuICpcbiAqIFRoZXJlJ3MgcGxlbnR5IG90aGVycyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiwgdGltZSB6b25lcywgYWx0ZXJuYXRpdmUgY2FsZW5kYXJzLCB2YWxpZGl0eSwgYW5kIHNvIG9uLCBzZWUgdGhlIGV4dGVybmFsIGRvY3VtZW50YXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGVUaW1lIHtcbiAgLyoqXG4gICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgY29uc3Qgem9uZSA9IGNvbmZpZy56b25lIHx8IFNldHRpbmdzLmRlZmF1bHRab25lO1xuXG4gICAgbGV0IGludmFsaWQgPVxuICAgICAgY29uZmlnLmludmFsaWQgfHxcbiAgICAgIChOdW1iZXIuaXNOYU4oY29uZmlnLnRzKSA/IG5ldyBJbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKSA6IG51bGwpIHx8XG4gICAgICAoIXpvbmUuaXNWYWxpZCA/IHVuc3VwcG9ydGVkWm9uZSh6b25lKSA6IG51bGwpO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMudHMgPSBpc1VuZGVmaW5lZChjb25maWcudHMpID8gU2V0dGluZ3Mubm93KCkgOiBjb25maWcudHM7XG5cbiAgICBsZXQgYyA9IG51bGwsXG4gICAgICBvID0gbnVsbDtcbiAgICBpZiAoIWludmFsaWQpIHtcbiAgICAgIGNvbnN0IHVuY2hhbmdlZCA9IGNvbmZpZy5vbGQgJiYgY29uZmlnLm9sZC50cyA9PT0gdGhpcy50cyAmJiBjb25maWcub2xkLnpvbmUuZXF1YWxzKHpvbmUpO1xuXG4gICAgICBpZiAodW5jaGFuZ2VkKSB7XG4gICAgICAgIFtjLCBvXSA9IFtjb25maWcub2xkLmMsIGNvbmZpZy5vbGQub107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBhbiBvZmZzZXQgaGFzIGJlZW4gcGFzc2VkIGFuZCB3ZSBoYXZlIG5vdCBiZWVuIGNhbGxlZCBmcm9tXG4gICAgICAgIC8vIGNsb25lKCksIHdlIGNhbiB0cnVzdCBpdCBhbmQgYXZvaWQgdGhlIG9mZnNldCBjYWxjdWxhdGlvbi5cbiAgICAgICAgY29uc3Qgb3QgPSBpc051bWJlcihjb25maWcubykgJiYgIWNvbmZpZy5vbGQgPyBjb25maWcubyA6IHpvbmUub2Zmc2V0KHRoaXMudHMpO1xuICAgICAgICBjID0gdHNUb09iaih0aGlzLnRzLCBvdCk7XG4gICAgICAgIGludmFsaWQgPSBOdW1iZXIuaXNOYU4oYy55ZWFyKSA/IG5ldyBJbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKSA6IG51bGw7XG4gICAgICAgIGMgPSBpbnZhbGlkID8gbnVsbCA6IGM7XG4gICAgICAgIG8gPSBpbnZhbGlkID8gbnVsbCA6IG90O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3pvbmUgPSB6b25lO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubG9jID0gY29uZmlnLmxvYyB8fCBMb2NhbGUuY3JlYXRlKCk7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5pbnZhbGlkID0gaW52YWxpZDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLndlZWtEYXRhID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmxvY2FsV2Vla0RhdGEgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuYyA9IGM7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5vID0gbztcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmlzTHV4b25EYXRlVGltZSA9IHRydWU7XG4gIH1cblxuICAvLyBDT05TVFJVQ1RcblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZm9yIHRoZSBjdXJyZW50IGluc3RhbnQsIGluIHRoZSBzeXN0ZW0ncyB0aW1lIHpvbmUuXG4gICAqXG4gICAqIFVzZSBTZXR0aW5ncyB0byBvdmVycmlkZSB0aGVzZSBkZWZhdWx0IHZhbHVlcyBpZiBuZWVkZWQuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvSVNPKCkgLy9+PiBub3cgaW4gdGhlIElTTyBmb3JtYXRcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe30pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGxvY2FsIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeWVhcl0gLSBUaGUgY2FsZW5kYXIgeWVhci4gSWYgb21pdHRlZCAoYXMgaW4sIGNhbGwgYGxvY2FsKClgIHdpdGggbm8gYXJndW1lbnRzKSwgdGhlIGN1cnJlbnQgdGltZSB3aWxsIGJlIHVzZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttb250aD0xXSAtIFRoZSBtb250aCwgMS1pbmRleGVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZGF5PTFdIC0gVGhlIGRheSBvZiB0aGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hvdXI9MF0gLSBUaGUgaG91ciBvZiB0aGUgZGF5LCBpbiAyNC1ob3VyIHRpbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaW51dGU9MF0gLSBUaGUgbWludXRlIG9mIHRoZSBob3VyLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbGxpc2Vjb25kPTBdIC0gVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA5OTlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IG5vd1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCh7IHpvbmU6IFwiQW1lcmljYS9OZXdfWW9ya1wiIH0pICAgICAgLy9+PiBub3csIGluIFVTIGVhc3QgY29hc3QgdGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMS0wMVQwMDowMDowMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzKSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0wMVQwMDowMDowMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgeyBsb2NhbGU6IFwiZnJcIiB9KSAgICAgLy9+PiAyMDE3LTAzLTEyVDAwOjAwOjAwLCB3aXRoIGEgRnJlbmNoIGxvY2FsZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgNSkgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgNSwgeyB6b25lOiBcInV0Y1wiIH0pICAgLy9+PiAyMDE3LTAzLTEyVDA1OjAwOjAwLCBpbiBVVENcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIDQ1KSAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIDQ1LCAxMCkgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MTBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIDQ1LCAxMCwgNzY1KSAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MTAuNzY1XG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGxvY2FsKCkge1xuICAgIGNvbnN0IFtvcHRzLCBhcmdzXSA9IGxhc3RPcHRzKGFyZ3VtZW50cyksXG4gICAgICBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXSA9IGFyZ3M7XG4gICAgcmV0dXJuIHF1aWNrRFQoeyB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQgfSwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgaW4gVVRDXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeWVhcl0gLSBUaGUgY2FsZW5kYXIgeWVhci4gSWYgb21pdHRlZCAoYXMgaW4sIGNhbGwgYHV0YygpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RheT0xXSAtIFRoZSBkYXkgb2YgdGhlIG1vbnRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbaG91cj0wXSAtIFRoZSBob3VyIG9mIHRoZSBkYXksIGluIDI0LWhvdXIgdGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbnV0ZT0wXSAtIFRoZSBtaW51dGUgb2YgdGhlIGhvdXIsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NlY29uZD0wXSAtIFRoZSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWlsbGlzZWNvbmQ9MF0gLSBUaGUgbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDk5OVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm91dHB1dENhbGVuZGFyXSAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm51bWJlcmluZ1N5c3RlbV0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMud2Vla1NldHRpbmdzXSAtIHRoZSB3ZWVrIHNldHRpbmdzIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gbm93XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMS0wMVQwMDowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTAxVDAwOjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDA6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1LCA0NSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1LCB7IGxvY2FsZTogXCJmclwiIH0pICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NTowMFogd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTApICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1LCAxMCwgNzY1LCB7IGxvY2FsZTogXCJmclwiIH0pIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMC43NjVaIHdpdGggYSBGcmVuY2ggbG9jYWxlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIHV0YygpIHtcbiAgICBjb25zdCBbb3B0cywgYXJnc10gPSBsYXN0T3B0cyhhcmd1bWVudHMpLFxuICAgICAgW3llYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF0gPSBhcmdzO1xuXG4gICAgb3B0cy56b25lID0gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlO1xuICAgIHJldHVybiBxdWlja0RUKHsgeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kIH0sIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0LiBVc2VzIHRoZSBkZWZhdWx0IHpvbmUuXG4gICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSAtIGEgSmF2YVNjcmlwdCBEYXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRpb25zLnpvbmU9J2xvY2FsJ10gLSB0aGUgem9uZSB0byBwbGFjZSB0aGUgRGF0ZVRpbWUgaW50b1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tSlNEYXRlKGRhdGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHRzID0gaXNEYXRlKGRhdGUpID8gZGF0ZS52YWx1ZU9mKCkgOiBOYU47XG4gICAgaWYgKE51bWJlci5pc05hTih0cykpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICAgIGlmICghem9uZVRvVXNlLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKHVuc3VwcG9ydGVkWm9uZSh6b25lVG9Vc2UpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgIHRzOiB0cyxcbiAgICAgIHpvbmU6IHpvbmVUb1VzZSxcbiAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucyksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGVwb2NoIChtZWFuaW5nIHNpbmNlIDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pbGxpc2Vjb25kcyAtIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSAxOTcwIFVUQ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRpb25zLnpvbmU9J2xvY2FsJ10gLSB0aGUgem9uZSB0byBwbGFjZSB0aGUgRGF0ZVRpbWUgaW50b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy53ZWVrU2V0dGluZ3MgLSB0aGUgd2VlayBzZXR0aW5ncyB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tTWlsbGlzKG1pbGxpc2Vjb25kcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFpc051bWJlcihtaWxsaXNlY29uZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgIGBmcm9tTWlsbGlzIHJlcXVpcmVzIGEgbnVtZXJpY2FsIGlucHV0LCBidXQgcmVjZWl2ZWQgYSAke3R5cGVvZiBtaWxsaXNlY29uZHN9IHdpdGggdmFsdWUgJHttaWxsaXNlY29uZHN9YFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG1pbGxpc2Vjb25kcyA8IC1NQVhfREFURSB8fCBtaWxsaXNlY29uZHMgPiBNQVhfREFURSkge1xuICAgICAgLy8gdGhpcyBpc24ndCBwZXJmZWN0IGJlY2F1c2Ugd2UgY2FuIHN0aWxsIGVuZCB1cCBvdXQgb2YgcmFuZ2UgYmVjYXVzZSBvZiBhZGRpdGlvbmFsIHNoaWZ0aW5nLCBidXQgaXQncyBhIHN0YXJ0XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChcIlRpbWVzdGFtcCBvdXQgb2YgcmFuZ2VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICB0czogbWlsbGlzZWNvbmRzLFxuICAgICAgICB6b25lOiBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLFxuICAgICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdGlvbnMpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBudW1iZXIgb2Ygc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2ggKG1lYW5pbmcgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAtIGEgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgMTk3MCBVVENcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0aW9ucy56b25lPSdsb2NhbCddIC0gdGhlIHpvbmUgdG8gcGxhY2UgdGhlIERhdGVUaW1lIGludG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZV0gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMud2Vla1NldHRpbmdzIC0gdGhlIHdlZWsgc2V0dGluZ3MgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgZnJvbVNlY29uZHMoc2Vjb25kcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFpc051bWJlcihzZWNvbmRzKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiZnJvbVNlY29uZHMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICB0czogc2Vjb25kcyAqIDEwMDAsXG4gICAgICAgIHpvbmU6IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSksXG4gICAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucyksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFyJyBhbmQgJ2hvdXInIHdpdGggcmVhc29uYWJsZSBkZWZhdWx0cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHRoZSBvYmplY3QgdG8gY3JlYXRlIHRoZSBEYXRlVGltZSBmcm9tXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoueWVhciAtIGEgeWVhciwgc3VjaCBhcyAxOTg3XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubW9udGggLSBhIG1vbnRoLCAxLTEyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouZGF5IC0gYSBkYXkgb2YgdGhlIG1vbnRoLCAxLTMxLCBkZXBlbmRpbmcgb24gdGhlIG1vbnRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoub3JkaW5hbCAtIGRheSBvZiB0aGUgeWVhciwgMS0zNjUgb3IgMzY2XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla1llYXIgLSBhbiBJU08gd2VlayB5ZWFyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla051bWJlciAtIGFuIElTTyB3ZWVrIG51bWJlciwgYmV0d2VlbiAxIGFuZCA1MiBvciA1MywgZGVwZW5kaW5nIG9uIHRoZSB5ZWFyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla2RheSAtIGFuIElTTyB3ZWVrZGF5LCAxLTcsIHdoZXJlIDEgaXMgTW9uZGF5IGFuZCA3IGlzIFN1bmRheVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmxvY2FsV2Vla1llYXIgLSBhIHdlZWsgeWVhciwgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5sb2NhbFdlZWtOdW1iZXIgLSBhIHdlZWsgbnVtYmVyLCBiZXR3ZWVuIDEgYW5kIDUyIG9yIDUzLCBkZXBlbmRpbmcgb24gdGhlIHllYXIsIGFjY29yZGluZyB0byB0aGUgbG9jYWxlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubG9jYWxXZWVrZGF5IC0gYSB3ZWVrZGF5LCAxLTcsIHdoZXJlIDEgaXMgdGhlIGZpcnN0IGFuZCA3IGlzIHRoZSBsYXN0IGRheSBvZiB0aGUgd2VlaywgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5ob3VyIC0gaG91ciBvZiB0aGUgZGF5LCAwLTIzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWludXRlIC0gbWludXRlIG9mIHRoZSBob3VyLCAwLTU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouc2Vjb25kIC0gc2Vjb25kIG9mIHRoZSBtaW51dGUsIDAtNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taWxsaXNlY29uZCAtIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIDAtOTk5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhpcyBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gaW50ZXJwcmV0IHRoZSBudW1iZXJzIGluIHRoZSBjb250ZXh0IG9mIGEgcGFydGljdWxhciB6b25lLiBDYW4gdGFrZSBhbnkgdmFsdWUgdGFrZW4gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHNldFpvbmUoKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdzeXN0ZW1cXCdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLndlZWtTZXR0aW5ncyAtIHRoZSB3ZWVrIHNldHRpbmdzIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB5ZWFyOiAxOTgyLCBtb250aDogNSwgZGF5OiAyNX0pLnRvSVNPRGF0ZSgpIC8vPT4gJzE5ODItMDUtMjUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB5ZWFyOiAxOTgyIH0pLnRvSVNPRGF0ZSgpIC8vPT4gJzE5ODItMDEtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0pIC8vfj4gdG9kYXkgYXQgMTA6MjY6MDZcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAndXRjJyB9KSxcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAnbG9jYWwnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0sIHsgem9uZTogJ0FtZXJpY2EvTmV3X1lvcmsnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB3ZWVrWWVhcjogMjAxNiwgd2Vla051bWJlcjogMiwgd2Vla2RheTogMyB9KS50b0lTT0RhdGUoKSAvLz0+ICcyMDE2LTAxLTEzJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgbG9jYWxXZWVrWWVhcjogMjAyMiwgbG9jYWxXZWVrTnVtYmVyOiAxLCBsb2NhbFdlZWtkYXk6IDEgfSwgeyBsb2NhbGU6IFwiZW4tVVNcIiB9KS50b0lTT0RhdGUoKSAvLz0+ICcyMDIxLTEyLTI2J1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tT2JqZWN0KG9iaiwgb3B0cyA9IHt9KSB7XG4gICAgb2JqID0gb2JqIHx8IHt9O1xuICAgIGNvbnN0IHpvbmVUb1VzZSA9IG5vcm1hbGl6ZVpvbmUob3B0cy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cblxuICAgIGNvbnN0IGxvYyA9IExvY2FsZS5mcm9tT2JqZWN0KG9wdHMpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVVbml0V2l0aExvY2FsV2Vla3MpO1xuICAgIGNvbnN0IHsgbWluRGF5c0luRmlyc3RXZWVrLCBzdGFydE9mV2VlayB9ID0gdXNlc0xvY2FsV2Vla1ZhbHVlcyhub3JtYWxpemVkLCBsb2MpO1xuXG4gICAgY29uc3QgdHNOb3cgPSBTZXR0aW5ncy5ub3coKSxcbiAgICAgIG9mZnNldFByb3ZpcyA9ICFpc1VuZGVmaW5lZChvcHRzLnNwZWNpZmljT2Zmc2V0KVxuICAgICAgICA/IG9wdHMuc3BlY2lmaWNPZmZzZXRcbiAgICAgICAgOiB6b25lVG9Vc2Uub2Zmc2V0KHRzTm93KSxcbiAgICAgIGNvbnRhaW5zT3JkaW5hbCA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLm9yZGluYWwpLFxuICAgICAgY29udGFpbnNHcmVnb3JZZWFyID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQueWVhciksXG4gICAgICBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksXG4gICAgICBjb250YWluc0dyZWdvciA9IGNvbnRhaW5zR3JlZ29yWWVhciB8fCBjb250YWluc0dyZWdvck1ELFxuICAgICAgZGVmaW5pdGVXZWVrRGVmID0gbm9ybWFsaXplZC53ZWVrWWVhciB8fCBub3JtYWxpemVkLndlZWtOdW1iZXI7XG5cbiAgICAvLyBjYXNlczpcbiAgICAvLyBqdXN0IGEgd2Vla2RheSAtPiB0aGlzIHdlZWsncyBpbnN0YW5jZSBvZiB0aGF0IHdlZWtkYXksIG5vIHdvcnJpZXNcbiAgICAvLyAoZ3JlZ29yaWFuIGRhdGEgb3Igb3JkaW5hbCkgKyAod2Vla1llYXIgb3Igd2Vla051bWJlcikgLT4gZXJyb3JcbiAgICAvLyAoZ3JlZ29yaWFuIG1vbnRoIG9yIGRheSkgKyBvcmRpbmFsIC0+IGVycm9yXG4gICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXNlIHdlZWtzIG9yIG9yZGluYWxzIG9yIGdyZWdvcmlhbiwgZGVwZW5kaW5nIG9uIHdoYXQncyBzcGVjaWZpZWRcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcbiAgICAgICAgXCJDYW4ndCBtaXggd2Vla1llYXIvd2Vla051bWJlciB1bml0cyB3aXRoIHllYXIvbW9udGgvZGF5IG9yIG9yZGluYWxzXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VXZWVrRGF0YSA9IGRlZmluaXRlV2Vla0RlZiB8fCAobm9ybWFsaXplZC53ZWVrZGF5ICYmICFjb250YWluc0dyZWdvcik7XG5cbiAgICAvLyBjb25maWd1cmUgb3Vyc2VsdmVzIHRvIGRlYWwgd2l0aCBncmVnb3JpYW4gZGF0ZXMgb3Igd2VlayBzdHVmZlxuICAgIGxldCB1bml0cyxcbiAgICAgIGRlZmF1bHRWYWx1ZXMsXG4gICAgICBvYmpOb3cgPSB0c1RvT2JqKHRzTm93LCBvZmZzZXRQcm92aXMpO1xuICAgIGlmICh1c2VXZWVrRGF0YSkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkV2Vla1VuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRXZWVrVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IGdyZWdvcmlhblRvV2VlayhvYmpOb3csIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspO1xuICAgIH0gZWxzZSBpZiAoY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRPcmRpbmFsVW5pdHM7XG4gICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzO1xuICAgICAgb2JqTm93ID0gZ3JlZ29yaWFuVG9PcmRpbmFsKG9iak5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFVuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRVbml0VmFsdWVzO1xuICAgIH1cblxuICAgIC8vIHNldCBkZWZhdWx0IHZhbHVlcyBmb3IgbWlzc2luZyBzdHVmZlxuICAgIGxldCBmb3VuZEZpcnN0ID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCB1IG9mIHVuaXRzKSB7XG4gICAgICBjb25zdCB2ID0gbm9ybWFsaXplZFt1XTtcbiAgICAgIGlmICghaXNVbmRlZmluZWQodikpIHtcbiAgICAgICAgZm91bmRGaXJzdCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGZvdW5kRmlyc3QpIHtcbiAgICAgICAgbm9ybWFsaXplZFt1XSA9IGRlZmF1bHRWYWx1ZXNbdV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtYWxpemVkW3VdID0gb2JqTm93W3VdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG1ha2Ugc3VyZSB0aGUgdmFsdWVzIHdlIGhhdmUgYXJlIGluIHJhbmdlXG4gICAgY29uc3QgaGlnaGVyT3JkZXJJbnZhbGlkID0gdXNlV2Vla0RhdGFcbiAgICAgICAgPyBoYXNJbnZhbGlkV2Vla0RhdGEobm9ybWFsaXplZCwgbWluRGF5c0luRmlyc3RXZWVrLCBzdGFydE9mV2VlaylcbiAgICAgICAgOiBjb250YWluc09yZGluYWxcbiAgICAgICAgPyBoYXNJbnZhbGlkT3JkaW5hbERhdGEobm9ybWFsaXplZClcbiAgICAgICAgOiBoYXNJbnZhbGlkR3JlZ29yaWFuRGF0YShub3JtYWxpemVkKSxcbiAgICAgIGludmFsaWQgPSBoaWdoZXJPcmRlckludmFsaWQgfHwgaGFzSW52YWxpZFRpbWVEYXRhKG5vcm1hbGl6ZWQpO1xuXG4gICAgaWYgKGludmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKGludmFsaWQpO1xuICAgIH1cblxuICAgIC8vIGNvbXB1dGUgdGhlIGFjdHVhbCB0aW1lXG4gICAgY29uc3QgZ3JlZ29yaWFuID0gdXNlV2Vla0RhdGFcbiAgICAgICAgPyB3ZWVrVG9HcmVnb3JpYW4obm9ybWFsaXplZCwgbWluRGF5c0luRmlyc3RXZWVrLCBzdGFydE9mV2VlaylcbiAgICAgICAgOiBjb250YWluc09yZGluYWxcbiAgICAgICAgPyBvcmRpbmFsVG9HcmVnb3JpYW4obm9ybWFsaXplZClcbiAgICAgICAgOiBub3JtYWxpemVkLFxuICAgICAgW3RzRmluYWwsIG9mZnNldEZpbmFsXSA9IG9ialRvVFMoZ3JlZ29yaWFuLCBvZmZzZXRQcm92aXMsIHpvbmVUb1VzZSksXG4gICAgICBpbnN0ID0gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IHRzRmluYWwsXG4gICAgICAgIHpvbmU6IHpvbmVUb1VzZSxcbiAgICAgICAgbzogb2Zmc2V0RmluYWwsXG4gICAgICAgIGxvYyxcbiAgICAgIH0pO1xuXG4gICAgLy8gZ3JlZ29yaWFuIGRhdGEgKyB3ZWVrZGF5IHNlcnZlcyBvbmx5IHRvIHZhbGlkYXRlXG4gICAgaWYgKG5vcm1hbGl6ZWQud2Vla2RheSAmJiBjb250YWluc0dyZWdvciAmJiBvYmoud2Vla2RheSAhPT0gaW5zdC53ZWVrZGF5KSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChcbiAgICAgICAgXCJtaXNtYXRjaGVkIHdlZWtkYXlcIixcbiAgICAgICAgYHlvdSBjYW4ndCBzcGVjaWZ5IGJvdGggYSB3ZWVrZGF5IG9mICR7bm9ybWFsaXplZC53ZWVrZGF5fSBhbmQgYSBkYXRlIG9mICR7aW5zdC50b0lTTygpfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnN0LmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKGluc3QuaW52YWxpZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhbiBJU08gODYwMSBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgSVNPIHN0cmluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gdXNlIHRoaXMgem9uZSBpZiBubyBvZmZzZXQgaXMgc3BlY2lmaWVkIGluIHRoZSBpbnB1dCBzdHJpbmcgaXRzZWxmLiBXaWxsIGFsc28gY29udmVydCB0aGUgdGltZSB0byB0aGlzIHpvbmVcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSBmaXhlZC1vZmZzZXQgem9uZSBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIGlmIGl0IHNwZWNpZmllcyBvbmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXJdIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy53ZWVrU2V0dGluZ3NdIC0gdGhlIHdlZWsgc2V0dGluZ3MgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMyswNjowMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJywge3NldFpvbmU6IHRydWV9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMycsIHt6b25lOiAndXRjJ30pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtVzA1LTQnKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tSVNPKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlSVNPRGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIklTTyA4NjAxXCIsIHRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gUkZDIDI4MjIgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIFJGQyAyODIyIHN0cmluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gY29udmVydCB0aGUgdGltZSB0byB0aGlzIHpvbmUuIFNpbmNlIHRoZSBvZmZzZXQgaXMgYWx3YXlzIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgdGhpcyBoYXMgbm8gZWZmZWN0IG9uIHRoZSBpbnRlcnByZXRhdGlvbiBvZiBzdHJpbmcsIG1lcmVseSB0aGUgem9uZSB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGlzIGV4cHJlc3NlZCBpbi5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSBmaXhlZC1vZmZzZXQgem9uZSBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIGlmIGl0IHNwZWNpZmllcyBvbmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMud2Vla1NldHRpbmdzIC0gdGhlIHdlZWsgc2V0dGluZ3MgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVJGQzI4MjIoJzI1IE5vdiAyMDE2IDEzOjIzOjEyIEdNVCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCdGcmksIDI1IE5vdiAyMDE2IDEzOjIzOjEyICswNjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVJGQzI4MjIoJzI1IE5vdiAyMDE2IDEzOjIzIFonKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tUkZDMjgyMih0ZXh0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZVJGQzI4MjJEYXRlKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiUkZDIDI4MjJcIiwgdGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhbiBIVFRQIGhlYWRlciBkYXRlXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMy5odG1sI3NlYzMuMy4xXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIEhUVFAgaGVhZGVyIGRhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lLiBTaW5jZSBIVFRQIGRhdGVzIGFyZSBhbHdheXMgaW4gVVRDLCB0aGlzIGhhcyBubyBlZmZlY3Qgb24gdGhlIGludGVycHJldGF0aW9uIG9mIHN0cmluZywgbWVyZWx5IHRoZSB6b25lIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaXMgZXhwcmVzc2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCB0aGUgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcuIEZvciBIVFRQIGRhdGVzLCB0aGlzIGlzIGFsd2F5cyBVVEMsIHNvIHRoaXMgb3B0aW9uIGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyB0aGUgYHpvbmVgIG9wdGlvbiB0byAndXRjJywgYnV0IHRoaXMgb3B0aW9uIGlzIGluY2x1ZGVkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHNpbWlsYXIgbWV0aG9kcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMud2Vla1NldHRpbmdzIC0gdGhlIHdlZWsgc2V0dGluZ3MgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1biwgMDYgTm92IDE5OTQgMDg6NDk6MzcgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1bmRheSwgMDYtTm92LTk0IDA4OjQ5OjM3IEdNVCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW4gTm92ICA2IDA4OjQ5OjM3IDE5OTQnKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tSFRUUCh0ZXh0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZUhUVFBEYXRlKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiSFRUUFwiLCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIGlucHV0IHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZy5cbiAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlLiBGb3IgYSB0YWJsZSBvZiB0b2tlbnMgYW5kIHRoZWlyIGludGVycHJldGF0aW9ucywgc2VlIFtoZXJlXShodHRwczovL21vbWVudC5naXRodWIuaW8vbHV4b24vIy9wYXJzaW5nP2lkPXRhYmxlLW9mLXRva2VucykuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgdGhlIGxpbmsgYmVsb3cgZm9yIHRoZSBmb3JtYXRzKVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gdXNlIHRoaXMgem9uZSBpZiBubyBvZmZzZXQgaXMgc3BlY2lmaWVkIGluIHRoZSBpbnB1dCBzdHJpbmcgaXRzZWxmLiBXaWxsIGFsc28gY29udmVydCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgem9uZSBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIGlmIGl0IHNwZWNpZmllcyBvbmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIGEgbG9jYWxlIHN0cmluZyB0byB1c2Ugd2hlbiBwYXJzaW5nLiBXaWxsIGFsc28gc2V0IHRoZSBEYXRlVGltZSB0byB0aGlzIGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2Ugd2hlbiBwYXJzaW5nLiBXaWxsIGFsc28gc2V0IHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgdG8gdGhpcyBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLndlZWtTZXR0aW5ncyAtIHRoZSB3ZWVrIHNldHRpbmdzIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tRm9ybWF0KHRleHQsIGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHRleHQpIHx8IGlzVW5kZWZpbmVkKGZtdCkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcImZyb21Gb3JtYXQgcmVxdWlyZXMgYW4gaW5wdXQgc3RyaW5nIGFuZCBhIGZvcm1hdFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGxvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwgfSA9IG9wdHMsXG4gICAgICBsb2NhbGVUb1VzZSA9IExvY2FsZS5mcm9tT3B0cyh7XG4gICAgICAgIGxvY2FsZSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBkZWZhdWx0VG9FTjogdHJ1ZSxcbiAgICAgIH0pLFxuICAgICAgW3ZhbHMsIHBhcnNlZFpvbmUsIHNwZWNpZmljT2Zmc2V0LCBpbnZhbGlkXSA9IHBhcnNlRnJvbVRva2Vucyhsb2NhbGVUb1VzZSwgdGV4dCwgZm10KTtcbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIGBmb3JtYXQgJHtmbXR9YCwgdGV4dCwgc3BlY2lmaWNPZmZzZXQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZnJvbUZvcm1hdCBpbnN0ZWFkXG4gICAqL1xuICBzdGF0aWMgZnJvbVN0cmluZyh0ZXh0LCBmbXQsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0KHRleHQsIGZtdCwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIFNRTCBkYXRlLCB0aW1lLCBvciBkYXRldGltZVxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSB1c2UgdGhpcyB6b25lIGlmIG5vIG9mZnNldCBpcyBzcGVjaWZpZWQgaW4gdGhlIGlucHV0IHN0cmluZyBpdHNlbGYuIFdpbGwgYWxzbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byB0aGlzIHpvbmVcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgc3RyaW5nIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIERhdGVUaW1lIHRvIHRoaXMgbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIHJlc3VsdGluZyBEYXRlVGltZSB0byB0aGlzIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMud2Vla1NldHRpbmdzIC0gdGhlIHdlZWsgc2V0dGluZ3MgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0JylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDInKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MiswNjowMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyIEFtZXJpY2EvTG9zX0FuZ2VsZXMnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MiBBbWVyaWNhL0xvc19BbmdlbGVzJywgeyBzZXRab25lOiB0cnVlIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyJywgeyB6b25lOiAnQW1lcmljYS9Mb3NfQW5nZWxlcycgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMDk6MTI6MzQuMzQyJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgZnJvbVNRTCh0ZXh0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZVNRTCh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIlNRTFwiLCB0ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW52YWxpZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgRGF0ZVRpbWUgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtleHBsYW5hdGlvbj1udWxsXSAtIGxvbmdlciBleHBsYW5hdGlvbiwgbWF5IGluY2x1ZGUgcGFyYW1ldGVycyBhbmQgb3RoZXIgdXNlZnVsIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRGF0ZVRpbWUgaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuXG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoeyBpbnZhbGlkIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZVRpbWUuIFdvcmtzIGFjcm9zcyBjb250ZXh0IGJvdW5kYXJpZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0RhdGVUaW1lKG8pIHtcbiAgICByZXR1cm4gKG8gJiYgby5pc0x1eG9uRGF0ZVRpbWUpIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2R1Y2UgdGhlIGZvcm1hdCBzdHJpbmcgZm9yIGEgc2V0IG9mIG9wdGlvbnNcbiAgICogQHBhcmFtIGZvcm1hdE9wdHNcbiAgICogQHBhcmFtIGxvY2FsZU9wdHNcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBwYXJzZUZvcm1hdEZvck9wdHMoZm9ybWF0T3B0cywgbG9jYWxlT3B0cyA9IHt9KSB7XG4gICAgY29uc3QgdG9rZW5MaXN0ID0gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIExvY2FsZS5mcm9tT2JqZWN0KGxvY2FsZU9wdHMpKTtcbiAgICByZXR1cm4gIXRva2VuTGlzdCA/IG51bGwgOiB0b2tlbkxpc3QubWFwKCh0KSA9PiAodCA/IHQudmFsIDogbnVsbCkpLmpvaW4oXCJcIik7XG4gIH1cblxuICAvKipcbiAgICogUHJvZHVjZSB0aGUgdGhlIGZ1bGx5IGV4cGFuZGVkIGZvcm1hdCB0b2tlbiBmb3IgdGhlIGxvY2FsZVxuICAgKiBEb2VzIE5PVCBxdW90ZSBjaGFyYWN0ZXJzLCBzbyBxdW90ZWQgdG9rZW5zIHdpbGwgbm90IHJvdW5kIHRyaXAgY29ycmVjdGx5XG4gICAqIEBwYXJhbSBmbXRcbiAgICogQHBhcmFtIGxvY2FsZU9wdHNcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBleHBhbmRGb3JtYXQoZm10LCBsb2NhbGVPcHRzID0ge30pIHtcbiAgICBjb25zdCBleHBhbmRlZCA9IGV4cGFuZE1hY3JvVG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLCBMb2NhbGUuZnJvbU9iamVjdChsb2NhbGVPcHRzKSk7XG4gICAgcmV0dXJuIGV4cGFuZGVkLm1hcCgodCkgPT4gdC52YWwpLmpvaW4oXCJcIik7XG4gIH1cblxuICBzdGF0aWMgcmVzZXRDYWNoZSgpIHtcbiAgICB6b25lT2Zmc2V0VHMgPSB1bmRlZmluZWQ7XG4gICAgem9uZU9mZnNldEd1ZXNzQ2FjaGUuY2xlYXIoKTtcbiAgfVxuXG4gIC8vIElORk9cblxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnbW9udGgnKTsgLy89PiA3XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnZGF5Jyk7IC8vPT4gNFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW3VuaXRdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQuIEludmFsaWQgRGF0ZVRpbWVzIG9jY3VyIHdoZW46XG4gICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGZyb20gaW52YWxpZCBjYWxlbmRhciBpbmZvcm1hdGlvbiwgc3VjaCBhcyB0aGUgMTN0aCBtb250aCBvciBGZWJydWFyeSAzMFxuICAgKiAqIFRoZSBEYXRlVGltZSB3YXMgY3JlYXRlZCBieSBhbiBvcGVyYXRpb24gb24gYW5vdGhlciBpbnZhbGlkIGRhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIERhdGVUaW1lIGlzIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIERhdGVUaW1lIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBEYXRlVGltZSBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRGF0ZVRpbWUgaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsb2NhbGUgb2YgYSBEYXRlVGltZSwgc3VjaCAnZW4tR0InLiBUaGUgbG9jYWxlIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubG9jYWxlIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEYXRlVGltZSwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG91dHB1dCBjYWxlbmRhciBvZiBhIERhdGVUaW1lLCBzdWNoICdpc2xhbWljJy4gVGhlIG91dHB1dCBjYWxlbmRhciBpcyB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgRGF0ZVRpbWVcbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBvdXRwdXRDYWxlbmRhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdGltZSB6b25lIGFzc29jaWF0ZWQgd2l0aCB0aGlzIERhdGVUaW1lLlxuICAgKiBAdHlwZSB7Wm9uZX1cbiAgICovXG4gIGdldCB6b25lKCkge1xuICAgIHJldHVybiB0aGlzLl96b25lO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZSBvZiB0aGUgdGltZSB6b25lLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IHpvbmVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUubmFtZSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB5ZWFyXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS55ZWFyIC8vPT4gMjAxN1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHllYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy55ZWFyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcXVhcnRlclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucXVhcnRlciAvLz0+IDJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBxdWFydGVyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBNYXRoLmNlaWwodGhpcy5jLm1vbnRoIC8gMykgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtb250aCAoMS0xMikuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5tb250aCAvLz0+IDVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtb250aCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1vbnRoIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5IG9mIHRoZSBtb250aCAoMS0zMGlzaCkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5kYXkgLy89PiAyNVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGRheSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLmRheSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGhvdXIgb2YgdGhlIGRheSAoMC0yMykuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5KS5ob3VyIC8vPT4gOVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGhvdXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5ob3VyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWludXRlIG9mIHRoZSBob3VyICgwLTU5KS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwKS5taW51dGUgLy89PiAzMFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG1pbnV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbnV0ZSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNlY29uZCBvZiB0aGUgbWludXRlICgwLTU5KS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwLCA1Mikuc2Vjb25kIC8vPT4gNTJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBzZWNvbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5zZWNvbmQgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kICgwLTk5OSkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIsIDY1NCkubWlsbGlzZWNvbmQgLy89PiA2NTRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtaWxsaXNlY29uZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbGxpc2Vjb25kIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayB5ZWFyXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAxMiwgMzEpLndlZWtZZWFyIC8vPT4gMjAxNVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtZZWFyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayBudW1iZXIgb2YgdGhlIHdlZWsgeWVhciAoMS01MmlzaCkuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkud2Vla051bWJlciAvLz0+IDIxXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgd2Vla051bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrTnVtYmVyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrLlxuICAgKiAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDExLCAzMSkud2Vla2RheSAvLz0+IDRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB3ZWVrZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtkYXkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgZGF0ZSBpcyBvbiBhIHdlZWtlbmQgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbGUsIGZhbHNlIG90aGVyd2lzZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc1dlZWtlbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCAmJiB0aGlzLmxvYy5nZXRXZWVrZW5kRGF5cygpLmluY2x1ZGVzKHRoaXMud2Vla2RheSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBkYXkgb2YgdGhlIHdlZWsgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbGUuXG4gICAqIDEgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayBhbmQgNyBpcyB0aGUgbGFzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAqIElmIHRoZSBsb2NhbGUgYXNzaWducyBTdW5kYXkgYXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaywgdGhlbiBhIGRhdGUgd2hpY2ggaXMgYSBTdW5kYXkgd2lsbCByZXR1cm4gMSxcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBsb2NhbFdlZWtkYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHBvc3NpYmx5Q2FjaGVkTG9jYWxXZWVrRGF0YSh0aGlzKS53ZWVrZGF5IDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayBudW1iZXIgb2YgdGhlIHdlZWsgeWVhciBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsZS4gRGlmZmVyZW50IGxvY2FsZXMgYXNzaWduIHdlZWsgbnVtYmVycyBkaWZmZXJlbnRseSxcbiAgICogYmVjYXVzZSB0aGUgd2VlayBjYW4gc3RhcnQgb24gZGlmZmVyZW50IGRheXMgb2YgdGhlIHdlZWsgKHNlZSBsb2NhbFdlZWtkYXkpIGFuZCBiZWNhdXNlIGEgZGlmZmVyZW50IG51bWJlciBvZiBkYXlzXG4gICAqIGlzIHJlcXVpcmVkIGZvciBhIHdlZWsgdG8gY291bnQgYXMgdGhlIGZpcnN0IHdlZWsgb2YgYSB5ZWFyLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGxvY2FsV2Vla051bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRMb2NhbFdlZWtEYXRhKHRoaXMpLndlZWtOdW1iZXIgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrIHllYXIgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbGUuIERpZmZlcmVudCBsb2NhbGVzIGFzc2lnbiB3ZWVrIG51bWJlcnMgKGFuZCB0aGVyZWZvciB3ZWVrIHllYXJzKVxuICAgKiBkaWZmZXJlbnRseSwgc2VlIGxvY2FsV2Vla051bWJlci5cbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBsb2NhbFdlZWtZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZExvY2FsV2Vla0RhdGEodGhpcykud2Vla1llYXIgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBvcmRpbmFsIChtZWFuaW5nIHRoZSBkYXkgb2YgdGhlIHllYXIpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5vcmRpbmFsIC8vPT4gMTQ1XG4gICAqIEB0eXBlIHtudW1iZXJ8RGF0ZVRpbWV9XG4gICAqL1xuICBnZXQgb3JkaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYykub3JkaW5hbCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIHNob3J0IG1vbnRoIG5hbWUsIHN1Y2ggYXMgJ09jdCcuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAxMCwgMzApLm1vbnRoU2hvcnQgLy89PiBPY3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBtb250aFNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLm1vbnRocyhcInNob3J0XCIsIHsgbG9jT2JqOiB0aGlzLmxvYyB9KVt0aGlzLm1vbnRoIC0gMV0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgbG9uZyBtb250aCBuYW1lLCBzdWNoIGFzICdPY3RvYmVyJy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkubW9udGhMb25nIC8vPT4gT2N0b2JlclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG1vbnRoTG9uZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby5tb250aHMoXCJsb25nXCIsIHsgbG9jT2JqOiB0aGlzLmxvYyB9KVt0aGlzLm1vbnRoIC0gMV0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgc2hvcnQgd2Vla2RheSwgc3VjaCBhcyAnTW9uJy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkud2Vla2RheVNob3J0IC8vPT4gTW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgd2Vla2RheVNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwic2hvcnRcIiwgeyBsb2NPYmo6IHRoaXMubG9jIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIGxvbmcgd2Vla2RheSwgc3VjaCBhcyAnTW9uZGF5Jy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkud2Vla2RheUxvbmcgLy89PiBNb25kYXlcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCB3ZWVrZGF5TG9uZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby53ZWVrZGF5cyhcImxvbmdcIiwgeyBsb2NPYmo6IHRoaXMubG9jIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIFVUQyBvZmZzZXQgb2YgdGhpcyBEYXRlVGltZSBpbiBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm9mZnNldCAvLz0+IC0yNDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkub2Zmc2V0IC8vPT4gMFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gK3RoaXMubyA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNob3J0IGh1bWFuIG5hbWUgZm9yIHRoZSB6b25lJ3MgY3VycmVudCBvZmZzZXQsIGZvciBleGFtcGxlIFwiRVNUXCIgb3IgXCJFRFRcIi5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgb2Zmc2V0TmFtZVNob3J0KCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnpvbmUub2Zmc2V0TmFtZSh0aGlzLnRzLCB7XG4gICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxvbmcgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcIiBvciBcIkVhc3Rlcm4gRGF5bGlnaHQgVGltZVwiLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBvZmZzZXROYW1lTG9uZygpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy56b25lLm9mZnNldE5hbWUodGhpcy50cywge1xuICAgICAgICBmb3JtYXQ6IFwibG9uZ1wiLFxuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGlzIHpvbmUncyBvZmZzZXQgZXZlciBjaGFuZ2VzLCBhcyBpbiBhIERTVC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNPZmZzZXRGaXhlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy56b25lLmlzVW5pdmVyc2FsIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgaW4gYSBEU1QuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzSW5EU1QoKSB7XG4gICAgaWYgKHRoaXMuaXNPZmZzZXRGaXhlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLm9mZnNldCA+IHRoaXMuc2V0KHsgbW9udGg6IDEsIGRheTogMSB9KS5vZmZzZXQgfHxcbiAgICAgICAgdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7IG1vbnRoOiA1IH0pLm9mZnNldFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRob3NlIERhdGVUaW1lcyB3aGljaCBoYXZlIHRoZSBzYW1lIGxvY2FsIHRpbWUgYXMgdGhpcyBEYXRlVGltZSwgYnV0IGEgZGlmZmVyZW50IG9mZnNldCBmcm9tIFVUQ1xuICAgKiBpbiB0aGlzIERhdGVUaW1lJ3Mgem9uZS4gRHVyaW5nIERTVCBjaGFuZ2VzIGxvY2FsIHRpbWUgY2FuIGJlIGFtYmlndW91cywgZm9yIGV4YW1wbGVcbiAgICogYDIwMjMtMTAtMjlUMDI6MzA6MDBgIGluIGBFdXJvcGUvQmVybGluYCBjYW4gaGF2ZSBvZmZzZXQgYCswMTowMGAgb3IgYCswMjowMGAuXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGJvdGggcG9zc2libGUgRGF0ZVRpbWVzIGlmIHRoaXMgRGF0ZVRpbWUncyBsb2NhbCB0aW1lIGlzIGFtYmlndW91cy5cbiAgICogQHJldHVybnMge0RhdGVUaW1lW119XG4gICAqL1xuICBnZXRQb3NzaWJsZU9mZnNldHMoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgdGhpcy5pc09mZnNldEZpeGVkKSB7XG4gICAgICByZXR1cm4gW3RoaXNdO1xuICAgIH1cbiAgICBjb25zdCBkYXlNcyA9IDg2NDAwMDAwO1xuICAgIGNvbnN0IG1pbnV0ZU1zID0gNjAwMDA7XG4gICAgY29uc3QgbG9jYWxUUyA9IG9ialRvTG9jYWxUUyh0aGlzLmMpO1xuICAgIGNvbnN0IG9FYXJsaWVyID0gdGhpcy56b25lLm9mZnNldChsb2NhbFRTIC0gZGF5TXMpO1xuICAgIGNvbnN0IG9MYXRlciA9IHRoaXMuem9uZS5vZmZzZXQobG9jYWxUUyArIGRheU1zKTtcblxuICAgIGNvbnN0IG8xID0gdGhpcy56b25lLm9mZnNldChsb2NhbFRTIC0gb0VhcmxpZXIgKiBtaW51dGVNcyk7XG4gICAgY29uc3QgbzIgPSB0aGlzLnpvbmUub2Zmc2V0KGxvY2FsVFMgLSBvTGF0ZXIgKiBtaW51dGVNcyk7XG4gICAgaWYgKG8xID09PSBvMikge1xuICAgICAgcmV0dXJuIFt0aGlzXTtcbiAgICB9XG4gICAgY29uc3QgdHMxID0gbG9jYWxUUyAtIG8xICogbWludXRlTXM7XG4gICAgY29uc3QgdHMyID0gbG9jYWxUUyAtIG8yICogbWludXRlTXM7XG4gICAgY29uc3QgYzEgPSB0c1RvT2JqKHRzMSwgbzEpO1xuICAgIGNvbnN0IGMyID0gdHNUb09iaih0czIsIG8yKTtcbiAgICBpZiAoXG4gICAgICBjMS5ob3VyID09PSBjMi5ob3VyICYmXG4gICAgICBjMS5taW51dGUgPT09IGMyLm1pbnV0ZSAmJlxuICAgICAgYzEuc2Vjb25kID09PSBjMi5zZWNvbmQgJiZcbiAgICAgIGMxLm1pbGxpc2Vjb25kID09PSBjMi5taWxsaXNlY29uZFxuICAgICkge1xuICAgICAgcmV0dXJuIFtjbG9uZSh0aGlzLCB7IHRzOiB0czEgfSksIGNsb25lKHRoaXMsIHsgdHM6IHRzMiB9KV07XG4gICAgfVxuICAgIHJldHVybiBbdGhpc107XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW4gYSBsZWFwIHllYXIsIGZhbHNlIG90aGVyd2lzZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5pc0luTGVhcFllYXIgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmlzSW5MZWFwWWVhciAvLz0+IGZhbHNlXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzSW5MZWFwWWVhcigpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgRGF0ZVRpbWUncyBtb250aFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2LCAyKS5kYXlzSW5Nb250aCAvLz0+IDI5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTYsIDMpLmRheXNJbk1vbnRoIC8vPT4gMzFcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBkYXlzSW5Nb250aCgpIHtcbiAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyLCB0aGlzLm1vbnRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgeWVhclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5kYXlzSW5ZZWFyIC8vPT4gMzY2XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmRheXNJblllYXIgLy89PiAzNjVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBkYXlzSW5ZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBkYXlzSW5ZZWFyKHRoaXMueWVhcikgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHdlZWtzIGluIHRoaXMgRGF0ZVRpbWUncyB5ZWFyXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDA0KS53ZWVrc0luV2Vla1llYXIgLy89PiA1M1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDEzKS53ZWVrc0luV2Vla1llYXIgLy89PiA1MlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gd2Vla3NJbldlZWtZZWFyKHRoaXMud2Vla1llYXIpIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB3ZWVrcyBpbiB0aGlzIERhdGVUaW1lJ3MgbG9jYWwgd2VlayB5ZWFyXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMjAsIDYsIHtsb2NhbGU6ICdlbi1VUyd9KS53ZWVrc0luTG9jYWxXZWVrWWVhciAvLz0+IDUyXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMjAsIDYsIHtsb2NhbGU6ICdkZS1ERSd9KS53ZWVrc0luTG9jYWxXZWVrWWVhciAvLz0+IDUzXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgd2Vla3NJbkxvY2FsV2Vla1llYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyB3ZWVrc0luV2Vla1llYXIoXG4gICAgICAgICAgdGhpcy5sb2NhbFdlZWtZZWFyLFxuICAgICAgICAgIHRoaXMubG9jLmdldE1pbkRheXNJbkZpcnN0V2VlaygpLFxuICAgICAgICAgIHRoaXMubG9jLmdldFN0YXJ0T2ZXZWVrKClcbiAgICAgICAgKVxuICAgICAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcmVzb2x2ZWQgSW50bCBvcHRpb25zIGZvciB0aGlzIERhdGVUaW1lLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpbiB1bmRlcnN0YW5kaW5nIHRoZSBiZWhhdmlvciBvZiBmb3JtYXR0aW5nIG1ldGhvZHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSB0aGUgc2FtZSBvcHRpb25zIGFzIHRvTG9jYWxlU3RyaW5nXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHJlc29sdmVkTG9jYWxlT3B0aW9ucyhvcHRzID0ge30pIHtcbiAgICBjb25zdCB7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhciB9ID0gRm9ybWF0dGVyLmNyZWF0ZShcbiAgICAgIHRoaXMubG9jLmNsb25lKG9wdHMpLFxuICAgICAgb3B0c1xuICAgICkucmVzb2x2ZWRPcHRpb25zKHRoaXMpO1xuICAgIHJldHVybiB7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcjogY2FsZW5kYXIgfTtcbiAgfVxuXG4gIC8vIFRSQU5TRk9STVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gVVRDLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqXG4gICAqIEVxdWl2YWxlbnQgdG8ge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9KCd1dGMnKVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIG9wdGlvbmFsbHksIGFuIG9mZnNldCBmcm9tIFVUQyBpbiBtaW51dGVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBvcHRpb25zIHRvIHBhc3MgdG8gYHNldFpvbmUoKWBcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICB0b1VUQyhvZmZzZXQgPSAwLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5zZXRab25lKEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShvZmZzZXQpLCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gdGhlIGhvc3QncyBsb2NhbCB6b25lLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqXG4gICAqIEVxdWl2YWxlbnQgdG8gYHNldFpvbmUoJ2xvY2FsJylgXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgdG9Mb2NhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRab25lKFNldHRpbmdzLmRlZmF1bHRab25lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gc3BlY2lmaWVkIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHNldHRlciBrZWVwcyB0aGUgdW5kZXJseWluZyB0aW1lIHRoZSBzYW1lIChhcyBpbiwgdGhlIHNhbWUgdGltZXN0YW1wKSwgYnV0IHRoZSBuZXcgaW5zdGFuY2Ugd2lsbCByZXBvcnQgZGlmZmVyZW50IGxvY2FsIHRpbWVzIGFuZCBjb25zaWRlciBEU1RzIHdoZW4gbWFraW5nIGNvbXB1dGF0aW9ucywgYXMgd2l0aCB7QGxpbmsgRGF0ZVRpbWUjcGx1c30uIFlvdSBtYXkgd2lzaCB0byB1c2Uge0BsaW5rIERhdGVUaW1lI3RvTG9jYWx9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9VVEN9IHdoaWNoIHByb3ZpZGUgc2ltcGxlIGNvbnZlbmllbmNlIHdyYXBwZXJzIGZvciBjb21tb25seSB1c2VkIHpvbmVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbem9uZT0nbG9jYWwnXSAtIGEgem9uZSBpZGVudGlmaWVyLiBBcyBhIHN0cmluZywgdGhhdCBjYW4gYmUgYW55IElBTkEgem9uZSBzdXBwb3J0ZWQgYnkgdGhlIGhvc3QgZW52aXJvbm1lbnQsIG9yIGEgZml4ZWQtb2Zmc2V0IG5hbWUgb2YgdGhlIGZvcm0gJ1VUQyszJywgb3IgdGhlIHN0cmluZ3MgJ2xvY2FsJyBvciAndXRjJy4gWW91IG1heSBhbHNvIHN1cHBseSBhbiBpbnN0YW5jZSBvZiBhIHtAbGluayBEYXRlVGltZSNab25lfSBjbGFzcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMua2VlcExvY2FsVGltZT1mYWxzZV0gLSBJZiB0cnVlLCBhZGp1c3QgdGhlIHVuZGVybHlpbmcgdGltZSBzbyB0aGF0IHRoZSBsb2NhbCB0aW1lIHN0YXlzIHRoZSBzYW1lLCBidXQgaW4gdGhlIHRhcmdldCB6b25lLiBZb3Ugc2hvdWxkIHJhcmVseSBuZWVkIHRoaXMuXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc2V0Wm9uZSh6b25lLCB7IGtlZXBMb2NhbFRpbWUgPSBmYWxzZSwga2VlcENhbGVuZGFyVGltZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIHpvbmUgPSBub3JtYWxpemVab25lKHpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKTtcbiAgICBpZiAoem9uZS5lcXVhbHModGhpcy56b25lKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIGlmICghem9uZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCh1bnN1cHBvcnRlZFpvbmUoem9uZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmV3VFMgPSB0aGlzLnRzO1xuICAgICAgaWYgKGtlZXBMb2NhbFRpbWUgfHwga2VlcENhbGVuZGFyVGltZSkge1xuICAgICAgICBjb25zdCBvZmZzZXRHdWVzcyA9IHpvbmUub2Zmc2V0KHRoaXMudHMpO1xuICAgICAgICBjb25zdCBhc09iaiA9IHRoaXMudG9PYmplY3QoKTtcbiAgICAgICAgW25ld1RTXSA9IG9ialRvVFMoYXNPYmosIG9mZnNldEd1ZXNzLCB6b25lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IHRzOiBuZXdUUywgem9uZSB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG9yIG91dHB1dENhbGVuZGFyLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIHByb3BlcnRpZXMgdG8gc2V0XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5yZWNvbmZpZ3VyZSh7IGxvY2FsZTogJ2VuLUdCJyB9KVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHJlY29uZmlndXJlKHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyIH0gPSB7fSkge1xuICAgIGNvbnN0IGxvYyA9IHRoaXMubG9jLmNsb25lKHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyIH0pO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IGxvYyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBsb2NhbGUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICogSnVzdCBhIGNvbnZlbmllbnQgYWxpYXMgZm9yIHJlY29uZmlndXJlKHsgbG9jYWxlIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5zZXRMb2NhbGUoJ2VuLUdCJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzZXRMb2NhbGUobG9jYWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVjb25maWd1cmUoeyBsb2NhbGUgfSk7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgdmFsdWVzIG9mIHNwZWNpZmllZCB1bml0cy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBZb3UgY2FuIG9ubHkgc2V0IHVuaXRzIHdpdGggdGhpcyBtZXRob2Q7IGZvciBcInNldHRpbmdcIiBtZXRhZGF0YSwgc2VlIHtAbGluayBEYXRlVGltZSNyZWNvbmZpZ3VyZX0gYW5kIHtAbGluayBEYXRlVGltZSNzZXRab25lfS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgYWxzbyBzdXBwb3J0cyBzZXR0aW5nIGxvY2FsZS1iYXNlZCB3ZWVrIHVuaXRzLCBpLmUuIGBsb2NhbFdlZWtkYXlgLCBgbG9jYWxXZWVrTnVtYmVyYCBhbmQgYGxvY2FsV2Vla1llYXJgLlxuICAgKiBUaGV5IGNhbm5vdCBiZSBtaXhlZCB3aXRoIElTTy13ZWVrIHVuaXRzIGxpa2UgYHdlZWtkYXlgLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYSBtYXBwaW5nIG9mIHVuaXRzIHRvIG51bWJlcnNcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgeWVhcjogMjAxNyB9KVxuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyBob3VyOiA4LCBtaW51dGU6IDMwIH0pXG4gICAqIEBleGFtcGxlIGR0LnNldCh7IHdlZWtkYXk6IDUgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgeWVhcjogMjAwNSwgb3JkaW5hbDogMjM0IH0pXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc2V0KHZhbHVlcykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVPYmplY3QodmFsdWVzLCBub3JtYWxpemVVbml0V2l0aExvY2FsV2Vla3MpO1xuICAgIGNvbnN0IHsgbWluRGF5c0luRmlyc3RXZWVrLCBzdGFydE9mV2VlayB9ID0gdXNlc0xvY2FsV2Vla1ZhbHVlcyhub3JtYWxpemVkLCB0aGlzLmxvYyk7XG5cbiAgICBjb25zdCBzZXR0aW5nV2Vla1N0dWZmID1cbiAgICAgICAgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQud2Vla1llYXIpIHx8XG4gICAgICAgICFpc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtOdW1iZXIpIHx8XG4gICAgICAgICFpc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtkYXkpLFxuICAgICAgY29udGFpbnNPcmRpbmFsID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksXG4gICAgICBjb250YWluc0dyZWdvclllYXIgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC55ZWFyKSxcbiAgICAgIGNvbnRhaW5zR3JlZ29yTUQgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5tb250aCkgfHwgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQuZGF5KSxcbiAgICAgIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsXG4gICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcjtcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcbiAgICAgICAgXCJDYW4ndCBtaXggd2Vla1llYXIvd2Vla051bWJlciB1bml0cyB3aXRoIHllYXIvbW9udGgvZGF5IG9yIG9yZGluYWxzXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICBsZXQgbWl4ZWQ7XG4gICAgaWYgKHNldHRpbmdXZWVrU3R1ZmYpIHtcbiAgICAgIG1peGVkID0gd2Vla1RvR3JlZ29yaWFuKFxuICAgICAgICB7IC4uLmdyZWdvcmlhblRvV2Vlayh0aGlzLmMsIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspLCAuLi5ub3JtYWxpemVkIH0sXG4gICAgICAgIG1pbkRheXNJbkZpcnN0V2VlayxcbiAgICAgICAgc3RhcnRPZldlZWtcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSkge1xuICAgICAgbWl4ZWQgPSBvcmRpbmFsVG9HcmVnb3JpYW4oeyAuLi5ncmVnb3JpYW5Ub09yZGluYWwodGhpcy5jKSwgLi4ubm9ybWFsaXplZCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWl4ZWQgPSB7IC4uLnRoaXMudG9PYmplY3QoKSwgLi4ubm9ybWFsaXplZCB9O1xuXG4gICAgICAvLyBpZiB3ZSBkaWRuJ3Qgc2V0IHRoZSBkYXkgYnV0IHdlIGVuZGVkIHVwIG9uIGFuIG92ZXJmbG93IGRhdGUsXG4gICAgICAvLyB1c2UgdGhlIGxhc3QgZGF5IG9mIHRoZSByaWdodCBtb250aFxuICAgICAgaWYgKGlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQuZGF5KSkge1xuICAgICAgICBtaXhlZC5kYXkgPSBNYXRoLm1pbihkYXlzSW5Nb250aChtaXhlZC55ZWFyLCBtaXhlZC5tb250aCksIG1peGVkLmRheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgW3RzLCBvXSA9IG9ialRvVFMobWl4ZWQsIHRoaXMubywgdGhpcy56b25lKTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywgeyB0cywgbyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBwZXJpb2Qgb2YgdGltZSB0byB0aGlzIERhdGVUaW1lIGFuZCByZXR1cm4gdGhlIHJlc3VsdGluZyBEYXRlVGltZVxuICAgKlxuICAgKiBBZGRpbmcgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG9yIG1pbGxpc2Vjb25kcyBpbmNyZWFzZXMgdGhlIHRpbWVzdGFtcCBieSB0aGUgcmlnaHQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy4gQWRkaW5nIGRheXMsIG1vbnRocywgb3IgeWVhcnMgc2hpZnRzIHRoZSBjYWxlbmRhciwgYWNjb3VudGluZyBmb3IgRFNUcyBhbmQgbGVhcCB5ZWFycyBhbG9uZyB0aGUgd2F5LiBUaHVzLCBgZHQucGx1cyh7IGhvdXJzOiAyNCB9KWAgbWF5IHJlc3VsdCBpbiBhIGRpZmZlcmVudCB0aW1lIHRoYW4gYGR0LnBsdXMoeyBkYXlzOiAxIH0pYCBpZiB0aGVyZSdzIGEgRFNUIHNoaWZ0IGluIGJldHdlZW4uXG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgYW1vdW50IHRvIGFkZC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cygxMjMpIC8vfj4gaW4gMTIzIG1pbGxpc2Vjb25kc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgbWludXRlczogMTUgfSkgLy9+PiBpbiAxNSBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pIC8vfj4gdGhpcyB0aW1lIHRvbW9ycm93XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAtMSB9KSAvL34+IHRoaXMgdGltZSB5ZXN0ZXJkYXlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGhvdXJzOiAzLCBtaW51dGVzOiAxMyB9KSAvL34+IGluIDMgaHIsIDEzIG1pblxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMywgbWludXRlczogMTMgfSkpIC8vfj4gaW4gMyBociwgMTMgbWluXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgcGx1cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywgYWRqdXN0VGltZSh0aGlzLCBkdXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdCBhIHBlcmlvZCBvZiB0aW1lIHRvIHRoaXMgRGF0ZVRpbWUgYW5kIHJldHVybiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lXG4gICAqIFNlZSB7QGxpbmsgRGF0ZVRpbWUjcGx1c31cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gc3VidHJhY3QuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIG1pbnVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLm5lZ2F0ZSgpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgYmVnaW5uaW5nIG9mIGEgdW5pdCBvZiB0aW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBiZWdpbm5pbmcgb2YuIENhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsIG9yICdtaWxsaXNlY29uZCcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnVzZUxvY2FsZVdlZWtzPWZhbHNlXSAtIElmIHRydWUsIHVzZSB3ZWVrcyBiYXNlZCBvbiB0aGUgbG9jYWxlLCBpLmUuIHVzZSB0aGUgbG9jYWxlLWRlcGVuZGVudCBzdGFydCBvZiB0aGUgd2Vla1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCdtb250aCcpLnRvSVNPRGF0ZSgpOyAvLz0+ICcyMDE0LTAzLTAxJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCd5ZWFyJykudG9JU09EYXRlKCk7IC8vPT4gJzIwMTQtMDEtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3dlZWsnKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMy0wMycsIHdlZWtzIGFsd2F5cyBzdGFydCBvbiBNb25kYXlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5zdGFydE9mKCdkYXknKS50b0lTT1RpbWUoKTsgLy89PiAnMDA6MDAuMDAwLTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuc3RhcnRPZignaG91cicpLnRvSVNPVGltZSgpOyAvLz0+ICcwNTowMDowMC4wMDAtMDU6MDAnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhcnRPZih1bml0LCB7IHVzZUxvY2FsZVdlZWtzID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuXG4gICAgY29uc3QgbyA9IHt9LFxuICAgICAgbm9ybWFsaXplZFVuaXQgPSBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpO1xuICAgIHN3aXRjaCAobm9ybWFsaXplZFVuaXQpIHtcbiAgICAgIGNhc2UgXCJ5ZWFyc1wiOlxuICAgICAgICBvLm1vbnRoID0gMTtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgXCJxdWFydGVyc1wiOlxuICAgICAgY2FzZSBcIm1vbnRoc1wiOlxuICAgICAgICBvLmRheSA9IDE7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIFwid2Vla3NcIjpcbiAgICAgIGNhc2UgXCJkYXlzXCI6XG4gICAgICAgIG8uaG91ciA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIFwiaG91cnNcIjpcbiAgICAgICAgby5taW51dGUgPSAwO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSBcIm1pbnV0ZXNcIjpcbiAgICAgICAgby5zZWNvbmQgPSAwO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSBcInNlY29uZHNcIjpcbiAgICAgICAgby5taWxsaXNlY29uZCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1pbGxpc2Vjb25kc1wiOlxuICAgICAgICBicmVhaztcbiAgICAgIC8vIG5vIGRlZmF1bHQsIGludmFsaWQgdW5pdHMgdGhyb3cgaW4gbm9ybWFsaXplVW5pdCgpXG4gICAgfVxuXG4gICAgaWYgKG5vcm1hbGl6ZWRVbml0ID09PSBcIndlZWtzXCIpIHtcbiAgICAgIGlmICh1c2VMb2NhbGVXZWVrcykge1xuICAgICAgICBjb25zdCBzdGFydE9mV2VlayA9IHRoaXMubG9jLmdldFN0YXJ0T2ZXZWVrKCk7XG4gICAgICAgIGNvbnN0IHsgd2Vla2RheSB9ID0gdGhpcztcbiAgICAgICAgaWYgKHdlZWtkYXkgPCBzdGFydE9mV2Vlaykge1xuICAgICAgICAgIG8ud2Vla051bWJlciA9IHRoaXMud2Vla051bWJlciAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgby53ZWVrZGF5ID0gc3RhcnRPZldlZWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvLndlZWtkYXkgPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub3JtYWxpemVkVW5pdCA9PT0gXCJxdWFydGVyc1wiKSB7XG4gICAgICBjb25zdCBxID0gTWF0aC5jZWlsKHRoaXMubW9udGggLyAzKTtcbiAgICAgIG8ubW9udGggPSAocSAtIDEpICogMyArIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2V0KG8pO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgZW5kIChtZWFuaW5nIHRoZSBsYXN0IG1pbGxpc2Vjb25kKSBvZiBhIHVuaXQgb2YgdGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBlbmQgb2YuIENhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsIG9yICdtaWxsaXNlY29uZCcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnVzZUxvY2FsZVdlZWtzPWZhbHNlXSAtIElmIHRydWUsIHVzZSB3ZWVrcyBiYXNlZCBvbiB0aGUgbG9jYWxlLCBpLmUuIHVzZSB0aGUgbG9jYWxlLWRlcGVuZGVudCBzdGFydCBvZiB0aGUgd2Vla1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5lbmRPZignbW9udGgnKS50b0lTTygpOyAvLz0+ICcyMDE0LTAzLTMxVDIzOjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ3llYXInKS50b0lTTygpOyAvLz0+ICcyMDE0LTEyLTMxVDIzOjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ3dlZWsnKS50b0lTTygpOyAvLyA9PiAnMjAxNC0wMy0wOVQyMzo1OTo1OS45OTktMDU6MDAnLCB3ZWVrcyBzdGFydCBvbiBNb25kYXlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5lbmRPZignZGF5JykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0wM1QyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5lbmRPZignaG91cicpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMDMtMDNUMDU6NTk6NTkuOTk5LTA1OjAwJ1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIGVuZE9mKHVuaXQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkXG4gICAgICA/IHRoaXMucGx1cyh7IFt1bml0XTogMSB9KVxuICAgICAgICAgIC5zdGFydE9mKHVuaXQsIG9wdHMpXG4gICAgICAgICAgLm1pbnVzKDEpXG4gICAgICA6IHRoaXM7XG4gIH1cblxuICAvLyBPVVRQVVRcblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLlxuICAgKiAqKllvdSBtYXkgbm90IHdhbnQgdGhpcy4qKiBTZWUge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3IgYSBtb3JlIGZsZXhpYmxlIGZvcm1hdHRpbmcgdG9vbC4gRm9yIGEgdGFibGUgb2YgdG9rZW5zIGFuZCB0aGVpciBpbnRlcnByZXRhdGlvbnMsIHNlZSBbaGVyZV0oaHR0cHM6Ly9tb21lbnQuZ2l0aHViLmlvL2x1eG9uLyMvZm9ybWF0dGluZz9pZD10YWJsZS1vZi10b2tlbnMpLlxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHN0cmluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdHMgdG8gb3ZlcnJpZGUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBvbiB0aGlzIERhdGVUaW1lXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvRm9ybWF0KCd5eXl5IExMTCBkZCcpIC8vPT4gJzIwMTcgQXByIDIyJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5zZXRMb2NhbGUoJ2ZyJykudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJykgLy89PiAnMjAxNyBhdnIuIDIyJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0Zvcm1hdCgneXl5eSBMTEwgZGQnLCB7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gJzIwMTcgYXZyLiAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoXCJISCAnaG91cnMgYW5kJyBtbSAnbWludXRlcydcIikgLy89PiAnMjAgaG91cnMgYW5kIDU1IG1pbnV0ZXMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvRm9ybWF0KGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLnJlZGVmYXVsdFRvRU4ob3B0cykpLmZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyh0aGlzLCBmbXQpXG4gICAgICA6IElOVkFMSUQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoaXMgZGF0ZS4gQWNjZXB0cyB0aGUgc2FtZSBvcHRpb25zIGFzIHRoZSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIGFuZCBhbnkgcHJlc2V0cyBkZWZpbmVkIGJ5IEx1eG9uLCBzdWNoIGFzIGBEYXRlVGltZS5EQVRFX0ZVTExgIG9yIGBEYXRlVGltZS5USU1FX1NJTVBMRWAuXG4gICAqIFRoZSBleGFjdCBiZWhhdmlvciBvZiB0aGlzIG1ldGhvZCBpcyBicm93c2VyLXNwZWNpZmljLCBidXQgaW4gZ2VuZXJhbCBpdCB3aWxsIHJldHVybiBhbiBhcHByb3ByaWF0ZSByZXByZXNlbnRhdGlvblxuICAgKiBvZiB0aGUgRGF0ZVRpbWUgaW4gdGhlIGFzc2lnbmVkIGxvY2FsZS5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIGZvcm1hdE9wdHMge09iamVjdH0gLSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIG9wdGlvbnMgYW5kIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdHMgdG8gb3ZlcnJpZGUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBvbiB0aGlzIERhdGVUaW1lXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKCk7IC8vPT4gNC8yMC8yMDE3XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnNldExvY2FsZSgnZW4tZ2InKS50b0xvY2FsZVN0cmluZygpOyAvLz0+ICcyMC8wNC8yMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFX0ZVTEwpOyAvLz0+ICdBcHJpbCAyMCwgMjAxNydcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURV9GVUxMLCB7IGxvY2FsZTogJ2ZyJyB9KTsgLy89PiAnMjggYW9cdTAwRkJ0IDIwMjInXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKTsgLy89PiAnMTE6MzIgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVUSU1FX1NIT1JUKTsgLy89PiAnNC8yMC8yMDE3LCAxMTozMiBBTSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoeyB3ZWVrZGF5OiAnbG9uZycsIG1vbnRoOiAnbG9uZycsIGRheTogJzItZGlnaXQnIH0pOyAvLz0+ICdUaHVyc2RheSwgQXByaWwgMjAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdzaG9ydCcsIGRheTogJzItZGlnaXQnLCBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pOyAvLz0+ICdUaHUsIEFwciAyMCwgMTE6MjcgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JywgaG91ckN5Y2xlOiAnaDIzJyB9KTsgLy89PiAnMTE6MzInXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvTG9jYWxlU3RyaW5nKGZvcm1hdE9wdHMgPSBGb3JtYXRzLkRBVEVfU0hPUlQsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRcbiAgICAgID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5jbG9uZShvcHRzKSwgZm9ybWF0T3B0cykuZm9ybWF0RGF0ZVRpbWUodGhpcylcbiAgICAgIDogSU5WQUxJRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGZvcm1hdCBcInBhcnRzXCIsIG1lYW5pbmcgaW5kaXZpZHVhbCB0b2tlbnMgYWxvbmcgd2l0aCBtZXRhZGF0YS4gVGhpcyBpcyBhbGxvd3MgY2FsbGVycyB0byBwb3N0LXByb2Nlc3MgaW5kaXZpZHVhbCBzZWN0aW9ucyBvZiB0aGUgZm9ybWF0dGVkIG91dHB1dC5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXQvZm9ybWF0VG9QYXJ0c1xuICAgKiBAcGFyYW0gb3B0cyB7T2JqZWN0fSAtIEludGwuRGF0ZVRpbWVGb3JtYXQgY29uc3RydWN0b3Igb3B0aW9ucywgc2FtZSBhcyBgdG9Mb2NhbGVTdHJpbmdgLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVBhcnRzKCk7IC8vPT4gW1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2RheScsIHZhbHVlOiAnMjUnIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiAnLycgfSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdtb250aCcsIHZhbHVlOiAnMDUnIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiAnLycgfSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICd5ZWFyJywgdmFsdWU6ICcxOTgyJyB9XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+IF1cbiAgICovXG4gIHRvTG9jYWxlUGFydHMob3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBvcHRzKS5mb3JtYXREYXRlVGltZVBhcnRzKHRoaXMpXG4gICAgICA6IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc1NlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0PXRydWVdIC0gaW5jbHVkZSB0aGUgb2Zmc2V0LCBzdWNoIGFzICdaJyBvciAnLTA0OjAwJ1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmV4dGVuZGVkWm9uZT1mYWxzZV0gLSBhZGQgdGhlIHRpbWUgem9uZSBmb3JtYXQgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MywgNSwgMjUpLnRvSVNPKCkgLy89PiAnMTk4Mi0wNS0yNVQwMDowMDowMC4wMDBaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTygpIC8vPT4gJzIwMTctMDQtMjJUMjA6NDc6MDUuMzM1LTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTyh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzIwMTctMDQtMjJUMjA6NDc6MDUuMzM1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTyh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcyMDE3MDQyMlQyMDQ3MDUuMzM1LTA0MDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxuICAgKi9cbiAgdG9JU08oe1xuICAgIGZvcm1hdCA9IFwiZXh0ZW5kZWRcIixcbiAgICBzdXBwcmVzc1NlY29uZHMgPSBmYWxzZSxcbiAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXQgPSB0cnVlLFxuICAgIGV4dGVuZGVkWm9uZSA9IGZhbHNlLFxuICB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZXh0ID0gZm9ybWF0ID09PSBcImV4dGVuZGVkXCI7XG5cbiAgICBsZXQgYyA9IHRvSVNPRGF0ZSh0aGlzLCBleHQpO1xuICAgIGMgKz0gXCJUXCI7XG4gICAgYyArPSB0b0lTT1RpbWUodGhpcywgZXh0LCBzdXBwcmVzc1NlY29uZHMsIHN1cHByZXNzTWlsbGlzZWNvbmRzLCBpbmNsdWRlT2Zmc2V0LCBleHRlbmRlZFpvbmUpO1xuICAgIHJldHVybiBjO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lJ3MgZGF0ZSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPRGF0ZSgpIC8vPT4gJzE5ODItMDUtMjUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygxOTgyLCA1LCAyNSkudG9JU09EYXRlKHsgZm9ybWF0OiAnYmFzaWMnIH0pIC8vPT4gJzE5ODIwNTI1J1xuICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cbiAgICovXG4gIHRvSVNPRGF0ZSh7IGZvcm1hdCA9IFwiZXh0ZW5kZWRcIiB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvSVNPRGF0ZSh0aGlzLCBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB3ZWVrIGRhdGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT1dlZWtEYXRlKCkgLy89PiAnMTk4Mi1XMjEtMidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09XZWVrRGF0ZSgpIHtcbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIFwia2tray0nVydXVy1jXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lJ3MgdGltZSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZXh0ZW5kZWRab25lPXRydWVdIC0gYWRkIHRoZSB0aW1lIHpvbmUgZm9ybWF0IGV4dGVuc2lvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVQcmVmaXg9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgYFRgIHByZWZpeFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoKSAvLz0+ICcwNzozNDoxOS4zNjFaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0LCBzZWNvbmRzOiAwLCBtaWxsaXNlY29uZHM6IDAgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NTZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzA3OjM0WidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMDczNDE5LjM2MVonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnNldCh7IGhvdXI6IDcsIG1pbnV0ZTogMzQgfSkudG9JU09UaW1lKHsgaW5jbHVkZVByZWZpeDogdHJ1ZSB9KSAvLz0+ICdUMDc6MzQ6MTkuMzYxWidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09UaW1lKHtcbiAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLFxuICAgIHN1cHByZXNzU2Vjb25kcyA9IGZhbHNlLFxuICAgIGluY2x1ZGVPZmZzZXQgPSB0cnVlLFxuICAgIGluY2x1ZGVQcmVmaXggPSBmYWxzZSxcbiAgICBleHRlbmRlZFpvbmUgPSBmYWxzZSxcbiAgICBmb3JtYXQgPSBcImV4dGVuZGVkXCIsXG4gIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgYyA9IGluY2x1ZGVQcmVmaXggPyBcIlRcIiA6IFwiXCI7XG4gICAgcmV0dXJuIChcbiAgICAgIGMgK1xuICAgICAgdG9JU09UaW1lKFxuICAgICAgICB0aGlzLFxuICAgICAgICBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIixcbiAgICAgICAgc3VwcHJlc3NTZWNvbmRzLFxuICAgICAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyxcbiAgICAgICAgaW5jbHVkZU9mZnNldCxcbiAgICAgICAgZXh0ZW5kZWRab25lXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIFJGQyAyODIyLWNvbXBhdGlibGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b1JGQzI4MjIoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwICswMDAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCA3LCAxMykudG9SRkMyODIyKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAwMDowMDowMCAtMDQwMCdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9SRkMyODIyKCkge1xuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcywgXCJFRUUsIGRkIExMTCB5eXl5IEhIOm1tOnNzIFpaWlwiLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSFRUUCBoZWFkZXJzLiBUaGUgb3V0cHV0IGlzIGFsd2F5cyBleHByZXNzZWQgaW4gR01ULlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSBzdHJpbmcgY29uZm9ybXMgdG8gUkZDIDExMjMuXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMy5odG1sI3NlYzMuMy4xXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9IVFRQKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAwMDowMDowMCBHTVQnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMywgMTkpLnRvSFRUUCgpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMTk6MDA6MDAgR01UJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0hUVFAoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLnRvVVRDKCksIFwiRUVFLCBkZCBMTEwgeXl5eSBISDptbTpzcyAnR01UJ1wiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgRGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvU1FMRGF0ZSgpIC8vPT4gJzIwMTQtMDctMTMnXG4gICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxuICAgKi9cbiAgdG9TUUxEYXRlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRvSVNPRGF0ZSh0aGlzLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgVGltZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlWm9uZT1mYWxzZV0gLSBpbmNsdWRlIHRoZSB6b25lLCBzdWNoIGFzICdBbWVyaWNhL05ld19Zb3JrJy4gT3ZlcnJpZGVzIGluY2x1ZGVPZmZzZXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0U3BhY2U9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0aW1lIGFuZCB0aGUgb2Zmc2V0LCBzdWNoIGFzICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS50b1NRTCgpIC8vPT4gJzA1OjE1OjE2LjM0NSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoKSAvLz0+ICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b1NRTCh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzA1OjE1OjE2LjM0NSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoeyBpbmNsdWRlWm9uZTogZmFsc2UgfSkgLy89PiAnMDU6MTU6MTYuMzQ1IEFtZXJpY2EvTmV3X1lvcmsnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU1FMVGltZSh7IGluY2x1ZGVPZmZzZXQgPSB0cnVlLCBpbmNsdWRlWm9uZSA9IGZhbHNlLCBpbmNsdWRlT2Zmc2V0U3BhY2UgPSB0cnVlIH0gPSB7fSkge1xuICAgIGxldCBmbXQgPSBcIkhIOm1tOnNzLlNTU1wiO1xuXG4gICAgaWYgKGluY2x1ZGVab25lIHx8IGluY2x1ZGVPZmZzZXQpIHtcbiAgICAgIGlmIChpbmNsdWRlT2Zmc2V0U3BhY2UpIHtcbiAgICAgICAgZm10ICs9IFwiIFwiO1xuICAgICAgfVxuICAgICAgaWYgKGluY2x1ZGVab25lKSB7XG4gICAgICAgIGZtdCArPSBcInpcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW5jbHVkZU9mZnNldCkge1xuICAgICAgICBmbXQgKz0gXCJaWlwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcywgZm10LCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVpvbmU9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgem9uZSwgc3VjaCBhcyAnQW1lcmljYS9OZXdfWW9yaycuIE92ZXJyaWRlcyBpbmNsdWRlT2Zmc2V0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldFNwYWNlPXRydWVdIC0gaW5jbHVkZSB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdGltZSBhbmQgdGhlIG9mZnNldCwgc3VjaCBhcyAnMDU6MTU6MTYuMzQ1IC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b1NRTCgpIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIFonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCgpIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCh7IGluY2x1ZGVab25lOiB0cnVlIH0pIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIEFtZXJpY2EvTmV3X1lvcmsnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU1FMKG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYCR7dGhpcy50b1NRTERhdGUoKX0gJHt0aGlzLnRvU1FMVGltZShvcHRzKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRvSVNPKCkgOiBJTlZBTElEO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdGhlIFJFUEwuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIFtTeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIildKCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBgRGF0ZVRpbWUgeyB0czogJHt0aGlzLnRvSVNPKCl9LCB6b25lOiAke3RoaXMuem9uZS5uYW1lfSwgbG9jYWxlOiAke3RoaXMubG9jYWxlfSB9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBEYXRlVGltZSB7IEludmFsaWQsIHJlYXNvbjogJHt0aGlzLmludmFsaWRSZWFzb259IH1gO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBtaWxsaXNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS4gQWxpYXMgb2Yge0BsaW5rIERhdGVUaW1lI3RvTWlsbGlzfVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZXBvY2ggbWlsbGlzZWNvbmRzIG9mIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHRvTWlsbGlzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgKGluY2x1ZGluZyBtaWxsaXNlY29uZHMgaW4gdGhlIGZyYWN0aW9uYWwgcGFydCkgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgdG9TZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIC8gMTAwMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBzZWNvbmRzIChhcyBhIHdob2xlIG51bWJlcikgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgdG9Vbml4SW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5mbG9vcih0aGlzLnRzIC8gMTAwMCkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSlNPTi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEJTT04gc2VyaWFsaXphYmxlIGVxdWl2YWxlbnQgdG8gdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7RGF0ZX1cbiAgICovXG4gIHRvQlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTRGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIHRoaXMgRGF0ZVRpbWUncyB5ZWFyLCBtb250aCwgZGF5LCBhbmQgc28gb24uXG4gICAqIEBwYXJhbSBvcHRzIC0gb3B0aW9ucyBmb3IgZ2VuZXJhdGluZyB0aGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZUNvbmZpZz1mYWxzZV0gLSBpbmNsdWRlIGNvbmZpZ3VyYXRpb24gYXR0cmlidXRlcyBpbiB0aGUgb3V0cHV0XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvT2JqZWN0KCkgLy89PiB7IHllYXI6IDIwMTcsIG1vbnRoOiA0LCBkYXk6IDIyLCBob3VyOiAyMCwgbWludXRlOiA0OSwgc2Vjb25kOiA0MiwgbWlsbGlzZWNvbmQ6IDI2OCB9XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHRvT2JqZWN0KG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG5cbiAgICBjb25zdCBiYXNlID0geyAuLi50aGlzLmMgfTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2Uub3V0cHV0Q2FsZW5kYXIgPSB0aGlzLm91dHB1dENhbGVuZGFyO1xuICAgICAgYmFzZS5udW1iZXJpbmdTeXN0ZW0gPSB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW07XG4gICAgICBiYXNlLmxvY2FsZSA9IHRoaXMubG9jLmxvY2FsZTtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgRGF0ZSBlcXVpdmFsZW50IHRvIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge0RhdGV9XG4gICAqL1xuICB0b0pTRGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy5pc1ZhbGlkID8gdGhpcy50cyA6IE5hTik7XG4gIH1cblxuICAvLyBDT01QQVJFXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBEYXRlVGltZXMgYXMgYSBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBEYXRlVGltZSB0byBjb21wYXJlIHRoaXMgb25lIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIGFycmF5IG9mIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBpMSA9IERhdGVUaW1lLmZyb21JU08oJzE5ODItMDUtMjVUMDk6NDUnKSxcbiAgICogICAgIGkyID0gRGF0ZVRpbWUuZnJvbUlTTygnMTk4My0xMC0xNFQxMDozMCcpO1xuICAgKiBpMi5kaWZmKGkxKS50b09iamVjdCgpIC8vPT4geyBtaWxsaXNlY29uZHM6IDQzODA3NTAwMDAwIH1cbiAgICogaTIuZGlmZihpMSwgJ2hvdXJzJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDEyMTY4Ljc1IH1cbiAgICogaTIuZGlmZihpMSwgWydtb250aHMnLCAnZGF5cyddKS50b09iamVjdCgpIC8vPT4geyBtb250aHM6IDE2LCBkYXlzOiAxOS4wMzEyNSB9XG4gICAqIGkyLmRpZmYoaTEsIFsnbW9udGhzJywgJ2RheXMnLCAnaG91cnMnXSkudG9PYmplY3QoKSAvLz0+IHsgbW9udGhzOiAxNiwgZGF5czogMTksIGhvdXJzOiAwLjc1IH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBkaWZmKG90aGVyRGF0ZVRpbWUsIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXJEYXRlVGltZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcImNyZWF0ZWQgYnkgZGlmZmluZyBhbiBpbnZhbGlkIERhdGVUaW1lXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGR1ck9wdHMgPSB7IGxvY2FsZTogdGhpcy5sb2NhbGUsIG51bWJlcmluZ1N5c3RlbTogdGhpcy5udW1iZXJpbmdTeXN0ZW0sIC4uLm9wdHMgfTtcblxuICAgIGNvbnN0IHVuaXRzID0gbWF5YmVBcnJheSh1bml0KS5tYXAoRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICBvdGhlcklzTGF0ZXIgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKSA+IHRoaXMudmFsdWVPZigpLFxuICAgICAgZWFybGllciA9IG90aGVySXNMYXRlciA/IHRoaXMgOiBvdGhlckRhdGVUaW1lLFxuICAgICAgbGF0ZXIgPSBvdGhlcklzTGF0ZXIgPyBvdGhlckRhdGVUaW1lIDogdGhpcyxcbiAgICAgIGRpZmZlZCA9IGRpZmYoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBkdXJPcHRzKTtcblxuICAgIHJldHVybiBvdGhlcklzTGF0ZXIgPyBkaWZmZWQubmVnYXRlKCkgOiBkaWZmZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhpcyBEYXRlVGltZSBhbmQgcmlnaHQgbm93LlxuICAgKiBTZWUge0BsaW5rIERhdGVUaW1lI2RpZmZ9XG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIHVuaXRzIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBkaWZmTm93KHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5kaWZmKERhdGVUaW1lLm5vdygpLCB1bml0LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgc3Bhbm5pbmcgYmV0d2VlbiB0aGlzIERhdGVUaW1lIGFuZCBhbm90aGVyIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyRGF0ZVRpbWUgLSB0aGUgb3RoZXIgZW5kIHBvaW50IG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbHxEYXRlVGltZX1cbiAgICovXG4gIHVudGlsKG90aGVyRGF0ZVRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyh0aGlzLCBvdGhlckRhdGVUaW1lKSA6IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBEYXRlVGltZSBpcyBpbiB0aGUgc2FtZSB1bml0IG9mIHRpbWUgYXMgYW5vdGhlciBEYXRlVGltZS5cbiAgICogSGlnaGVyLW9yZGVyIHVuaXRzIG11c3QgYWxzbyBiZSBpZGVudGljYWwgZm9yIHRoaXMgZnVuY3Rpb24gdG8gcmV0dXJuIGB0cnVlYC5cbiAgICogTm90ZSB0aGF0IHRpbWUgem9uZXMgYXJlICoqaWdub3JlZCoqIGluIHRoaXMgY29tcGFyaXNvbiwgd2hpY2ggY29tcGFyZXMgdGhlICoqbG9jYWwqKiBjYWxlbmRhciB0aW1lLiBVc2Uge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9IHRvIGNvbnZlcnQgb25lIG9mIHRoZSBkYXRlcyBpZiBuZWVkZWQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyRGF0ZVRpbWUgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNoZWNrIHNhbWVuZXNzIG9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnVzZUxvY2FsZVdlZWtzPWZhbHNlXSAtIElmIHRydWUsIHVzZSB3ZWVrcyBiYXNlZCBvbiB0aGUgbG9jYWxlLCBpLmUuIHVzZSB0aGUgbG9jYWxlLWRlcGVuZGVudCBzdGFydCBvZiB0aGUgd2Vlazsgb25seSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWUgaXMgdXNlZFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5oYXNTYW1lKG90aGVyRFQsICdkYXknKTsgLy9+PiB0cnVlIGlmIG90aGVyRFQgaXMgaW4gdGhlIHNhbWUgY3VycmVudCBjYWxlbmRhciBkYXlcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc1NhbWUob3RoZXJEYXRlVGltZSwgdW5pdCwgb3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBpbnB1dE1zID0gb3RoZXJEYXRlVGltZS52YWx1ZU9mKCk7XG4gICAgY29uc3QgYWRqdXN0ZWRUb1pvbmUgPSB0aGlzLnNldFpvbmUob3RoZXJEYXRlVGltZS56b25lLCB7IGtlZXBMb2NhbFRpbWU6IHRydWUgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgIGFkanVzdGVkVG9ab25lLnN0YXJ0T2YodW5pdCwgb3B0cykgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IGFkanVzdGVkVG9ab25lLmVuZE9mKHVuaXQsIG9wdHMpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVja1xuICAgKiBUd28gRGF0ZVRpbWVzIGFyZSBlcXVhbCBpZiBhbmQgb25seSBpZiB0aGV5IHJlcHJlc2VudCB0aGUgc2FtZSBtaWxsaXNlY29uZCwgaGF2ZSB0aGUgc2FtZSB6b25lIGFuZCBsb2NhdGlvbiwgYW5kIGFyZSBib3RoIHZhbGlkLlxuICAgKiBUbyBjb21wYXJlIGp1c3QgdGhlIG1pbGxpc2Vjb25kIHZhbHVlcywgdXNlIGArZHQxID09PSArZHQyYC5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXIgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmlzVmFsaWQgJiZcbiAgICAgIG90aGVyLmlzVmFsaWQgJiZcbiAgICAgIHRoaXMudmFsdWVPZigpID09PSBvdGhlci52YWx1ZU9mKCkgJiZcbiAgICAgIHRoaXMuem9uZS5lcXVhbHMob3RoZXIuem9uZSkgJiZcbiAgICAgIHRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdGhpcyB0aW1lIHJlbGF0aXZlIHRvIG5vdywgc3VjaCBhcyBcImluIHR3byBkYXlzXCIuIENhbiBvbmx5IGludGVybmF0aW9uYWxpemUgaWYgeW91clxuICAgKiBwbGF0Zm9ybSBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC4gUm91bmRzIGRvd24gYnkgZGVmYXVsdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN0eWxlPVwibG9uZ1wiXSAtIHRoZSBzdHlsZSBvZiB1bml0cywgbXVzdCBiZSBcImxvbmdcIiwgXCJzaG9ydFwiLCBvciBcIm5hcnJvd1wiXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0IG9yIGFycmF5IG9mIHVuaXRzOyBpZiBvbWl0dGVkLCBvciBhbiBhcnJheSwgdGhlIG1ldGhvZCB3aWxsIHBpY2sgdGhlIGJlc3QgdW5pdC4gVXNlIGFuIGFycmF5IG9yIG9uZSBvZiBcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBcImRheXNcIiwgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgb3IgXCJzZWNvbmRzXCJcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yb3VuZD10cnVlXSAtIHdoZXRoZXIgdG8gcm91bmQgdGhlIG51bWJlcnMgaW4gdGhlIG91dHB1dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBhZGRpbmc9MF0gLSBwYWRkaW5nIGluIG1pbGxpc2Vjb25kcy4gVGhpcyBhbGxvd3MgeW91IHRvIHJvdW5kIHVwIHRoZSByZXN1bHQgaWYgaXQgZml0cyBpbnNpZGUgdGhlIHRocmVzaG9sZC4gRG9uJ3QgdXNlIGluIGNvbWJpbmF0aW9uIHdpdGgge3JvdW5kOiBmYWxzZX0gYmVjYXVzZSB0aGUgZGVjaW1hbCBvdXRwdXQgd2lsbCBpbmNsdWRlIHRoZSBwYWRkaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2NhbGUgLSBvdmVycmlkZSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gb3ZlcnJpZGUgdGhlIG51bWJlcmluZ1N5c3RlbSBvZiB0aGlzIERhdGVUaW1lLiBUaGUgSW50bCBzeXN0ZW0gbWF5IGNob29zZSBub3QgdG8gaG9ub3IgdGhpc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlKCkgLy89PiBcImluIDEgZGF5XCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKFwiZXNcIikudG9SZWxhdGl2ZSh7IGRheXM6IDEgfSkgLy89PiBcImRlbnRybyBkZSAxIGRcdTAwRURhXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSh7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gXCJkYW5zIDIzIGhldXJlc1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlKCkgLy89PiBcIjIgZGF5cyBhZ29cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGRheXM6IDIgfSkudG9SZWxhdGl2ZSh7IHVuaXQ6IFwiaG91cnNcIiB9KSAvLz0+IFwiNDggaG91cnMgYWdvXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBob3VyczogMzYgfSkudG9SZWxhdGl2ZSh7IHJvdW5kOiBmYWxzZSB9KSAvLz0+IFwiMS41IGRheXMgYWdvXCJcbiAgICovXG4gIHRvUmVsYXRpdmUob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGJhc2UgPSBvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7fSwgeyB6b25lOiB0aGlzLnpvbmUgfSksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nID8gKHRoaXMgPCBiYXNlID8gLW9wdGlvbnMucGFkZGluZyA6IG9wdGlvbnMucGFkZGluZykgOiAwO1xuICAgIGxldCB1bml0cyA9IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl07XG4gICAgbGV0IHVuaXQgPSBvcHRpb25zLnVuaXQ7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy51bml0KSkge1xuICAgICAgdW5pdHMgPSBvcHRpb25zLnVuaXQ7XG4gICAgICB1bml0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZlJlbGF0aXZlKGJhc2UsIHRoaXMucGx1cyhwYWRkaW5nKSwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG51bWVyaWM6IFwiYWx3YXlzXCIsXG4gICAgICB1bml0cyxcbiAgICAgIHVuaXQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGRhdGUgcmVsYXRpdmUgdG8gdG9kYXksIHN1Y2ggYXMgXCJ5ZXN0ZXJkYXlcIiBvciBcIm5leHQgbW9udGhcIi5cbiAgICogT25seSBpbnRlcm5hdGlvbmFsaXplcyBvbiBwbGF0Zm9ybXMgdGhhdCBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYWxlIC0gb3ZlcnJpZGUgdGhlIGxvY2FsZSBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0OyBpZiBvbWl0dGVkLCB0aGUgbWV0aG9kIHdpbGwgcGljayB0aGUgdW5pdC4gVXNlIG9uZSBvZiBcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBvciBcImRheXNcIlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0gLSBvdmVycmlkZSB0aGUgbnVtYmVyaW5nU3lzdGVtIG9mIHRoaXMgRGF0ZVRpbWUuIFRoZSBJbnRsIHN5c3RlbSBtYXkgY2hvb3NlIG5vdCB0byBob25vciB0aGlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmVDYWxlbmRhcigpIC8vPT4gXCJ0b21vcnJvd1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnNldExvY2FsZShcImVzXCIpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmUoKSAvLz0+IFwiXCJtYVx1MDBGMWFuYVwiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmVDYWxlbmRhcih7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gXCJkZW1haW5cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGRheXM6IDIgfSkudG9SZWxhdGl2ZUNhbGVuZGFyKCkgLy89PiBcIjIgZGF5cyBhZ29cIlxuICAgKi9cbiAgdG9SZWxhdGl2ZUNhbGVuZGFyKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiBkaWZmUmVsYXRpdmUob3B0aW9ucy5iYXNlIHx8IERhdGVUaW1lLmZyb21PYmplY3Qoe30sIHsgem9uZTogdGhpcy56b25lIH0pLCB0aGlzLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgbnVtZXJpYzogXCJhdXRvXCIsXG4gICAgICB1bml0czogW1wieWVhcnNcIiwgXCJtb250aHNcIiwgXCJkYXlzXCJdLFxuICAgICAgY2FsZW5kYXJ5OiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWluIG9mIHNldmVyYWwgZGF0ZSB0aW1lc1xuICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgRGF0ZVRpbWVzIGZyb20gd2hpY2ggdG8gY2hvb3NlIHRoZSBtaW5pbXVtXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfSB0aGUgbWluIERhdGVUaW1lLCBvciB1bmRlZmluZWQgaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRcbiAgICovXG4gIHN0YXRpYyBtaW4oLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1pbiByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJlc3RCeShkYXRlVGltZXMsIChpKSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5taW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWF4IG9mIHNldmVyYWwgZGF0ZSB0aW1lc1xuICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgRGF0ZVRpbWVzIGZyb20gd2hpY2ggdG8gY2hvb3NlIHRoZSBtYXhpbXVtXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfSB0aGUgbWF4IERhdGVUaW1lLCBvciB1bmRlZmluZWQgaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRcbiAgICovXG4gIHN0YXRpYyBtYXgoLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1heCByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJlc3RCeShkYXRlVGltZXMsIChpKSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5tYXgpO1xuICB9XG5cbiAgLy8gTUlTQ1xuXG4gIC8qKlxuICAgKiBFeHBsYWluIGhvdyBhIHN0cmluZyB3b3VsZCBiZSBwYXJzZWQgYnkgZnJvbUZvcm1hdCgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgZGVzY3JpcHRpb24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0YWtlbiBieSBmcm9tRm9ybWF0KClcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGZyb21Gb3JtYXRFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsIH0gPSBvcHRpb25zLFxuICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoe1xuICAgICAgICBsb2NhbGUsXG4gICAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgZGVmYXVsdFRvRU46IHRydWUsXG4gICAgICB9KTtcbiAgICByZXR1cm4gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlVG9Vc2UsIHRleHQsIGZtdCk7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGZyb21Gb3JtYXRFeHBsYWluIGluc3RlYWRcbiAgICovXG4gIHN0YXRpYyBmcm9tU3RyaW5nRXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIGEgcGFyc2VyIGZvciBgZm10YCB1c2luZyB0aGUgZ2l2ZW4gbG9jYWxlLiBUaGlzIHBhcnNlciBjYW4gYmUgcGFzc2VkXG4gICAqIHRvIHtAbGluayBEYXRlVGltZS5mcm9tRm9ybWF0UGFyc2VyfSB0byBhIHBhcnNlIGEgZGF0ZSBpbiB0aGlzIGZvcm1hdC4gVGhpc1xuICAgKiBjYW4gYmUgdXNlZCB0byBvcHRpbWl6ZSBjYXNlcyB3aGVyZSBtYW55IGRhdGVzIG5lZWQgdG8gYmUgcGFyc2VkIGluIGFcbiAgICogc3BlY2lmaWMgZm9ybWF0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWVcbiAgICogZGVzY3JpcHRpb24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB1c2VkIHRvIHNldCBsb2NhbGUgYW5kIG51bWJlcmluZ1N5c3RlbVxuICAgKiBmb3IgcGFyc2VyXG4gICAqIEByZXR1cm5zIHtUb2tlblBhcnNlcn0gLSBvcGFxdWUgb2JqZWN0IHRvIGJlIHVzZWRcbiAgICovXG4gIHN0YXRpYyBidWlsZEZvcm1hdFBhcnNlcihmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCB9ID0gb3B0aW9ucyxcbiAgICAgIGxvY2FsZVRvVXNlID0gTG9jYWxlLmZyb21PcHRzKHtcbiAgICAgICAgbG9jYWxlLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIGRlZmF1bHRUb0VOOiB0cnVlLFxuICAgICAgfSk7XG4gICAgcmV0dXJuIG5ldyBUb2tlblBhcnNlcihsb2NhbGVUb1VzZSwgZm10KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIGlucHV0IHN0cmluZyBhbmQgZm9ybWF0IHBhcnNlci5cbiAgICpcbiAgICogVGhlIGZvcm1hdCBwYXJzZXIgbXVzdCBoYXZlIGJlZW4gY3JlYXRlZCB3aXRoIHRoZSBzYW1lIGxvY2FsZSBhcyB0aGlzIGNhbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge1Rva2VuUGFyc2VyfSBmb3JtYXRQYXJzZXIgLSBwYXJzZXIgZnJvbSB7QGxpbmsgRGF0ZVRpbWUuYnVpbGRGb3JtYXRQYXJzZXJ9XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0YWtlbiBieSBmcm9tRm9ybWF0KClcbiAgICogQHJldHVybnMge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21Gb3JtYXRQYXJzZXIodGV4dCwgZm9ybWF0UGFyc2VyLCBvcHRzID0ge30pIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodGV4dCkgfHwgaXNVbmRlZmluZWQoZm9ybWF0UGFyc2VyKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICBcImZyb21Gb3JtYXRQYXJzZXIgcmVxdWlyZXMgYW4gaW5wdXQgc3RyaW5nIGFuZCBhIGZvcm1hdCBwYXJzZXJcIlxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsIH0gPSBvcHRzLFxuICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoe1xuICAgICAgICBsb2NhbGUsXG4gICAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgZGVmYXVsdFRvRU46IHRydWUsXG4gICAgICB9KTtcblxuICAgIGlmICghbG9jYWxlVG9Vc2UuZXF1YWxzKGZvcm1hdFBhcnNlci5sb2NhbGUpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgIGBmcm9tRm9ybWF0UGFyc2VyIGNhbGxlZCB3aXRoIGEgbG9jYWxlIG9mICR7bG9jYWxlVG9Vc2V9LCBgICtcbiAgICAgICAgICBgYnV0IHRoZSBmb3JtYXQgcGFyc2VyIHdhcyBjcmVhdGVkIGZvciAke2Zvcm1hdFBhcnNlci5sb2NhbGV9YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHJlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRSZWFzb24gfSA9IGZvcm1hdFBhcnNlci5leHBsYWluRnJvbVRva2Vucyh0ZXh0KTtcblxuICAgIGlmIChpbnZhbGlkUmVhc29uKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkUmVhc29uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUoXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgem9uZSxcbiAgICAgICAgb3B0cyxcbiAgICAgICAgYGZvcm1hdCAke2Zvcm1hdFBhcnNlci5mb3JtYXR9YCxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgc3BlY2lmaWNPZmZzZXRcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gRk9STUFUIFBSRVNFVFNcblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAxMC8xNC8xOTgzXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVfU0hPUlQoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURV9TSE9SVDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVfTUVEKCkge1xuICAgIHJldHVybiBGb3JtYXRzLkRBVEVfTUVEO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaSwgT2N0IDE0LCAxOTgzJ1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFX01FRF9XSVRIX1dFRUtEQVkoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURV9NRURfV0lUSF9XRUVLREFZO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVfRlVMTCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFX0ZVTEw7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnVHVlc2RheSwgT2N0b2JlciAxNCwgMTk4MydcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURV9IVUdFKCkge1xuICAgIHJldHVybiBGb3JtYXRzLkRBVEVfSFVHRTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FX1NJTVBMRSgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5USU1FX1NJTVBMRTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FX1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5USU1FX1dJVEhfU0VDT05EUztcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX1NIT1JUX09GRlNFVCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5USU1FX1dJVEhfU0hPUlRfT0ZGU0VUO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FX1dJVEhfTE9OR19PRkZTRVQoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuVElNRV9XSVRIX0xPTkdfT0ZGU0VUO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfU0lNUExFKCkge1xuICAgIHJldHVybiBGb3JtYXRzLlRJTUVfMjRfU0lNUExFO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBGb3JtYXRzLlRJTUVfMjRfV0lUSF9TRUNPTkRTO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEVEVCcsIGFsd2F5cyAyNC1ob3VyLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUKCkge1xuICAgIHJldHVybiBGb3JtYXRzLlRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRWFzdGVybiBEYXlsaWdodCBUaW1lJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5USU1FXzI0X1dJVEhfTE9OR19PRkZTRVQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9TSE9SVCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFVElNRV9TSE9SVDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcxMC8xNC8xOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFM7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFVElNRV9NRUQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUztcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmksIDE0IE9jdCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9GVUxMKCkge1xuICAgIHJldHVybiBGb3JtYXRzLkRBVEVUSU1FX0ZVTEw7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MywgOTozMDozMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFM7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9IVUdFKCkge1xuICAgIHJldHVybiBGb3JtYXRzLkRBVEVUSU1FX0hVR0U7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwOjMzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUztcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcmllbmRseURhdGVUaW1lKGRhdGVUaW1laXNoKSB7XG4gIGlmIChEYXRlVGltZS5pc0RhdGVUaW1lKGRhdGVUaW1laXNoKSkge1xuICAgIHJldHVybiBkYXRlVGltZWlzaDtcbiAgfSBlbHNlIGlmIChkYXRlVGltZWlzaCAmJiBkYXRlVGltZWlzaC52YWx1ZU9mICYmIGlzTnVtYmVyKGRhdGVUaW1laXNoLnZhbHVlT2YoKSkpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlVGltZWlzaCk7XG4gIH0gZWxzZSBpZiAoZGF0ZVRpbWVpc2ggJiYgdHlwZW9mIGRhdGVUaW1laXNoID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3QoZGF0ZVRpbWVpc2gpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgIGBVbmtub3duIGRhdGV0aW1lIGFyZ3VtZW50OiAke2RhdGVUaW1laXNofSwgb2YgdHlwZSAke3R5cGVvZiBkYXRlVGltZWlzaH1gXG4gICAgKTtcbiAgfVxufVxuIiwgImV4cG9ydCBlbnVtIEN1c3RvbVN0YXR1cyB7XHJcbiAgICBUb2RvID0gXCIgXCIsIC8vICN0YXNrIGBzcGFjZWAgdG8tZG9cclxuICAgIFNsYXNoID0gXCIvXCIsIC8vICN0YXNrIGAvYCBpbmNvbXBsZXRlXHJcbiAgICBEb25lID0gXCJ4XCIsICAgICAvLyAjdGFzayBgeGAgZG9uZVxyXG4gICAgRGFzaCA9IFwiLVwiLCAgLy8gI3Rhc2sgYC1gIGNhbmNlbGVkXHJcbiAgICBHcmVhdGVyID0gXCI+XCIsIC8vICN0YXNrIGA+YCBmb3J3YXJkZWRcclxuICAgIExlc3MgPSBcIjxcIiwgIC8vICN0YXNrIGA8YCBzY2hlZHVsaW5nXHJcbiAgICBRdWVzdGlvbiA9IFwiP1wiLCAvLyAjdGFzayBgP2AgcXVlc3Rpb25cclxuICAgIEV4Y2xhbWF0aW9uID0gXCIhXCIsIC8vICN0YXNrIGAhYCBpbXBvcnRhbnRcclxuICAgIFN0YXIgPSBcIipcIiwgIC8vICN0YXNrIGAqYCBzdGFyXHJcbiAgICBRdW90ZSA9IFwiXFxcIlwiLCAvLyAjdGFzayBgXCJgIHF1b3RlXHJcbiAgICBMb2NhdGlvbiA9IFwibFwiLCAvLyAjdGFzayBgbGAgbG9jYXRpb25cclxuICAgIEJvb2ttYXJrID0gXCJiXCIsIC8vICN0YXNrIGBiYCBib29rbWFya1xyXG4gICAgSW5mb3JtYXRpb24gPSBcImlcIiwgLy8gI3Rhc2sgYGlgIGluZm9ybWF0aW9uXHJcbiAgICBTYXZpbmdzID0gXCJTXCIsIC8vICN0YXNrIGBTYCBzYXZpbmdzXHJcbiAgICBJZGVhID0gXCJJXCIsICAgLy8gI3Rhc2sgYElgIGlkZWFcclxuICAgIFByb3MgPSBcInBcIiwgICAvLyAjdGFzayBgcGAgcHJvc1xyXG4gICAgQ29ucyA9IFwiY1wiLCAgIC8vICN0YXNrIGBjYCBjb25zXHJcbiAgICBGaXJlID0gXCJmXCIsICAgLy8gI3Rhc2sgYGZgIGZpcmVcclxuICAgIEtleSA9IFwia1wiLCAgICAvLyAjdGFzayBga2Aga2V5XHJcbiAgICBXaW4gPSBcIndcIiwgICAgLy8gI3Rhc2sgYHdgIHdpblxyXG4gICAgVXAgPSBcInVcIiwgICAgIC8vICN0YXNrIGB1YCB1cFxyXG4gICAgRG93biA9IFwiZFwiICAgIC8vICN0YXNrIGBkYCBkb3duXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIENvcmVUYXNrU3RhdHVzIHtcclxuICBUb2RvID0gXCIgXCIsXHJcbiAgSW5Qcm9ncmVzcyA9IFwiL1wiLFxyXG4gIERvbmUgPSBcInhcIixcclxuICBDYW5jZWxsZWQgPSBcIi1cIixcclxuICBub25UYXNrID0gXCJ+XCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQ29yZVRhc2tTdGF0dXNJY29uIHtcclxuICBUb2RvID0gXCJcdTJCNTVcIixcclxuICBJblByb2dyZXNzID0gXCJcdUQ4M0RcdURFRTBcdUZFMEZcIixcclxuICBEb25lID0gXCJcdTI3MDVcIixcclxuICBDYW5jZWxsZWQgPSBcIlx1Mjc0Q1wiLFxyXG4gIG5vblRhc2sgPSBcIlx1RDgzRFx1REREMVx1RkUwRlwiXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE9uQ29tcGxldGlvbiB7XHJcbiAgS2VlcCA9IFwia2VlcFwiLFxyXG4gIERlbGV0ZSA9IFwiZGVsZXRlXCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVGFza1ByaW9yaXR5IHtcclxuICBMb3dlc3QgPSBcImxvd2VzdFwiLFxyXG4gIExvdyA9IFwibG93XCIsXHJcbiAgTm9ybWFsID0gXCJub3JtYWxcIixcclxuICBNZWRpdW0gPSBcIm1lZGl1bVwiLFxyXG4gIEhpZ2ggPSBcImhpZ2hcIixcclxuICBIaWdoZXN0ID0gXCJoaWdoZXN0XCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVGFza1ByaW9yaXR5SWNvbiB7XHJcbiAgTG93ZXN0ID0gXCJcdTIzRUNcIixcclxuICBMb3cgPSBcIlx1RDgzRFx1REQzRFwiLCBcclxuICBOb3JtYWwgPSBcIlx1MjVCNlx1RkUwRlwiLCAvLyBTaW4gXHUwMEVEY29ubyBlc3BlY1x1MDBFRGZpY29cclxuICBNZWRpdW0gPSBcIlx1RDgzRFx1REQzQ1wiLFxyXG4gIEhpZ2ggPSBcIlx1MjNFQlwiLFxyXG4gIEhpZ2hlc3QgPSBcIlx1RDgzRFx1REQzQVwiXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFRhc2tEYXRlVHlwZSB7XHJcbiAgQ3JlYXRlZCA9IFwiXHUyNzk1XCIsXHJcbiAgU3RhcnQgPSBcIlx1RDgzRFx1REVFQlwiLFxyXG4gIFNjaGVkdWxlZCA9IFwiXHUyM0YzXCIsXHJcbiAgRHVlID0gXCJcdUQ4M0RcdURDQzVcIixcclxuICBEb25lID0gXCJcdTI3MDVcIixcclxuICBDYW5jZWxsZWQgPSBcIlx1Mjc0Q1wiXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFRhc2tNaXNjIHtcclxuICBSZWN1cnJlbmNlID0gXCJcdUQ4M0RcdUREMDFcIixcclxuICBJRCA9IFwiXHVEODNDXHVERDk0XCIsIFxyXG4gIEJsb2NrZWQgPSBcIlx1MjZENFwiLFxyXG4gIENvbXBsZXRpb24gPSBcIlx1RDgzQ1x1REZDMVwiXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIENhbGVuZGFyVmlld1R5cGUge1xyXG4gIE1vbnRoID0gJ21vbnRoJyxcclxuICBXZWVrID0gJ3dlZWsnLFxyXG4gIFdvcmtXZWVrID0gJ3dvcmt3ZWVrJyxcclxuICBEYXkgPSAnZGF5J1xyXG59XHJcblxyXG4vLyBPdHJhcyBlbnVtZXJhY2lvbmVzIHB1ZWRlbiBpciBhcXVcdTAwRURcclxuIiwgImltcG9ydCB7IFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IEJhc2VWaWV3IH0gZnJvbSAnLi4vdmlld3MvYmFzZS12aWV3JzsgXHJcbmltcG9ydCB7IFRhc2tNYW5hZ2VyIH0gZnJvbSAnLi4vY29yZS90YXNrLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBJVGFzayB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBJMThuIH0gZnJvbSAnLi4vY29yZS9pMThuJztcclxuaW1wb3J0IHsgVGFza1ByaW9yaXR5IH0gZnJvbSAnLi4vdHlwZXMvZW51bXMnO1xyXG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcclxuXHJcbmV4cG9ydCBjb25zdCBPVkVSVklFV19WSUVXX1RZUEUgPSAnb3ZlcnZpZXctdmlldyc7XHJcblxyXG5leHBvcnQgY2xhc3MgT3ZlcnZpZXdWaWV3IGV4dGVuZHMgQmFzZVZpZXcge1xyXG4gIHByaXZhdGUgdGFza3M6IElUYXNrW10gPSBbXTsgLy8gTGlzdGEgZGUgdGFyZWFzXHJcbiAgcHJpdmF0ZSB0YXNrc0xhc3RXZWVrOiBJVGFza1tdID0gW107IC8vIFRhcmVhcyBkZSBsYSBzZW1hbmEgcGFzYWRhIChwYXJhIGNvbXBhcmFjaW9uZXMpXHJcblxyXG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHByaXZhdGUgcGx1Z2luOiBhbnksIHByaXZhdGUgaTE4bjogSTE4biwgcHJpdmF0ZSB0YXNrTWFuYWdlcjogVGFza01hbmFnZXIpIHtcclxuICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgdGhpcy5pMThuID0gaTE4bjtcclxuICB9XHJcblxyXG4gIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gT1ZFUlZJRVdfVklFV19UWVBFO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmkxOG4udChcIm92ZXJ2aWV3X3ZpZXdfdGl0bGVcIik7IC8vIFRcdTAwRUR0dWxvIGRlIGxhIHZpc3RhIHByaW5jaXBhbFxyXG4gIH1cclxuXHJcbiAgZ2V0SWNvbigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdjYWxlbmRhci1jaGVjayc7XHJcbiAgfVxyXG5cclxuICBhc3luYyBvbk9wZW4oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLnRhc2tzID0gYXdhaXQgdGhpcy5nZXRBbGxUYXNrcyh0aGlzLnRhc2tNYW5hZ2VyKTtcclxuICAgIFxyXG4gICAgLy8gQ2FyZ2FyIHRhcmVhcyBkZSBsYSBzZW1hbmEgcGFzYWRhIChzaW11bGFkbyBwYXJhIGVzdGUgZWplbXBsbylcclxuICAgIC8vYXdhaXQgdGhpcy5sb2FkSGlzdG9yaWNhbERhdGEoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIlRhcmVhcyBvYnRlbmlkYXMgb3ZlcnZpZXc6XCIsIHRoaXMudGFza3MpOyAvLyBEZWJ1Z2dpbmcgbGluZVxyXG5cclxuICAgIC8vIFByZXBhcmFyIGxvcyBkYXRvcyBwYXJhIGxhIHBsYW50aWxsYSB1c2FuZG8gbGFzIGZ1bmNpb25lcyBlc3BlY1x1MDBFRGZpY2FzXHJcbiAgICBjb25zdCB0ZW1wbGF0ZURhdGEgPSB7XHJcbiAgICAgIHRhc2tzOiB0aGlzLnRhc2tzLFxyXG4gICAgICB0b3RhbFRhc2tzOiB0aGlzLnRhc2tzLmxlbmd0aCxcclxuICAgICAgY29tcGxldGVkVGFza3M6IHRoaXMuZ2V0Q29tcGxldGVkVGFza3NDb3VudCgpLFxyXG4gICAgICBwZW5kaW5nVGFza3M6IHRoaXMuZ2V0UGVuZGluZ1Rhc2tzQ291bnQoKSxcclxuICAgICAgaW5Qcm9ncmVzc1Rhc2tzOiB0aGlzLmdldEluUHJvZ3Jlc3NUYXNrc0NvdW50KCksXHJcbiAgICAgIHByb2R1Y3Rpdml0eTogdGhpcy5jYWxjdWxhdGVQcm9kdWN0aXZpdHkoKSxcclxuICAgICAgaGlnaFByaW9yaXR5VGFza3M6IHRoaXMuZ2V0SGlnaFByaW9yaXR5VGFza3NDb3VudCgpLFxyXG4gICAgICB0b3RhbEVzdGltYXRlZFRpbWU6IHRoaXMuY2FsY3VsYXRlVG90YWxFc3RpbWF0ZWRUaW1lKCksXHJcbiAgICAgIC8vIE51ZXZvcyB3aWRnZXRzXHJcbiAgICAgIG5vRGF0ZVRhc2tzOiB0aGlzLmdldE5vRGF0ZVRhc2tzQ291bnQoKSxcclxuICAgICAgY29tcGxldGVkVGhpc1dlZWs6IHRoaXMuZ2V0Q29tcGxldGVkVGhpc1dlZWtDb3VudCgpLFxyXG4gICAgICBjb21wbGV0aW9uVHJlbmQ6IHRoaXMuY2FsY3VsYXRlQ29tcGxldGlvblRyZW5kKCksXHJcbiAgICAgIGNvbXBsZXRpb25SYXRpbzogdGhpcy5jYWxjdWxhdGVDb21wbGV0aW9uUmF0aW8oKSxcclxuICAgICAgY29uc2lzdGVuY3k6IHRoaXMuY2FsY3VsYXRlQ29uc2lzdGVuY3koKSxcclxuICAgICAgc3lzdGVtSGVhbHRoOiB0aGlzLmNhbGN1bGF0ZVN5c3RlbUhlYWx0aCgpLFxyXG4gICAgICAvLyBMaXN0YXMgZGUgdGFyZWFzXHJcbiAgICAgIHRvZGF5VGFza3M6IHRoaXMuZ2V0VG9kYXlUYXNrc0xpc3QoKSxcclxuICAgICAgb3ZlcmR1ZVRhc2tzOiB0aGlzLmdldE92ZXJkdWVUYXNrc0xpc3QoKSxcclxuICAgICAgdXBjb21pbmdUYXNrczogdGhpcy5nZXRVcGNvbWluZ1Rhc2tzTGlzdCgpLFxyXG4gICAgICAvLyBOdWV2YXMgbGlzdGFzIGRlIHRhcmVhc1xyXG4gICAgICBpbnZhbGlkVGFza3M6IHRoaXMuZ2V0SW52YWxpZFRhc2tzTGlzdCgpLFxyXG4gICAgICBvbGRlc3RUYXNrczogdGhpcy5nZXRPbGRlc3RUYXNrc0xpc3QoKSxcclxuICAgICAgcHJvamVjdFRhc2tzOiB0aGlzLmdldFRhc2tzQnlQcm9qZWN0TGlzdCgpLFxyXG4gICAgfTtcclxuXHJcbiAgICBhd2FpdCB0aGlzLnJlbmRlcihPVkVSVklFV19WSUVXX1RZUEUsIHRlbXBsYXRlRGF0YSwgdGhpcy5pMThuLCB0aGlzLnBsdWdpbiwgdGhpcy5sZWFmKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhcmdhIGRhdG9zIGhpc3RcdTAwRjNyaWNvcyBwYXJhIGNcdTAwRTFsY3Vsb3MgY29tcGFyYXRpdm9zXHJcbiAgICogRW4gdW5hIGltcGxlbWVudGFjaVx1MDBGM24gcmVhbCwgZXN0byBjYXJnYXJcdTAwRURhIGRlc2RlIHVuIGFsbWFjXHUwMEU5biBwZXJzaXN0ZW50ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgbG9hZEhpc3RvcmljYWxEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgLy8gU2ltdWxhY2lcdTAwRjNuIHNpbXBsZSAtIGVuIHByb2R1Y2NpXHUwMEYzbiwgZXN0byB2ZW5kclx1MDBFRGEgZGUgYWxtYWNlbmFtaWVudG8gcGVyc2lzdGVudGVcclxuICAgIHRoaXMudGFza3NMYXN0V2VlayA9IFsuLi50aGlzLnRhc2tzXTsgLy8gQ29waWEgcGFyYSBzaW11bGFyIGRhdG9zIGhpc3RcdTAwRjNyaWNvc1xyXG4gICAgLy8gQWp1c3RhciBhbGd1bm9zIHZhbG9yZXMgcGFyYSBzaW11bGFyIGRpZmVyZW5jaWFzIGVudHJlIHBlcmlvZG9zXHJcbiAgICB0aGlzLnRhc2tzTGFzdFdlZWsgPSB0aGlzLnRhc2tzTGFzdFdlZWsuc2xpY2UoMCwgTWF0aC5mbG9vcih0aGlzLnRhc2tzTGFzdFdlZWsubGVuZ3RoICogMC44KSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhIGVsIG5cdTAwRkFtZXJvIGRlIHRhcmVhcyBjb21wbGV0YWRhc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0Q29tcGxldGVkVGFza3NDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmlsdGVyKHRhc2sgPT4gdGFzay5zdGF0dXNUZXh0ID09PSAnRG9uZScpLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGN1bGEgZWwgblx1MDBGQW1lcm8gZGUgdGFyZWFzIHBlbmRpZW50ZXNcclxuICAgKi9cclxuICBwcml2YXRlIGdldFBlbmRpbmdUYXNrc0NvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy50YXNrcy5maWx0ZXIodGFzayA9PiB0YXNrLnN0YXR1c1RleHQgPT09ICdUb2RvJyApLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGN1bGEgZWwgblx1MDBGQW1lcm8gZGUgdGFyZWFzIGVuIHByb2dyZXNvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRJblByb2dyZXNzVGFza3NDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmlsdGVyKHRhc2sgPT4gdGFzay5zdGF0dXNUZXh0ID09PSAnSW5Qcm9ncmVzcycpLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGN1bGEgZWwgcG9yY2VudGFqZSBkZSBwcm9kdWN0aXZpZGFkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjYWxjdWxhdGVQcm9kdWN0aXZpdHkoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGNvbXBsZXRlZENvdW50ID0gdGhpcy5nZXRDb21wbGV0ZWRUYXNrc0NvdW50KCk7XHJcbiAgICByZXR1cm4gdGhpcy50YXNrcy5sZW5ndGggPiAwIFxyXG4gICAgICA/IE1hdGgucm91bmQoKGNvbXBsZXRlZENvdW50IC8gdGhpcy50YXNrcy5sZW5ndGgpICogMTAwKSBcclxuICAgICAgOiAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYSBlbCBuXHUwMEZBbWVybyBkZSB0YXJlYXMgZGUgYWx0YSBwcmlvcmlkYWRcclxuICAgKi9cclxuICBwcml2YXRlIGdldEhpZ2hQcmlvcml0eVRhc2tzQ291bnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnRhc2tzLmZpbHRlcih0YXNrID0+IFxyXG4gICAgICB0YXNrLnByaW9yaXR5ID09PSBUYXNrUHJpb3JpdHkuSGlnaGVzdCB8fCBcclxuICAgICAgdGFzay5wcmlvcml0eSA9PT0gVGFza1ByaW9yaXR5LkhpZ2hcclxuICAgICkubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYSBlbCB0aWVtcG8gZXN0aW1hZG8gdG90YWwgeSBsbyBmb3JtYXRlYVxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FsY3VsYXRlVG90YWxFc3RpbWF0ZWRUaW1lKCk6IHN0cmluZyB7XHJcbiAgLy8gdG9kbzogSW1wbGVtZW50YXIgbGEgbFx1MDBGM2dpY2EgcGFyYSBjYWxjdWxhciBlbCB0aWVtcG8gZXN0aW1hZG8gdG90YWwgZGUgbGFzIHRhcmVhc1xyXG4gICAgY29uc3QgdG90YWxFc3RpbWF0ZWRNaW51dGVzID0gdGhpcy50YXNrc1xyXG4gICAgICAuZmlsdGVyKHRhc2sgPT4gdGFzay5zdGF0dXNUZXh0ICE9PSAnRG9uZScgJiYgdGFzay5kdWVEYXRlIC0gdGFzay5zdGFydERhdGUgPiAwKSAvLyBGaWx0cmFyIHRhcmVhcyBubyBjb21wbGV0YWRhcyB5IGNvbiBmZWNoYXMgdlx1MDBFMWxpZGFzXHJcbiAgICAgIC5yZWR1Y2UoKHRvdGFsLCB0YXNrKSA9PiB0b3RhbCArICh0YXNrLmR1ZURhdGUgLSB0YXNrLnN0YXJ0RGF0ZSB8fCAwKSwgMCk7XHJcbiAgICBcclxuICAgIC8vIENvbnZlcnRpciBtaW51dG9zIGEgZm9ybWF0byBsZWdpYmxlIChYaCBZbSlcclxuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0b3RhbEVzdGltYXRlZE1pbnV0ZXMgLyA2MCk7XHJcbiAgICBjb25zdCBtaW51dGVzID0gdG90YWxFc3RpbWF0ZWRNaW51dGVzICUgNjA7XHJcbiAgICBcclxuICAgIGlmIChob3VycyA+IDApIHtcclxuICAgICAgcmV0dXJuIGAke2hvdXJzfWggJHttaW51dGVzID4gMCA/IG1pbnV0ZXMgKyAnbScgOiAnJ31gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG1pbnV0ZXMgPiAwID8gYCR7bWludXRlc31tYCA6ICcwbSc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhIGVsIG5cdTAwRkFtZXJvIGRlIHRhcmVhcyBzaW4gZmVjaGEgYXNpZ25hZGFcclxuICAgKi9cclxuICBwcml2YXRlIGdldE5vRGF0ZVRhc2tzQ291bnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnRhc2tzLmZpbHRlcih0YXNrID0+ICF0YXNrLmR1ZURhdGUgJiYgIXRhc2suc3RhcnREYXRlICYmICF0YXNrLmRvbmVEYXRlICYmICF0YXNrLnNjaGVkdWxlZERhdGUgJiYgIXRhc2suY2FuY2VsbGVkRGF0ZSkubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYSBlbCBuXHUwMEZBbWVybyBkZSB0YXJlYXMgY29tcGxldGFkYXMgZW4gbGEgXHUwMEZBbHRpbWEgc2VtYW5hXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRDb21wbGV0ZWRUaGlzV2Vla0NvdW50KCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBvbmVXZWVrQWdvID0gRGF0ZVRpbWUubm93KCkubWludXMoeyBkYXlzOiA3IH0pLnRvSlNEYXRlKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmlsdGVyKHRhc2sgPT4ge1xyXG4gICAgICAvLyBQcmltZXJvIHZlcmlmaWNhbW9zIHF1ZSBsYSB0YXJlYSBlc3RcdTAwRTkgY29tcGxldGFkYVxyXG4gICAgICBpZiAodGFzay5zdGF0dXNUZXh0ICE9PSAnRG9uZScpIHJldHVybiBmYWxzZTtcclxuICAgICAgXHJcbiAgICAgIC8vIEx1ZWdvIHZlcmlmaWNhbW9zIHF1ZSB0ZW5nYSB1bmEgZmVjaGEgZGUgZmluYWxpemFjaVx1MDBGM25cclxuICAgICAgaWYgKCF0YXNrLmRvbmVEYXRlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIFxyXG4gICAgICAvLyBGaW5hbG1lbnRlIGNvbXBhcmFtb3MgbGFzIGZlY2hhc1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHRhc2tEb25lRGF0ZSA9IHRoaXMudG9Mb2NhbE1pZG5pZ2h0KHRhc2suZG9uZURhdGUpO1xyXG4gICAgICAgIGlmICghdGFza0RvbmVEYXRlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRhc2tEb25lRGF0ZSA+PSBvbmVXZWVrQWdvO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjb21wYXJhciBmZWNoYXM6XCIsIGVycm9yLCB0YXNrKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Q29tcGxldGVkTGFzdFdlZWtDb3VudCgpOiBudW1iZXIge1xyXG4gICAgY29uc3Qgb25lV2Vla0FnbyA9IERhdGVUaW1lLm5vdygpLm1pbnVzKHsgd2Vla3M6IDEgfSkudG9KU0RhdGUoKTtcclxuICAgIGNvbnN0IG9uZVdlZWtCZWZvcmUgPSBEYXRlVGltZS5ub3coKS5taW51cyh7IHdlZWtzOiAyIH0pLnRvSlNEYXRlKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmlsdGVyKHRhc2sgPT4ge1xyXG4gICAgICAvLyBQcmltZXJvIHZlcmlmaWNhbW9zIHF1ZSBsYSB0YXJlYSBlc3RcdTAwRTkgY29tcGxldGFkYVxyXG4gICAgICBpZiAodGFzay5zdGF0dXNUZXh0ICE9PSAnRG9uZScpIHJldHVybiBmYWxzZTtcclxuICAgICAgXHJcbiAgICAgIC8vIEx1ZWdvIHZlcmlmaWNhbW9zIHF1ZSB0ZW5nYSB1bmEgZmVjaGEgZGUgZmluYWxpemFjaVx1MDBGM25cclxuICAgICAgaWYgKCF0YXNrLmRvbmVEYXRlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIFxyXG4gICAgICAvLyBGaW5hbG1lbnRlIGNvbXBhcmFtb3MgbGFzIGZlY2hhc1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHRhc2tEb25lRGF0ZSA9IHRoaXMudG9Mb2NhbE1pZG5pZ2h0KHRhc2suZG9uZURhdGUpO1xyXG4gICAgICAgIGlmICghdGFza0RvbmVEYXRlKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiB0YXNrRG9uZURhdGUgPCBvbmVXZWVrQWdvICYmIHRhc2tEb25lRGF0ZSA+PSBvbmVXZWVrQmVmb3JlO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjb21wYXJhciBmZWNoYXM6XCIsIGVycm9yLCB0YXNrKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGN1bGEgbGEgdGVuZGVuY2lhIGRlIGNvbXBsZXRhZG8gKCUgZGUgY2FtYmlvIHJlc3BlY3RvIGEgc2VtYW5hIGFudGVyaW9yKVxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FsY3VsYXRlQ29tcGxldGlvblRyZW5kKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBjb21wbGV0ZWRUaGlzV2VlayA9IHRoaXMuZ2V0Q29tcGxldGVkVGhpc1dlZWtDb3VudCgpO1xyXG5cclxuICAgIGNvbnN0IGNvbXBsZXRlZExhc3RXZWVrID0gdGhpcy5nZXRDb21wbGV0ZWRMYXN0V2Vla0NvdW50KCk7XHJcbiAgICBcclxuICAgIGlmIChjb21wbGV0ZWRMYXN0V2VlayA9PT0gMCkgcmV0dXJuIFwiKzAlXCI7IC8vIEV2aXRhciBkaXZpc2lcdTAwRjNuIHBvciBjZXJvXHJcblxyXG4gICAgY29uc3QgdHJlbmQgPSAoKGNvbXBsZXRlZFRoaXNXZWVrIC0gY29tcGxldGVkTGFzdFdlZWspIC8gY29tcGxldGVkTGFzdFdlZWspICogMTAwO1xyXG4gICAgY29uc3QgdHJlbmRSb3VuZGVkID0gTWF0aC5yb3VuZCh0cmVuZCk7XHJcbiAgICBcclxuICAgIHJldHVybiAodHJlbmQgPj0gMCA/IFwiK1wiIDogXCJcIikgKyB0cmVuZFJvdW5kZWQgKyBcIiVcIiArICh0cmVuZFJvdW5kZWQgPiAwID8gXCJcdTIxOTFcIiA6IHRyZW5kUm91bmRlZCA8IDAgPyBcIlx1MjE5M1wiIDogXCJcIik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhIGVsIHByb21lZGlvIGRlIHRhcmVhcyBjb21wbGV0YWRhcyBwb3IgZFx1MDBFRGEgZW4gbGEgXHUwMEZBbHRpbWEgc2VtYW5hXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjYWxjdWxhdGVDb21wbGV0aW9uUmF0aW8oKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGNvbXBsZXRlZFRoaXNXZWVrID0gdGhpcy5nZXRDb21wbGV0ZWRUaGlzV2Vla0NvdW50KCk7XHJcbiAgICBjb25zdCByYXRpbyA9IGNvbXBsZXRlZFRoaXNXZWVrIC8gNzsgLy8gRGl2aXNpXHUwMEYzbiBwb3IgNyBkXHUwMEVEYXNcclxuICAgIFxyXG4gICAgcmV0dXJuIHJhdGlvLnRvRml4ZWQoMSkgKyBcIi9kXHUwMEVEYVwiO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYSBlbCBwb3JjZW50YWplIGRlIGRcdTAwRURhcyBhY3Rpdm9zIGVuIGxhIFx1MDBGQWx0aW1hIHNlbWFuYVxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FsY3VsYXRlQ29uc2lzdGVuY3koKTogbnVtYmVyIHtcclxuICAgIC8vIENyZWFyIHVuIG1hcGEgcGFyYSBjb250YXIgZFx1MDBFRGFzIGFjdGl2b3NcclxuICAgIGNvbnN0IGFjdGl2ZURheXMgPSBuZXcgTWFwPHN0cmluZywgYm9vbGVhbj4oKTtcclxuICAgIGNvbnN0IG5vdyA9IERhdGVUaW1lLm5vdygpO1xyXG4gICAgXHJcbiAgICAvLyBSZXZpc2EgY2FkYSB0YXJlYSBjb21wbGV0YWRhXHJcbiAgICB0aGlzLnRhc2tzLmZvckVhY2godGFzayA9PiB7XHJcbiAgICAgIGlmICh0YXNrLnN0YXR1c1RleHQgPT09ICdEb25lJyAmJiB0YXNrLmRvbmVEYXRlKSB7XHJcbiAgICAgICAgY29uc3QgZG9uZURhdGUgPSB0aGlzLnRvTG9jYWxNaWRuaWdodCh0YXNrLmRvbmVEYXRlKTtcclxuICAgICAgICBpZiAoIWRvbmVEYXRlKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IGRvbmVEYXRlTHV4b24gPSBEYXRlVGltZS5mcm9tSlNEYXRlKGRvbmVEYXRlKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF5c0FnbyA9IG5vdy5kaWZmKGRvbmVEYXRlTHV4b24sICdkYXlzJykuZGF5cztcclxuXHJcbiAgICAgICAgLy8gU2kgZXN0XHUwMEUxIGRlbnRybyBkZSBsYSBzZW1hbmEgcGFzYWRhXHJcbiAgICAgICAgaWYgKGRheXNBZ28gPD0gNykge1xyXG4gICAgICAgICAgLy8gRm9ybWF0byBZWVlZLU1NLUREIGNvbW8gY2xhdmUgZGVsIG1hcGFcclxuICAgICAgICAgIGNvbnN0IGRhdGVLZXkgPSBkb25lRGF0ZUx1eG9uLnRvRm9ybWF0KCd5eXl5LU1NLWRkJyk7XHJcbiAgICAgICAgICBhY3RpdmVEYXlzLnNldChkYXRlS2V5LCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBDYWxjdWxhciBwb3JjZW50YWplIGRlIGRcdTAwRURhcyBhY3Rpdm9zXHJcbiAgICBjb25zdCBkYXlzQWN0aXZlQ291bnQgPSBhY3RpdmVEYXlzLnNpemU7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoZGF5c0FjdGl2ZUNvdW50IC8gNykgKiAxMDApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYSBlbCBwb3JjZW50YWplIGRlIHRhcmVhcyBjb3JyZWN0YW1lbnRlIGNvbmZpZ3VyYWRhc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FsY3VsYXRlU3lzdGVtSGVhbHRoKCk6IG51bWJlciB7XHJcbiAgICAvLyBEZWZpbmlyIHF1XHUwMEU5IGhhY2UgYSB1bmEgdGFyZWEgXCJzYWx1ZGFibGVcIlxyXG4gICAgY29uc3QgaGVhbHRoeVRhc2tzID0gdGhpcy50YXNrcy5maWx0ZXIodGFzayA9PiB7XHJcbiAgICAgIC8vIFVuYSB0YXJlYSBzYWx1ZGFibGUgZGViZSB0ZW5lciB0ZXh0bywgZXN0YWRvIHkgYWwgbWVub3MgbyBiaWVuIHVuYSBmZWNoYVxyXG4gICAgICAvLyBvIGJpZW4gdW5hIHByaW9yaWRhZCBhc2lnbmFkYVxyXG4gICAgICByZXR1cm4gdGFzay5pc1ZhbGlkO1xyXG4gICAgfSkubGVuZ3RoO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdGhpcy50YXNrcy5sZW5ndGggPiAwIFxyXG4gICAgICA/IE1hdGgucm91bmQoKGhlYWx0aHlUYXNrcyAvIHRoaXMudGFza3MubGVuZ3RoKSAqIDEwMCkgXHJcbiAgICAgIDogMTAwOyAvLyBTaSBubyBoYXkgdGFyZWFzLCBjb25zaWRlcmFtb3MgZWwgc2lzdGVtYSBjb21vIDEwMCUgc2FsdWRhYmxlXHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgcmVnaXN0ZXJWaWV3U3BlY2lmaWNIZWxwZXJzKGkxOG46IGFueSk6IHZvaWQge1xyXG4gICAgLy8gUHVlZGVzIGFcdTAwRjFhZGlyIGhlbHBlcnMgZXNwZWNcdTAwRURmaWNvcyBzaSBlcyBuZWNlc2FyaW9cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzZXR1cFZpZXdTcGVjaWZpY0V2ZW50TGlzdGVuZXJzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5hZGRUYXNrSXRlbUNsaWNrTGlzdGVuZXJzKGNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnNldHVwV2lkZ2V0RmlsdGVyTGlzdGVuZXJzKGNvbnRhaW5lcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICogQ29uZmlndXJhIGxvcyBsaXN0ZW5lcnMgcGFyYSBlbCBmaWx0cmFkbyBkZSB3aWRnZXRzXHJcbiAqL1xyXG4gIHByaXZhdGUgc2V0dXBXaWRnZXRGaWx0ZXJMaXN0ZW5lcnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgLy8gQm90XHUwMEYzbiBwYXJhIG1vc3RyYXIvb2N1bHRhciBlbCBwYW5lbCBkZSBmaWx0cm9zXHJcbiAgICBjb25zdCBmaWx0ZXJCdXR0b24gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI3dpZGdldHMtZmlsdGVyLWJ1dHRvbicpO1xyXG4gICAgY29uc3QgZmlsdGVyUGFuZWwgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI3dpZGdldHMtZmlsdGVyLXBhbmVsJyk7XHJcbiAgICBjb25zdCBjbG9zZUZpbHRlckJ1dHRvbiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjY2xvc2UtZmlsdGVyLXBhbmVsJyk7XHJcbiAgICBjb25zdCBhcHBseUJ1dHRvbiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjYXBwbHktd2lkZ2V0LWZpbHRlcnMnKTtcclxuICAgIGNvbnN0IHJlc2V0QnV0dG9uID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNyZXNldC13aWRnZXQtZmlsdGVycycpO1xyXG4gICAgY29uc3QgY2hlY2tib3hlcyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcud2lkZ2V0LWNoZWNrYm94ZXMgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyk7XHJcbiAgICBcclxuICAgIGlmICghZmlsdGVyQnV0dG9uIHx8ICFmaWx0ZXJQYW5lbCB8fCAhY2xvc2VGaWx0ZXJCdXR0b24gfHwgIWFwcGx5QnV0dG9uIHx8ICFyZXNldEJ1dHRvbikgcmV0dXJuO1xyXG5cclxuICAgIC8vIENhcmdhciBjb25maWd1cmFjaVx1MDBGM24gZ3VhcmRhZGFcclxuICAgIHRoaXMubG9hZFdpZGdldEZpbHRlcnNTdGF0ZShjaGVja2JveGVzKTtcclxuICAgIFxyXG4gICAgLy8gQXBsaWNhciBlc3RhZG8gaW5pY2lhbFxyXG4gICAgdGhpcy5hcHBseVdpZGdldEZpbHRlcnMoY29udGFpbmVyLCBjaGVja2JveGVzKTtcclxuXHJcbiAgICAvLyBNb3N0cmFyL29jdWx0YXIgcGFuZWwgZGUgZmlsdHJvc1xyXG4gICAgZmlsdGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBmaWx0ZXJQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENlcnJhciBwYW5lbFxyXG4gICAgY2xvc2VGaWx0ZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGZpbHRlclBhbmVsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQXBsaWNhciBmaWx0cm9zXHJcbiAgICBhcHBseUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5hcHBseVdpZGdldEZpbHRlcnMoY29udGFpbmVyLCBjaGVja2JveGVzKTtcclxuICAgICAgdGhpcy5zYXZlV2lkZ2V0RmlsdGVyc1N0YXRlKGNoZWNrYm94ZXMpO1xyXG4gICAgICBmaWx0ZXJQYW5lbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJlc3RhYmxlY2VyIGZpbHRyb3NcclxuICAgIHJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBjaGVja2JveGVzLmZvckVhY2goY2hlY2tib3ggPT4ge1xyXG4gICAgICAgIChjaGVja2JveCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuYXBwbHlXaWRnZXRGaWx0ZXJzKGNvbnRhaW5lciwgY2hlY2tib3hlcyk7XHJcbiAgICAgIHRoaXMuc2F2ZVdpZGdldEZpbHRlcnNTdGF0ZShjaGVja2JveGVzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXBsaWNhIGxvcyBmaWx0cm9zIGRlIHdpZGdldHMgc2VnXHUwMEZBbiBsYXMgY2FzaWxsYXMgc2VsZWNjaW9uYWRhc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYXBwbHlXaWRnZXRGaWx0ZXJzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGNoZWNrYm94ZXM6IE5vZGVMaXN0T2Y8RWxlbWVudD4pOiB2b2lkIHtcclxuICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XHJcbiAgICAgIGNvbnN0IGNiID0gY2hlY2tib3ggYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgICAgY29uc3Qgd2lkZ2V0VHlwZSA9IGNiLmRhdGFzZXQud2lkZ2V0O1xyXG4gICAgXHJcbiAgICAgIGlmICh3aWRnZXRUeXBlKSB7XHJcbiAgICAgIC8vIEJ1c2NhciB0b2RvcyBsb3Mgd2lkZ2V0cyBxdWUgY29pbmNpZGFuIGNvbiBlc3RlIHRpcG8gKHB1ZWRlbiBzZXIgbVx1MDBGQWx0aXBsZXMpXHJcbiAgICAgIGNvbnN0IHdpZGdldHMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtd2lkZ2V0LXR5cGU9XCIke3dpZGdldFR5cGV9XCJdYCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBWZXJpZmljYXIgc2kgc2UgZW5jb250cmFyb24gd2lkZ2V0c1xyXG4gICAgICBpZiAod2lkZ2V0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oYE5vIHNlIGVuY29udHJhcm9uIHdpZGdldHMgcGFyYTogJHt3aWRnZXRUeXBlfWApO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAgIC8vIEFwbGljYXIgdmlzaWJpbGlkYWQgYSB0b2RvcyBsb3Mgd2lkZ2V0cyBlbmNvbnRyYWRvc1xyXG4gICAgICAgIHdpZGdldHMuZm9yRWFjaCh3aWRnZXQgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYEFwbGljYW5kbyAke2NiLmNoZWNrZWQgPyAnbW9zdHJhcicgOiAnb2N1bHRhcid9IGEgd2lkZ2V0OiAke3dpZGdldFR5cGV9YCk7XHJcbiAgICAgICAgICBpZiAoY2IuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICB3aWRnZXQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aWRnZXQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR3VhcmRhIGVsIGVzdGFkbyBkZSBsb3MgZmlsdHJvc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc2F2ZVdpZGdldEZpbHRlcnNTdGF0ZShjaGVja2JveGVzOiBOb2RlTGlzdE9mPEVsZW1lbnQ+KTogdm9pZCB7XHJcbiAgICBjb25zdCBzdGF0ZTogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPSB7fTtcclxuICAgIFxyXG4gICAgY2hlY2tib3hlcy5mb3JFYWNoKGNoZWNrYm94ID0+IHtcclxuICAgICAgY29uc3QgY2IgPSBjaGVja2JveCBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgICBjb25zdCB3aWRnZXRDbGFzcyA9IGNiLmRhdGFzZXQud2lkZ2V0O1xyXG4gICAgICBpZiAod2lkZ2V0Q2xhc3MpIHtcclxuICAgICAgICBzdGF0ZVt3aWRnZXRDbGFzc10gPSBjYi5jaGVja2VkO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ29ic2lkaWFuLWFnZW5kYS13aWRnZXQtZmlsdGVycycsIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYXJnYSBlbCBlc3RhZG8gZ3VhcmRhZG8gZGUgbG9zIGZpbHRyb3NcclxuICAgKi9cclxuICBwcml2YXRlIGxvYWRXaWRnZXRGaWx0ZXJzU3RhdGUoY2hlY2tib3hlczogTm9kZUxpc3RPZjxFbGVtZW50Pik6IHZvaWQge1xyXG4gICAgY29uc3Qgc2F2ZWRTdGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdvYnNpZGlhbi1hZ2VuZGEtd2lkZ2V0LWZpbHRlcnMnKTtcclxuICAgIGlmICghc2F2ZWRTdGF0ZSkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBzdGF0ZSA9IEpTT04ucGFyc2Uoc2F2ZWRTdGF0ZSk7XHJcbiAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XHJcbiAgICAgICAgY29uc3QgY2IgPSBjaGVja2JveCBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IHdpZGdldENsYXNzID0gY2IuZGF0YXNldC53aWRnZXQ7XHJcbiAgICAgICAgaWYgKHdpZGdldENsYXNzICYmIHN0YXRlW3dpZGdldENsYXNzXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBjYi5jaGVja2VkID0gc3RhdGVbd2lkZ2V0Q2xhc3NdO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgY2FyZ2FyIGxhIGNvbmZpZ3VyYWNpXHUwMEYzbiBkZSB3aWRnZXRzOlwiLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIGxhIGxpc3RhIGRlIHRhcmVhcyBwcm9ncmFtYWRhcyBwYXJhIGhveVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0VG9kYXlUYXNrc0xpc3QoKTogSVRhc2tbXSB7XHJcbiAgICBjb25zdCB0b2RheSA9IERhdGVUaW1lLm5vdygpLnN0YXJ0T2YoJ2RheScpO1xyXG4gICAgY29uc3QgdG9tb3Jyb3cgPSB0b2RheS5wbHVzKHsgZGF5czogMSB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHRoaXMudGFza3NcclxuICAgICAgLmZpbHRlcih0YXNrID0+IHtcclxuICAgICAgICAvLyBTaSBsYSB0YXJlYSBlc3RcdTAwRTEgY29tcGxldGFkYSBvIGNhbmNlbGFkYSwgbm8gc2UgaW5jbHV5ZVxyXG4gICAgICAgIGlmICh0YXNrLnN0YXR1c1RleHQgPT09ICdEb25lJyB8fCB0YXNrLnN0YXR1c1RleHQgPT09ICdDYW5jZWxsZWQnKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGxhIHRhcmVhIGVzdFx1MDBFMSBwcm9ncmFtYWRhIHBhcmEgaG95XHJcbiAgICAgICAgaWYgKHRhc2suc2NoZWR1bGVkRGF0ZSkge1xyXG4gICAgICAgICAgY29uc3Qgc2NoZWR1bGVkRGF0ZSA9IHRoaXMudG9Mb2NhbE1pZG5pZ2h0KHRhc2suc2NoZWR1bGVkRGF0ZSk7XHJcbiAgICAgICAgICBpZiAoIXNjaGVkdWxlZERhdGUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIGNvbnN0IHNjaGVkdWxlZERhdGVUaW1lID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShzY2hlZHVsZWREYXRlKTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gc2NoZWR1bGVkRGF0ZVRpbWUgPj0gdG9kYXkgJiYgc2NoZWR1bGVkRGF0ZVRpbWUgPCB0b21vcnJvdztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNpIG5vIHRpZW5lIGZlY2hhIHByb2dyYW1hZGEgcGVybyB0aWVuZSBmZWNoYSBkZSB2ZW5jaW1pZW50byBob3lcclxuICAgICAgICBpZiAodGFzay5kdWVEYXRlKSB7XHJcbiAgICAgICAgICBjb25zdCBkdWVEYXRlID0gdGhpcy50b0xvY2FsTWlkbmlnaHQodGFzay5kdWVEYXRlKTtcclxuICAgICAgICAgIGlmICghZHVlRGF0ZSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGR1ZURhdGVUaW1lID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkdWVEYXRlKS5zdGFydE9mKCdkYXknKTtcclxuICAgICAgICAgIHJldHVybiBkdWVEYXRlVGltZS5lcXVhbHModG9kYXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgLy8gT3JkZW5hciBwb3IgcHJpb3JpZGFkIChtYXlvciBwcmltZXJvKVxyXG4gICAgICAgIGlmIChhLnByaW9yaXR5ICE9PSBiLnByaW9yaXR5KSB7XHJcbiAgICAgICAgICByZXR1cm4gKE51bWJlcihiLnByaW9yaXR5IHx8IDApIC0gTnVtYmVyKGEucHJpb3JpdHkgfHwgMCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBTaSBtaXNtYSBwcmlvcmlkYWQsIG9yZGVuYXIgcG9yIGZlY2hhIGRlIHZlbmNpbWllbnRvXHJcbiAgICAgICAgY29uc3QgYURhdGUgPSBhLmR1ZURhdGUgPyBuZXcgRGF0ZShhLmR1ZURhdGUpIDogbnVsbDtcclxuICAgICAgICBjb25zdCBiRGF0ZSA9IGIuZHVlRGF0ZSA/IG5ldyBEYXRlKGIuZHVlRGF0ZSkgOiBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChhRGF0ZSAmJiBiRGF0ZSkgcmV0dXJuIGFEYXRlLmdldFRpbWUoKSAtIGJEYXRlLmdldFRpbWUoKTtcclxuICAgICAgICBpZiAoYURhdGUpIHJldHVybiAtMTtcclxuICAgICAgICBpZiAoYkRhdGUpIHJldHVybiAxO1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9KVxyXG4gICAgICAuc2xpY2UoMCwgNSk7IC8vIExpbWl0YXIgYSA1IHRhcmVhcyBwYXJhIGVsIHdpZGdldFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT2J0aWVuZSBsYSBsaXN0YSBkZSB0YXJlYXMgdmVuY2lkYXNcclxuICAgKi9cclxuICBwcml2YXRlIGdldE92ZXJkdWVUYXNrc0xpc3QoKTogSVRhc2tbXSB7XHJcbiAgICBjb25zdCB0b2RheSA9IERhdGVUaW1lLm5vdygpLnN0YXJ0T2YoJ2RheScpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdGhpcy50YXNrc1xyXG4gICAgICAuZmlsdGVyKHRhc2sgPT4ge1xyXG4gICAgICAgIC8vIFNpIGxhIHRhcmVhIGVzdFx1MDBFMSBjb21wbGV0YWRhIG8gY2FuY2VsYWRhLCBubyBzZSBpbmNsdXllXHJcbiAgICAgICAgaWYgKHRhc2suc3RhdHVzVGV4dCA9PT0gJ0RvbmUnIHx8IHRhc2suc3RhdHVzVGV4dCA9PT0gJ0NhbmNlbGxlZCcpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBWZXJpZmljYXIgc2kgbGEgdGFyZWEgZXN0XHUwMEUxIHZlbmNpZGFcclxuICAgICAgICBpZiAodGFzay5kdWVEYXRlKSB7XHJcbiAgICAgICAgICBjb25zdCBkdWVEYXRlID0gdGhpcy50b0xvY2FsTWlkbmlnaHQodGFzay5kdWVEYXRlKTtcclxuICAgICAgICAgIGlmICghZHVlRGF0ZSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGR1ZURhdGVUaW1lID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkdWVEYXRlKS5zdGFydE9mKCdkYXknKTtcclxuICAgICAgICAgIHJldHVybiBkdWVEYXRlVGltZSA8IHRvZGF5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgLy8gT3JkZW5hciBwb3IgZmVjaGEgZGUgdmVuY2ltaWVudG8gKG1cdTAwRTFzIGFudGlndWEgcHJpbWVybylcclxuICAgICAgICBjb25zdCBhRGF0ZSA9IGEuZHVlRGF0ZSA/IG5ldyBEYXRlKGEuZHVlRGF0ZSkgOiBudWxsO1xyXG4gICAgICAgIGNvbnN0IGJEYXRlID0gYi5kdWVEYXRlID8gbmV3IERhdGUoYi5kdWVEYXRlKSA6IG51bGw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGFEYXRlICYmIGJEYXRlKSByZXR1cm4gYURhdGUuZ2V0VGltZSgpIC0gYkRhdGUuZ2V0VGltZSgpO1xyXG4gICAgICAgIGlmIChhRGF0ZSkgcmV0dXJuIC0xO1xyXG4gICAgICAgIGlmIChiRGF0ZSkgcmV0dXJuIDE7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zbGljZSgwLCA1KTsgLy8gTGltaXRhciBhIDUgdGFyZWFzIHBhcmEgZWwgd2lkZ2V0XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIGxhIGxpc3RhIGRlIHRhcmVhcyBwclx1MDBGM3hpbWFzIGEgdmVuY2VyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRVcGNvbWluZ1Rhc2tzTGlzdCgpOiBJVGFza1tdIHtcclxuICAgIGNvbnN0IHRvZGF5ID0gRGF0ZVRpbWUubm93KCkuc3RhcnRPZignZGF5Jyk7XHJcbiAgICBjb25zdCBuZXh0V2VlayA9IHRvZGF5LnBsdXMoeyBkYXlzOiA3IH0pO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdGhpcy50YXNrc1xyXG4gICAgICAuZmlsdGVyKHRhc2sgPT4ge1xyXG4gICAgICAgIC8vIFNpIGxhIHRhcmVhIGVzdFx1MDBFMSBjb21wbGV0YWRhIG8gY2FuY2VsYWRhLCBubyBzZSBpbmNsdXllXHJcbiAgICAgICAgaWYgKHRhc2suc3RhdHVzVGV4dCA9PT0gJ0RvbmUnIHx8IHRhc2suc3RhdHVzVGV4dCA9PT0gJ0NhbmNlbGxlZCcpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBWZXJpZmljYXIgc2kgbGEgdGFyZWEgdmVuY2UgcHJcdTAwRjN4aW1hbWVudGVcclxuICAgICAgICBpZiAodGFzay5kdWVEYXRlKSB7XHJcbiAgICAgICAgICBjb25zdCBkdWVEYXRlID0gdGhpcy50b0xvY2FsTWlkbmlnaHQodGFzay5kdWVEYXRlKTtcclxuICAgICAgICAgIGlmICghZHVlRGF0ZSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGR1ZURhdGVUaW1lID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkdWVEYXRlKS5zdGFydE9mKCdkYXknKTtcclxuICAgICAgICAgIHJldHVybiBkdWVEYXRlVGltZSA+PSB0b2RheSAmJiBkdWVEYXRlVGltZSA8PSBuZXh0V2VlaztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9KVxyXG4gICAgICAuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIC8vIE9yZGVuYXIgcG9yIGZlY2hhIGRlIHZlbmNpbWllbnRvIChtXHUwMEUxcyBjZXJjYW5hIHByaW1lcm8pXHJcbiAgICAgICAgY29uc3QgYURhdGUgPSBhLmR1ZURhdGUgPyBuZXcgRGF0ZShhLmR1ZURhdGUpIDogbnVsbDtcclxuICAgICAgICBjb25zdCBiRGF0ZSA9IGIuZHVlRGF0ZSA/IG5ldyBEYXRlKGIuZHVlRGF0ZSkgOiBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChhRGF0ZSAmJiBiRGF0ZSkgcmV0dXJuIGFEYXRlLmdldFRpbWUoKSAtIGJEYXRlLmdldFRpbWUoKTtcclxuICAgICAgICBpZiAoYURhdGUpIHJldHVybiAtMTtcclxuICAgICAgICBpZiAoYkRhdGUpIHJldHVybiAxO1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9KVxyXG4gICAgICAuc2xpY2UoMCwgNSk7IC8vIExpbWl0YXIgYSA1IHRhcmVhcyBwYXJhIGVsIHdpZGdldFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIE9idGllbmUgbGEgbGlzdGEgZGUgdGFyZWFzIG5vIHZcdTAwRTFsaWRhcyAoaXNWYWxpZCA9IGZhbHNlKVxyXG4gKi9cclxuICBwcml2YXRlIGdldEludmFsaWRUYXNrc0xpc3QoKTogSVRhc2tbXSB7XHJcbiAgICByZXR1cm4gdGhpcy50YXNrc1xyXG4gICAgLmZpbHRlcih0YXNrID0+IHtcclxuICAgICAgLy8gRmlsdHJhciBzb2xvIHRhcmVhcyBubyB2XHUwMEUxbGlkYXMgcXVlIG5vIGVzdFx1MDBFOW4gY29tcGxldGFkYXMgbyBjYW5jZWxhZGFzXHJcbiAgICAgIHJldHVybiAhdGFzay5pc1ZhbGlkICYmIFxyXG4gICAgICAgICAgICAgdGFzay5zdGF0dXNUZXh0ICE9PSAnRG9uZScgJiYgXHJcbiAgICAgICAgICAgICB0YXNrLnN0YXR1c1RleHQgIT09ICdDYW5jZWxsZWQnO1xyXG4gICAgfSlcclxuICAgIC5tYXAodGFzayA9PiB7XHJcbiAgICAgIC8vIEFcdTAwRjFhZGlyIGluZm9ybWFjaVx1MDBGM24gZGUgZXJyb3IgZGVzZGUgdGFza0ZpZWxkc1xyXG4gICAgICBpZiAodGFzay50YXNrc0ZpZWxkcykge1xyXG4gICAgICAgIC8vIEV4dHJhZXIgbG9zIG1lbnNhamVzIGRlIGVycm9yIGRlIHRhc2tGaWVsZHNcclxuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2VzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFJlY29ycmVyIHRvZG9zIGxvcyBjYW1wb3MgZW4gdGFza0ZpZWxkcyBwYXJhIGVuY29udHJhciBlcnJvcmVzXHJcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBpbiB0YXNrLnRhc2tzRmllbGRzKSB7XHJcbiAgICAgICAgICBjb25zdCBmaWVsZCA9IHRhc2sudGFza3NGaWVsZHNbaW5kZXhdO1xyXG4gICAgICAgICAgaWYgKGZpZWxkKSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaChgJHtmaWVsZH1gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgbG9zIG1lbnNhamVzIGRlIGVycm9yIGNvbW8gcHJvcGllZGFkIHRlbXBvcmFsXHJcbiAgICAgICAgdGFza1snZXJyb3JNZXNzYWdlcyddID0gZXJyb3JNZXNzYWdlcy5sZW5ndGggPiAwIFxyXG4gICAgICAgICAgPyBlcnJvck1lc3NhZ2VzIFxyXG4gICAgICAgICAgOiBbJ0Vycm9yIGRlc2Nvbm9jaWRvJ107XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGFza1snZXJyb3JNZXNzYWdlcyddID0gWydDYW1wbyBpbnZcdTAwRTFsaWRvJ107XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0YXNrO1xyXG4gICAgfSlcclxuICAgIC5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIC8vIE9yZGVuYXIgcG9yIG1cdTAwRTFzIHJlY2llbnRlIHByaW1lcm9cclxuICAgICAgY29uc3QgYURhdGUgPSBhLmNyZWF0ZWREYXRlID8gbmV3IERhdGUoYS5jcmVhdGVkRGF0ZSkgOiBudWxsO1xyXG4gICAgICBjb25zdCBiRGF0ZSA9IGIuY3JlYXRlZERhdGUgPyBuZXcgRGF0ZShiLmNyZWF0ZWREYXRlKSA6IG51bGw7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoYURhdGUgJiYgYkRhdGUpIHJldHVybiBiRGF0ZS5nZXRUaW1lKCkgLSBhRGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgIGlmIChhRGF0ZSkgcmV0dXJuIDE7XHJcbiAgICAgIGlmIChiRGF0ZSkgcmV0dXJuIC0xO1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH0pXHJcbiAgICAuc2xpY2UoMCwgNSk7IC8vIExpbWl0YXIgYSA1IHRhcmVhcyBwYXJhIGVsIHdpZGdldFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT2J0aWVuZSBsYSBsaXN0YSBkZSB0YXJlYXMgbVx1MDBFMXMgYW50aWd1YXMgKHRpZW1wbyBzaW4gY29tcGxldGFyKVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0T2xkZXN0VGFza3NMaXN0KCk6IElUYXNrW10ge1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZVRpbWUubm93KCk7XHJcbiAgICBcclxuICAgIHJldHVybiB0aGlzLnRhc2tzXHJcbiAgICAgIC5maWx0ZXIodGFzayA9PiB7XHJcbiAgICAgICAgLy8gRmlsdHJhciB0YXJlYXMgbm8gY29tcGxldGFkYXMgeSBubyBjYW5jZWxhZGFzXHJcbiAgICAgICAgcmV0dXJuIHRhc2suc3RhdHVzVGV4dCAhPT0gJ0RvbmUnICYmIFxyXG4gICAgICAgICAgICAgIHRhc2suc3RhdHVzVGV4dCAhPT0gJ0NhbmNlbGxlZCcgJiYgXHJcbiAgICAgICAgICAgICAgdGFzay5jcmVhdGVkRGF0ZTtcclxuICAgICAgfSlcclxuICAgICAgLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAvLyBPcmRlbmFyIHBvciBmZWNoYSBkZSBjcmVhY2lcdTAwRjNuIChtXHUwMEUxcyBhbnRpZ3VhIHByaW1lcm8pXHJcbiAgICAgICAgY29uc3QgYURhdGUgPSBhLmNyZWF0ZWREYXRlID8gbmV3IERhdGUoYS5jcmVhdGVkRGF0ZSkgOiBudWxsO1xyXG4gICAgICAgIGNvbnN0IGJEYXRlID0gYi5jcmVhdGVkRGF0ZSA/IG5ldyBEYXRlKGIuY3JlYXRlZERhdGUpIDogbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoYURhdGUgJiYgYkRhdGUpIHJldHVybiBhRGF0ZS5nZXRUaW1lKCkgLSBiRGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgaWYgKGFEYXRlKSByZXR1cm4gLTE7XHJcbiAgICAgICAgaWYgKGJEYXRlKSByZXR1cm4gMTtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfSlcclxuICAgICAgLnNsaWNlKDAsIDUpIC8vIExpbWl0YXIgYSA1IHRhcmVhcyBwYXJhIGVsIHdpZGdldFxyXG4gICAgICAubWFwKHRhc2sgPT4ge1xyXG4gICAgICAgIC8vIENhbGN1bGFyIGRcdTAwRURhcyBkZXNkZSBjcmVhY2lcdTAwRjNuIHBhcmEgbW9zdHJhclxyXG4gICAgICAgIGlmICh0YXNrLmNyZWF0ZWREYXRlKSB7XHJcbiAgICAgICAgICBjb25zdCBjcmVhdGVkRGF0ZSA9IHRoaXMudG9Mb2NhbE1pZG5pZ2h0KHRhc2suY3JlYXRlZERhdGUpO1xyXG4gICAgICAgICAgaWYgKGNyZWF0ZWREYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRMdXhvbiA9IERhdGVUaW1lLmZyb21KU0RhdGUoY3JlYXRlZERhdGUpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXlzT2xkID0gTWF0aC5mbG9vcihub3cuZGlmZihjcmVhdGVkTHV4b24sICdkYXlzJykuZGF5cyk7XHJcbiAgICAgICAgICAgIHRhc2tbJ2RheXNPbGQnXSA9IGRheXNPbGQ7IC8vIEFcdTAwRjFhZGlyIHByb3BpZWRhZCB0ZW1wb3JhbFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFzaztcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIHRhcmVhcyBhZ3J1cGFkYXMgcG9yIHByb3llY3RvL2NhcnBldGFcclxuICAgKi9cclxuICBwcml2YXRlIGdldFRhc2tzQnlQcm9qZWN0TGlzdCgpOiB7IHByb2plY3Q6IHN0cmluZywgdGFza3M6IElUYXNrW10gfVtdIHtcclxuICAgIC8vIENyZWFyIHVuIG1hcGEgcGFyYSBhZ3J1cGFyIHRhcmVhcyBwb3IgcHJveWVjdG9cclxuICAgIGNvbnN0IHByb2plY3RNYXAgPSBuZXcgTWFwPHN0cmluZywgSVRhc2tbXT4oKTtcclxuICAgIFxyXG4gICAgLy8gQWdydXBhciBwb3Igcm9vdGZvbGRlclxyXG4gICAgdGhpcy50YXNrc1xyXG4gICAgICAuZmlsdGVyKHRhc2sgPT4gdGFzay5zdGF0dXNUZXh0ICE9PSAnRG9uZScgJiYgdGFzay5zdGF0dXNUZXh0ICE9PSAnQ2FuY2VsbGVkJylcclxuICAgICAgLmZvckVhY2godGFzayA9PiB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSB0YXNrLnJvb3RGb2xkZXIgfHwgJ1NpbiBwcm95ZWN0byc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFwcm9qZWN0TWFwLmhhcyhwcm9qZWN0TmFtZSkpIHtcclxuICAgICAgICAgIHByb2plY3RNYXAuc2V0KHByb2plY3ROYW1lLCBbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb2plY3RNYXAuZ2V0KHByb2plY3ROYW1lKSEucHVzaCh0YXNrKTtcclxuICAgICAgfSk7XHJcbiAgICBcclxuICAgIC8vIENvbnZlcnRpciBlbCBtYXBhIGEgdW4gYXJyYXkgZGUgb2JqZXRvc1xyXG4gICAgY29uc3QgcmVzdWx0ID0gQXJyYXkuZnJvbShwcm9qZWN0TWFwLmVudHJpZXMoKSlcclxuICAgICAgLm1hcCgoW3Byb2plY3QsIHRhc2tzXSkgPT4gKHtcclxuICAgICAgICBwcm9qZWN0LFxyXG4gICAgICAgIHRhc2tzOiB0YXNrcy5zbGljZSgwLCAzKSAvLyBMaW1pdGFyIGEgMyB0YXJlYXMgcG9yIHByb3llY3RvIHBhcmEgZWwgd2lkZ2V0XHJcbiAgICAgIH0pKVxyXG4gICAgICAuc29ydCgoYSwgYikgPT4gYi50YXNrcy5sZW5ndGggLSBhLnRhc2tzLmxlbmd0aCkgLy8gT3JkZW5hciBwb3IgY2FudGlkYWQgZGUgdGFyZWFzXHJcbiAgICAgIC5zbGljZSgwLCA1KTsgLy8gTW9zdHJhciBzb2xvIGxvcyA1IHByb3llY3RvcyBwcmluY2lwYWxlc1xyXG4gICAgXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25DbG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8vIExpbXBpYSByZWN1cnNvcyBzaSBlcyBuZWNlc2FyaW9cclxuICB9XHJcbn0iLCAiaW1wb3J0IHsgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgQmFzZVZpZXcgfSBmcm9tICcuLi92aWV3cy9iYXNlLXZpZXcnOyBcclxuaW1wb3J0IHsgVGFza01hbmFnZXIgfSBmcm9tICcuLi9jb3JlL3Rhc2stbWFuYWdlcic7XHJcbmltcG9ydCB7IElUYXNrLCBIb3VyU2xvdCB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBJMThuIH0gZnJvbSAnLi4vY29yZS9pMThuJztcclxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XHJcbmltcG9ydCBIYW5kbGViYXJzIGZyb20gJ2hhbmRsZWJhcnMnO1xyXG5pbXBvcnQgeyBDYWxlbmRhclZpZXdUeXBlIH0gZnJvbSAnLi4vdHlwZXMvZW51bXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IENBTEVOREFSX1ZJRVdfVFlQRSA9ICdjYWxlbmRhci12aWV3JztcclxuXHJcblxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbGVuZGFyVmlldyBleHRlbmRzIEJhc2VWaWV3IHtcclxuICBwcm90ZWN0ZWQgdGFza3M6IElUYXNrW10gPSBbXTsgXHJcbiAgcHJvdGVjdGVkIGN1cnJlbnREYXRlOiBEYXRlVGltZSA9IERhdGVUaW1lLm5vdygpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwcm90ZWN0ZWQgcGx1Z2luOiBhbnksIHByb3RlY3RlZCBpMThuOiBJMThuLCBwcm90ZWN0ZWQgdGFza01hbmFnZXI6IFRhc2tNYW5hZ2VyKSB7XHJcbiAgICBzdXBlcihsZWFmKTtcclxuICB9XHJcblxyXG4gIC8vIE1cdTAwRTl0b2RvIHF1ZSB0b2RhcyBsYXMgdmlzdGFzIGRlcml2YWRhcyBkZWJlbiBpbXBsZW1lbnRhclxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZW5lcmF0ZVZpZXdEYXRhKCk6IGFueTtcclxuICBcclxuICAvLyBNXHUwMEU5dG9kbyBjb21cdTAwRkFuIHBhcmEgb2J0ZW5lciBlbCB0aXBvIGRlIHZpc3RhXHJcbiAgYWJzdHJhY3QgZ2V0Vmlld1R5cGUoKTogc3RyaW5nO1xyXG5cclxuICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuaTE4bi50KFwiY2FsZW5kYXJfdmlld190aXRsZVwiKTtcclxuICB9XHJcblxyXG4gIGdldEljb24oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAnY2FsZW5kYXItY2hlY2snO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25PcGVuKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdGhpcy50YXNrcyA9IGF3YWl0IHRoaXMuZ2V0QWxsVGFza3ModGhpcy50YXNrTWFuYWdlcik7XHJcbiAgICBhd2FpdCB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYXN5bmMgcmVmcmVzaFZpZXcoKTogUHJvbWlzZTx2b2lkPiB7XHJcblxyXG4gICAgY29uc3Qgdmlld0RhdGEgPSB7XHJcbiAgICAgIHRhc2tzOiB0aGlzLnRhc2tzLFxyXG4gICAgICBjdXJyZW50RGF0ZTogdGhpcy5jdXJyZW50RGF0ZSxcclxuICAgICAgY2FsZW5kYXI6IHRoaXMuZ2VuZXJhdGVWaWV3RGF0YSgpXHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IHRoaXMucmVuZGVyKHRoaXMuZ2V0Vmlld1R5cGUoKSwgdmlld0RhdGEsIHRoaXMuaTE4biwgdGhpcy5wbHVnaW4sIHRoaXMubGVhZik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGb3JtYXRlYSB1bmEgaG9yYSBlbiBmb3JtYXRvIDEyIGhvcmFzIGNvbiBBTS9QTVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBmb3JtYXRIb3VyKGhvdXI6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAvLyBVc2FyIEx1eG9uIHBhcmEgZm9ybWF0ZWFyIGxhIGhvcmFcclxuICAgIHJldHVybiBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91ciB9KS50b0Zvcm1hdCgnaCBhJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIGxvcyBub21icmVzIGxvY2FsaXphZG9zIGRlIGxvcyBkXHUwMEVEYXMgZGUgbGEgc2VtYW5hXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdldExvY2FsaXplZERheU5hbWVzKCk6IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHRoaXMuaTE4bi50KCdkYXlfc3VuJyksXHJcbiAgICAgIHRoaXMuaTE4bi50KCdkYXlfbW9uJyksXHJcbiAgICAgIHRoaXMuaTE4bi50KCdkYXlfdHVlJyksXHJcbiAgICAgIHRoaXMuaTE4bi50KCdkYXlfd2VkJyksXHJcbiAgICAgIHRoaXMuaTE4bi50KCdkYXlfdGh1JyksXHJcbiAgICAgIHRoaXMuaTE4bi50KCdkYXlfZnJpJyksXHJcbiAgICAgIHRoaXMuaTE4bi50KCdkYXlfc2F0JylcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRhc2tzIGZvciBhIHNwZWNpZmljIGRhdGVcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0VGFza3NGb3JEYXRlKGRhdGU6IERhdGVUaW1lKTogSVRhc2tbXSB7XHJcbiAgICBjb25zdCBkYXlVbml0ID0gJ2RheSc7XHJcbiAgICByZXR1cm4gdGhpcy50YXNrcy5maWx0ZXIodGFzayA9PiB7XHJcbiAgICAgIGlmICghdGFzay5kdWVEYXRlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDb252ZXJ0aXIgYSBEYXRlVGltZSBzaSBlcyBzdHJpbmdcclxuICAgICAgY29uc3QgdGFza0RhdGUgPSB0eXBlb2YgdGFzay5kdWVEYXRlID09PSAnc3RyaW5nJyBcclxuICAgICAgICA/IERhdGVUaW1lLmZyb21JU08odGFzay5kdWVEYXRlKSBcclxuICAgICAgICA6IHRhc2suZHVlRGF0ZTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0YXNrRGF0ZS5oYXNTYW1lKGRhdGUsIGRheVVuaXQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBNXHUwMEU5dG9kb3MgZGUgbmF2ZWdhY2lcdTAwRjNuIGNvbVx1MDBGQW4gcXVlIGNhZGEgdmlzdGEgc29icmVzY3JpYmlyXHUwMEUxIHNlZ1x1MDBGQW4gbmVjZXNpdGVcclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgbmF2aWdhdGVUb1ByZXZpb3VzKCk6IHZvaWQ7XHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IG5hdmlnYXRlVG9OZXh0KCk6IHZvaWQ7XHJcblxyXG4gIC8vIE1cdTAwRTl0b2RvIHF1ZSB0b2RhcyBsYXMgdmlzdGFzIHV0aWxpemFyXHUwMEUxbiBwYXJhIGlyIGEgbGEgZmVjaGEgYWN0dWFsXHJcbiAgcHJvdGVjdGVkIG5hdmlnYXRlVG9Ub2RheSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY3VycmVudERhdGUgPSBEYXRlVGltZS5ub3coKTtcclxuICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNvYnJlc2NyaWJlIGVsIG1cdTAwRTl0b2RvIGRlIEJhc2VWaWV3IHBhcmEgcmVnaXN0cmFyIGhlbHBlcnMgZXNwZWNcdTAwRURmaWNvcyBkZSBDYWxlbmRhclZpZXdcclxuICAgKiBAcGFyYW0gaTE4biBJbnN0YW5jaWEgZGUgSTE4biBwYXJhIGxhIGludGVybmFjaW9uYWxpemFjaVx1MDBGM25cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgcmVnaXN0ZXJWaWV3U3BlY2lmaWNIZWxwZXJzKGkxOG46IGFueSk6IHZvaWQge1xyXG4gICAgLy8gUmVnaXN0ZXIgY2FsZW5kYXItc3BlY2lmaWMgaGVscGVyc1xyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignZm9ybWF0RGF0ZUhlYWRlcicsIChkYXRlKSA9PiB7XHJcbiAgICAgIGlmICghZGF0ZSkgcmV0dXJuICcnO1xyXG4gICAgICBpZiAodHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21JU08oZGF0ZSkudG9Gb3JtYXQoJ2NjYyBkJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGRhdGUudG9Gb3JtYXQoJ2NjYyBkJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdmb3JtYXRNb250aCcsIChkYXRlKSA9PiB7XHJcbiAgICAgIGlmICghZGF0ZSkgcmV0dXJuICcnO1xyXG4gICAgICBpZiAodHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21JU08oZGF0ZSkudG9Gb3JtYXQoJ01NTU0geXl5eScpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBkYXRlLnRvRm9ybWF0KCdNTU1NIHl5eXknKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBIZWxwZXIgcGFyYSBmb3JtYXRlYXIgaG9yYSBlbiAxMkggdXNhbmRvIEx1eG9uXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdmb3JtYXRIb3VyJywgKGhvdXIpID0+IHtcclxuICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyIH0pLnRvRm9ybWF0KCdoIGEnKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBIZWxwZXIgcGFyYSBmb3JtYXRlYXIgZmVjaGEgY29tcGxldGFcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2Zvcm1hdEZ1bGxEYXRlJywgKGRhdGUpID0+IHtcclxuICAgICAgaWYgKCFkYXRlKSByZXR1cm4gJyc7XHJcbiAgICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyhkYXRlKS50b0Zvcm1hdCgnRUVFRSwgTU1NTSBkLCB5eXl5Jyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGRhdGUudG9Gb3JtYXQoJ0VFRUUsIE1NTU0gZCwgeXl5eScpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIEhlbHBlciBwYXJhIGNvbXBhcmFyIHZhbG9yZXMgKFx1MDBGQXRpbCBwYXJhIGNvbmRpY2lvbmVzIGVuIHBsYW50aWxsYXMpXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdlcXVhbHMnLCBmdW5jdGlvbihhcmcxLCBhcmcyLCBvcHRpb25zKSB7XHJcbiAgICAgIHJldHVybiAoYXJnMSA9PT0gYXJnMikgPyBvcHRpb25zLmZuKHRoaXMpIDogb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcigndG9JU09EYXRlJywgKGRhdGUpID0+IHtcclxuICAgICAgaWYgKCFkYXRlKSByZXR1cm4gJyc7XHJcbiAgICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyhkYXRlKS50b0lTT0RhdGUoKTtcclxuICAgICAgfVxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgZGF0ZS50b0lTT0RhdGUgPT09ICdmdW5jdGlvbicgPyBkYXRlLnRvSVNPRGF0ZSgpIDogJyc7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2dldERheU9mTW9udGgnLCAoZGF0ZSkgPT4ge1xyXG4gICAgICBpZiAoIWRhdGUpIHJldHVybiAnJztcclxuICAgICAgcmV0dXJuIGRhdGUuZGF5O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTb2JyZXNjcmliZSBlbCBtXHUwMEU5dG9kbyBkZSBCYXNlVmlldyBwYXJhIGltcGxlbWVudGFyIGV2ZW50IGxpc3RlbmVycyBlc3BlY1x1MDBFRGZpY29zIGRlIENhbGVuZGFyVmlld1xyXG4gICAqIEBwYXJhbSBjb250YWluZXIgQ29udGVuZWRvciBkb25kZSBzZSBhcGxpY2FuIGxvcyBsaXN0ZW5lcnNcclxuICAgKiBAcGFyYW0gZGF0YSBEYXRvcyB1dGlsaXphZG9zIHBhcmEgcmVuZGVyaXphciBsYSB2aXN0YVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzZXR1cFZpZXdTcGVjaWZpY0V2ZW50TGlzdGVuZXJzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVycyBmb3IgbmF2aWdhdGlvbiBidXR0b25zXHJcbiAgICBjb25zdCBwcmV2QnV0dG9uID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5jYWxlbmRhci1wcmV2Jyk7XHJcbiAgICBjb25zdCBuZXh0QnV0dG9uID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5jYWxlbmRhci1uZXh0Jyk7XHJcbiAgICBjb25zdCB0b2RheUJ1dHRvbiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuY2FsZW5kYXItdG9kYXknKTtcclxuXHJcbiAgICBpZiAocHJldkJ1dHRvbikge1xyXG4gICAgICBwcmV2QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubmF2aWdhdGVUb1ByZXZpb3VzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChuZXh0QnV0dG9uKSB7XHJcbiAgICAgIG5leHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvTmV4dCgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodG9kYXlCdXR0b24pIHtcclxuICAgICAgdG9kYXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLm5hdmlnYXRlVG9Ub2RheSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2aWV3RHJvcGRvd24gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI2NhbGVuZGFyLXZpZXctZHJvcGRvd24nKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuXHJcbiAgICBpZiAodmlld0Ryb3Bkb3duKSB7XHJcbiAgICAgIC8vIEVzdGFibGVjZXIgZWwgdmFsb3IgYWN0dWFsIGJhc2FkbyBlbiBsYSB2aXN0YSBhY3R1YWxcclxuICAgICAgLy8gRWwgdmFsb3IgeWEgZGViZXJcdTAwRURhIGVzdGFyIGVzdGFibGVjaWRvIGRlc2RlIGxhIHBsYW50aWxsYSB1c2FuZG8ge3sjZXF1YWxzfX1cclxuXHJcbiAgICAgIC8vIEFcdTAwRjFhZGlyIGV2ZW50IGxpc3RlbmVyIHBhcmEgZWwgY2FtYmlvIGRlIHNlbGVjY2lcdTAwRjNuXHJcbiAgICAgIHZpZXdEcm9wZG93bi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRWaWV3VHlwZSA9IHRoaXMuZ2V0Q2FsZW5kYXJWaWV3VHlwZUZyb21TdHJpbmcodmlld0Ryb3Bkb3duLnZhbHVlKTtcclxuICAgICAgICB0aGlzLnN3aXRjaFRvVmlld1R5cGUoc2VsZWN0ZWRWaWV3VHlwZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAvLyBFdmVudCBsaXN0ZW5lcnMgcGFyYSB0YXJlYXNcclxuICAgIGNvbnN0IHRhc2tJdGVtcyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuY2FsZW5kYXItdGFzaycpO1xyXG4gICAgdGFza0l0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsZS1wYXRoJyk7XHJcbiAgICAgICAgY29uc3QgbGluZU51bWJlciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGluZS1udW1iZXInKTtcclxuXHJcbiAgICAgICAgaWYgKGZpbGVQYXRoKSB7XHJcbiAgICAgICAgICB0aGlzLm9wZW5UYXNrRmlsZShmaWxlUGF0aCwgbGluZU51bWJlciA/IHBhcnNlSW50KGxpbmVOdW1iZXIpIDogdW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldENhbGVuZGFyVmlld1R5cGVGcm9tU3RyaW5nKHZpZXdUeXBlU3RyaW5nOiBzdHJpbmcpOiBDYWxlbmRhclZpZXdUeXBlIHtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgQ29udmlydGllbmRvICR7dmlld1R5cGVTdHJpbmd9IGEgQ2FsZW5kYXJWaWV3VHlwZWApO1xyXG4gICAgc3dpdGNoICh2aWV3VHlwZVN0cmluZykge1xyXG4gICAgICBjYXNlICdtb250aCc6XHJcbiAgICAgICAgcmV0dXJuIENhbGVuZGFyVmlld1R5cGUuTW9udGg7XHJcbiAgICAgIGNhc2UgJ3dlZWsnOlxyXG4gICAgICAgIHJldHVybiBDYWxlbmRhclZpZXdUeXBlLldlZWs7XHJcbiAgICAgIGNhc2UgJ3dvcmt3ZWVrJzpcclxuICAgICAgICByZXR1cm4gQ2FsZW5kYXJWaWV3VHlwZS5Xb3JrV2VlaztcclxuICAgICAgY2FzZSAnZGF5JzpcclxuICAgICAgICByZXR1cm4gQ2FsZW5kYXJWaWV3VHlwZS5EYXk7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIENhbGVuZGFyVmlld1R5cGUuTW9udGg7IC8vIFZhbG9yIHBvciBkZWZlY3RvXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYW1iaWEgZWwgdGlwbyBkZSB2aXN0YSBhY3R1YWxcclxuICAgKiBAcGFyYW0gdmlld1R5cGUgRWwgdGlwbyBkZSB2aXN0YSBhbCBxdWUgY2FtYmlhclxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3dpdGNoVG9WaWV3VHlwZSh2aWV3VHlwZTogQ2FsZW5kYXJWaWV3VHlwZSk6IHZvaWQge1xyXG4gICAgLy8gR3VhcmRhciBwcmVmZXJlbmNpYSBkZWwgdXN1YXJpb1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NhbGVuZGFyX3ZpZXdfdHlwZScsIHZpZXdUeXBlKTtcclxuICAgIFxyXG4gICAgLy8gRGV0ZXJtaW5hciBlbCBJRCBkZSB2aXN0YSBzZWdcdTAwRkFuIGVsIHRpcG9cclxuICAgIGxldCB2aWV3SWQ7XHJcbiAgICBzd2l0Y2ggKHZpZXdUeXBlKSB7XHJcbiAgICAgIGNhc2UgQ2FsZW5kYXJWaWV3VHlwZS5Nb250aDpcclxuICAgICAgICB2aWV3SWQgPSAnY2FsZW5kYXItbW9udGgtdmlldyc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgQ2FsZW5kYXJWaWV3VHlwZS5XZWVrOlxyXG4gICAgICAgIHZpZXdJZCA9ICdjYWxlbmRhci13ZWVrLXZpZXcnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENhbGVuZGFyVmlld1R5cGUuV29ya1dlZWs6XHJcbiAgICAgICAgdmlld0lkID0gJ2NhbGVuZGFyLXdvcmt3ZWVrLXZpZXcnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENhbGVuZGFyVmlld1R5cGUuRGF5OlxyXG4gICAgICAgIHZpZXdJZCA9ICdjYWxlbmRhci1kYXktdmlldyc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdmlld0lkID0gJ2NhbGVuZGFyLW1vbnRoLXZpZXcnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVzYXIgbGEgZmFjdG9yeSBwYXJhIGNyZWFyIGxhIHZpc3RhIGNvcnJlY3RhXHJcbiAgICBpZiAodGhpcy5wbHVnaW4gJiYgdGhpcy5wbHVnaW4uYXBwKSB7XHJcbiAgICAgIGNvbnN0IGxlYWYgPSB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XHJcbiAgICAgIGlmIChsZWFmKSB7XHJcbiAgICAgICAgbGVhZi5zZXRWaWV3U3RhdGUoeyB0eXBlOiB2aWV3SWQgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIG9uQ2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBMaW1waWEgcmVjdXJzb3Mgc2kgZXMgbmVjZXNhcmlvXHJcbiAgfVxyXG59IiwgImltcG9ydCB7IFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3IH0gZnJvbSBcIi4vY2FsZW5kYXItdmlld1wiO1xyXG5pbXBvcnQgeyBUYXNrTWFuYWdlciB9IGZyb20gXCIuLi9jb3JlL3Rhc2stbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBJVGFzayB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBJMThuIH0gZnJvbSAnLi4vY29yZS9pMThuJztcclxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XHJcbmltcG9ydCB7IENhbGVuZGFyVmlld1R5cGUgfSBmcm9tIFwiLi4vdHlwZXMvZW51bXNcIjtcclxuaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSAnaGFuZGxlYmFycyc7XHJcblxyXG5leHBvcnQgY29uc3QgQ0FMRU5EQVJfTU9OVEhfVklFV19UWVBFID0gXCJjYWxlbmRhci1tb250aC12aWV3XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJNb250aFZpZXcgZXh0ZW5kcyBDYWxlbmRhclZpZXcge1xyXG5cclxuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IGFueSwgaTE4bjogSTE4biwgdGFza01hbmFnZXI6IFRhc2tNYW5hZ2VyKSB7XHJcbiAgICBzdXBlcihsZWFmLCBwbHVnaW4sIGkxOG4sIHRhc2tNYW5hZ2VyKTtcclxuXHJcbiAgfVxyXG5cclxuICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIENBTEVOREFSX01PTlRIX1ZJRVdfVFlQRTtcclxuICB9XHJcblxyXG4gIGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5pMThuLnQoXCJtb250aF92aWV3X3RpdGxlXCIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWNvbigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdjYWxlbmRhci1jaGVjayc7XHJcbiAgfVxyXG5cclxuIC8qKlxyXG4gICAqIEdlbmVyYSBkYXRvcyBwYXJhIGxhIHZpc3RhIG1lbnN1YWwgZGVsIGNhbGVuZGFyaW9cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2VuZXJhdGVWaWV3RGF0YSgpOiBhbnkge1xyXG4gICAgY29uc3Qgc3RhcnRPZk1vbnRoID0gdGhpcy5jdXJyZW50RGF0ZS5zdGFydE9mKCdtb250aCcpO1xyXG4gICAgY29uc3QgZW5kT2ZNb250aCA9IHRoaXMuY3VycmVudERhdGUuZW5kT2YoJ21vbnRoJyk7XHJcbiAgICBcclxuICAgIC8vIENvbWllbnphIGRlc2RlIGVsIHByaW1lciBkXHUwMEVEYSBkZSBsYSBzZW1hbmEgcXVlIGNvbnRpZW5lIGVsIHByaW1lciBkXHUwMEVEYSBkZWwgbWVzXHJcbiAgICBsZXQgc3RhcnREYXRlID0gc3RhcnRPZk1vbnRoLnN0YXJ0T2YoJ3dlZWsnKTtcclxuICAgIFxyXG4gICAgLy8gVGVybWluYSBlbiBlbCBcdTAwRkFsdGltbyBkXHUwMEVEYSBkZSBsYSBzZW1hbmEgcXVlIGNvbnRpZW5lIGVsIFx1MDBGQWx0aW1vIGRcdTAwRURhIGRlbCBtZXNcclxuICAgIGxldCBlbmREYXRlID0gZW5kT2ZNb250aC5lbmRPZignd2VlaycpO1xyXG4gICAgXHJcbiAgICAvLyBEZWZpbmUgZWwgdGlwbyBkZSBkYXRvcyBwYXJhIGxvcyBkXHUwMEVEYXNcclxuICAgIHR5cGUgRGF5RGF0YSA9IHtcclxuICAgICAgZGF0ZTogRGF0ZVRpbWU7XHJcbiAgICAgIGlzQ3VycmVudE1vbnRoOiBib29sZWFuO1xyXG4gICAgICBpc1RvZGF5OiBib29sZWFuO1xyXG4gICAgICBkYXlPZk1vbnRoOiBudW1iZXI7XHJcbiAgICAgIHRhc2tzRm9yRGF5OiBJVGFza1tdO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gRGVmaW5lIGVsIHRpcG8gcGFyYSB1bmEgc2VtYW5hIGNvbiBzdSBuXHUwMEZBbWVyb1xyXG4gICAgdHlwZSBXZWVrRGF0YSA9IHtcclxuICAgICAgZGF5czogRGF5RGF0YVtdO1xyXG4gICAgICB3ZWVrTnVtYmVyOiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBHZW5lcmEgZWwgYXJyYXkgZGUgZmVjaGFzXHJcbiAgICBjb25zdCB3ZWVrczogV2Vla0RhdGFbXSA9IFtdO1xyXG4gICAgbGV0IGN1cnJlbnRXZWVrRGF5czogRGF5RGF0YVtdID0gW107XHJcbiAgICBsZXQgY3VycmVudERheSA9IHN0YXJ0RGF0ZTtcclxuICAgIFxyXG4gICAgd2hpbGUgKGN1cnJlbnREYXkgPD0gZW5kRGF0ZSkge1xyXG4gICAgICAvLyBBXHUwMEYxYWRlIGxvcyBkYXRvcyBkZWwgZFx1MDBFRGFcclxuICAgICAgY29uc3QgZGF5RGF0YTogRGF5RGF0YSA9IHtcclxuICAgICAgICBkYXRlOiBjdXJyZW50RGF5LFxyXG4gICAgICAgIGlzQ3VycmVudE1vbnRoOiBjdXJyZW50RGF5Lm1vbnRoID09PSBzdGFydE9mTW9udGgubW9udGgsXHJcbiAgICAgICAgaXNUb2RheTogY3VycmVudERheS5oYXNTYW1lKERhdGVUaW1lLm5vdygpLCAnZGF5JyksXHJcbiAgICAgICAgZGF5T2ZNb250aDogY3VycmVudERheS5kYXksXHJcbiAgICAgICAgdGFza3NGb3JEYXk6IHRoaXMuZ2V0VGFza3NGb3JEYXRlKGN1cnJlbnREYXkpXHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICBjdXJyZW50V2Vla0RheXMucHVzaChkYXlEYXRhKTtcclxuICAgICAgXHJcbiAgICAgIC8vIENvbWllbnphIHVuYSBudWV2YSBzZW1hbmEgc2kgaGVtb3MgbGxlZ2FkbyBhbCBmaW5hbCBkZSB1bmEgc2VtYW5hXHJcbiAgICAgIGlmIChjdXJyZW50V2Vla0RheXMubGVuZ3RoID09PSA3KSB7XHJcbiAgICAgICAgLy8gT2J0aWVuZSBlbCBuXHUwMEZBbWVybyBkZSBzZW1hbmEgZGVsIHByaW1lciBkXHUwMEVEYSBkZSBsYSBzZW1hbmFcclxuICAgICAgICBjb25zdCB3ZWVrTnVtYmVyID0gY3VycmVudFdlZWtEYXlzWzBdLmRhdGUud2Vla051bWJlcjtcclxuICAgICAgICBcclxuICAgICAgICAvLyBBXHUwMEYxYWRlIGxhIHNlbWFuYSBjb21wbGV0YSBjb24gc3Ugblx1MDBGQW1lcm9cclxuICAgICAgICB3ZWVrcy5wdXNoKHtcclxuICAgICAgICAgIGRheXM6IFsuLi5jdXJyZW50V2Vla0RheXNdLFxyXG4gICAgICAgICAgd2Vla051bWJlcjogd2Vla051bWJlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGN1cnJlbnRXZWVrRGF5cyA9IFtdO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBBdmFuemEgYWwgc2lndWllbnRlIGRcdTAwRURhXHJcbiAgICAgIGN1cnJlbnREYXkgPSBjdXJyZW50RGF5LnBsdXMoeyBkYXlzOiAxIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2aWV3VHlwZTogQ2FsZW5kYXJWaWV3VHlwZS5Nb250aCxcclxuICAgICAgd2Vla3M6IHdlZWtzLFxyXG4gICAgICBtb250aE5hbWU6IHN0YXJ0T2ZNb250aC50b0Zvcm1hdCgnTU1NTSB5eXl5JyksXHJcbiAgICAgIGRheU5hbWVzOiB0aGlzLmdldExvY2FsaXplZERheU5hbWVzKCksXHJcbiAgICAgIHBlcmlvZE5hbWU6IHN0YXJ0T2ZNb250aC50b0Zvcm1hdCgnTU1NTSB5eXl5JylcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmF2aWdhdGVUb1ByZXZpb3VzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jdXJyZW50RGF0ZSA9IHRoaXMuY3VycmVudERhdGUubWludXMoeyBtb250aHM6IDEgfSk7XHJcbiAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmF2aWdhdGVUb05leHQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5jdXJyZW50RGF0ZS5wbHVzKHsgbW9udGhzOiAxIH0pO1xyXG4gICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25DbG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8vIExpbXBpYSByZWN1cnNvcyBzaSBlcyBuZWNlc2FyaW9cclxuICB9XHJcbn0iLCAiaW1wb3J0IHsgV29ya3NwYWNlTGVhZiB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBDYWxlbmRhclZpZXcgfSBmcm9tIFwiLi9jYWxlbmRhci12aWV3XCI7XHJcbmltcG9ydCB7IFRhc2tNYW5hZ2VyIH0gZnJvbSBcIi4uL2NvcmUvdGFzay1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7IElUYXNrIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IEkxOG4gfSBmcm9tICcuLi9jb3JlL2kxOG4nO1xyXG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcclxuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3VHlwZSB9IGZyb20gXCIuLi90eXBlcy9lbnVtc1wiO1xyXG5pbXBvcnQgSGFuZGxlYmFycyBmcm9tICdoYW5kbGViYXJzJztcclxuXHJcbmV4cG9ydCBjb25zdCBDQUxFTkRBUl9XRUVLX1ZJRVdfVFlQRSA9IFwiY2FsZW5kYXItd2Vlay12aWV3XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJXZWVrVmlldyBleHRlbmRzIENhbGVuZGFyVmlldyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogYW55LCBpMThuOiBJMThuLCB0YXNrTWFuYWdlcjogVGFza01hbmFnZXIpIHtcclxuICAgIHN1cGVyKGxlYWYsIHBsdWdpbiwgaTE4biwgdGFza01hbmFnZXIpO1xyXG5cclxuICB9XHJcblxyXG4gIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gQ0FMRU5EQVJfV0VFS19WSUVXX1RZUEU7XHJcbiAgfVxyXG5cclxuICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuaTE4bi50KFwid2Vla192aWV3X3RpdGxlXCIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWNvbigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdjYWxlbmRhci1jaGVjayc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmEgZGF0b3MgcGFyYSBsYSB2aXN0YSBzZW1hbmFsIGRlbCBjYWxlbmRhcmlvXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdlbmVyYXRlVmlld0RhdGEoKTogYW55IHtcclxuICAgIC8vIE9idGVuZXIgbGEgZmVjaGEgZGUgaW5pY2lvIGRlIGxhIHNlbWFuYSBhY3R1YWxcclxuICAgIGNvbnN0IHN0YXJ0T2ZXZWVrID0gdGhpcy5jdXJyZW50RGF0ZS5zdGFydE9mKCd3ZWVrJyk7XHJcbiAgICBcclxuICAgIC8vIFNpZW1wcmUgZ2VuZXJhbW9zIGxvcyA3IGRcdTAwRURhcyBkZSBsYSBzZW1hbmFcclxuICAgIGNvbnN0IGRheXNUb0dlbmVyYXRlID0gNztcclxuICAgIFxyXG4gICAgLy8gT2J0ZW5lciBsb3Mgbm9tYnJlcyBkZSBsb3MgZFx1MDBFRGFzIGxvY2FsaXphZG9zXHJcbiAgICBjb25zdCBsb2NhbGl6ZWREYXlOYW1lcyA9IHRoaXMuZ2V0TG9jYWxpemVkRGF5TmFtZXMoKTtcclxuICAgIFxyXG4gICAgLy8gRGVmaW5lIGEgdHlwZSBmb3IgZGF5IGRhdGFcclxuICAgIHR5cGUgV2Vla0RheURhdGEgPSB7XHJcbiAgICAgIGRhdGU6IERhdGVUaW1lO1xyXG4gICAgICBpc1RvZGF5OiBib29sZWFuO1xyXG4gICAgICBkYXlPZk1vbnRoOiBudW1iZXI7XHJcbiAgICAgIGRheU9mV2VlazogbnVtYmVyO1xyXG4gICAgICBkYXlOYW1lOiBzdHJpbmc7XHJcbiAgICAgIGZvcm1hdHRlZERhdGU6IHN0cmluZztcclxuICAgICAgdGFza3NGb3JEYXk6IElUYXNrW107XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBQcmVwYXJhIGxvcyBkYXRvcyBkZSBsb3MgZFx1MDBFRGFzXHJcbiAgICBjb25zdCBkYXlzOiBXZWVrRGF5RGF0YVtdID0gW107XHJcbiAgICBsZXQgY3VycmVudERheSA9IHN0YXJ0T2ZXZWVrO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRheXNUb0dlbmVyYXRlOyBpKyspIHtcclxuICAgICAgY29uc3QgZGF5VGFza3MgPSB0aGlzLmdldFRhc2tzRm9yRGF0ZShjdXJyZW50RGF5KTtcclxuICAgICAgY29uc3QgZGF5SW5kZXggPSBjdXJyZW50RGF5LndlZWtkYXkgJSA3OyAvLyBBc2VndXJhIHF1ZSBlbCBcdTAwRURuZGljZSBzZWEgMC02XHJcbiAgICAgIFxyXG4gICAgICBkYXlzLnB1c2goe1xyXG4gICAgICAgIGRhdGU6IGN1cnJlbnREYXksXHJcbiAgICAgICAgaXNUb2RheTogY3VycmVudERheS5oYXNTYW1lKERhdGVUaW1lLm5vdygpLCAnZGF5JyksXHJcbiAgICAgICAgZGF5T2ZNb250aDogY3VycmVudERheS5kYXksXHJcbiAgICAgICAgZGF5T2ZXZWVrOiBjdXJyZW50RGF5LndlZWtkYXksXHJcbiAgICAgICAgLy8gVXNhciBlbCBub21icmUgbG9jYWxpemFkbyBkZWwgZFx1MDBFRGEgZW4gbHVnYXIgZGUgdG9Gb3JtYXQoKVxyXG4gICAgICAgIGRheU5hbWU6IGxvY2FsaXplZERheU5hbWVzW2RheUluZGV4XSxcclxuICAgICAgICBmb3JtYXR0ZWREYXRlOiBgJHtsb2NhbGl6ZWREYXlOYW1lc1tkYXlJbmRleF19ICR7Y3VycmVudERheS5kYXl9YCxcclxuICAgICAgICB0YXNrc0ZvckRheTogZGF5VGFza3NcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBjdXJyZW50RGF5ID0gY3VycmVudERheS5wbHVzKHsgZGF5czogMSB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2FsY3VsYXIgZWwgbm9tYnJlIGRlbCBwZXJpb2RvIChyYW5nbyBkZSBmZWNoYXMpXHJcbiAgICBjb25zdCB3ZWVrRW5kID0gc3RhcnRPZldlZWsucGx1cyh7IGRheXM6IGRheXNUb0dlbmVyYXRlIC0gMSB9KTtcclxuICAgIGNvbnN0IHBlcmlvZE5hbWUgPSBgJHtzdGFydE9mV2Vlay50b0Zvcm1hdCgnTU1NIGQnKX0gLSAke3dlZWtFbmQudG9Gb3JtYXQoJ01NTSBkLCB5eXl5Jyl9YDtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmlld1R5cGU6IENhbGVuZGFyVmlld1R5cGUuV2VlayxcclxuICAgICAgd2Vla051bWJlcjogc3RhcnRPZldlZWsud2Vla051bWJlcixcclxuICAgICAgZGF5czogZGF5cyxcclxuICAgICAgZGF5TmFtZXM6IGxvY2FsaXplZERheU5hbWVzLFxyXG4gICAgICBwZXJpb2ROYW1lOiBwZXJpb2ROYW1lXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG5hdmlnYXRlVG9QcmV2aW91cygpOiB2b2lkIHtcclxuICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLmN1cnJlbnREYXRlLm1pbnVzKHsgd2Vla3M6IDEgfSk7XHJcbiAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmF2aWdhdGVUb05leHQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5jdXJyZW50RGF0ZS5wbHVzKHsgd2Vla3M6IDEgfSk7XHJcbiAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTb2JyZXNjcmliZSBlbCBtXHUwMEU5dG9kbyBkZSBDYWxlbmRhclZpZXcgcGFyYSBpbXBsZW1lbnRhciBldmVudCBsaXN0ZW5lcnMgZXNwZWNcdTAwRURmaWNvc1xyXG4gICAqIEBwYXJhbSBjb250YWluZXIgQ29udGVuZWRvciBkb25kZSBzZSBhcGxpY2FuIGxvcyBsaXN0ZW5lcnNcclxuICAgKiBAcGFyYW0gZGF0YSBEYXRvcyB1dGlsaXphZG9zIHBhcmEgcmVuZGVyaXphciBsYSB2aXN0YVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzZXR1cFZpZXdTcGVjaWZpY0V2ZW50TGlzdGVuZXJzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgLy8gUHJpbWVybyBlamVjdXRhIGxvcyBldmVudCBsaXN0ZW5lcnMgY29tdW5lc1xyXG4gICAgc3VwZXIuc2V0dXBWaWV3U3BlY2lmaWNFdmVudExpc3RlbmVycyhjb250YWluZXIsIGRhdGEpO1xyXG4gICAgXHJcbiAgICAvLyBBXHUwMEYxYWRpciBtYW5lam8gZGVsIHNlbGVjdG9yIGRlIGVzdGlsbyBkZSBjdWFkclx1MDBFRGN1bGFcclxuICAgIGNvbnN0IGdyaWRTdHlsZVNlbGVjdG9yID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjYWxlbmRhci1ncmlkLXN0eWxlJykgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XHJcbiAgICBcclxuICAgIGlmIChncmlkU3R5bGVTZWxlY3Rvcikge1xyXG4gICAgICAvLyBNYW5lamFyIGNhbWJpb3MgZW4gZWwgc2VsZWN0b3JcclxuICAgICAgZ3JpZFN0eWxlU2VsZWN0b3IuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkU3R5bGUgPSBncmlkU3R5bGVTZWxlY3Rvci52YWx1ZTtcclxuICAgICAgICBjb25zdCB3ZWVrRGF5c1JvdyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuY2FsZW5kYXItd2Vlay1kYXlzLXJvdycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh3ZWVrRGF5c1Jvdykge1xyXG4gICAgICAgICAgLy8gRWxpbWluYXIgY2xhc2VzIGRlIGVzdGlsbyBhbnRlcmlvcmVzXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHdlZWtEYXlzUm93LmNsYXNzTGlzdC5yZW1vdmUoYHN0eWxlJHtpfWApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBBcGxpY2FyIG51ZXZvIGVzdGlsbyBzaSBubyBlcyBlbCBwcmVkZXRlcm1pbmFkb1xyXG4gICAgICAgICAgaWYgKHNlbGVjdGVkU3R5bGUgIT09ICdkZWZhdWx0Jykge1xyXG4gICAgICAgICAgICB3ZWVrRGF5c1Jvdy5jbGFzc0xpc3QuYWRkKHNlbGVjdGVkU3R5bGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBHdWFyZGFyIGxhIHByZWZlcmVuY2lhIGRlbCB1c3VhcmlvXHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY2FsZW5kYXItZ3JpZC1zdHlsZScsIHNlbGVjdGVkU3R5bGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBSZXN0YXVyYXIgcHJlZmVyZW5jaWEgZ3VhcmRhZGEgYWwgY2FyZ2FyIGxhIHZpc3RhXHJcbiAgICAgIGNvbnN0IHNhdmVkU3R5bGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2FsZW5kYXItZ3JpZC1zdHlsZScpO1xyXG4gICAgICBpZiAoc2F2ZWRTdHlsZSkge1xyXG4gICAgICAgIGdyaWRTdHlsZVNlbGVjdG9yLnZhbHVlID0gc2F2ZWRTdHlsZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBEaXNwYXJhciBlbCBldmVudG8gY2hhbmdlIG1hbnVhbG1lbnRlIHBhcmEgYXBsaWNhciBlbCBlc3RpbG9cclxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudCgnY2hhbmdlJyk7XHJcbiAgICAgICAgZ3JpZFN0eWxlU2VsZWN0b3IuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIG9uQ2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBMaW1waWEgcmVjdXJzb3Mgc2kgZXMgbmVjZXNhcmlvXHJcbiAgfVxyXG59IiwgImltcG9ydCB7IFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3IH0gZnJvbSBcIi4vY2FsZW5kYXItdmlld1wiO1xyXG5pbXBvcnQgeyBUYXNrTWFuYWdlciB9IGZyb20gXCIuLi9jb3JlL3Rhc2stbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBIb3VyU2xvdCwgTWluaUNhbGVuZGFyRGF5IH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IEkxOG4gfSBmcm9tICcuLi9jb3JlL2kxOG4nO1xyXG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcclxuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3VHlwZSB9IGZyb20gXCIuLi90eXBlcy9lbnVtc1wiO1xyXG5pbXBvcnQgSGFuZGxlYmFycyBmcm9tICdoYW5kbGViYXJzJztcclxuXHJcbmV4cG9ydCBjb25zdCBDQUxFTkRBUl9EQVlfVklFV19UWVBFID0gXCJjYWxlbmRhci1kYXktdmlld1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyRGF5VmlldyBleHRlbmRzIENhbGVuZGFyVmlldyB7XHJcbiAgLy8gQVx1MDBGMWFkaXIgdW5hIHByb3BpZWRhZCBwYXJhIHJhc3RyZWFyIGVsIG1lcyBtb3N0cmFkbyBlbiBlbCBtaW5pIGNhbGVuZGFyaW9cclxuICBwcml2YXRlIG1pbmlDYWxlbmRhck1vbnRoOiBEYXRlVGltZTtcclxuICBcclxuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IGFueSwgaTE4bjogSTE4biwgdGFza01hbmFnZXI6IFRhc2tNYW5hZ2VyKSB7XHJcbiAgICBzdXBlcihsZWFmLCBwbHVnaW4sIGkxOG4sIHRhc2tNYW5hZ2VyKTtcclxuICAgIC8vIEluaWNpYWxpemFyIGVsIG1lcyBkZWwgbWluaSBjYWxlbmRhcmlvIGNvbiBsYSBmZWNoYSBhY3R1YWxcclxuICAgIHRoaXMubWluaUNhbGVuZGFyTW9udGggPSB0aGlzLmN1cnJlbnREYXRlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBDQUxFTkRBUl9EQVlfVklFV19UWVBFO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmkxOG4udChcImRheV92aWV3X3RpdGxlXCIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWNvbigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdjYWxlbmRhci1jaGVjayc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmEgZGF0b3MgcGFyYSBsYSB2aXN0YSBkaWFyaWEgZGVsIGNhbGVuZGFyaW9cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2VuZXJhdGVWaWV3RGF0YSgpOiBhbnkge1xyXG4gICAgY29uc3QgZGF5VGFza3MgPSB0aGlzLmdldFRhc2tzRm9yRGF0ZSh0aGlzLmN1cnJlbnREYXRlKTtcclxuICAgICAgICBcclxuICAgIC8vIE9yZ2FuaXphciB0YXJlYXMgcG9yIGhvcmEgKDI0IGhvcmFzKVxyXG4gICAgY29uc3QgaG91clNsb3RzOiBIb3VyU2xvdFtdID0gW107XHJcbiAgICBmb3IgKGxldCBob3VyID0gMDsgaG91ciA8IDI0OyBob3VyKyspIHtcclxuICAgICAgLy8gRmlsdHJhciB0YXJlYXMgcGFyYSBlc3RhIGhvcmEgZXNwZWNcdTAwRURmaWNhXHJcbiAgICAgIGNvbnN0IGhvdXJUYXNrcyA9IGRheVRhc2tzLmZpbHRlcih0YXNrID0+IHtcclxuICAgICAgICBpZiAoIXRhc2suZHVlRGF0ZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIENvbnZlcnRpciBhIERhdGVUaW1lIHNpIGVzIHN0cmluZ1xyXG4gICAgICAgIGNvbnN0IHRhc2tEYXRlID0gdHlwZW9mIHRhc2suZHVlRGF0ZSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgID8gRGF0ZVRpbWUuZnJvbUlTTyh0YXNrLmR1ZURhdGUpXHJcbiAgICAgICAgICA6IHRhc2suZHVlRGF0ZTtcclxuICAgICAgICAgIFxyXG4gICAgICAgIC8vIFZlcmlmaWNhciBzaSBsYSB0YXJlYSBlcyBwYXJhIGVzdGEgaG9yYVxyXG4gICAgICAgIHJldHVybiB0YXNrRGF0ZS5ob3VyID09PSBob3VyO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGhvdXJTbG90cy5wdXNoKHtcclxuICAgICAgICBob3VyLFxyXG4gICAgICAgIGZvcm1hdHRlZEhvdXI6IHRoaXMuZm9ybWF0SG91cihob3VyKSxcclxuICAgICAgICB0YXNrczogaG91clRhc2tzXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBHZW5lcmFyIGRhdG9zIGRlbCBtaW5pIGNhbGVuZGFyaW8gdXNhbmRvIGVsIG1lcyBhbG1hY2VuYWRvXHJcbiAgICBjb25zdCBtaW5pQ2FsZW5kYXIgPSB0aGlzLmdlbmVyYXRlTWluaUNhbGVuZGFyRGF0YSh0aGlzLm1pbmlDYWxlbmRhck1vbnRoKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmlld1R5cGU6IENhbGVuZGFyVmlld1R5cGUuRGF5LFxyXG4gICAgICBkYXRlOiB0aGlzLmN1cnJlbnREYXRlLFxyXG4gICAgICB3ZWVrZGF5OiB0aGlzLmN1cnJlbnREYXRlLndlZWtkYXksXHJcbiAgICAgIGRheU5hbWU6IHRoaXMuY3VycmVudERhdGUudG9Gb3JtYXQoJ2NjY2MnKSwgLy8gTm9tYnJlIGNvbXBsZXRvIGRlbCBkXHUwMEVEYVxyXG4gICAgICBpc1RvZGF5OiB0aGlzLmN1cnJlbnREYXRlLmhhc1NhbWUoRGF0ZVRpbWUubm93KCksICdkYXknKSxcclxuICAgICAgdGFza3NGb3JEYXk6IGRheVRhc2tzLFxyXG4gICAgICBob3VyU2xvdHM6IGhvdXJTbG90cyxcclxuICAgICAgcGVyaW9kTmFtZTogdGhpcy5jdXJyZW50RGF0ZS50b0Zvcm1hdCgnRUVFRSwgTU1NTSBkLCB5eXl5JyksXHJcbiAgICAgIG1pbmlDYWxlbmRhcjogbWluaUNhbGVuZGFyXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhIGRhdG9zIHBhcmEgZWwgbWluaSBjYWxlbmRhcmlvXHJcbiAgICogT3B0aW1pemFkbyBwYXJhIHJlbmRpbWllbnRvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZW5lcmF0ZU1pbmlDYWxlbmRhckRhdGEoY3VycmVudERhdGU6IERhdGVUaW1lKSB7XHJcbiAgICBjb25zdCB0b2RheSA9IERhdGVUaW1lLm5vdygpLnN0YXJ0T2YoJ2RheScpO1xyXG4gICAgY29uc3QgZmlyc3RPZk1vbnRoID0gY3VycmVudERhdGUuc3RhcnRPZignbW9udGgnKTtcclxuICAgIGNvbnN0IGxhc3RPZk1vbnRoID0gY3VycmVudERhdGUuZW5kT2YoJ21vbnRoJyk7XHJcbiAgICBcclxuICAgIC8vIERcdTAwRURhIGRlIGxhIHNlbWFuYSBkZWwgcHJpbWVyIGRcdTAwRURhIGRlbCBtZXMgKDAtNiwgZG9uZGUgMCBlcyBkb21pbmdvIGVuIElTTylcclxuICAgIGxldCBmaXJzdERheU9mV2VlayA9IGZpcnN0T2ZNb250aC53ZWVrZGF5ICUgNztcclxuICAgIC8vIEFqdXN0YXIgcGFyYSBxdWUgbGEgc2VtYW5hIGNvbWllbmNlIGVuIGx1bmVzICgxLTcpXHJcbiAgICBpZiAoZmlyc3REYXlPZldlZWsgPT09IDApIGZpcnN0RGF5T2ZXZWVrID0gNztcclxuICAgIFxyXG4gICAgLy8gTm9tYnJlcyBjb3J0b3MgZGUgbG9zIGRcdTAwRURhcyBkZSBsYSBzZW1hbmFcclxuICAgIGNvbnN0IHdlZWtkYXlzID0gWydMJywgJ00nLCAnWCcsICdKJywgJ1YnLCAnUycsICdEJ107XHJcbiAgICBcclxuICAgIC8vIE9QVElNSVpBQ0lcdTAwRDNOOiBQcmVjYWxjdWxhciBmZWNoYXMgY29uIHRhcmVhcyB1c2FuZG8gdW4gU2V0XHJcbiAgICBjb25zdCBkYXRlc1dpdGhUYXNrcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgXHJcbiAgICAvLyBTb2xvIHByb2Nlc2FyIHVuYSB2ZXogbGFzIHRhcmVhc1xyXG4gICAgdGhpcy50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xyXG4gICAgICBpZiAodGFzay5kdWVEYXRlKSB7XHJcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IHR5cGVvZiB0YXNrLmR1ZURhdGUgPT09ICdzdHJpbmcnIFxyXG4gICAgICAgICAgPyB0YXNrLmR1ZURhdGUuc3BsaXQoJ1QnKVswXSAvLyBFeHRyYWVyIHNvbG8gbGEgcGFydGUgZGUgbGEgZmVjaGFcclxuICAgICAgICAgIDogRGF0ZVRpbWUuZnJvbUpTRGF0ZSh0YXNrLmR1ZURhdGUpLnRvSVNPRGF0ZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChkYXRlU3RyaW5nKSBkYXRlc1dpdGhUYXNrcy5hZGQoZGF0ZVN0cmluZyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFRhbWJpXHUwMEU5biBjb25zaWRlcmFyIGZlY2hhcyBwcm9ncmFtYWRhcyBzaSBleGlzdGVuXHJcbiAgICAgIGlmICh0YXNrLnNjaGVkdWxlZERhdGUpIHtcclxuICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gdHlwZW9mIHRhc2suc2NoZWR1bGVkRGF0ZSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgID8gdGFzay5zY2hlZHVsZWREYXRlLnNwbGl0KCdUJylbMF1cclxuICAgICAgICAgIDogRGF0ZVRpbWUuZnJvbUpTRGF0ZSh0YXNrLnNjaGVkdWxlZERhdGUpLnRvSVNPRGF0ZSgpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgaWYgKGRhdGVTdHJpbmcpIGRhdGVzV2l0aFRhc2tzLmFkZChkYXRlU3RyaW5nKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIE9QVElNSVpBQ0lcdTAwRDNOOiBNaW5pbWl6YXIgY3JlYWNpXHUwMEYzbiBkZSBvYmpldG9zIERhdGVUaW1lXHJcbiAgICAvLyBQcmVwYXJhciBzdHJpbmdzIGJhc2UgcGFyYSBsYXMgZmVjaGFzXHJcbiAgICBjb25zdCBjdXJyZW50TW9udGhTdHIgPSBjdXJyZW50RGF0ZS50b0Zvcm1hdCgneXl5eS1NTScpO1xyXG4gICAgY29uc3QgcHJldk1vbnRoU3RyID0gZmlyc3RPZk1vbnRoLm1pbnVzKHsgbW9udGhzOiAxIH0pLnRvRm9ybWF0KCd5eXl5LU1NJyk7XHJcbiAgICBjb25zdCBuZXh0TW9udGhTdHIgPSBmaXJzdE9mTW9udGgucGx1cyh7IG1vbnRoczogMSB9KS50b0Zvcm1hdCgneXl5eS1NTScpO1xyXG4gICAgXHJcbiAgICAvLyBHZW5lcmFyIG1hdHJpeiBwYXJhIGVsIGNhbGVuZGFyaW9cclxuICAgIGNvbnN0IHdlZWtzOiBNaW5pQ2FsZW5kYXJEYXlbXVtdID0gW107XHJcbiAgICBsZXQgY3VycmVudFdlZWs6IE1pbmlDYWxlbmRhckRheVtdID0gW107XHJcbiAgICBcclxuICAgIC8vIERcdTAwRURhcyBkZWwgbWVzIGFudGVyaW9yIHBhcmEgY29tcGxldGFyIGxhIHByaW1lcmEgc2VtYW5hXHJcbiAgICBjb25zdCBkYXlzSW5QcmV2TW9udGggPSBmaXJzdE9mTW9udGgubWludXMoeyBtb250aHM6IDEgfSkuZGF5c0luTW9udGggfHwgMzA7XHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZmlyc3REYXlPZldlZWs7IGkrKykge1xyXG4gICAgICBjb25zdCBkYXkgPSBkYXlzSW5QcmV2TW9udGggLSBmaXJzdERheU9mV2VlayArIGkgKyAxO1xyXG4gICAgICBjb25zdCBwYWRkZWREYXkgPSBkYXkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgICBjb25zdCBkYXRlU3RyID0gYCR7cHJldk1vbnRoU3RyfS0ke3BhZGRlZERheX1gO1xyXG4gICAgICBcclxuICAgICAgY3VycmVudFdlZWsucHVzaCh7XHJcbiAgICAgICAgZGF5LFxyXG4gICAgICAgIGRhdGU6IGRhdGVTdHIsXHJcbiAgICAgICAgaXNDdXJyZW50TW9udGg6IGZhbHNlLFxyXG4gICAgICAgIGlzVG9kYXk6IGZhbHNlLFxyXG4gICAgICAgIGlzU2VsZWN0ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGhhc1Rhc2tzOiBkYXRlc1dpdGhUYXNrcy5oYXMoZGF0ZVN0cilcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIERcdTAwRURhcyBkZWwgbWVzIGFjdHVhbFxyXG4gICAgY29uc3QgZGF5c0luTW9udGggPSBsYXN0T2ZNb250aC5kYXk7XHJcbiAgICBmb3IgKGxldCBkYXkgPSAxOyBkYXkgPD0gZGF5c0luTW9udGg7IGRheSsrKSB7XHJcbiAgICAgIGNvbnN0IHBhZGRlZERheSA9IGRheS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICAgIGNvbnN0IGRhdGVTdHIgPSBgJHtjdXJyZW50TW9udGhTdHJ9LSR7cGFkZGVkRGF5fWA7XHJcbiAgICAgIFxyXG4gICAgICAvLyBPcHRpbWl6YWNpXHUwMEYzbjogZXZpdGFyIGNyZWFyIG9iamV0b3MgRGF0ZVRpbWUgaW5uZWNlc2FyaW9zXHJcbiAgICAgIGNvbnN0IGlzVG9kYXkgPSB0b2RheS50b0lTT0RhdGUoKSA9PT0gZGF0ZVN0cjtcclxuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IGN1cnJlbnREYXRlLmRheSA9PT0gZGF5ICYmIGN1cnJlbnREYXRlLm1vbnRoID09PSBmaXJzdE9mTW9udGgubW9udGg7XHJcbiAgICAgIFxyXG4gICAgICBjdXJyZW50V2Vlay5wdXNoKHtcclxuICAgICAgICBkYXksXHJcbiAgICAgICAgZGF0ZTogZGF0ZVN0cixcclxuICAgICAgICBpc0N1cnJlbnRNb250aDogdHJ1ZSxcclxuICAgICAgICBpc1RvZGF5LFxyXG4gICAgICAgIGlzU2VsZWN0ZWQsXHJcbiAgICAgICAgaGFzVGFza3M6IGRhdGVzV2l0aFRhc2tzLmhhcyhkYXRlU3RyKVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGlmIChjdXJyZW50V2Vlay5sZW5ndGggPT09IDcpIHtcclxuICAgICAgICB3ZWVrcy5wdXNoKGN1cnJlbnRXZWVrKTtcclxuICAgICAgICBjdXJyZW50V2VlayA9IFtdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIERcdTAwRURhcyBkZWwgbWVzIHNpZ3VpZW50ZSBwYXJhIGNvbXBsZXRhciBsYSBcdTAwRkFsdGltYSBzZW1hbmFcclxuICAgIGlmIChjdXJyZW50V2Vlay5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGxldCBkYXkgPSAxO1xyXG4gICAgICB3aGlsZSAoY3VycmVudFdlZWsubGVuZ3RoIDwgNykge1xyXG4gICAgICAgIGNvbnN0IHBhZGRlZERheSA9IGRheS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICAgICAgY29uc3QgZGF0ZVN0ciA9IGAke25leHRNb250aFN0cn0tJHtwYWRkZWREYXl9YDtcclxuICAgICAgICBcclxuICAgICAgICBjdXJyZW50V2Vlay5wdXNoKHtcclxuICAgICAgICAgIGRheSxcclxuICAgICAgICAgIGRhdGU6IGRhdGVTdHIsXHJcbiAgICAgICAgICBpc0N1cnJlbnRNb250aDogZmFsc2UsXHJcbiAgICAgICAgICBpc1RvZGF5OiBmYWxzZSxcclxuICAgICAgICAgIGlzU2VsZWN0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgaGFzVGFza3M6IGRhdGVzV2l0aFRhc2tzLmhhcyhkYXRlU3RyKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRheSsrO1xyXG4gICAgICB9XHJcbiAgICAgIHdlZWtzLnB1c2goY3VycmVudFdlZWspO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtb250aE5hbWU6IGN1cnJlbnREYXRlLnRvRm9ybWF0KCdNTU1NIHl5eXknKSxcclxuICAgICAgd2Vla2RheXMsXHJcbiAgICAgIHdlZWtzXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTmF2ZWdhIGFsIG1lcyBhbnRlcmlvciBlbiBlbCBtaW5pIGNhbGVuZGFyaW9cclxuICAgKi9cclxuICBwcml2YXRlIG5hdmlnYXRlVG9QcmV2aW91c01vbnRoKCk6IHZvaWQge1xyXG4gICAgdGhpcy5taW5pQ2FsZW5kYXJNb250aCA9IHRoaXMubWluaUNhbGVuZGFyTW9udGgubWludXMoeyBtb250aHM6IDEgfSk7XHJcbiAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBOYXZlZ2EgYWwgbWVzIHNpZ3VpZW50ZSBlbiBlbCBtaW5pIGNhbGVuZGFyaW9cclxuICAgKi9cclxuICBwcml2YXRlIG5hdmlnYXRlVG9OZXh0TW9udGgoKTogdm9pZCB7XHJcbiAgICB0aGlzLm1pbmlDYWxlbmRhck1vbnRoID0gdGhpcy5taW5pQ2FsZW5kYXJNb250aC5wbHVzKHsgbW9udGhzOiAxIH0pO1xyXG4gICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG5hdmlnYXRlVG9QcmV2aW91cygpOiB2b2lkIHtcclxuICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLmN1cnJlbnREYXRlLm1pbnVzKHsgZGF5czogMSB9KTtcclxuICAgIHRoaXMubWluaUNhbGVuZGFyTW9udGggPSB0aGlzLmN1cnJlbnREYXRlOyAvLyBTaW5jcm9uaXphciBlbCBtZXMgZGVsIG1pbmkgY2FsZW5kYXJpb1xyXG4gICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG5hdmlnYXRlVG9OZXh0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5jdXJyZW50RGF0ZSA9IHRoaXMuY3VycmVudERhdGUucGx1cyh7IGRheXM6IDEgfSk7XHJcbiAgICB0aGlzLm1pbmlDYWxlbmRhck1vbnRoID0gdGhpcy5jdXJyZW50RGF0ZTsgLy8gU2luY3Jvbml6YXIgZWwgbWVzIGRlbCBtaW5pIGNhbGVuZGFyaW9cclxuICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcclxuICB9XHJcbiAgXHJcbiAgcHJvdGVjdGVkIG5hdmlnYXRlVG9Ub2RheSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY3VycmVudERhdGUgPSBEYXRlVGltZS5ub3coKTtcclxuICAgIHRoaXMubWluaUNhbGVuZGFyTW9udGggPSB0aGlzLmN1cnJlbnREYXRlOyAvLyBTaW5jcm9uaXphciBlbCBtZXMgZGVsIG1pbmkgY2FsZW5kYXJpb1xyXG4gICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29uZmlndXJhIGV2ZW50IGxpc3RlbmVycyBlc3BlY1x1MDBFRGZpY29zIHBhcmEgZXN0YSB2aXN0YVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzZXR1cFZpZXdTcGVjaWZpY0V2ZW50TGlzdGVuZXJzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgLy8gRWplY3V0YXIgZXZlbnQgbGlzdGVuZXJzIGNvbXVuZXMgcHJpbWVyb1xyXG4gICAgc3VwZXIuc2V0dXBWaWV3U3BlY2lmaWNFdmVudExpc3RlbmVycyhjb250YWluZXIsIGRhdGEpO1xyXG4gICAgXHJcbiAgICAvLyBBXHUwMEYxYWRpciBldmVudCBsaXN0ZW5lcnMgcGFyYSBsb3MgZFx1MDBFRGFzIGRlbCBtaW5pIGNhbGVuZGFyaW9cclxuICAgIGNvbnN0IG1pbmlEYXlzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYWxlbmRhci1taW5pLWRheScpO1xyXG4gICAgbWluaURheXMuZm9yRWFjaChkYXkgPT4ge1xyXG4gICAgICBkYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGVTdHIgPSBkYXkuZ2V0QXR0cmlidXRlKCdkYXRhLWRhdGUnKTtcclxuICAgICAgICBpZiAoZGF0ZVN0cikge1xyXG4gICAgICAgICAgLy8gQ2FtYmlhciBhIGxhIGZlY2hhIHNlbGVjY2lvbmFkYVxyXG4gICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IERhdGVUaW1lLmZyb21JU08oZGF0ZVN0cik7XHJcbiAgICAgICAgICAvLyBBY3R1YWxpemFyIHRhbWJpXHUwMEU5biBlbCBtZXMgZGVsIG1pbmkgY2FsZW5kYXJpb1xyXG4gICAgICAgICAgdGhpcy5taW5pQ2FsZW5kYXJNb250aCA9IHRoaXMuY3VycmVudERhdGU7XHJcbiAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBBXHUwMEYxYWRpciBldmVudCBsaXN0ZW5lcnMgcGFyYSBsb3MgYm90b25lcyBkZSBuYXZlZ2FjaVx1MDBGM24gZGVsIG1pbmkgY2FsZW5kYXJpb1xyXG4gICAgY29uc3QgbWluaVByZXZCdXR0b24gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLm1pbmktY2FsZW5kYXItcHJldicpO1xyXG4gICAgY29uc3QgbWluaU5leHRCdXR0b24gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLm1pbmktY2FsZW5kYXItbmV4dCcpO1xyXG4gICAgXHJcbiAgICBpZiAobWluaVByZXZCdXR0b24pIHtcclxuICAgICAgbWluaVByZXZCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvUHJldmlvdXNNb250aCgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKG1pbmlOZXh0QnV0dG9uKSB7XHJcbiAgICAgIG1pbmlOZXh0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubmF2aWdhdGVUb05leHRNb250aCgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIG9uQ2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBMaW1waWFyIGV2ZW50IGxpc3RlbmVycyBlc3BlY1x1MDBFRGZpY29zXHJcbiAgICAvL3RoaXMuY29udGVudEVsLm9mZignY2xpY2snLCAnLmNhbGVuZGFyLW1pbmktZGF5Jyk7XHJcbiAgfVxyXG59IiwgImltcG9ydCB7IFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3IH0gZnJvbSBcIi4vY2FsZW5kYXItdmlld1wiO1xyXG5pbXBvcnQgeyBUYXNrTWFuYWdlciB9IGZyb20gXCIuLi9jb3JlL3Rhc2stbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBJVGFzayB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBJMThuIH0gZnJvbSAnLi4vY29yZS9pMThuJztcclxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XHJcbmltcG9ydCB7IENhbGVuZGFyVmlld1R5cGUgfSBmcm9tIFwiLi4vdHlwZXMvZW51bXNcIjtcclxuaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSAnaGFuZGxlYmFycyc7XHJcblxyXG5leHBvcnQgY29uc3QgQ0FMRU5EQVJfV09SS19XRUVLX1ZJRVdfVFlQRSA9IFwiY2FsZW5kYXItd29ya3dlZWstdmlld1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyV29ya1dlZWtWaWV3IGV4dGVuZHMgQ2FsZW5kYXJWaWV3IHtcclxuXHJcbiAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGx1Z2luOiBhbnksIGkxOG46IEkxOG4sIHRhc2tNYW5hZ2VyOiBUYXNrTWFuYWdlcikge1xyXG4gICAgc3VwZXIobGVhZiwgcGx1Z2luLCBpMThuLCB0YXNrTWFuYWdlcik7XHJcblxyXG4gIH1cclxuXHJcbiAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBDQUxFTkRBUl9XT1JLX1dFRUtfVklFV19UWVBFO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmkxOG4udChcIndlZWtfdmlld190aXRsZVwiKTtcclxuICB9XHJcblxyXG4gIGdldEljb24oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAnY2FsZW5kYXItY2hlY2snO1xyXG4gIH1cclxuXHJcbiAvKipcclxuICAgKiBHZW5lcmEgZGF0b3MgcGFyYSBsYSB2aXN0YSBtZW5zdWFsIGRlbCBjYWxlbmRhcmlvXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdlbmVyYXRlVmlld0RhdGEoKTogYW55IHtcclxuICAgIC8vIE9idGVuZXIgbGEgZmVjaGEgYWN0dWFsXHJcbiAgICBjb25zdCBjdXJyZW50RGF0ZSA9IHRoaXMuY3VycmVudERhdGU7XHJcbiAgICBcclxuICAgIC8vIENhbGN1bGFyIGVsIGx1bmVzIGRlIGxhIHNlbWFuYSBhY3R1YWwgZGUgbWFuZXJhIGV4cGxcdTAwRURjaXRhXHJcbiAgICBjb25zdCBjdXJyZW50V2Vla2RheSA9IGN1cnJlbnREYXRlLndlZWtkYXk7IC8vIDE9bHVuZXMsIDc9ZG9taW5nb1xyXG4gICAgY29uc3QgZGF5c1RvUHJldmlvdXNNb25kYXkgPSAoY3VycmVudFdlZWtkYXkgPT09IDEpID8gMCA6IChjdXJyZW50V2Vla2RheSA9PT0gNykgPyA2IDogY3VycmVudFdlZWtkYXkgLSAxO1xyXG4gICAgY29uc3QgbW9uZGF5T2ZXZWVrID0gY3VycmVudERhdGUubWludXMoeyBkYXlzOiBkYXlzVG9QcmV2aW91c01vbmRheSB9KTtcclxuICAgIFxyXG4gICAgLy8gVXNhciBlc3RlIGx1bmVzIGNvbW8gZmVjaGEgZGUgaW5pY2lvXHJcbiAgICBjb25zdCB3ZWVrU3RhcnREYXRlID0gbW9uZGF5T2ZXZWVrO1xyXG4gICAgICAgXHJcbiAgICBjb25zdCBkYXlzVG9HZW5lcmF0ZSA9ICA1O1xyXG5cclxuICAgIC8vIE9idGVuZXIgbG9zIG5vbWJyZXMgZGUgbG9zIGRcdTAwRURhcyBsb2NhbGl6YWRvc1xyXG4gICAgY29uc3QgbG9jYWxpemVkRGF5TmFtZXMgPSB0aGlzLmdldExvY2FsaXplZERheU5hbWVzKCk7XHJcbiAgICBcclxuICAgIC8vIERlZmluZSBhIHR5cGUgZm9yIGRheSBkYXRhXHJcbiAgICB0eXBlIFdlZWtEYXlEYXRhID0ge1xyXG4gICAgICBkYXRlOiBEYXRlVGltZTtcclxuICAgICAgaXNUb2RheTogYm9vbGVhbjtcclxuICAgICAgZGF5T2ZNb250aDogbnVtYmVyO1xyXG4gICAgICBkYXlPZldlZWs6IG51bWJlcjtcclxuICAgICAgZGF5TmFtZTogc3RyaW5nO1xyXG4gICAgICBmb3JtYXR0ZWREYXRlOiBzdHJpbmc7XHJcbiAgICAgIHRhc2tzRm9yRGF5OiBJVGFza1tdO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gUHJlcGFyYSBsb3MgZGF0b3MgZGUgbG9zIGRcdTAwRURhc1xyXG4gICAgY29uc3QgZGF5czogV2Vla0RheURhdGFbXSA9IFtdO1xyXG4gICAgbGV0IGN1cnJlbnREYXkgPSB3ZWVrU3RhcnREYXRlO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRheXNUb0dlbmVyYXRlOyBpKyspIHtcclxuICAgICAgY29uc3QgZGF5VGFza3MgPSB0aGlzLmdldFRhc2tzRm9yRGF0ZShjdXJyZW50RGF5KTtcclxuICAgICAgY29uc3QgZGF5SW5kZXggPSBjdXJyZW50RGF5LndlZWtkYXkgJSA3O1xyXG4gICAgICBcclxuICAgICAgZGF5cy5wdXNoKHtcclxuICAgICAgICBkYXRlOiBjdXJyZW50RGF5LFxyXG4gICAgICAgIGlzVG9kYXk6IGN1cnJlbnREYXkuaGFzU2FtZShEYXRlVGltZS5ub3coKSwgJ2RheScpLFxyXG4gICAgICAgIGRheU9mTW9udGg6IGN1cnJlbnREYXkuZGF5LFxyXG4gICAgICAgIGRheU9mV2VlazogY3VycmVudERheS53ZWVrZGF5LFxyXG4gICAgICAgIGRheU5hbWU6IGxvY2FsaXplZERheU5hbWVzW2RheUluZGV4XSxcclxuICAgICAgICBmb3JtYXR0ZWREYXRlOiBgJHtsb2NhbGl6ZWREYXlOYW1lc1tkYXlJbmRleF19ICR7Y3VycmVudERheS5kYXl9YCxcclxuICAgICAgICB0YXNrc0ZvckRheTogZGF5VGFza3NcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBjdXJyZW50RGF5ID0gY3VycmVudERheS5wbHVzKHsgZGF5czogMSB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2FsY3VsYXIgZWwgbm9tYnJlIGRlbCBwZXJpb2RvIChyYW5nbyBkZSBmZWNoYXMpXHJcbiAgICBjb25zdCB3ZWVrRW5kID0gd2Vla1N0YXJ0RGF0ZS5wbHVzKHsgZGF5czogZGF5c1RvR2VuZXJhdGUgLSAxIH0pO1xyXG4gICAgY29uc3QgcGVyaW9kTmFtZSA9IGAke3dlZWtTdGFydERhdGUudG9Gb3JtYXQoJ01NTSBkJyl9IC0gJHt3ZWVrRW5kLnRvRm9ybWF0KCdNTU0gZCwgeXl5eScpfWA7XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZpZXdUeXBlOiAgQ2FsZW5kYXJWaWV3VHlwZS5Xb3JrV2VlayAsXHJcbiAgICAgIHdlZWtOdW1iZXI6IHdlZWtTdGFydERhdGUud2Vla051bWJlcixcclxuICAgICAgZGF5czogZGF5cyxcclxuICAgICAgZGF5TmFtZXM6IGxvY2FsaXplZERheU5hbWVzLCAvLyBTb2xvIGx1bmVzIGEgdmllcm5lc1xyXG4gICAgICBwZXJpb2ROYW1lOiBwZXJpb2ROYW1lXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG5hdmlnYXRlVG9QcmV2aW91cygpOiB2b2lkIHtcclxuICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLmN1cnJlbnREYXRlLm1pbnVzKHsgd2Vla3M6IDEgfSk7XHJcbiAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbmF2aWdhdGVUb05leHQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5jdXJyZW50RGF0ZS5wbHVzKHsgd2Vla3M6IDEgfSk7XHJcbiAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAqIFNvYnJlc2NyaWJlIGVsIG1cdTAwRTl0b2RvIGRlIENhbGVuZGFyVmlldyBwYXJhIGltcGxlbWVudGFyIGV2ZW50IGxpc3RlbmVycyBlc3BlY1x1MDBFRGZpY29zXHJcbiAgICogQHBhcmFtIGNvbnRhaW5lciBDb250ZW5lZG9yIGRvbmRlIHNlIGFwbGljYW4gbG9zIGxpc3RlbmVyc1xyXG4gICAqIEBwYXJhbSBkYXRhIERhdG9zIHV0aWxpemFkb3MgcGFyYSByZW5kZXJpemFyIGxhIHZpc3RhXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHNldHVwVmlld1NwZWNpZmljRXZlbnRMaXN0ZW5lcnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgZGF0YTogYW55KTogdm9pZCB7XHJcbiAgICAvLyBQcmltZXJvIGVqZWN1dGEgbG9zIGV2ZW50IGxpc3RlbmVycyBjb211bmVzXHJcbiAgICBzdXBlci5zZXR1cFZpZXdTcGVjaWZpY0V2ZW50TGlzdGVuZXJzKGNvbnRhaW5lciwgZGF0YSk7XHJcbiAgICBcclxuICAgIC8vIEFcdTAwRjFhZGlyIG1hbmVqbyBkZWwgc2VsZWN0b3IgZGUgZXN0aWxvIGRlIGN1YWRyXHUwMEVEY3VsYVxyXG4gICAgY29uc3QgZ3JpZFN0eWxlU2VsZWN0b3IgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI2NhbGVuZGFyLWdyaWQtc3R5bGUnKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuICAgIFxyXG4gICAgaWYgKGdyaWRTdHlsZVNlbGVjdG9yKSB7XHJcbiAgICAgIC8vIE1hbmVqYXIgY2FtYmlvcyBlbiBlbCBzZWxlY3RvclxyXG4gICAgICBncmlkU3R5bGVTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRTdHlsZSA9IGdyaWRTdHlsZVNlbGVjdG9yLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IHdlZWtEYXlzUm93ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5jYWxlbmRhci13ZWVrLWRheXMtcm93Jyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHdlZWtEYXlzUm93KSB7XHJcbiAgICAgICAgICAvLyBFbGltaW5hciBjbGFzZXMgZGUgZXN0aWxvIGFudGVyaW9yZXNcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDExOyBpKyspIHtcclxuICAgICAgICAgICAgd2Vla0RheXNSb3cuY2xhc3NMaXN0LnJlbW92ZShgc3R5bGUke2l9YCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIEFwbGljYXIgbnVldm8gZXN0aWxvIHNpIG5vIGVzIGVsIHByZWRldGVybWluYWRvXHJcbiAgICAgICAgICBpZiAoc2VsZWN0ZWRTdHlsZSAhPT0gJ2RlZmF1bHQnKSB7XHJcbiAgICAgICAgICAgIHdlZWtEYXlzUm93LmNsYXNzTGlzdC5hZGQoc2VsZWN0ZWRTdHlsZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIEd1YXJkYXIgbGEgcHJlZmVyZW5jaWEgZGVsIHVzdWFyaW8gcGFyYSBsYSB2aXN0YSB3b3Jrd2Vla1xyXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NhbGVuZGFyLXdvcmt3ZWVrLWdyaWQtc3R5bGUnLCBzZWxlY3RlZFN0eWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gUmVzdGF1cmFyIHByZWZlcmVuY2lhIGd1YXJkYWRhIGFsIGNhcmdhciBsYSB2aXN0YVxyXG4gICAgICBjb25zdCBzYXZlZFN0eWxlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NhbGVuZGFyLXdvcmt3ZWVrLWdyaWQtc3R5bGUnKTtcclxuICAgICAgaWYgKHNhdmVkU3R5bGUpIHtcclxuICAgICAgICBncmlkU3R5bGVTZWxlY3Rvci52YWx1ZSA9IHNhdmVkU3R5bGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gRGlzcGFyYXIgZWwgZXZlbnRvIGNoYW5nZSBtYW51YWxtZW50ZSBwYXJhIGFwbGljYXIgZWwgZXN0aWxvXHJcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ2NoYW5nZScpO1xyXG4gICAgICAgIGdyaWRTdHlsZVNlbGVjdG9yLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEFncmVnYXIgbGlzdGVuZXJzIHBhcmEgaW50ZXJhY2NpXHUwMEYzbiBjb24gdGFyZWFzXHJcbiAgICB0aGlzLnNldHVwVGFza0ludGVyYWN0aW9uTGlzdGVuZXJzKGNvbnRhaW5lcik7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIENvbmZpZ3VyYSBsb3MgbGlzdGVuZXJzIHBhcmEgaW50ZXJhY2NpXHUwMEYzbiBjb24gdGFyZWFzXHJcbiAgICogQHBhcmFtIGNvbnRhaW5lciBDb250ZW5lZG9yIGRvbmRlIHNlIGFwbGljYW4gbG9zIGxpc3RlbmVyc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0dXBUYXNrSW50ZXJhY3Rpb25MaXN0ZW5lcnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29uc3QgdGFza0VsZW1lbnRzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYWxlbmRhci10YXNrJyk7XHJcbiAgICBcclxuICAgIHRhc2tFbGVtZW50cy5mb3JFYWNoKHRhc2tFbCA9PiB7XHJcbiAgICAgIHRhc2tFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gT2J0ZW5lciBpbmZvcm1hY2lcdTAwRjNuIGRlIGxhIHRhcmVhXHJcbiAgICAgICAgY29uc3QgZmlsZVBhdGggPSB0YXJnZXQuZGF0YXNldC5maWxlUGF0aDtcclxuICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gcGFyc2VJbnQodGFyZ2V0LmRhdGFzZXQubGluZU51bWJlciB8fCAnMCcsIDEwKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoZmlsZVBhdGgpIHtcclxuICAgICAgICAgIC8vIEFicmlyIGVsIGFyY2hpdm8gZW4gbGEgbFx1MDBFRG5lYSBkb25kZSBlc3RcdTAwRTEgbGEgdGFyZWFcclxuICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KGZpbGVQYXRoLCAnJywgZmFsc2UsIHsgbGluZTogbGluZU51bWJlciB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBvbkNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgLy8gTGltcGlhIHJlY3Vyc29zIHNpIGVzIG5lY2VzYXJpb1xyXG4gIH1cclxufSIsICJpbXBvcnQgeyBBcHAsIEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBCYXNlVmlldyB9IGZyb20gJy4uL3ZpZXdzL2Jhc2Utdmlldyc7IFxyXG5pbXBvcnQgeyBUYXNrTWFuYWdlciB9IGZyb20gJy4uL2NvcmUvdGFzay1tYW5hZ2VyJztcclxuaW1wb3J0IHsgSVRhc2sgfSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgSTE4biB9IGZyb20gJy4uL2NvcmUvaTE4bic7XHJcbmltcG9ydCBIYW5kbGViYXJzIGZyb20gJ2hhbmRsZWJhcnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IExJU1RfVklFV19UWVBFID0gJ2xpc3Qtdmlldyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdFZpZXcgZXh0ZW5kcyBCYXNlVmlldyB7XHJcbiAgcHJpdmF0ZSB0YXNrczogSVRhc2tbXSA9IFtdOyAvLyBMaXN0YSBkZSB0YXJlYXNcclxuICBwcml2YXRlIGlzSGllcmFyY2hpY2FsVmlldzogYm9vbGVhbiA9IHRydWU7IC8vIE1vZG8gcHJlZGV0ZXJtaW5hZG86IGplclx1MDBFMXJxdWljb1xyXG5cclxuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwcml2YXRlIHBsdWdpbjogYW55LCBwcml2YXRlIGkxOG46IEkxOG4sIHByaXZhdGUgdGFza01hbmFnZXI6IFRhc2tNYW5hZ2VyKSB7XHJcbiAgICAvLyBDb25zdHJ1Y3RvciBkZSBsYSBjbGFzZSBMaXN0Vmlld1xyXG4gICAgc3VwZXIobGVhZik7ICAgIFxyXG4gICAgdGhpcy5pMThuID0gaTE4bjtcclxuICB9XHJcblxyXG4gIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gTElTVF9WSUVXX1RZUEU7XHJcbiAgfVxyXG5cclxuICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuaTE4bi50KFwibGlzdF92aWV3X3RpdGxlXCIpOyAvLyBUXHUwMEVEdHVsbyBkZSBsYSB2aXN0YSBsaXN0YVxyXG4gIH1cclxuXHJcbiAgZ2V0SWNvbigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdjYWxlbmRhci1jaGVjayc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbHRlcm5hciBlbnRyZSB2aXN0YSBqZXJcdTAwRTFycXVpY2EgeSBwbGFuYVxyXG4gICAqL1xyXG4gIHByaXZhdGUgdG9nZ2xlVmlld01vZGUoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzSGllcmFyY2hpY2FsVmlldyA9ICF0aGlzLmlzSGllcmFyY2hpY2FsVmlldztcclxuICAgIHRoaXMub25PcGVuKCk7IC8vIFJlY2FyZ2FyIGxhIHZpc3RhIGNvbiBlbCBudWV2byBtb2RvXHJcbiAgfVxyXG5cclxuICBhc3luYyBvbk9wZW4oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLnRhc2tzID0gYXdhaXQgdGhpcy5nZXRBbGxUYXNrcyh0aGlzLnRhc2tNYW5hZ2VyKTsgLy8gQ2FyZ2FyIHRhcmVhc1xyXG5cclxuICAgIC8vIFNpZW1wcmUgY3JlYXIgbGEgZXN0cnVjdHVyYSBqZXJcdTAwRTFycXVpY2FcclxuICAgIGNvbnN0IGhpZXJhcmNoaWNhbFRhc2tzID0gdGhpcy5ncm91cFRhc2tzQnlGb2xkZXIodGhpcy50YXNrcyk7XHJcbiAgICBcclxuICAgIC8vIENyZWFyIGVzdHJ1Y3R1cmEgcGxhbmEgc2kgZXMgbmVjZXNhcmlvXHJcbiAgICBjb25zdCBmbGF0dGVuZWRUYXNrcyA9IHRoaXMuaXNIaWVyYXJjaGljYWxWaWV3ID8gbnVsbCA6IHRoaXMuZmxhdHRlblRhc2tIaWVyYXJjaHkoaGllcmFyY2hpY2FsVGFza3MpO1xyXG4gICAgXHJcbiAgICAvLyBSZW5kZXJpemFyIGNvbiBhbWJhcyBlc3RydWN0dXJhcyBkaXNwb25pYmxlc1xyXG4gICAgYXdhaXQgdGhpcy5yZW5kZXIoTElTVF9WSUVXX1RZUEUsIHsgXHJcbiAgICAgIHRhc2tzOiB0aGlzLnRhc2tzLCBcclxuICAgICAgZ3JvdXBlZFRhc2tzOiBoaWVyYXJjaGljYWxUYXNrcyxcclxuICAgICAgZmxhdHRlbmVkVGFza3M6IGZsYXR0ZW5lZFRhc2tzLFxyXG4gICAgICBpc0hpZXJhcmNoaWNhbFZpZXc6IHRoaXMuaXNIaWVyYXJjaGljYWxWaWV3XHJcbiAgICB9LCB0aGlzLmkxOG4sIHRoaXMucGx1Z2luLCB0aGlzLmxlYWYpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHJlZ2lzdGVyVmlld1NwZWNpZmljSGVscGVycyhpMThuOiBhbnkpOiB2b2lkIHtcclxuICAgIC8vIEhlbHBlciBwYXJhIGNhbGN1bGFyIGVsIG5cdTAwRkFtZXJvIHRvdGFsIGRlIHRhcmVhcywgaW5jbHV5ZW5kbyBzdWJjYXJwZXRhc1xyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcInRvdGFsVGFza0NvdW50XCIsIGZ1bmN0aW9uKGZvbGRlcikge1xyXG4gICAgICBpZiAoIWZvbGRlcikgcmV0dXJuIDA7XHJcbiAgICAgIFxyXG4gICAgICAvLyBGdW5jaVx1MDBGM24gcmVjdXJzaXZhIHBhcmEgY29udGFyIHRhcmVhc1xyXG4gICAgICBmdW5jdGlvbiBjb3VudEFsbFRhc2tzKGZvbGRlck5vZGUpIHtcclxuICAgICAgICAvLyBDb250YXIgdGFyZWFzIGRpcmVjdGFzXHJcbiAgICAgICAgbGV0IGNvdW50ID0gZm9sZGVyTm9kZS50YXNrcyA/IGZvbGRlck5vZGUudGFza3MubGVuZ3RoIDogMDtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDb250YXIgdGFyZWFzIGVuIHN1YmNhcnBldGFzXHJcbiAgICAgICAgaWYgKGZvbGRlck5vZGUuc3ViZm9sZGVycykge1xyXG4gICAgICAgICAgT2JqZWN0LnZhbHVlcyhmb2xkZXJOb2RlLnN1YmZvbGRlcnMpLmZvckVhY2goc3ViZm9sZGVyID0+IHtcclxuICAgICAgICAgICAgY291bnQgKz0gY291bnRBbGxUYXNrcyhzdWJmb2xkZXIpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBjb3VudDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGNvdW50QWxsVGFza3MoZm9sZGVyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEhlbHBlciBwYXJhIHJlY29ycmVyIHJlY3Vyc2l2YW1lbnRlIGxhIGVzdHJ1Y3R1cmEgZGUgY2FycGV0YXNcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJyZW5kZXJGb2xkZXJIaWVyYXJjaHlcIiwgZnVuY3Rpb24oZm9sZGVyLCBvcHRpb25zKSB7XHJcbiAgICAgIGxldCBvdXRwdXQgPSAnJztcclxuICAgICAgaWYgKCFmb2xkZXIpIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgIFxyXG4gICAgICAvLyBSZW5kZXJpemFyIHRhcmVhcyBkaXJlY3RhcyBkZSBlc3RhIGNhcnBldGFcclxuICAgICAgaWYgKGZvbGRlci50YXNrcyAmJiBmb2xkZXIudGFza3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIG91dHB1dCArPSBvcHRpb25zLmZuKHsgZm9sZGVyTmFtZTogZm9sZGVyLm5hbWUsIGZ1bGxQYXRoOiBmb2xkZXIuZnVsbFBhdGgsIHRhc2tzOiBmb2xkZXIudGFza3MsIGxldmVsOiAwIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBSZWNvcnJlciBzdWJjYXJwZXRhcyByZWN1cnNpdmFtZW50ZVxyXG4gICAgICBpZiAoZm9sZGVyLnN1YmZvbGRlcnMpIHtcclxuICAgICAgICBPYmplY3QudmFsdWVzKGZvbGRlci5zdWJmb2xkZXJzKS5mb3JFYWNoKHN1YmZvbGRlciA9PiB7XHJcbiAgICAgICAgICBvdXRwdXQgKz0gSGFuZGxlYmFycy5oZWxwZXJzLnJlbmRlckZvbGRlckhpZXJhcmNoeShzdWJmb2xkZXIsIG9wdGlvbnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gbmV3IEhhbmRsZWJhcnMuU2FmZVN0cmluZyhvdXRwdXQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTb2JyZXNjcmliZSBlbCBtXHUwMEU5dG9kbyBkZSBCYXNlVmlldyBwYXJhIGltcGxlbWVudGFyIGV2ZW50IGxpc3RlbmVycyBlc3BlY1x1MDBFRGZpY29zIGRlIExpc3RWaWV3XHJcbiAgICogQHBhcmFtIGNvbnRhaW5lciBDb250ZW5lZG9yIGRvbmRlIHNlIGFwbGljYW4gbG9zIGxpc3RlbmVyc1xyXG4gICAqIEBwYXJhbSBkYXRhIERhdG9zIHV0aWxpemFkb3MgcGFyYSByZW5kZXJpemFyIGxhIHZpc3RhXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHNldHVwVmlld1NwZWNpZmljRXZlbnRMaXN0ZW5lcnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgZGF0YTogYW55KTogdm9pZCB7XHJcbiAgICAvLyBJbXBsZW1lbnRhciBsb3MgbGlzdGVuZXJzIGVzcGVjXHUwMEVEZmljb3MgZGUgTGlzdFZpZXdcclxuICAgIGNvbnN0IHZpZXdUb2dnbGVCdXR0b24gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnZpZXctdG9nZ2xlLWJ1dHRvbicpO1xyXG4gICAgaWYgKHZpZXdUb2dnbGVCdXR0b24pIHtcclxuICAgICAgdmlld1RvZ2dsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB0aGlzLnRvZ2dsZVZpZXdNb2RlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDEuIEV2ZW50b3MgcGFyYSBjYXJwZXRhcyAoaWd1YWwgcXVlIGVuIEJhc2VWaWV3KVxyXG4gICAgdGhpcy5hZGRGb2xkZXJUb2dnbGVMaXN0ZW5lcnMoY29udGFpbmVyKTtcclxuXHJcbiAgICAvLyAyLiBFdmVudG9zIHBhcmEgdGFyZWFzIChwZXJzb25hbGl6YWRvIHBhcmEgTGlzdFZpZXcpXHJcbiAgICBjb25zdCB0YXNrSXRlbXMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnRhc2staXRlbScpO1xyXG5cclxuICAgIHRhc2tJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAvLyBBXHUwMEYxYWRpciBpbmRpY2Fkb3IgdmlzdWFsXHJcbiAgICAgIGl0ZW0uYWRkQ2xhc3MoJ2NsaWNrYWJsZScpO1xyXG5cclxuICAgICAgLy8gRXZlbnRvIGRlIGRvYmxlIGNsaWMgcGFyYSBhYnJpciBlbCBhcmNoaXZvXHJcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtcGF0aCcpO1xyXG4gICAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1saW5lLW51bWJlcicpO1xyXG5cclxuICAgICAgICBpZiAoZmlsZVBhdGgpIHtcclxuICAgICAgICAgIHRoaXMub3BlblRhc2tGaWxlKGZpbGVQYXRoLCBsaW5lTnVtYmVyID8gcGFyc2VJbnQobGluZU51bWJlcikgOiB1bmRlZmluZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBFdmVudG8gQURJQ0lPTkFMIHBhcmEgTGlzdFZpZXcgLSBjbGljIHNpbXBsZSBwYXJhIHNlbGVjY2lvbmFyXHJcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAvLyBSZW1vdmVyIHNlbGVjY2lcdTAwRjNuIHByZXZpYVxyXG4gICAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudGFzay1pdGVtLnNlbGVjdGVkJykuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgICBlbC5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gTWFyY2FyIGNvbW8gc2VsZWNjaW9uYWRhXHJcbiAgICAgICAgaXRlbS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYSB1bmEgZXN0cnVjdHVyYSBwbGFuYSBhZ3J1cGFuZG8gdG9kYXMgbGFzIHRhcmVhcyBwb3IgY2FycGV0YSBwcmluY2lwYWxcclxuICAgKiBAcGFyYW0gZ3JvdXBlZFRhc2tzIEVzdHJ1Y3R1cmEgamVyXHUwMEUxcnF1aWNhIGRlIHRhcmVhc1xyXG4gICAqIEByZXR1cm5zIEVzdHJ1Y3R1cmEgcGxhbmEgY29uIHRhcmVhcyBhZ3J1cGFkYXMgc29sbyBwb3IgY2FycGV0YSBwcmluY2lwYWxcclxuICAgKi9cclxuICBwcml2YXRlIGZsYXR0ZW5UYXNrSGllcmFyY2h5KGdyb3VwZWRUYXNrczogYW55KTogYW55IHtcclxuICAgIGNvbnN0IGZsYXR0ZW5lZFN0cnVjdHVyZTogYW55ID0ge307XHJcbiAgICBcclxuICAgIC8vIEZ1bmNpXHUwMEYzbiByZWN1cnNpdmEgcGFyYSByZWNvcnJlciBsYSBlc3RydWN0dXJhIGplclx1MDBFMXJxdWljYVxyXG4gICAgY29uc3QgcHJvY2Vzc0ZvbGRlclJlY3Vyc2l2ZSA9IChmb2xkZXI6IGFueSwgcGFyZW50Rm9sZGVyPzogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJvb3RGb2xkZXIgPSBwYXJlbnRGb2xkZXIgfHwgZm9sZGVyLm5hbWUgfHwgJ1NpbiBjYXJwZXRhJztcclxuICAgICAgXHJcbiAgICAgIC8vIEluaWNpYWxpemFyIGxhIGNhcnBldGEgcmFcdTAwRUR6IHNpIG5vIGV4aXN0ZVxyXG4gICAgICBpZiAoIWZsYXR0ZW5lZFN0cnVjdHVyZVtyb290Rm9sZGVyXSkge1xyXG4gICAgICAgIGZsYXR0ZW5lZFN0cnVjdHVyZVtyb290Rm9sZGVyXSA9IHtcclxuICAgICAgICAgIHRhc2tzOiBbXSxcclxuICAgICAgICAgIG5hbWU6IHJvb3RGb2xkZXIsXHJcbiAgICAgICAgICBmdWxsUGF0aDogcm9vdEZvbGRlclxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEFcdTAwRjFhZGlyIHRhcmVhcyBkaXJlY3RhcyBkZSBlc3RhIGNhcnBldGEgYSBsYSBjYXJwZXRhIHJhXHUwMEVEelxyXG4gICAgICBpZiAoZm9sZGVyLnRhc2tzICYmIGZvbGRlci50YXNrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZmxhdHRlbmVkU3RydWN0dXJlW3Jvb3RGb2xkZXJdLnRhc2tzLnB1c2goLi4uZm9sZGVyLnRhc2tzKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gUHJvY2VzYXIgc3ViY2FycGV0YXMgcmVjdXJzaXZhbWVudGVcclxuICAgICAgaWYgKGZvbGRlci5zdWJmb2xkZXJzKSB7XHJcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhmb2xkZXIuc3ViZm9sZGVycykuZm9yRWFjaCgoc3ViZm9sZGVyOiBhbnkpID0+IHtcclxuICAgICAgICAgIHByb2Nlc3NGb2xkZXJSZWN1cnNpdmUoc3ViZm9sZGVyLCByb290Rm9sZGVyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gSW5pY2lhciBlbCBwcm9jZXNvIHBhcmEgY2FkYSBjYXJwZXRhIGRlIG5pdmVsIHN1cGVyaW9yXHJcbiAgICBPYmplY3QudmFsdWVzKGdyb3VwZWRUYXNrcykuZm9yRWFjaChmb2xkZXIgPT4ge1xyXG4gICAgICBwcm9jZXNzRm9sZGVyUmVjdXJzaXZlKGZvbGRlciBhcyBhbnkpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiBmbGF0dGVuZWRTdHJ1Y3R1cmU7XHJcbiAgfVxyXG5cclxuICBhc3luYyBvbkNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgLy8gTGltcGlhIHJlY3Vyc29zIHNpIGVzIG5lY2VzYXJpb1xyXG4gIH1cclxufSIsICJpbXBvcnQgeyBBcHAsIFRGaWxlLCBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgSVRhc2ssIFRhc2tGaWx0ZXJDcml0ZXJpYSwgU29ydEZpZWxkLCBHcm91cEZpZWxkIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXNcIjtcclxuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXJcIjtcclxuaW1wb3J0IHsgVGFza1NlY3Rpb24gfSBmcm9tIFwiLi4vZW50aXRpZXMvdGFzay1zZWN0aW9uXCI7XHJcbmltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi4vZW50aXRpZXMvdGFza1wiO1xyXG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcIi4vaTE4blwiO1xyXG5pbXBvcnQgeyBFdmVudEJ1cywgRVZFTlRTIH0gZnJvbSBcIi4vZXZlbnQtYnVzXCI7XHJcbmltcG9ydCB7IENvcmVUYXNrU3RhdHVzLCBDb3JlVGFza1N0YXR1c0ljb24gfSBmcm9tIFwiLi4vdHlwZXMvZW51bXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUYXNrTWFuYWdlciB7XHJcbiAgcHJpdmF0ZSB0YXNrc0NhY2hlOiBNYXA8c3RyaW5nLCBJVGFza1tdPiA9IG5ldyBNYXAoKTsgLy8gQ2FjaGUgcG9yIGFyY2hpdm9cclxuICBwcml2YXRlIGFsbFRhc2tzQ2FjaGU6IElUYXNrW10gfCBudWxsID0gbnVsbDsgLy8gQ2FjaGUgZ2xvYmFsIGRlIHRvZGFzIGxhcyB0YXJlYXNcclxuICBwcml2YXRlIGxhc3RSZWZyZXNoVGltZTogbnVtYmVyID0gMDtcclxuICBwcml2YXRlIHJlYWRvbmx5IENBQ0hFX1RUTCA9IDMwMDAwMDsgLy8gNSBtaW51dG9zIChhanVzdGFibGUpXHJcbiAgcHJpdmF0ZSByZWZyZXNoSW5Qcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByaXZhdGUgcmVmcmVzaFByb21pc2U6IFByb21pc2U8SVRhc2tbXT4gfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cztcclxuICBwcml2YXRlIHJlZ2lzdGVyZWRFdmVudHM6IGFueVtdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwOiBBcHAsIHByaXZhdGUgaTE4bjogSTE4biwgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbikge1xyXG4gICAgdGhpcy5ldmVudEJ1cyA9IEV2ZW50QnVzLmdldEluc3RhbmNlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIENvbmZpZ3VyYSBsb3MgZXNjdWNoYWRvcmVzIGRlIGV2ZW50b3MgdXNhbmRvIHJlZ2lzdGVyRXZlbnRcclxuICAqIHBhcmEgdW5hIGxpbXBpZXphIGF1dG9tXHUwMEUxdGljYSBjdWFuZG8gZWwgcGx1Z2luIHNlIGRlc2NhcmdhXHJcbiAgKi9cclxuICBwdWJsaWMgcmVnaXN0ZXJFdmVudHMocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcclxuICAgIC8vIEVzY3VjaGFyIG1vZGlmaWNhY2lvbmVzIGRlIGFyY2hpdm9zIE1hcmtkb3duXHJcbiAgICBjb25zb2xlLmxvZyhcIkVzY3VjaGFuZG8gZXZlbnRvcyBkZSBtb2RpZmljYWNpXHUwMEYzbiBkZSBhcmNoaXZvcyBNYXJrZG93blwiKTtcclxuICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5wbHVnaW4ucmVnaXN0ZXJFdmVudChcclxuICAgICAgdGhpcy5hcHAudmF1bHQub24oJ21vZGlmeScsIChmaWxlOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGZpbGUuZXh0ZW5zaW9uID09PSAnbWQnKSB7ICAgICAgICAgIFxyXG4gICAgICAgICAgdGhpcy5pbnZhbGlkYXRlRmlsZUNhY2hlKGZpbGUucGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLnJlZ2lzdGVyZWRFdmVudHMucHVzaChldmVudCk7XHJcblxyXG4gICAgLy8gRXNjdWNoYXIgY3JlYWNpXHUwMEYzbiBkZSBhcmNoaXZvcyBNYXJrZG93blxyXG4gICAgY29uc3QgY3JlYXRlRXZlbnQgPSB0aGlzLnBsdWdpbi5yZWdpc3RlckV2ZW50KFxyXG4gICAgICB0aGlzLmFwcC52YXVsdC5vbignY3JlYXRlJywgKGZpbGU6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcclxuICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZUNhY2hlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLnJlZ2lzdGVyZWRFdmVudHMucHVzaChjcmVhdGVFdmVudCk7XHJcblxyXG4gICAgLy8gRXNjdWNoYXIgZWxpbWluYWNpXHUwMEYzbiBkZSBhcmNoaXZvcyBNYXJrZG93blxyXG4gICAgY29uc3QgZGVsZXRlRXZlbnQgPSB0aGlzLnBsdWdpbi5yZWdpc3RlckV2ZW50KFxyXG4gICAgICB0aGlzLmFwcC52YXVsdC5vbignZGVsZXRlJywgKGZpbGU6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcclxuICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZUZpbGVDYWNoZShmaWxlLnBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5yZWdpc3RlcmVkRXZlbnRzLnB1c2goZGVsZXRlRXZlbnQpO1xyXG5cclxuICAgIC8vIEVzY3VjaGFyIHJlbm9tYnJhZG8gZGUgYXJjaGl2b3MgTWFya2Rvd25cclxuICAgIGNvbnN0IHJlbmFtZUV2ZW50ID0gdGhpcy5wbHVnaW4ucmVnaXN0ZXJFdmVudChcclxuICAgICAgdGhpcy5hcHAudmF1bHQub24oJ3JlbmFtZScsIChmaWxlOiBhbnksIG9sZFBhdGg6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcclxuICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZUZpbGVDYWNoZShvbGRQYXRoKTtcclxuICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZUZpbGVDYWNoZShmaWxlLnBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5yZWdpc3RlcmVkRXZlbnRzLnB1c2gocmVuYW1lRXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgdW5yZWdpc3RlckV2ZW50cygpOiB2b2lkIHtcclxuICAgIC8vIENcdTAwRjNkaWdvIHBhcmEgZWxpbWluYXIgbG9zIGV2ZW50b3MgcmVnaXN0cmFkb3NcclxuICAgIC8vIFBvciBlamVtcGxvOlxyXG4gICAgdGhpcy5yZWdpc3RlcmVkRXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xyXG4gICAgICBldmVudC51bnN1YnNjcmliZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnZhbGlkYSBlbCBjYWNoZSBkZSB1biBhcmNoaXZvIGVzcGVjXHUwMEVEZmljb1xyXG4gICAqL1xyXG4gIHB1YmxpYyBpbnZhbGlkYXRlRmlsZUNhY2hlKGZpbGVQYXRoOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMudGFza3NDYWNoZS5kZWxldGUoZmlsZVBhdGgpO1xyXG4gICAgdGhpcy5hbGxUYXNrc0NhY2hlID0gbnVsbDsgLy8gSW52YWxpZGFyIGNhY2hlIGdsb2JhbFxyXG4gICAgdGhpcy5ldmVudEJ1cy5lbWl0KEVWRU5UUy5UQVNLU19VUERBVEVELCBmaWxlUGF0aCk7XHJcbiAgICBsb2dnZXIuZGVidWcoYENhY2hlIGludmFsaWRhZG8gcGFyYTogJHtmaWxlUGF0aH1gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludmFsaWRhIHRvZG8gZWwgY2FjaGVcclxuICAgKi9cclxuICBwdWJsaWMgaW52YWxpZGF0ZUNhY2hlKCk6IHZvaWQgeyAgICBcclxuICAgIHRoaXMudGFza3NDYWNoZS5jbGVhcigpO1xyXG4gICAgdGhpcy5hbGxUYXNrc0NhY2hlID0gbnVsbDtcclxuICAgIHRoaXMubGFzdFJlZnJlc2hUaW1lID0gMDtcclxuICAgIHRoaXMuZXZlbnRCdXMuZW1pdChFVkVOVFMuVEFTS1NfVVBEQVRFRCk7XHJcbiAgICBsb2dnZXIuZGVidWcoXCJDYWNoZSBkZSB0YXJlYXMgY29tcGxldGFtZW50ZSBpbnZhbGlkYWRvXCIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTGltcGlhIHJlY3Vyc29zIGRlbCBUYXNrTWFuYWdlclxyXG4gICAqIFlhIG5vIG5lY2VzaXRhbW9zIGVsaW1pbmFyIG1hbnVhbG1lbnRlIGxvcyBldmVudG9zXHJcbiAgICogeWEgcXVlIHJlZ2lzdGVyRXZlbnQgc2UgZW5jYXJnYSBkZSBlc29cclxuICAgKi9cclxuICBwdWJsaWMgY2xlYW51cCgpOiB2b2lkIHtcclxuICAgIC8vIExpbXBpYXIgY2FjaGVzXHJcbiAgICBjb25zb2xlLmxvZyhcIkxpbXBpYW5kbyBUYXNrIE1hbmFnZXIuLi5cIik7XHJcbiAgICB0aGlzLmludmFsaWRhdGVDYWNoZSgpO1xyXG4gICAgbG9nZ2VyLmRlYnVnKFwiVGFzayBNYW5hZ2VyIGxpbXBpYWRvIGNvcnJlY3RhbWVudGVcIik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBY3R1YWxpemEgZWwgY2FjaGUgY29tcGxldG8gZGUgdGFyZWFzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyByZWZyZXNoQWxsVGFza3NDYWNoZSgpOiBQcm9taXNlPElUYXNrW10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG4gICAgICBjb25zdCBiYXRjaFNpemUgPSAxMDtcclxuICAgICAgY29uc3QgYWxsVGFza3M6IElUYXNrW10gPSBbXTtcclxuXHJcbiAgICAgIC8vIFByb2Nlc2FtaWVudG8gcG9yIGxvdGVzXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpICs9IGJhdGNoU2l6ZSkge1xyXG4gICAgICAgIGNvbnN0IGJhdGNoID0gZmlsZXMuc2xpY2UoaSwgaSArIGJhdGNoU2l6ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQXJyYXkgcGFyYSBhbG1hY2VuYXIgcHJvbWVzYXNcclxuICAgICAgICBjb25zdCBiYXRjaFByb21pc2VzID0gYmF0Y2gubWFwKGFzeW5jIGZpbGUgPT4ge1xyXG4gICAgICAgICAgLy8gUHJpbWVybyB2ZXJpZmljYXIgc2kgaGF5IHVuIGNhY2hlIHZcdTAwRTFsaWRvIHBhcmEgZXN0ZSBhcmNoaXZvXHJcbiAgICAgICAgICBpZiAodGhpcy50YXNrc0NhY2hlLmhhcyhmaWxlLnBhdGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhc2tzQ2FjaGUuZ2V0KGZpbGUucGF0aCkgfHwgW107XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIFNpIG5vIGhheSBjYWNoZSBwYXJhIGVsIGFyY2hpdm8sIGV4dHJhZXIgbGFzIHRhcmVhc1xyXG4gICAgICAgICAgY29uc3QgZmlsZVRhc2tzID0gYXdhaXQgdGhpcy5leHRyYWN0VGFza3NGcm9tQ29udGVudChmaWxlKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gQWN0dWFsaXphciBlbCBjYWNoZSBwYXJhIGVzdGUgYXJjaGl2b1xyXG4gICAgICAgICAgdGhpcy50YXNrc0NhY2hlLnNldChmaWxlLnBhdGgsIGZpbGVUYXNrcyk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBmaWxlVGFza3M7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgYmF0Y2hSZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYmF0Y2hQcm9taXNlcyk7XHJcbiAgICAgICAgYmF0Y2hSZXN1bHRzLmZvckVhY2goZmlsZVRhc2tzID0+IHtcclxuICAgICAgICAgIGFsbFRhc2tzLnB1c2goLi4uZmlsZVRhc2tzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbG9nZ2VyLmRlYnVnKGBUYXJlYXMgZXh0cmFcdTAwRURkYXM6ICR7YWxsVGFza3MubGVuZ3RofSBkZSAke2ZpbGVzLmxlbmd0aH0gYXJjaGl2b3NgKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEFjdHVhbGl6YXIgZWwgY2FjaGUgZ2xvYmFsIHkgZWwgdGltZXN0YW1wXHJcbiAgICAgIHRoaXMuYWxsVGFza3NDYWNoZSA9IGFsbFRhc2tzO1xyXG4gICAgICB0aGlzLmxhc3RSZWZyZXNoVGltZSA9IERhdGUubm93KCk7XHJcblxyXG4gICAgICAvL2NvbnNvbGUubG9nKHRoaXMuYWxsVGFza3NDYWNoZSwgdGhpcy5sYXN0UmVmcmVzaFRpbWUpO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGFsbFRhc2tzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKFwiRXJyb3IgYWwgb2J0ZW5lciB0YXJlYXM6XCIsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIHRoaXMuYWxsVGFza3NDYWNoZSB8fCBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogUmVjYXJnYSBmb3J6YWRhIGRlIHRvZGFzIGxhcyB0YXJlYXNcclxuICAqIFx1MDBEQXRpbCBwYXJhIGxsYW1hZGFzIGRlc2RlIGxhIFVJXHJcbiAgKi9cclxuICBhc3luYyBmb3JjZVJlZnJlc2hUYXNrcygpOiBQcm9taXNlPElUYXNrW10+IHtcclxuICAgIHRoaXMuaW52YWxpZGF0ZUNhY2hlKCk7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBbGxUYXNrcygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIE9idGllbmUgdG9kYXMgbGFzIHRhcmVhcywgdXNhbmRvIGNhY2hlIHNpIGVzIHBvc2libGVcclxuICogQHJldHVybnMgTGlzdGEgZGUgdGFyZWFzXHJcbiAqL1xyXG4gIGFzeW5jIGdldEFsbFRhc2tzKCk6IFByb21pc2U8SVRhc2tbXT4ge1xyXG4gICAgLy8gU2kgaGF5IHVuIHJlZnJlc2ggZW4gcHJvZ3Jlc28sIGVzcGVyYXIgYSBxdWUgdGVybWluZVxyXG4gICAgaWYgKHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MgJiYgdGhpcy5yZWZyZXNoUHJvbWlzZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5yZWZyZXNoUHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLmFsbFRhc2tzQ2FjaGUsIHRoaXMubGFzdFJlZnJlc2hUaW1lLCB0aGlzLkNBQ0hFX1RUTCk7XHJcblxyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIC8vIFNpIGVsIGNhY2hlIGdsb2JhbCBlcyB2XHUwMEUxbGlkbyB5IHJlY2llbnRlLCB1c2FybG9cclxuICAgIGlmICh0aGlzLmFsbFRhc2tzQ2FjaGUgJiYgKG5vdyAtIHRoaXMubGFzdFJlZnJlc2hUaW1lIDwgdGhpcy5DQUNIRV9UVEwpKSB7XHJcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIlVzYW5kbyBjYWNoZSBnbG9iYWwgZGUgdGFyZWFzXCIpO1xyXG4gICAgICByZXR1cm4gdGhpcy5hbGxUYXNrc0NhY2hlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEluaWNpYXIgdW4gbnVldm8gcmVmcmVzaFxyXG4gICAgdGhpcy5yZWZyZXNoSW5Qcm9ncmVzcyA9IHRydWU7XHJcbiAgICB0aGlzLnJlZnJlc2hQcm9taXNlID0gdGhpcy5yZWZyZXNoQWxsVGFza3NDYWNoZSgpO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB0YXNrcyA9IGF3YWl0IHRoaXMucmVmcmVzaFByb21pc2U7XHJcbiAgICAgIHJldHVybiB0YXNrcztcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMucmVmcmVzaEluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgdGhpcy5yZWZyZXNoUHJvbWlzZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBFbCByZXN0byBkZSBtXHUwMEU5dG9kb3MgZXhpc3RlbnRlcy4uLlxyXG4gIC8vIFRvZG9zIGxvcyBtXHUwMEU5dG9kb3MgcXVlIGxsYW1lbiBhIHRoaXMuZ2V0QWxsVGFza3MoKSBcclxuICAvLyBhaG9yYSB1c2FyXHUwMEUxbiBhdXRvbVx1MDBFMXRpY2FtZW50ZSBlbCBjYWNoZS4uLlxyXG5cclxuICAvKipcclxuICAqIEZpbHRyYSB0YXJlYXMgc2VnXHUwMEZBbiBjcml0ZXJpb3MgZXNwZWNpZmljYWRvc1xyXG4gICogQHBhcmFtIGNyaXRlcmlhIENyaXRlcmlvcyBkZSBmaWx0cmFkbyAob3BjaW9uYWwpXHJcbiAgKiBAcmV0dXJucyBUYXJlYXMgZmlsdHJhZGFzXHJcbiAgKi9cclxuICBhc3luYyBnZXRGaWx0ZXJlZFRhc2tzKGNyaXRlcmlhPzogVGFza0ZpbHRlckNyaXRlcmlhKTogUHJvbWlzZTxJVGFza1tdPiB7XHJcbiAgICAvLyBPYnRlbmVyIHRvZGFzIGxhcyB0YXJlYXNcclxuICAgIGNvbnN0IGFsbFRhc2tzID0gYXdhaXQgdGhpcy5nZXRBbGxUYXNrcygpO1xyXG4gICAgXHJcbiAgICAvLyBTaSBubyBoYXkgY3JpdGVyaW9zLCBkZXZvbHZlciB0b2Rhc1xyXG4gICAgaWYgKCFjcml0ZXJpYSkgcmV0dXJuIGFsbFRhc2tzO1xyXG4gICAgXHJcbiAgICAvLyBBcGxpY2FyIGZpbHRyb3NcclxuICAgIGxldCBmaWx0ZXJlZFRhc2tzID0gYWxsVGFza3MuZmlsdGVyKHRhc2sgPT4ge1xyXG4gICAgICAvLyBJbXBsZW1lbnRhbW9zIHVuYSBmdW5jaVx1MDBGM24gcG9yIGNhZGEgY2F0ZWdvclx1MDBFRGEgZGUgZmlsdHJvIHBhcmEgbWF5b3IgY2xhcmlkYWRcclxuICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlc1N0YXR1c0ZpbHRlcnModGFzaywgY3JpdGVyaWEpICYmXHJcbiAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzVGV4dEZpbHRlcnModGFzaywgY3JpdGVyaWEpICYmXHJcbiAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzVGFnRmlsdGVycyh0YXNrLCBjcml0ZXJpYSkgJiZcclxuICAgICAgICAgICAgICB0aGlzLm1hdGNoZXNQcmlvcml0eUZpbHRlcnModGFzaywgY3JpdGVyaWEpICYmXHJcbiAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzRGF0ZUZpbHRlcnModGFzaywgY3JpdGVyaWEpICYmXHJcbiAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzTG9jYXRpb25GaWx0ZXJzKHRhc2ssIGNyaXRlcmlhKSAmJlxyXG4gICAgICAgICAgICAgIHRoaXMubWF0Y2hlc0FkdmFuY2VkRmlsdGVycyh0YXNrLCBjcml0ZXJpYSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBcGxpY2FyIG9yZGVuYWNpXHUwMEYzblxyXG4gICAgaWYgKGNyaXRlcmlhLnNvcnQpIHtcclxuICAgICAgZmlsdGVyZWRUYXNrcyA9IHRoaXMuc29ydFRhc2tzQnlNdWx0aXBsZUZpZWxkcyhcclxuICAgICAgICBmaWx0ZXJlZFRhc2tzLCBcclxuICAgICAgICBjcml0ZXJpYS5zb3J0LmJ5LCBcclxuICAgICAgICBjcml0ZXJpYS5zb3J0LmRpcmVjdGlvblxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFwbGljYXIgbFx1MDBFRG1pdGVcclxuICAgIGlmIChjcml0ZXJpYS5saW1pdCAmJiBjcml0ZXJpYS5saW1pdCA+IDApIHtcclxuICAgICAgZmlsdGVyZWRUYXNrcyA9IGZpbHRlcmVkVGFza3Muc2xpY2UoMCwgY3JpdGVyaWEubGltaXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE9wY2lvbmFsbWVudGUgYWdydXBhciByZXN1bHRhZG9zXHJcbiAgICBpZiAoY3JpdGVyaWEuZ3JvdXBCeSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ncm91cFRhc2tzKGZpbHRlcmVkVGFza3MsIGNyaXRlcmlhLmdyb3VwQnkpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvZ2dlci5kZWJ1ZyhgRmlsdHJhZG86ICR7ZmlsdGVyZWRUYXNrcy5sZW5ndGh9IGRlICR7YWxsVGFza3MubGVuZ3RofSB0YXJlYXMgY29pbmNpZGVuIGNvbiBsb3MgY3JpdGVyaW9zYCk7XHJcbiAgICByZXR1cm4gZmlsdGVyZWRUYXNrcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gKiBPYnRpZW5lIGxhcyB0YXJlYXMgcGVuZGllbnRlcyAobm8gY29tcGxldGFkYXMpXHJcbiAqL1xyXG4gIGFzeW5jIGdldFBlbmRpbmdUYXNrcygpOiBQcm9taXNlPElUYXNrW10+IHtcclxuICAgIHJldHVybiB0aGlzLmdldEZpbHRlcmVkVGFza3Moe1xyXG4gICAgICBpc0NvbXBsZXRlZDogZmFsc2VcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT2J0aWVuZSBsYXMgdGFyZWFzIGNvbXBsZXRhZGFzXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0Q29tcGxldGVkVGFza3MoKTogUHJvbWlzZTxJVGFza1tdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRGaWx0ZXJlZFRhc2tzKHtcclxuICAgICAgaXNDb21wbGV0ZWQ6IHRydWVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBPYnRpZW5lIGxhcyB0YXJlYXMgcGFyYSBob3lcclxuICAqL1xyXG4gIGFzeW5jIGdldFRvZGF5VGFza3MoKTogUHJvbWlzZTxJVGFza1tdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRGaWx0ZXJlZFRhc2tzKHtcclxuICAgICAgaXNDb21wbGV0ZWQ6IGZhbHNlLFxyXG4gICAgICBkdWVEYXRlUmVsYXRpdmU6IHtcclxuICAgICAgICB0b2RheTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzb3J0OiB7XHJcbiAgICAgICAgYnk6IFsncHJpb3JpdHknLCAndGV4dCddLFxyXG4gICAgICAgIGRpcmVjdGlvbjogWydhc2MnLCAnYXNjJ11cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIGxhcyB0YXJlYXMgcGFyYSBtYVx1MDBGMWFuYVxyXG4gICAqL1xyXG4gIGFzeW5jIGdldFRvbW9ycm93VGFza3MoKTogUHJvbWlzZTxJVGFza1tdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRGaWx0ZXJlZFRhc2tzKHtcclxuICAgICAgaXNDb21wbGV0ZWQ6IGZhbHNlLFxyXG4gICAgICBkdWVEYXRlUmVsYXRpdmU6IHtcclxuICAgICAgICB0b21vcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzb3J0OiB7XHJcbiAgICAgICAgYnk6IFsncHJpb3JpdHknLCAndGV4dCddLFxyXG4gICAgICAgIGRpcmVjdGlvbjogWydhc2MnLCAnYXNjJ11cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIGxhcyB0YXJlYXMgdmVuY2lkYXNcclxuICAgKi9cclxuICBhc3luYyBnZXRPdmVyZHVlVGFza3MoKTogUHJvbWlzZTxJVGFza1tdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRGaWx0ZXJlZFRhc2tzKHtcclxuICAgICAgaXNDb21wbGV0ZWQ6IGZhbHNlLFxyXG4gICAgICBkdWVEYXRlUmVsYXRpdmU6IHtcclxuICAgICAgICBvdmVyZHVlOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIHNvcnQ6IHtcclxuICAgICAgICBieTogWydkdWVEYXRlJywgJ3ByaW9yaXR5J10sXHJcbiAgICAgICAgZGlyZWN0aW9uOiBbJ2FzYycsICdhc2MnXVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9idGllbmUgbGFzIHRhcmVhcyBwcm9ncmFtYWRhcyBwYXJhIGVzdGEgc2VtYW5hXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0VGhpc1dlZWtUYXNrcygpOiBQcm9taXNlPElUYXNrW10+IHtcclxuICAgIHJldHVybiB0aGlzLmdldEZpbHRlcmVkVGFza3Moe1xyXG4gICAgICBpc0NvbXBsZXRlZDogZmFsc2UsXHJcbiAgICAgIGR1ZURhdGVSZWxhdGl2ZToge1xyXG4gICAgICAgIHRoaXNXZWVrOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIHNvcnQ6IHtcclxuICAgICAgICBieTogWydkdWVEYXRlJywgJ3ByaW9yaXR5J10sXHJcbiAgICAgICAgZGlyZWN0aW9uOiBbJ2FzYycsICdhc2MnXVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9idGllbmUgbGFzIHRhcmVhcyBwcm9ncmFtYWRhcyBwYXJhIGxhIHByXHUwMEYzeGltYSBzZW1hbmFcclxuICAgKi9cclxuICBhc3luYyBnZXROZXh0V2Vla1Rhc2tzKCk6IFByb21pc2U8SVRhc2tbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RmlsdGVyZWRUYXNrcyh7XHJcbiAgICAgIGlzQ29tcGxldGVkOiBmYWxzZSxcclxuICAgICAgZHVlRGF0ZVJlbGF0aXZlOiB7XHJcbiAgICAgICAgbmV4dFdlZWs6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgc29ydDoge1xyXG4gICAgICAgIGJ5OiBbJ2R1ZURhdGUnLCAncHJpb3JpdHknXSxcclxuICAgICAgICBkaXJlY3Rpb246IFsnYXNjJywgJ2FzYyddXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT2J0aWVuZSBsYXMgdGFyZWFzIGNvbXBsZXRhZGFzIHJlY2llbnRlbWVudGVcclxuICAgKi9cclxuICBhc3luYyBnZXRSZWNlbnRseUNvbXBsZXRlZFRhc2tzKGRheXM6IG51bWJlciA9IDcpOiBQcm9taXNlPElUYXNrW10+IHtcclxuICAgIHJldHVybiB0aGlzLmdldEZpbHRlcmVkVGFza3Moe1xyXG4gICAgICBpc0NvbXBsZXRlZDogdHJ1ZSxcclxuICAgICAgZG9uZURhdGU6IHtcclxuICAgICAgICBhZnRlcjogbmV3IERhdGUoRGF0ZS5ub3coKSAtIGRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKVxyXG4gICAgICB9LFxyXG4gICAgICBzb3J0OiB7XHJcbiAgICAgICAgYnk6IFsnZG9uZURhdGUnXSxcclxuICAgICAgICBkaXJlY3Rpb246IFsnZGVzYyddXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT2J0aWVuZSBsYXMgdGFyZWFzIGNvbiBhbHRhIHByaW9yaWRhZFxyXG4gICAqL1xyXG4gIGFzeW5jIGdldEhpZ2hQcmlvcml0eVRhc2tzKCk6IFByb21pc2U8SVRhc2tbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RmlsdGVyZWRUYXNrcyh7XHJcbiAgICAgIGlzQ29tcGxldGVkOiBmYWxzZSxcclxuICAgICAgcHJpb3JpdHk6IHtcclxuICAgICAgICBpczogWydoaWdoJ11cclxuICAgICAgfSxcclxuICAgICAgc29ydDoge1xyXG4gICAgICAgIGJ5OiBbJ2R1ZURhdGUnXSxcclxuICAgICAgICBkaXJlY3Rpb246IFsnYXNjJ11cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIGxhcyB0YXJlYXMgcGFyYSB1biBhcmNoaXZvIGVzcGVjXHUwMEVEZmljb1xyXG4gICAqIChtXHUwMEU5dG9kbyBudWV2byBxdWUgcHVlZGUgc2VyIFx1MDBGQXRpbClcclxuICAgKi9cclxuICBhc3luYyBnZXRUYXNrc0ZvckZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8SVRhc2tbXT4ge1xyXG4gICAgLy8gU2kgaGF5IGVuIGVsIGNhY2hlLCBkZXZvbHZlciBkZXNkZSBhaFx1MDBFRFxyXG4gICAgaWYgKHRoaXMudGFza3NDYWNoZS5oYXMoZmlsZVBhdGgpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnRhc2tzQ2FjaGUuZ2V0KGZpbGVQYXRoKSB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTaSBubywgaW50ZW50YXIgb2J0ZW5lciBlbCBhcmNoaXZvXHJcbiAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcclxuICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuICAgICAgY29uc3QgdGFza3MgPSBhd2FpdCB0aGlzLmV4dHJhY3RUYXNrc0Zyb21Db250ZW50KGZpbGUpO1xyXG4gICAgICB0aGlzLnRhc2tzQ2FjaGUuc2V0KGZpbGVQYXRoLCB0YXNrcyk7XHJcbiAgICAgIHJldHVybiB0YXNrcztcclxuICAgIH1cclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcblxyXG4gIC8vL1xyXG4gIC8vLyBGdW5jaW9uZXMgcGFyYSBleHRyYWVyIHRhcmVhcyBkZSBhcmNoaXZvc1xyXG4gIC8vL1xyXG5cclxuICAvKipcclxuICAgKiBFeHRyYWUgdGFyZWFzIGRlIHVuIGFyY2hpdm8gZXNwZWNcdTAwRURmaWNvXHJcbiAgICogQHBhcmFtIGZpbGUgRWwgYXJjaGl2byBkZWwgY3VhbCBleHRyYWVyIHRhcmVhc1xyXG4gICAqIEByZXR1cm5zIFVuYSBwcm9tZXNhIHF1ZSByZXN1ZWx2ZSBhIHVuIGFycmF5IGRlIHRhcmVhc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgZXh0cmFjdFRhc2tzRnJvbUNvbnRlbnQoZmlsZTogVEZpbGUpOiBQcm9taXNlIDxJVGFza1tdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuICAgICAgY29uc3QgY2FjaGVkTWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcclxuXHJcbiAgICAgIC8vIFZlcmlmaWNhciBzaSBwb2RlbW9zIHVzYXIgZWwgY2FjaFx1MDBFOSBkZSBtZXRhZGF0b3NcclxuICAgICAgaWYgKGNhY2hlZE1ldGFkYXRhICYmIGNhY2hlZE1ldGFkYXRhLmxpc3RJdGVtcykge1xyXG4gICAgICAgIGNvbnN0IHRhc2tzID0gdGhpcy5leHRyYWN0VGFza3NGcm9tQ2FjaGUoZmlsZSwgY2FjaGVkTWV0YWRhdGEsIGNvbnRlbnQpO1xyXG4gICAgICAgIGlmICh0YXNrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGFza3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNpIG5vIHNlIGVuY29udHJhcm9uIHRhcmVhcywgY2FlbW9zIGVuIGVsIG1cdTAwRTl0b2RvIHRyYWRpY2lvbmFsIChwb3Igc2kgYWNhc28pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVzYXIgZWwgbVx1MDBFOXRvZG8gdHJhZGljaW9uYWwgY29tbyBmYWxsYmFja1xyXG4gICAgICByZXR1cm4gdGhpcy5leHRyYWN0VGFza3NUcmFkaXRpb25hbGx5KGZpbGUsIGNvbnRlbnQpO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIGFsIGV4dHJhZXIgdGFyZWFzIGRlbCBjb250ZW5pZG86XCIsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIEV4dHJhZSB0YXJlYXMgdXNhbmRvIGVsIGNhY2hcdTAwRTkgZGUgbWV0YWRhdG9zIGRlIE9ic2lkaWFuXHJcbiAqL1xyXG4gIHByaXZhdGUgZXh0cmFjdFRhc2tzRnJvbUNhY2hlKGZpbGU6IFRGaWxlLCBjYWNoZTogYW55LCBjb250ZW50OiBzdHJpbmcpOiBJVGFza1tdIHtcclxuICAgIGNvbnN0IHRhc2tzOiBJVGFza1tdID0gW107XHJcbiAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAvL2xvZ2dlci5kZWJ1ZyhgVXNhbmRvIGNhY2hcdTAwRTkgZGUgbWV0YWRhdG9zIHBhcmEgJHtmaWxlLnBhdGh9YCk7XHJcblxyXG4gICAgLy8gU29sbyBwcm9jZXNhciBlbGVtZW50b3MgZGUgbGlzdGEgcXVlIHNvbiB0YXJlYXNcclxuICAgIGlmIChjYWNoZS5saXN0SXRlbXMpIHtcclxuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGNhY2hlLmxpc3RJdGVtcykge1xyXG4gICAgICAgIC8vIFZlcmlmaWNhciBzaSBlcyB1bmEgdGFyZWEgKHRpZW5lIHVuIGNhclx1MDBFMWN0ZXIgZGUgdGFyZWEpXHJcbiAgICAgICAgaWYgKGl0ZW0udGFzayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAvLyBPYnRlbmVyIGVsIG5cdTAwRkFtZXJvIGRlIGxcdTAwRURuZWEgKGFqdXN0YWRvIGEgYmFzZSAwKVxyXG4gICAgICAgICAgY29uc3QgbGluZU51bWJlciA9IGl0ZW0ucG9zaXRpb24uc3RhcnQubGluZTtcclxuXHJcbiAgICAgICAgICAvLyBPYnRlbmVyIGVsIGNvbnRlbmlkbyBkZSBsYSBsXHUwMEVEbmVhXHJcbiAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbbGluZU51bWJlcl07XHJcblxyXG4gICAgICAgICAgLy8gU29sbyBwcm9jZXNhciBzaSBjb2luY2lkZSBjb24gZWwgZm9ybWF0byBkZSB0YXJlYVxyXG4gICAgICAgICAgaWYgKGxpbmUgJiYgbGluZS5tYXRjaChUYXNrU2VjdGlvbi50YXNrRm9ybWF0UmVnZXgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhc2sgPSB0aGlzLmNyZWF0ZVRhc2tGcm9tTGluZShmaWxlLCBsaW5lLCBsaW5lTnVtYmVyLCBjb250ZW50KTtcclxuICAgICAgICAgICAgaWYgKHRhc2spIHtcclxuICAgICAgICAgICAgICB0YXNrcy5wdXNoKHRhc2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFza3M7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeHRyYWUgdGFyZWFzIHVzYW5kbyBlbCBtXHUwMEU5dG9kbyB0cmFkaWNpb25hbCAoc2luIGNhY2hcdTAwRTkpXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRyYWN0VGFza3NUcmFkaXRpb25hbGx5KGZpbGU6IFRGaWxlLCBjb250ZW50OiBzdHJpbmcpOiBJVGFza1tdIHtcclxuICAgIC8vbG9nZ2VyLmRlYnVnKGBVc2FuZG8gbVx1MDBFOXRvZG8gdHJhZGljaW9uYWwgcGFyYSAke2ZpbGUucGF0aH1gKTtcclxuICAgIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdChcIlxcblwiKS5maWx0ZXIobGluZSA9PiBsaW5lLm1hdGNoKFRhc2tTZWN0aW9uLnRhc2tGb3JtYXRSZWdleCkpOyBcclxuICAgIGNvbnN0IHRhc2tzOiBJVGFza1tdID0gW107XHJcblxyXG4gICAgbGluZXMuZm9yRWFjaCgobGluZSwgbGluZU51bWJlcikgPT4ge1xyXG4gICAgICBpZiAobGluZSkge1xyXG4gICAgICAgIGNvbnN0IHRhc2sgPSB0aGlzLmNyZWF0ZVRhc2tGcm9tTGluZShmaWxlLCBsaW5lLCBsaW5lTnVtYmVyLCBjb250ZW50KTtcclxuICAgICAgICBpZiAodGFzaykge1xyXG4gICAgICAgICAgdGFza3MucHVzaCh0YXNrKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvL2xvZ2dlci5kZWJ1ZyhgRXh0cmFcdTAwRURkYXMgJHt0YXNrcy5sZW5ndGh9IHRhcmVhcyBkZSAke2ZpbGUucGF0aH0gdXNhbmRvIG1cdTAwRTl0b2RvIHRyYWRpY2lvbmFsYCk7XHJcbiAgICByZXR1cm4gdGFza3M7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICogQ3JlYSB1biBvYmpldG8gSVRhc2sgYSBwYXJ0aXIgZGUgdW5hIGxcdTAwRURuZWEgZGUgdGV4dG9cclxuICovXHJcbiAgcHJpdmF0ZSBjcmVhdGVUYXNrRnJvbUxpbmUoZmlsZTogVEZpbGUsIGxpbmU6IHN0cmluZywgbGluZU51bWJlcjogbnVtYmVyLCBjb250ZW50OiBzdHJpbmcpOiBJVGFzayB8IG51bGwge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdGFza1NlY3Rpb24gPSBuZXcgVGFza1NlY3Rpb24odGhpcy5pMThuKTtcclxuICAgICAgdGFza1NlY3Rpb24uaW5pdGlhbGl6ZShsaW5lKTtcclxuXHJcbiAgICAgIGNvbnN0IHN0YXR1cyA9IFRhc2suZXh0cmFjdFN0YXR1c0Zyb21IZWFkZXIodGFza1NlY3Rpb24uaGVhZGVyKTtcclxuICAgICAgY29uc3QgdGFncyA9IFRhc2suZXh0cmFjdFRhZ3MobGluZSk7XHJcblxyXG4gICAgICBjb25zdCBzdGF0dXNUZXh0ID0gdGhpcy5nZXRDb3JlVGFza1N0YXR1c05hbWUoc3RhdHVzKTtcclxuICAgICAgLy8gT2J0aWVuZSBlbCBpY29ubyBkZWwgZW51bSBDb3JlVGFza1N0YXR1c0ljb25cclxuICAgICAgY29uc3Qgc3RhdHVzSWNvbiA9IHRoaXMuZ2V0Q29yZVRhc2tTdGF0dXNJY29uKHN0YXR1cyk7XHJcblxyXG4gICAgICBjb25zdCByb290Rm9sZGVyID0gdGhpcy5nZXRSb290Rm9sZGVyKGZpbGUucGF0aCk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiB0YXNrU2VjdGlvbi50YXNrRGF0YS5pZCB8fCBgJHtmaWxlLnBhdGh9LSR7bGluZU51bWJlciArIDF9YCxcclxuICAgICAgICB0aXRsZTogbGluZSxcclxuICAgICAgICB0ZXh0OiBsaW5lLnRyaW0oKSxcclxuICAgICAgICBsaW5rOiB7IHBhdGg6IGZpbGUucGF0aCB9LFxyXG4gICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIgKyAxLCAvLyBBanVzdGFyIGEgYmFzZSAxIHBhcmEgY29uc2lzdGVuY2lhXHJcbiAgICAgICAgLy9zZWN0aW9uOiB0YXNrU2VjdGlvbixcclxuICAgICAgICBzdGF0dXM6IHN0YXR1cyxcclxuICAgICAgICBzdGF0dXNUZXh0OiBzdGF0dXNUZXh0LFxyXG4gICAgICAgIHN0YXR1c0ljb246IHN0YXR1c0ljb24sXHJcbiAgICAgICAgdGFnczogdGFncyxcclxuICAgICAgICBwcmlvcml0eTogdGFza1NlY3Rpb24udGFza0RhdGEucHJpb3JpdHkgfHwgXCJ1bmRlZmluZWRcIixcclxuICAgICAgICBjcmVhdGVkRGF0ZTogdGFza1NlY3Rpb24udGFza0RhdGEuY3JlYXRlZERhdGUgfHwgbnVsbCxcclxuICAgICAgICBzdGFydERhdGU6IHRhc2tTZWN0aW9uLnRhc2tEYXRhLnN0YXJ0RGF0ZSB8fCBudWxsLFxyXG4gICAgICAgIHNjaGVkdWxlZERhdGU6IHRhc2tTZWN0aW9uLnRhc2tEYXRhLnNjaGVkdWxlZERhdGUgfHwgbnVsbCxcclxuICAgICAgICBkdWVEYXRlOiB0YXNrU2VjdGlvbi50YXNrRGF0YS5kdWVEYXRlIHx8IG51bGwsXHJcbiAgICAgICAgZG9uZURhdGU6IHRhc2tTZWN0aW9uLnRhc2tEYXRhLmRvbmVEYXRlIHx8IG51bGwsXHJcbiAgICAgICAgY2FuY2VsbGVkRGF0ZTogdGFza1NlY3Rpb24udGFza0RhdGEuY2FuY2VsbGVkRGF0ZSB8fCBudWxsLFxyXG4gICAgICAgIHJlY3VycmVuY2U6IHRhc2tTZWN0aW9uLnRhc2tEYXRhLnJlY3VycmVuY2UgfHwgXCJcIixcclxuICAgICAgICBvbkNvbXBsZXRpb246IHRhc2tTZWN0aW9uLnRhc2tEYXRhLm9uQ29tcGxldGlvbixcclxuICAgICAgICBkZXBlbmRzT246IHRhc2tTZWN0aW9uLnRhc2tEYXRhLmRlcGVuZHNPbixcclxuICAgICAgICBibG9ja0xpbms6IHRhc2tTZWN0aW9uLmJsb2NrTGluayxcclxuICAgICAgICBzY2hlZHVsZWREYXRlSXNJbmZlcnJlZDogZmFsc2UsXHJcbiAgICAgICAgZmlsZVBhdGg6IGZpbGUucGF0aCxcclxuICAgICAgICBmaWxlTmFtZTogZmlsZS5uYW1lLFxyXG4gICAgICAgIGZpbGVCYXNlbmFtZTogZmlsZS5iYXNlbmFtZSxcclxuICAgICAgICBmaWxlRXh0ZW5zaW9uOiBmaWxlLmV4dGVuc2lvbixcclxuICAgICAgICByb290Rm9sZGVyOiByb290Rm9sZGVyLFxyXG4gICAgICAgIGhlYWRlcjogdGFza1NlY3Rpb24uaGVhZGVyLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0YXNrU2VjdGlvbi5kZXNjcmlwdGlvbixcclxuICAgICAgICB0YXNrc0ZpZWxkczogdGFza1NlY3Rpb24udGFza3NGaWVsZHMsXHJcbiAgICAgICAgdGFza0RhdGE6IHRhc2tTZWN0aW9uLnRhc2tEYXRhLFxyXG4gICAgICAgIGlzVmFsaWQ6IHRhc2tTZWN0aW9uLnRhc2tEYXRhLmlzVmFsaWQgfHwgZmFsc2UsXHJcbiAgICAgIH0gYXMgSVRhc2s7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBsb2dnZXIuZXJyb3IoYEVycm9yIGNyZWFuZG8gdGFyZWEgZGUgbFx1MDBFRG5lYSAke2xpbmVOdW1iZXIgKyAxfSBlbiAke2ZpbGUucGF0aH06YCwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Um9vdEZvbGRlcihmaWxlUGF0aDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmIChmaWxlUGF0aCkge1xyXG4gICAgICAvLyBEaXZpZGlyIGxhIHJ1dGEgZGVsIGFyY2hpdm8gZW4gcGFydGVzXHJcbiAgICAgIGNvbnN0IHBhdGhQYXJ0cyA9IGZpbGVQYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBFbCByb290Rm9sZGVyIGVzIGxhIHByaW1lcmEgcGFydGUgZGUgbGEgcnV0YSAoc2kgZXhpc3RlKVxyXG4gICAgICBpZiAocGF0aFBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICByZXR1cm4gcGF0aFBhcnRzWzBdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFNpIG5vIGhheSBzZXBhcmFkb3IgZGUgcnV0YSwgYXNpZ25hciBcIlJvb3RcIlxyXG4gICAgICAgIHJldHVybiBcInJvb3RcIjtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU2kgbm8gaGF5IHJ1dGEgZGUgYXJjaGl2bywgYXNpZ25hciBcIlNpbiBjYXJwZXRhXCJcclxuICAgICAgcmV0dXJuICBcInVuZGVmaW5lZFwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRDb3JlVGFza1N0YXR1c05hbWUoc3RhdHVzOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgc3dpdGNoIChzdGF0dXMpIHtcclxuICAgICAgY2FzZSBDb3JlVGFza1N0YXR1cy5Ub2RvOlxyXG4gICAgICAgIHJldHVybiBcIlRvZG9cIjtcclxuICAgICAgY2FzZSBDb3JlVGFza1N0YXR1cy5JblByb2dyZXNzOlxyXG4gICAgICAgIHJldHVybiBcIkluUHJvZ3Jlc3NcIjtcclxuICAgICAgY2FzZSBDb3JlVGFza1N0YXR1cy5Eb25lOlxyXG4gICAgICAgIHJldHVybiBcIkRvbmVcIjtcclxuICAgICAgY2FzZSBDb3JlVGFza1N0YXR1cy5DYW5jZWxsZWQ6XHJcbiAgICAgICAgcmV0dXJuIFwiQ2FuY2VsbGVkXCI7XHJcbiAgICAgIGNhc2UgQ29yZVRhc2tTdGF0dXMubm9uVGFzazpcclxuICAgICAgICByZXR1cm4gXCJOb25UYXNrXCI7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIFwiVW5rbm93blwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRDb3JlVGFza1N0YXR1c0ljb24oc3RhdHVzOiBDb3JlVGFza1N0YXR1cyk6IHN0cmluZyB7XHJcbiAgICBzd2l0Y2ggKHN0YXR1cykge1xyXG4gICAgICBjYXNlIENvcmVUYXNrU3RhdHVzLlRvZG86XHJcbiAgICAgICAgcmV0dXJuIENvcmVUYXNrU3RhdHVzSWNvbi5Ub2RvO1xyXG4gICAgICBjYXNlIENvcmVUYXNrU3RhdHVzLkluUHJvZ3Jlc3M6XHJcbiAgICAgICAgcmV0dXJuIENvcmVUYXNrU3RhdHVzSWNvbi5JblByb2dyZXNzO1xyXG4gICAgICBjYXNlIENvcmVUYXNrU3RhdHVzLkRvbmU6XHJcbiAgICAgICAgcmV0dXJuIENvcmVUYXNrU3RhdHVzSWNvbi5Eb25lO1xyXG4gICAgICBjYXNlIENvcmVUYXNrU3RhdHVzLkNhbmNlbGxlZDpcclxuICAgICAgICByZXR1cm4gQ29yZVRhc2tTdGF0dXNJY29uLkNhbmNlbGxlZDtcclxuICAgICAgY2FzZSBDb3JlVGFza1N0YXR1cy5ub25UYXNrOlxyXG4gICAgICAgIHJldHVybiBDb3JlVGFza1N0YXR1c0ljb24ubm9uVGFzaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gQ29yZVRhc2tTdGF0dXNJY29uLlRvZG87XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLy9cclxuICAvLy8gRnVuY2lvbmVzIHBhcmEgZmlsdHJhciB0YXJlYXNcclxuXHJcbiAgLyoqXHJcbiAgICogVmVyaWZpY2Egc2kgdW5hIHRhcmVhIGNvaW5jaWRlIGNvbiBsb3MgZmlsdHJvcyBkZSBlc3RhZG9cclxuICAgKi9cclxuICBwcml2YXRlIG1hdGNoZXNTdGF0dXNGaWx0ZXJzKHRhc2s6IElUYXNrLCBjcml0ZXJpYTogVGFza0ZpbHRlckNyaXRlcmlhKTogYm9vbGVhbiB7XHJcbiAgICAvLyBGaWx0cmFyIHBvciBlc3RhZG8gZXNwZWNcdTAwRURmaWNvXHJcbiAgICBpZiAoY3JpdGVyaWEuc3RhdHVzICYmIGNyaXRlcmlhLnN0YXR1cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGlmICghdGFzay5zdGF0dXMgfHwgIWNyaXRlcmlhLnN0YXR1cy5pbmNsdWRlcyh0YXNrLnN0YXR1cykpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGaWx0cmFyIHBvciBlc3RhZG8gY29tcGxldGFkby9ubyBjb21wbGV0YWRvXHJcbiAgICBpZiAoY3JpdGVyaWEuaXNDb21wbGV0ZWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBpc1Rhc2tDb21wbGV0ZWQgPSB0YXNrLnN0YXR1cyA9PT0gJ0RPTkUnIHx8IHRhc2suc3RhdHVzID09PSAnQ0FOQ0VMTEVEJztcclxuICAgICAgaWYgKGlzVGFza0NvbXBsZXRlZCAhPT0gY3JpdGVyaWEuaXNDb21wbGV0ZWQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmaWNhIHNpIHVuYSB0YXJlYSBjb2luY2lkZSBjb24gbG9zIGZpbHRyb3MgZGUgdGV4dG9cclxuICAgKi9cclxuICBwcml2YXRlIG1hdGNoZXNUZXh0RmlsdGVycyh0YXNrOiBJVGFzaywgY3JpdGVyaWE6IFRhc2tGaWx0ZXJDcml0ZXJpYSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFjcml0ZXJpYS50ZXh0KSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCB0YXNrVGV4dCA9IHRhc2sudGV4dD8udG9Mb3dlckNhc2UoKSB8fCAnJztcclxuXHJcbiAgICAvLyBUZXh0byBxdWUgZGViZSBpbmNsdWlyXHJcbiAgICBpZiAoY3JpdGVyaWEudGV4dC5pbmNsdWRlcyAmJiBjcml0ZXJpYS50ZXh0LmluY2x1ZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgaWYgKCFjcml0ZXJpYS50ZXh0LmluY2x1ZGVzLmV2ZXJ5KHRlcm0gPT4gXHJcbiAgICAgICAgICB0YXNrVGV4dC5pbmNsdWRlcyh0ZXJtLnRvTG93ZXJDYXNlKCkpKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFRleHRvIHF1ZSBOTyBkZWJlIGluY2x1aXJcclxuICAgIGlmIChjcml0ZXJpYS50ZXh0LmV4Y2x1ZGVzICYmIGNyaXRlcmlhLnRleHQuZXhjbHVkZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBpZiAoY3JpdGVyaWEudGV4dC5leGNsdWRlcy5zb21lKHRlcm0gPT4gXHJcbiAgICAgICAgICB0YXNrVGV4dC5pbmNsdWRlcyh0ZXJtLnRvTG93ZXJDYXNlKCkpKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlZ2V4IHBhcmEgY29pbmNpZGlyXHJcbiAgICBpZiAoY3JpdGVyaWEudGV4dC5yZWdleCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChjcml0ZXJpYS50ZXh0LnJlZ2V4LCAnaScpO1xyXG4gICAgICAgIGlmICghcmVnZXgudGVzdCh0YXNrVGV4dCkpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKGBFcnJvciBlbiBleHByZXNpXHUwMEYzbiByZWd1bGFyOiAke2NyaXRlcmlhLnRleHQucmVnZXh9YCwgZXJyb3IpO1xyXG4gICAgICAgIC8vIFNpIGhheSBlcnJvciBlbiBsYSByZWdleCwgaWdub3JhbW9zIGVzdGUgZmlsdHJvXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmaWNhIHNpIHVuYSB0YXJlYSBjb2luY2lkZSBjb24gbG9zIGZpbHRyb3MgZGUgZXRpcXVldGFzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBtYXRjaGVzVGFnRmlsdGVycyh0YXNrOiBJVGFzaywgY3JpdGVyaWE6IFRhc2tGaWx0ZXJDcml0ZXJpYSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFjcml0ZXJpYS50YWdzKSByZXR1cm4gdHJ1ZTtcclxuICAgIFxyXG4gICAgY29uc3QgdGFza1RhZ3MgPSB0YXNrLnRhZ3MgfHwgW107XHJcblxyXG4gICAgLy8gRXRpcXVldGFzIHF1ZSBkZWJlIHRlbmVyXHJcbiAgICBpZiAoY3JpdGVyaWEudGFncy5pbmNsdWRlcyAmJiBjcml0ZXJpYS50YWdzLmluY2x1ZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSBsYSB0YXJlYSB0ZW5nYSBUT0RBUyBsYXMgZXRpcXVldGFzIHJlcXVlcmlkYXNcclxuICAgICAgaWYgKCFjcml0ZXJpYS50YWdzLmluY2x1ZGVzLmV2ZXJ5KHRhZyA9PiB0YXNrVGFncy5pbmNsdWRlcyh0YWcpKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEV0aXF1ZXRhcyBxdWUgTk8gZGViZSB0ZW5lclxyXG4gICAgaWYgKGNyaXRlcmlhLnRhZ3MuZXhjbHVkZXMgJiYgY3JpdGVyaWEudGFncy5leGNsdWRlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgbGEgdGFyZWEgTk8gdGVuZ2EgTklOR1VOQSBkZSBsYXMgZXRpcXVldGFzIGV4Y2x1aWRhc1xyXG4gICAgICBpZiAoY3JpdGVyaWEudGFncy5leGNsdWRlcy5zb21lKHRhZyA9PiB0YXNrVGFncy5pbmNsdWRlcyh0YWcpKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmVyaWZpY2Egc2kgdW5hIHRhcmVhIGNvaW5jaWRlIGNvbiBsb3MgZmlsdHJvcyBkZSBwcmlvcmlkYWRcclxuICAgKi9cclxuICBwcml2YXRlIG1hdGNoZXNQcmlvcml0eUZpbHRlcnModGFzazogSVRhc2ssIGNyaXRlcmlhOiBUYXNrRmlsdGVyQ3JpdGVyaWEpOiBib29sZWFuIHtcclxuICAgIGlmICghY3JpdGVyaWEucHJpb3JpdHkpIHJldHVybiB0cnVlO1xyXG5cclxuICAgIGNvbnN0IHRhc2tQcmlvcml0eSA9IHRhc2sucHJpb3JpdHkgfHwgJ3VuZGVmaW5lZCc7XHJcblxyXG4gICAgLy8gUHJpb3JpZGFkIGV4YWN0YVxyXG4gICAgaWYgKGNyaXRlcmlhLnByaW9yaXR5LmlzICYmIGNyaXRlcmlhLnByaW9yaXR5LmlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgaWYgKCFjcml0ZXJpYS5wcmlvcml0eS5pcy5pbmNsdWRlcyh0YXNrUHJpb3JpdHkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJpb3JpZGFkIG1heW9yIHF1ZVxyXG4gICAgaWYgKGNyaXRlcmlhLnByaW9yaXR5LmFib3ZlKSB7XHJcbiAgICAgIGNvbnN0IHByaW9yaXRpZXMgPSBbJ2hpZ2gnLCAnbWVkaXVtJywgJ2xvdycsICd1bmRlZmluZWQnXTtcclxuICAgICAgY29uc3QgdGFza0luZGV4ID0gcHJpb3JpdGllcy5pbmRleE9mKHRhc2tQcmlvcml0eSk7XHJcbiAgICAgIGNvbnN0IHRocmVzaG9sZEluZGV4ID0gcHJpb3JpdGllcy5pbmRleE9mKGNyaXRlcmlhLnByaW9yaXR5LmFib3ZlKTtcclxuXHJcbiAgICAgIGlmICh0YXNrSW5kZXggPT09IC0xIHx8IHRocmVzaG9sZEluZGV4ID09PSAtMSB8fCB0YXNrSW5kZXggPj0gdGhyZXNob2xkSW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBQcmlvcmlkYWQgbWVub3IgcXVlXHJcbiAgICBpZiAoY3JpdGVyaWEucHJpb3JpdHkuYmVsb3cpIHtcclxuICAgICAgY29uc3QgcHJpb3JpdGllcyA9IFsnaGlnaCcsICdtZWRpdW0nLCAnbG93JywgJ3VuZGVmaW5lZCddO1xyXG4gICAgICBjb25zdCB0YXNrSW5kZXggPSBwcmlvcml0aWVzLmluZGV4T2YodGFza1ByaW9yaXR5KTtcclxuICAgICAgY29uc3QgdGhyZXNob2xkSW5kZXggPSBwcmlvcml0aWVzLmluZGV4T2YoY3JpdGVyaWEucHJpb3JpdHkuYmVsb3cpO1xyXG5cclxuICAgICAgaWYgKHRhc2tJbmRleCA9PT0gLTEgfHwgdGhyZXNob2xkSW5kZXggPT09IC0xIHx8IHRhc2tJbmRleCA8PSB0aHJlc2hvbGRJbmRleCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmVyaWZpY2Egc2kgdW5hIHRhcmVhIGNvaW5jaWRlIGNvbiBsb3MgZmlsdHJvcyBkZSBmZWNoYXNcclxuICAgKi9cclxuICBwcml2YXRlIG1hdGNoZXNEYXRlRmlsdGVycyh0YXNrOiBJVGFzaywgY3JpdGVyaWE6IFRhc2tGaWx0ZXJDcml0ZXJpYSk6IGJvb2xlYW4ge1xyXG4gICAgLy8gRW1wZXphbW9zIHZlcmlmaWNhbmRvIGxvcyBmaWx0cm9zIGRlIGZlY2hhIGVzcGVjXHUwMEVEZmljb3NcclxuICAgIGlmICghdGhpcy5tYXRjaGVzU3BlY2lmaWNEYXRlRmlsdGVyKHRhc2suZHVlRGF0ZSwgY3JpdGVyaWEuZHVlRGF0ZSkpIHJldHVybiBmYWxzZTtcclxuICAgIGlmICghdGhpcy5tYXRjaGVzU3BlY2lmaWNEYXRlRmlsdGVyKHRhc2suc3RhcnREYXRlLCBjcml0ZXJpYS5zdGFydERhdGUpKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoIXRoaXMubWF0Y2hlc1NwZWNpZmljRGF0ZUZpbHRlcih0YXNrLnNjaGVkdWxlZERhdGUsIGNyaXRlcmlhLnNjaGVkdWxlZERhdGUpKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoIXRoaXMubWF0Y2hlc1NwZWNpZmljRGF0ZUZpbHRlcih0YXNrLmRvbmVEYXRlLCBjcml0ZXJpYS5kb25lRGF0ZSkpIHJldHVybiBmYWxzZTtcclxuICAgIGlmICghdGhpcy5tYXRjaGVzU3BlY2lmaWNEYXRlRmlsdGVyKHRhc2suY3JlYXRlZERhdGUsIGNyaXRlcmlhLmNyZWF0ZWREYXRlKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIC8vIEx1ZWdvIHZlcmlmaWNhbW9zIGxvcyBmaWx0cm9zIGRlIGZlY2hhIHJlbGF0aXZvcyAoc29sbyBwYXJhIGR1ZURhdGUpXHJcbiAgICBpZiAoY3JpdGVyaWEuZHVlRGF0ZVJlbGF0aXZlKSB7XHJcbiAgICAgIGlmICghdGhpcy5tYXRjaGVzUmVsYXRpdmVEYXRlRmlsdGVyKHRhc2suZHVlRGF0ZSwgY3JpdGVyaWEuZHVlRGF0ZVJlbGF0aXZlKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXV4aWxpYXIgcGFyYSB2ZXJpZmljYXIgZmlsdHJvcyBkZSBmZWNoYSBlc3BlY1x1MDBFRGZpY29zXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBtYXRjaGVzU3BlY2lmaWNEYXRlRmlsdGVyKHRhc2tEYXRlOiBEYXRlIHwgc3RyaW5nIHwgbnVsbCwgZmlsdGVyQ3JpdGVyaWE6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFmaWx0ZXJDcml0ZXJpYSkgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgLy8gQ29udmVydGlyIGEgRGF0ZSBzaSBlcyBzdHJpbmdcclxuICAgIGxldCBkYXRlT2JqOiBEYXRlIHwgbnVsbCA9IG51bGw7XHJcbiAgICBpZiAodGFza0RhdGUpIHtcclxuICAgICAgZGF0ZU9iaiA9IHR5cGVvZiB0YXNrRGF0ZSA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZSh0YXNrRGF0ZSkgOiB0YXNrRGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJpZmljYXIgZXhpc3RlbmNpYVxyXG4gICAgaWYgKGZpbHRlckNyaXRlcmlhLmV4aXN0cyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnN0IGhhc0RhdGUgPSBkYXRlT2JqICE9PSBudWxsO1xyXG4gICAgICBpZiAoaGFzRGF0ZSAhPT0gZmlsdGVyQ3JpdGVyaWEuZXhpc3RzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU29sbyBzZWd1aXIgdmVyaWZpY2FuZG8gc2kgbGEgdGFyZWEgdGllbmUgZmVjaGFcclxuICAgIGlmICghZGF0ZU9iaikgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgLy8gQ29tcGFyYXIgY29uIGZlY2hhcyBlc3BlY1x1MDBFRGZpY2FzXHJcbiAgICBpZiAoZmlsdGVyQ3JpdGVyaWEuYmVmb3JlICYmIGRhdGVPYmogPj0gZmlsdGVyQ3JpdGVyaWEuYmVmb3JlKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoZmlsdGVyQ3JpdGVyaWEub24pIHtcclxuICAgICAgY29uc3Qgb25EYXRlID0gZmlsdGVyQ3JpdGVyaWEub247XHJcbiAgICAgIGlmIChkYXRlT2JqLmdldEZ1bGxZZWFyKCkgIT09IG9uRGF0ZS5nZXRGdWxsWWVhcigpIHx8XHJcbiAgICAgICAgICBkYXRlT2JqLmdldE1vbnRoKCkgIT09IG9uRGF0ZS5nZXRNb250aCgpIHx8XHJcbiAgICAgICAgICBkYXRlT2JqLmdldERhdGUoKSAhPT0gb25EYXRlLmdldERhdGUoKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGZpbHRlckNyaXRlcmlhLmFmdGVyICYmIGRhdGVPYmogPD0gZmlsdGVyQ3JpdGVyaWEuYWZ0ZXIpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF1eGlsaWFyIHBhcmEgdmVyaWZpY2FyIGZpbHRyb3MgZGUgZmVjaGEgcmVsYXRpdm9zXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBtYXRjaGVzUmVsYXRpdmVEYXRlRmlsdGVyKHRhc2tEYXRlOiBEYXRlIHwgc3RyaW5nIHwgbnVsbCwgZmlsdGVyQ3JpdGVyaWE6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCF0YXNrRGF0ZSkgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgY29uc3QgZGF0ZU9iaiA9IHR5cGVvZiB0YXNrRGF0ZSA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZSh0YXNrRGF0ZSkgOiB0YXNrRGF0ZTtcclxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG5cclxuICAgIC8vIFZlcmlmaWNhciB2ZW5jaWRhXHJcbiAgICBpZiAoZmlsdGVyQ3JpdGVyaWEub3ZlcmR1ZSkge1xyXG4gICAgICBjb25zdCBpc092ZXJkdWUgPSBkYXRlT2JqIDwgdG9kYXk7XHJcbiAgICAgIGlmICghaXNPdmVyZHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVyaWZpY2FyIHBhcmEgaG95XHJcbiAgICBpZiAoZmlsdGVyQ3JpdGVyaWEudG9kYXkpIHtcclxuICAgICAgY29uc3QgaXNUb2RheSA9IGRhdGVPYmouZ2V0RnVsbFllYXIoKSA9PT0gdG9kYXkuZ2V0RnVsbFllYXIoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVPYmouZ2V0TW9udGgoKSA9PT0gdG9kYXkuZ2V0TW9udGgoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVPYmouZ2V0RGF0ZSgpID09PSB0b2RheS5nZXREYXRlKCk7XHJcbiAgICAgIGlmICghaXNUb2RheSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFZlcmlmaWNhciBwYXJhIG1hXHUwMEYxYW5hXHJcbiAgICBpZiAoZmlsdGVyQ3JpdGVyaWEudG9tb3Jyb3cpIHtcclxuICAgICAgY29uc3QgdG9tb3Jyb3cgPSBuZXcgRGF0ZSh0b2RheSk7XHJcbiAgICAgIHRvbW9ycm93LnNldERhdGUodG9tb3Jyb3cuZ2V0RGF0ZSgpICsgMSk7XHJcbiAgICAgIGNvbnN0IGlzVG9tb3Jyb3cgPSBkYXRlT2JqLmdldEZ1bGxZZWFyKCkgPT09IHRvbW9ycm93LmdldEZ1bGxZZWFyKCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZU9iai5nZXRNb250aCgpID09PSB0b21vcnJvdy5nZXRNb250aCgpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVPYmouZ2V0RGF0ZSgpID09PSB0b21vcnJvdy5nZXREYXRlKCk7XHJcbiAgICAgIGlmICghaXNUb21vcnJvdykgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFZlcmlmaWNhciBlc3RhIHNlbWFuYVxyXG4gICAgaWYgKGZpbHRlckNyaXRlcmlhLnRoaXNXZWVrKSB7XHJcbiAgICAgIGNvbnN0IGVuZE9mV2VlayA9IG5ldyBEYXRlKHRvZGF5KTtcclxuICAgICAgY29uc3QgZGF5c1VudGlsRW5kT2ZXZWVrID0gNyAtIHRvZGF5LmdldERheSgpO1xyXG4gICAgICBlbmRPZldlZWsuc2V0RGF0ZShlbmRPZldlZWsuZ2V0RGF0ZSgpICsgZGF5c1VudGlsRW5kT2ZXZWVrKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGlzVGhpc1dlZWsgPSBkYXRlT2JqID49IHRvZGF5ICYmIGRhdGVPYmogPD0gZW5kT2ZXZWVrO1xyXG4gICAgICBpZiAoIWlzVGhpc1dlZWspIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJpZmljYXIgcHJcdTAwRjN4aW1hIHNlbWFuYVxyXG4gICAgaWYgKGZpbHRlckNyaXRlcmlhLm5leHRXZWVrKSB7XHJcbiAgICAgIGNvbnN0IHN0YXJ0T2ZOZXh0V2VlayA9IG5ldyBEYXRlKHRvZGF5KTtcclxuICAgICAgY29uc3QgZGF5c1VudGlsTmV4dFdlZWsgPSA3IC0gdG9kYXkuZ2V0RGF5KCkgKyAxO1xyXG4gICAgICBzdGFydE9mTmV4dFdlZWsuc2V0RGF0ZShzdGFydE9mTmV4dFdlZWsuZ2V0RGF0ZSgpICsgZGF5c1VudGlsTmV4dFdlZWspO1xyXG5cclxuICAgICAgY29uc3QgZW5kT2ZOZXh0V2VlayA9IG5ldyBEYXRlKHN0YXJ0T2ZOZXh0V2Vlayk7XHJcbiAgICAgIGVuZE9mTmV4dFdlZWsuc2V0RGF0ZShlbmRPZk5leHRXZWVrLmdldERhdGUoKSArIDYpO1xyXG5cclxuICAgICAgY29uc3QgaXNOZXh0V2VlayA9IGRhdGVPYmogPj0gc3RhcnRPZk5leHRXZWVrICYmIGRhdGVPYmogPD0gZW5kT2ZOZXh0V2VlaztcclxuICAgICAgaWYgKCFpc05leHRXZWVrKSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVyaWZpY2FyIGRcdTAwRURhcyBwYXNhZG9zXHJcbiAgICBpZiAoZmlsdGVyQ3JpdGVyaWEucGFzdERheXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBwYXN0RGF0ZSA9IG5ldyBEYXRlKHRvZGF5KTtcclxuICAgICAgcGFzdERhdGUuc2V0RGF0ZShwYXN0RGF0ZS5nZXREYXRlKCkgLSBmaWx0ZXJDcml0ZXJpYS5wYXN0RGF5cyk7XHJcblxyXG4gICAgICBjb25zdCBpc0luUGFzdERheXMgPSBkYXRlT2JqID49IHBhc3REYXRlICYmIGRhdGVPYmogPCB0b2RheTtcclxuICAgICAgaWYgKCFpc0luUGFzdERheXMpIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJpZmljYXIgZFx1MDBFRGFzIGZ1dHVyb3NcclxuICAgIGlmIChmaWx0ZXJDcml0ZXJpYS5mdXR1cmVEYXlzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgY29uc3QgZnV0dXJlRGF0ZSA9IG5ldyBEYXRlKHRvZGF5KTtcclxuICAgICAgZnV0dXJlRGF0ZS5zZXREYXRlKGZ1dHVyZURhdGUuZ2V0RGF0ZSgpICsgZmlsdGVyQ3JpdGVyaWEuZnV0dXJlRGF5cyk7XHJcblxyXG4gICAgICBjb25zdCBpc0luRnV0dXJlRGF5cyA9IGRhdGVPYmogPj0gdG9kYXkgJiYgZGF0ZU9iaiA8PSBmdXR1cmVEYXRlO1xyXG4gICAgICBpZiAoIWlzSW5GdXR1cmVEYXlzKSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZmljYSBzaSB1bmEgdGFyZWEgY29pbmNpZGUgY29uIGxvcyBmaWx0cm9zIGRlIHViaWNhY2lcdTAwRjNuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBtYXRjaGVzTG9jYXRpb25GaWx0ZXJzKHRhc2s6IElUYXNrLCBjcml0ZXJpYTogVGFza0ZpbHRlckNyaXRlcmlhKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIWNyaXRlcmlhLmxvY2F0aW9uKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAvLyBGaWx0cmFyIHBvciBjYXJwZXRhXHJcbiAgICBpZiAoY3JpdGVyaWEubG9jYXRpb24uZm9sZGVyKSB7XHJcbiAgICAgIGNvbnN0IHRhc2tGb2xkZXIgPSB0YXNrLmZpbGVQYXRoPy5zdWJzdHJpbmcoMCwgdGFzay5maWxlUGF0aC5sYXN0SW5kZXhPZignLycpICsgMSkgfHwgJyc7XHJcbiAgICAgIGlmICghdGFza0ZvbGRlci5zdGFydHNXaXRoKGNyaXRlcmlhLmxvY2F0aW9uLmZvbGRlcikpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGaWx0cmFyIHBvciBhcmNoaXZvXHJcbiAgICBpZiAoY3JpdGVyaWEubG9jYXRpb24uZmlsZSkge1xyXG4gICAgICBpZiAoIXRhc2suZmlsZVBhdGg/LmluY2x1ZGVzKGNyaXRlcmlhLmxvY2F0aW9uLmZpbGUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZmljYSBzaSB1bmEgdGFyZWEgY29pbmNpZGUgY29uIGxvcyBmaWx0cm9zIGF2YW56YWRvc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgbWF0Y2hlc0FkdmFuY2VkRmlsdGVycyh0YXNrOiBJVGFzaywgY3JpdGVyaWE6IFRhc2tGaWx0ZXJDcml0ZXJpYSk6IGJvb2xlYW4ge1xyXG4gICAgLy8gRmlsdHJvcyBkZSByZWN1cnJlbmNpYVxyXG4gICAgaWYgKGNyaXRlcmlhLnJlY3VycmVuY2UpIHtcclxuICAgICAgY29uc3QgaGFzUmVjdXJyZW5jZSA9ICEhdGFzay5yZWN1cnJlbmNlICYmIHRhc2sucmVjdXJyZW5jZS5sZW5ndGggPiAwO1xyXG5cclxuICAgICAgLy8gVmVyaWZpY2FyIHNpIHRpZW5lIHJlY3VycmVuY2lhXHJcbiAgICAgIGlmIChjcml0ZXJpYS5yZWN1cnJlbmNlLmhhcyAhPT0gdW5kZWZpbmVkICYmIGhhc1JlY3VycmVuY2UgIT09IGNyaXRlcmlhLnJlY3VycmVuY2UuaGFzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBWZXJpZmljYXIgcGF0clx1MDBGM24gZXNwZWNcdTAwRURmaWNvXHJcbiAgICAgIGlmIChjcml0ZXJpYS5yZWN1cnJlbmNlLnBhdHRlcm4gJiYgdGFzay5yZWN1cnJlbmNlKSB7XHJcbiAgICAgICAgaWYgKCF0YXNrLnJlY3VycmVuY2UuaW5jbHVkZXMoY3JpdGVyaWEucmVjdXJyZW5jZS5wYXR0ZXJuKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZpbHRyb3MgZGUgZGVwZW5kZW5jaWFzXHJcbiAgICBpZiAoY3JpdGVyaWEuZGVwZW5kZW5jaWVzKSB7XHJcbiAgICAgIGNvbnN0IGhhc0RlcGVuZGVuY2llcyA9ICEhdGFzay5kZXBlbmRzT24gJiYgdGFzay5kZXBlbmRzT24ubGVuZ3RoID4gMDtcclxuXHJcbiAgICAgIC8vIFZlcmlmaWNhciBzaSB0aWVuZSBkZXBlbmRlbmNpYXNcclxuICAgICAgaWYgKGNyaXRlcmlhLmRlcGVuZGVuY2llcy5oYXMgIT09IHVuZGVmaW5lZCAmJiBoYXNEZXBlbmRlbmNpZXMgIT09IGNyaXRlcmlhLmRlcGVuZGVuY2llcy5oYXMpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgLy8gTm90YTogUGFyYSBibG9ja2luZyB5IGJsb2NrZWRCeSBuZWNlc2l0YXJcdTAwRURhbW9zIGltcGxlbWVudGFyIHJlbGFjaW9uZXMgZW50cmUgdGFyZWFzXHJcbiAgICAgIC8vIEVzdG8gcmVxdWVyaXJcdTAwRURhIGltcGxlbWVudGFjaVx1MDBGM24gYWRpY2lvbmFsXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcmRlbmEgdGFyZWFzIHBvciBtXHUwMEZBbHRpcGxlcyBjYW1wb3NcclxuICAgKi9cclxuICBwcml2YXRlIHNvcnRUYXNrc0J5TXVsdGlwbGVGaWVsZHMoXHJcbiAgICB0YXNrczogSVRhc2tbXSwgXHJcbiAgICBzb3J0RmllbGRzOiBTb3J0RmllbGRbXSwgXHJcbiAgICBkaXJlY3Rpb25zOiAoJ2FzYycgfCAnZGVzYycpW11cclxuICApOiBJVGFza1tdIHtcclxuICAgIGlmICghc29ydEZpZWxkcyB8fCBzb3J0RmllbGRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRhc2tzO1xyXG5cclxuICAgIGNvbnN0IHNvcnRlZFRhc2tzID0gWy4uLnRhc2tzXTsgLy8gQ3JlYXIgY29waWEgcGFyYSBubyBtb2RpZmljYXIgZWwgb3JpZ2luYWxcclxuXHJcbiAgICBzb3J0ZWRUYXNrcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc29ydEZpZWxkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGZpZWxkID0gc29ydEZpZWxkc1tpXTtcclxuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zICYmIGRpcmVjdGlvbnNbaV0gPyBkaXJlY3Rpb25zW2ldIDogJ2FzYyc7XHJcbiAgICAgICAgY29uc3QgZGlyRmFjdG9yID0gZGlyZWN0aW9uID09PSAnYXNjJyA/IDEgOiAtMTtcclxuICAgICAgICBjb25zdCBjb21wYXJlUmVzdWx0ID0gdGhpcy5jb21wYXJlVGFza3MoYSwgYiwgZmllbGQpICogZGlyRmFjdG9yO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjb21wYXJlUmVzdWx0ICE9PSAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gY29tcGFyZVJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIDA7IC8vIFNpIHRvZG9zIGxvcyBjYW1wb3Mgc29uIGlndWFsZXNcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNvcnRlZFRhc2tzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29tcGFyYSBkb3MgdGFyZWFzIHBvciB1biBjYW1wbyBlc3BlY1x1MDBFRGZpY29cclxuICAgKi9cclxuICBwcml2YXRlIGNvbXBhcmVUYXNrcyhhOiBJVGFzaywgYjogSVRhc2ssIGZpZWxkOiBTb3J0RmllbGQpOiBudW1iZXIge1xyXG4gICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgICBjYXNlICdkdWVEYXRlJzpcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlRGF0ZXMoYS5kdWVEYXRlLCBiLmR1ZURhdGUpO1xyXG4gICAgICBjYXNlICdzdGFydERhdGUnOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVEYXRlcyhhLnN0YXJ0RGF0ZSwgYi5zdGFydERhdGUpO1xyXG4gICAgICBjYXNlICdzY2hlZHVsZWREYXRlJzpcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlRGF0ZXMoYS5zY2hlZHVsZWREYXRlLCBiLnNjaGVkdWxlZERhdGUpO1xyXG4gICAgICBjYXNlICdkb25lRGF0ZSc6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZURhdGVzKGEuZG9uZURhdGUsIGIuZG9uZURhdGUpO1xyXG4gICAgICBjYXNlICdjcmVhdGVkRGF0ZSc6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZURhdGVzKGEuY3JlYXRlZERhdGUsIGIuY3JlYXRlZERhdGUpO1xyXG4gICAgICBjYXNlICdwcmlvcml0eSc6XHJcbiAgICAgICAgY29uc3QgcHJpb3JpdHlNYXA6IHtba2V5OiBzdHJpbmddOiBudW1iZXJ9ID0ge1xyXG4gICAgICAgICAgJ2hpZ2gnOiAxLFxyXG4gICAgICAgICAgJ21lZGl1bSc6IDIsXHJcbiAgICAgICAgICAnbG93JzogMyxcclxuICAgICAgICAgICd1bmRlZmluZWQnOiA0XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBwcmlvcml0eUEgPSBwcmlvcml0eU1hcFthLnByaW9yaXR5IHx8ICd1bmRlZmluZWQnXSB8fCA0O1xyXG4gICAgICAgIGNvbnN0IHByaW9yaXR5QiA9IHByaW9yaXR5TWFwW2IucHJpb3JpdHkgfHwgJ3VuZGVmaW5lZCddIHx8IDQ7XHJcbiAgICAgICAgcmV0dXJuIHByaW9yaXR5QSAtIHByaW9yaXR5QjtcclxuICAgICAgY2FzZSAnc3RhdHVzJzpcclxuICAgICAgICBjb25zdCBzdGF0dXNNYXA6IHtba2V5OiBzdHJpbmddOiBudW1iZXJ9ID0ge1xyXG4gICAgICAgICAgJ1RPRE8nOiAxLFxyXG4gICAgICAgICAgJ0lOX1BST0dSRVNTJzogMixcclxuICAgICAgICAgICdCTE9DS0VEJzogMyxcclxuICAgICAgICAgICdET05FJzogNCxcclxuICAgICAgICAgICdDQU5DRUxMRUQnOiA1XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBzdGF0dXNBID0gc3RhdHVzTWFwW2Euc3RhdHVzIHx8ICdUT0RPJ10gfHwgMTtcclxuICAgICAgICBjb25zdCBzdGF0dXNCID0gc3RhdHVzTWFwW2Iuc3RhdHVzIHx8ICdUT0RPJ10gfHwgMTtcclxuICAgICAgICByZXR1cm4gc3RhdHVzQSAtIHN0YXR1c0I7XHJcbiAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgIHJldHVybiAoYS50ZXh0IHx8ICcnKS5sb2NhbGVDb21wYXJlKGIudGV4dCB8fCAnJyk7XHJcbiAgICAgIGNhc2UgJ3BhdGgnOlxyXG4gICAgICAgIHJldHVybiAoYS5maWxlUGF0aCB8fCAnJykubG9jYWxlQ29tcGFyZShiLmZpbGVQYXRoIHx8ICcnKTtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbXBhcmEgZG9zIGZlY2hhcywgbWFuZWphbmRvIHZhbG9yZXMgbnVsb3NcclxuICAgKi9cclxuICBwcml2YXRlIGNvbXBhcmVEYXRlcyhkYXRlQTogRGF0ZSB8IHN0cmluZyB8IG51bGwsIGRhdGVCOiBEYXRlIHwgc3RyaW5nIHwgbnVsbCk6IG51bWJlciB7XHJcbiAgICAvLyBDb252ZXJ0aXIgYSBEYXRlIHNpIGVzIHN0cmluZ1xyXG4gICAgY29uc3QgZGF0ZU9iakEgPSBkYXRlQSA/ICh0eXBlb2YgZGF0ZUEgPT09ICdzdHJpbmcnID8gbmV3IERhdGUoZGF0ZUEpIDogZGF0ZUEpIDogbnVsbDtcclxuICAgIGNvbnN0IGRhdGVPYmpCID0gZGF0ZUIgPyAodHlwZW9mIGRhdGVCID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKGRhdGVCKSA6IGRhdGVCKSA6IG51bGw7XHJcbiAgICBcclxuICAgIC8vIE1hbmVqYXIgY2Fzb3MgY29uIG51bGwgKG51bGwgc2llbXByZSB2YSBkZXNwdVx1MDBFOXMpXHJcbiAgICBpZiAoZGF0ZU9iakEgPT09IG51bGwgJiYgZGF0ZU9iakIgPT09IG51bGwpIHJldHVybiAwO1xyXG4gICAgaWYgKGRhdGVPYmpBID09PSBudWxsKSByZXR1cm4gMTtcclxuICAgIGlmIChkYXRlT2JqQiA9PT0gbnVsbCkgcmV0dXJuIC0xO1xyXG4gICAgXHJcbiAgICAvLyBDb21wYXJhciBmZWNoYXMgbm9ybWFsbWVudGVcclxuICAgIHJldHVybiBkYXRlT2JqQS5nZXRUaW1lKCkgLSBkYXRlT2JqQi5nZXRUaW1lKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZ3J1cGEgdGFyZWFzIHBvciB1biBjYW1wbyBlc3BlY1x1MDBFRGZpY29cclxuICAgKi9cclxuICBwcml2YXRlIGdyb3VwVGFza3ModGFza3M6IElUYXNrW10sIGdyb3VwRmllbGQ6IEdyb3VwRmllbGQpOiBJVGFza1tdIHtcclxuICAgIGNvbnN0IGdyb3VwZWRUYXNrcyA9IG5ldyBNYXA8c3RyaW5nLCBJVGFza1tdPigpO1xyXG5cclxuICAgIC8vIEFncnVwYXIgdGFyZWFzXHJcbiAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xyXG4gICAgICBsZXQgZ3JvdXBLZXkgPSAnVW5rbm93bic7XHJcblxyXG4gICAgICBzd2l0Y2ggKGdyb3VwRmllbGQpIHtcclxuICAgICAgICBjYXNlICdzdGF0dXMnOlxyXG4gICAgICAgICAgZ3JvdXBLZXkgPSB0YXNrLnN0YXR1cyB8fCAnVW5rbm93bic7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdwcmlvcml0eSc6XHJcbiAgICAgICAgICBncm91cEtleSA9IHRhc2sucHJpb3JpdHkgfHwgJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdkdWVEYXRlJzpcclxuICAgICAgICAgIGlmICghdGFzay5kdWVEYXRlKSB7XHJcbiAgICAgICAgICAgIGdyb3VwS2V5ID0gJ05vIER1ZSBEYXRlJztcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR1ZURhdGUgPSB0eXBlb2YgdGFzay5kdWVEYXRlID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKHRhc2suZHVlRGF0ZSkgOiB0YXNrLmR1ZURhdGU7XHJcbiAgICAgICAgICAgIGdyb3VwS2V5ID0gZHVlRGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07IC8vIFlZWVktTU0tRERcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3BhdGgnOlxyXG4gICAgICAgICAgaWYgKHRhc2suZmlsZVBhdGgpIHtcclxuICAgICAgICAgICAgY29uc3QgbGFzdFNsYXNoSW5kZXggPSB0YXNrLmZpbGVQYXRoLmxhc3RJbmRleE9mKCcvJyk7XHJcbiAgICAgICAgICAgIGdyb3VwS2V5ID0gbGFzdFNsYXNoSW5kZXggPiAwID8gdGFzay5maWxlUGF0aC5zdWJzdHJpbmcoMCwgbGFzdFNsYXNoSW5kZXgpIDogJy8nO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ3JvdXBLZXkgPSAnVW5rbm93bic7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICd0YWdzJzpcclxuICAgICAgICAgIGlmICghdGFzay50YWdzIHx8IHRhc2sudGFncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgZ3JvdXBLZXkgPSAnTm8gVGFncyc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBVc2Ftb3MgbGEgcHJpbWVyYSBldGlxdWV0YSBjb21vIGNsYXZlIGRlIGdydXBvXHJcbiAgICAgICAgICAgIGdyb3VwS2V5ID0gdGFzay50YWdzWzBdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghZ3JvdXBlZFRhc2tzLmhhcyhncm91cEtleSkpIHtcclxuICAgICAgICBncm91cGVkVGFza3Muc2V0KGdyb3VwS2V5LCBbXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGdyb3VwZWRUYXNrcy5nZXQoZ3JvdXBLZXkpPy5wdXNoKHRhc2spO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIENvbnZlcnRpciBlbCBtYXBhIGVuIHVuIGFycmF5IGRlIHRhcmVhcyBjb24gcHJvcGllZGFkIGRlIGdydXBvXHJcbiAgICBjb25zdCByZXN1bHQ6IElUYXNrW10gPSBbXTtcclxuICAgIFxyXG4gICAgZ3JvdXBlZFRhc2tzLmZvckVhY2goKHRhc2tzSW5Hcm91cCwgZ3JvdXBLZXkpID0+IHtcclxuICAgICAgLy8gT3BjaW9uYWxtZW50ZSBwb2RyXHUwMEVEYXMgYVx1MDBGMWFkaXIgYXF1XHUwMEVEIHVuYSB0YXJlYSBcImNhYmVjZXJhXCIgcGFyYSBjYWRhIGdydXBvXHJcbiAgICAgIC8vIE8gcG9kclx1MDBFRGFzIG1vZGlmaWNhciB0dSBpbnRlcmZheiBJVGFzayBwYXJhIGluY2x1aXIgdW5hIHByb3BpZWRhZCBkZSBncnVwb1xyXG5cclxuICAgICAgLy8gUG9yIGFob3JhLCBzb2xvIGFcdTAwRjFhZGltb3MgbGFzIHRhcmVhcyBjb24gdW5hIHByb3BpZWRhZCB0ZW1wb3JhbFxyXG4gICAgICB0YXNrc0luR3JvdXAuZm9yRWFjaCh0YXNrID0+IHtcclxuICAgICAgICByZXN1bHQucHVzaCh7XHJcbiAgICAgICAgICAuLi50YXNrLFxyXG4gICAgICAgICAgZ3JvdXBMYWJlbDogZ3JvdXBLZXkgLy8gRXN0YSBwcm9waWVkYWQgbm8gZXN0XHUwMEUxIGVuIElUYXNrLCBkZWJlclx1MDBFRGFzIGFcdTAwRjFhZGlybGFcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59IiwgImltcG9ydCB7IGNyZWF0ZUxvZ2dlciwgZm9ybWF0LCB0cmFuc3BvcnRzIH0gZnJvbSAnd2luc3Rvbic7XHJcblxyXG5jb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xyXG4gIGxldmVsOiAnZGVidWcnLCAvLyBOaXZlbCBtXHUwMEVEbmltbyBkZSBsb2dnaW5nIChwdWVkZSBzZXIgJ2Vycm9yJywgJ3dhcm4nLCAnaW5mbycsICdkZWJ1ZycsIGV0Yy4pXHJcbiAgZm9ybWF0OiBmb3JtYXQuY29tYmluZShcclxuICAgIGZvcm1hdC50aW1lc3RhbXAoeyBmb3JtYXQ6ICdZWVlZLU1NLUREIEhIOm1tOnNzJyB9KSxcclxuICAgIGZvcm1hdC5wcmludGYoKHsgdGltZXN0YW1wLCBsZXZlbCwgbWVzc2FnZSB9KSA9PiB7XHJcbiAgICAgIHJldHVybiBgWyR7dGltZXN0YW1wfV0gWyR7bGV2ZWwudG9VcHBlckNhc2UoKX1dOiAke21lc3NhZ2V9YDtcclxuICAgIH0pXHJcbiAgKSxcclxuICB0cmFuc3BvcnRzOiBbXHJcbiAgICBuZXcgdHJhbnNwb3J0cy5Db25zb2xlKCksIC8vIExvZyBlbiBsYSBjb25zb2xhXHJcbiAgICBuZXcgdHJhbnNwb3J0cy5GaWxlKHsgZmlsZW5hbWU6ICdvYnNpZGlhbi1hZ2VuZGEubG9nJyxcclxuICAgICAgbGV2ZWw6ICdlcnJvcicsXHJcbiAgICAgIGZvcm1hdDogZm9ybWF0Lmpzb24oKSB9KSAvLyBMb2cgZW4gdW4gYXJjaGl2b1xyXG4gIF0sXHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyOyIsIG51bGwsIG51bGwsIG51bGwsIG51bGwsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wsIEl0ZXJhdG9yICovXG5cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxuXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgfVxuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxuICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XG4gIHZhciBfLCBkb25lID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcbiAgICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XG4gIGRvbmUgPSB0cnVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcbiAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XG4gIH1cbiAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZyA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBJdGVyYXRvciA9PT0gXCJmdW5jdGlvblwiID8gSXRlcmF0b3IgOiBPYmplY3QpLnByb3RvdHlwZSk7XG4gIHJldHVybiBnLm5leHQgPSB2ZXJiKDApLCBnW1widGhyb3dcIl0gPSB2ZXJiKDEpLCBnW1wicmV0dXJuXCJdID0gdmVyYigyKSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0gT2JqZWN0LmNyZWF0ZSgodHlwZW9mIEFzeW5jSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEFzeW5jSXRlcmF0b3IgOiBPYmplY3QpLnByb3RvdHlwZSksIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiwgYXdhaXRSZXR1cm4pLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIGF3YWl0UmV0dXJuKGYpIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUodikudGhlbihmLCByZWplY3QpOyB9OyB9XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAoZ1tuXSkgeyBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyBpZiAoZikgaVtuXSA9IGYoaVtuXSk7IH0gfVxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XG4gIHZhciBpLCBwO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICByZXR1cm4gY29va2VkO1xufTtcblxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxudmFyIG93bktleXMgPSBmdW5jdGlvbihvKSB7XG4gIG93bktleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiAobykge1xuICAgIHZhciBhciA9IFtdO1xuICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgcmV0dXJuIGFyO1xuICB9O1xuICByZXR1cm4gb3duS2V5cyhvKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrID0gb3duS2V5cyhtb2QpLCBpID0gMDsgaSA8IGsubGVuZ3RoOyBpKyspIGlmIChrW2ldICE9PSBcImRlZmF1bHRcIikgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrW2ldKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2UsIGlubmVyO1xuICAgIGlmIChhc3luYykge1xuICAgICAgaWYgKCFTeW1ib2wuYXN5bmNEaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmRpc3Bvc2VdO1xuICAgICAgaWYgKGFzeW5jKSBpbm5lciA9IGRpc3Bvc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBpZiAoaW5uZXIpIGRpc3Bvc2UgPSBmdW5jdGlvbigpIHsgdHJ5IHsgaW5uZXIuY2FsbCh0aGlzKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7IH0gfTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgdmFyIHIsIHMgPSAwO1xuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChyID0gZW52LnN0YWNrLnBvcCgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIXIuYXN5bmMgJiYgcyA9PT0gMSkgcmV0dXJuIHMgPSAwLCBlbnYuc3RhY2sucHVzaChyKSwgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihuZXh0KTtcbiAgICAgICAgaWYgKHIuZGlzcG9zZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSByLmRpc3Bvc2UuY2FsbChyLnZhbHVlKTtcbiAgICAgICAgICBpZiAoci5hc3luYykgcmV0dXJuIHMgfD0gMiwgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgcyB8PSAxO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMgPT09IDEpIHJldHVybiBlbnYuaGFzRXJyb3IgPyBQcm9taXNlLnJlamVjdChlbnYuZXJyb3IpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jld3JpdGVSZWxhdGl2ZUltcG9ydEV4dGVuc2lvbihwYXRoLCBwcmVzZXJ2ZUpzeCkge1xuICBpZiAodHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgJiYgL15cXC5cXC4/XFwvLy50ZXN0KHBhdGgpKSB7XG4gICAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9cXC4odHN4KSR8KCg/OlxcLmQpPykoKD86XFwuW14uL10rPyk/KVxcLihbY21dPyl0cyQvaSwgZnVuY3Rpb24gKG0sIHRzeCwgZCwgZXh0LCBjbSkge1xuICAgICAgICAgIHJldHVybiB0c3ggPyBwcmVzZXJ2ZUpzeCA/IFwiLmpzeFwiIDogXCIuanNcIiA6IGQgJiYgKCFleHQgfHwgIWNtKSA/IG0gOiAoZCArIGV4dCArIFwiLlwiICsgY20udG9Mb3dlckNhc2UoKSArIFwianNcIik7XG4gICAgICB9KTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBfX2V4dGVuZHMsXG4gIF9fYXNzaWduLFxuICBfX3Jlc3QsXG4gIF9fZGVjb3JhdGUsXG4gIF9fcGFyYW0sXG4gIF9fZXNEZWNvcmF0ZSxcbiAgX19ydW5Jbml0aWFsaXplcnMsXG4gIF9fcHJvcEtleSxcbiAgX19zZXRGdW5jdGlvbk5hbWUsXG4gIF9fbWV0YWRhdGEsXG4gIF9fYXdhaXRlcixcbiAgX19nZW5lcmF0b3IsXG4gIF9fY3JlYXRlQmluZGluZyxcbiAgX19leHBvcnRTdGFyLFxuICBfX3ZhbHVlcyxcbiAgX19yZWFkLFxuICBfX3NwcmVhZCxcbiAgX19zcHJlYWRBcnJheXMsXG4gIF9fc3ByZWFkQXJyYXksXG4gIF9fYXdhaXQsXG4gIF9fYXN5bmNHZW5lcmF0b3IsXG4gIF9fYXN5bmNEZWxlZ2F0b3IsXG4gIF9fYXN5bmNWYWx1ZXMsXG4gIF9fbWFrZVRlbXBsYXRlT2JqZWN0LFxuICBfX2ltcG9ydFN0YXIsXG4gIF9faW1wb3J0RGVmYXVsdCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxuICBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSxcbiAgX19kaXNwb3NlUmVzb3VyY2VzLFxuICBfX3Jld3JpdGVSZWxhdGl2ZUltcG9ydEV4dGVuc2lvbixcbn07XG4iLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCAiaW1wb3J0IHsgT25Db21wbGV0aW9uLCBUYXNrUHJpb3JpdHlJY29uIH0gZnJvbSBcIi4uL3R5cGVzL2VudW1zLnRzXCI7XHJcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiLi4vY29yZS9pMThuXCI7XHJcbmltcG9ydCB7IFJSdWxlLCBycnVsZXN0ciB9IGZyb20gJ3JydWxlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUYXNrU2VjdGlvbiB7XHJcbiAgaGVhZGVyOiBzdHJpbmc7IC8vIFJlcHJlc2VudGEgZWwgZW5jYWJlemFkbyBkZSBsYSB0YXJlYVxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7IC8vIFJlcHJlc2VudGEgbGEgZGVzY3JpcGNpXHUwMEYzbiBkZSBsYSB0YXJlYVxyXG4gIHRhc2tzRmllbGRzOiBzdHJpbmdbXTsgLy8gUmVwcmVzZW50YSBsb3MgY2FtcG9zIGVzcGVjXHUwMEVEZmljb3MgZGUgbGEgdGFyZWEgY29tbyB1biBhcnJlZ2xvIGRlIHN0cmluZ3NcclxuICBibG9ja0xpbms6IHN0cmluZztcclxuICB0YXNrRGF0YTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xyXG5cclxuICAvKipcclxuICAgICAgICogRXhwcmVzaVx1MDBGM24gcmVndWxhciBwYXJhIHZhbGlkYXIgZWwgZm9ybWF0byBkZSB1bmEgdGFyZWEuXHJcbiAgICAgICAqIFxyXG4gICAgICAgKiBEZXNnbG9zZSBkZSBsYSBleHByZXNpXHUwMEYzbjpcclxuICAgICAgICogXHJcbiAgICAgICAqIF5bXFx0IF0qOlxyXG4gICAgICAgKiAtIFBlcm1pdGUgcXVlIGxhIGxcdTAwRURuZWEgY29taWVuY2UgY29uIGN1YWxxdWllciBjYW50aWRhZCBkZSB0YWJ1bGFjaW9uZXMgKGBcXHRgKSBvIGVzcGFjaW9zIChgIGApLlxyXG4gICAgICAgKiAtIEVzdG8gYXNlZ3VyYSBxdWUgbGFzIHRhcmVhcyBjb24gaW5kZW50YWNpXHUwMEYzbiBzZWFuIHZcdTAwRTFsaWRhcy5cclxuICAgICAgICogXHJcbiAgICAgICAqICg+KikgOlxyXG4gICAgICAgKiAtIFBlcm1pdGUgcXVlIGhheWEgY2VybyBvIG1cdTAwRTFzIGNhcmFjdGVyZXMgYD5gIGFsIGluaWNpbyBkZSBsYSBsXHUwMEVEbmVhLlxyXG4gICAgICAgKiAtIEVzdG8gcGVybWl0ZSBxdWUgbGFzIHRhcmVhcyBjaXRhZGFzIChwb3IgZWplbXBsbywgYD4gLSBbeF0gVGFyZWFgKSBvIGNvbiBtXHUwMEZBbHRpcGxlcyBjaXRhcyAoYD4+IC0gW3hdYCkgc2VhbiB2XHUwMEUxbGlkYXMuXHJcbiAgICAgICAqIFxyXG4gICAgICAgKiBcXHMqOlxyXG4gICAgICAgKiAtIFBlcm1pdGUgY3VhbHF1aWVyIGNhbnRpZGFkIGRlIGVzcGFjaW9zIGRlc3B1XHUwMEU5cyBkZSBsb3MgY2FyYWN0ZXJlcyBgPmAgKHNpIGVzdFx1MDBFMW4gcHJlc2VudGVzKS5cclxuICAgICAgICogXHJcbiAgICAgICAqICgtfFxcKnxcXCt8XFxkK1suKV0pOlxyXG4gICAgICAgKiAtIFZhbGlkYSBlbCBwcmVmaWpvIGRlIGxhIHRhcmVhOlxyXG4gICAgICAgKiAgIC0gYC1gOiBVbiBndWlvbi5cclxuICAgICAgICogICAtIGAqYDogVW4gYXN0ZXJpc2NvLlxyXG4gICAgICAgKiAgIC0gYCtgOiBVbiBzaWdubyBtXHUwMEUxcy5cclxuICAgICAgICogICAtIGBcXGQrWy4pXWA6IFVuIG5cdTAwRkFtZXJvIHNlZ3VpZG8gZGUgdW4gcHVudG8gKGAuYCkgbyB1biBwYXJcdTAwRTludGVzaXMgZGUgY2llcnJlIChgKWApLlxyXG4gICAgICAgKiAtIEVzdG8gYXNlZ3VyYSBxdWUgbGFzIHRhcmVhcyB0ZW5nYW4gdW4gZm9ybWF0byBkZSBsaXN0YSB2XHUwMEUxbGlkby5cclxuICAgICAgICogXHJcbiAgICAgICAqIHswLDR9OlxyXG4gICAgICAgKiAtIFBlcm1pdGUgaGFzdGEgNCBlc3BhY2lvcyBvcGNpb25hbGVzIGRlc3B1XHUwMEU5cyBkZWwgcHJlZmlqby5cclxuICAgICAgICogXHJcbiAgICAgICAqIFxcWyguKVxcXTpcclxuICAgICAgICogLSBWYWxpZGEgcXVlIGhheWEgY29yY2hldGVzIGBbIF1gIGNvbiBleGFjdGFtZW50ZSB1biBjYXJcdTAwRTFjdGVyIGRlbnRyby5cclxuICAgICAgICogLSBgKC4pYDogQ2FwdHVyYSBjdWFscXVpZXIgY2FyXHUwMEUxY3RlciBkZW50cm8gZGUgbG9zIGNvcmNoZXRlcy5cclxuICAgICAgICogLSBFc3RvIGFzZWd1cmEgcXVlIGxhcyB0YXJlYXMgdGVuZ2FuIHVuIGVzdGFkbyB2XHUwMEUxbGlkbyAocG9yIGVqZW1wbG8sIGBbeF1gLCBgWyBdYCwgYFs/XWApLlxyXG4gICAgICAgKiBcclxuICAgICAgICogezAsNH06XHJcbiAgICAgICAqIC0gUGVybWl0ZSBoYXN0YSA0IGVzcGFjaW9zIG9wY2lvbmFsZXMgZGVzcHVcdTAwRTlzIGRlIGxvcyBjb3JjaGV0ZXMuXHJcbiAgICAgICAqIFxyXG4gICAgICAgKiBcXFM6XHJcbiAgICAgICAqIC0gQXNlZ3VyYSBxdWUgaGF5YSBhbCBtZW5vcyB1biBjYXJcdTAwRTFjdGVyIG5vIHZhY1x1MDBFRG8gKG5vIGVzcGFjaW8pIGRlc3B1XHUwMEU5cyBkZSBsb3MgY29yY2hldGVzLlxyXG4gICAgICAgKiAtIEVzdG8gZXZpdGEgcXVlIGxhcyB0YXJlYXMgc2luIGNvbnRlbmlkbyBzZWFuIGNvbnNpZGVyYWRhcyB2XHUwMEUxbGlkYXMuXHJcbiAgICAgICAqIFxyXG4gICAgICAgKiAuKzpcclxuICAgICAgICogLSBSZXF1aWVyZSBxdWUgaGF5YSBtXHUwMEUxcyB0ZXh0byBkZXNwdVx1MDBFOXMgZGVsIHByaW1lciBjYXJcdTAwRTFjdGVyIG5vIHZhY1x1MDBFRG8uXHJcbiAgICAgICAqIC0gRXN0byBhc2VndXJhIHF1ZSBsYXMgdGFyZWFzIHRlbmdhbiB1bmEgZGVzY3JpcGNpXHUwMEYzbiBvIGNvbnRlbmlkby5cclxuICAgICAgICogXHJcbiAgICAgICAqIGc6XHJcbiAgICAgICAqIC0gQmFuZGVyYSBnbG9iYWwgcGFyYSBidXNjYXIgdG9kYXMgbGFzIGNvaW5jaWRlbmNpYXMgZW4gZWwgdGV4dG8uXHJcbiAgICAgICAqIFxyXG4gICAgICAgKiBFamVtcGxvIGRlIHRhcmVhcyB2XHUwMEUxbGlkYXM6XHJcbiAgICAgICAqIC0gYC0gW3hdIFRhcmVhIGNvbXBsZXRhZGFgXHJcbiAgICAgICAqIC0gYD4gLSBbIF0gVGFyZWEgcGVuZGllbnRlYFxyXG4gICAgICAgKiAtIGA+PiAtIFsvXSBUYXJlYSBlbiBwcm9ncmVzb2BcclxuICAgICAgICogLSBgMS4gW3hdIFRhcmVhIG51bWVyYWRhYFxyXG4gICAgICAgKiBcclxuICAgICAgICogRWplbXBsbyBkZSB0YXJlYXMgbm8gdlx1MDBFMWxpZGFzOlxyXG4gICAgICAgKiAtIGBUZXh0byBhbGVhdG9yaW8gLSBbeF0gVGFyZWEgaW52XHUwMEUxbGlkYWAgKHRleHRvIGFudGVzIGRlbCBwcmVmaWpvKS5cclxuICAgICAgICogLSBgLSBbXSBUYXJlYSBpbnZcdTAwRTFsaWRhYCAoc2luIGNhclx1MDBFMWN0ZXIgZGVudHJvIGRlIGxvcyBjb3JjaGV0ZXMpLlxyXG4gICAgICAgKiAtIGAtIFt4XWAgKHNpbiB0ZXh0byBkZXNwdVx1MDBFOXMgZGUgbG9zIGNvcmNoZXRlcykuXHJcbiAgICAgICAqL1xyXG4gIC8vIFByb3BpZWRhZGVzIHBhcmEgbGFzIGV4cHJlc2lvbmVzIHJlZ3VsYXJlc1xyXG4gIHByaXZhdGUgaGVhZGVyUmVnZXg6IFJlZ0V4cDtcclxuICBwcml2YXRlIGljb25SZWdleDogUmVnRXhwO1xyXG5cclxuICAvLyBOdWV2YSBwcm9waWVkYWQgZXN0XHUwMEUxdGljYSBwYXJhIGVsIGZvcm1hdG8gZGUgdGFyZWFzXHJcbiAgc3RhdGljIHJlYWRvbmx5IHRhc2tGb3JtYXRSZWdleDogUmVnRXhwID0gL15bXFx0IF0qKD4qKVxccyooLXxcXCp8XFwrfFxcZCtbLildKSB7MCw0fVxcWyguKVxcXSB7MCw0fVxcUy4rL2c7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgaWNvbk1hcHBpbmcgPSB7XHJcbiAgICAvLyBJY29ub3MgZGUgZmVjaGFzXHJcbiAgICBcIlx1RDgzRFx1RENDNVwiOiB7IHR5cGU6IFwiZGF0ZVwiLCBwcm9wZXJ0eTogXCJkdWVEYXRlXCIsIGZvcm1hdDogXCJZWVlZLU1NLUREXCIgfSxcclxuICAgIFwiXHVEODNEXHVERUVCXCI6IHsgdHlwZTogXCJkYXRlXCIsIHByb3BlcnR5OiBcInN0YXJ0RGF0ZVwiLCBmb3JtYXQ6IFwiWVlZWS1NTS1ERFwiIH0sXHJcbiAgICBcIlx1MjNGM1wiOiB7IHR5cGU6IFwiZGF0ZVwiLCBwcm9wZXJ0eTogXCJzY2hlZHVsZWREYXRlXCIsIGZvcm1hdDogXCJZWVlZLU1NLUREXCIgfSxcclxuICAgIFwiXHUyNzA1XCI6IHsgdHlwZTogXCJkYXRlXCIsIHByb3BlcnR5OiBcImRvbmVEYXRlXCIsIGZvcm1hdDogXCJZWVlZLU1NLUREXCIgfSxcclxuICAgIFwiXHUyNzRDXCI6IHsgdHlwZTogXCJkYXRlXCIsIHByb3BlcnR5OiBcImNhbmNlbGxlZERhdGVcIiwgZm9ybWF0OiBcIllZWVktTU0tRERcIiB9LFxyXG4gICAgXCJcdTI3OTVcIjogeyB0eXBlOiBcImRhdGVcIiwgcHJvcGVydHk6IFwiY3JlYXRlZERhdGVcIiwgZm9ybWF0OiBcIllZWVktTU0tRERcIiB9LFxyXG4gICAgXHJcbiAgICAvLyBJY29ub3MgZGUgcHJpb3JpZGFkIGNvbiBub21icmUgbGVnaWJsZVxyXG4gICAgXCJcdTIzRUNcIjogeyB0eXBlOiBcInByaW9yaXR5XCIsIHByb3BlcnR5OiBcInByaW9yaXR5XCIsIHZhbHVlOiBUYXNrUHJpb3JpdHlJY29uLkxvd2VzdCwgbmFtZTogXCJsb3dlc3RcIiB9LFxyXG4gICAgXCJcdUQ4M0RcdUREM0RcIjogeyB0eXBlOiBcInByaW9yaXR5XCIsIHByb3BlcnR5OiBcInByaW9yaXR5XCIsIHZhbHVlOiBUYXNrUHJpb3JpdHlJY29uLkxvdywgbmFtZTogXCJsb3dcIiB9LFxyXG4gICAgXCJcdUQ4M0RcdUREM0NcIjogeyB0eXBlOiBcInByaW9yaXR5XCIsIHByb3BlcnR5OiBcInByaW9yaXR5XCIsIHZhbHVlOiBUYXNrUHJpb3JpdHlJY29uLk1lZGl1bSwgbmFtZTogXCJtZWRpdW1cIiB9LFxyXG4gICAgXCJcdTIzRUJcIjogeyB0eXBlOiBcInByaW9yaXR5XCIsIHByb3BlcnR5OiBcInByaW9yaXR5XCIsIHZhbHVlOiBUYXNrUHJpb3JpdHlJY29uLkhpZ2gsIG5hbWU6IFwiaGlnaFwiIH0sXHJcbiAgICBcIlx1RDgzRFx1REQzQVwiOiB7IHR5cGU6IFwicHJpb3JpdHlcIiwgcHJvcGVydHk6IFwicHJpb3JpdHlcIiwgdmFsdWU6IFRhc2tQcmlvcml0eUljb24uSGlnaGVzdCwgbmFtZTogXCJoaWdoZXN0XCIgfSxcclxuXHJcbiAgICAvLyBPdHJvcyBpY29ub3NcclxuICAgIFwiXHVEODNEXHVERDAxXCI6IHsgdHlwZTogXCJyZWN1cnJlbmNlXCIsIHByb3BlcnR5OiBcInJlY3VycmVuY2VcIiB9LFxyXG4gICAgXCJcdUQ4M0NcdUREOTRcIjogeyB0eXBlOiBcImlkXCIsIHByb3BlcnR5OiBcImlkXCIgfSxcclxuICAgIFwiXHUyNkQ0XCI6IHsgdHlwZTogXCJibG9ja2VkXCIsIHByb3BlcnR5OiBcImJsb2NrZWRCeVwiIH0sXHJcbiAgICBcIlx1RDgzQ1x1REZDMVwiOiB7IHR5cGU6IFwiY29tcGxldGlvblwiLCBwcm9wZXJ0eTogXCJvbkNvbXBsZXRpb25cIiwgXHJcbiAgICAgICAgICAgIHZhbHVlczogW09uQ29tcGxldGlvbi5LZWVwLCBPbkNvbXBsZXRpb24uRGVsZXRlXSB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuOiBJMThuKSB7XHJcbiAgICAgIC8vIEluaWNpYWxpemFyIGxhcyBwcm9waWVkYWRlcyBjb21vIGNhZGVuYXMgdmFjXHUwMEVEYXNcclxuICAgICAgdGhpcy5oZWFkZXIgPSBcIlwiO1xyXG4gICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJcIjtcclxuICAgICAgdGhpcy50YXNrc0ZpZWxkcyA9IFtdO1xyXG4gICAgICB0aGlzLmJsb2NrTGluayA9IFwiXCI7XHJcbiAgICAgIHRoaXMuaGVhZGVyUmVnZXggPSAvXltcXHQgXSooPiopXFxzKigtfFxcKnxcXCt8XFxkK1suKV0pIHswLDR9XFxbKC4pXFxdIHswLDR9LztcclxuICAgICAgdGhpcy5pY29uUmVnZXggPSAvXHVEODNEXHVEQ0M1fFx1RDgzRFx1REVFQnxcdTIzRjN8XHUyNzA1fFx1Mjc0Q3xcdTI3OTV8XHUyM0VDfFx1MjNFQnxcdUQ4M0RcdUREM0N8XHVEODNEXHVERDNEfFx1RDgzRFx1REQzQXxcdUQ4M0RcdUREMDF8XHVEODNDXHVERDk0fFx1MjZENHxcdUQ4M0NcdURGQzEvZztcclxuICBpY29uUmVnZXg6IFJlZ0V4cDtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmljaWFsaXphIGxhcyBwcm9waWVkYWRlcyBkZSBsYSBjbGFzZSBhIHBhcnRpciBkZWwgdGV4dG8gcHJvcG9yY2lvbmFkby5cclxuICAgKiBAcGFyYW0gdGV4dCBUZXh0byBjb21wbGV0byBkZSBsYSB0YXJlYS5cclxuICAgKi9cclxuICBpbml0aWFsaXplKHRleHQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgICAgdGhpcy5oZWFkZXIgPSB0aGlzLmV4dHJhY3RIZWFkZXIodGV4dCk7XHJcbiAgICAgICAgICBsZXQgcmVtYWluaW5nVGV4dCA9IHRoaXMucmVtb3ZlVGV4dCh0ZXh0LCB0aGlzLmhlYWRlcik7XHJcbiAgICAgICAgICByZW1haW5pbmdUZXh0ID0gdGhpcy5yZW1vdmVBbGxUYWdzKHJlbWFpbmluZ1RleHQpOyAvLyBFbGltaW5hciB0YWdzIGRlbCB0ZXh0byByZXN0YW50ZVxyXG5cclxuICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLmV4dHJhY3REZXNjcmlwdGlvbihyZW1haW5pbmdUZXh0KTtcclxuXHJcbiAgICAgICAgICByZW1haW5pbmdUZXh0ID0gdGhpcy5yZW1vdmVUZXh0KHJlbWFpbmluZ1RleHQsIHRoaXMuZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5leHRyYWN0VGFza3NGaWVsZHMocmVtYWluaW5nVGV4dCk7XHJcbiAgICAgICAgICB0aGlzLnRhc2tzRmllbGRzID0gcmVzdWx0LmZpZWxkcztcclxuICAgICAgICAgIHRoaXMudGFza0RhdGEgPSByZXN1bHQudGFza0RhdGE7XHJcblxyXG4gICAgICAgICAgLy8gRXN0YWJsZWNlciBwcmlvcmlkYWQgcHJlZGV0ZXJtaW5hZGEgc2kgbm8gc2UgZXNwZWNpZmljXHUwMEYzXHJcbiAgICAgICAgICBpZiAoIXRoaXMudGFza0RhdGEucHJpb3JpdHkgJiYgIXRoaXMudGFza0RhdGEucHJpb3JpdHlfZXJyb3IpIHtcclxuICAgICAgICAgICAgdGhpcy50YXNrRGF0YS5wcmlvcml0eSA9IFwibm9ybWFsXCI7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpcy5ibG9ja0xpbmsgPSB0aGlzLmV4dHJhY3RCbG9ja0xpbmsodGV4dCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAvLyBTaSBvY3VycmUgdW4gZXJyb3IsIGluaWNpYWxpemFyIHRvZG8gY29tbyB2YWNcdTAwRURvXHJcbiAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5pMThuLnQoJ2Vycm9ycy5pbml0aWFsaXplVGFza1NlY3Rpb24nLCB7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0pKTtcclxuICAgICAgICAgIHRoaXMuaGVhZGVyID0gXCJcIjtcclxuICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIlwiO1xyXG4gICAgICAgICAgdGhpcy50YXNrc0ZpZWxkcyA9IFtdO1xyXG4gICAgICAgICAgdGhpcy5ibG9ja0xpbmsgPSBcIlwiO1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeHRyYWUgZWwgZW5jYWJlemFkbyBkZWwgdGV4dG8gdXRpbGl6YW5kbyBsYSBleHByZXNpXHUwMEYzbiByZWd1bGFyLlxyXG4gICAqIEBwYXJhbSB0ZXh0IFRleHRvIGNvbXBsZXRvIGRlIGxhIHRhcmVhLlxyXG4gICAqIEByZXR1cm5zIEVsIGVuY2FiZXphZG8gZXh0cmFcdTAwRURkby5cclxuICAgKiBAdGhyb3dzIEVycm9yIHNpIG5vIHNlIGVuY3VlbnRyYSB1biBlbmNhYmV6YWRvIHZcdTAwRTFsaWRvLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0cmFjdEhlYWRlcih0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICBjb25zdCBtYXRjaCA9IHRleHQubWF0Y2godGhpcy5oZWFkZXJSZWdleCk7XHJcbiAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRleHRvIGludlx1MDBFMWxpZG86IG5vIGNvbnRpZW5lIHVuIGVuY2FiZXphZG8gdlx1MDBFMWxpZG8uXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBtYXRjaFswXS50cmltKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbGltaW5hIGVsIGVuY2FiZXphZG8gZGVsIHRleHRvIHBhcmEgcHJvY2VzYXIgbGFzIHNlY2Npb25lcyByZXN0YW50ZXMuXHJcbiAgICogQHBhcmFtIHRleHQgVGV4dG8gY29tcGxldG8gZGUgbGEgdGFyZWEuXHJcbiAgICogQHBhcmFtIGhlYWRlciBFbCBlbmNhYmV6YWRvIGV4dHJhXHUwMEVEZG8uXHJcbiAgICogQHJldHVybnMgRWwgdGV4dG8gcmVzdGFudGUgZGVzcHVcdTAwRTlzIGRlIGVsaW1pbmFyIGVsIGVuY2FiZXphZG8uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZW1vdmVUZXh0KHRleHQ6IHN0cmluZywgY3V0VGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgY29uc3QgZW5kSW5kZXggPSB0ZXh0LmluZGV4T2YoY3V0VGV4dCkgKyBjdXRUZXh0Lmxlbmd0aDtcclxuICAgICAgcmV0dXJuIHRleHQuc2xpY2UoZW5kSW5kZXgpLnRyaW0oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVsaW1pbmEgdG9kb3MgbG9zIHRhZ3MgKHBhbGFicmFzIHF1ZSBjb21pZW56YW4gY29uICMpIGRlIHVuIHRleHRvLlxyXG4gICAqIEBwYXJhbSB0ZXh0IFRleHRvIGRlbCBxdWUgc2UgZWxpbWluYXJcdTAwRTFuIGxvcyB0YWdzLlxyXG4gICAqIEByZXR1cm5zIEVsIHRleHRvIHNpbiB0YWdzLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVtb3ZlQWxsVGFncyh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIC8vIEVsaW1pbmFyIHRvZGFzIGxhcyBwYWxhYnJhcyBxdWUgY29taWVuemFuIGNvbiAjXHJcbiAgbGV0IHRleHRXaXRob3V0VGFncyA9IHRleHQucmVwbGFjZSgvI1thLXpBLVowLTlfXFwtXFwvXStcXGIvZywgJycpO1xyXG5cclxuICAvLyBFbGltaW5hciBlc3BhY2lvcyBtXHUwMEZBbHRpcGxlcyBxdWUgcHVlZGVuIGhhYmVyIHF1ZWRhZG9cclxuICB0ZXh0V2l0aG91dFRhZ3MgPSB0ZXh0V2l0aG91dFRhZ3MucmVwbGFjZSgvXFxzKy9nLCAnICcpLnRyaW0oKTtcclxuXHJcbiAgcmV0dXJuIHRleHRXaXRob3V0VGFncztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4dHJhZSBsYSBkZXNjcmlwY2lcdTAwRjNuIGRlbCB0ZXh0byByZXN0YW50ZS5cclxuICAgKiBAcGFyYW0gdGV4dCBUZXh0byByZXN0YW50ZSBkZXNwdVx1MDBFOXMgZGUgZWxpbWluYXIgZWwgZW5jYWJlemFkby5cclxuICAgKiBAcmV0dXJucyBMYSBkZXNjcmlwY2lcdTAwRjNuIGV4dHJhXHUwMEVEZGEuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRyYWN0RGVzY3JpcHRpb24odGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGxldCBzbWFsbGVzdEluZGV4ID0gdGV4dC5sZW5ndGg7IC8vIEluaWNpYWxpemFyIGNvbiBlbCB0YW1hXHUwMEYxbyBtXHUwMEUxeGltbyBkZWwgdGV4dG9cclxuXHJcbiAgICAvLyBCdXNjYXIgdG9kYXMgbGFzIGNvaW5jaWRlbmNpYXMgZGUgbG9zIFx1MDBFRGNvbm9zXHJcbiAgICBjb25zdCBtYXRjaGVzID0gdGV4dC5tYXRjaEFsbCh0aGlzLmljb25SZWdleCk7XHJcblxyXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBtYXRjaGVzKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBtYXRjaC5pbmRleCE7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgc21hbGxlc3RJbmRleCkge1xyXG4gICAgICAgICAgICBzbWFsbGVzdEluZGV4ID0gaW5kZXg7IC8vIEFjdHVhbGl6YXIgZWwgXHUwMEVEbmRpY2UgbVx1MDBFMXMgcGVxdWVcdTAwRjFvXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNpIHNlIGVuY29udHJcdTAwRjMgdW4gXHUwMEVEY29ubywgY29ydGFyIGVsIHRleHRvIGhhc3RhIGVsIFx1MDBFRG5kaWNlIG1cdTAwRTFzIHBlcXVlXHUwMEYxb1xyXG4gICAgaWYgKHNtYWxsZXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKDAsIHNtYWxsZXN0SW5kZXgpLnRyaW0oKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTaSBubyBzZSBlbmNvbnRyYXJvbiBcdTAwRURjb25vcywgZGV2b2x2ZXIgdG9kbyBlbCB0ZXh0byBjb21vIGRlc2NyaXBjaVx1MDBGM25cclxuICAgIHJldHVybiB0ZXh0LnRyaW0oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4dHJhZSBsb3MgY2FtcG9zIGVzcGVjXHUwMEVEZmljb3MgZGUgbGEgdGFyZWEgZGVsIHRleHRvIHJlc3RhbnRlLlxyXG4gICAqIEBwYXJhbSB0ZXh0IFRleHRvIHJlc3RhbnRlIGRlc3B1XHUwMEU5cyBkZSBlbGltaW5hciBlbCBlbmNhYmV6YWRvLlxyXG4gICAqIEByZXR1cm5zIFVuIG9iamV0byBxdWUgY29udGllbmUgZWwgYXJyZWdsbyBkZSBjYW1wb3MgeSBsb3MgZGF0b3MgZXN0cnVjdHVyYWRvcyBleHRyYVx1MDBFRGRvcy5cclxuICAgKi9cclxuICBwcml2YXRlIGV4dHJhY3RUYXNrc0ZpZWxkcyh0ZXh0OiBzdHJpbmcpOiB7IGZpZWxkczogc3RyaW5nW10sIHRhc2tEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IH0ge1xyXG4gICAgY29uc3QgZmllbGRzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgY29uc3QgdGFza0RhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcclxuICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBjb25zdCBpY29uRGF0ZVJlZ2V4ID0gLyhcdUQ4M0RcdURDQzV8XHVEODNEXHVERUVCfFx1MjNGM3xcdTI3MDV8XHUyNzRDfFx1Mjc5NSlcXHMqKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KVxccyokL2cgLy8gXHUwMENEY29ubyBzZWd1aWRvIGRlIHVuYSBmZWNoYSBlbiBmb3JtYXRvIFlZWVktTU0tRERcclxuICAgIGNvbnN0IGljb25FbXB0eVJlZ2V4ID0gLyhcdTIzRUN8XHUyM0VCfFx1RDgzRFx1REQzQ3xcdUQ4M0RcdUREM0R8XHVEODNEXHVERDNBKVxccyokL2c7IC8vIFx1MDBDRGNvbm8gc2VndWlkbyBzb2xvIHBvciBlc3BhY2lvcyBvIHRhYnVsYWNpb25lc1xyXG4gICAgY29uc3QgaWNvbkNvbXBsZXRpb25SZWdleCA9IC9cdUQ4M0NcdURGQzFcXHMqKGtlZXB8ZGVsZXRlKS9nOyAvLyBcdTAwQ0Rjb25vIFx1RDgzQ1x1REZDMSBzZWd1aWRvIGRlIHZhbG9yZXMgdlx1MDBFMWxpZG9zIGRlIE9uQ29tcGxldGlvblxyXG4gICAgY29uc3QgaWNvbkJsb2NrZWRSZWdleCA9IC9cdTI2RDRcXHMqKC4qKS9nOyAvLyBcdTAwQ0Rjb25vIGJsb3F1ZWFkbyBzZWd1aWRvIGRlIHVuYSBjYWRlbmEgZGUgaWRlbnRpZmljYWRvcmVzXHJcbiAgICBjb25zdCBpY29uUmVjdXJyZW5jZVJlZ2V4ID0gL1x1RDgzRFx1REQwMVxccyooLiopL2c7IC8vIFx1MDBDRGNvbm8gZGUgcmVjdXJyZW5jaWEgc2VndWlkbyBkZSB1bmEgY2FkZW5hIGRlIHRleHRvXHJcbiAgICBjb25zdCBpZEljb25zUmVnZXggPSAvXHVEODNDXHVERDk0XFxzKiguKikvZzsgLy8gT3Ryb3MgXHUwMEVEY29ub3MgcXVlIG5vIHJlcXVpZXJlbiB2YWxpZGFjaVx1MDBGM24gYWRpY2lvbmFsXHJcblxyXG4gICAgY29uc3QgbWF0Y2hlcyA9IEFycmF5LmZyb20odGV4dC5tYXRjaEFsbCh0aGlzLmljb25SZWdleCkpOyAvLyBFbmNvbnRyYXIgdG9kYXMgbGFzIGNvaW5jaWRlbmNpYXMgZGUgXHUwMEVEY29ub3NcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaGVzW2ldO1xyXG4gICAgICBjb25zdCBtYXRjaEluZGV4ID0gbWF0Y2guaW5kZXghO1xyXG4gICAgICBjb25zdCBuZXh0TWF0Y2hJbmRleCA9IGkgKyAxIDwgbWF0Y2hlcy5sZW5ndGggPyBtYXRjaGVzW2kgKyAxXS5pbmRleCEgOiB0ZXh0Lmxlbmd0aDtcclxuXHJcbiAgICAgIC8vIEV4dHJhZXIgZWwgdGV4dG8gZGVzZGUgZWwgaW5pY2lvIGRlbCBcdTAwRURjb25vIGFjdHVhbCBoYXN0YSBqdXN0byBhbnRlcyBkZWwgc2lndWllbnRlIFx1MDBFRGNvbm9cclxuICAgICAgbGV0IGZpZWxkVGV4dCA9IHRleHQuc2xpY2UobWF0Y2hJbmRleCwgbmV4dE1hdGNoSW5kZXgpLnRyaW0oKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGljb24gPSBtYXRjaFswXTsgLy8gT2J0ZW5lciBlbCBcdTAwRURjb25vIGFjdHVhbFxyXG5cclxuICAgICAgLy8gT2J0ZW5lciBsYSBjb25maWd1cmFjaVx1MDBGM24gZGVsIGljb25vIGRlc2RlIGVsIG1hcGVvXHJcbiAgICAgIGNvbnN0IGljb25Db25maWcgPSB0aGlzLmljb25NYXBwaW5nW2ljb25dO1xyXG5cclxuICAgICAgaWYgKGljb25Db25maWcpIHtcclxuICAgICAgICBsZXQgaXNWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgbGV0IGV4dHJhY3RlZFZhbHVlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gXCJcIjtcclxuXHJcbiAgICAgICAgc3dpdGNoIChpY29uQ29uZmlnLnR5cGUpIHtcclxuICAgICAgICAgIGNhc2UgXCJkYXRlXCI6XHJcbiAgICAgICAgICAgIC8vIFJlaW5pY2lhciBsYSBleHByZXNpXHUwMEYzbiByZWd1bGFyIChkZWJpZG8gYSAnZycpXHJcbiAgICAgICAgICAgIGljb25EYXRlUmVnZXgubGFzdEluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCBjYW1wbyBlcyB2XHUwMEUxbGlkbyB1c2FuZG8gbGEgZXhwcmVzaVx1MDBGM24gcmVndWxhciBlc3BlY1x1MDBFRGZpY2FcclxuICAgICAgICAgICAgaWYgKGljb25EYXRlUmVnZXgudGVzdChmaWVsZFRleHQpKSB7XHJcbiAgICAgICAgICAgICAgLy8gRXh0cmFlciBsYSBmZWNoYSBZWVlZLU1NLUREXHJcbiAgICAgICAgICAgICAgY29uc3QgZGF0ZU1hdGNoID0gZmllbGRUZXh0Lm1hdGNoKC9cXGR7NH0tXFxkezJ9LVxcZHsyfS8pO1xyXG4gICAgICAgICAgICAgIGlmIChkYXRlTWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFZhbHVlID0gZGF0ZU1hdGNoWzBdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gdGhpcy5pMThuLnQoJ2Vycm9ycy5pbnZhbGlkRGF0ZScsIHsgaWNvbjogaWNvbiB9KTtcclxuICAgICAgICAgICAgICBmaWVsZFRleHQgPSBgJHtmaWVsZFRleHR9IEAke2Vycm9yTWVzc2FnZX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgXCJwcmlvcml0eVwiOlxyXG4gICAgICAgICAgICAvLyBSZWluaWNpYXIgbGEgZXhwcmVzaVx1MDBGM24gcmVndWxhciAoZGViaWRvIGEgJ2cnKVxyXG4gICAgICAgICAgICBpY29uRW1wdHlSZWdleC5sYXN0SW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIGNhbXBvIGVzIHZcdTAwRTFsaWRvIHVzYW5kbyBsYSBleHByZXNpXHUwMEYzbiByZWd1bGFyIGVzcGVjXHUwMEVEZmljYVxyXG4gICAgICAgICAgICBpZiAoaWNvbkVtcHR5UmVnZXgudGVzdChmaWVsZFRleHQpKSB7XHJcbiAgICAgICAgICAgICAgZXh0cmFjdGVkVmFsdWUgPSBpY29uQ29uZmlnLm5hbWUgfHwgXCJub3JtYWxcIjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gdGhpcy5pMThuLnQoJ2Vycm9ycy5pbnZhbGlkUHJpb3JpdHknLCB7IGljb246IGljb24gfSk7XHJcbiAgICAgICAgICAgICAgZmllbGRUZXh0ID0gYCR7ZmllbGRUZXh0fSBAJHtlcnJvck1lc3NhZ2V9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIFwiY29tcGxldGlvblwiOlxyXG4gICAgICAgICAgICAvLyBSZWluaWNpYXIgbGEgZXhwcmVzaVx1MDBGM24gcmVndWxhciAoZGViaWRvIGEgJ2cnKVxyXG4gICAgICAgICAgICBpY29uQ29tcGxldGlvblJlZ2V4Lmxhc3RJbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgY2FtcG8gZXMgdlx1MDBFMWxpZG8gdXNhbmRvIGxhIGV4cHJlc2lcdTAwRjNuIHJlZ3VsYXIgZXNwZWNcdTAwRURmaWNhXHJcbiAgICAgICAgICAgIGlmIChpY29uQ29tcGxldGlvblJlZ2V4LnRlc3QoZmllbGRUZXh0KSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRpb25NYXRjaCA9IGZpZWxkVGV4dC5tYXRjaCgva2VlcHxkZWxldGUvaSk7XHJcbiAgICAgICAgICAgICAgaWYgKGNvbXBsZXRpb25NYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkVmFsdWUgPSBjb21wbGV0aW9uTWF0Y2hbMF0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHRoaXMuaTE4bi50KCdlcnJvcnMuaW52YWxpZENvbXBsZXRpb24nLCB7IGljb246IGljb24gfSk7O1xyXG4gICAgICAgICAgICAgIGZpZWxkVGV4dCA9IGAke2ZpZWxkVGV4dH0gQCR7ZXJyb3JNZXNzYWdlfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIFwiYmxvY2tlZFwiOlxyXG4gICAgICAgICAgICAvLyBSZWluaWNpYXIgbGEgZXhwcmVzaVx1MDBGM24gcmVndWxhciAoZGViaWRvIGEgJ2cnKVxyXG4gICAgICAgICAgICBpY29uQmxvY2tlZFJlZ2V4Lmxhc3RJbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoaWNvbkJsb2NrZWRSZWdleC50ZXN0KGZpZWxkVGV4dCkgKSB7XHJcbiAgICAgICAgICAgICAgZXh0cmFjdGVkVmFsdWUgPSBmaWVsZFRleHQuc3Vic3RyaW5nKGljb24ubGVuZ3RoKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gZXh0cmFjdGVkVmFsdWUuc3BsaXQoJywnKS5tYXAoZGVwID0+IGRlcC50cmltKCkpLmZpbHRlcihkZXAgPT4gZGVwLmxlbmd0aCA+IDApO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vIEFzaWduYXIgY29tbyBhcnJheSBlbiBsdWdhciBkZSBzdHJpbmdcclxuICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRhc2tEYXRhLmRlcGVuZHNPbiA9IGRlcGVuZGVuY2llcztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHRoaXMuaTE4bi50KCdlcnJvcnMuaW52YWxpZERlcGVuZGVuY3knLCB7IGljb246IGljb24gfSk7XHJcbiAgICAgICAgICAgICAgZmllbGRUZXh0ID0gYCR7ZmllbGRUZXh0fSBAJHtlcnJvck1lc3NhZ2V9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgXCJyZWN1cnJlbmNlXCI6XHJcbiAgICAgICAgICAgIC8vICEgRXJyb3IgZW4gbGEgcmVjdXJyZW5jaWEgbm8gaW52YWxpZGEgbGEgdGFyZWFcclxuICAgICAgICAgICAgLy8gUmVpbmljaWFyIGxhIGV4cHJlc2lcdTAwRjNuIHJlZ3VsYXIgKGRlYmlkbyBhICdnJylcclxuICAgICAgICAgICAgaWNvblJlY3VycmVuY2VSZWdleC5sYXN0SW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGljb25SZWN1cnJlbmNlUmVnZXgudGVzdChmaWVsZFRleHQpKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgcmVjdXJyZW5jZVRleHQgPSBmaWVsZFRleHQuc3Vic3RyaW5nKGljb24ubGVuZ3RoKS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDb252ZXJ0aXIgdGV4dG8gZGUgcmVjdXJyZW5jaWEgYWwgZm9ybWF0byBSUlVMRVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcnJ1bGVUZXh0ID0gdGhpcy5jb252ZXJ0VG9SUnVsZUZvcm1hdChyZWN1cnJlbmNlVGV4dCk7ICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJydWxlVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAvLyBJbnRlbnRhciBjcmVhciB1biBvYmpldG8gUlJ1bGUgcGFyYSB2YWxpZGFyXHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJ1bGUgPSBycnVsZXN0cihycnVsZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAvLyBTaSBsbGVnYW1vcyBhcXVcdTAwRUQsIGVsIHBhdHJcdTAwRjNuIGVzIHZcdTAwRTFsaWRvXHJcbiAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZFZhbHVlID0gcmVjdXJyZW5jZVRleHQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzZSBwdWRvIGNvbnZlcnRpciBhbCBmb3JtYXRvIFJSVUxFXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSB0aGlzLmkxOG4udCgnZXJyb3JzLmludmFsaWRSZWN1cnJlbmNlUGF0dGVybicsIHsgaWNvbiB9KTtcclxuICAgICAgICAgICAgICAgIGZpZWxkVGV4dCA9IGAke2ZpZWxkVGV4dH0gQCR7ZXJyb3JNZXNzYWdlfWA7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gdGhpcy5pMThuLnQoJ2Vycm9ycy5pbnZhbGlkUmVjdXJyZW5jZScsIHsgaWNvbiB9KTtcclxuICAgICAgICAgICAgICBmaWVsZFRleHQgPSBgJHtmaWVsZFRleHR9IEAke2Vycm9yTWVzc2FnZX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBcImlkXCI6XHJcbiAgICAgICAgICAgIC8vIFJlaW5pY2lhciBsYSBleHByZXNpXHUwMEYzbiByZWd1bGFyIChkZWJpZG8gYSAnZycpXHJcbiAgICAgICAgICAgIGlkSWNvbnNSZWdleC5sYXN0SW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgLy8gUGFyYSBvdHJvcyB0aXBvcyBkZSBpY29ub3MsIHVzYXIgbGEgZXhwcmVzaVx1MDBGM24gcmVndWxhciBkZSBvdHJvcyBpY29ub3NcclxuICAgICAgICAgICAgY29uc3Qgb3RoZXJNYXRjaCA9IGlkSWNvbnNSZWdleC5leGVjKGZpZWxkVGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChvdGhlck1hdGNoICYmIG90aGVyTWF0Y2hbMl0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIGV4dHJhY3RlZFZhbHVlID0gb3RoZXJNYXRjaFsyXS50cmltKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZXh0cmFjdGVkVmFsdWUgPSBmaWVsZFRleHQuc3Vic3RyaW5nKGljb24ubGVuZ3RoKS50cmltKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaSBlbCBjYW1wbyBlcyB2XHUwMEUxbGlkbyB5IHRpZW5lIHVuYSBwcm9waWVkYWQgZGVmaW5pZGEsIGd1YXJkYXJsYSBlbiB0YXNrRGF0YVxyXG4gICAgICAgIGlmIChpc1ZhbGlkICYmIGljb25Db25maWcucHJvcGVydHkpIHtcclxuICAgICAgICAgIHRhc2tEYXRhW2ljb25Db25maWcucHJvcGVydHldID0gZXh0cmFjdGVkVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICghaXNWYWxpZCkge1xyXG4gICAgICAgICAgLy8gU2kgZWwgY2FtcG8gZXMgaW52XHUwMEUxbGlkbywgZ3VhcmRhciBlbCBlcnJvciBlbiB0YXNrRGF0YVxyXG4gICAgICAgICAgY29uc3QgZXJyb3JQcm9wZXJ0eSA9IGAke2ljb25Db25maWcucHJvcGVydHkgfHwgJ2ZpZWxkJ31fZXJyb3JgO1xyXG4gICAgICAgICAgdGFza0RhdGFbZXJyb3JQcm9wZXJ0eV0gPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICBlcnJvcnMucHVzaChlcnJvck1lc3NhZ2UpOyAvLyBBZ3JlZ2FyIGFsIGFycmF5IGRlIGVycm9yZXNcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFncmVnYXIgZWwgdGV4dG8gZGVsIGNhbXBvIGFsIGFycmVnbG8gZGUgZmllbGRzXHJcbiAgICAgIGZpZWxkcy5wdXNoKGZpZWxkVGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWdyZWdhciBhcnJheSBkZSBlcnJvcmVzIGFsIHRhc2tEYXRhIHNpIGhheSBlcnJvcmVzXHJcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgdGFza0RhdGEuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgICB0YXNrRGF0YS5pc1ZhbGlkID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0YXNrRGF0YS5pc1ZhbGlkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBmaWVsZHMsIHRhc2tEYXRhIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICogRXh0cmFlIGVsIGJsb2NrTGluayBkZWwgdGV4dG8gY29tcGxldG8uXHJcbiAqIEBwYXJhbSB0ZXh0IFRleHRvIGNvbXBsZXRvIGRlIGxhIHRhcmVhLlxyXG4gKiBAcmV0dXJucyBFbCBibG9ja0xpbmsgZXh0cmFcdTAwRURkbyBvIHVuYSBjYWRlbmEgdmFjXHUwMEVEYSBzaSBubyBzZSBlbmN1ZW50cmEuXHJcbiAqL1xyXG4gIHByaXZhdGUgZXh0cmFjdEJsb2NrTGluayh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgLy8gQnVzY2FyIGxhIFx1MDBGQWx0aW1hIG9jdXJyZW5jaWEgZGUgXiBlbiBlbCB0ZXh0b1xyXG4gICAgY29uc3QgYmxvY2tMaW5rTWF0Y2ggPSB0ZXh0Lm1hdGNoKC9cXF4oW2EtekEtWjAtOS1dKykvKTtcclxuICAgIGlmIChibG9ja0xpbmtNYXRjaCkge1xyXG4gICAgICByZXR1cm4gYmxvY2tMaW5rTWF0Y2hbMF07IC8vIERldnVlbHZlIGVsIGJsb2NrTGluayBjb21wbGV0byBjb24gZWwgXlxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFwiXCI7XHJcbiAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAqIENvbnZpZXJ0ZSBlbCBmb3JtYXRvIGRlIHRleHRvIGRlIHJlY3VycmVuY2lhIGRlIE9ic2lkaWFuIGEgZm9ybWF0byBSUlVMRVxyXG4gICAqIEBwYXJhbSByZWN1cnJlbmNlVGV4dCBUZXh0byBkZSByZWN1cnJlbmNpYSBlbiBmb3JtYXRvIE9ic2lkaWFuIChlamVtcGxvOiBcImV2ZXJ5IHdlZWtcIilcclxuICAgKiBAcmV0dXJucyBUZXh0byBlbiBmb3JtYXRvIFJSVUxFIG8gbnVsbCBzaSBubyBzZSBwdWRvIGNvbnZlcnRpclxyXG4gICAqL1xyXG4gIHByaXZhdGUgY29udmVydFRvUlJ1bGVGb3JtYXQocmVjdXJyZW5jZVRleHQ6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgLy8gdG9kbzogU2UgZGViZSBkZSBpbXBsZW1lbnRhciB1biBhdXRvIGNvbXBlbGV0ZSBwYXJhIGVsIHRleHRvIGRlIHJlY3VycmVuY2lhXHJcbiAgICAvLyB0b2RvOiBFamVtcGxvOiBldmVyeSAyIHdlZWtzIHVudGlsIDIwMjMtMTItMzEgY291bnQgNSBieSB3ZWVrZGF5c1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IGZyZXF1ZW5jeSA9IFwiXCI7XHJcbiAgICAgIGxldCBpbnRlcnZhbCA9IDE7XHJcbiAgICAgIGxldCB1bnRpbCA9IFwiXCI7XHJcbiAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgIGxldCBieURheSA9IFwiXCI7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCB0ZXh0ID0gcmVjdXJyZW5jZVRleHQudG9Mb3dlckNhc2UoKS50cmltKCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBWZXJpZmljYXIgcXVlIGNvbWllbmNlIGNvbiBcImV2ZXJ5XCJcclxuICAgICAgaWYgKCF0ZXh0LnN0YXJ0c1dpdGgoXCJldmVyeVwiKSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcIkVsIHBhdHJcdTAwRjNuIGRlIHJlY3VycmVuY2lhIGRlYmUgY29tZW56YXIgY29uICdldmVyeSdcIik7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFZhbGlkYXIgZm9ybWF0byBjb24gZXhwcmVzaVx1MDBGM24gcmVndWxhclxyXG4gICAgICBjb25zdCB2YWxpZFBhdHRlcm5SZWdleCA9IC9eZXZlcnlcXHMrKD86KFxcZCspXFxzKyk/KGRheXxkYXlzfHdlZWt8d2Vla3N8bW9udGh8bW9udGhzfHllYXJ8eWVhcnN8d2Vla2RheXx3ZWVrZW5kfG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXl8c3VuZGF5KSg/OlxccysuKik/JC9pO1xyXG4gICAgICBcclxuICAgICAgaWYgKCF2YWxpZFBhdHRlcm5SZWdleC50ZXN0KHRleHQpKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiRm9ybWF0byBkZSByZWN1cnJlbmNpYSBpbnZcdTAwRTFsaWRvXCIpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBFeHRyYWVyIGZyZWN1ZW5jaWEgYlx1MDBFMXNpY2EgdXNhbmRvIHBhbGFicmFzIGNvbXBsZXRhcyBjb24gbFx1MDBFRG1pdGVzIGRlIHBhbGFicmFcclxuICAgICAgY29uc3QgdGltZVdvcmRzID0ge1xyXG4gICAgICAgIGRheTogL1xcYihkYXl8ZGF5cylcXGIvLFxyXG4gICAgICAgIHdlZWs6IC9cXGIod2Vla3x3ZWVrcylcXGIvLFxyXG4gICAgICAgIG1vbnRoOiAvXFxiKG1vbnRofG1vbnRocylcXGIvLFxyXG4gICAgICAgIHllYXI6IC9cXGIoeWVhcnx5ZWFycylcXGIvXHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICBpZiAodGltZVdvcmRzLmRheS50ZXN0KHRleHQpKSBmcmVxdWVuY3kgPSBcIkRBSUxZXCI7XHJcbiAgICAgIGVsc2UgaWYgKHRpbWVXb3Jkcy53ZWVrLnRlc3QodGV4dCkpIGZyZXF1ZW5jeSA9IFwiV0VFS0xZXCI7XHJcbiAgICAgIGVsc2UgaWYgKHRpbWVXb3Jkcy5tb250aC50ZXN0KHRleHQpKSBmcmVxdWVuY3kgPSBcIk1PTlRITFlcIjtcclxuICAgICAgZWxzZSBpZiAodGltZVdvcmRzLnllYXIudGVzdCh0ZXh0KSkgZnJlcXVlbmN5ID0gXCJZRUFSTFlcIjtcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgLy8gU2kgbm8gZXMgdW5hIGZyZWN1ZW5jaWEgZXN0XHUwMEUxbmRhciwgdmVyaWZpY2Ftb3Mgc2kgZXMgdW4gZFx1MDBFRGEgZXNwZWNcdTAwRURmaWNvXHJcbiAgICAgICAgLy8gcXVlIHNlIGNvbnNpZGVyYSBmcmVjdWVuY2lhIHNlbWFuYWxcclxuICAgICAgICBjb25zdCBkYXlXb3JkcyA9IC9cXGIod2Vla2RheXx3ZWVrZW5kfG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXl8c3VuZGF5KVxcYi87XHJcbiAgICAgICAgaWYgKGRheVdvcmRzLnRlc3QodGV4dCkpIHtcclxuICAgICAgICAgIGZyZXF1ZW5jeSA9IFwiV0VFS0xZXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcIkZyZWN1ZW5jaWEgbm8gcmVjb25vY2lkYSBlbiBlbCBwYXRyXHUwMEYzbiBkZSByZWN1cnJlbmNpYVwiKTtcclxuICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gRXh0cmFlciBpbnRlcnZhbG8gKGNhZGEgWCBkXHUwMEVEYXMvc2VtYW5hcy9ldGMpXHJcbiAgICAgIGNvbnN0IGludGVydmFsTWF0Y2ggPSB0ZXh0Lm1hdGNoKC9ldmVyeVxccysoXFxkKylcXHMrLyk7XHJcbiAgICAgIGlmIChpbnRlcnZhbE1hdGNoICYmIGludGVydmFsTWF0Y2hbMV0pIHtcclxuICAgICAgICBpbnRlcnZhbCA9IHBhcnNlSW50KGludGVydmFsTWF0Y2hbMV0sIDEwKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gRXh0cmFlciBoYXN0YSBjdVx1MDBFMW5kbyAodW50aWwpXHJcbiAgICAgIGNvbnN0IHVudGlsTWF0Y2ggPSB0ZXh0Lm1hdGNoKC9cXGJ1bnRpbFxccysoXFxkezR9LVxcZHsyfS1cXGR7Mn0pXFxiLyk7XHJcbiAgICAgIGlmICh1bnRpbE1hdGNoICYmIHVudGlsTWF0Y2hbMV0pIHtcclxuICAgICAgICBjb25zdCBkYXRlU3RyID0gdW50aWxNYXRjaFsxXTtcclxuICAgICAgICB1bnRpbCA9IGBVTlRJTD0ke2RhdGVTdHIucmVwbGFjZSgvLS9nLCBcIlwiKX1UMDAwMDAwWmA7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhZXIgY3VcdTAwRTFudGFzIHZlY2VzIChjb3VudClcclxuICAgICAgY29uc3QgY291bnRNYXRjaCA9IHRleHQubWF0Y2goL1xcYihcXGQrKVxccyt0aW1lc1xcYi8pO1xyXG4gICAgICBpZiAoY291bnRNYXRjaCAmJiBjb3VudE1hdGNoWzFdKSB7XHJcbiAgICAgICAgY291bnQgPSBwYXJzZUludChjb3VudE1hdGNoWzFdLCAxMCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhZXIgZFx1MDBFRGFzIGVzcGVjXHUwMEVEZmljb3MgZGUgbGEgc2VtYW5hXHJcbiAgICAgIGNvbnN0IHdlZWtkYXlzID0ge1xyXG4gICAgICAgIG1vbmRheTogXCJNT1wiLFxyXG4gICAgICAgIHR1ZXNkYXk6IFwiVFVcIixcclxuICAgICAgICB3ZWRuZXNkYXk6IFwiV0VcIixcclxuICAgICAgICB0aHVyc2RheTogXCJUSFwiLFxyXG4gICAgICAgIGZyaWRheTogXCJGUlwiLFxyXG4gICAgICAgIHNhdHVyZGF5OiBcIlNBXCIsXHJcbiAgICAgICAgc3VuZGF5OiBcIlNVXCIsXHJcbiAgICAgICAgd2Vla2RheTogXCJNTyxUVSxXRSxUSCxGUlwiLFxyXG4gICAgICAgIHdlZWtlbmQ6IFwiU0EsU1VcIlxyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgICAgZm9yIChjb25zdCBbZGF5LCBhYmJyXSBvZiBPYmplY3QuZW50cmllcyh3ZWVrZGF5cykpIHtcclxuICAgICAgICAvLyBVc2Ftb3MgbFx1MDBFRG1pdGVzIGRlIHBhbGFicmEgcGFyYSBldml0YXIgY29pbmNpZGVuY2lhcyBwYXJjaWFsZXNcclxuICAgICAgICBjb25zdCBkYXlSZWdleCA9IG5ldyBSZWdFeHAoYFxcXFxiJHtkYXl9XFxcXGJgLCAnaScpO1xyXG4gICAgICAgIGlmIChkYXlSZWdleC50ZXN0KHRleHQpKSB7XHJcbiAgICAgICAgICBieURheSA9IGBCWURBWT0ke2FiYnJ9YDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gQ29uc3RydWlyIGxhIHJlZ2xhIFJSVUxFXHJcbiAgICAgIGxldCBydWxlID0gYFJSVUxFOkZSRVE9JHtmcmVxdWVuY3l9YDtcclxuICAgICAgaWYgKGludGVydmFsID4gMSkgcnVsZSArPSBgO0lOVEVSVkFMPSR7aW50ZXJ2YWx9YDtcclxuICAgICAgaWYgKHVudGlsKSBydWxlICs9IGA7JHt1bnRpbH1gO1xyXG4gICAgICBpZiAoY291bnQgPiAwKSBydWxlICs9IGA7Q09VTlQ9JHtjb3VudH1gO1xyXG4gICAgICBpZiAoYnlEYXkpIHJ1bGUgKz0gYDske2J5RGF5fWA7XHJcbiAgICAgIFxyXG4gICAgICAvL2NvbnNvbGUubG9nKGBDb252ZXJ0aWRvOiBcIiR7dGV4dH1cIiBcdTIxOTIgXCIke3J1bGV9XCJgKTtcclxuICAgICAgcmV0dXJuIHJ1bGU7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgY29udmVydGlyIGEgZm9ybWF0byBSUlVMRTpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn0iLCAiaW1wb3J0IHsgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgSVRhc2sgfSBmcm9tIFwiLi4vdHlwZXMvaW50ZXJmYWNlc1wiO1xyXG5pbXBvcnQgeyBUYXNrU2VjdGlvbiB9IGZyb20gXCIuL3Rhc2stc2VjdGlvblwiO1xyXG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcclxuaW1wb3J0IHsgQ3VzdG9tU3RhdHVzLCBDb3JlVGFza1N0YXR1cywgQ29yZVRhc2tTdGF0dXNJY29uIH0gZnJvbSBcIi4uL3R5cGVzL2VudW1zXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFzayBpbXBsZW1lbnRzIElUYXNrIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgdGV4dDogc3RyaW5nOyAvLyBUZXh0byBkZSBsYSB0YXJlYVxyXG4gIGxpbms6IHsgcGF0aDogc3RyaW5nIH07IC8vIEVubGFjZSBhbCBhcmNoaXZvIGRlIGxhIHRhcmVhICBcclxuICBsaW5lTnVtYmVyPzogbnVtYmVyOyAvLyBOXHUwMEZBbWVybyBkZSBsXHUwMEVEbmVhIGRvbmRlIHNlIGVuY3VlbnRyYSBsYSB0YXJlYVxyXG4gIC8vc2VjdGlvbj86IFRhc2tTZWN0aW9uOyAvLyBTZWNjaVx1MDBGM24gZGUgbGEgdGFyZWEgKG9wY2lvbmFsKVxyXG4gIHN0YXR1czogc3RyaW5nOyAvL1N0YXR1cztcclxuICBzdGF0dXNJY29uOiBzdHJpbmc7IC8vU3RhdHVzSWNvbjtcclxuICBzdGF0dXNUZXh0OiBzdHJpbmc7IC8vU3RhdHVzVGV4dDtcclxuICB0YWdzOiBzdHJpbmdbXTtcclxuICBwcmlvcml0eTogc3RyaW5nOyAvL1ByaW9yaXR5OyAvLyBQcmlvcmlkYWQgZGUgbGEgdGFyZWEgKFx1MjNFQ3xcdTIzRUJ8XHVEODNEXHVERDNDfFx1RDgzRFx1REQzRHxcdUQ4M0RcdUREM0EgbyBwb3IgZGVmZWN0byBcIkNcIilcclxuICBjcmVhdGVkRGF0ZTogRGF0ZVRpbWUgfCBudWxsOyAvLyBGZWNoYSBkZSBjcmVhY2lcdTAwRjNuIChcdTI3OTUpXHJcbiAgc3RhcnREYXRlOiBEYXRlVGltZSB8IG51bGw7IC8vIEZlY2hhIGRlIGluaWNpbyAoXHVEODNEXHVERUVCKVxyXG4gIHNjaGVkdWxlZERhdGU6IERhdGVUaW1lIHwgbnVsbDsgLy8gRmVjaGEgcHJvZ3JhbWFkYSAoXHUyM0YzKVxyXG4gIGR1ZURhdGU6IERhdGVUaW1lIHwgbnVsbDsgLy8gRmVjaGEgZGUgdmVuY2ltaWVudG8gKFx1RDgzRFx1RENDNSlcclxuICBkb25lRGF0ZTogRGF0ZVRpbWUgfCBudWxsOyAvLyBGZWNoYSBkZSBmaW5hbGl6YWNpXHUwMEYzbiAoXHUyNzA1KVxyXG4gIGNhbmNlbGxlZERhdGU6IERhdGVUaW1lIHwgbnVsbDsgLy8gRmVjaGEgZGUgY2FuY2VsYWNpXHUwMEYzbiAoXHUyNzRDKVxyXG4gIHJlY3VycmVuY2U6IHN0cmluZzsgLy9SZWN1cnJlbmNlIHwgbnVsbDsgSW5kaWNhIHNpIGxhIHRhcmVhIGVzIHJlY3VycmVudGUgKFx1RDgzRFx1REQwMSlcclxuICBvbkNvbXBsZXRpb246IHN0cmluZzsgLy9PbkNvbXBsZXRpb247XHJcbiAgZGVwZW5kc09uOiBzdHJpbmdbXTtcclxuICAvKiogRWwgYmxvY2tMaW5rIGVzIHVuYSBhbm90YWNpXHUwMEYzbiBcIl5cIiBkZXNwdVx1MDBFOXMgZGUgbGFzIGZlY2hhcy9yZWdsYXMgZGUgcmVjdXJyZW5jaWEuXHJcbiAgKiBDdWFscXVpZXIgdmFsb3Igbm8gdmFjXHUwMEVEbyBkZWJlIGNvbWVuemFyIGNvbiAnXicuICovXHJcbiAgYmxvY2tMaW5rOiBzdHJpbmc7XHJcbiAgc2NoZWR1bGVkRGF0ZUlzSW5mZXJyZWQ6IGJvb2xlYW47XHJcbiAgZmlsZVBhdGg6IHN0cmluZztcclxuICBmaWxlTmFtZTogc3RyaW5nO1xyXG4gIGZpbGVCYXNlbmFtZTogc3RyaW5nO1xyXG4gIGZpbGVFeHRlbnNpb246IHN0cmluZztcclxuICByb290Rm9sZGVyOiBzdHJpbmc7IC8vIENhcnBldGEgcmFcdTAwRUR6IGRlbCBhcmNoaXZvXHJcbiAgaGVhZGVyOiBzdHJpbmc7IC8vIFJlcHJlc2VudGEgZWwgZW5jYWJlemFkbyBkZSBsYSB0YXJlYVxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7IC8vIFJlcHJlc2VudGEgbGEgZGVzY3JpcGNpXHUwMEYzbiBkZSBsYSB0YXJlYVxyXG4gIHRhc2tzRmllbGRzOiBzdHJpbmdbXTsgLy8gUmVwcmVzZW50YSBsb3MgY2FtcG9zIGVzcGVjXHUwMEVEZmljb3MgZGUgbGEgdGFyZWEgY29tbyB1biBhcnJlZ2xvIGRlIHN0cmluZ3NcclxuICB0YXNrRGF0YTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xyXG4gIGdyb3VwTGFiZWw/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgaXNWYWxpZDogYm9vbGVhbjsgLy8gSW5kaWNhIHNpIGxhIHRhcmVhIGVzIHZcdTAwRTFsaWRhIG8gbm9cclxuXHJcbiAgY29uc3RydWN0b3IodGFza0RhdGE6IFBhcnRpYWw8VGFzaz4pIHtcclxuICAgIHRoaXMuaWQgPSB0YXNrRGF0YS5pZCB8fCAnJztcclxuICAgIHRoaXMudGl0bGUgPSB0YXNrRGF0YS50aXRsZSB8fCAnJztcclxuICAgIHRoaXMudGV4dCA9IHRhc2tEYXRhLnRleHQgfHwgJyc7XHJcbiAgICB0aGlzLmxpbmVOdW1iZXIgPSB0YXNrRGF0YS5saW5lTnVtYmVyIHx8IDA7IFxyXG4gICAgdGhpcy5zdGF0dXMgPSB0YXNrRGF0YS5zdGF0dXMgfHwgJyc7XHJcbiAgICB0aGlzLnN0YXR1c0ljb24gPSB0YXNrRGF0YS5zdGF0dXNJY29uIHx8ICcnO1xyXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gdGFza0RhdGEuc3RhdHVzVGV4dCB8fCAnJztcclxuICAgIHRoaXMucHJpb3JpdHkgPSB0YXNrRGF0YS5wcmlvcml0eSB8fCAnJztcclxuICAgIHRoaXMuY2FuY2VsbGVkRGF0ZSA9IHRhc2tEYXRhLmNhbmNlbGxlZERhdGUgfHwgbnVsbDtcclxuICAgIHRoaXMub25Db21wbGV0aW9uID0gdGFza0RhdGEub25Db21wbGV0aW9uIHx8ICcnO1xyXG4gICAgdGhpcy5jcmVhdGVkRGF0ZSA9IHRhc2tEYXRhLmNyZWF0ZWREYXRlIHx8IG51bGw7XHJcbiAgICB0aGlzLnN0YXJ0RGF0ZSA9IHRhc2tEYXRhLnN0YXJ0RGF0ZSB8fCBudWxsO1xyXG4gICAgdGhpcy5zY2hlZHVsZWREYXRlID0gdGFza0RhdGEuc2NoZWR1bGVkRGF0ZSB8fCBudWxsO1xyXG4gICAgdGhpcy5kdWVEYXRlID0gdGFza0RhdGEuZHVlRGF0ZSB8fCBudWxsO1xyXG4gICAgdGhpcy5kb25lRGF0ZSA9IHRhc2tEYXRhLmRvbmVEYXRlIHx8IG51bGw7XHJcbiAgICB0aGlzLnJlY3VycmVuY2UgPSB0YXNrRGF0YS5yZWN1cnJlbmNlIHx8ICcnO1xyXG4gICAgdGhpcy5kZXBlbmRzT24gPSB0YXNrRGF0YS5kZXBlbmRzT24gfHwgW107XHJcbiAgICB0aGlzLmJsb2NrTGluayA9IHRhc2tEYXRhLmJsb2NrTGluayB8fCAnJztcclxuICAgIHRoaXMuc2NoZWR1bGVkRGF0ZUlzSW5mZXJyZWQgPSB0YXNrRGF0YS5zY2hlZHVsZWREYXRlSXNJbmZlcnJlZCB8fCBmYWxzZTtcclxuICAgIHRoaXMuZmlsZVBhdGggPSB0YXNrRGF0YS5maWxlUGF0aCB8fCAnJztcclxuICAgIHRoaXMuZmlsZU5hbWUgPSB0YXNrRGF0YS5maWxlTmFtZSB8fCAnJzsgLy8gTm9tYnJlIGRlbCBhcmNoaXZvXHJcbiAgICB0aGlzLmZpbGVCYXNlbmFtZSA9IHRhc2tEYXRhLmZpbGVCYXNlbmFtZSB8fCAnJzsgLy8gTm9tYnJlIGJhc2UgZGVsIGFyY2hpdm8gKHNpbiBleHRlbnNpXHUwMEYzbilcclxuICAgIHRoaXMuZmlsZUV4dGVuc2lvbiA9IHRhc2tEYXRhLmZpbGVFeHRlbnNpb24gfHwgJyc7XHJcbiAgICB0aGlzLnJvb3RGb2xkZXIgPSB0YXNrRGF0YS5yb290Rm9sZGVyIHx8ICcnOyAvLyBDYXJwZXRhIHJhXHUwMEVEeiBkZWwgYXJjaGl2b1xyXG4gICAgdGhpcy5oZWFkZXIgPSB0YXNrRGF0YS5oZWFkZXIgfHwgJyc7IC8vIFJlcHJlc2VudGEgZWwgZW5jYWJlemFkbyBkZSBsYSB0YXJlYVxyXG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IHRhc2tEYXRhLmRlc2NyaXB0aW9uIHx8ICcnOyAvLyBSZXByZXNlbnRhIGxhIGRlc2NyaXBjaVx1MDBGM24gZGUgbGEgdGFyZWFcclxuICAgIHRoaXMudGFza3NGaWVsZHMgPSB0YXNrRGF0YS50YXNrc0ZpZWxkcyB8fCBbXTsgLy8gUmVwcmVzZW50YSBsb3MgY2FtcG9zIGVzcGVjXHUwMEVEZmljb3MgZGUgbGEgdGFyZWEgY29tbyB1biBhcnJlZ2xvIGRlIHN0cmluZ3NcclxuICAgIHRoaXMudGFza0RhdGEgPSB0YXNrRGF0YS50YXNrRGF0YSB8fCB7fTsgLy8gT2JqZXRvIHF1ZSBjb250aWVuZSBkYXRvcyBhZGljaW9uYWxlcyBkZSBsYSB0YXJlYVxyXG4gICAgdGhpcy5ncm91cExhYmVsID0gdGFza0RhdGEuZ3JvdXBMYWJlbCB8fCAnJzsgLy8gRXRpcXVldGEgZGUgZ3J1cG8gcGFyYSBsYSB0YXJlYVxyXG4gICAgdGhpcy5pc1ZhbGlkID0gdGFza0RhdGEuaXNWYWxpZCB8fCBmYWxzZTsgLy8gSW5kaWNhIHNpIGxhIHRhcmVhIGVzIHZcdTAwRTFsaWRhIG8gbm9cclxuICAgIHRoaXMudGFncyA9IHRhc2tEYXRhLnRhZ3MgfHwgW107IC8vIEFycmF5IGRlIHRhZ3MgZW5jb250cmFkb3MgZW4gZWwgdGV4dG9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4dHJhZSBlbCBlc3RhZG8gZGUgbGEgdGFyZWEgZGVzZGUgZWwgdGV4dG8gZGVsIGhlYWRlci5cclxuICAgKiBAcGFyYW0gaGVhZGVyVGV4dCBFbCB0ZXh0byBkZWwgZW5jYWJlemFkbyBxdWUgY29udGllbmUgZWwgZXN0YWRvIGVudHJlIGNvcmNoZXRlcy5cclxuICAgKiBAcmV0dXJucyBFbCBlc3RhZG8gY29ycmVzcG9uZGllbnRlIGRlbCBlbnVtIENvcmVUYXNrU3RhdHVzLlxyXG4gICovXHJcbiAgc3RhdGljIGV4dHJhY3RTdGF0dXNGcm9tSGVhZGVyKGhlYWRlclRleHQ6IHN0cmluZyk6IENvcmVUYXNrU3RhdHVzIHtcclxuICAgIGNvbnN0IHN0YXR1c01hdGNoID0gaGVhZGVyVGV4dC5tYXRjaCgvXFxbKC4pXFxdLyk7XHJcblxyXG4gICAgaWYgKHN0YXR1c01hdGNoICYmIHN0YXR1c01hdGNoWzFdKSB7XHJcbiAgICAgIGNvbnN0IHN0YXR1c0NoYXIgPSBzdGF0dXNNYXRjaFsxXTtcclxuXHJcbiAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCBjYXJcdTAwRTFjdGVyIGV4aXN0ZSBlbiBlbCBlbnVtIENvcmVUYXNrU3RhdHVzXHJcbiAgICAgIGlmIChPYmplY3QudmFsdWVzKENvcmVUYXNrU3RhdHVzKS5pbmNsdWRlcyhzdGF0dXNDaGFyIGFzIENvcmVUYXNrU3RhdHVzKSkge1xyXG4gICAgICAgICAgcmV0dXJuIHN0YXR1c0NoYXIgYXMgQ29yZVRhc2tTdGF0dXM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTaSBubyBzZSBlbmNvbnRyXHUwMEYzIHVuIGVzdGFkbyB2XHUwMEUxbGlkbywgZGV2b2x2ZXIgZWwgdmFsb3IgcHJlZGV0ZXJtaW5hZG9cclxuICAgIHJldHVybiBDb3JlVGFza1N0YXR1cy5Ub2RvO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXh0cmFlIGxvcyB0YWdzIChwYWxhYnJhcyBxdWUgY29taWVuemFuIGNvbiAjKSBkZWwgdGV4dG8gZGUgdW5hIHRhcmVhLlxyXG4gICAqIEBwYXJhbSB0ZXh0IFRleHRvIGNvbXBsZXRvIGRlIGxhIHRhcmVhLlxyXG4gICAqIEByZXR1cm5zIEFycmF5IGRlIHRhZ3MgZW5jb250cmFkb3MgZW4gZWwgdGV4dG8uXHJcbiAgICovXHJcbiAgc3RhdGljIGV4dHJhY3RUYWdzKHRleHQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHRhZ1JlZ2V4ID0gLyNbYS16QS1aMC05X1xcLVxcL10rL2c7XHJcbiAgICBjb25zdCB0YWdNYXRjaGVzID0gdGV4dC5tYXRjaCh0YWdSZWdleCkgfHwgW107XHJcbiAgICByZXR1cm4gdGFnTWF0Y2hlcy5tYXAodGFnID0+IHRhZy50cmltKCkpO1xyXG4gIH1cclxufSIsICJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50QnVzIHtcclxuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogRXZlbnRCdXM7XHJcbiAgcHJpdmF0ZSBlbWl0dGVyOiBFdmVudEVtaXR0ZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgdGhpcy5lbWl0dGVyLnNldE1heExpc3RlbmVycygzMCk7IC8vIEV2aXRhciB3YXJuaW5ncyBkZSBOb2RlLmpzXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IEV2ZW50QnVzIHtcclxuICAgIGlmICghRXZlbnRCdXMuaW5zdGFuY2UpIHtcclxuICAgICAgRXZlbnRCdXMuaW5zdGFuY2UgPSBuZXcgRXZlbnRCdXMoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBFdmVudEJ1cy5pbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvbihldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLmVtaXR0ZXIub24oZXZlbnQsIGxpc3RlbmVyKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvZmYoZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5lbWl0dGVyLm9mZihldmVudCwgbGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGVtaXQoZXZlbnQ6IHN0cmluZywgLi4uYXJnczogYW55W10pOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdChldmVudCwgLi4uYXJncyk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBDb25zdGFudGVzIHBhcmEgZXZlbnRvc1xyXG5leHBvcnQgY29uc3QgRVZFTlRTID0ge1xyXG4gIFRBU0tTX1VQREFURUQ6ICd0YXNrczp1cGRhdGVkJyxcclxuICBUQVNLX0FEREVEOiAndGFzazphZGRlZCcsXHJcbiAgVEFTS19NT0RJRklFRDogJ3Rhc2s6bW9kaWZpZWQnLFxyXG4gIFRBU0tfREVMRVRFRDogJ3Rhc2s6ZGVsZXRlZCcsXHJcbiAgRk9MREVSU19VUERBVEVEOiAnZm9sZGVyczp1cGRhdGVkJ1xyXG59OyIsICJpbXBvcnQgeyBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBCYXNlVmlldyB9IGZyb20gJy4uL3ZpZXdzL2Jhc2Utdmlldyc7IFxyXG5pbXBvcnQgeyBUYXNrTWFuYWdlciB9IGZyb20gJy4uL2NvcmUvdGFzay1tYW5hZ2VyJztcclxuaW1wb3J0IHsgSVRhc2sgfSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgSTE4biB9IGZyb20gJy4uL2NvcmUvaTE4bic7XHJcbmltcG9ydCBIYW5kbGViYXJzIGZyb20gJ2hhbmRsZWJhcnMnO1xyXG5pbXBvcnQgeyBUYXNrRGF0ZVR5cGUgfSBmcm9tICcuLi90eXBlcy9lbnVtcyc7XHJcblxyXG5leHBvcnQgY29uc3QgVEFCTEVfVklFV19UWVBFID0gJ3RhYmxlLXZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRhYmxlVmlldyBleHRlbmRzIEJhc2VWaWV3IHtcclxuICBwcml2YXRlIHRhc2tzOiBJVGFza1tdID0gW107IC8vIExpc3RhIGRlIHRhcmVhc1xyXG4gIHByaXZhdGUgY3VycmVudFNvcnRDb2x1bW46IHN0cmluZyA9ICcnOyAvLyBDb2x1bW5hIGFjdHVhbG1lbnRlIG9yZGVuYWRhXHJcbiAgcHJpdmF0ZSBjdXJyZW50U29ydERpcmVjdGlvbjogJ2FzYycgfCAnZGVzYycgPSAnYXNjJzsgLy8gRGlyZWNjaVx1MDBGM24gZGUgbGEgb3JkZW5hY2lcdTAwRjNuXHJcblxyXG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHByaXZhdGUgcGx1Z2luOiBhbnksIHByaXZhdGUgaTE4bjogSTE4biwgcHJpdmF0ZSB0YXNrTWFuYWdlcjogVGFza01hbmFnZXIpIHtcclxuICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgdGhpcy5pMThuID0gaTE4bjtcclxuICB9XHJcblxyXG4gIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gVEFCTEVfVklFV19UWVBFO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmkxOG4udChcInRhYmxlX3ZpZXdfdGl0bGVcIik7IC8vIFRcdTAwRUR0dWxvIGRlIGxhIHZpc3RhIGxpc3RhXHJcbiAgfVxyXG5cclxuICBnZXRJY29uKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gJ2NhbGVuZGFyLWNoZWNrJztcclxuICB9XHJcblxyXG4gIGFzeW5jIG9uT3BlbigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRoaXMudGFza3MgPSBhd2FpdCB0aGlzLmdldEFsbFRhc2tzKHRoaXMudGFza01hbmFnZXIpO1xyXG5cclxuICAgIGNvbnN0IHVuaXF1ZUZvbGRlcnMgPSBbLi4ubmV3IFNldCh0aGlzLnRhc2tzLm1hcCh0YXNrID0+IHRhc2sucm9vdEZvbGRlcikpXS5zb3J0KCk7XHJcblxyXG4gICAgYXdhaXQgdGhpcy5yZW5kZXIoVEFCTEVfVklFV19UWVBFLCB7IHRhc2tzOiB0aGlzLnRhc2tzLFxyXG4gICAgdW5pcXVlRm9sZGVyczogdW5pcXVlRm9sZGVycyB9LCB0aGlzLmkxOG4sIHRoaXMucGx1Z2luLCB0aGlzLmxlYWYpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHJlZ2lzdGVyVmlld1NwZWNpZmljSGVscGVycyhpMThuOiBhbnkpOiB2b2lkIHtcclxuICAgIC8vIEltcGxlbWVudGFyIGVsIGhlbHBlciAnZXF1YWxzJyBwYXJhIGNvbXBhcmFjaW9uZXMgZW4gbGEgcGxhbnRpbGxhXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdlcXVhbHMnLCBmdW5jdGlvbihhcmcxLCBhcmcyKSB7XHJcbiAgICAgIHJldHVybiBhcmcxID09PSBhcmcyO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIFRhbWJpXHUwMEU5biBwb2RlbW9zIGFncmVnYXIgb3Ryb3MgaGVscGVycyBcdTAwRkF0aWxlcyBwYXJhIGxhIHZpc3RhIGRlIHRhYmxhXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdub3QnLCBmdW5jdGlvbihhcmcpIHtcclxuICAgICAgcmV0dXJuICFhcmc7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignY29udGFpbnMnLCBmdW5jdGlvbihhcnIsIHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgJiYgYXJyLmluY2x1ZGVzKHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEhlbHBlciBwYXJhIGRldGVybWluYXIgc2kgdW4gdmFsb3IgZXN0XHUwMEUxIGVuIHVuIHJhbmdvXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpblJhbmdlJywgZnVuY3Rpb24odmFsdWUsIG1pbiwgbWF4KSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4O1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSGVscGVyIHBhcmEgb2J0ZW5lciBpY29ub3MgZGUgZmVjaGEgZGVsIGVudW1cclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2RhdGVUeXBlSWNvbicsIGZ1bmN0aW9uKGRhdGVUeXBlOiBzdHJpbmcpIHtcclxuICAgICAgcmV0dXJuIFRhc2tEYXRlVHlwZVtkYXRlVHlwZSBhcyBrZXlvZiB0eXBlb2YgVGFza0RhdGVUeXBlXSB8fCAnJztcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNldHVwVmlld1NwZWNpZmljRXZlbnRMaXN0ZW5lcnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgZGF0YTogYW55KTogdm9pZCB7XHJcbiAgICAvLyBJbXBsZW1lbnRhciBsb3MgZXZlbnQgbGlzdGVuZXJzIHBhcmEgbGEgdGFibGEgYXF1XHUwMEVEXHJcbiAgICAvLyBQb3IgZWplbXBsbzogb3JkZW5hY2lcdTAwRjNuLCBmaWx0cmFkbywgcGFnaW5hY2lcdTAwRjNuLCBldGMuXHJcbiAgICBcclxuICAgIC8vIExpc3RlbmVyIHBhcmEgb3JkZW5hciBjb2x1bW5hc1xyXG4gICAgY29uc3Qgc29ydGFibGVIZWFkZXJzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLnNvcnRhYmxlJyk7XHJcbiAgICBzb3J0YWJsZUhlYWRlcnMuZm9yRWFjaChoZWFkZXIgPT4ge1xyXG4gICAgICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVDb2x1bW5Tb3J0KGhlYWRlciBhcyBIVE1MRWxlbWVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICAvLyBFc3RhYmxlY2VyIG9yZGVuYWNpXHUwMEYzbiBpbmljaWFsIChvcGNpb25hbClcclxuICAgIC8vIFBvciBlamVtcGxvLCBvcmRlbmFyIHBvciBwcmlvcmlkYWQgZGUgZm9ybWEgZGVzY2VuZGVudGUgcG9yIGRlZmVjdG9cclxuICAgIGNvbnN0IGluaXRpYWxTb3J0SGVhZGVyID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3RoW2RhdGEtc29ydD1cInByaW9yaXR5XCJdJyk7XHJcbiAgICBpZiAoaW5pdGlhbFNvcnRIZWFkZXIpIHtcclxuICAgICAgdGhpcy5oYW5kbGVDb2x1bW5Tb3J0KGluaXRpYWxTb3J0SGVhZGVyIGFzIEhUTUxFbGVtZW50KTtcclxuICAgICAgLy8gTGxhbWFyIHVuYSBzZWd1bmRhIHZleiBwYXJhIG9yZGVuYXIgZGVzY2VuZGVudGUgKHRhcmVhcyBtXHUwMEUxcyBpbXBvcnRhbnRlcyBwcmltZXJvKVxyXG4gICAgICB0aGlzLmhhbmRsZUNvbHVtblNvcnQoaW5pdGlhbFNvcnRIZWFkZXIgYXMgSFRNTEVsZW1lbnQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBMaXN0ZW5lciBwYXJhIGVsIGZpbHRybyBkZSBiXHUwMEZBc3F1ZWRhXHJcbiAgICBjb25zdCBzZWFyY2hJbnB1dCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjdGFibGUtc2VhcmNoLWlucHV0JykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIGlmIChzZWFyY2hJbnB1dCkge1xyXG4gICAgICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcclxuICAgICAgICB0aGlzLmZpbHRlclRhc2tzKGNvbnRhaW5lcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBMaXN0ZW5lciBwYXJhIGxvcyBmaWx0cm9zIGRlIGRyb3Bkb3duXHJcbiAgICBjb25zdCBmaWx0ZXJEcm9wZG93bnMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnRhYmxlLWZpbHRlci1kcm9wZG93bicpO1xyXG4gICAgZmlsdGVyRHJvcGRvd25zLmZvckVhY2goZHJvcGRvd24gPT4ge1xyXG4gICAgICBkcm9wZG93bi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJUYXNrcyhjb250YWluZXIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENvbmZpZ3VyYXIgZWwgYm90XHUwMEYzbiBkZSBsaW1waWFyIGJcdTAwRkFzcXVlZGFcclxuICAgIGNvbnN0IHNlYXJjaENsZWFyQnV0dG9uID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyN0YWJsZS1zZWFyY2gtY2xlYXInKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHJcbiAgICBpZiAoc2VhcmNoSW5wdXQgJiYgc2VhcmNoQ2xlYXJCdXR0b24pIHtcclxuICAgICAgLy8gTW9zdHJhci9vY3VsdGFyIGJvdFx1MDBGM24gc2VnXHUwMEZBbiBlbCBjb250ZW5pZG9cclxuICAgICAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgc2VhcmNoQ2xlYXJCdXR0b24uc3R5bGUuZGlzcGxheSA9IHNlYXJjaElucHV0LnZhbHVlID8gJ2Jsb2NrJyA6ICdub25lJztcclxuICAgICAgICB0aGlzLmZpbHRlclRhc2tzKGNvbnRhaW5lcik7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gTGltcGlhciBlbCBjYW1wbyBkZSBiXHUwMEZBc3F1ZWRhIGFsIGhhY2VyIGNsaWMgZW4gZWwgYm90XHUwMEYzblxyXG4gICAgICBzZWFyY2hDbGVhckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBzZWFyY2hJbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgIHNlYXJjaENsZWFyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgc2VhcmNoSW5wdXQuZm9jdXMoKTsgLy8gT3BjaW9uYWw6IG1hbnRpZW5lIGVsIGZvY28gZW4gZWwgY2FtcG9cclxuICAgICAgICB0aGlzLmZpbHRlclRhc2tzKGNvbnRhaW5lcik7IC8vIFZvbHZlciBhIGFwbGljYXIgZmlsdHJvcyBzaW4gZWwgdGV4dG9cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBJbmljaWFsbWVudGUgb2N1bHRhciBlbCBib3RcdTAwRjNuIHNpIG5vIGhheSB0ZXh0b1xyXG4gICAgICBzZWFyY2hDbGVhckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gc2VhcmNoSW5wdXQudmFsdWUgPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRhYmxlUm93cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCd0ci50YXNrLXJvdycpO1xyXG4gIFxyXG4gICAgdGFibGVSb3dzLmZvckVhY2gocm93ID0+IHtcclxuICAgICAgLy8gQVx1MDBGMWFkaXIgaW5kaWNhZG9yIHZpc3VhbFxyXG4gICAgICByb3cuYWRkQ2xhc3MoJ2NsaWNrYWJsZScpO1xyXG4gICAgICBcclxuICAgICAgLy8gRXZlbnRvIGRlIGRvYmxlIGNsaWMgcGFyYSBhYnJpciBlbCBhcmNoaXZvXHJcbiAgICAgIHJvdy5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcm93LmdldEF0dHJpYnV0ZSgnZGF0YS1maWxlLXBhdGgnKTtcclxuICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gcm93LmdldEF0dHJpYnV0ZSgnZGF0YS1saW5lLW51bWJlcicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChmaWxlUGF0aCkge1xyXG4gICAgICAgICAgdGhpcy5vcGVuVGFza0ZpbGUoZmlsZVBhdGgsIGxpbmVOdW1iZXIgPyBwYXJzZUludChsaW5lTnVtYmVyKSA6IHVuZGVmaW5lZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEluaWNpYWxpemFyIGxhIG51bWVyYWNpXHUwMEYzbiBkZSBmaWxhcyBhbCBjYXJnYXIgbGEgdmlzdGFcclxuICAgIHRoaXMuZmlsdGVyVGFza3MoY29udGFpbmVyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE5vcm1hbGl6YSB1biB0ZXh0byByZW1vdmllbmRvIGFjZW50b3MgeSBkaWFjclx1MDBFRHRpY29zXHJcbiAgICogQ29udmllcnRlOiBcIlx1MDBGMVx1MDBFMVx1MDBFOVx1MDBFRFx1MDBGM1x1MDBGQVx1MDBGQ1wiIFx1MjE5MiBcIm5hZWlvdXVcIlxyXG4gICAqL1xyXG4gIHByaXZhdGUgbm9ybWFsaXplVGV4dCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRleHRcclxuICAgICAgLm5vcm1hbGl6ZSgnTkZEJykgICAgICAgICAgICAgICAvLyBOb3JtYWxpemEgZGVzY29tcG9uaWVuZG8gY2FyYWN0ZXJlc1xyXG4gICAgICAucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgJycpIC8vIEVsaW1pbmEgbG9zIGRpYWNyXHUwMEVEdGljb3NcclxuICAgICAgLnRvTG93ZXJDYXNlKCk7ICAgICAgICAgICAgICAgICAgLy8gQ29udmllcnRlIGEgbWluXHUwMEZBc2N1bGFzXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZpbHRlclRhc2tzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIC8vIE9idGVuZXIgdmFsb3JlcyBkZSBsb3MgZmlsdHJvc1xyXG4gICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI3RhYmxlLXNlYXJjaC1pbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBjb25zdCBwcmlvcml0eUZpbHRlciA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjdGFibGUtcHJpb3JpdHktZmlsdGVyJykgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XHJcbiAgICBjb25zdCBzdGF0dXNGaWx0ZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI3RhYmxlLXN0YXR1cy1maWx0ZXInKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuICAgIGNvbnN0IGZvbGRlckZpbHRlciA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjdGFibGUtZm9sZGVyLWZpbHRlcicpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xyXG4gICAgY29uc3QgZHVlRmlsdGVyID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyN0YWJsZS1kdWUtZmlsdGVyJykgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XHJcbiAgICBcclxuICAgIC8vIE9idGVuZXIgbG9zIHZhbG9yZXMgc2VsZWNjaW9uYWRvc1xyXG4gICAgY29uc3QgcmF3U2VhcmNoVGV4dCA9IHNlYXJjaElucHV0Py52YWx1ZT8udHJpbSgpIHx8ICcnO1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZFNlYXJjaFRleHQgPSB0aGlzLm5vcm1hbGl6ZVRleHQocmF3U2VhcmNoVGV4dCk7XHJcbiAgICBjb25zdCBwcmlvcml0eVZhbHVlID0gcHJpb3JpdHlGaWx0ZXI/LnZhbHVlIHx8ICdhbGwnO1xyXG4gICAgY29uc3Qgc3RhdHVzVmFsdWUgPSBzdGF0dXNGaWx0ZXI/LnZhbHVlIHx8ICdhbGwnO1xyXG4gICAgY29uc3QgZm9sZGVyVmFsdWUgPSBmb2xkZXJGaWx0ZXI/LnZhbHVlIHx8ICdhbGwnO1xyXG4gICAgY29uc3QgZHVlVmFsdWUgPSBkdWVGaWx0ZXI/LnZhbHVlIHx8ICdhbGwnO1xyXG4gICAgXHJcbiAgICAvLyBPYnRlbmVyIHRvZGFzIGxhcyBmaWxhcyBkZSB0YXJlYXNcclxuICAgIGNvbnN0IHRhYmxlUm93cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCd0ci50YXNrLXJvdycpO1xyXG4gICAgbGV0IHZpc2libGVDb3VudCA9IDA7XHJcbiAgICBcclxuICAgIC8vIE9idGVuZXIgbGEgZmVjaGEgYWN0dWFsIHBhcmEgbG9zIGZpbHRyb3MgZGUgZmVjaGFcclxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG4gICAgXHJcbiAgICAvLyBDYWxjdWxhciBmZWNoYSBkZSBmaW4gZGUgc2VtYW5hICg3IGRcdTAwRURhcyBkZXNkZSBob3kpXHJcbiAgICBjb25zdCBlbmRPZldlZWsgPSBuZXcgRGF0ZSh0b2RheSk7XHJcbiAgICBlbmRPZldlZWsuc2V0RGF0ZSh0b2RheS5nZXREYXRlKCkgKyA3KTtcclxuICAgIFxyXG4gICAgLy8gQXBsaWNhciBmaWx0cm9zIGEgY2FkYSBmaWxhXHJcbiAgICB0YWJsZVJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICBsZXQgc2hvdWxkU2hvdyA9IHRydWU7XHJcbiAgICAgIFxyXG4gICAgICAvLyAxLiBGaWx0cm8gZGUgdGV4dG8gKGJcdTAwRkFzcXVlZGEpIC0gYWhvcmEgY29uIG5vcm1hbGl6YWNpXHUwMEYzblxyXG4gICAgICBpZiAobm9ybWFsaXplZFNlYXJjaFRleHQpIHtcclxuICAgICAgICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSByb3cucXVlcnlTZWxlY3RvcignLnRhc2stZGVzY3JpcHRpb24nKT8udGV4dENvbnRlbnQgfHwgJyc7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZERlc2NyaXB0aW9uID0gdGhpcy5ub3JtYWxpemVUZXh0KHRhc2tEZXNjcmlwdGlvbik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgdGFza1RhZ3MgPSBBcnJheS5mcm9tKHJvdy5xdWVyeVNlbGVjdG9yQWxsKCcudGFzay10YWcnKSlcclxuICAgICAgICAgIC5tYXAodGFnID0+IHRhZy50ZXh0Q29udGVudCB8fCAnJylcclxuICAgICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFRhZ3MgPSB0aGlzLm5vcm1hbGl6ZVRleHQodGFza1RhZ3MpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghbm9ybWFsaXplZERlc2NyaXB0aW9uLmluY2x1ZGVzKG5vcm1hbGl6ZWRTZWFyY2hUZXh0KSAmJiBcclxuICAgICAgICAgICAgIW5vcm1hbGl6ZWRUYWdzLmluY2x1ZGVzKG5vcm1hbGl6ZWRTZWFyY2hUZXh0KSkge1xyXG4gICAgICAgICAgc2hvdWxkU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gMi4gRmlsdHJvIHBvciBwcmlvcmlkYWRcclxuICAgICAgaWYgKHNob3VsZFNob3cgJiYgcHJpb3JpdHlWYWx1ZSAhPT0gJ2FsbCcpIHtcclxuICAgICAgICBpZiAocHJpb3JpdHlWYWx1ZSA9PT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAvLyBCdXNjYXIgdGFyZWFzIHNpbiBwcmlvcmlkYWRcclxuICAgICAgICAgIGNvbnN0IHByaW9yaXR5RWxlbWVudCA9IHJvdy5xdWVyeVNlbGVjdG9yKCcudGFzay1wcmlvcml0eScpO1xyXG4gICAgICAgICAgY29uc3QgaGFzUHJpb3JpdHkgPSAhcHJpb3JpdHlFbGVtZW50Py5jbGFzc0xpc3QuY29udGFpbnMoJ3ByaW9yaXR5LW5vbmUnKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKGhhc1ByaW9yaXR5KSB7XHJcbiAgICAgICAgICAgIHNob3VsZFNob3cgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gQnVzY2FyIHRhcmVhcyBjb24gcHJpb3JpZGFkIGVzcGVjXHUwMEVEZmljYVxyXG4gICAgICAgICAgY29uc3QgaGFzUHJpb3JpdHkgPSByb3cucXVlcnlTZWxlY3RvcihgLnByaW9yaXR5LSR7cHJpb3JpdHlWYWx1ZS50b0xvd2VyQ2FzZSgpfWApO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoIWhhc1ByaW9yaXR5KSB7XHJcbiAgICAgICAgICAgIHNob3VsZFNob3cgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIDMuIEZpbHRybyBwb3IgZXN0YWRvXHJcbiAgICAgIGlmIChzaG91bGRTaG93ICYmIHN0YXR1c1ZhbHVlICE9PSAnYWxsJykge1xyXG4gICAgICAgIGNvbnN0IHN0YXR1c0ljb24gPSByb3cucXVlcnlTZWxlY3RvcignLnN0YXR1cy1pY29uJyk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFN0YXR1cyA9IHN0YXR1c0ljb24/LmdldEF0dHJpYnV0ZSgnZGF0YS1zdGF0dXMnKSB8fCAnJztcclxuICAgICAgICBcclxuICAgICAgICBpZiAoY3VycmVudFN0YXR1cyAhPT0gc3RhdHVzVmFsdWUpIHtcclxuICAgICAgICAgIHNob3VsZFNob3cgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIDQuIEZpbHRybyBwb3IgY2FycGV0YVxyXG4gICAgICBpZiAoc2hvdWxkU2hvdyAmJiBmb2xkZXJWYWx1ZSAhPT0gJ2FsbCcpIHtcclxuICAgICAgICBjb25zdCBmb2xkZXJOYW1lID0gcm93LnF1ZXJ5U2VsZWN0b3IoJy5mb2xkZXItbmFtZScpPy50ZXh0Q29udGVudCB8fCAnJztcclxuICAgICAgICBcclxuICAgICAgICBpZiAoZm9sZGVyTmFtZSAhPT0gZm9sZGVyVmFsdWUpIHtcclxuICAgICAgICAgIHNob3VsZFNob3cgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIDUuIEZpbHRybyBwb3IgZmVjaGEgZGUgdmVuY2ltaWVudG9cclxuICAgICAgaWYgKHNob3VsZFNob3cgJiYgZHVlVmFsdWUgIT09ICdhbGwnKSB7XHJcbiAgICAgICAgLy8gVmVyaWZpY2FyIHByZXNlbmNpYSBkZSBjdWFscXVpZXIgZmVjaGEgY29uIGNvbnRlbmlkb1xyXG4gICAgICAgIGNvbnN0IGRhdGVFbGVtZW50cyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCcudGFzay1kYXRlJyk7XHJcbiAgICAgICAgY29uc3QgaGFzRGF0ZVdpdGhDb250ZW50ID0gQXJyYXkuZnJvbShkYXRlRWxlbWVudHMpLnNvbWUoZWwgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZGF0ZVRleHQgPSBlbC5xdWVyeVNlbGVjdG9yKCcuZGF0ZS10ZXh0Jyk/LnRleHRDb250ZW50IHx8ICcnO1xyXG4gICAgICAgICAgcmV0dXJuIGRhdGVUZXh0LnRyaW0oKS5sZW5ndGggPiAwO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFZlcmlmaWNhciBsb3MgY2Fzb3MgZXNwZWNpYWxlcyBwcmltZXJvXHJcbiAgICAgICAgaWYgKGR1ZVZhbHVlID09PSAnaGFzZGF0ZScpIHtcclxuICAgICAgICAgIC8vIE1vc3RyYXIgc29sbyBzaSB0aWVuZSBhbCBtZW5vcyB1bmEgZmVjaGEgY29uIGNvbnRlbmlkb1xyXG4gICAgICAgICAgaWYgKCFoYXNEYXRlV2l0aENvbnRlbnQpIHtcclxuICAgICAgICAgICAgc2hvdWxkU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZHVlVmFsdWUgPT09ICdub2RhdGUnKSB7XHJcbiAgICAgICAgICAvLyBNb3N0cmFyIHNvbG8gc2kgbm8gdGllbmUgbmluZ3VuYSBmZWNoYSBjb24gY29udGVuaWRvXHJcbiAgICAgICAgICBpZiAoaGFzRGF0ZVdpdGhDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHNob3VsZFNob3cgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gUGFyYSBsb3MgZGVtXHUwMEUxcyBmaWx0cm9zLCBidXNjYXIgZXNwZWNcdTAwRURmaWNhbWVudGUgbGEgZmVjaGEgZGUgdmVuY2ltaWVudG9cclxuICAgICAgICAgIGNvbnN0IGR1ZURhdGVFbGVtZW50ID0gcm93LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWRhdGUuZHVlLWRhdGUnKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gU2kgbm8gaGF5IGZlY2hhIGRlIHZlbmNpbWllbnRvLCBubyBtb3N0cmFyIHBhcmEgZmlsdHJvcyBxdWUgbGEgcmVxdWllcmVuXHJcbiAgICAgICAgICBpZiAoIWR1ZURhdGVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHNob3VsZFNob3cgPSBmYWxzZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIE9idGVuZXIgZWwgdGV4dG8gZGUgbGEgZmVjaGEgZGVsIHNwYW4gY29uIGxhIGNsYXNlICdkYXRlLXRleHQnXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVUZXh0ID0gZHVlRGF0ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLmRhdGUtdGV4dCcpPy50ZXh0Q29udGVudCB8fCAnJztcclxuICAgICAgICAgICAgLy8gQ29udmVydGlyIGEgb2JqZXRvIERhdGVcclxuICAgICAgICAgICAgY29uc3QgZHVlRGF0ZSA9IG5ldyBEYXRlKGRhdGVUZXh0KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBxdWUgZXMgdW5hIGZlY2hhIHZcdTAwRTFsaWRhXHJcbiAgICAgICAgICAgIGlmICghaXNOYU4oZHVlRGF0ZS5nZXRUaW1lKCkpKSB7XHJcbiAgICAgICAgICAgICAgc3dpdGNoIChkdWVWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnb3ZlcmR1ZSc6XHJcbiAgICAgICAgICAgICAgICAgIC8vIFRhcmVhcyB2ZW5jaWRhcyAoYW50ZXMgZGUgaG95KVxyXG4gICAgICAgICAgICAgICAgICBpZiAoZHVlRGF0ZSA+PSB0b2RheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZFNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjYXNlICd0b2RheSc6XHJcbiAgICAgICAgICAgICAgICAgIC8vIFRhcmVhcyBwYXJhIGhveVxyXG4gICAgICAgICAgICAgICAgICBjb25zdCBpc1RvZGF5ID0gZHVlRGF0ZS5nZXREYXRlKCkgPT09IHRvZGF5LmdldERhdGUoKSAmJiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdWVEYXRlLmdldE1vbnRoKCkgPT09IHRvZGF5LmdldE1vbnRoKCkgJiYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVlRGF0ZS5nZXRGdWxsWWVhcigpID09PSB0b2RheS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoIWlzVG9kYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG91bGRTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY2FzZSAndGhpc3dlZWsnOlxyXG4gICAgICAgICAgICAgICAgICAvLyBUYXJlYXMgcGFyYSBlc3RhIHNlbWFuYSAocHJcdTAwRjN4aW1vcyA3IGRcdTAwRURhcylcclxuICAgICAgICAgICAgICAgICAgaWYgKGR1ZURhdGUgPCB0b2RheSB8fCBkdWVEYXRlID4gZW5kT2ZXZWVrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Z1dHVyZSc6XHJcbiAgICAgICAgICAgICAgICAgIC8vIFRhcmVhcyBmdXR1cmFzIChkZXNwdVx1MDBFOXMgZGUgZXN0YSBzZW1hbmEpXHJcbiAgICAgICAgICAgICAgICAgIGlmIChkdWVEYXRlIDw9IGVuZE9mV2Vlaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZFNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8gU2kgbm8gc2UgcHVlZGUgcGFyc2VhciBsYSBmZWNoYSwgbm8gbW9zdHJhciBlbiBmaWx0cm9zIGVzcGVjXHUwMEVEZmljb3NcclxuICAgICAgICAgICAgICBzaG91bGRTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFwbGljYXIgdmlzaWJpbGlkYWQgc2VnXHUwMEZBbiByZXN1bHRhZG8gZGUgZmlsdHJvc1xyXG4gICAgICBpZiAoc2hvdWxkU2hvdykge1xyXG4gICAgICAgIChyb3cgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICB2aXNpYmxlQ291bnQrKztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAocm93IGFzIEhUTUxFbGVtZW50KS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBMdWVnbyBhY3R1YWxpemFyIGxvcyBuXHUwMEZBbWVyb3Mgc29sbyBwYXJhIGxhcyBmaWxhcyB2aXNpYmxlc1xyXG4gICAgbGV0IHJvd051bWJlciA9IDE7XHJcbiAgICB0YWJsZVJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICBpZiAoKHJvdyBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgY29uc3Qgcm93TnVtYmVyRWxlbWVudCA9IHJvdy5xdWVyeVNlbGVjdG9yKCcucm93LW51bWJlcicpO1xyXG4gICAgICAgIGlmIChyb3dOdW1iZXJFbGVtZW50KSB7XHJcbiAgICAgICAgICByb3dOdW1iZXJFbGVtZW50LnRleHRDb250ZW50ID0gcm93TnVtYmVyLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICByb3dOdW1iZXIrKztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFjdHVhbGl6YXIgZWwgY29udGFkb3IgdG90YWwgZW4gZWwgZW5jYWJlemFkb1xyXG4gICAgY29uc3QgdG90YWxSb3dDb3VudEVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI3RvdGFsLXJvdy1jb3VudCcpO1xyXG4gICAgaWYgKHRvdGFsUm93Q291bnRFbGVtZW50KSB7XHJcbiAgICAgIHRvdGFsUm93Q291bnRFbGVtZW50LnRleHRDb250ZW50ID0gYCgke3Zpc2libGVDb3VudH0pYDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNb3N0cmFyIG1lbnNhamUgc2kgbm8gaGF5IHJlc3VsdGFkb3NcclxuICAgIGNvbnN0IGVtcHR5TWVzc2FnZSA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZW1wdHktdGFibGUtbWVzc2FnZScpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgaWYgKGVtcHR5TWVzc2FnZSkge1xyXG4gICAgICBlbXB0eU1lc3NhZ2Uuc3R5bGUuZGlzcGxheSA9IHZpc2libGVDb3VudCA9PT0gMCA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZUNvbHVtblNvcnQoaGVhZGVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc29ydEJ5ID0gaGVhZGVyLmRhdGFzZXQuc29ydDtcclxuICAgIFxyXG4gICAgaWYgKCFzb3J0QnkpIHJldHVybjtcclxuICAgIFxyXG4gICAgLy8gU2kgaGFjZW1vcyBjbGljIGVuIGxhIG1pc21hIGNvbHVtbmEsIGNhbWJpYW1vcyBsYSBkaXJlY2NpXHUwMEYzblxyXG4gICAgaWYgKHRoaXMuY3VycmVudFNvcnRDb2x1bW4gPT09IHNvcnRCeSkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRTb3J0RGlyZWN0aW9uID0gdGhpcy5jdXJyZW50U29ydERpcmVjdGlvbiA9PT0gJ2FzYycgPyAnZGVzYycgOiAnYXNjJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFNpIGVzIHVuYSBudWV2YSBjb2x1bW5hLCBlc3RhYmxlY2Vtb3MgZGlyZWNjaVx1MDBGM24gYXNjZW5kZW50ZSBwb3IgZGVmZWN0b1xyXG4gICAgICB0aGlzLmN1cnJlbnRTb3J0Q29sdW1uID0gc29ydEJ5O1xyXG4gICAgICB0aGlzLmN1cnJlbnRTb3J0RGlyZWN0aW9uID0gJ2FzYyc7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGhlYWRlci5jbG9zZXN0KCcudGFibGUtdmlldy1jb250YWluZXInKTtcclxuICAgIGlmICghY29udGFpbmVyKSByZXR1cm47XHJcbiAgICBcclxuICAgIC8vIEFjdHVhbGl6YXIgaW5kaWNhZG9yZXMgdmlzdWFsZXMgZGUgb3JkZW5hY2lcdTAwRjNuXHJcbiAgICB0aGlzLnVwZGF0ZVNvcnRJbmRpY2F0b3JzKGNvbnRhaW5lcik7XHJcbiAgICBcclxuICAgIC8vIE9idGVuZXIgdG9kYXMgbGFzIGZpbGFzXHJcbiAgICBjb25zdCB0YWJsZUJvZHkgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcigndGJvZHknKTtcclxuICAgIGlmICghdGFibGVCb2R5KSByZXR1cm47XHJcbiAgICBcclxuICAgIGNvbnN0IHJvd3MgPSBBcnJheS5mcm9tKHRhYmxlQm9keS5xdWVyeVNlbGVjdG9yQWxsKCd0ci50YXNrLXJvdycpKTtcclxuICAgIFxyXG4gICAgLy8gT3JkZW5hciBsYXMgZmlsYXNcclxuICAgIGNvbnN0IHNvcnRlZFJvd3MgPSB0aGlzLnNvcnRSb3dzKHJvd3MsIHNvcnRCeSwgdGhpcy5jdXJyZW50U29ydERpcmVjdGlvbik7XHJcbiAgICBcclxuICAgIC8vIEVsaW1pbmFyIGxhcyBmaWxhcyBhY3R1YWxlc1xyXG4gICAgcm93cy5mb3JFYWNoKHJvdyA9PiByb3cucmVtb3ZlKCkpO1xyXG4gICAgXHJcbiAgICAvLyBBXHUwMEYxYWRpciBsYXMgZmlsYXMgb3JkZW5hZGFzXHJcbiAgICBzb3J0ZWRSb3dzLmZvckVhY2gocm93ID0+IHRhYmxlQm9keS5hcHBlbmRDaGlsZChyb3cpKTtcclxuICAgIFxyXG4gICAgLy8gQWN0dWFsaXphciBsYSBudW1lcmFjaVx1MDBGM24gZGUgZmlsYXNcclxuICAgIHRoaXMuZmlsdGVyVGFza3MoY29udGFpbmVyIGFzIEhUTUxFbGVtZW50KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlU29ydEluZGljYXRvcnMoY29udGFpbmVyOiBFbGVtZW50KTogdm9pZCB7XHJcbiAgICAvLyBFbGltaW5hciBpbmRpY2Fkb3JlcyBleGlzdGVudGVzXHJcbiAgICBjb25zdCBhbGxTb3J0SW5kaWNhdG9ycyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuc29ydC1pbmRpY2F0b3InKTtcclxuICAgIGFsbFNvcnRJbmRpY2F0b3JzLmZvckVhY2goaW5kaWNhdG9yID0+IHtcclxuICAgICAgaW5kaWNhdG9yLmNsYXNzTGlzdC5yZW1vdmUoJ3NvcnQtYXNjJywgJ3NvcnQtZGVzYycpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIEFcdTAwRjFhZGlyIGluZGljYWRvciBhIGxhIGNvbHVtbmEgYWN0aXZhXHJcbiAgICBjb25zdCBhY3RpdmVIZWFkZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2RhdGEtc29ydD1cIiR7dGhpcy5jdXJyZW50U29ydENvbHVtbn1cIl1gKTtcclxuICAgIGlmIChhY3RpdmVIZWFkZXIpIHtcclxuICAgICAgY29uc3QgaW5kaWNhdG9yID0gYWN0aXZlSGVhZGVyLnF1ZXJ5U2VsZWN0b3IoJy5zb3J0LWluZGljYXRvcicpO1xyXG4gICAgICBpZiAoaW5kaWNhdG9yKSB7XHJcbiAgICAgICAgaW5kaWNhdG9yLmNsYXNzTGlzdC5hZGQodGhpcy5jdXJyZW50U29ydERpcmVjdGlvbiA9PT0gJ2FzYycgPyAnc29ydC1hc2MnIDogJ3NvcnQtZGVzYycpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNvcnRSb3dzKHJvd3M6IEVsZW1lbnRbXSwgc29ydEJ5OiBzdHJpbmcsIGRpcmVjdGlvbjogJ2FzYycgfCAnZGVzYycpOiBFbGVtZW50W10ge1xyXG4gICAgcmV0dXJuIFsuLi5yb3dzXS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIGxldCB2YWx1ZUE6IGFueTtcclxuICAgICAgbGV0IHZhbHVlQjogYW55O1xyXG4gICAgICBcclxuICAgICAgLy8gRXh0cmFlciB2YWxvcmVzIHNlZ1x1MDBGQW4gZWwgdGlwbyBkZSBjb2x1bW5hXHJcbiAgICAgIHN3aXRjaChzb3J0QnkpIHtcclxuICAgICAgICBjYXNlICdwcmlvcml0eSc6XHJcbiAgICAgICAgICAvLyBNYXBhIGRlIHByaW9yaWRhZGVzIHBhcmEgb3JkZW5hY2lcdTAwRjNuXHJcbiAgICAgICAgICBjb25zdCBwcmlvcml0eU1hcDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHtcclxuICAgICAgICAgICAgJ2hpZ2hlc3QnOiA2LCAnaGlnaCc6IDUsICdtZWRpdW0nOiA0LCAnbm9ybWFsJzogMywgJ2xvdyc6IDIsICdsb3dlc3QnOiAxLCAnbm9uZSc6IDBcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIE9idGVuZXIgY2xhc2VzIGRlIHByaW9yaWRhZFxyXG4gICAgICAgICAgY29uc3QgcHJpb3JpdHlDbGFzc0EgPSBhLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLXByaW9yaXR5Jyk/LmNsYXNzTGlzdC50b1N0cmluZygpIHx8ICcnO1xyXG4gICAgICAgICAgY29uc3QgcHJpb3JpdHlDbGFzc0IgPSBiLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLXByaW9yaXR5Jyk/LmNsYXNzTGlzdC50b1N0cmluZygpIHx8ICcnO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBFeHRyYWVyIGVsIG5pdmVsIGRlIHByaW9yaWRhZCBkZSBsYSBjbGFzZVxyXG4gICAgICAgICAgY29uc3QgcHJpb3JpdHlBID0gT2JqZWN0LmtleXMocHJpb3JpdHlNYXApLmZpbmQocCA9PiBwcmlvcml0eUNsYXNzQS5pbmNsdWRlcyhgcHJpb3JpdHktJHtwfWApKSB8fCAnbm9uZSc7XHJcbiAgICAgICAgICBjb25zdCBwcmlvcml0eUIgPSBPYmplY3Qua2V5cyhwcmlvcml0eU1hcCkuZmluZChwID0+IHByaW9yaXR5Q2xhc3NCLmluY2x1ZGVzKGBwcmlvcml0eS0ke3B9YCkpIHx8ICdub25lJztcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFsdWVBID0gcHJpb3JpdHlNYXBbcHJpb3JpdHlBXTtcclxuICAgICAgICAgIHZhbHVlQiA9IHByaW9yaXR5TWFwW3ByaW9yaXR5Ql07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIFxyXG4gICAgICAgIGNhc2UgJ3N0YXR1cyc6XHJcbiAgICAgICAgICAvLyBNYXBhIGRlIGVzdGFkb3MgcGFyYSBvcmRlbmFjaVx1MDBGM25cclxuICAgICAgICAgIGNvbnN0IHN0YXR1c01hcDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHtcclxuICAgICAgICAgICAgJ1RvZG8nOiA0LCAnSW5Qcm9ncmVzcyc6IDMsICdEb25lJzogMiwgJ0NhbmNlbGxlZCc6IDEsICdub25UYXNrJzogMFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3Qgc3RhdHVzQSA9IGEucXVlcnlTZWxlY3RvcignLnN0YXR1cy1pY29uJyk/LmdldEF0dHJpYnV0ZSgnZGF0YS1zdGF0dXMnKSB8fCAnJztcclxuICAgICAgICAgIGNvbnN0IHN0YXR1c0IgPSBiLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0dXMtaWNvbicpPy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdHVzJykgfHwgJyc7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZhbHVlQSA9IHN0YXR1c01hcFtzdGF0dXNBXSB8fCAwO1xyXG4gICAgICAgICAgdmFsdWVCID0gc3RhdHVzTWFwW3N0YXR1c0JdIHx8IDA7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIFxyXG4gICAgICAgIGNhc2UgJ2Rlc2NyaXB0aW9uJzpcclxuICAgICAgICAgIHZhbHVlQSA9IGEucXVlcnlTZWxlY3RvcignLnRhc2stZGVzY3JpcHRpb24nKT8udGV4dENvbnRlbnQgfHwgJyc7XHJcbiAgICAgICAgICB2YWx1ZUIgPSBiLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWRlc2NyaXB0aW9uJyk/LnRleHRDb250ZW50IHx8ICcnO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBcclxuICAgICAgICBjYXNlICdmb2xkZXInOlxyXG4gICAgICAgICAgdmFsdWVBID0gYS5xdWVyeVNlbGVjdG9yKCcuZm9sZGVyLW5hbWUnKT8udGV4dENvbnRlbnQgfHwgJyc7XHJcbiAgICAgICAgICB2YWx1ZUIgPSBiLnF1ZXJ5U2VsZWN0b3IoJy5mb2xkZXItbmFtZScpPy50ZXh0Q29udGVudCB8fCAnJztcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgY2FzZSAnZmlsZSc6XHJcbiAgICAgICAgICB2YWx1ZUEgPSBhLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLW5hbWUnKT8udGV4dENvbnRlbnQgfHwgJyc7XHJcbiAgICAgICAgICB2YWx1ZUIgPSBiLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLW5hbWUnKT8udGV4dENvbnRlbnQgfHwgJyc7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIFxyXG4gICAgICAgIGNhc2UgJ2R1ZSc6XHJcbiAgICAgICAgICAvLyBQYXJhIGZlY2hhcywgYnVzY2Ftb3MgcHJpbWVybyBsYSBmZWNoYSBkZSB2ZW5jaW1pZW50b1xyXG4gICAgICAgICAgY29uc3QgZHVlRGF0ZUVsZW1lbnRBID0gYS5xdWVyeVNlbGVjdG9yKCcudGFzay1kYXRlLmR1ZS1kYXRlIC5kYXRlLXRleHQnKTtcclxuICAgICAgICAgIGNvbnN0IGR1ZURhdGVFbGVtZW50QiA9IGIucXVlcnlTZWxlY3RvcignLnRhc2stZGF0ZS5kdWUtZGF0ZSAuZGF0ZS10ZXh0Jyk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIFNpIGhheSBmZWNoYSBkZSB2ZW5jaW1pZW50bywgbGEgdXNhbW9zOyBzaSBubywgdXNhbW9zIHVuIHZhbG9yIGV4dHJlbW9cclxuICAgICAgICAgIGlmIChkdWVEYXRlRWxlbWVudEEpIHtcclxuICAgICAgICAgICAgdmFsdWVBID0gbmV3IERhdGUoZHVlRGF0ZUVsZW1lbnRBLnRleHRDb250ZW50IHx8ICcnKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZUEgPSBkaXJlY3Rpb24gPT09ICdhc2MnID8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgOiAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoZHVlRGF0ZUVsZW1lbnRCKSB7XHJcbiAgICAgICAgICAgIHZhbHVlQiA9IG5ldyBEYXRlKGR1ZURhdGVFbGVtZW50Qi50ZXh0Q29udGVudCB8fCAnJykuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWVCID0gZGlyZWN0aW9uID09PSAnYXNjJyA/IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIDogMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgY2FzZSAndGFncyc6XHJcbiAgICAgICAgICB2YWx1ZUEgPSBBcnJheS5mcm9tKGEucXVlcnlTZWxlY3RvckFsbCgnLnRhc2stdGFnJykpXHJcbiAgICAgICAgICAgIC5tYXAodGFnID0+IHRhZy50ZXh0Q29udGVudClcclxuICAgICAgICAgICAgLmpvaW4oJywnKSB8fCAnJztcclxuICAgICAgICAgIHZhbHVlQiA9IEFycmF5LmZyb20oYi5xdWVyeVNlbGVjdG9yQWxsKCcudGFzay10YWcnKSlcclxuICAgICAgICAgICAgLm1hcCh0YWcgPT4gdGFnLnRleHRDb250ZW50KVxyXG4gICAgICAgICAgICAuam9pbignLCcpIHx8ICcnO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgdmFsdWVBID0gJyc7XHJcbiAgICAgICAgICB2YWx1ZUIgPSAnJztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gQ29tcGFyYXIgdmFsb3Jlc1xyXG4gICAgICBpZiAodHlwZW9mIHZhbHVlQSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlQiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gZGlyZWN0aW9uID09PSAnYXNjJyBcclxuICAgICAgICAgID8gdmFsdWVBLmxvY2FsZUNvbXBhcmUodmFsdWVCKSBcclxuICAgICAgICAgIDogdmFsdWVCLmxvY2FsZUNvbXBhcmUodmFsdWVBKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZGlyZWN0aW9uID09PSAnYXNjJyBcclxuICAgICAgICAgID8gKHZhbHVlQSAtIHZhbHVlQikgXHJcbiAgICAgICAgICA6ICh2YWx1ZUIgLSB2YWx1ZUEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIG9uQ2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBMaW1waWEgcmVjdXJzb3Mgc2kgZXMgbmVjZXNhcmlvXHJcbiAgfVxyXG59IiwgImltcG9ydCB7IEFwcCwgUGx1Z2luLCBXb3Jrc3BhY2VMZWFmfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgSTE4biB9IGZyb20gXCIuL2kxOG5cIjtcclxuaW1wb3J0IHsgT3ZlcnZpZXdWaWV3LCBPVkVSVklFV19WSUVXX1RZUEUsIENhbGVuZGFyTW9udGhWaWV3LCBDQUxFTkRBUl9NT05USF9WSUVXX1RZUEUsIENhbGVuZGFyV2Vla1ZpZXcsIENBTEVOREFSX1dFRUtfVklFV19UWVBFLCBcclxuICBDYWxlbmRhcldvcmtXZWVrVmlldywgQ0FMRU5EQVJfV09SS19XRUVLX1ZJRVdfVFlQRSwgQ2FsZW5kYXJEYXlWaWV3LCBDQUxFTkRBUl9EQVlfVklFV19UWVBFLCBMaXN0VmlldywgTElTVF9WSUVXX1RZUEUsXHJcbiAgQ2FsZW5kYXJWaWV3LCBDQUxFTkRBUl9WSUVXX1RZUEUsIFRpbWVsaW5lVmlldywgVElNRUxJTkVfVklFV19UWVBFLFxyXG4gIEdhbnR0VmlldywgR0FOVFRfVklFV19UWVBFLCBUYWJsZVZpZXcsIFRBQkxFX1ZJRVdfVFlQRSB9IGZyb20gXCIuLi92aWV3c1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZpZXdNYW5hZ2VyIHtcclxuICBwcml2YXRlIHJlZ2lzdGVyZWRWaWV3VHlwZXM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBQbHVnaW4sIHByaXZhdGUgaTE4bjogSTE4biwgcHJpdmF0ZSB0YXNrTWFuYWdlcjogYW55KSB7ICB9XHJcblxyXG4gIC8vIE1cdTAwRTl0b2RvIHBhcmEgcmVnaXN0cmFyIHRvZGFzIGxhcyB2aXN0YXNcclxuICBwdWJsaWMgcmVnaXN0ZXJWaWV3cygpOiB2b2lkIHtcclxuICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyVmlldyhPVkVSVklFV19WSUVXX1RZUEUsIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiBuZXcgT3ZlcnZpZXdWaWV3KGxlYWYsIHRoaXMucGx1Z2luLCB0aGlzLmkxOG4sIHRoaXMudGFza01hbmFnZXIpKTtcclxuICAgIHRoaXMucmVnaXN0ZXJlZFZpZXdUeXBlcy5wdXNoKE9WRVJWSUVXX1ZJRVdfVFlQRSk7XHJcbiAgICB0aGlzLnBsdWdpbi5yZWdpc3RlclZpZXcoQ0FMRU5EQVJfTU9OVEhfVklFV19UWVBFLCAobGVhZjogV29ya3NwYWNlTGVhZikgPT4gbmV3IENhbGVuZGFyTW9udGhWaWV3KGxlYWYsIHRoaXMucGx1Z2luLCB0aGlzLmkxOG4sIHRoaXMudGFza01hbmFnZXIpKTtcclxuICAgIHRoaXMucmVnaXN0ZXJlZFZpZXdUeXBlcy5wdXNoKENBTEVOREFSX01PTlRIX1ZJRVdfVFlQRSk7XHJcbiAgICB0aGlzLnBsdWdpbi5yZWdpc3RlclZpZXcoQ0FMRU5EQVJfV0VFS19WSUVXX1RZUEUsIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiBuZXcgQ2FsZW5kYXJXZWVrVmlldyhsZWFmLCB0aGlzLnBsdWdpbiwgdGhpcy5pMThuLCB0aGlzLnRhc2tNYW5hZ2VyKSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyZWRWaWV3VHlwZXMucHVzaChDQUxFTkRBUl9XRUVLX1ZJRVdfVFlQRSk7XHJcbiAgICB0aGlzLnBsdWdpbi5yZWdpc3RlclZpZXcoQ0FMRU5EQVJfV09SS19XRUVLX1ZJRVdfVFlQRSwgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IG5ldyBDYWxlbmRhcldvcmtXZWVrVmlldyhsZWFmLCB0aGlzLnBsdWdpbiwgdGhpcy5pMThuLCB0aGlzLnRhc2tNYW5hZ2VyKSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyZWRWaWV3VHlwZXMucHVzaChDQUxFTkRBUl9XT1JLX1dFRUtfVklFV19UWVBFKTtcclxuICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyVmlldyhDQUxFTkRBUl9EQVlfVklFV19UWVBFLCAobGVhZjogV29ya3NwYWNlTGVhZikgPT4gbmV3IENhbGVuZGFyRGF5VmlldyhsZWFmLCB0aGlzLnBsdWdpbiwgdGhpcy5pMThuLCB0aGlzLnRhc2tNYW5hZ2VyKSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyZWRWaWV3VHlwZXMucHVzaChDQUxFTkRBUl9EQVlfVklFV19UWVBFKTtcclxuICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyVmlldyhMSVNUX1ZJRVdfVFlQRSwgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IG5ldyBMaXN0VmlldyhsZWFmLCB0aGlzLnBsdWdpbiwgdGhpcy5pMThuLCB0aGlzLnRhc2tNYW5hZ2VyKSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyZWRWaWV3VHlwZXMucHVzaChMSVNUX1ZJRVdfVFlQRSk7XHJcbiAgICAvL3RoaXMucGx1Z2luLnJlZ2lzdGVyVmlldyhHQU5UVF9WSUVXX1RZUEUsIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiBuZXcgR2FudHRWaWV3KGxlYWYsIHRoaXMucGx1Z2luLCB0aGlzLmkxOG4pKTtcclxuICAgIC8vdGhpcy5yZWdpc3RlcmVkVmlld1R5cGVzLnB1c2goR0FOVFRfVklFV19UWVBFKTtcclxuICAgIC8vdGhpcy5wbHVnaW4ucmVnaXN0ZXJWaWV3KENBTEVOREFSX1ZJRVdfVFlQRSwgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IG5ldyBDYWxlbmRhclZpZXcobGVhZiwgdGhpcy5wbHVnaW4sIHRoaXMuaTE4biwgdGhpcy50YXNrTWFuYWdlcikpO1xyXG4gICAgLy90aGlzLnJlZ2lzdGVyZWRWaWV3VHlwZXMucHVzaChDQUxFTkRBUl9WSUVXX1RZUEUpO1xyXG4gICAgdGhpcy5wbHVnaW4ucmVnaXN0ZXJWaWV3KFRBQkxFX1ZJRVdfVFlQRSwgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IG5ldyBUYWJsZVZpZXcobGVhZiwgdGhpcy5wbHVnaW4sIHRoaXMuaTE4biwgdGhpcy50YXNrTWFuYWdlcikpO1xyXG4gICAgdGhpcy5yZWdpc3RlcmVkVmlld1R5cGVzLnB1c2goVEFCTEVfVklFV19UWVBFKTtcclxuICAgIC8vdGhpcy5wbHVnaW4ucmVnaXN0ZXJWaWV3KFRJTUVMSU5FX1ZJRVdfVFlQRSwgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IG5ldyBUaW1lbGluZVZpZXcobGVhZiwgdGhpcy5wbHVnaW4sIHRoaXMuaTE4bikpO1xyXG4gICAgLy90aGlzLnJlZ2lzdGVyZWRWaWV3VHlwZXMucHVzaChUSU1FTElORV9WSUVXX1RZUEUpO1xyXG4gIH1cclxuXHJcbiAgLy8gTVx1MDBFOXRvZG8gcGFyYSBhY3RpdmFyIHVuYSB2aXN0YSBlc3BlY1x1MDBFRGZpY2FcclxuICBwdWJsaWMgYXN5bmMgYWN0aXZhdGVWaWV3KHZpZXdUeXBlOiBzdHJpbmcsIGxlYWY/OiBXb3Jrc3BhY2VMZWFmKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZSh2aWV3VHlwZSk7XHJcbiAgICBcclxuICAgIGlmICghbGVhZikge1xyXG4gICAgICBsZWFmID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpO1xyXG4gICAgfSBcclxuXHJcbiAgICBhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7XHJcbiAgICAgIHR5cGU6IHZpZXdUeXBlLFxyXG4gICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICB9KTtcclxuICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcclxuICB9XHJcblxyXG4gIHVucmVnaXN0ZXJWaWV3cygpOiB2b2lkIHtcclxuICAgIC8vIENcdTAwRjNkaWdvIHBhcmEgZWxpbWluYXIgbGFzIHZpc3RhcyByZWdpc3RyYWRhc1xyXG4gICAgLy8gUG9yIGVqZW1wbG86XHJcbiAgICB0aGlzLnJlZ2lzdGVyZWRWaWV3VHlwZXMuZm9yRWFjaCh2aWV3VHlwZSA9PiB7XHJcbiAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKHZpZXdUeXBlKTtcclxuICAgIH0pO1xyXG4gIH1cclxufSIsICJleHBvcnQgY2xhc3MgSTE4biB7XHJcbiAgcHJpdmF0ZSB0cmFuc2xhdGlvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcclxuICBwcml2YXRlIGN1cnJlbnRMYW5ndWFnZTogc3RyaW5nID0gXCJlblwiO1xyXG4gIHByaXZhdGUgYXBwOiBhbnk7IC8vIEFkZCBhIHByb3BlcnR5IGZvciBhcHBcclxuXHJcbiAgY29uc3RydWN0b3IoYXBwOiBhbnkpIHtcclxuICAgIHRoaXMuYXBwID0gYXBwOyAvLyBJbml0aWFsaXplIGFwcCBpbiB0aGUgY29uc3RydWN0b3JcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWRMYW5ndWFnZShsYW5ndWFnZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gdGhpcy5hcHAudmF1bHQuYWRhcHRlci5nZXRSZXNvdXJjZVBhdGgoYC5vYnNpZGlhbi9wbHVnaW5zL29ic2lkaWFuLWFnZW5kYS9sb2NhbGVzLyR7bGFuZ3VhZ2V9Lmpzb25gKTtcclxuICAgICAgY29uc29sZS5sb2coXCJSdXRhIGdlbmVyYWRhIGNvbiBnZXRSZXNvdXJjZVBhdGg6XCIsIHRlbXBsYXRlUGF0aCk7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGVtcGxhdGVQYXRoKTtcclxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgbG9hZGluZyBsYW5ndWFnZSBmaWxlOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy50cmFuc2xhdGlvbnMgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gbGFuZ3VhZ2U7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9hZGluZyB0cmFuc2xhdGlvbnM6XCIsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHQoa2V5OiBzdHJpbmcsIHBhcmFtcz86IFJlY29yZDxzdHJpbmcsIGFueT4pOiBzdHJpbmcge1xyXG4gICAgLy8gRGl2aWRpciBsYSBjbGF2ZSBwb3IgcHVudG9zIHBhcmEgbmF2ZWdhciBlbiBsYSBlc3RydWN0dXJhIGplclx1MDBFMXJxdWljYVxyXG4gIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoJy4nKTtcclxuICBsZXQgcmVzdWx0OiBhbnkgPSB0aGlzLnRyYW5zbGF0aW9ucztcclxuICBcclxuICAvLyBOYXZlZ2FyIGEgdHJhdlx1MDBFOXMgZGVsIG9iamV0byBkZSB0cmFkdWNjaW9uZXNcclxuICBmb3IgKGNvbnN0IGsgb2Yga2V5cykge1xyXG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHRba10gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXN1bHQgPSByZXN1bHRba107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLndhcm4oYFRyYW5zbGF0aW9uIGtleSBub3QgZm91bmQ6ICR7a2V5fWApO1xyXG4gICAgICByZXR1cm4ga2V5OyAvLyBEZXZvbHZlciBsYSBjbGF2ZSBzaSBubyBzZSBlbmN1ZW50cmEgbGEgdHJhZHVjY2lcdTAwRjNuXHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIFNpIGVsIHJlc3VsdGFkbyBubyBlcyB1biBzdHJpbmcsIGRldm9sdmVyIGxhIGNsYXZlXHJcbiAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICBjb25zb2xlLndhcm4oYFRyYW5zbGF0aW9uIGtleSBkb2VzIG5vdCByZXNvbHZlIHRvIGEgc3RyaW5nOiAke2tleX1gKTtcclxuICAgIHJldHVybiBrZXk7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIFJlZW1wbGF6YXIgbG9zIHBsYWNlaG9sZGVyc1xyXG4gIGxldCB0cmFuc2xhdGlvbiA9IHJlc3VsdDtcclxuICBpZiAocGFyYW1zKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtwYXJhbUtleSwgcGFyYW1WYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xyXG4gICAgICB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uLnJlcGxhY2UobmV3IFJlZ0V4cChgeyR7cGFyYW1LZXl9fWAsICdnJyksIFN0cmluZyhwYXJhbVZhbHVlKSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiB0cmFuc2xhdGlvbjtcclxuICB9XHJcbn0iLCAiaW1wb3J0IEFnZW5kYVBsdWdpbiBmcm9tICcuLi9tYWluJztcclxuaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcIi4uL2NvcmUvaTE4blwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICBwbHVnaW46IEFnZW5kYVBsdWdpbjtcclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEFnZW5kYVBsdWdpbiwgcHJpdmF0ZSBpMThuOiBJMThuKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICB9XHJcblxyXG4gIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuXHJcbiAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKS5zZXROYW1lKHRoaXMuaTE4bi50KFwiZ2VuZXJhbF9zZXR0aW5nc1wiKSkuc2V0SGVhZGluZygpO1xyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSh0aGlzLmkxOG4udCgnbGFuZ3VhZ2UnKSlcclxuICAgICAgLnNldERlc2ModGhpcy5pMThuLnQoJ2xhbmd1YWdlX2Rlc2NyaXB0aW9uJykpXHJcbiAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+XHJcbiAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgIC5hZGRPcHRpb24oJ2VuJywgdGhpcy5pMThuLnQoJ2VuZ2xpc2gnKSlcclxuICAgICAgICAgIC5hZGRPcHRpb24oJ2VzJywgdGhpcy5pMThuLnQoJ3NwYW5pc2gnKSlcclxuICAgICAgICAgIC5hZGRPcHRpb24oJ2ZyJywgdGhpcy5pMThuLnQoJ2ZyZW5jaCcpKVxyXG4gICAgICAgICAgLmFkZE9wdGlvbignZGUnLCB0aGlzLmkxOG4udCgnZ2VybWFuJykpXHJcbiAgICAgICAgICAuYWRkT3B0aW9uKCdpdCcsIHRoaXMuaTE4bi50KCdpdGFsaWFuJykpXHJcbiAgICAgICAgICAuYWRkT3B0aW9uKCdwdCcsIHRoaXMuaTE4bi50KCdwb3J0dWd1ZXNlJykpXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxhbmd1YWdlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUodGhpcy5pMThuLnQoJ2NvbG9yU2NoZW1lJykpXHJcbiAgICAgIC5zZXREZXNjKHRoaXMuaTE4bi50KCdjb2xvclNjaGVtZV9kZXNjcmlwdGlvbicpKVxyXG4gICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PlxyXG4gICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAuYWRkT3B0aW9uKCdkZWZhdWx0JywgJ0RlZmF1bHQnKVxyXG4gICAgICAgICAgLmFkZE9wdGlvbignZGFyaycsICdEYXJrJylcclxuICAgICAgICAgIC5hZGRPcHRpb24oJ2xpZ2h0JywgJ0xpZ2h0JylcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29sb3JTY2hlbWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gIH1cclxufSIsICJleHBvcnQgaW50ZXJmYWNlIEFnZW5kYVBsdWdpblNldHRpbmdzIHtcclxuICAvLyBEZWZpbmUgeW91ciBwbHVnaW4gc2V0dGluZ3MgaGVyZVxyXG4gIGxhbmd1YWdlOiBzdHJpbmc7XHJcbiAgY29sb3JTY2hlbWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEFnZW5kYVBsdWdpblNldHRpbmdzID0ge1xyXG4gIGxhbmd1YWdlOiBcImVuXCIsXHJcbiAgY29sb3JTY2hlbWU6IFwiZGFya1wiLFxyXG59OyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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ZUFBYyxJQUFHLE1BQUssSUFBRyxVQUFTLElBQUcscUJBQW9CLElBQUcsc0JBQXFCLElBQUcsVUFBUyxJQUFHLFVBQVMsSUFBRyxXQUFVLElBQUcsYUFBWSxJQUFHLFFBQU8sSUFBRyxRQUFPLElBQUcsTUFBSztRQUMzZSxjQUFjLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUsQ0FBQyxJQUFHLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxHQUFFLENBQUMsSUFBRyxDQUFDLEdBQUUs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QUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQTtBQUNqQjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFHLG1CQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4QjtZQUNBLEtBQUs7QUFBRyxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzVCO1lBQ0EsS0FBSztBQUFJLG1CQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN6QjtZQUNBLEtBQUs7QUFBSSxpQkFBRyxLQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQzdCO1VBQU07O1FBR04sT0FBTyxDQUFDLEVBQUMsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsR0FBRSxFQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsQ0FBQyxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEVBQUMsR0FBRSxFQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEVBQUMsR0FBRSxFQUFDLEdBQUUsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEVBQUMsR0FBRSxFQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsRUFBQyxHQUFFLEVBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEVBQUMsR0FBRSxFQUFDLEdBQUUsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsRUFBQyxHQUFFLEVBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFHLENBQUMsR0FBRSxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsQ0FBQyxFQUFDLEdBQUUsRUFBQyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsRUFBQyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxLQUFJLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxHQUFHLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxLQUFJLElBQUcsQ0FBQyxHQUFFLEdBQUcsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxHQUFHLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsR0FBRyxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsS0FBSSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsS0FBSSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxLQUFJLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxHQUFHLEVBQUMsR0FBRSxFQUFDLElBQUcsS0FBSSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxLQUFJLElBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLENBQUMsR0FBRSxHQUFHLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsR0FBRyxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxHQUFHLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsR0FBRSxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxLQUFJLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEVBQUMsR0FBRSxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxHQUFHLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsR0FBRyxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEdBQUcsR0FBRSxJQUFHLElBQUcsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLENBQUMsR0FBRSxHQUFHLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsR0FBRyxHQUFFLElBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsR0FBRyxHQUFFLElBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsR0FBRyxFQUFDLEdBQUUsRUFBQyxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsR0FBRyxHQUFFLElBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxHQUFFLEVBQUMsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEVBQUMsQ0FBQztRQUM5L1YsZ0JBQWdCLEVBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxFQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsR0FBRSxLQUFJLENBQUMsR0FBRSxFQUFFLEdBQUUsS0FBSSxDQUFDLEdBQUUsRUFBRSxHQUFFLEtBQUksQ0FBQyxHQUFFLEVBQUUsR0FBRSxLQUFJLENBQUMsR0FBRSxFQUFFLEdBQUUsS0FBSSxDQUFDLEdBQUUsRUFBRSxHQUFFLEtBQUksQ0FBQyxHQUFFLEVBQUUsR0FB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QSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQ2Y7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUNmO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFDZjtBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQ2Y7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUNmO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFDZjtBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQ2Y7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUNmO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFDZjtBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQ2Y7QUFBQSxVQUFLO0FBQUEsUUFDUDtBQUFBLFFBQ0EsUUFBUTtBQUFBLFVBQ047QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUNmO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFDZjtBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQ2Y7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUNmO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFDZjtBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQ2Y7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUNmO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFDZjtBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQ2Y7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxRQUNqQjtBQUFBLFFBQ0EsT0FBTztBQUFBLFVBQ0w7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUNmO0FB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QUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxZQUFZO0FBQUEsTUFDeEMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxXQUFXO0FBQUEsTUFDdkMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxVQUFVO0FBQUEsTUFDdEMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxRQUFRO0FBQUEsTUFDcEMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxTQUFTO0FBQUEsTUFDckMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxZQUFZO0FBQUEsTUFDeEMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxZQUFZO0FBQUEsTUFDeEMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxNQUFNO0FBQUEsTUFDbEMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxhQUFhO0FBQUEsTUFDekMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxlQUFlO0FBQUEsTUFDM0MsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxVQUFVO0FBQUEsTUFDdEMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxVQUFVO0FBQUEsTUFDdEMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxTQUFTO0FBQUEsTUFDckMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxhQUFhO0FBQUEsTUFDekMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU8sZUFBZUEsU0FBUSxjQUFjO0FBQUEsTUFDMUMsT0FBTztBQUFBLElBQ1QsQ0FBQztBQUFBO0FBQUE7OztBQ3ZFRDtBQUFBO0FBQUE7QUFT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QyxLQUFLLEdBQUcsR0FBRztBQUFBLE1BQzFCLFlBQVksQ0FBQyxLQUFLLElBQUksR0FBRztBQUFBLE1BQ3pCLGVBQWUsQ0FBQyxHQUFHLEtBQUssR0FBRztBQUFBLE1BQzNCLFdBQVcsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3pCLFdBQVcsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3pCLGNBQWMsQ0FBQyxJQUFJLEtBQUssR0FBRztBQUFBLE1BQzNCLGFBQWEsQ0FBQyxLQUFLLElBQUksRUFBRTtBQUFBLE1BQ3pCLGVBQWUsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzdCLGVBQWUsQ0FBQyxJQUFJLEtBQUssRUFBRTtBQUFBLE1BQzNCLFdBQVcsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUFBLE1BQ3ZCLGFBQWEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNCLGNBQWMsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzVCLFFBQVEsQ0FBQyxLQUFLLEtBQUssQ0FBQztBQUFBLE1BQ3BCLGFBQWEsQ0FBQyxLQUFLLEtBQUssRUFBRTtBQUFBLE1BQzFCLFFBQVEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3RCLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUFBLE1BQ25CLGVBQWUsQ0FBQyxLQUFLLEtBQUssRUFBRTtBQUFBLE1BQzVCLFFBQVEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3RCLFlBQVksQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzFCLFdBQVcsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3pCLGFBQWEsQ0FBQyxLQUFLLElBQUksRUFBRTtBQUFBLE1BQ3pCLFVBQVUsQ0FBQyxJQUFJLEdBQUcsR0FBRztBQUFBLE1BQ3JCLFNBQVMsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3ZCLFNBQVMsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3ZCLFlBQVksQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzFCLGlCQUFpQixDQUFDLEtBQUssS0FBSyxHQUFHO0FBQUEsTUFDL0IsYUFBYSxDQUFDLEtBQUssS0FBSyxDQUFDO0FBQUEsTUFDekIsZ0JBQWdCLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUM5QixhQUFhLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUMzQixjQUFjLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUM1QixhQUFhLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUMzQix3QkFBd0IsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3RDLGFBQWEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNCLGNBQWMsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzVCLGFBQWEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNCLGFBQWEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNCLGVBQWUsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzdCLGlCQUFpQixDQUFDLElBQUksS0FBSyxHQUFHO0FBQUEsTUFDOUIsZ0JBQWdCLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUM5QixrQkFBa0IsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ2hDLGtCQUFrQixDQUFDLEtBQUssS0FBSyxHQUFHO0FBQUEsTUFDaEMsa0JBQWtCLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUNoQyxlQUFlLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUM3QixRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7QUFBQSxNQUNsQixhQUFhLENBQUMsSUFBSSxLQUFLLEVBQUU7QUFBQSxNQUN6QixTQUFTLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUN2QixXQUFXLENBQUMsS0FBSyxHQUFHLEdBQUc7QUFBQSxNQUN2QixVQUFVLENBQUMsS0FBSyxHQUFHLENBQUM7QUFBQSxNQUNwQixvQkFBb0IsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ2xDLGNBQWMsQ0FBQyxHQUFHLEdBQUcsR0FBRztBQUFBLE1BQ3hCLGdCQUFnQixDQUFDLEtBQUssSUFBSSxHQUFHO0FBQUEsTUFDN0IsZ0JBQWdCLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUM5QixrQkFBa0IsQ0FBQyxJQUFJLEtBQUssR0FBRztBQUFBLE1BQy9CLG1CQUFtQixDQUFDLEtBQUssS0FBSyxHQUFHO0FBQUEsTUFDakMscUJBQXFCLENBQUMsR0FBRyxLQUFLLEdBQUc7QUFBQSxNQUNqQyxtQkFBbUIsQ0FBQyxJQUFJLEtBQUssR0FBRztBQUFBLE1BQ2hDLG1CQUFtQixDQUFDLEtBQUssSUFBSSxHQUFHO0FBQUEsTUFDaEMsZ0JBQWdCLENBQUMsSUFBSSxJQUFJLEdBQUc7QUFBQSxNQUM1QixhQUFhLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUMzQixhQUFhLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUMzQixZQUFZLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUMxQixlQUFlLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUM3QixRQUFRLENBQUMsR0FBRyxHQUFHLEdBQUc7QUFBQSxNQUNsQixXQUFXLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUN6QixTQUFTLENBQUMsS0FBSyxLQUFLLENBQUM7QUFBQSxNQUNyQixhQUFhLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFBQSxNQUMxQixVQUFVLENBQUMsS0FBSyxLQUFLLENBQUM7QUFBQSxNQUN0QixhQUFhLENBQUMsS0FBSyxJQUFJLENBQUM7QUFBQSxNQUN4QixVQUFVLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUN4QixpQkFBaUIsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQy9CLGFBQWEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNCLGlCQUFpQixDQUFDLEtBQUssS0FBSyxHQUFHO0FBQUEsTUFDL0IsaUJBQWlCLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUMvQixjQUFjLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUM1QixhQUFhLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUMzQixRQUFRLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFBQSxNQUNyQixRQUFRLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUN0QixRQUFRLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUN0QixjQUFjLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUM1QixVQUFVLENBQUMsS0FBSyxHQUFHLEdBQUc7QUFBQSxNQUN0QixpQkFBaUIsQ0FBQyxLQUFLLElBQUksR0FBRztBQUFBLE1BQzlCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQztBQUFBLE1BQ2pCLGFBQWEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNCLGFBQWEsQ0FBQyxJQUFJLEtBQUssR0FBRztBQUFBLE1BQzFCLGVBQWUsQ0FBQyxLQUFLLElBQUksRUFBRTtBQUFBLE1BQzNCLFVBQVUsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3hCLGNBQWMsQ0FBQyxLQUFLLEtBQUssRUFBRTtBQUFBLE1BQzNCLFlBQVksQ0FBQyxJQUFJLEtBQUssRUFBRTtBQUFBLE1BQ3hCLFlBQVksQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzFCLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtBQUFBLE1BQ3RCLFVBQVUsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3hCLFdBQVcsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3pCLGFBQWEsQ0FBQyxLQUFLLElBQUksR0FBRztBQUFBLE1BQzFCLGFBQWEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNCLGFBQWEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzNCLFFBQVEsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3RCLGVBQWUsQ0FBQyxHQUFHLEtBQUssR0FBRztBQUFBLE1BQzNCLGFBQWEsQ0FBQyxJQUFJLEtBQUssR0FBRztBQUFBLE1BQzFCLE9BQU8sQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3JCLFFBQVEsQ0FBQyxHQUFHLEtBQUssR0FBRztBQUFBLE1BQ3BCLFdBQVcsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3pCLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtBQUFBLE1BQ3RCLGFBQWEsQ0FBQyxJQUFJLEtBQUssR0FBRztBQUFBLE1BQzFCLFVBQVUsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3hCLFNBQVMsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3ZCLFNBQVMsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQ3ZCLGNBQWMsQ0FBQyxLQUFLLEtBQUssR0FBRztBQUFBLE1BQzVCLFVBQVUsQ0FBQyxLQUFLLEtBQUssQ0FBQztBQUFBLE1BQ3RCLGVBQWUsQ0FBQyxLQUFLLEtBQUssRUFBRTtBQUFBLElBQzdCO0FBQUE7QUFBQTs7O0FDdkpBO0FBQUEsMEVBQUFDLFNBQUE7QUFDQSxRQUFJLGNBQWM7QUFNbEIsUUFBSSxrQkFBa0IsQ0FBQztBQUN2QixTQUFTLE9BQU8sYUFBYTtBQUM1QixVQUFJLFlBQVksZUFBZSxHQUFHLEdBQUc7QUFDcEMsd0JBQWdCLFlBQVksR0FBRyxDQUFDLElBQUk7QUFBQSxNQUNyQztBQUFBLElBQ0Q7QUFKUztBQU1ULFFBQUksVUFBVUEsUUFBTyxVQUFVO0FBQUEsTUFDOUIsS0FBSyxFQUFDLFVBQVUsR0FBRyxRQUFRLE1BQUs7QUFBQSxNQUNoQyxLQUFLLEVBQUMsVUFBVSxHQUFHLFFBQVEsTUFBSztBQUFBLE1BQ2hDLEtBQUssRUFBQyxVQUFVLEdBQUcsUUFBUSxNQUFLO0FBQUEsTUFDaEMsS0FBSyxFQUFDLFVBQVUsR0FBRyxRQUFRLE1BQUs7QUFBQSxNQUNoQyxNQUFNLEVBQUMsVUFBVSxHQUFHLFFBQVEsT0FBTTtBQUFBLE1BQ2xDLEtBQUssRUFBQyxVQUFVLEdBQUcsUUFBUSxNQUFLO0FBQUEsTUFDaEMsS0FBSyxFQUFDLFVBQVUsR0FBRyxRQUFRLE1BQUs7QUFBQSxNQUNoQyxLQUFLLEVBQUMsVUFBVSxHQUFHLFFBQVEsTUFBSztBQUFBLE1BQ2hDLEtBQUssRUFBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBQztBQUFBLE1BQ2xDLFNBQVMsRUFBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBQztBQUFBLE1BQzFDLFFBQVEsRUFBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBQztBQUFBLE1BQ3hDLFNBQVMsRUFBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBQztBQUFBLE1BQzFDLEtBQUssRUFBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLEtBQUssS0FBSyxHQUFHLEVBQUM7QUFBQSxNQUMxQyxPQUFPLEVBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLE9BQU8sS0FBSyxFQUFDO0FBQUEsTUFDbEQsTUFBTSxFQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFDO0FBQUEsSUFDckM7QUFHQSxTQUFTLFNBQVMsU0FBUztBQUMxQixVQUFJLFFBQVEsZUFBZSxLQUFLLEdBQUc7QUFDbEMsWUFBSSxFQUFFLGNBQWMsUUFBUSxLQUFLLElBQUk7QUFDcEMsZ0JBQU0sSUFBSSxNQUFNLGdDQUFnQyxLQUFLO0FBQUEsUUFDdEQ7QUFFQSxZQUFJLEVBQUUsWUFBWSxRQUFRLEtBQUssSUFBSTtBQUNsQyxnQkFBTSxJQUFJLE1BQU0sc0NBQXNDLEtBQUs7QUFBQSxRQUM1RDtBQUVBLFlBQUksUUFBUSxLQUFLLEVBQUUsT0FBTyxXQUFXLFFBQVEsS0FBSyxFQUFFLFVBQVU7QUFDN0QsZ0JBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLO0FBQUEsUUFDOUQ7QUFFSSxtQkFBVyxRQUFRLEtBQUssRUFBRTtBQUMxQixpQkFBUyxRQUFRLEtBQUssRUFBRTtBQUM1QixlQUFPLFFBQVEsS0FBSyxFQUFFO0FBQ3RCLGVBQU8sUUFBUSxLQUFLLEVBQUU7QUFDdEIsZUFBTyxlQUFlLFFBQVEsS0FBSyxHQUFHLFlBQVksRUFBQyxPQUFPLFNBQVEsQ0FBQztBQUNuRSxlQUFPLGVBQWUsUUFBUSxLQUFLLEdBQUcsVUFBVSxFQUFDLE9BQU8sT0FBTSxDQUFDO0FBQUEsTUFDaEU7QUFBQSxJQUNEO0FBUE07QUFDQTtBQWZHO0FBdUJULFlBQVEsSUFBSSxNQUFNLFNBQVUsS0FBSztBQUNoQyxVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLE1BQU0sS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQzFCLFVBQUksTUFBTSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUM7QUFDMUIsVUFBSSxRQUFRLE1BQU07QUFDbEIsVUFBSTtBQUNKLFVBQUlDO0FBQ0osVUFBSUM7QUFFSixVQUFJLFFBQVEsS0FBSztBQUNoQixZQUFJO0FBQUEsTUFDTCxXQUFXLE1BQU0sS0FBSztBQUNyQixhQUFLLElBQUksS0FBSztBQUFBLE1BQ2YsV0FBVyxNQUFNLEtBQUs7QUFDckIsWUFBSSxLQUFLLElBQUksS0FBSztBQUFBLE1BQ25CLFdBQVcsTUFBTSxLQUFLO0FBQ3JCLFlBQUksS0FBSyxJQUFJLEtBQUs7QUFBQSxNQUNuQjtBQUVBLFVBQUksS0FBSyxJQUFJLElBQUksSUFBSSxHQUFHO0FBRXhCLFVBQUksSUFBSSxHQUFHO0FBQ1YsYUFBSztBQUFBLE1BQ047QUFFQSxNQUFBQSxNQUFLLE1BQU0sT0FBTztBQUVsQixVQUFJLFFBQVEsS0FBSztBQUNoQixRQUFBRCxLQUFJO0FBQUEsTUFDTCxXQUFXQyxNQUFLLEtBQUs7QUFDcEIsUUFBQUQsS0FBSSxTQUFTLE1BQU07QUFBQSxNQUNwQixPQUFPO0FBQ04sUUFBQUEsS0FBSSxTQUFTLElBQUksTUFBTTtBQUFBLE1BQ3hCO0FBRUEsYUFBTyxDQUFDLEdBQUdBLEtBQUksS0FBS0MsS0FBSSxHQUFHO0FBQUEsSUFDNUI7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBQ0osVUFBSTtBQUNKLFVBQUlEO0FBRUosVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSSxJQUFJLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUN4QixVQUFJLE9BQU8sSUFBSSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUM7QUFDL0IsVUFBSSxRQUFRLFNBQVUsR0FBRztBQUN4QixnQkFBUSxJQUFJLEtBQUssSUFBSSxPQUFPLElBQUk7QUFBQSxNQUNqQztBQUVBLFVBQUksU0FBUyxHQUFHO0FBQ2YsWUFBSUEsS0FBSTtBQUFBLE1BQ1QsT0FBTztBQUNOLFFBQUFBLEtBQUksT0FBTztBQUNYLGVBQU8sTUFBTSxDQUFDO0FBQ2QsZUFBTyxNQUFNLENBQUM7QUFDZCxlQUFPLE1BQU0sQ0FBQztBQUVkLFlBQUksTUFBTSxHQUFHO0FBQ1osY0FBSSxPQUFPO0FBQUEsUUFDWixXQUFXLE1BQU0sR0FBRztBQUNuQixjQUFLLElBQUksSUFBSyxPQUFPO0FBQUEsUUFDdEIsV0FBVyxNQUFNLEdBQUc7QUFDbkIsY0FBSyxJQUFJLElBQUssT0FBTztBQUFBLFFBQ3RCO0FBQ0EsWUFBSSxJQUFJLEdBQUc7QUFDVixlQUFLO0FBQUEsUUFDTixXQUFXLElBQUksR0FBRztBQUNqQixlQUFLO0FBQUEsUUFDTjtBQUFBLE1BQ0Q7QUFFQSxhQUFPO0FBQUEsUUFDTixJQUFJO0FBQUEsUUFDSkEsS0FBSTtBQUFBLFFBQ0osSUFBSTtBQUFBLE1BQ0w7QUFBQSxJQUNEO0FBRUEsWUFBUSxJQUFJLE1BQU0sU0FBVSxLQUFLO0FBQ2hDLFVBQUksSUFBSSxJQUFJLENBQUM7QUFDYixVQUFJLElBQUksSUFBSSxDQUFDO0FBQ2IsVUFBSSxJQUFJLElBQUksQ0FBQztBQUNiLFVBQUksSUFBSSxRQUFRLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUM5QixVQUFJLElBQUksSUFBSSxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQztBQUU1QyxVQUFJLElBQUksSUFBSSxNQUFNLEtBQUssSUFBSSxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQztBQUU1QyxhQUFPLENBQUMsR0FBRyxJQUFJLEtBQUssSUFBSSxHQUFHO0FBQUEsSUFDNUI7QUFFQSxZQUFRLElBQUksT0FBTyxTQUFVLEtBQUs7QUFDakMsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBQ0osVUFBSTtBQUVKLFVBQUksS0FBSyxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2hDLFdBQUssSUFBSSxJQUFJLE1BQU0sSUFBSSxNQUFNO0FBQzdCLFdBQUssSUFBSSxJQUFJLE1BQU0sSUFBSSxNQUFNO0FBQzdCLFdBQUssSUFBSSxJQUFJLE1BQU0sSUFBSSxNQUFNO0FBRTdCLGFBQU8sQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUc7QUFBQSxJQUMzQztBQUtBLGFBQVMsb0JBQW9CLEdBQUcsR0FBRztBQUNsQyxhQUNDLEtBQUssSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQ3ZCLEtBQUssSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQ3ZCLEtBQUssSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQUEsSUFFekI7QUFFQSxZQUFRLElBQUksVUFBVSxTQUFVLEtBQUs7QUFDcEMsVUFBSSxXQUFXLGdCQUFnQixHQUFHO0FBQ2xDLFVBQUksVUFBVTtBQUNiLGVBQU87QUFBQSxNQUNSO0FBRUEsVUFBSSx5QkFBeUI7QUFDN0IsVUFBSTtBQUVKLGVBQVMsV0FBVyxhQUFhO0FBQ2hDLFlBQUksWUFBWSxlQUFlLE9BQU8sR0FBRztBQUN4QyxjQUFJLFFBQVEsWUFBWSxPQUFPO0FBRy9CLGNBQUksV0FBVyxvQkFBb0IsS0FBSyxLQUFLO0FBRzdDLGNBQUksV0FBVyx3QkFBd0I7QUFDdEMscUNBQXlCO0FBQ3pCLG9DQUF3QjtBQUFBLFVBQ3pCO0FBQUEsUUFDRDtBQUFBLE1BQ0Q7QUFFQSxhQUFPO0FBQUEsSUFDUjtBQUVBLFlBQVEsUUFBUSxNQUFNLFNBQVUsU0FBUztBQUN4QyxhQUFPLFlBQVksT0FBTztBQUFBLElBQzNCO0FBRUEsWUFBUSxJQUFJLE1BQU0sU0FBVSxLQUFLO0FBQ2hDLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBR2pCLFVBQUksSUFBSSxVQUFVLEtBQUssS0FBTSxJQUFJLFNBQVMsT0FBUSxHQUFHLElBQUssSUFBSTtBQUM5RCxVQUFJLElBQUksVUFBVSxLQUFLLEtBQU0sSUFBSSxTQUFTLE9BQVEsR0FBRyxJQUFLLElBQUk7QUFDOUQsVUFBSSxJQUFJLFVBQVUsS0FBSyxLQUFNLElBQUksU0FBUyxPQUFRLEdBQUcsSUFBSyxJQUFJO0FBRTlELFVBQUksSUFBSyxJQUFJLFNBQVcsSUFBSSxTQUFXLElBQUk7QUFDM0MsVUFBSSxJQUFLLElBQUksU0FBVyxJQUFJLFNBQVcsSUFBSTtBQUMzQyxVQUFJLElBQUssSUFBSSxTQUFXLElBQUksU0FBVyxJQUFJO0FBRTNDLGFBQU8sQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksR0FBRztBQUFBLElBQ2xDO0FBRUEsWUFBUSxJQUFJLE1BQU0sU0FBVSxLQUFLO0FBQ2hDLFVBQUksTUFBTSxRQUFRLElBQUksSUFBSSxHQUFHO0FBQzdCLFVBQUksSUFBSSxJQUFJLENBQUM7QUFDYixVQUFJLElBQUksSUFBSSxDQUFDO0FBQ2IsVUFBSSxJQUFJLElBQUksQ0FBQztBQUNiLFVBQUlDO0FBQ0osVUFBSTtBQUNKLFVBQUk7QUFFSixXQUFLO0FBQ0wsV0FBSztBQUNMLFdBQUs7QUFFTCxVQUFJLElBQUksVUFBVyxLQUFLLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSyxRQUFRLElBQU0sS0FBSztBQUM1RCxVQUFJLElBQUksVUFBVyxLQUFLLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSyxRQUFRLElBQU0sS0FBSztBQUM1RCxVQUFJLElBQUksVUFBVyxLQUFLLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSyxRQUFRLElBQU0sS0FBSztBQUU1RCxNQUFBQSxLQUFLLE1BQU0sSUFBSztBQUNoQixVQUFJLE9BQU8sSUFBSTtBQUNmLFVBQUksT0FBTyxJQUFJO0FBRWYsYUFBTyxDQUFDQSxJQUFHLEdBQUcsQ0FBQztBQUFBLElBQ2hCO0FBRUEsWUFBUSxJQUFJLE1BQU0sU0FBVSxLQUFLO0FBQ2hDLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJRCxLQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUlDLEtBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBQ0osVUFBSTtBQUNKLFVBQUk7QUFFSixVQUFJRCxPQUFNLEdBQUc7QUFDWixjQUFNQyxLQUFJO0FBQ1YsZUFBTyxDQUFDLEtBQUssS0FBSyxHQUFHO0FBQUEsTUFDdEI7QUFFQSxVQUFJQSxLQUFJLEtBQUs7QUFDWixhQUFLQSxNQUFLLElBQUlEO0FBQUEsTUFDZixPQUFPO0FBQ04sYUFBS0MsS0FBSUQsS0FBSUMsS0FBSUQ7QUFBQSxNQUNsQjtBQUVBLFdBQUssSUFBSUMsS0FBSTtBQUViLFlBQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNkLGVBQVMsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLO0FBQzNCLGFBQUssSUFBSSxJQUFJLElBQUksRUFBRSxJQUFJO0FBQ3ZCLFlBQUksS0FBSyxHQUFHO0FBQ1g7QUFBQSxRQUNEO0FBQ0EsWUFBSSxLQUFLLEdBQUc7QUFDWDtBQUFBLFFBQ0Q7QUFFQSxZQUFJLElBQUksS0FBSyxHQUFHO0FBQ2YsZ0JBQU0sTUFBTSxLQUFLLE1BQU0sSUFBSTtBQUFBLFFBQzVCLFdBQVcsSUFBSSxLQUFLLEdBQUc7QUFDdEIsZ0JBQU07QUFBQSxRQUNQLFdBQVcsSUFBSSxLQUFLLEdBQUc7QUFDdEIsZ0JBQU0sTUFBTSxLQUFLLE9BQU8sSUFBSSxJQUFJLE1BQU07QUFBQSxRQUN2QyxPQUFPO0FBQ04sZ0JBQU07QUFBQSxRQUNQO0FBRUEsWUFBSSxDQUFDLElBQUksTUFBTTtBQUFBLE1BQ2hCO0FBRUEsYUFBTztBQUFBLElBQ1I7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSSxJQUFJLElBQUksQ0FBQztBQUNiLFVBQUlELEtBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSUMsS0FBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLE9BQU9EO0FBQ1gsVUFBSSxPQUFPLEtBQUssSUFBSUMsSUFBRyxJQUFJO0FBQzNCLFVBQUk7QUFDSixVQUFJO0FBRUosTUFBQUEsTUFBSztBQUNMLE1BQUFELE1BQU1DLE1BQUssSUFBS0EsS0FBSSxJQUFJQTtBQUN4QixjQUFRLFFBQVEsSUFBSSxPQUFPLElBQUk7QUFDL0IsV0FBS0EsS0FBSUQsTUFBSztBQUNkLFdBQUtDLE9BQU0sSUFBSyxJQUFJLFFBQVMsT0FBTyxRQUFTLElBQUlELE1BQU1DLEtBQUlEO0FBRTNELGFBQU8sQ0FBQyxHQUFHLEtBQUssS0FBSyxJQUFJLEdBQUc7QUFBQSxJQUM3QjtBQUVBLFlBQVEsSUFBSSxNQUFNLFNBQVUsS0FBSztBQUNoQyxVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSUEsS0FBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSSxLQUFLLEtBQUssTUFBTSxDQUFDLElBQUk7QUFFekIsVUFBSSxJQUFJLElBQUksS0FBSyxNQUFNLENBQUM7QUFDeEIsVUFBSSxJQUFJLE1BQU0sS0FBSyxJQUFJQTtBQUN2QixVQUFJLElBQUksTUFBTSxLQUFLLElBQUtBLEtBQUk7QUFDNUIsVUFBSSxJQUFJLE1BQU0sS0FBSyxJQUFLQSxNQUFLLElBQUk7QUFDakMsV0FBSztBQUVMLGNBQVEsSUFBSTtBQUFBLFFBQ1gsS0FBSztBQUNKLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNoQixLQUFLO0FBQ0osaUJBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2hCLEtBQUs7QUFDSixpQkFBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDaEIsS0FBSztBQUNKLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNoQixLQUFLO0FBQ0osaUJBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2hCLEtBQUs7QUFDSixpQkFBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUEsTUFDakI7QUFBQSxJQUNEO0FBRUEsWUFBUSxJQUFJLE1BQU0sU0FBVSxLQUFLO0FBQ2hDLFVBQUksSUFBSSxJQUFJLENBQUM7QUFDYixVQUFJQSxLQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLE9BQU8sS0FBSyxJQUFJLEdBQUcsSUFBSTtBQUMzQixVQUFJO0FBQ0osVUFBSTtBQUNKLFVBQUlDO0FBRUosTUFBQUEsTUFBSyxJQUFJRCxNQUFLO0FBQ2QsY0FBUSxJQUFJQSxNQUFLO0FBQ2pCLFdBQUtBLEtBQUk7QUFDVCxZQUFPLFFBQVEsSUFBSyxPQUFPLElBQUk7QUFDL0IsV0FBSyxNQUFNO0FBQ1gsTUFBQUMsTUFBSztBQUVMLGFBQU8sQ0FBQyxHQUFHLEtBQUssS0FBS0EsS0FBSSxHQUFHO0FBQUEsSUFDN0I7QUFHQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksS0FBSyxJQUFJLENBQUMsSUFBSTtBQUNsQixVQUFJLEtBQUssSUFBSSxDQUFDLElBQUk7QUFDbEIsVUFBSSxRQUFRLEtBQUs7QUFDakIsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBQ0osVUFBSUM7QUFHSixVQUFJLFFBQVEsR0FBRztBQUNkLGNBQU07QUFDTixjQUFNO0FBQUEsTUFDUDtBQUVBLFVBQUksS0FBSyxNQUFNLElBQUksQ0FBQztBQUNwQixVQUFJLElBQUk7QUFDUixVQUFJLElBQUksSUFBSTtBQUVaLFdBQUssSUFBSSxPQUFVLEdBQUc7QUFDckIsWUFBSSxJQUFJO0FBQUEsTUFDVDtBQUVBLE1BQUFBLEtBQUksS0FBSyxLQUFLLElBQUk7QUFFbEIsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBQ0osY0FBUSxHQUFHO0FBQUEsUUFDVjtBQUFBLFFBQ0EsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFHLGNBQUk7QUFBRyxjQUFJQTtBQUFHLGNBQUk7QUFBSTtBQUFBLFFBQzlCLEtBQUs7QUFBRyxjQUFJQTtBQUFHLGNBQUk7QUFBRyxjQUFJO0FBQUk7QUFBQSxRQUM5QixLQUFLO0FBQUcsY0FBSTtBQUFJLGNBQUk7QUFBRyxjQUFJQTtBQUFHO0FBQUEsUUFDOUIsS0FBSztBQUFHLGNBQUk7QUFBSSxjQUFJQTtBQUFHLGNBQUk7QUFBRztBQUFBLFFBQzlCLEtBQUs7QUFBRyxjQUFJQTtBQUFHLGNBQUk7QUFBSSxjQUFJO0FBQUc7QUFBQSxRQUM5QixLQUFLO0FBQUcsY0FBSTtBQUFHLGNBQUk7QUFBSSxjQUFJQTtBQUFHO0FBQUEsTUFDL0I7QUFFQSxhQUFPLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUc7QUFBQSxJQUNsQztBQUVBLFlBQVEsS0FBSyxNQUFNLFNBQVUsTUFBTTtBQUNsQyxVQUFJLElBQUksS0FBSyxDQUFDLElBQUk7QUFDbEIsVUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLFVBQUksSUFBSSxLQUFLLENBQUMsSUFBSTtBQUNsQixVQUFJLElBQUksS0FBSyxDQUFDLElBQUk7QUFDbEIsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBRUosVUFBSSxJQUFJLEtBQUssSUFBSSxHQUFHLEtBQUssSUFBSSxLQUFLLENBQUM7QUFDbkMsVUFBSSxJQUFJLEtBQUssSUFBSSxHQUFHLEtBQUssSUFBSSxLQUFLLENBQUM7QUFDbkMsVUFBSSxJQUFJLEtBQUssSUFBSSxHQUFHLEtBQUssSUFBSSxLQUFLLENBQUM7QUFFbkMsYUFBTyxDQUFDLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxHQUFHO0FBQUEsSUFDbEM7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBRUosVUFBSyxJQUFJLFNBQVcsSUFBSSxVQUFZLElBQUk7QUFDeEMsVUFBSyxJQUFJLFVBQVksSUFBSSxTQUFXLElBQUk7QUFDeEMsVUFBSyxJQUFJLFNBQVcsSUFBSSxTQUFZLElBQUk7QUFHeEMsVUFBSSxJQUFJLFdBQ0gsUUFBUSxLQUFLLElBQUksR0FBRyxJQUFNLEdBQUcsSUFBSyxRQUNwQyxJQUFJO0FBRVAsVUFBSSxJQUFJLFdBQ0gsUUFBUSxLQUFLLElBQUksR0FBRyxJQUFNLEdBQUcsSUFBSyxRQUNwQyxJQUFJO0FBRVAsVUFBSSxJQUFJLFdBQ0gsUUFBUSxLQUFLLElBQUksR0FBRyxJQUFNLEdBQUcsSUFBSyxRQUNwQyxJQUFJO0FBRVAsVUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDOUIsVUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDOUIsVUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFFOUIsYUFBTyxDQUFDLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxHQUFHO0FBQUEsSUFDbEM7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSSxJQUFJLElBQUksQ0FBQztBQUNiLFVBQUksSUFBSSxJQUFJLENBQUM7QUFDYixVQUFJLElBQUksSUFBSSxDQUFDO0FBQ2IsVUFBSUQ7QUFDSixVQUFJO0FBQ0osVUFBSTtBQUVKLFdBQUs7QUFDTCxXQUFLO0FBQ0wsV0FBSztBQUVMLFVBQUksSUFBSSxVQUFXLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFLLFFBQVEsSUFBTSxLQUFLO0FBQzVELFVBQUksSUFBSSxVQUFXLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFLLFFBQVEsSUFBTSxLQUFLO0FBQzVELFVBQUksSUFBSSxVQUFXLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFLLFFBQVEsSUFBTSxLQUFLO0FBRTVELE1BQUFBLEtBQUssTUFBTSxJQUFLO0FBQ2hCLFVBQUksT0FBTyxJQUFJO0FBQ2YsVUFBSSxPQUFPLElBQUk7QUFFZixhQUFPLENBQUNBLElBQUcsR0FBRyxDQUFDO0FBQUEsSUFDaEI7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSUEsS0FBSSxJQUFJLENBQUM7QUFDYixVQUFJLElBQUksSUFBSSxDQUFDO0FBQ2IsVUFBSSxJQUFJLElBQUksQ0FBQztBQUNiLFVBQUk7QUFDSixVQUFJO0FBQ0osVUFBSTtBQUVKLFdBQUtBLEtBQUksTUFBTTtBQUNmLFVBQUksSUFBSSxNQUFNO0FBQ2QsVUFBSSxJQUFJLElBQUk7QUFFWixVQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsQ0FBQztBQUN0QixVQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsQ0FBQztBQUN0QixVQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsQ0FBQztBQUN0QixVQUFJLEtBQUssVUFBVyxNQUFNLElBQUksS0FBSyxPQUFPO0FBQzFDLFVBQUksS0FBSyxVQUFXLE1BQU0sSUFBSSxLQUFLLE9BQU87QUFDMUMsVUFBSSxLQUFLLFVBQVcsTUFBTSxJQUFJLEtBQUssT0FBTztBQUUxQyxXQUFLO0FBQ0wsV0FBSztBQUNMLFdBQUs7QUFFTCxhQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7QUFBQSxJQUNoQjtBQUVBLFlBQVEsSUFBSSxNQUFNLFNBQVUsS0FBSztBQUNoQyxVQUFJQSxLQUFJLElBQUksQ0FBQztBQUNiLFVBQUksSUFBSSxJQUFJLENBQUM7QUFDYixVQUFJLElBQUksSUFBSSxDQUFDO0FBQ2IsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBRUosV0FBSyxLQUFLLE1BQU0sR0FBRyxDQUFDO0FBQ3BCLFVBQUksS0FBSyxNQUFNLElBQUksS0FBSztBQUV4QixVQUFJLElBQUksR0FBRztBQUNWLGFBQUs7QUFBQSxNQUNOO0FBRUEsVUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQztBQUUzQixhQUFPLENBQUNBLElBQUcsR0FBRyxDQUFDO0FBQUEsSUFDaEI7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSUEsS0FBSSxJQUFJLENBQUM7QUFDYixVQUFJLElBQUksSUFBSSxDQUFDO0FBQ2IsVUFBSSxJQUFJLElBQUksQ0FBQztBQUNiLFVBQUk7QUFDSixVQUFJO0FBQ0osVUFBSTtBQUVKLFdBQUssSUFBSSxNQUFNLElBQUksS0FBSztBQUN4QixVQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7QUFDbkIsVUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO0FBRW5CLGFBQU8sQ0FBQ0EsSUFBRyxHQUFHLENBQUM7QUFBQSxJQUNoQjtBQUVBLFlBQVEsSUFBSSxTQUFTLFNBQVUsTUFBTTtBQUNwQyxVQUFJLElBQUksS0FBSyxDQUFDO0FBQ2QsVUFBSSxJQUFJLEtBQUssQ0FBQztBQUNkLFVBQUksSUFBSSxLQUFLLENBQUM7QUFDZCxVQUFJLFFBQVEsS0FBSyxZQUFZLFVBQVUsQ0FBQyxJQUFJLFFBQVEsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDO0FBRW5FLGNBQVEsS0FBSyxNQUFNLFFBQVEsRUFBRTtBQUU3QixVQUFJLFVBQVUsR0FBRztBQUNoQixlQUFPO0FBQUEsTUFDUjtBQUVBLFVBQUksT0FBTyxNQUNOLEtBQUssTUFBTSxJQUFJLEdBQUcsS0FBSyxJQUN4QixLQUFLLE1BQU0sSUFBSSxHQUFHLEtBQUssSUFDeEIsS0FBSyxNQUFNLElBQUksR0FBRztBQUVyQixVQUFJLFVBQVUsR0FBRztBQUNoQixnQkFBUTtBQUFBLE1BQ1Q7QUFFQSxhQUFPO0FBQUEsSUFDUjtBQUVBLFlBQVEsSUFBSSxTQUFTLFNBQVUsTUFBTTtBQUdwQyxhQUFPLFFBQVEsSUFBSSxPQUFPLFFBQVEsSUFBSSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztBQUFBLElBQ3pEO0FBRUEsWUFBUSxJQUFJLFVBQVUsU0FBVSxNQUFNO0FBQ3JDLFVBQUksSUFBSSxLQUFLLENBQUM7QUFDZCxVQUFJLElBQUksS0FBSyxDQUFDO0FBQ2QsVUFBSSxJQUFJLEtBQUssQ0FBQztBQUlkLFVBQUksTUFBTSxLQUFLLE1BQU0sR0FBRztBQUN2QixZQUFJLElBQUksR0FBRztBQUNWLGlCQUFPO0FBQUEsUUFDUjtBQUVBLFlBQUksSUFBSSxLQUFLO0FBQ1osaUJBQU87QUFBQSxRQUNSO0FBRUEsZUFBTyxLQUFLLE9BQVEsSUFBSSxLQUFLLE1BQU8sRUFBRSxJQUFJO0FBQUEsTUFDM0M7QUFFQSxVQUFJLE9BQU8sS0FDUCxLQUFLLEtBQUssTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUMzQixJQUFJLEtBQUssTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUMzQixLQUFLLE1BQU0sSUFBSSxNQUFNLENBQUM7QUFFekIsYUFBTztBQUFBLElBQ1I7QUFFQSxZQUFRLE9BQU8sTUFBTSxTQUFVLE1BQU07QUFDcEMsVUFBSSxRQUFRLE9BQU87QUFHbkIsVUFBSSxVQUFVLEtBQUssVUFBVSxHQUFHO0FBQy9CLFlBQUksT0FBTyxJQUFJO0FBQ2QsbUJBQVM7QUFBQSxRQUNWO0FBRUEsZ0JBQVEsUUFBUSxPQUFPO0FBRXZCLGVBQU8sQ0FBQyxPQUFPLE9BQU8sS0FBSztBQUFBLE1BQzVCO0FBRUEsVUFBSSxRQUFRLENBQUMsRUFBRSxPQUFPLE1BQU0sS0FBSztBQUNqQyxVQUFJLEtBQU0sUUFBUSxLQUFLLE9BQVE7QUFDL0IsVUFBSSxLQUFPLFNBQVMsSUFBSyxLQUFLLE9BQVE7QUFDdEMsVUFBSSxLQUFPLFNBQVMsSUFBSyxLQUFLLE9BQVE7QUFFdEMsYUFBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUEsSUFDaEI7QUFFQSxZQUFRLFFBQVEsTUFBTSxTQUFVLE1BQU07QUFFckMsVUFBSSxRQUFRLEtBQUs7QUFDaEIsWUFBSSxLQUFLLE9BQU8sT0FBTyxLQUFLO0FBQzVCLGVBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQ2hCO0FBRUEsY0FBUTtBQUVSLFVBQUk7QUFDSixVQUFJLElBQUksS0FBSyxNQUFNLE9BQU8sRUFBRSxJQUFJLElBQUk7QUFDcEMsVUFBSSxJQUFJLEtBQUssT0FBTyxNQUFNLE9BQU8sTUFBTSxDQUFDLElBQUksSUFBSTtBQUNoRCxVQUFJLElBQUssTUFBTSxJQUFLLElBQUk7QUFFeEIsYUFBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUEsSUFDaEI7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLE1BQU07QUFDakMsVUFBSSxZQUFZLEtBQUssTUFBTSxLQUFLLENBQUMsQ0FBQyxJQUFJLFFBQVMsUUFDMUMsS0FBSyxNQUFNLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUyxNQUNoQyxLQUFLLE1BQU0sS0FBSyxDQUFDLENBQUMsSUFBSTtBQUUxQixVQUFJLFNBQVMsUUFBUSxTQUFTLEVBQUUsRUFBRSxZQUFZO0FBQzlDLGFBQU8sU0FBUyxVQUFVLE9BQU8sTUFBTSxJQUFJO0FBQUEsSUFDNUM7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLE1BQU07QUFDakMsVUFBSUUsU0FBUSxLQUFLLFNBQVMsRUFBRSxFQUFFLE1BQU0sMEJBQTBCO0FBQzlELFVBQUksQ0FBQ0EsUUFBTztBQUNYLGVBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQ2hCO0FBRUEsVUFBSSxjQUFjQSxPQUFNLENBQUM7QUFFekIsVUFBSUEsT0FBTSxDQUFDLEVBQUUsV0FBVyxHQUFHO0FBQzFCLHNCQUFjLFlBQVksTUFBTSxFQUFFLEVBQUUsSUFBSSxTQUFVLE1BQU07QUFDdkQsaUJBQU8sT0FBTztBQUFBLFFBQ2YsQ0FBQyxFQUFFLEtBQUssRUFBRTtBQUFBLE1BQ1g7QUFFQSxVQUFJLFVBQVUsU0FBUyxhQUFhLEVBQUU7QUFDdEMsVUFBSSxJQUFLLFdBQVcsS0FBTTtBQUMxQixVQUFJLElBQUssV0FBVyxJQUFLO0FBQ3pCLFVBQUksSUFBSSxVQUFVO0FBRWxCLGFBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUFBLElBQ2hCO0FBRUEsWUFBUSxJQUFJLE1BQU0sU0FBVSxLQUFLO0FBQ2hDLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDcEMsVUFBSSxNQUFNLEtBQUssSUFBSSxLQUFLLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUNwQyxVQUFJLFNBQVUsTUFBTTtBQUNwQixVQUFJO0FBQ0osVUFBSTtBQUVKLFVBQUksU0FBUyxHQUFHO0FBQ2Ysb0JBQVksT0FBTyxJQUFJO0FBQUEsTUFDeEIsT0FBTztBQUNOLG9CQUFZO0FBQUEsTUFDYjtBQUVBLFVBQUksVUFBVSxHQUFHO0FBQ2hCLGNBQU07QUFBQSxNQUNQLFdBQ0ksUUFBUSxHQUFHO0FBQ2QsZUFBUSxJQUFJLEtBQUssU0FBVTtBQUFBLE1BQzVCLFdBQ0ksUUFBUSxHQUFHO0FBQ2QsY0FBTSxLQUFLLElBQUksS0FBSztBQUFBLE1BQ3JCLE9BQU87QUFDTixjQUFNLEtBQUssSUFBSSxLQUFLLFNBQVM7QUFBQSxNQUM5QjtBQUVBLGFBQU87QUFDUCxhQUFPO0FBRVAsYUFBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEtBQUssWUFBWSxHQUFHO0FBQUEsSUFDakQ7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSUgsS0FBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJQyxLQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSTtBQUNSLFVBQUksSUFBSTtBQUVSLFVBQUlBLEtBQUksS0FBSztBQUNaLFlBQUksSUFBTUQsS0FBSUM7QUFBQSxNQUNmLE9BQU87QUFDTixZQUFJLElBQU1ELE1BQUssSUFBTUM7QUFBQSxNQUN0QjtBQUVBLFVBQUksSUFBSSxHQUFLO0FBQ1osYUFBS0EsS0FBSSxNQUFNLE1BQU0sSUFBTTtBQUFBLE1BQzVCO0FBRUEsYUFBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxJQUFJLEdBQUc7QUFBQSxJQUNqQztBQUVBLFlBQVEsSUFBSSxNQUFNLFNBQVUsS0FBSztBQUNoQyxVQUFJRCxLQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUVqQixVQUFJLElBQUlBLEtBQUk7QUFDWixVQUFJLElBQUk7QUFFUixVQUFJLElBQUksR0FBSztBQUNaLGFBQUssSUFBSSxNQUFNLElBQUk7QUFBQSxNQUNwQjtBQUVBLGFBQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssSUFBSSxHQUFHO0FBQUEsSUFDakM7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFFakIsVUFBSSxNQUFNLEdBQUs7QUFDZCxlQUFPLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUc7QUFBQSxNQUNsQztBQUVBLFVBQUksT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ25CLFVBQUksS0FBTSxJQUFJLElBQUs7QUFDbkIsVUFBSSxJQUFJLEtBQUs7QUFDYixVQUFJLElBQUksSUFBSTtBQUNaLFVBQUksS0FBSztBQUVULGNBQVEsS0FBSyxNQUFNLEVBQUUsR0FBRztBQUFBLFFBQ3ZCLEtBQUs7QUFDSixlQUFLLENBQUMsSUFBSTtBQUFHLGVBQUssQ0FBQyxJQUFJO0FBQUcsZUFBSyxDQUFDLElBQUk7QUFBRztBQUFBLFFBQ3hDLEtBQUs7QUFDSixlQUFLLENBQUMsSUFBSTtBQUFHLGVBQUssQ0FBQyxJQUFJO0FBQUcsZUFBSyxDQUFDLElBQUk7QUFBRztBQUFBLFFBQ3hDLEtBQUs7QUFDSixlQUFLLENBQUMsSUFBSTtBQUFHLGVBQUssQ0FBQyxJQUFJO0FBQUcsZUFBSyxDQUFDLElBQUk7QUFBRztBQUFBLFFBQ3hDLEtBQUs7QUFDSixlQUFLLENBQUMsSUFBSTtBQUFHLGVBQUssQ0FBQyxJQUFJO0FBQUcsZUFBSyxDQUFDLElBQUk7QUFBRztBQUFBLFFBQ3hDLEtBQUs7QUFDSixlQUFLLENBQUMsSUFBSTtBQUFHLGVBQUssQ0FBQyxJQUFJO0FBQUcsZUFBSyxDQUFDLElBQUk7QUFBRztBQUFBLFFBQ3hDO0FBQ0MsZUFBSyxDQUFDLElBQUk7QUFBRyxlQUFLLENBQUMsSUFBSTtBQUFHLGVBQUssQ0FBQyxJQUFJO0FBQUEsTUFDdEM7QUFFQSxZQUFNLElBQU0sS0FBSztBQUVqQixhQUFPO0FBQUEsU0FDTCxJQUFJLEtBQUssQ0FBQyxJQUFJLE1BQU07QUFBQSxTQUNwQixJQUFJLEtBQUssQ0FBQyxJQUFJLE1BQU07QUFBQSxTQUNwQixJQUFJLEtBQUssQ0FBQyxJQUFJLE1BQU07QUFBQSxNQUN0QjtBQUFBLElBQ0Q7QUFFQSxZQUFRLElBQUksTUFBTSxTQUFVLEtBQUs7QUFDaEMsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBQ2pCLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUVqQixVQUFJLElBQUksSUFBSSxLQUFLLElBQU07QUFDdkIsVUFBSSxJQUFJO0FBRVIsVUFBSSxJQUFJLEdBQUs7QUFDWixZQUFJLElBQUk7QUFBQSxNQUNUO0FBRUEsYUFBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxJQUFJLEdBQUc7QUFBQSxJQUNqQztBQUVBLFlBQVEsSUFBSSxNQUFNLFNBQVUsS0FBSztBQUNoQyxVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJO0FBRWpCLFVBQUlDLEtBQUksS0FBSyxJQUFNLEtBQUssTUFBTTtBQUM5QixVQUFJRCxLQUFJO0FBRVIsVUFBSUMsS0FBSSxLQUFPQSxLQUFJLEtBQUs7QUFDdkIsUUFBQUQsS0FBSSxLQUFLLElBQUlDO0FBQUEsTUFDZCxXQUNJQSxNQUFLLE9BQU9BLEtBQUksR0FBSztBQUN4QixRQUFBRCxLQUFJLEtBQUssS0FBSyxJQUFJQztBQUFBLE1BQ25CO0FBRUEsYUFBTyxDQUFDLElBQUksQ0FBQyxHQUFHRCxLQUFJLEtBQUtDLEtBQUksR0FBRztBQUFBLElBQ2pDO0FBRUEsWUFBUSxJQUFJLE1BQU0sU0FBVSxLQUFLO0FBQ2hDLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSSxJQUFJLElBQUksS0FBSyxJQUFNO0FBQ3ZCLGFBQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssTUFBTSxJQUFJLEtBQUssR0FBRztBQUFBLElBQzdDO0FBRUEsWUFBUSxJQUFJLE1BQU0sU0FBVSxLQUFLO0FBQ2hDLFVBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNqQixVQUFJLElBQUksSUFBSSxDQUFDLElBQUk7QUFDakIsVUFBSSxJQUFJLElBQUk7QUFDWixVQUFJLElBQUksSUFBSTtBQUNaLFVBQUksSUFBSTtBQUVSLFVBQUksSUFBSSxHQUFHO0FBQ1YsYUFBSyxJQUFJLE1BQU0sSUFBSTtBQUFBLE1BQ3BCO0FBRUEsYUFBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxJQUFJLEdBQUc7QUFBQSxJQUNqQztBQUVBLFlBQVEsTUFBTSxNQUFNLFNBQVUsT0FBTztBQUNwQyxhQUFPLENBQUUsTUFBTSxDQUFDLElBQUksUUFBUyxLQUFNLE1BQU0sQ0FBQyxJQUFJLFFBQVMsS0FBTSxNQUFNLENBQUMsSUFBSSxRQUFTLEdBQUc7QUFBQSxJQUNyRjtBQUVBLFlBQVEsSUFBSSxRQUFRLFNBQVUsS0FBSztBQUNsQyxhQUFPLENBQUUsSUFBSSxDQUFDLElBQUksTUFBTyxPQUFRLElBQUksQ0FBQyxJQUFJLE1BQU8sT0FBUSxJQUFJLENBQUMsSUFBSSxNQUFPLEtBQUs7QUFBQSxJQUMvRTtBQUVBLFlBQVEsS0FBSyxNQUFNLFNBQVUsTUFBTTtBQUNsQyxhQUFPLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxLQUFLLEtBQUssQ0FBQyxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsSUFBSSxNQUFNLEdBQUc7QUFBQSxJQUN0RTtBQUVBLFlBQVEsS0FBSyxNQUFNLFFBQVEsS0FBSyxNQUFNLFNBQVUsTUFBTTtBQUNyRCxhQUFPLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQUEsSUFDdEI7QUFFQSxZQUFRLEtBQUssTUFBTSxTQUFVLE1BQU07QUFDbEMsYUFBTyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUFBLElBQ3hCO0FBRUEsWUFBUSxLQUFLLE9BQU8sU0FBVSxNQUFNO0FBQ25DLGFBQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUFBLElBQ3pCO0FBRUEsWUFBUSxLQUFLLE1BQU0sU0FBVSxNQUFNO0FBQ2xDLGFBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUM7QUFBQSxJQUN0QjtBQUVBLFlBQVEsS0FBSyxNQUFNLFNBQVUsTUFBTTtBQUNsQyxVQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sR0FBRyxJQUFJO0FBQzVDLFVBQUksV0FBVyxPQUFPLE9BQU8sT0FBTyxLQUFLO0FBRXpDLFVBQUksU0FBUyxRQUFRLFNBQVMsRUFBRSxFQUFFLFlBQVk7QUFDOUMsYUFBTyxTQUFTLFVBQVUsT0FBTyxNQUFNLElBQUk7QUFBQSxJQUM1QztBQUVBLFlBQVEsSUFBSSxPQUFPLFNBQVUsS0FBSztBQUNqQyxVQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUs7QUFDdkMsYUFBTyxDQUFDLE1BQU0sTUFBTSxHQUFHO0FBQUEsSUFDeEI7QUFBQTtBQUFBOzs7QUNuMkJBO0FBQUEsb0VBQUFHLFNBQUE7QUFBQSxRQUFJLGNBQWM7QUFhbEIsYUFBUyxhQUFhO0FBQ3JCLFVBQUksUUFBUSxDQUFDO0FBRWIsVUFBSSxTQUFTLE9BQU8sS0FBSyxXQUFXO0FBRXBDLGVBQVMsTUFBTSxPQUFPLFFBQVEsSUFBSSxHQUFHLElBQUksS0FBSyxLQUFLO0FBQ2xELGNBQU0sT0FBTyxDQUFDLENBQUMsSUFBSTtBQUFBO0FBQUE7QUFBQSxVQUdsQixVQUFVO0FBQUEsVUFDVixRQUFRO0FBQUEsUUFDVDtBQUFBLE1BQ0Q7QUFFQSxhQUFPO0FBQUEsSUFDUjtBQUdBLGFBQVMsVUFBVSxXQUFXO0FBQzdCLFVBQUksUUFBUSxXQUFXO0FBQ3ZCLFVBQUksUUFBUSxDQUFDLFNBQVM7QUFFdEIsWUFBTSxTQUFTLEVBQUUsV0FBVztBQUU1QixhQUFPLE1BQU0sUUFBUTtBQUNwQixZQUFJLFVBQVUsTUFBTSxJQUFJO0FBQ3hCLFlBQUksWUFBWSxPQUFPLEtBQUssWUFBWSxPQUFPLENBQUM7QUFFaEQsaUJBQVMsTUFBTSxVQUFVLFFBQVEsSUFBSSxHQUFHLElBQUksS0FBSyxLQUFLO0FBQ3JELGNBQUksV0FBVyxVQUFVLENBQUM7QUFDMUIsY0FBSSxPQUFPLE1BQU0sUUFBUTtBQUV6QixjQUFJLEtBQUssYUFBYSxJQUFJO0FBQ3pCLGlCQUFLLFdBQVcsTUFBTSxPQUFPLEVBQUUsV0FBVztBQUMxQyxpQkFBSyxTQUFTO0FBQ2Qsa0JBQU0sUUFBUSxRQUFRO0FBQUEsVUFDdkI7QUFBQSxRQUNEO0FBQUEsTUFDRDtBQUVBLGFBQU87QUFBQSxJQUNSO0FBRUEsYUFBUyxLQUFLLE1BQU0sSUFBSTtBQUN2QixhQUFPLFNBQVUsTUFBTTtBQUN0QixlQUFPLEdBQUcsS0FBSyxJQUFJLENBQUM7QUFBQSxNQUNyQjtBQUFBLElBQ0Q7QUFFQSxhQUFTLGVBQWUsU0FBUyxPQUFPO0FBQ3ZDLFVBQUksT0FBTyxDQUFDLE1BQU0sT0FBTyxFQUFFLFFBQVEsT0FBTztBQUMxQyxVQUFJLEtBQUssWUFBWSxNQUFNLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTztBQUVuRCxVQUFJLE1BQU0sTUFBTSxPQUFPLEVBQUU7QUFDekIsYUFBTyxNQUFNLEdBQUcsRUFBRSxRQUFRO0FBQ3pCLGFBQUssUUFBUSxNQUFNLEdBQUcsRUFBRSxNQUFNO0FBQzlCLGFBQUssS0FBSyxZQUFZLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsRUFBRTtBQUNqRCxjQUFNLE1BQU0sR0FBRyxFQUFFO0FBQUEsTUFDbEI7QUFFQSxTQUFHLGFBQWE7QUFDaEIsYUFBTztBQUFBLElBQ1I7QUFFQSxJQUFBQSxRQUFPLFVBQVUsU0FBVSxXQUFXO0FBQ3JDLFVBQUksUUFBUSxVQUFVLFNBQVM7QUFDL0IsVUFBSSxhQUFhLENBQUM7QUFFbEIsVUFBSSxTQUFTLE9BQU8sS0FBSyxLQUFLO0FBQzlCLGVBQVMsTUFBTSxPQUFPLFFBQVEsSUFBSSxHQUFHLElBQUksS0FBSyxLQUFLO0FBQ2xELFlBQUksVUFBVSxPQUFPLENBQUM7QUFDdEIsWUFBSSxPQUFPLE1BQU0sT0FBTztBQUV4QixZQUFJLEtBQUssV0FBVyxNQUFNO0FBRXpCO0FBQUEsUUFDRDtBQUVBLG1CQUFXLE9BQU8sSUFBSSxlQUFlLFNBQVMsS0FBSztBQUFBLE1BQ3BEO0FBRUEsYUFBTztBQUFBLElBQ1I7QUFBQTtBQUFBOzs7QUMvRkE7QUFBQSxvRUFBQUMsU0FBQTtBQUFBLFFBQUksY0FBYztBQUNsQixRQUFJLFFBQVE7QUFFWixRQUFJLFVBQVUsQ0FBQztBQUVmLFFBQUksU0FBUyxPQUFPLEtBQUssV0FBVztBQUVwQyxhQUFTLFFBQVEsSUFBSTtBQUNwQixVQUFJLFlBQVksU0FBVSxNQUFNO0FBQy9CLFlBQUksU0FBUyxVQUFhLFNBQVMsTUFBTTtBQUN4QyxpQkFBTztBQUFBLFFBQ1I7QUFFQSxZQUFJLFVBQVUsU0FBUyxHQUFHO0FBQ3pCLGlCQUFPLE1BQU0sVUFBVSxNQUFNLEtBQUssU0FBUztBQUFBLFFBQzVDO0FBRUEsZUFBTyxHQUFHLElBQUk7QUFBQSxNQUNmO0FBR0EsVUFBSSxnQkFBZ0IsSUFBSTtBQUN2QixrQkFBVSxhQUFhLEdBQUc7QUFBQSxNQUMzQjtBQUVBLGFBQU87QUFBQSxJQUNSO0FBRUEsYUFBUyxZQUFZLElBQUk7QUFDeEIsVUFBSSxZQUFZLFNBQVUsTUFBTTtBQUMvQixZQUFJLFNBQVMsVUFBYSxTQUFTLE1BQU07QUFDeEMsaUJBQU87QUFBQSxRQUNSO0FBRUEsWUFBSSxVQUFVLFNBQVMsR0FBRztBQUN6QixpQkFBTyxNQUFNLFVBQVUsTUFBTSxLQUFLLFNBQVM7QUFBQSxRQUM1QztBQUVBLFlBQUksU0FBUyxHQUFHLElBQUk7QUFLcEIsWUFBSSxPQUFPLFdBQVcsVUFBVTtBQUMvQixtQkFBUyxNQUFNLE9BQU8sUUFBUSxJQUFJLEdBQUcsSUFBSSxLQUFLLEtBQUs7QUFDbEQsbUJBQU8sQ0FBQyxJQUFJLEtBQUssTUFBTSxPQUFPLENBQUMsQ0FBQztBQUFBLFVBQ2pDO0FBQUEsUUFDRDtBQUVBLGVBQU87QUFBQSxNQUNSO0FBR0EsVUFBSSxnQkFBZ0IsSUFBSTtBQUN2QixrQkFBVSxhQUFhLEdBQUc7QUFBQSxNQUMzQjtBQUVBLGFBQU87QUFBQSxJQUNSO0FBRUEsV0FBTyxRQUFRLFNBQVUsV0FBVztBQUNuQyxjQUFRLFNBQVMsSUFBSSxDQUFDO0FBRXRCLGFBQU8sZUFBZSxRQUFRLFNBQVMsR0FBRyxZQUFZLEVBQUMsT0FBTyxZQUFZLFNBQVMsRUFBRSxTQUFRLENBQUM7QUFDOUYsYUFBTyxlQUFlLFFBQVEsU0FBUyxHQUFHLFVBQVUsRUFBQyxPQUFPLFlBQVksU0FBUyxFQUFFLE9BQU0sQ0FBQztBQUUxRixVQUFJLFNBQVMsTUFBTSxTQUFTO0FBQzVCLFVBQUksY0FBYyxPQUFPLEtBQUssTUFBTTtBQUVwQyxrQkFBWSxRQUFRLFNBQVUsU0FBUztBQUN0QyxZQUFJLEtBQUssT0FBTyxPQUFPO0FBRXZCLGdCQUFRLFNBQVMsRUFBRSxPQUFPLElBQUksWUFBWSxFQUFFO0FBQzVDLGdCQUFRLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxRQUFRLEVBQUU7QUFBQSxNQUM3QyxDQUFDO0FBQUEsSUFDRixDQUFDO0FBRUQsSUFBQUEsUUFBTyxVQUFVO0FBQUE7QUFBQTs7O0FDN0VqQjtBQUFBLHlDQUFBQyxTQUFBO0FBQUE7QUFFQSxRQUFJLGNBQWM7QUFDbEIsUUFBSSxVQUFVO0FBRWQsUUFBSSxTQUFTLENBQUMsRUFBRTtBQUVoQixRQUFJLGdCQUFnQjtBQUFBO0FBQUEsTUFFbkI7QUFBQTtBQUFBLE1BR0E7QUFBQTtBQUFBLE1BR0E7QUFBQSxJQUNEO0FBRUEsUUFBSSxrQkFBa0IsQ0FBQztBQUN2QixXQUFPLEtBQUssT0FBTyxFQUFFLFFBQVEsU0FBVSxPQUFPO0FBQzdDLHNCQUFnQixPQUFPLEtBQUssUUFBUSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJO0FBQUEsSUFDdkUsQ0FBQztBQUVELFFBQUksV0FBVyxDQUFDO0FBRWhCLGFBQVMsTUFBTSxLQUFLLE9BQU87QUFDMUIsVUFBSSxFQUFFLGdCQUFnQixRQUFRO0FBQzdCLGVBQU8sSUFBSSxNQUFNLEtBQUssS0FBSztBQUFBLE1BQzVCO0FBRUEsVUFBSSxTQUFTLFNBQVMsZUFBZTtBQUNwQyxnQkFBUTtBQUFBLE1BQ1Q7QUFFQSxVQUFJLFNBQVMsRUFBRSxTQUFTLFVBQVU7QUFDakMsY0FBTSxJQUFJLE1BQU0sb0JBQW9CLEtBQUs7QUFBQSxNQUMxQztBQUVBLFVBQUk7QUFDSixVQUFJO0FBRUosVUFBSSxPQUFPLE1BQU07QUFDaEIsYUFBSyxRQUFRO0FBQ2IsYUFBSyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDckIsYUFBSyxTQUFTO0FBQUEsTUFDZixXQUFXLGVBQWUsT0FBTztBQUNoQyxhQUFLLFFBQVEsSUFBSTtBQUNqQixhQUFLLFFBQVEsSUFBSSxNQUFNLE1BQU07QUFDN0IsYUFBSyxTQUFTLElBQUk7QUFBQSxNQUNuQixXQUFXLE9BQU8sUUFBUSxVQUFVO0FBQ25DLFlBQUksU0FBUyxZQUFZLElBQUksR0FBRztBQUNoQyxZQUFJLFdBQVcsTUFBTTtBQUNwQixnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEdBQUc7QUFBQSxRQUM1RDtBQUVBLGFBQUssUUFBUSxPQUFPO0FBQ3BCLG1CQUFXLFFBQVEsS0FBSyxLQUFLLEVBQUU7QUFDL0IsYUFBSyxRQUFRLE9BQU8sTUFBTSxNQUFNLEdBQUcsUUFBUTtBQUMzQyxhQUFLLFNBQVMsT0FBTyxPQUFPLE1BQU0sUUFBUSxNQUFNLFdBQVcsT0FBTyxNQUFNLFFBQVEsSUFBSTtBQUFBLE1BQ3JGLFdBQVcsSUFBSSxRQUFRO0FBQ3RCLGFBQUssUUFBUSxTQUFTO0FBQ3RCLG1CQUFXLFFBQVEsS0FBSyxLQUFLLEVBQUU7QUFDL0IsWUFBSSxTQUFTLE9BQU8sS0FBSyxLQUFLLEdBQUcsUUFBUTtBQUN6QyxhQUFLLFFBQVEsVUFBVSxRQUFRLFFBQVE7QUFDdkMsYUFBSyxTQUFTLE9BQU8sSUFBSSxRQUFRLE1BQU0sV0FBVyxJQUFJLFFBQVEsSUFBSTtBQUFBLE1BQ25FLFdBQVcsT0FBTyxRQUFRLFVBQVU7QUFFbkMsZUFBTztBQUNQLGFBQUssUUFBUTtBQUNiLGFBQUssUUFBUTtBQUFBLFVBQ1gsT0FBTyxLQUFNO0FBQUEsVUFDYixPQUFPLElBQUs7QUFBQSxVQUNiLE1BQU07QUFBQSxRQUNQO0FBQ0EsYUFBSyxTQUFTO0FBQUEsTUFDZixPQUFPO0FBQ04sYUFBSyxTQUFTO0FBRWQsWUFBSSxPQUFPLE9BQU8sS0FBSyxHQUFHO0FBQzFCLFlBQUksV0FBVyxLQUFLO0FBQ25CLGVBQUssT0FBTyxLQUFLLFFBQVEsT0FBTyxHQUFHLENBQUM7QUFDcEMsZUFBSyxTQUFTLE9BQU8sSUFBSSxVQUFVLFdBQVcsSUFBSSxRQUFRO0FBQUEsUUFDM0Q7QUFFQSxZQUFJLGFBQWEsS0FBSyxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ3BDLFlBQUksRUFBRSxjQUFjLGtCQUFrQjtBQUNyQyxnQkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUssVUFBVSxHQUFHLENBQUM7QUFBQSxRQUM1RTtBQUVBLGFBQUssUUFBUSxnQkFBZ0IsVUFBVTtBQUV2QyxZQUFJLFNBQVMsUUFBUSxLQUFLLEtBQUssRUFBRTtBQUNqQyxZQUFJLFFBQVEsQ0FBQztBQUNiLGFBQUssSUFBSSxHQUFHLElBQUksT0FBTyxRQUFRLEtBQUs7QUFDbkMsZ0JBQU0sS0FBSyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFBQSxRQUMxQjtBQUVBLGFBQUssUUFBUSxVQUFVLEtBQUs7QUFBQSxNQUM3QjtBQUdBLFVBQUksU0FBUyxLQUFLLEtBQUssR0FBRztBQUN6QixtQkFBVyxRQUFRLEtBQUssS0FBSyxFQUFFO0FBQy9CLGFBQUssSUFBSSxHQUFHLElBQUksVUFBVSxLQUFLO0FBQzlCLGNBQUksUUFBUSxTQUFTLEtBQUssS0FBSyxFQUFFLENBQUM7QUFDbEMsY0FBSSxPQUFPO0FBQ1YsaUJBQUssTUFBTSxDQUFDLElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBQUEsVUFDcEM7QUFBQSxRQUNEO0FBQUEsTUFDRDtBQUVBLFdBQUssU0FBUyxLQUFLLElBQUksR0FBRyxLQUFLLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQztBQUVsRCxVQUFJLE9BQU8sUUFBUTtBQUNsQixlQUFPLE9BQU8sSUFBSTtBQUFBLE1BQ25CO0FBQUEsSUFDRDtBQUVBLFVBQU0sWUFBWTtBQUFBLE1BQ2pCLFVBQVUsV0FBWTtBQUNyQixlQUFPLEtBQUssT0FBTztBQUFBLE1BQ3BCO0FBQUEsTUFFQSxRQUFRLFdBQVk7QUFDbkIsZUFBTyxLQUFLLEtBQUssS0FBSyxFQUFFO0FBQUEsTUFDekI7QUFBQSxNQUVBLFFBQVEsU0FBVSxRQUFRO0FBQ3pCLFlBQUlDLFFBQU8sS0FBSyxTQUFTLFlBQVksS0FBSyxPQUFPLEtBQUssSUFBSTtBQUMxRCxRQUFBQSxRQUFPQSxNQUFLLE1BQU0sT0FBTyxXQUFXLFdBQVcsU0FBUyxDQUFDO0FBQ3pELFlBQUksT0FBT0EsTUFBSyxXQUFXLElBQUlBLE1BQUssUUFBUUEsTUFBSyxNQUFNLE9BQU8sS0FBSyxNQUFNO0FBQ3pFLGVBQU8sWUFBWSxHQUFHQSxNQUFLLEtBQUssRUFBRSxJQUFJO0FBQUEsTUFDdkM7QUFBQSxNQUVBLGVBQWUsU0FBVSxRQUFRO0FBQ2hDLFlBQUlBLFFBQU8sS0FBSyxJQUFJLEVBQUUsTUFBTSxPQUFPLFdBQVcsV0FBVyxTQUFTLENBQUM7QUFDbkUsWUFBSSxPQUFPQSxNQUFLLFdBQVcsSUFBSUEsTUFBSyxRQUFRQSxNQUFLLE1BQU0sT0FBTyxLQUFLLE1BQU07QUFDekUsZUFBTyxZQUFZLEdBQUcsSUFBSSxRQUFRLElBQUk7QUFBQSxNQUN2QztBQUFBLE1BRUEsT0FBTyxXQUFZO0FBQ2xCLGVBQU8sS0FBSyxXQUFXLElBQUksS0FBSyxNQUFNLE1BQU0sSUFBSSxLQUFLLE1BQU0sT0FBTyxLQUFLLE1BQU07QUFBQSxNQUM5RTtBQUFBLE1BRUEsUUFBUSxXQUFZO0FBQ25CLFlBQUksU0FBUyxDQUFDO0FBQ2QsWUFBSSxXQUFXLFFBQVEsS0FBSyxLQUFLLEVBQUU7QUFDbkMsWUFBSSxTQUFTLFFBQVEsS0FBSyxLQUFLLEVBQUU7QUFFakMsaUJBQVMsSUFBSSxHQUFHLElBQUksVUFBVSxLQUFLO0FBQ2xDLGlCQUFPLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUM7QUFBQSxRQUNqQztBQUVBLFlBQUksS0FBSyxXQUFXLEdBQUc7QUFDdEIsaUJBQU8sUUFBUSxLQUFLO0FBQUEsUUFDckI7QUFFQSxlQUFPO0FBQUEsTUFDUjtBQUFBLE1BRUEsV0FBVyxXQUFZO0FBQ3RCLFlBQUksTUFBTSxLQUFLLElBQUksRUFBRTtBQUNyQixZQUFJLENBQUMsS0FBSztBQUNWLFlBQUksQ0FBQyxLQUFLO0FBQ1YsWUFBSSxDQUFDLEtBQUs7QUFFVixZQUFJLEtBQUssV0FBVyxHQUFHO0FBQ3RCLGNBQUksS0FBSyxLQUFLLE1BQU07QUFBQSxRQUNyQjtBQUVBLGVBQU87QUFBQSxNQUNSO0FBQUEsTUFFQSxZQUFZLFdBQVk7QUFDdkIsWUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFLE9BQU87QUFDNUIsWUFBSSxLQUFLO0FBQ1QsWUFBSSxLQUFLO0FBQ1QsWUFBSSxLQUFLO0FBRVQsWUFBSSxLQUFLLFdBQVcsR0FBRztBQUN0QixjQUFJLFFBQVEsS0FBSztBQUFBLFFBQ2xCO0FBRUEsZUFBTztBQUFBLE1BQ1I7QUFBQSxNQUVBLE9BQU8sU0FBVSxRQUFRO0FBQ3hCLGlCQUFTLEtBQUssSUFBSSxVQUFVLEdBQUcsQ0FBQztBQUNoQyxlQUFPLElBQUksTUFBTSxLQUFLLE1BQU0sSUFBSSxhQUFhLE1BQU0sQ0FBQyxFQUFFLE9BQU8sS0FBSyxNQUFNLEdBQUcsS0FBSyxLQUFLO0FBQUEsTUFDdEY7QUFBQSxNQUVBLE9BQU8sU0FBVSxLQUFLO0FBQ3JCLFlBQUksVUFBVSxRQUFRO0FBQ3JCLGlCQUFPLElBQUksTUFBTSxLQUFLLE1BQU0sT0FBTyxLQUFLLElBQUksR0FBRyxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssS0FBSztBQUFBLFFBQzlFO0FBRUEsZUFBTyxLQUFLO0FBQUEsTUFDYjtBQUFBO0FBQUEsTUFHQSxLQUFLLE9BQU8sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFDaEMsT0FBTyxPQUFPLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQztBQUFBLE1BQ2xDLE1BQU0sT0FBTyxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUM7QUFBQSxNQUVqQyxLQUFLLE9BQU8sQ0FBQyxPQUFPLE9BQU8sT0FBTyxPQUFPLEtBQUssR0FBRyxHQUFHLFNBQVUsS0FBSztBQUFFLGdCQUFTLE1BQU0sTUFBTyxPQUFPO0FBQUEsTUFBSyxDQUFDO0FBQUE7QUFBQSxNQUV4RyxhQUFhLE9BQU8sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFDeEMsV0FBVyxPQUFPLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQztBQUFBLE1BRXRDLGFBQWEsT0FBTyxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUM7QUFBQSxNQUN4QyxPQUFPLE9BQU8sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFFbEMsUUFBUSxPQUFPLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQztBQUFBLE1BQ25DLE1BQU0sT0FBTyxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUM7QUFBQSxNQUVqQyxPQUFPLE9BQU8sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFDbEMsUUFBUSxPQUFPLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQztBQUFBLE1BRW5DLE1BQU0sT0FBTyxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUM7QUFBQSxNQUNsQyxTQUFTLE9BQU8sUUFBUSxHQUFHLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFDckMsUUFBUSxPQUFPLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQztBQUFBLE1BQ3BDLE9BQU8sT0FBTyxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUM7QUFBQSxNQUVuQyxHQUFHLE9BQU8sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFDOUIsR0FBRyxPQUFPLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQztBQUFBLE1BQzlCLEdBQUcsT0FBTyxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUM7QUFBQSxNQUU5QixHQUFHLE9BQU8sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFDOUIsR0FBRyxPQUFPLE9BQU8sQ0FBQztBQUFBLE1BQ2xCLEdBQUcsT0FBTyxPQUFPLENBQUM7QUFBQSxNQUVsQixTQUFTLFNBQVUsS0FBSztBQUN2QixZQUFJLFVBQVUsUUFBUTtBQUNyQixpQkFBTyxJQUFJLE1BQU0sR0FBRztBQUFBLFFBQ3JCO0FBRUEsZUFBTyxRQUFRLEtBQUssS0FBSyxFQUFFLFFBQVEsS0FBSyxLQUFLO0FBQUEsTUFDOUM7QUFBQSxNQUVBLEtBQUssU0FBVSxLQUFLO0FBQ25CLFlBQUksVUFBVSxRQUFRO0FBQ3JCLGlCQUFPLElBQUksTUFBTSxHQUFHO0FBQUEsUUFDckI7QUFFQSxlQUFPLFlBQVksR0FBRyxJQUFJLEtBQUssSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLO0FBQUEsTUFDbkQ7QUFBQSxNQUVBLFdBQVcsV0FBWTtBQUN0QixZQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7QUFDckIsZ0JBQVMsSUFBSSxDQUFDLElBQUksUUFBUyxNQUFRLElBQUksQ0FBQyxJQUFJLFFBQVMsSUFBTSxJQUFJLENBQUMsSUFBSTtBQUFBLE1BQ3JFO0FBQUEsTUFFQSxZQUFZLFdBQVk7QUFFdkIsWUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO0FBRXJCLFlBQUksTUFBTSxDQUFDO0FBQ1gsaUJBQVMsSUFBSSxHQUFHLElBQUksSUFBSSxRQUFRLEtBQUs7QUFDcEMsY0FBSSxPQUFPLElBQUksQ0FBQyxJQUFJO0FBQ3BCLGNBQUksQ0FBQyxJQUFLLFFBQVEsVUFBVyxPQUFPLFFBQVEsS0FBSyxLQUFNLE9BQU8sU0FBUyxPQUFRLEdBQUc7QUFBQSxRQUNuRjtBQUVBLGVBQU8sU0FBUyxJQUFJLENBQUMsSUFBSSxTQUFTLElBQUksQ0FBQyxJQUFJLFNBQVMsSUFBSSxDQUFDO0FBQUEsTUFDMUQ7QUFBQSxNQUVBLFVBQVUsU0FBVSxRQUFRO0FBRTNCLFlBQUksT0FBTyxLQUFLLFdBQVc7QUFDM0IsWUFBSSxPQUFPLE9BQU8sV0FBVztBQUU3QixZQUFJLE9BQU8sTUFBTTtBQUNoQixrQkFBUSxPQUFPLFNBQVMsT0FBTztBQUFBLFFBQ2hDO0FBRUEsZ0JBQVEsT0FBTyxTQUFTLE9BQU87QUFBQSxNQUNoQztBQUFBLE1BRUEsT0FBTyxTQUFVLFFBQVE7QUFDeEIsWUFBSSxnQkFBZ0IsS0FBSyxTQUFTLE1BQU07QUFDeEMsWUFBSSxpQkFBaUIsS0FBSztBQUN6QixpQkFBTztBQUFBLFFBQ1I7QUFFQSxlQUFRLGlCQUFpQixNQUFPLE9BQU87QUFBQSxNQUN4QztBQUFBLE1BRUEsUUFBUSxXQUFZO0FBRW5CLFlBQUksTUFBTSxLQUFLLElBQUksRUFBRTtBQUNyQixZQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksTUFBTSxJQUFJLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxJQUFJLE9BQU87QUFDekQsZUFBTyxNQUFNO0FBQUEsTUFDZDtBQUFBLE1BRUEsU0FBUyxXQUFZO0FBQ3BCLGVBQU8sQ0FBQyxLQUFLLE9BQU87QUFBQSxNQUNyQjtBQUFBLE1BRUEsUUFBUSxXQUFZO0FBQ25CLFlBQUksTUFBTSxLQUFLLElBQUk7QUFDbkIsaUJBQVMsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLO0FBQzNCLGNBQUksTUFBTSxDQUFDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQztBQUFBLFFBQ2pDO0FBQ0EsZUFBTztBQUFBLE1BQ1I7QUFBQSxNQUVBLFNBQVMsU0FBVSxPQUFPO0FBQ3pCLFlBQUksTUFBTSxLQUFLLElBQUk7QUFDbkIsWUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJO0FBQy9CLGVBQU87QUFBQSxNQUNSO0FBQUEsTUFFQSxRQUFRLFNBQVUsT0FBTztBQUN4QixZQUFJLE1BQU0sS0FBSyxJQUFJO0FBQ25CLFlBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSTtBQUMvQixlQUFPO0FBQUEsTUFDUjtBQUFBLE1BRUEsVUFBVSxTQUFVLE9BQU87QUFDMUIsWUFBSSxNQUFNLEtBQUssSUFBSTtBQUNuQixZQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLElBQUk7QUFDL0IsZUFBTztBQUFBLE1BQ1I7QUFBQSxNQUVBLFlBQVksU0FBVSxPQUFPO0FBQzVCLFlBQUksTUFBTSxLQUFLLElBQUk7QUFDbkIsWUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJO0FBQy9CLGVBQU87QUFBQSxNQUNSO0FBQUEsTUFFQSxRQUFRLFNBQVUsT0FBTztBQUN4QixZQUFJLE1BQU0sS0FBSyxJQUFJO0FBQ25CLFlBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSTtBQUMvQixlQUFPO0FBQUEsTUFDUjtBQUFBLE1BRUEsU0FBUyxTQUFVLE9BQU87QUFDekIsWUFBSSxNQUFNLEtBQUssSUFBSTtBQUNuQixZQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLElBQUk7QUFDL0IsZUFBTztBQUFBLE1BQ1I7QUFBQSxNQUVBLFdBQVcsV0FBWTtBQUV0QixZQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7QUFDckIsWUFBSSxNQUFNLElBQUksQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSTtBQUNsRCxlQUFPLE1BQU0sSUFBSSxLQUFLLEtBQUssR0FBRztBQUFBLE1BQy9CO0FBQUEsTUFFQSxNQUFNLFNBQVUsT0FBTztBQUN0QixlQUFPLEtBQUssTUFBTSxLQUFLLFNBQVUsS0FBSyxTQUFTLEtBQU07QUFBQSxNQUN0RDtBQUFBLE1BRUEsU0FBUyxTQUFVLE9BQU87QUFDekIsZUFBTyxLQUFLLE1BQU0sS0FBSyxTQUFVLEtBQUssU0FBUyxLQUFNO0FBQUEsTUFDdEQ7QUFBQSxNQUVBLFFBQVEsU0FBVSxTQUFTO0FBQzFCLFlBQUksTUFBTSxLQUFLLElBQUk7QUFDbkIsWUFBSSxNQUFNLElBQUksTUFBTSxDQUFDO0FBQ3JCLGVBQU8sTUFBTSxXQUFXO0FBQ3hCLGNBQU0sTUFBTSxJQUFJLE1BQU0sTUFBTTtBQUM1QixZQUFJLE1BQU0sQ0FBQyxJQUFJO0FBQ2YsZUFBTztBQUFBLE1BQ1I7QUFBQSxNQUVBLEtBQUssU0FBVSxZQUFZLFFBQVE7QUFHbEMsWUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEtBQUs7QUFDbkMsZ0JBQU0sSUFBSSxNQUFNLDJFQUEyRSxPQUFPLFVBQVU7QUFBQSxRQUM3RztBQUNBLFlBQUksU0FBUyxXQUFXLElBQUk7QUFDNUIsWUFBSSxTQUFTLEtBQUssSUFBSTtBQUN0QixZQUFJLElBQUksV0FBVyxTQUFZLE1BQU07QUFFckMsWUFBSSxJQUFJLElBQUksSUFBSTtBQUNoQixZQUFJLElBQUksT0FBTyxNQUFNLElBQUksT0FBTyxNQUFNO0FBRXRDLFlBQUksT0FBUSxJQUFJLE1BQU0sS0FBTSxLQUFLLElBQUksTUFBTSxJQUFJLElBQUksTUFBTSxLQUFLO0FBQzlELFlBQUksS0FBSyxJQUFJO0FBRWIsZUFBTyxNQUFNO0FBQUEsVUFDWCxLQUFLLE9BQU8sSUFBSSxJQUFJLEtBQUssT0FBTyxJQUFJO0FBQUEsVUFDcEMsS0FBSyxPQUFPLE1BQU0sSUFBSSxLQUFLLE9BQU8sTUFBTTtBQUFBLFVBQ3hDLEtBQUssT0FBTyxLQUFLLElBQUksS0FBSyxPQUFPLEtBQUs7QUFBQSxVQUN0QyxPQUFPLE1BQU0sSUFBSSxJQUFJLE9BQU8sTUFBTSxLQUFLLElBQUk7QUFBQSxRQUFFO0FBQUEsTUFDaEQ7QUFBQSxJQUNEO0FBR0EsV0FBTyxLQUFLLE9BQU8sRUFBRSxRQUFRLFNBQVUsT0FBTztBQUM3QyxVQUFJLGNBQWMsUUFBUSxLQUFLLE1BQU0sSUFBSTtBQUN4QztBQUFBLE1BQ0Q7QUFFQSxVQUFJLFdBQVcsUUFBUSxLQUFLLEVBQUU7QUFHOUIsWUFBTSxVQUFVLEtBQUssSUFBSSxXQUFZO0FBQ3BDLFlBQUksS0FBSyxVQUFVLE9BQU87QUFDekIsaUJBQU8sSUFBSSxNQUFNLElBQUk7QUFBQSxRQUN0QjtBQUVBLFlBQUksVUFBVSxRQUFRO0FBQ3JCLGlCQUFPLElBQUksTUFBTSxXQUFXLEtBQUs7QUFBQSxRQUNsQztBQUVBLFlBQUksV0FBVyxPQUFPLFVBQVUsUUFBUSxNQUFNLFdBQVcsV0FBVyxLQUFLO0FBQ3pFLGVBQU8sSUFBSSxNQUFNLFlBQVksUUFBUSxLQUFLLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFLE9BQU8sUUFBUSxHQUFHLEtBQUs7QUFBQSxNQUNqRztBQUdBLFlBQU0sS0FBSyxJQUFJLFNBQVUsT0FBTztBQUMvQixZQUFJLE9BQU8sVUFBVSxVQUFVO0FBQzlCLGtCQUFRLFVBQVUsT0FBTyxLQUFLLFNBQVMsR0FBRyxRQUFRO0FBQUEsUUFDbkQ7QUFDQSxlQUFPLElBQUksTUFBTSxPQUFPLEtBQUs7QUFBQSxNQUM5QjtBQUFBLElBQ0QsQ0FBQztBQUVELGFBQVNDLFNBQVEsS0FBSyxRQUFRO0FBQzdCLGFBQU8sT0FBTyxJQUFJLFFBQVEsTUFBTSxDQUFDO0FBQUEsSUFDbEM7QUFFQSxhQUFTLGFBQWEsUUFBUTtBQUM3QixhQUFPLFNBQVUsS0FBSztBQUNyQixlQUFPQSxTQUFRLEtBQUssTUFBTTtBQUFBLE1BQzNCO0FBQUEsSUFDRDtBQUVBLGFBQVMsT0FBTyxPQUFPLFNBQVMsVUFBVTtBQUN6QyxjQUFRLE1BQU0sUUFBUSxLQUFLLElBQUksUUFBUSxDQUFDLEtBQUs7QUFFN0MsWUFBTSxRQUFRLFNBQVUsR0FBRztBQUMxQixTQUFDLFNBQVMsQ0FBQyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUk7QUFBQSxNQUNoRCxDQUFDO0FBRUQsY0FBUSxNQUFNLENBQUM7QUFFZixhQUFPLFNBQVUsS0FBSztBQUNyQixZQUFJO0FBRUosWUFBSSxVQUFVLFFBQVE7QUFDckIsY0FBSSxVQUFVO0FBQ2Isa0JBQU0sU0FBUyxHQUFHO0FBQUEsVUFDbkI7QUFFQSxtQkFBUyxLQUFLLEtBQUssRUFBRTtBQUNyQixpQkFBTyxNQUFNLE9BQU8sSUFBSTtBQUN4QixpQkFBTztBQUFBLFFBQ1I7QUFFQSxpQkFBUyxLQUFLLEtBQUssRUFBRSxFQUFFLE1BQU0sT0FBTztBQUNwQyxZQUFJLFVBQVU7QUFDYixtQkFBUyxTQUFTLE1BQU07QUFBQSxRQUN6QjtBQUVBLGVBQU87QUFBQSxNQUNSO0FBQUEsSUFDRDtBQUVBLGFBQVMsTUFBTSxLQUFLO0FBQ25CLGFBQU8sU0FBVSxHQUFHO0FBQ25CLGVBQU8sS0FBSyxJQUFJLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxDQUFDO0FBQUEsTUFDcEM7QUFBQSxJQUNEO0FBRUEsYUFBUyxZQUFZLEtBQUs7QUFDekIsYUFBTyxNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHO0FBQUEsSUFDdkM7QUFFQSxhQUFTLFVBQVUsS0FBSyxRQUFRO0FBQy9CLGVBQVMsSUFBSSxHQUFHLElBQUksUUFBUSxLQUFLO0FBQ2hDLFlBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxVQUFVO0FBQy9CLGNBQUksQ0FBQyxJQUFJO0FBQUEsUUFDVjtBQUFBLE1BQ0Q7QUFFQSxhQUFPO0FBQUEsSUFDUjtBQUVBLElBQUFGLFFBQU8sVUFBVTtBQUFBO0FBQUE7OztBQ2plakI7QUFBQSw0Q0FBQUcsU0FBQTtBQUFBO0FBU0EsSUFBQUEsUUFBTyxVQUFVLFNBQVMsSUFBSSxLQUFLO0FBQ2pDLGVBQ00sSUFBSSxHQUFHLE9BQU8sR0FDbEIsSUFBSSxJQUFJLFFBQ1IsT0FBTyxJQUFJLFdBQVcsR0FBRyxNQUFNLFFBQVEsS0FBSyxNQUM3QztBQUVELFVBQUksUUFBUSxLQUFLO0FBQUEsUUFDZixLQUFLO0FBQUEsVUFDRixLQUFLLElBQUksSUFBSSxJQUFJLE1BQVMsSUFBSTtBQUFBLFFBQ2pDO0FBQUEsTUFDRixFQUFFLFNBQVMsRUFBRTtBQUViLGFBQU8sTUFBTSxNQUFNLElBQUksTUFBTSxTQUFTLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSTtBQUFBLElBQ3ZEO0FBQUE7QUFBQTs7O0FDdkJBO0FBQUEsOENBQUFDLFNBQUE7QUFBQTtBQUVBLFFBQUksUUFBUTtBQUFaLFFBQ0ksTUFBTTtBQVdWLElBQUFBLFFBQU8sVUFBVSxTQUFTLFdBQVcsV0FBVyxXQUFXO0FBQ3pELFVBQUlDLFNBQVEsVUFBVSxNQUFNLGFBQWEsR0FBRztBQUM1QyxVQUFJLE9BQU8sSUFBSUEsT0FBTSxDQUFDLENBQUM7QUFFdkIsVUFBSSxDQUFDQSxPQUFNLE9BQVEsUUFBTztBQUUxQixlQUFTLElBQUksR0FBR0MsS0FBSUQsT0FBTSxTQUFTLEdBQUcsSUFBSUMsSUFBRyxLQUFLO0FBQ2hELGVBQU8sTUFBTSxJQUFJLEVBQ2hCLElBQUksTUFBTSxJQUFJRCxPQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUM1QixTQUFTLENBQUMsRUFDVixJQUFJO0FBQUEsTUFDUDtBQUVBLGFBQU87QUFBQSxJQUNUO0FBQUE7QUFBQTs7O0FDNUJBO0FBQUEsbUVBQUFFLFNBQUE7QUFBQSxRQUFJLGFBQWE7QUFVakIsSUFBQUEsUUFBTyxVQUFVLFNBQVMsZUFBZSxNQUFNLFNBQVM7QUFDdEQsVUFBSSxZQUFZLFFBQVE7QUFFeEIsVUFBSSxRQUFRLFdBQVcsT0FBTztBQUM1QixhQUFLLENBQUMsSUFBSSxZQUFXLE9BQU0sS0FBSyxDQUFDO0FBQ2pDLGVBQU87QUFBQSxNQUNUO0FBRUEsVUFBSSxRQUFRLFdBQVcsU0FBUztBQVNoQyxXQUFLLENBQUMsSUFBSSxPQUFNLFlBQVcsU0FBUSxLQUFLLENBQUM7QUFDekMsV0FBSyxPQUFPLEdBQUcsR0FBRyxXQUFVLE9BQU8sZUFBZTtBQUVsRCxhQUFPO0FBQUEsSUFDVDtBQUFBO0FBQUE7OztBQy9CQTtBQUFBLDJDQUFBQyxTQUFBO0FBQUE7QUFVQSxJQUFBQSxRQUFPLFVBQVUsU0FBUyxRQUFRLE1BQU0sVUFBVTtBQUNoRCxVQUFJLENBQUMsU0FBVSxRQUFPO0FBRXRCLFVBQUksWUFBWSxTQUFTLE1BQU0sUUFBUSxHQUNuQyxJQUFJO0FBRVIsYUFBTyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQ2hDLG1CQUFXLFVBQVUsQ0FBQyxFQUFFLFFBQVEsS0FBSyxLQUFLO0FBRTFDLFlBQUksUUFBUSxTQUFTLE9BQU8sQ0FBQyxHQUFHO0FBQzlCLGNBQUssSUFBSSxPQUFPLE1BQUssU0FBUyxPQUFPLENBQUMsSUFBRyxHQUFHLEVBQUcsS0FBSyxJQUFJLEdBQUc7QUFDekQsbUJBQU87QUFBQSxVQUNUO0FBRUE7QUFBQSxRQUNGO0FBRUEsWUFBSyxJQUFJLE9BQU8sTUFBSyxXQUFVLEdBQUcsRUFBRyxLQUFLLElBQUksR0FBRztBQUMvQyxpQkFBTztBQUFBLFFBQ1Q7QUFBQSxNQUNGO0FBRUEsYUFBTztBQUFBLElBQ1Q7QUFBQTtBQUFBOzs7QUNqQ0E7QUFBQSw4REFBQUMsU0FBQTtBQUFBLFFBQUksVUFBVTtBQVNkLElBQUFBLFFBQU8sVUFBVSxTQUFTLE9BQU8sSUFBSTtBQUNuQyxhQUFPLFNBQVMsUUFBUSxXQUFXO0FBQ2pDLFlBQUk7QUFDRixpQkFBTyxRQUFRLFdBQVcsR0FBRyxDQUFDO0FBQUEsUUFDaEMsU0FBUyxHQUFHO0FBQUEsUUFBZ0Q7QUFFNUQsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBQUE7QUFBQTs7O0FDakJBO0FBQUEscUVBQUFDLFNBQUE7QUFBQSxRQUFJLFVBQVU7QUFRZCxJQUFBQSxRQUFPLFVBQVUsUUFBUSxTQUFTLFVBQVU7QUFDMUMsYUFBTyxhQUFhLFFBQVEsT0FBTyxLQUFLLGFBQWEsUUFBUSxhQUFhO0FBQUEsSUFDNUUsQ0FBQztBQUFBO0FBQUE7OztBQ1ZEO0FBQUEsNkRBQUFDLFNBQUE7QUFBQSxRQUFJLFVBQVU7QUFRZCxJQUFBQSxRQUFPLFVBQVUsUUFBUSxTQUFTLE9BQU87QUFDdkMsYUFBTywrQkFBK0IsS0FBSyxPQUFPLFNBQVMsSUFBSSxFQUFFLENBQUM7QUFBQSxJQUNwRSxDQUFDO0FBQUE7QUFBQTs7O0FDVkQsSUFBQUMsbUJBQUE7QUFBQSw4REFBQUMsU0FBQTtBQVdBLElBQUFBLFFBQU8sVUFBVSxTQUFVLE1BQU0sVUFBVTtBQUt6QyxVQUFJO0FBQUUsaUJBQVMsVUFBVSxNQUFNLEtBQUssUUFBUSxLQUFLLFNBQVMsUUFBUTtBQUFBLE1BQUcsU0FDOUQsR0FBRztBQUFBLE1BQUM7QUFBQSxJQUNiO0FBQUE7QUFBQTs7O0FDbEJBO0FBQUEsbUVBQUFDLFNBQUE7QUFBQSxRQUFJLFNBQVM7QUFVYixRQUFJLGNBQWMsT0FBTyxTQUFTLElBQUksV0FBVyxTQUFTO0FBQ3hELGdCQUFVLFdBQVcsQ0FBQztBQUN0QixjQUFRLFlBQVk7QUFDcEIsY0FBUSxPQUFPO0FBQ2YsY0FBUSxNQUFNO0FBRWQsVUFBSSxDQUFDLElBQUksUUFBUSxTQUFTLEtBQUssRUFBRSxRQUFRLFNBQVMsSUFBSSxRQUFRO0FBQzVELGVBQU8sSUFBSSxLQUFLLE9BQU87QUFBQSxNQUN6QjtBQUVBLGFBQU8sSUFBSSxJQUFJLE9BQU87QUFBQSxJQUN4QixDQUFDO0FBS0QsZ0JBQVksT0FBTyxtQkFBaUM7QUFDcEQsZ0JBQVksSUFBSSxzQkFBbUM7QUFDbkQsZ0JBQVksSUFBSSxjQUEyQjtBQUMzQyxnQkFBWSxJQUFJLGtCQUE0QjtBQUs1QyxJQUFBQSxRQUFPLFVBQVU7QUFBQTtBQUFBOzs7QUNsQ2pCLElBQUFDLG1CQUFBO0FBQUEsNkRBQUFDLFNBQUE7QUFHQSxRQUFJLE9BQXVDO0FBQ3pDLE1BQUFBLFFBQU8sVUFBVTtBQUFBLElBQ25CLE9BQU87QUFDTCxNQUFBQSxRQUFPLFVBQVU7QUFBQSxJQUNuQjtBQUFBO0FBQUE7OztBQ1BBO0FBQUEsNERBQUFDLFNBQUE7QUFBQTtBQVNBLFFBQUksS0FBSyxRQUFRLElBQUk7QUFDckIsUUFBSSxXQUFXLFFBQVEsZ0JBQWdCO0FBQXZDLFFBQ0UsZ0JBQWdCLFNBQVM7QUFDM0IsUUFBSSxZQUFZO0FBQWhCLFFBQ0UsU0FBUyxVQUFVO0FBTXJCLGFBQVMsT0FBTztBQUFBLElBQUM7QUFTakIsSUFBQUEsUUFBTyxVQUFVLFNBQVUsU0FBU0MsT0FBTTtBQUN4QyxVQUFJLFNBQVMsT0FBTyxNQUFNLEtBQUssSUFBSTtBQUNuQyxVQUFJLFNBQVMsSUFBSSxjQUFjLE1BQU07QUFDckMsVUFBSSxTQUFTLElBQUksT0FBTztBQUN4QixVQUFJLE9BQU87QUFDWCxVQUFJLE1BQU07QUFDVixVQUFJLE1BQU07QUFDVixVQUFJLFFBQVEsVUFBVSxJQUFJO0FBQ3hCLGVBQU8sUUFBUTtBQUFBLE1BQ2pCO0FBQ0EsYUFBTyxXQUFXO0FBQ2xCLGFBQU8sVUFBVSxXQUFZO0FBQzNCLGVBQU8sWUFBWTtBQUNuQixlQUFPLEtBQUssS0FBSztBQUNqQixlQUFPLEtBQUssT0FBTztBQUFBLE1BQ3JCO0FBQ0EsU0FBRyxLQUFLLFFBQVEsTUFBTSxNQUFNLFFBQVEsU0FBVSxLQUFLLElBQUk7QUFDckQsWUFBSSxLQUFLO0FBQ1AsY0FBSSxDQUFDQSxPQUFNO0FBQ1QsbUJBQU8sS0FBSyxTQUFTLEdBQUc7QUFBQSxVQUMxQixPQUFPO0FBQ0wsWUFBQUEsTUFBSyxHQUFHO0FBQUEsVUFDVjtBQUNBLGlCQUFPLFFBQVE7QUFDZjtBQUFBLFFBQ0Y7QUFDQSxTQUFDLFNBQVMsT0FBTztBQUNmLGNBQUksT0FBTyxXQUFXO0FBQ3BCLGVBQUcsTUFBTSxJQUFJLElBQUk7QUFDakI7QUFBQSxVQUNGO0FBQ0EsaUJBQU8sR0FBRyxLQUFLLElBQUksUUFBUSxHQUFHLE9BQU8sUUFBUSxLQUFLLFNBQVUsT0FBTyxPQUFPO0FBQ3hFLGdCQUFJLE9BQU87QUFDVCxrQkFBSSxDQUFDQSxPQUFNO0FBQ1QsdUJBQU8sS0FBSyxTQUFTLEtBQUs7QUFBQSxjQUM1QixPQUFPO0FBQ0wsZ0JBQUFBLE1BQUssS0FBSztBQUFBLGNBQ1o7QUFDQSxxQkFBTyxRQUFRO0FBQ2Y7QUFBQSxZQUNGO0FBQ0EsZ0JBQUksQ0FBQyxPQUFPO0FBQ1Ysa0JBQUksTUFBTTtBQUVSLG9CQUFJLFFBQVEsU0FBUyxRQUFRLE1BQU0sUUFBUSxPQUFPO0FBQ2hELHNCQUFJLENBQUNBLE9BQU07QUFDVCwyQkFBTyxLQUFLLFFBQVEsSUFBSTtBQUFBLGtCQUMxQixPQUFPO0FBQ0wsb0JBQUFBLE1BQUssTUFBTSxJQUFJO0FBQUEsa0JBQ2pCO0FBQUEsZ0JBQ0Y7QUFDQTtBQUNBLHVCQUFPO0FBQUEsY0FDVDtBQUNBLHFCQUFPLFdBQVcsTUFBTSxHQUFJO0FBQUEsWUFDOUI7QUFDQSxnQkFBSSxPQUFPLE9BQU8sTUFBTSxPQUFPLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDOUMsZ0JBQUksQ0FBQ0EsT0FBTTtBQUNULHFCQUFPLEtBQUssUUFBUSxJQUFJO0FBQUEsWUFDMUI7QUFDQSxvQkFBUSxPQUFPLE1BQU0sTUFBTSxLQUFLO0FBQ2hDLGdCQUFJQyxLQUFJLEtBQUssU0FBUztBQUN0QixnQkFBSSxJQUFJO0FBQ1IsbUJBQU8sSUFBSUEsSUFBRyxLQUFLO0FBRWpCLGtCQUFJLFFBQVEsU0FBUyxRQUFRLE1BQU0sUUFBUSxPQUFPO0FBQ2hELG9CQUFJLENBQUNELE9BQU07QUFDVCx5QkFBTyxLQUFLLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFBQSxnQkFDN0IsT0FBTztBQUNMLGtCQUFBQSxNQUFLLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFBQSxnQkFDcEI7QUFBQSxjQUNGO0FBQ0E7QUFBQSxZQUNGO0FBQ0EsbUJBQU8sS0FBS0MsRUFBQztBQUNiLG1CQUFPO0FBQ1AsbUJBQU8sS0FBSztBQUFBLFVBQ2QsQ0FBQztBQUFBLFFBQ0gsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELFVBQUksQ0FBQ0QsT0FBTTtBQUNULGVBQU87QUFBQSxNQUNUO0FBQ0EsYUFBTyxPQUFPO0FBQUEsSUFDaEI7QUFBQTtBQUFBOzs7QUNoSEE7QUFBQSxrRUFBQUUsU0FBQTtBQUFBO0FBV0EsYUFBUyxRQUFRLEdBQUc7QUFBRTtBQUEyQixhQUFPLFVBQVUsY0FBYyxPQUFPLFVBQVUsWUFBWSxPQUFPLE9BQU8sV0FBVyxTQUFVQyxJQUFHO0FBQUUsZUFBTyxPQUFPQTtBQUFBLE1BQUcsSUFBSSxTQUFVQSxJQUFHO0FBQUUsZUFBT0EsTUFBSyxjQUFjLE9BQU8sVUFBVUEsR0FBRSxnQkFBZ0IsVUFBVUEsT0FBTSxPQUFPLFlBQVksV0FBVyxPQUFPQTtBQUFBLE1BQUcsR0FBRyxRQUFRLENBQUM7QUFBQSxJQUFHO0FBQzdULGFBQVMsZ0JBQWdCLEdBQUdDLElBQUc7QUFBRSxVQUFJLEVBQUUsYUFBYUEsSUFBSSxPQUFNLElBQUksVUFBVSxtQ0FBbUM7QUFBQSxJQUFHO0FBQ2xILGFBQVMsa0JBQWtCLEdBQUcsR0FBRztBQUFFLGVBQVMsSUFBSSxHQUFHLElBQUksRUFBRSxRQUFRLEtBQUs7QUFBRSxZQUFJLElBQUksRUFBRSxDQUFDO0FBQUcsVUFBRSxhQUFhLEVBQUUsY0FBYyxPQUFJLEVBQUUsZUFBZSxNQUFJLFdBQVcsTUFBTSxFQUFFLFdBQVcsT0FBSyxPQUFPLGVBQWUsR0FBRyxlQUFlLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFBQSxNQUFHO0FBQUEsSUFBRTtBQUN2TyxhQUFTLGFBQWEsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLEtBQUssa0JBQWtCLEVBQUUsV0FBVyxDQUFDLEdBQUcsS0FBSyxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUc7QUFBQSxJQUFHO0FBQzFLLGFBQVMsZUFBZSxHQUFHO0FBQUUsVUFBSSxJQUFJLGFBQWEsR0FBRyxRQUFRO0FBQUcsYUFBTyxZQUFZLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTtBQUFBLElBQUk7QUFDNUcsYUFBUyxhQUFhLEdBQUcsR0FBRztBQUFFLFVBQUksWUFBWSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUcsUUFBTztBQUFHLFVBQUksSUFBSSxFQUFFLE9BQU8sV0FBVztBQUFHLFVBQUksV0FBVyxHQUFHO0FBQUUsWUFBSSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssU0FBUztBQUFHLFlBQUksWUFBWSxRQUFRLENBQUMsRUFBRyxRQUFPO0FBQUcsY0FBTSxJQUFJLFVBQVUsOENBQThDO0FBQUEsTUFBRztBQUFFLGNBQVEsYUFBYSxJQUFJLFNBQVMsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUMzVCxhQUFTLFdBQVcsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLElBQUksZ0JBQWdCLENBQUMsR0FBRywyQkFBMkIsR0FBRywwQkFBMEIsSUFBSSxRQUFRLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLFdBQVcsSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFBQSxJQUFHO0FBQzFNLGFBQVMsMkJBQTJCLEdBQUcsR0FBRztBQUFFLFVBQUksTUFBTSxZQUFZLFFBQVEsQ0FBQyxLQUFLLGNBQWMsT0FBTyxHQUFJLFFBQU87QUFBRyxVQUFJLFdBQVcsRUFBRyxPQUFNLElBQUksVUFBVSwwREFBMEQ7QUFBRyxhQUFPLHVCQUF1QixDQUFDO0FBQUEsSUFBRztBQUN4UCxhQUFTLHVCQUF1QixHQUFHO0FBQUUsVUFBSSxXQUFXLEVBQUcsT0FBTSxJQUFJLGVBQWUsMkRBQTJEO0FBQUcsYUFBTztBQUFBLElBQUc7QUFDeEosYUFBUyw0QkFBNEI7QUFBRSxVQUFJO0FBQUUsWUFBSSxJQUFJLENBQUMsUUFBUSxVQUFVLFFBQVEsS0FBSyxRQUFRLFVBQVUsU0FBUyxDQUFDLEdBQUcsV0FBWTtBQUFBLFFBQUMsQ0FBQyxDQUFDO0FBQUEsTUFBRyxTQUFTQyxJQUFHO0FBQUEsTUFBQztBQUFFLGNBQVEsNEJBQTRCLFNBQVNDLDZCQUE0QjtBQUFFLGVBQU8sQ0FBQyxDQUFDO0FBQUEsTUFBRyxHQUFHO0FBQUEsSUFBRztBQUNsUCxhQUFTLGdCQUFnQixHQUFHO0FBQUUsYUFBTyxrQkFBa0IsT0FBTyxpQkFBaUIsT0FBTyxlQUFlLEtBQUssSUFBSSxTQUFVRCxJQUFHO0FBQUUsZUFBT0EsR0FBRSxhQUFhLE9BQU8sZUFBZUEsRUFBQztBQUFBLE1BQUcsR0FBRyxnQkFBZ0IsQ0FBQztBQUFBLElBQUc7QUFDcE0sYUFBUyxVQUFVLEdBQUcsR0FBRztBQUFFLFVBQUksY0FBYyxPQUFPLEtBQUssU0FBUyxFQUFHLE9BQU0sSUFBSSxVQUFVLG9EQUFvRDtBQUFHLFFBQUUsWUFBWSxPQUFPLE9BQU8sS0FBSyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxHQUFHLFVBQVUsTUFBSSxjQUFjLEtBQUcsRUFBRSxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUcsS0FBSyxnQkFBZ0IsR0FBRyxDQUFDO0FBQUEsSUFBRztBQUNuVixhQUFTLGdCQUFnQixHQUFHLEdBQUc7QUFBRSxhQUFPLGtCQUFrQixPQUFPLGlCQUFpQixPQUFPLGVBQWUsS0FBSyxJQUFJLFNBQVVBLElBQUdFLElBQUc7QUFBRSxlQUFPRixHQUFFLFlBQVlFLElBQUdGO0FBQUEsTUFBRyxHQUFHLGdCQUFnQixHQUFHLENBQUM7QUFBQSxJQUFHO0FBQ3hMLFFBQUksS0FBSyxRQUFRLElBQUk7QUFDckIsUUFBSSxPQUFPLFFBQVEsTUFBTTtBQUN6QixRQUFJLGNBQWM7QUFDbEIsUUFBSSxPQUFPLFFBQVEsTUFBTTtBQUN6QixRQUFJLFdBQVc7QUFBZixRQUNFLFVBQVUsU0FBUztBQUNyQixRQUFJLFlBQVk7QUFBaEIsUUFDRSxTQUFTLFVBQVU7QUFEckIsUUFFRSxjQUFjLFVBQVU7QUFDMUIsUUFBSSxrQkFBa0I7QUFDdEIsUUFBSSxRQUFRLG1CQUE2QixjQUFjO0FBQ3ZELFFBQUksS0FBSyxRQUFRLElBQUk7QUFDckIsUUFBSSxXQUFXO0FBT2YsSUFBQUgsUUFBTyxVQUF1Qix5QkFBVSxrQkFBa0I7QUFNeEQsZUFBUyxPQUFPO0FBQ2QsWUFBSTtBQUNKLFlBQUksVUFBVSxVQUFVLFNBQVMsS0FBSyxVQUFVLENBQUMsTUFBTSxTQUFZLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDbkYsd0JBQWdCLE1BQU0sSUFBSTtBQUMxQixnQkFBUSxXQUFXLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUd4QyxjQUFNLE9BQU8sUUFBUSxRQUFRO0FBSTdCLGlCQUFTLFFBQVEsUUFBUTtBQUN2QixtQkFBUyxPQUFPLFVBQVUsUUFBUSxPQUFPLElBQUksTUFBTSxPQUFPLElBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxPQUFPLEdBQUcsT0FBTyxNQUFNLFFBQVE7QUFDMUcsaUJBQUssT0FBTyxDQUFDLElBQUksVUFBVSxJQUFJO0FBQUEsVUFDakM7QUFDQSxlQUFLLE1BQU0sQ0FBQyxFQUFFLFFBQVEsU0FBVSxNQUFNO0FBQ3BDLGdCQUFJLFFBQVEsSUFBSSxHQUFHO0FBQ2pCLG9CQUFNLElBQUksTUFBTSxjQUFjLE9BQU8sTUFBTSxPQUFPLEVBQUUsT0FBTyxRQUFRLFdBQVcsQ0FBQztBQUFBLFlBQ2pGO0FBQUEsVUFDRixDQUFDO0FBQUEsUUFDSDtBQUdBLGNBQU0sVUFBVSxJQUFJLFlBQVk7QUFDaEMsY0FBTSxRQUFRLGdCQUFnQixFQUFFO0FBR2hDLGNBQU0sV0FBVyxNQUFNLFNBQVMsS0FBSyxLQUFLO0FBQzFDLFlBQUksUUFBUSxZQUFZLFFBQVEsU0FBUztBQUN2QyxrQkFBUSx1QkFBdUIsUUFBUTtBQUN2QyxnQkFBTSxZQUFZLE1BQU0sV0FBVyxRQUFRLFdBQVcsS0FBSyxTQUFTLFFBQVEsUUFBUSxJQUFJO0FBQ3hGLGdCQUFNLFVBQVUsUUFBUSxXQUFXLEtBQUssUUFBUSxRQUFRLFFBQVE7QUFDaEUsZ0JBQU0sVUFBVSxRQUFRLFdBQVc7QUFBQSxZQUNqQyxPQUFPO0FBQUEsVUFDVDtBQUFBLFFBQ0YsV0FBVyxRQUFRLFFBQVE7QUFFekIsa0JBQVEsS0FBSyw0RUFBNEU7QUFDekYsa0JBQVEsVUFBVSxZQUFZLFNBQVM7QUFDdkMsZ0JBQU0sUUFBUSxNQUFNLFFBQVEsS0FBSyxNQUFNLGFBQWEsUUFBUSxNQUFNLENBQUM7QUFDbkUsZ0JBQU0sVUFBVSxLQUFLLFFBQVEsTUFBTSxNQUFNLElBQUk7QUFBQSxRQUcvQyxPQUFPO0FBQ0wsZ0JBQU0sSUFBSSxNQUFNLGdEQUFnRDtBQUFBLFFBQ2xFO0FBQ0EsY0FBTSxVQUFVLFFBQVEsV0FBVztBQUNuQyxjQUFNLGlCQUFpQixRQUFRLGtCQUFrQjtBQUNqRCxjQUFNLGdCQUFnQixRQUFRLGlCQUFpQjtBQUMvQyxjQUFNLFdBQVcsUUFBUSxZQUFZO0FBQ3JDLGNBQU0sTUFBTSxPQUFPLFFBQVEsUUFBUSxXQUFXLFFBQVEsTUFBTSxHQUFHO0FBQy9ELGNBQU0sV0FBVyxRQUFRLFlBQVk7QUFDckMsY0FBTSxPQUFPLFFBQVEsUUFBUTtBQUk3QixjQUFNLFFBQVE7QUFDZCxjQUFNLGVBQWU7QUFDckIsY0FBTSxXQUFXO0FBQ2pCLGNBQU0sU0FBUztBQUNmLGNBQU0sV0FBVztBQUNqQixjQUFNLFVBQVU7QUFDaEIsY0FBTSxhQUFhO0FBQ25CLFlBQUksTUFBTSxRQUFTLE9BQU0sd0JBQXdCLE1BQU0sT0FBTztBQUM5RCxZQUFJLENBQUMsTUFBTSxLQUFNLE9BQU0sS0FBSztBQUM1QixlQUFPO0FBQUEsTUFDVDtBQUNBLGdCQUFVLE1BQU0sZ0JBQWdCO0FBQ2hDLGFBQU8sYUFBYSxNQUFNLENBQUM7QUFBQSxRQUN6QixLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsaUJBQWlCO0FBQy9CLGNBQUksU0FBUztBQUNiLGNBQUksS0FBSyxTQUFTO0FBQ2hCLGdCQUFJLEtBQUssVUFBVTtBQUNqQixtQkFBSyxLQUFLLFFBQVEsV0FBWTtBQUM1Qix1QkFBTyxRQUFRLEtBQUssVUFBVSxXQUFZO0FBQ3hDLHlCQUFPLE9BQU8sS0FBSyxRQUFRO0FBQUEsZ0JBQzdCLENBQUM7QUFDRCw2QkFBYSxXQUFZO0FBQ3ZCLHlCQUFPLE9BQU8sUUFBUSxJQUFJO0FBQUEsZ0JBQzVCLENBQUM7QUFBQSxjQUNILENBQUM7QUFBQSxZQUNILE9BQU87QUFDTCxtQkFBSyxRQUFRLEtBQUssVUFBVSxXQUFZO0FBQ3RDLHVCQUFPLE9BQU8sS0FBSyxRQUFRO0FBQUEsY0FDN0IsQ0FBQztBQUNELDJCQUFhLFdBQVk7QUFDdkIsdUJBQU8sT0FBTyxRQUFRLElBQUk7QUFBQSxjQUM1QixDQUFDO0FBQUEsWUFDSDtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFRRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsSUFBSSxNQUFNO0FBQ3hCLGNBQUksU0FBUztBQUNiLGNBQUksV0FBVyxVQUFVLFNBQVMsS0FBSyxVQUFVLENBQUMsTUFBTSxTQUFZLFVBQVUsQ0FBQyxJQUFJLFdBQVk7QUFBQSxVQUFDO0FBSWhHLGNBQUksS0FBSyxRQUFRO0FBQ2YscUJBQVM7QUFDVCxtQkFBTztBQUFBLFVBQ1Q7QUFHQSxjQUFJLEtBQUssUUFBUTtBQUNmLGlCQUFLLFFBQVEsS0FBSyxTQUFTLFdBQVk7QUFDckMscUJBQU8sU0FBUztBQUNoQixxQkFBTyxJQUFJLE1BQU0sUUFBUTtBQUFBLFlBQzNCLENBQUM7QUFDRDtBQUFBLFVBQ0Y7QUFDQSxjQUFJLEtBQUssU0FBUztBQUNoQixpQkFBSyxRQUFRLEtBQUssVUFBVSxXQUFZO0FBQ3RDLHFCQUFPLFVBQVU7QUFDakIscUJBQU8sSUFBSSxNQUFNLFFBQVE7QUFBQSxZQUMzQixDQUFDO0FBQ0Q7QUFBQSxVQUNGO0FBQ0EsY0FBSSxLQUFLLE1BQU07QUFDYixnQkFBSSxDQUFDLEtBQUssWUFBWTtBQUNwQixrQkFBSSxDQUFDLEtBQUssVUFBVTtBQUNsQixxQkFBSyxLQUFLO0FBQUEsY0FDWjtBQUNBLG1CQUFLLEtBQUssUUFBUSxXQUFZO0FBQzVCLHVCQUFPLGFBQWE7QUFDcEIsdUJBQU8sSUFBSSxNQUFNLFFBQVE7QUFDekI7QUFBQSxjQUNGLENBQUM7QUFDRDtBQUFBLFlBQ0Y7QUFDQSxnQkFBSSxLQUFLLGNBQWMsS0FBSyxZQUFZLEdBQUc7QUFDekMsbUJBQUssTUFBTSxLQUFLLFNBQVMsV0FBWTtBQUNuQyxvQkFBSSxDQUFDLE9BQU8sVUFBVTtBQUNwQix5QkFBTyxLQUFLO0FBQUEsZ0JBQ2Q7QUFDQSx1QkFBTyxLQUFLLFFBQVEsV0FBWTtBQUM5Qix5QkFBTyxJQUFJLE1BQU0sUUFBUTtBQUN6QjtBQUFBLGdCQUNGLENBQUM7QUFDRDtBQUFBLGNBQ0YsQ0FBQztBQUNEO0FBQUEsWUFDRjtBQUFBLFVBQ0Y7QUFHQSxjQUFJLFNBQVMsR0FBRyxPQUFPLEtBQUssT0FBTyxDQUFDLEVBQUUsT0FBTyxLQUFLLEdBQUc7QUFDckQsY0FBSSxRQUFRLE9BQU8sV0FBVyxNQUFNO0FBT3BDLG1CQUFTLFNBQVM7QUFDaEIsZ0JBQUksU0FBUztBQUNiLGlCQUFLLFNBQVM7QUFDZCxpQkFBSyxnQkFBZ0I7QUFDckIsa0JBQU0sZ0JBQWdCLEtBQUssT0FBTyxNQUFNO0FBQ3hDLGlCQUFLLEtBQUssVUFBVSxJQUFJO0FBR3hCLGdCQUFJLEtBQUssU0FBUztBQUNoQjtBQUFBLFlBQ0Y7QUFHQSxnQkFBSSxLQUFLLFVBQVU7QUFDakI7QUFBQSxZQUNGO0FBR0EsZ0JBQUksQ0FBQyxLQUFLLGNBQWMsR0FBRztBQUN6QjtBQUFBLFlBQ0Y7QUFDQSxnQkFBSSxLQUFLLE1BQU07QUFDYixtQkFBSyxXQUFXLFdBQVk7QUFDMUIsdUJBQU8sS0FBSyxZQUFZO0FBQUEsY0FDMUIsQ0FBQztBQUNEO0FBQUEsWUFDRjtBQUtBLGlCQUFLLFVBQVU7QUFDZixpQkFBSyxXQUFXLFdBQVk7QUFDMUIscUJBQU8sT0FBTyxZQUFZO0FBQUEsWUFDNUIsQ0FBQztBQUFBLFVBQ0g7QUFLQSxlQUFLLGdCQUFnQjtBQUNyQixjQUFJLEtBQUssWUFBWSxDQUFDLEtBQUssdUJBQXVCLEtBQUssY0FBYyxLQUFLLFFBQVEsS0FBSyxZQUFZLEdBQUc7QUFDcEcsaUJBQUssc0JBQXNCO0FBQUEsVUFDN0I7QUFDQSxjQUFJLFVBQVUsS0FBSyxRQUFRLE1BQU0sUUFBUSxPQUFPLEtBQUssSUFBSSxDQUFDO0FBQzFELGNBQUksQ0FBQyxTQUFTO0FBQ1osaUJBQUssU0FBUztBQUNkLGlCQUFLLFFBQVEsS0FBSyxTQUFTLFdBQVk7QUFDckMscUJBQU8sU0FBUztBQUNoQix1QkFBUztBQUFBLFlBQ1gsQ0FBQztBQUFBLFVBQ0gsT0FBTztBQUNMLHFCQUFTO0FBQUEsVUFDWDtBQUNBLGdCQUFNLFdBQVcsU0FBUyxLQUFLLE1BQU07QUFDckMsZUFBSyxlQUFlO0FBQ3BCLGlCQUFPO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BUUYsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLE1BQU0sU0FBUyxVQUFVO0FBQ3ZDLGNBQUksT0FBTyxZQUFZLFlBQVk7QUFDakMsdUJBQVc7QUFDWCxzQkFBVSxDQUFDO0FBQUEsVUFDYjtBQUNBLG9CQUFVLGVBQWUsT0FBTztBQUNoQyxjQUFJLE9BQU8sS0FBSyxLQUFLLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFDaEQsY0FBSSxPQUFPO0FBQ1gsY0FBSSxVQUFVLENBQUM7QUFDZixjQUFJLE1BQU07QUFDVixjQUFJLFNBQVMsR0FBRyxpQkFBaUIsTUFBTTtBQUFBLFlBQ3JDLFVBQVU7QUFBQSxVQUNaLENBQUM7QUFDRCxpQkFBTyxHQUFHLFNBQVMsU0FBVSxLQUFLO0FBQ2hDLGdCQUFJLE9BQU8sVUFBVTtBQUNuQixxQkFBTyxRQUFRO0FBQUEsWUFDakI7QUFDQSxnQkFBSSxDQUFDLFVBQVU7QUFDYjtBQUFBLFlBQ0Y7QUFDQSxtQkFBTyxJQUFJLFNBQVMsV0FBVyxTQUFTLEdBQUcsSUFBSSxTQUFTLE1BQU0sT0FBTztBQUFBLFVBQ3ZFLENBQUM7QUFDRCxpQkFBTyxHQUFHLFFBQVEsU0FBVSxNQUFNO0FBQ2hDLG9CQUFRLE9BQU8sTUFBTSxNQUFNLEtBQUs7QUFDaEMsZ0JBQUlNLEtBQUksS0FBSyxTQUFTO0FBQ3RCLGdCQUFJLElBQUk7QUFDUixtQkFBTyxJQUFJQSxJQUFHLEtBQUs7QUFDakIsa0JBQUksQ0FBQyxRQUFRLFNBQVMsT0FBTyxRQUFRLE9BQU87QUFDMUMsb0JBQUksS0FBSyxDQUFDLENBQUM7QUFBQSxjQUNiO0FBQ0E7QUFBQSxZQUNGO0FBQ0EsbUJBQU8sS0FBS0EsRUFBQztBQUFBLFVBQ2YsQ0FBQztBQUNELGlCQUFPLEdBQUcsU0FBUyxXQUFZO0FBQzdCLGdCQUFJLE1BQU07QUFDUixrQkFBSSxNQUFNLElBQUk7QUFBQSxZQUNoQjtBQUNBLGdCQUFJLFFBQVEsVUFBVSxRQUFRO0FBQzVCLHdCQUFVLFFBQVEsUUFBUTtBQUFBLFlBQzVCO0FBR0EsZ0JBQUksU0FBVSxVQUFTLE1BQU0sT0FBTztBQUFBLFVBQ3RDLENBQUM7QUFDRCxtQkFBUyxJQUFJQyxPQUFNLFNBQVM7QUFDMUIsZ0JBQUk7QUFDRixrQkFBSSxNQUFNLEtBQUssTUFBTUEsS0FBSTtBQUN6QixrQkFBSSxNQUFNLEdBQUcsR0FBRztBQUNkLHFCQUFLLEdBQUc7QUFBQSxjQUNWO0FBQUEsWUFDRixTQUFTLEdBQUc7QUFDVixrQkFBSSxDQUFDLFNBQVM7QUFDWix1QkFBTyxLQUFLLFNBQVMsQ0FBQztBQUFBLGNBQ3hCO0FBQUEsWUFDRjtBQUFBLFVBQ0Y7QUFDQSxtQkFBUyxLQUFLLEtBQUs7QUFDakIsZ0JBQUksUUFBUSxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsUUFBUSxVQUFVLFFBQVE7QUFDOUUsa0JBQUksT0FBTyxVQUFVO0FBQ25CLHVCQUFPLFFBQVE7QUFBQSxjQUNqQjtBQUNBO0FBQUEsWUFDRjtBQUNBLGdCQUFJLFFBQVEsUUFBUTtBQUNsQixvQkFBTSxRQUFRLE9BQU8sT0FBTyxTQUFVLEtBQUssS0FBSztBQUM5QyxvQkFBSSxHQUFHLElBQUksSUFBSSxHQUFHO0FBQ2xCLHVCQUFPO0FBQUEsY0FDVCxHQUFHLENBQUMsQ0FBQztBQUFBLFlBQ1A7QUFDQSxnQkFBSSxRQUFRLFVBQVUsUUFBUTtBQUM1QixrQkFBSSxRQUFRLFVBQVUsUUFBUSxNQUFNO0FBQ2xDLHdCQUFRLE1BQU07QUFBQSxjQUNoQjtBQUFBLFlBQ0Y7QUFDQSxvQkFBUSxLQUFLLEdBQUc7QUFBQSxVQUNsQjtBQUNBLG1CQUFTLE1BQU0sS0FBSztBQUNsQixnQkFBSSxDQUFDLEtBQUs7QUFDUjtBQUFBLFlBQ0Y7QUFDQSxnQkFBSSxRQUFRLEdBQUcsTUFBTSxVQUFVO0FBQzdCO0FBQUEsWUFDRjtBQUNBLGdCQUFJLE9BQU8sSUFBSSxLQUFLLElBQUksU0FBUztBQUNqQyxnQkFBSSxRQUFRLFFBQVEsT0FBTyxRQUFRLFFBQVEsUUFBUSxTQUFTLE9BQU8sUUFBUSxTQUFTLFFBQVEsU0FBUyxRQUFRLFVBQVUsSUFBSSxPQUFPO0FBQ2hJO0FBQUEsWUFDRjtBQUNBLG1CQUFPO0FBQUEsVUFDVDtBQUNBLG1CQUFTLGVBQWVDLFVBQVM7QUFDL0IsWUFBQUEsV0FBVUEsWUFBVyxDQUFDO0FBR3RCLFlBQUFBLFNBQVEsT0FBT0EsU0FBUSxRQUFRQSxTQUFRLFNBQVM7QUFHaEQsWUFBQUEsU0FBUSxRQUFRQSxTQUFRLFNBQVM7QUFHakMsWUFBQUEsU0FBUSxRQUFRQSxTQUFRLFNBQVMsb0JBQUksS0FBSztBQUMxQyxnQkFBSSxRQUFRQSxTQUFRLEtBQUssTUFBTSxVQUFVO0FBQ3ZDLGNBQUFBLFNBQVEsUUFBUSxJQUFJLEtBQUtBLFNBQVEsS0FBSztBQUFBLFlBQ3hDO0FBR0EsWUFBQUEsU0FBUSxPQUFPQSxTQUFRLFFBQVFBLFNBQVEsUUFBUSxLQUFLLEtBQUssS0FBSztBQUM5RCxnQkFBSSxRQUFRQSxTQUFRLElBQUksTUFBTSxVQUFVO0FBQ3RDLGNBQUFBLFNBQVEsT0FBTyxJQUFJLEtBQUtBLFNBQVEsSUFBSTtBQUFBLFlBQ3RDO0FBR0EsWUFBQUEsU0FBUSxRQUFRQSxTQUFRLFNBQVM7QUFDakMsbUJBQU9BO0FBQUEsVUFDVDtBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVFGLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxTQUFTO0FBQ3ZCLGNBQUksVUFBVSxVQUFVLFNBQVMsS0FBSyxVQUFVLENBQUMsTUFBTSxTQUFZLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDbkYsY0FBSSxPQUFPLEtBQUssS0FBSyxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQ2hELGNBQUlDLFVBQVMsSUFBSSxPQUFPO0FBQ3hCLGNBQUksT0FBTztBQUFBLFlBQ1Q7QUFBQSxZQUNBLE9BQU8sUUFBUTtBQUFBLFVBQ2pCO0FBQ0EsVUFBQUEsUUFBTyxVQUFVLFNBQVMsTUFBTSxTQUFVLEtBQUssTUFBTTtBQUNuRCxnQkFBSSxLQUFLO0FBQ1AscUJBQU9BLFFBQU8sS0FBSyxTQUFTLEdBQUc7QUFBQSxZQUNqQztBQUNBLGdCQUFJO0FBQ0YsY0FBQUEsUUFBTyxLQUFLLFFBQVEsSUFBSTtBQUN4QixxQkFBTyxLQUFLLE1BQU0sSUFBSTtBQUN0QixjQUFBQSxRQUFPLEtBQUssT0FBTyxJQUFJO0FBQUEsWUFDekIsU0FBUyxHQUFHO0FBQ1YsY0FBQUEsUUFBTyxLQUFLLFNBQVMsQ0FBQztBQUFBLFlBQ3hCO0FBQUEsVUFDRixDQUFDO0FBQ0QsaUJBQU9BO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFNRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsT0FBTztBQUNyQixjQUFJLFNBQVM7QUFHYixjQUFJLENBQUMsS0FBSyxTQUFVO0FBQ3BCLGNBQUksS0FBSyxTQUFVO0FBQ25CLGVBQUssV0FBVztBQUdoQixlQUFLLEtBQUssU0FBVSxLQUFLLE1BQU07QUFDN0IsZ0JBQUksS0FBSztBQUNQLHFCQUFPLE9BQU8sS0FBSyxTQUFTLEdBQUc7QUFBQSxZQUNqQztBQUNBLGtCQUFNLDhCQUE4QixPQUFPLFVBQVUsSUFBSTtBQUN6RCxtQkFBTyxRQUFRO0FBQ2YsbUJBQU8sUUFBUSxPQUFPLGNBQWMsT0FBTyxPQUFPO0FBQ2xELG1CQUFPLFdBQVc7QUFDbEIsbUJBQU8sS0FBSyxRQUFRLFdBQVk7QUFDOUIsa0JBQUksQ0FBQyxPQUFPLFFBQVEsS0FBSyxRQUFRLEdBQUc7QUFDbEMsdUJBQU8sVUFBVTtBQUFBLGNBQ25CO0FBQUEsWUFDRixDQUFDO0FBQUEsVUFDSCxDQUFDO0FBQUEsUUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxLQUFLLFVBQVU7QUFDN0IsY0FBSSxTQUFTO0FBQ2IsY0FBSSxTQUFTLEtBQUssU0FBUztBQUMzQixjQUFJLFdBQVcsS0FBSyxLQUFLLEtBQUssU0FBUyxNQUFNO0FBQzdDLGFBQUcsS0FBSyxVQUFVLFNBQVUsS0FBS0MsT0FBTTtBQUNyQyxnQkFBSSxPQUFPLElBQUksU0FBUyxVQUFVO0FBQ2hDLG9CQUFNLGdCQUFhLFFBQVE7QUFFM0IscUJBQU8sV0FBVztBQUNsQixxQkFBTyxTQUFTLE1BQU0sQ0FBQztBQUFBLFlBQ3pCO0FBQ0EsZ0JBQUksS0FBSztBQUNQLG9CQUFNLE9BQU8sT0FBTyxJQUFJLE1BQU0sR0FBRyxFQUFFLE9BQU8sUUFBUSxDQUFDO0FBQ25ELHFCQUFPLFNBQVMsR0FBRztBQUFBLFlBQ3JCO0FBQ0EsZ0JBQUksQ0FBQ0EsU0FBUSxPQUFPLGNBQWNBLE1BQUssSUFBSSxHQUFHO0FBRzVDLHFCQUFPLE9BQU8sU0FBUyxXQUFZO0FBQ2pDLHVCQUFPLE9BQU8sS0FBSyxRQUFRO0FBQUEsY0FDN0IsQ0FBQztBQUFBLFlBQ0g7QUFJQSxtQkFBTyxXQUFXO0FBQ2xCLHFCQUFTLE1BQU1BLE1BQUssSUFBSTtBQUFBLFVBQzFCLENBQUM7QUFBQSxRQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BT0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLE1BQU0sSUFBSTtBQUN4QixjQUFJLFNBQVM7QUFDYixjQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCO0FBQUEsVUFDRjtBQUNBLGVBQUssUUFBUSxJQUFJLFdBQVk7QUFDM0IsZ0JBQUksSUFBSTtBQUNOLGlCQUFHO0FBQUEsWUFDTDtBQUNBLG1CQUFPLEtBQUssT0FBTztBQUNuQixtQkFBTyxLQUFLLFFBQVE7QUFBQSxVQUN0QixDQUFDO0FBQUEsUUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxjQUFjLE1BQU07QUFDbEMsaUJBQU8sUUFBUSxLQUFLO0FBQ3BCLGlCQUFPLEtBQUssV0FBVyxRQUFRLEtBQUs7QUFBQSxRQUN0QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxTQUFTLEtBQUs7QUFDNUIsZUFBSyxLQUFLLFNBQVMsR0FBRztBQUFBLFFBQ3hCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BT0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLGFBQWEsUUFBUTtBQUNuQyxpQkFBTyxHQUFHLFNBQVMsS0FBSyxRQUFRO0FBQ2hDLGlCQUFPO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxlQUFlLFFBQVE7QUFDckMsaUJBQU8sZUFBZSxTQUFTLEtBQUssUUFBUTtBQUM1QyxpQkFBTyxRQUFRO0FBQ2YsaUJBQU87QUFBQSxRQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFLRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsY0FBYztBQUM1QixjQUFJLFNBQVM7QUFDYixlQUFLLFNBQVMsV0FBWTtBQUN4QixtQkFBTyxPQUFPLEtBQUs7QUFBQSxVQUNyQixDQUFDO0FBQUEsUUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFTRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsYUFBYTtBQUMzQixjQUFJLFNBQVM7QUFDYixjQUFJLFdBQVcsVUFBVSxTQUFTLEtBQUssVUFBVSxDQUFDLE1BQU0sU0FBWSxVQUFVLENBQUMsSUFBSSxXQUFZO0FBQUEsVUFBQztBQUNoRyxjQUFJLEtBQUssT0FBTztBQUNkLGlCQUFLLFFBQVEsT0FBTyxLQUFLLEtBQUs7QUFDOUIsaUJBQUssTUFBTSxJQUFJLFdBQVk7QUFDekIscUJBQU8sZUFBZSxPQUFPLEtBQUs7QUFDbEMsdUJBQVM7QUFBQSxZQUNYLENBQUM7QUFBQSxVQUNILE9BQU87QUFDTCxxQkFBUztBQUFBLFVBQ1g7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVNGLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxjQUFjLFFBQVE7QUFDcEMsY0FBSSxVQUFVO0FBQ2QsY0FBSSxXQUFXLEtBQUssS0FBSyxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQ3BELGdCQUFNLHVCQUF1QixVQUFVLEtBQUssT0FBTztBQUNuRCxjQUFJLE9BQU8sR0FBRyxrQkFBa0IsVUFBVSxLQUFLLE9BQU8sRUFFckQsR0FBRyxTQUFTLFNBQVUsS0FBSztBQUMxQixtQkFBTyxNQUFNLEdBQUc7QUFBQSxVQUNsQixDQUFDLEVBQUUsR0FBRyxTQUFTLFdBQVk7QUFDekIsbUJBQU8sTUFBTSxTQUFTLEtBQUssTUFBTSxLQUFLLFlBQVk7QUFBQSxVQUNwRCxDQUFDLEVBQUUsR0FBRyxRQUFRLFdBQVk7QUFDeEIsa0JBQU0sZ0JBQWdCLFFBQVE7QUFDOUIsb0JBQVEsS0FBSyxRQUFRLFFBQVE7QUFDN0IsbUJBQU8sS0FBSyxJQUFJO0FBS2hCLGdCQUFJLFFBQVEscUJBQXFCO0FBQy9CLHNCQUFRLFVBQVUsSUFBSSxZQUFZO0FBQ2xDLHNCQUFRLFFBQVEsZ0JBQWdCLEVBQUU7QUFDbEMsc0JBQVEsWUFBWTtBQUNwQixzQkFBUSxzQkFBc0I7QUFDOUIsc0JBQVEsZUFBZSxJQUFJO0FBQzNCLHFCQUFPLElBQUk7QUFBQSxZQUNiO0FBQUEsVUFDRixDQUFDO0FBQ0QsZ0JBQU0sb0JBQW9CLFFBQVE7QUFDbEMsaUJBQU87QUFBQSxRQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BT0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFNBQVMsVUFBVTtBQUNqQyxnQkFBTSxZQUFZLEtBQUssUUFBUTtBQUMvQixjQUFJLE1BQU0sS0FBSyxRQUFRLEtBQUssU0FBUztBQUNyQyxjQUFJLFdBQVcsS0FBSyxTQUFTLEtBQUssV0FBVyxHQUFHO0FBQ2hELGNBQUksUUFBUSxDQUFDO0FBQ2IsY0FBSSxLQUFLLGVBQWU7QUFDdEIsa0JBQU0sS0FBSyxTQUFVLElBQUk7QUFDdkIsa0JBQUksTUFBTSxLQUFLLFdBQVcsS0FBSyxDQUFDLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFDaEUsbUJBQUssY0FBYyxLQUFLLEtBQUssS0FBSyxTQUFTLEdBQUcsT0FBTyxRQUFRLEVBQUUsT0FBTyxHQUFHLEVBQUUsT0FBTyxHQUFHLENBQUMsR0FBRyxLQUFLLEtBQUssS0FBSyxTQUFTLEdBQUcsT0FBTyxRQUFRLEVBQUUsT0FBTyxHQUFHLEVBQUUsT0FBTyxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUU7QUFBQSxZQUMxSyxFQUFFLEtBQUssSUFBSSxDQUFDO0FBQUEsVUFDZDtBQUNBLGdCQUFNLEtBQUssU0FBVSxJQUFJO0FBQ3ZCLGdCQUFJLENBQUMsS0FBSyxVQUFVO0FBQ2xCLG1CQUFLLFlBQVk7QUFDakIsbUJBQUssMkJBQTJCLEtBQUssVUFBVSxFQUFFO0FBQUEsWUFDbkQsT0FBTztBQUNMLG1CQUFLLHVCQUF1QixLQUFLLFVBQVUsRUFBRTtBQUFBLFlBQy9DO0FBQUEsVUFDRixFQUFFLEtBQUssSUFBSSxDQUFDO0FBQ1osc0JBQVksT0FBTyxRQUFRO0FBQUEsUUFDN0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVFGLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxXQUFXO0FBQ3pCLGNBQUksTUFBTSxLQUFLLFFBQVEsS0FBSyxTQUFTO0FBQ3JDLGNBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxXQUFXLEdBQUc7QUFDaEQsY0FBSSxhQUFhLEtBQUssaUJBQWlCLEtBQUssZUFBZSxJQUFJLEtBQUs7QUFLcEUsaUJBQU8sQ0FBQyxLQUFLLFlBQVksS0FBSyxXQUFXLEdBQUcsT0FBTyxRQUFRLEVBQUUsT0FBTyxVQUFVLEVBQUUsT0FBTyxHQUFHLElBQUksR0FBRyxPQUFPLFFBQVEsRUFBRSxPQUFPLEdBQUc7QUFBQSxRQUM5SDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVVGLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUywyQkFBMkIsS0FBSyxVQUFVLFVBQVU7QUFFbEUsY0FBSSxDQUFDLEtBQUssWUFBWSxLQUFLLFdBQVcsS0FBSyxVQUFVO0FBQ25ELG1CQUFPLGFBQWEsUUFBUTtBQUFBLFVBQzlCO0FBQ0EsY0FBSSxTQUFTLEtBQUssV0FBVyxLQUFLO0FBQ2xDLGNBQUksV0FBVyxXQUFXLElBQUksU0FBUztBQUN2QyxjQUFJLFdBQVcsS0FBSyxnQkFBZ0IsUUFBUTtBQUM1QyxjQUFJLFdBQVcsR0FBRyxPQUFPLFFBQVEsRUFBRSxPQUFPLFFBQVEsRUFBRSxPQUFPLEdBQUcsRUFBRSxPQUFPLFFBQVE7QUFDL0UsY0FBSSxTQUFTLEtBQUssS0FBSyxLQUFLLFNBQVMsUUFBUTtBQUM3QyxhQUFHLE9BQU8sUUFBUSxRQUFRO0FBQUEsUUFDNUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFhRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsdUJBQXVCLEtBQUssVUFBVSxVQUFVO0FBQzlELGNBQUksVUFBVTtBQUNkLGNBQUksUUFBUSxDQUFDO0FBQ2IsY0FBSSxDQUFDLEtBQUssVUFBVTtBQUNsQjtBQUFBLFVBQ0Y7QUFHQSxjQUFJLFdBQVcsS0FBSyxnQkFBZ0IsUUFBUTtBQUM1QyxtQkFBUyxJQUFJLEtBQUssV0FBVyxHQUFHLElBQUksR0FBRyxLQUFLO0FBQzFDLGtCQUFNLEtBQUssU0FBVSxHQUFHLElBQUk7QUFDMUIsa0JBQUksVUFBVTtBQUNkLGtCQUFJLFdBQVcsR0FBRyxPQUFPLFFBQVEsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLE9BQU8sR0FBRyxFQUFFLE9BQU8sUUFBUTtBQUM1RSxrQkFBSSxVQUFVLEtBQUssS0FBSyxLQUFLLFNBQVMsUUFBUTtBQUM5QyxpQkFBRyxPQUFPLFNBQVMsU0FBVSxRQUFRO0FBQ25DLG9CQUFJLENBQUMsUUFBUTtBQUNYLHlCQUFPLEdBQUcsSUFBSTtBQUFBLGdCQUNoQjtBQUNBLDJCQUFXLEdBQUcsT0FBTyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxHQUFHLEVBQUUsT0FBTyxRQUFRO0FBQ3BFLG1CQUFHLE9BQU8sU0FBUyxLQUFLLEtBQUssUUFBUSxTQUFTLFFBQVEsR0FBRyxFQUFFO0FBQUEsY0FDN0QsQ0FBQztBQUFBLFlBQ0gsRUFBRSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBQUEsVUFDakI7QUFDQSxzQkFBWSxPQUFPLFdBQVk7QUFDN0IsZUFBRyxPQUFPLEtBQUssS0FBSyxRQUFRLFNBQVMsR0FBRyxPQUFPLFFBQVEsRUFBRSxPQUFPLEdBQUcsRUFBRSxPQUFPLFFBQVEsQ0FBQyxHQUFHLEtBQUssS0FBSyxRQUFRLFNBQVMsR0FBRyxPQUFPLFVBQVUsR0FBRyxFQUFFLE9BQU8sR0FBRyxFQUFFLE9BQU8sUUFBUSxDQUFDLEdBQUcsUUFBUTtBQUFBLFVBQ3JMLENBQUM7QUFBQSxRQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BVUYsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLGNBQWMsS0FBSyxNQUFNLFVBQVU7QUFDakQsYUFBRyxPQUFPLEtBQUssR0FBRyxNQUFNLFNBQVUsS0FBSztBQUNyQyxnQkFBSSxLQUFLO0FBQ1AscUJBQU8sU0FBUztBQUFBLFlBQ2xCO0FBQ0EsZ0JBQUksT0FBTyxLQUFLLFdBQVc7QUFDM0IsZ0JBQUksTUFBTSxHQUFHLGlCQUFpQixHQUFHO0FBQ2pDLGdCQUFJLE1BQU0sR0FBRyxrQkFBa0IsSUFBSTtBQUNuQyxnQkFBSSxHQUFHLFVBQVUsV0FBWTtBQUMzQixpQkFBRyxPQUFPLEtBQUssUUFBUTtBQUFBLFlBQ3pCLENBQUM7QUFDRCxnQkFBSSxLQUFLLElBQUksRUFBRSxLQUFLLEdBQUc7QUFBQSxVQUN6QixDQUFDO0FBQUEsUUFDSDtBQUFBLE1BQ0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLHdCQUF3QixTQUFTO0FBRS9DLGNBQUksQ0FBQyxHQUFHLFdBQVcsT0FBTyxHQUFHO0FBQzNCLGVBQUcsVUFBVSxTQUFTO0FBQUEsY0FDcEIsV0FBVztBQUFBLFlBQ2IsQ0FBQztBQUFBLFVBQ0g7QUFBQSxRQUVGO0FBQUEsTUFDRixDQUFDLENBQUM7QUFBQSxJQUNKLEVBQUUsZUFBZTtBQUFBO0FBQUE7OztBQ254QmpCO0FBQUEsa0VBQUFDLFNBQUE7QUFBQTtBQVNBLGFBQVMsUUFBUSxHQUFHO0FBQUU7QUFBMkIsYUFBTyxVQUFVLGNBQWMsT0FBTyxVQUFVLFlBQVksT0FBTyxPQUFPLFdBQVcsU0FBVUMsSUFBRztBQUFFLGVBQU8sT0FBT0E7QUFBQSxNQUFHLElBQUksU0FBVUEsSUFBRztBQUFFLGVBQU9BLE1BQUssY0FBYyxPQUFPLFVBQVVBLEdBQUUsZ0JBQWdCLFVBQVVBLE9BQU0sT0FBTyxZQUFZLFdBQVcsT0FBT0E7QUFBQSxNQUFHLEdBQUcsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUM3VCxhQUFTLFFBQVEsR0FBRyxHQUFHO0FBQUUsVUFBSSxJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQUcsVUFBSSxPQUFPLHVCQUF1QjtBQUFFLFlBQUksSUFBSSxPQUFPLHNCQUFzQixDQUFDO0FBQUcsY0FBTSxJQUFJLEVBQUUsT0FBTyxTQUFVQyxJQUFHO0FBQUUsaUJBQU8sT0FBTyx5QkFBeUIsR0FBR0EsRUFBQyxFQUFFO0FBQUEsUUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFBRztBQUFFLGFBQU87QUFBQSxJQUFHO0FBQzlQLGFBQVMsY0FBYyxHQUFHO0FBQUUsZUFBUyxJQUFJLEdBQUcsSUFBSSxVQUFVLFFBQVEsS0FBSztBQUFFLFlBQUksSUFBSSxRQUFRLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFBRyxZQUFJLElBQUksUUFBUSxPQUFPLENBQUMsR0FBRyxJQUFFLEVBQUUsUUFBUSxTQUFVQSxJQUFHO0FBQUUsMEJBQWdCLEdBQUdBLElBQUcsRUFBRUEsRUFBQyxDQUFDO0FBQUEsUUFBRyxDQUFDLElBQUksT0FBTyw0QkFBNEIsT0FBTyxpQkFBaUIsR0FBRyxPQUFPLDBCQUEwQixDQUFDLENBQUMsSUFBSSxRQUFRLE9BQU8sQ0FBQyxDQUFDLEVBQUUsUUFBUSxTQUFVQSxJQUFHO0FBQUUsaUJBQU8sZUFBZSxHQUFHQSxJQUFHLE9BQU8seUJBQXlCLEdBQUdBLEVBQUMsQ0FBQztBQUFBLFFBQUcsQ0FBQztBQUFBLE1BQUc7QUFBRSxhQUFPO0FBQUEsSUFBRztBQUN0YixhQUFTLGdCQUFnQixHQUFHLEdBQUcsR0FBRztBQUFFLGNBQVEsSUFBSSxlQUFlLENBQUMsTUFBTSxJQUFJLE9BQU8sZUFBZSxHQUFHLEdBQUcsRUFBRSxPQUFPLEdBQUcsWUFBWSxNQUFJLGNBQWMsTUFBSSxVQUFVLEtBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUc7QUFBQSxJQUFHO0FBRW5MLGFBQVMsZ0JBQWdCLEdBQUdDLElBQUc7QUFBRSxVQUFJLEVBQUUsYUFBYUEsSUFBSSxPQUFNLElBQUksVUFBVSxtQ0FBbUM7QUFBQSxJQUFHO0FBQ2xILGFBQVMsa0JBQWtCLEdBQUcsR0FBRztBQUFFLGVBQVMsSUFBSSxHQUFHLElBQUksRUFBRSxRQUFRLEtBQUs7QUFBRSxZQUFJLElBQUksRUFBRSxDQUFDO0FBQUcsVUFBRSxhQUFhLEVBQUUsY0FBYyxPQUFJLEVBQUUsZUFBZSxNQUFJLFdBQVcsTUFBTSxFQUFFLFdBQVcsT0FBSyxPQUFPLGVBQWUsR0FBRyxlQUFlLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFBQSxNQUFHO0FBQUEsSUFBRTtBQUN2TyxhQUFTLGFBQWEsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLEtBQUssa0JBQWtCLEVBQUUsV0FBVyxDQUFDLEdBQUcsS0FBSyxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUc7QUFBQSxJQUFHO0FBQzFLLGFBQVMsZUFBZSxHQUFHO0FBQUUsVUFBSSxJQUFJLGFBQWEsR0FBRyxRQUFRO0FBQUcsYUFBTyxZQUFZLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTtBQUFBLElBQUk7QUFDNUcsYUFBUyxhQUFhLEdBQUcsR0FBRztBQUFFLFVBQUksWUFBWSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUcsUUFBTztBQUFHLFVBQUksSUFBSSxFQUFFLE9BQU8sV0FBVztBQUFHLFVBQUksV0FBVyxHQUFHO0FBQUUsWUFBSSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssU0FBUztBQUFHLFlBQUksWUFBWSxRQUFRLENBQUMsRUFBRyxRQUFPO0FBQUcsY0FBTSxJQUFJLFVBQVUsOENBQThDO0FBQUEsTUFBRztBQUFFLGNBQVEsYUFBYSxJQUFJLFNBQVMsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUMzVCxhQUFTLFdBQVcsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLElBQUksZ0JBQWdCLENBQUMsR0FBRywyQkFBMkIsR0FBRywwQkFBMEIsSUFBSSxRQUFRLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLFdBQVcsSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFBQSxJQUFHO0FBQzFNLGFBQVMsMkJBQTJCLEdBQUcsR0FBRztBQUFFLFVBQUksTUFBTSxZQUFZLFFBQVEsQ0FBQyxLQUFLLGNBQWMsT0FBTyxHQUFJLFFBQU87QUFBRyxVQUFJLFdBQVcsRUFBRyxPQUFNLElBQUksVUFBVSwwREFBMEQ7QUFBRyxhQUFPLHVCQUF1QixDQUFDO0FBQUEsSUFBRztBQUN4UCxhQUFTLHVCQUF1QixHQUFHO0FBQUUsVUFBSSxXQUFXLEVBQUcsT0FBTSxJQUFJLGVBQWUsMkRBQTJEO0FBQUcsYUFBTztBQUFBLElBQUc7QUFDeEosYUFBUyw0QkFBNEI7QUFBRSxVQUFJO0FBQUUsWUFBSSxJQUFJLENBQUMsUUFBUSxVQUFVLFFBQVEsS0FBSyxRQUFRLFVBQVUsU0FBUyxDQUFDLEdBQUcsV0FBWTtBQUFBLFFBQUMsQ0FBQyxDQUFDO0FBQUEsTUFBRyxTQUFTQyxJQUFHO0FBQUEsTUFBQztBQUFFLGNBQVEsNEJBQTRCLFNBQVNDLDZCQUE0QjtBQUFFLGVBQU8sQ0FBQyxDQUFDO0FBQUEsTUFBRyxHQUFHO0FBQUEsSUFBRztBQUNsUCxhQUFTLGdCQUFnQixHQUFHO0FBQUUsYUFBTyxrQkFBa0IsT0FBTyxpQkFBaUIsT0FBTyxlQUFlLEtBQUssSUFBSSxTQUFVRCxJQUFHO0FBQUUsZUFBT0EsR0FBRSxhQUFhLE9BQU8sZUFBZUEsRUFBQztBQUFBLE1BQUcsR0FBRyxnQkFBZ0IsQ0FBQztBQUFBLElBQUc7QUFDcE0sYUFBUyxVQUFVLEdBQUcsR0FBRztBQUFFLFVBQUksY0FBYyxPQUFPLEtBQUssU0FBUyxFQUFHLE9BQU0sSUFBSSxVQUFVLG9EQUFvRDtBQUFHLFFBQUUsWUFBWSxPQUFPLE9BQU8sS0FBSyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxHQUFHLFVBQVUsTUFBSSxjQUFjLEtBQUcsRUFBRSxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUcsS0FBSyxnQkFBZ0IsR0FBRyxDQUFDO0FBQUEsSUFBRztBQUNuVixhQUFTLGdCQUFnQixHQUFHLEdBQUc7QUFBRSxhQUFPLGtCQUFrQixPQUFPLGlCQUFpQixPQUFPLGVBQWUsS0FBSyxJQUFJLFNBQVVBLElBQUdFLElBQUc7QUFBRSxlQUFPRixHQUFFLFlBQVlFLElBQUdGO0FBQUEsTUFBRyxHQUFHLGdCQUFnQixHQUFHLENBQUM7QUFBQSxJQUFHO0FBQ3hMLFFBQUksT0FBTyxRQUFRLE1BQU07QUFDekIsUUFBSSxRQUFRLFFBQVEsT0FBTztBQUMzQixRQUFJLFdBQVc7QUFBZixRQUNFLFNBQVMsU0FBUztBQUNwQixRQUFJLGtCQUFrQjtBQUN0QixRQUFJLFlBQVk7QUFBaEIsUUFDRSxZQUFZLFVBQVU7QUFPeEIsSUFBQUosUUFBTyxVQUF1Qix5QkFBVSxrQkFBa0I7QUFPeEQsZUFBUyxPQUFPO0FBQ2QsWUFBSTtBQUNKLFlBQUksVUFBVSxVQUFVLFNBQVMsS0FBSyxVQUFVLENBQUMsTUFBTSxTQUFZLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDbkYsd0JBQWdCLE1BQU0sSUFBSTtBQUMxQixnQkFBUSxXQUFXLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUN4QyxjQUFNLFVBQVU7QUFDaEIsY0FBTSxPQUFPLFFBQVEsUUFBUTtBQUM3QixjQUFNLE1BQU0sQ0FBQyxDQUFDLFFBQVE7QUFDdEIsY0FBTSxPQUFPLFFBQVEsUUFBUTtBQUM3QixjQUFNLE9BQU8sUUFBUTtBQUNyQixjQUFNLE9BQU8sUUFBUTtBQUNyQixjQUFNLE9BQU8sUUFBUSxRQUFRO0FBQzdCLGNBQU0sZUFBZSxRQUFRO0FBQzdCLGNBQU0sUUFBUSxRQUFRO0FBQ3RCLGNBQU0sVUFBVSxRQUFRLFdBQVcsQ0FBQztBQUNwQyxjQUFNLFFBQVEsY0FBYyxJQUFJO0FBQ2hDLGNBQU0sUUFBUSxRQUFRLFNBQVM7QUFDL0IsY0FBTSxnQkFBZ0IsUUFBUSxpQkFBaUI7QUFDL0MsY0FBTSxhQUFhLFFBQVEsY0FBYztBQUN6QyxjQUFNLGVBQWUsQ0FBQztBQUN0QixjQUFNLGlCQUFpQjtBQUN2QixjQUFNLGdCQUFnQixDQUFDO0FBQ3ZCLFlBQUksQ0FBQyxNQUFNLE1BQU07QUFDZixnQkFBTSxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQUEsUUFDakM7QUFDQSxlQUFPO0FBQUEsTUFDVDtBQVFBLGdCQUFVLE1BQU0sZ0JBQWdCO0FBQ2hDLGFBQU8sYUFBYSxNQUFNLENBQUM7QUFBQSxRQUN6QixLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsSUFBSSxNQUFNLFVBQVU7QUFDbEMsY0FBSSxTQUFTO0FBQ2IsZUFBSyxTQUFTLE1BQU0sTUFBTSxNQUFNLFNBQVUsS0FBSyxLQUFLO0FBQ2xELGdCQUFJLE9BQU8sSUFBSSxlQUFlLEtBQUs7QUFDakMsb0JBQU0sSUFBSSxNQUFNLDZCQUE2QixPQUFPLElBQUksVUFBVSxDQUFDO0FBQUEsWUFDckU7QUFDQSxnQkFBSSxLQUFLO0FBQ1AscUJBQU8sS0FBSyxRQUFRLEdBQUc7QUFBQSxZQUN6QixPQUFPO0FBQ0wscUJBQU8sS0FBSyxVQUFVLElBQUk7QUFBQSxZQUM1QjtBQUFBLFVBQ0YsQ0FBQztBQUlELGNBQUksVUFBVTtBQUNaLHlCQUFhLFFBQVE7QUFBQSxVQUN2QjtBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVFGLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxNQUFNLFNBQVMsVUFBVTtBQUN2QyxjQUFJLE9BQU8sWUFBWSxZQUFZO0FBQ2pDLHVCQUFXO0FBQ1gsc0JBQVUsQ0FBQztBQUFBLFVBQ2I7QUFDQSxvQkFBVTtBQUFBLFlBQ1IsUUFBUTtBQUFBLFlBQ1IsUUFBUSxLQUFLLGVBQWUsT0FBTztBQUFBLFVBQ3JDO0FBQ0EsY0FBSSxPQUFPLFFBQVEsT0FBTyxRQUFRO0FBQ2xDLGlCQUFPLFFBQVEsT0FBTztBQUN0QixjQUFJLE9BQU8sUUFBUSxPQUFPLFFBQVE7QUFDbEMsaUJBQU8sUUFBUSxPQUFPO0FBQ3RCLGVBQUssU0FBUyxTQUFTLE1BQU0sTUFBTSxTQUFVLEtBQUssS0FBSyxNQUFNO0FBQzNELGdCQUFJLE9BQU8sSUFBSSxlQUFlLEtBQUs7QUFDakMsb0JBQU0sSUFBSSxNQUFNLDZCQUE2QixPQUFPLElBQUksVUFBVSxDQUFDO0FBQUEsWUFDckU7QUFDQSxnQkFBSSxLQUFLO0FBQ1AscUJBQU8sU0FBUyxHQUFHO0FBQUEsWUFDckI7QUFDQSxnQkFBSSxPQUFPLFNBQVMsVUFBVTtBQUM1QixrQkFBSTtBQUNGLHVCQUFPLEtBQUssTUFBTSxJQUFJO0FBQUEsY0FDeEIsU0FBUyxHQUFHO0FBQ1YsdUJBQU8sU0FBUyxDQUFDO0FBQUEsY0FDbkI7QUFBQSxZQUNGO0FBQ0EscUJBQVMsTUFBTSxJQUFJO0FBQUEsVUFDckIsQ0FBQztBQUFBLFFBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFPRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsU0FBUztBQUN2QixjQUFJLFVBQVUsVUFBVSxTQUFTLEtBQUssVUFBVSxDQUFDLE1BQU0sU0FBWSxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQ25GLGNBQUlPLFVBQVMsSUFBSSxPQUFPO0FBQ3hCLG9CQUFVO0FBQUEsWUFDUixRQUFRO0FBQUEsWUFDUixRQUFRO0FBQUEsVUFDVjtBQUNBLGNBQUksT0FBTyxRQUFRLE9BQU8sUUFBUTtBQUNsQyxpQkFBTyxRQUFRLE9BQU87QUFDdEIsY0FBSSxPQUFPLFFBQVEsT0FBTyxRQUFRO0FBQ2xDLGlCQUFPLFFBQVEsT0FBTztBQUN0QixjQUFJLE9BQU87QUFDWCxjQUFJLE1BQU0sS0FBSyxTQUFTLFNBQVMsTUFBTSxJQUFJO0FBQzNDLFVBQUFBLFFBQU8sVUFBVSxXQUFZO0FBQzNCLG1CQUFPLElBQUksUUFBUTtBQUFBLFVBQ3JCO0FBQ0EsY0FBSSxHQUFHLFFBQVEsU0FBVSxNQUFNO0FBQzdCLG9CQUFRLE9BQU8sTUFBTSxNQUFNLEtBQUs7QUFDaEMsZ0JBQUlDLEtBQUksS0FBSyxTQUFTO0FBQ3RCLGdCQUFJLElBQUk7QUFDUixtQkFBTyxJQUFJQSxJQUFHLEtBQUs7QUFDakIsa0JBQUk7QUFDRixnQkFBQUQsUUFBTyxLQUFLLE9BQU8sS0FBSyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFBQSxjQUN4QyxTQUFTLEdBQUc7QUFDVixnQkFBQUEsUUFBTyxLQUFLLFNBQVMsQ0FBQztBQUFBLGNBQ3hCO0FBQUEsWUFDRjtBQUNBLG1CQUFPLEtBQUtDLEVBQUM7QUFBQSxVQUNmLENBQUM7QUFDRCxjQUFJLEdBQUcsU0FBUyxTQUFVLEtBQUs7QUFDN0IsbUJBQU9ELFFBQU8sS0FBSyxTQUFTLEdBQUc7QUFBQSxVQUNqQyxDQUFDO0FBQ0QsaUJBQU9BO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVVGLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxTQUFTLFNBQVMsTUFBTSxNQUFNLFVBQVU7QUFDdEQsb0JBQVUsV0FBVyxDQUFDO0FBQ3RCLGlCQUFPLFFBQVEsS0FBSztBQUNwQixpQkFBTyxRQUFRLEtBQUssUUFBUTtBQUM1QixjQUFJLEtBQUssT0FBTztBQUNkLGlCQUFLLFNBQVMsU0FBUyxVQUFVLE1BQU0sSUFBSTtBQUFBLFVBQzdDLE9BQU87QUFDTCxpQkFBSyxXQUFXLFNBQVMsVUFBVSxNQUFNLElBQUk7QUFBQSxVQUMvQztBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BU0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFNBQVMsU0FBUyxVQUFVLE1BQU0sTUFBTTtBQUN0RCxlQUFLLGFBQWEsS0FBSyxPQUFPO0FBQzlCLGNBQUksS0FBSyxhQUFhLFdBQVcsR0FBRztBQUVsQyxnQkFBSSxLQUFLO0FBQ1QsaUJBQUssZ0JBQWdCO0FBQ3JCLGlCQUFLLGlCQUFpQixXQUFXLFdBQVk7QUFFM0MsaUJBQUcsaUJBQWlCO0FBQ3BCLGlCQUFHLGdCQUFnQixHQUFHLGVBQWUsTUFBTSxJQUFJO0FBQUEsWUFDakQsR0FBRyxLQUFLLGFBQWE7QUFBQSxVQUN2QjtBQUNBLGNBQUksS0FBSyxhQUFhLFdBQVcsS0FBSyxZQUFZO0FBRWhELGlCQUFLLGdCQUFnQixLQUFLLGVBQWUsTUFBTSxJQUFJO0FBQUEsVUFDckQ7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFRRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsZ0JBQWdCLFVBQVUsTUFBTSxNQUFNO0FBQ3BELGNBQUksS0FBSyxpQkFBaUIsR0FBRztBQUMzQix5QkFBYSxLQUFLLGNBQWM7QUFDaEMsaUJBQUssaUJBQWlCO0FBQUEsVUFDeEI7QUFDQSxjQUFJLG1CQUFtQixLQUFLLGFBQWEsTUFBTTtBQUMvQyxlQUFLLGVBQWUsQ0FBQztBQUNyQixlQUFLLFdBQVcsa0JBQWtCLFVBQVUsTUFBTSxJQUFJO0FBQUEsUUFDeEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFVRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsV0FBVyxTQUFTLFVBQVUsTUFBTSxNQUFNO0FBRXhELGNBQUksVUFBVSxPQUFPLE9BQU8sQ0FBQyxHQUFHLEtBQUssT0FBTztBQUM1QyxjQUFJLFFBQVEsS0FBSyxRQUFRO0FBQ3ZCLG9CQUFRLGdCQUFnQixVQUFVLE9BQU8sS0FBSyxNQUFNO0FBQUEsVUFDdEQ7QUFDQSxjQUFJLE9BQU8sS0FBSyxNQUFNLFFBQVEsTUFBTSxRQUFRLGNBQWMsY0FBYyxDQUFDLEdBQUcsS0FBSyxPQUFPLEdBQUcsQ0FBQyxHQUFHO0FBQUEsWUFDN0YsUUFBUTtBQUFBLFlBQ1IsTUFBTSxLQUFLO0FBQUEsWUFDWCxNQUFNLEtBQUs7QUFBQSxZQUNYLE1BQU0sSUFBSSxPQUFPLEtBQUssUUFBUSxPQUFPLEVBQUUsQ0FBQztBQUFBLFlBQ3hDO0FBQUEsWUFDQSxNQUFNLFFBQVEsS0FBSyxZQUFZLEtBQUssV0FBVyxHQUFHLE9BQU8sS0FBSyxVQUFVLEdBQUcsRUFBRSxPQUFPLEtBQUssUUFBUSxJQUFJO0FBQUEsWUFDckcsT0FBTyxLQUFLO0FBQUEsVUFDZCxDQUFDLENBQUM7QUFDRixjQUFJLEdBQUcsU0FBUyxRQUFRO0FBQ3hCLGNBQUksR0FBRyxZQUFZLFNBQVUsS0FBSztBQUNoQyxtQkFBTyxJQUFJLEdBQUcsT0FBTyxXQUFZO0FBQy9CLHFCQUFPLFNBQVMsTUFBTSxHQUFHO0FBQUEsWUFDM0IsQ0FBQyxFQUFFLE9BQU87QUFBQSxVQUNaLENBQUM7QUFDRCxjQUFJLGdCQUFnQixVQUFVLGNBQWMsQ0FBQyxHQUFHLEtBQUssZ0JBQWdCO0FBQUEsWUFDbkUsY0FBYyxLQUFLO0FBQUEsVUFDckIsQ0FBQyxDQUFDO0FBQ0YsY0FBSSxJQUFJLE9BQU8sS0FBSyxjQUFjLFNBQVMsS0FBSyxRQUFRLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFBQSxRQUM1RTtBQUFBLE1BQ0YsQ0FBQyxDQUFDO0FBQUEsSUFDSixFQUFFLGVBQWU7QUFBQTtBQUFBOzs7QUMvUmpCO0FBQUEsNkNBQUFFLFNBQUE7QUFBQTtBQUVBLFFBQU0sV0FBVyxZQUNoQixXQUFXLFFBQ1gsT0FBTyxXQUFXLFlBQ2xCLE9BQU8sT0FBTyxTQUFTO0FBRXhCLGFBQVMsV0FBVyxZQUNuQixTQUFTLE1BQU0sS0FDZixPQUFPLGFBQWEsU0FDcEIsT0FBTyxPQUFPLFdBQVcsY0FDekIsT0FBTyxPQUFPLG1CQUFtQjtBQUVsQyxhQUFTLFdBQVcsWUFDbkIsU0FBUyxNQUFNLEtBQ2YsT0FBTyxhQUFhLFNBQ3BCLE9BQU8sT0FBTyxVQUFVLGNBQ3hCLE9BQU8sT0FBTyxtQkFBbUI7QUFFbEMsYUFBUyxTQUFTLFlBQ2pCLFNBQVMsU0FBUyxNQUFNLEtBQ3hCLFNBQVMsU0FBUyxNQUFNO0FBRXpCLGFBQVMsWUFBWSxZQUNwQixTQUFTLE9BQU8sTUFBTSxLQUN0QixPQUFPLE9BQU8sZUFBZTtBQUU5QixJQUFBQSxRQUFPLFVBQVU7QUFBQTtBQUFBOzs7QUMzQmpCO0FBQUEsb0VBQUFDLFNBQUE7QUFBQTtBQVNBLGFBQVMsUUFBUSxHQUFHO0FBQUU7QUFBMkIsYUFBTyxVQUFVLGNBQWMsT0FBTyxVQUFVLFlBQVksT0FBTyxPQUFPLFdBQVcsU0FBVUMsSUFBRztBQUFFLGVBQU8sT0FBT0E7QUFBQSxNQUFHLElBQUksU0FBVUEsSUFBRztBQUFFLGVBQU9BLE1BQUssY0FBYyxPQUFPLFVBQVVBLEdBQUUsZ0JBQWdCLFVBQVVBLE9BQU0sT0FBTyxZQUFZLFdBQVcsT0FBT0E7QUFBQSxNQUFHLEdBQUcsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUM3VCxhQUFTLGdCQUFnQixHQUFHQyxJQUFHO0FBQUUsVUFBSSxFQUFFLGFBQWFBLElBQUksT0FBTSxJQUFJLFVBQVUsbUNBQW1DO0FBQUEsSUFBRztBQUNsSCxhQUFTLGtCQUFrQixHQUFHLEdBQUc7QUFBRSxlQUFTLElBQUksR0FBRyxJQUFJLEVBQUUsUUFBUSxLQUFLO0FBQUUsWUFBSSxJQUFJLEVBQUUsQ0FBQztBQUFHLFVBQUUsYUFBYSxFQUFFLGNBQWMsT0FBSSxFQUFFLGVBQWUsTUFBSSxXQUFXLE1BQU0sRUFBRSxXQUFXLE9BQUssT0FBTyxlQUFlLEdBQUcsZUFBZSxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQUEsTUFBRztBQUFBLElBQUU7QUFDdk8sYUFBUyxhQUFhLEdBQUcsR0FBRyxHQUFHO0FBQUUsYUFBTyxLQUFLLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxHQUFHLEtBQUssa0JBQWtCLEdBQUcsQ0FBQyxHQUFHLE9BQU8sZUFBZSxHQUFHLGFBQWEsRUFBRSxVQUFVLE1BQUcsQ0FBQyxHQUFHO0FBQUEsSUFBRztBQUMxSyxhQUFTLGVBQWUsR0FBRztBQUFFLFVBQUksSUFBSSxhQUFhLEdBQUcsUUFBUTtBQUFHLGFBQU8sWUFBWSxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUk7QUFBQSxJQUFJO0FBQzVHLGFBQVMsYUFBYSxHQUFHLEdBQUc7QUFBRSxVQUFJLFlBQVksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFHLFFBQU87QUFBRyxVQUFJLElBQUksRUFBRSxPQUFPLFdBQVc7QUFBRyxVQUFJLFdBQVcsR0FBRztBQUFFLFlBQUksSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLFNBQVM7QUFBRyxZQUFJLFlBQVksUUFBUSxDQUFDLEVBQUcsUUFBTztBQUFHLGNBQU0sSUFBSSxVQUFVLDhDQUE4QztBQUFBLE1BQUc7QUFBRSxjQUFRLGFBQWEsSUFBSSxTQUFTLFFBQVEsQ0FBQztBQUFBLElBQUc7QUFDM1QsYUFBUyxXQUFXLEdBQUcsR0FBRyxHQUFHO0FBQUUsYUFBTyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCLElBQUksUUFBUSxVQUFVLEdBQUcsS0FBSyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxXQUFXLElBQUksRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFBRztBQUMxTSxhQUFTLDJCQUEyQixHQUFHLEdBQUc7QUFBRSxVQUFJLE1BQU0sWUFBWSxRQUFRLENBQUMsS0FBSyxjQUFjLE9BQU8sR0FBSSxRQUFPO0FBQUcsVUFBSSxXQUFXLEVBQUcsT0FBTSxJQUFJLFVBQVUsMERBQTBEO0FBQUcsYUFBTyx1QkFBdUIsQ0FBQztBQUFBLElBQUc7QUFDeFAsYUFBUyx1QkFBdUIsR0FBRztBQUFFLFVBQUksV0FBVyxFQUFHLE9BQU0sSUFBSSxlQUFlLDJEQUEyRDtBQUFHLGFBQU87QUFBQSxJQUFHO0FBQ3hKLGFBQVMsNEJBQTRCO0FBQUUsVUFBSTtBQUFFLFlBQUksSUFBSSxDQUFDLFFBQVEsVUFBVSxRQUFRLEtBQUssUUFBUSxVQUFVLFNBQVMsQ0FBQyxHQUFHLFdBQVk7QUFBQSxRQUFDLENBQUMsQ0FBQztBQUFBLE1BQUcsU0FBU0MsSUFBRztBQUFBLE1BQUM7QUFBRSxjQUFRLDRCQUE0QixTQUFTQyw2QkFBNEI7QUFBRSxlQUFPLENBQUMsQ0FBQztBQUFBLE1BQUcsR0FBRztBQUFBLElBQUc7QUFDbFAsYUFBUyxnQkFBZ0IsR0FBRztBQUFFLGFBQU8sa0JBQWtCLE9BQU8saUJBQWlCLE9BQU8sZUFBZSxLQUFLLElBQUksU0FBVUQsSUFBRztBQUFFLGVBQU9BLEdBQUUsYUFBYSxPQUFPLGVBQWVBLEVBQUM7QUFBQSxNQUFHLEdBQUcsZ0JBQWdCLENBQUM7QUFBQSxJQUFHO0FBQ3BNLGFBQVMsVUFBVSxHQUFHLEdBQUc7QUFBRSxVQUFJLGNBQWMsT0FBTyxLQUFLLFNBQVMsRUFBRyxPQUFNLElBQUksVUFBVSxvREFBb0Q7QUFBRyxRQUFFLFlBQVksT0FBTyxPQUFPLEtBQUssRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE9BQU8sR0FBRyxVQUFVLE1BQUksY0FBYyxLQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU8sZUFBZSxHQUFHLGFBQWEsRUFBRSxVQUFVLE1BQUcsQ0FBQyxHQUFHLEtBQUssZ0JBQWdCLEdBQUcsQ0FBQztBQUFBLElBQUc7QUFDblYsYUFBUyxnQkFBZ0IsR0FBRyxHQUFHO0FBQUUsYUFBTyxrQkFBa0IsT0FBTyxpQkFBaUIsT0FBTyxlQUFlLEtBQUssSUFBSSxTQUFVQSxJQUFHRSxJQUFHO0FBQUUsZUFBT0YsR0FBRSxZQUFZRSxJQUFHRjtBQUFBLE1BQUcsR0FBRyxnQkFBZ0IsR0FBRyxDQUFDO0FBQUEsSUFBRztBQUN4TCxRQUFJLFdBQVc7QUFDZixRQUFJLFdBQVc7QUFBZixRQUNFLFVBQVUsU0FBUztBQUNyQixRQUFJLEtBQUssUUFBUSxJQUFJO0FBQ3JCLFFBQUksa0JBQWtCO0FBT3RCLElBQUFILFFBQU8sVUFBdUIseUJBQVUsa0JBQWtCO0FBTXhELGVBQVMsU0FBUztBQUNoQixZQUFJO0FBQ0osWUFBSSxVQUFVLFVBQVUsU0FBUyxLQUFLLFVBQVUsQ0FBQyxNQUFNLFNBQVksVUFBVSxDQUFDLElBQUksQ0FBQztBQUNuRix3QkFBZ0IsTUFBTSxNQUFNO0FBQzVCLGdCQUFRLFdBQVcsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDO0FBQzFDLFlBQUksQ0FBQyxRQUFRLFVBQVUsQ0FBQyxTQUFTLFFBQVEsTUFBTSxHQUFHO0FBQ2hELGdCQUFNLElBQUksTUFBTSw2QkFBNkI7QUFBQSxRQUMvQztBQUlBLGNBQU0sVUFBVSxRQUFRO0FBQ3hCLGNBQU0sUUFBUSxnQkFBZ0IsUUFBUTtBQUN0QyxjQUFNLGVBQWUsUUFBUSxPQUFPLGVBQWU7QUFDbkQsY0FBTSxNQUFNLE9BQU8sUUFBUSxRQUFRLFdBQVcsUUFBUSxNQUFNLEdBQUc7QUFDL0QsZUFBTztBQUFBLE1BQ1Q7QUFRQSxnQkFBVSxRQUFRLGdCQUFnQjtBQUNsQyxhQUFPLGFBQWEsUUFBUSxDQUFDO0FBQUEsUUFDM0IsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLElBQUksTUFBTSxVQUFVO0FBQ2xDLGNBQUksU0FBUztBQUNiLHVCQUFhLFdBQVk7QUFDdkIsbUJBQU8sT0FBTyxLQUFLLFVBQVUsSUFBSTtBQUFBLFVBQ25DLENBQUM7QUFDRCxjQUFJLEtBQUssY0FBYztBQUNyQixpQkFBSyxRQUFRLE1BQU0sSUFBSTtBQUN2QixnQkFBSSxVQUFVO0FBQ1osdUJBQVM7QUFBQSxZQUNYO0FBQ0E7QUFBQSxVQUNGO0FBQ0EsZUFBSyxRQUFRLE1BQU0sR0FBRyxPQUFPLEtBQUssT0FBTyxDQUFDLEVBQUUsT0FBTyxLQUFLLEdBQUcsQ0FBQztBQUM1RCxjQUFJLFVBQVU7QUFDWixxQkFBUztBQUFBLFVBQ1g7QUFDQTtBQUFBLFFBQ0Y7QUFBQSxNQUNGLENBQUMsQ0FBQztBQUFBLElBQ0osRUFBRSxlQUFlO0FBQUE7QUFBQTs7O0FDckZqQjtBQUFBO0FBQUE7QUFhQSxXQUFPLGVBQWUsU0FBUyxXQUFXO0FBQUEsTUFDeEMsY0FBYztBQUFBLE1BQ2QsWUFBWTtBQUFBLE1BQ1osS0FBSyxTQUFTLE1BQU07QUFDbEIsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGLENBQUM7QUFNRCxXQUFPLGVBQWUsU0FBUyxRQUFRO0FBQUEsTUFDckMsY0FBYztBQUFBLE1BQ2QsWUFBWTtBQUFBLE1BQ1osS0FBSyxTQUFTLE1BQU07QUFDbEIsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGLENBQUM7QUFNRCxXQUFPLGVBQWUsU0FBUyxRQUFRO0FBQUEsTUFDckMsY0FBYztBQUFBLE1BQ2QsWUFBWTtBQUFBLE1BQ1osS0FBSyxTQUFTLE1BQU07QUFDbEIsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGLENBQUM7QUFNRCxXQUFPLGVBQWUsU0FBUyxVQUFVO0FBQUEsTUFDdkMsY0FBYztBQUFBLE1BQ2QsWUFBWTtBQUFBLE1BQ1osS0FBSyxTQUFTLE1BQU07QUFDbEIsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGLENBQUM7QUFBQTtBQUFBOzs7QUN2REQsSUFBQU0sa0JBQUE7QUFBQTtBQUFBO0FBU0EsUUFBSSxVQUFVO0FBQ2QsUUFBSSxXQUFXO0FBQWYsUUFDRSxVQUFVLFNBQVM7QUFNckIsWUFBUSxNQUFNLFFBQVEsT0FBTyxRQUFRLEdBQUc7QUFNeEMsWUFBUSxNQUFNLFFBQVEsT0FBTyxRQUFRLEdBQUc7QUFNeEMsWUFBUSxTQUFTLFFBQVEsT0FBTyxRQUFRLE1BQU07QUFNOUMsWUFBUSxZQUFZLFFBQVE7QUFBQTtBQUFBOzs7QUNuQzVCO0FBQUEsMENBQUFDLFNBQUE7QUFBQTtBQUVBLFdBQU8sZUFBZSxTQUFTLGNBQWM7QUFBQSxNQUN6QyxPQUFPO0FBQUEsSUFDWCxDQUFDO0FBRUQsUUFBSSxlQUFlO0FBRW5CLFFBQUksZ0JBQWdCLHVCQUF1QixZQUFZO0FBRXZELFFBQUksYUFBYTtBQUVqQixRQUFJLGNBQWMsdUJBQXVCLFVBQVU7QUFFbkQsUUFBSSxlQUFlO0FBRW5CLFFBQUksZ0JBQWdCLHVCQUF1QixZQUFZO0FBRXZELFFBQUksUUFBUTtBQUVaLFFBQUksU0FBUyx1QkFBdUIsS0FBSztBQUV6QyxRQUFJLFlBQVk7QUFFaEIsUUFBSSxhQUFhLHVCQUF1QixTQUFTO0FBRWpELFFBQUksYUFBYTtBQUVqQixRQUFJLGNBQWMsdUJBQXVCLFVBQVU7QUFFbkQsUUFBSSxZQUFZO0FBRWhCLFFBQUksYUFBYSx1QkFBdUIsU0FBUztBQUVqRCxhQUFTLHVCQUF1QixLQUFLO0FBQUUsYUFBTyxPQUFPLElBQUksYUFBYSxNQUFNLEVBQUUsU0FBUyxJQUFJO0FBQUEsSUFBRztBQUc5RixhQUFTLGdCQUFnQixNQUFNLFVBQVUsVUFBVTtBQUMvQyxrQkFBWSxHQUFHLE9BQU8sU0FBUyxRQUFRO0FBQ3ZDLFVBQUksUUFBUSxHQUNSLFlBQVksR0FDWixFQUFFLE9BQU8sSUFBSSxNQUNiLFdBQVc7QUFDZixVQUFJLFdBQVcsR0FBRztBQUNkLGlCQUFTLElBQUk7QUFBQSxNQUNqQjtBQUVBLGVBQVMsaUJBQWlCLEtBQUssT0FBTztBQUNsQyxZQUFJLFFBQVEsT0FBTztBQUNmLHFCQUFXO0FBQUEsUUFDZjtBQUNBLFlBQUksYUFBYSxLQUFNO0FBQ3ZCLFlBQUksS0FBSztBQUNMLG1CQUFTLEdBQUc7QUFBQSxRQUNoQixXQUFXLEVBQUUsY0FBYyxVQUFVLFVBQVUsWUFBWSxTQUFTO0FBQ2hFLG1CQUFTLElBQUk7QUFBQSxRQUNqQjtBQUFBLE1BQ0o7QUFFQSxhQUFPLFFBQVEsUUFBUSxTQUFTO0FBQzVCLGlCQUFTLEtBQUssS0FBSyxHQUFHLFFBQVEsR0FBRyxXQUFXLFNBQVMsZ0JBQWdCLENBQUM7QUFBQSxNQUMxRTtBQUFBLElBQ0o7QUFHQSxhQUFTLGNBQWMsTUFBTSxVQUFVLFVBQVU7QUFDN0MsY0FBUSxHQUFHLGNBQWMsU0FBUyxNQUFNLFVBQVUsVUFBVSxRQUFRO0FBQUEsSUFDeEU7QUErR0EsYUFBUyxPQUFPLE1BQU0sVUFBVSxVQUFVO0FBQ3RDLFVBQUksd0JBQXdCLEdBQUcsY0FBYyxTQUFTLElBQUksSUFBSSxrQkFBa0I7QUFDaEYsYUFBTyxxQkFBcUIsT0FBTyxHQUFHLFlBQVksU0FBUyxRQUFRLEdBQUcsUUFBUTtBQUFBLElBQ2xGO0FBRUEsWUFBUSxXQUFXLEdBQUcsV0FBVyxTQUFTLFFBQVEsQ0FBQztBQUNuRCxJQUFBQSxRQUFPLFVBQVUsUUFBUTtBQUFBO0FBQUE7OztBQ3hMekI7QUFBQSx5REFBQUMsU0FBQTtBQUFBO0FBRUEsV0FBTyxlQUFlLFNBQVMsY0FBYztBQUFBLE1BQ3pDLE9BQU87QUFBQSxJQUNYLENBQUM7QUFDRCxZQUFRLFVBQVU7QUFDbEIsYUFBUyxjQUFjLFVBQVU7QUFDN0IsYUFBTyxDQUFDLE9BQU8sT0FBTyxhQUFhLFNBQVMsT0FBTyxRQUFRO0FBQUEsSUFDL0Q7QUFDQSxJQUFBQSxRQUFPLFVBQVUsUUFBUTtBQUFBO0FBQUE7OztBQ1R6QjtBQUFBLDJDQUFBQyxTQUFBO0FBQUE7QUFFQSxXQUFPLGVBQWUsU0FBUyxjQUFjO0FBQUEsTUFDekMsT0FBTztBQUFBLElBQ1gsQ0FBQztBQUVELFFBQUksVUFBVTtBQUVkLFFBQUksV0FBVyx1QkFBdUIsT0FBTztBQUU3QyxRQUFJLGdCQUFnQjtBQUVwQixRQUFJLGlCQUFpQix1QkFBdUIsYUFBYTtBQUV6RCxRQUFJLGFBQWE7QUFFakIsUUFBSSxjQUFjLHVCQUF1QixVQUFVO0FBRW5ELFFBQUksWUFBWTtBQUVoQixRQUFJLGFBQWEsdUJBQXVCLFNBQVM7QUFFakQsYUFBUyx1QkFBdUIsS0FBSztBQUFFLGFBQU8sT0FBTyxJQUFJLGFBQWEsTUFBTSxFQUFFLFNBQVMsSUFBSTtBQUFBLElBQUc7QUFxRzlGLGFBQVMsVUFBVSxNQUFNLFVBQVUsVUFBVTtBQUN6QyxjQUFRLEdBQUcsU0FBUyxTQUFTLE9BQU8sR0FBRyxlQUFlLFVBQVUsR0FBRyxZQUFZLFNBQVMsUUFBUSxDQUFDLEdBQUcsUUFBUTtBQUFBLElBQ2hIO0FBRUEsWUFBUSxXQUFXLEdBQUcsV0FBVyxTQUFTLFdBQVcsQ0FBQztBQUN0RCxJQUFBQSxRQUFPLFVBQVUsUUFBUTtBQUFBO0FBQUE7OztBQ2hJekI7QUFBQSwyQ0FBQUMsU0FBQTtBQUFBO0FBRUEsUUFBSSxXQUFXLE9BQU8sVUFBVTtBQVNoQyxJQUFBQSxRQUFPLFVBQVUsU0FBUyxLQUFLLElBQUk7QUFDakMsVUFBSSxhQUFhLE9BQU8sR0FBRyxlQUFlLEdBQUcsWUFBWSxNQUFNO0FBQzdELGVBQU8sR0FBRztBQUFBLE1BQ1osV0FBVyxhQUFhLE9BQU8sR0FBRyxRQUFRLEdBQUcsTUFBTTtBQUNqRCxlQUFPLEdBQUc7QUFBQSxNQUNaO0FBS0EsVUFDSyxhQUFhLE9BQU8sTUFDcEIsR0FBRyxlQUNILGFBQWEsT0FBTyxHQUFHLFlBQVksS0FDdEMsUUFBTyxHQUFHLFlBQVk7QUFNeEIsVUFBSSxRQUFRLEdBQUcsU0FBUyxHQUNwQixPQUFPLFNBQVMsS0FBSyxFQUFFLEVBQUUsTUFBTSxHQUFHLEVBQUU7QUFFeEMsVUFBSSxlQUFlLE1BQU07QUFDdkIsZ0JBQVEsTUFBTSxVQUFVLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxNQUFNLFFBQVEsR0FBRyxDQUFDO0FBQUEsTUFDcEUsT0FBTztBQUNMLGdCQUFRO0FBQUEsTUFDVjtBQUVBLGFBQU8sU0FBUztBQUFBLElBQ2xCO0FBQUE7QUFBQTs7O0FDekNBO0FBQUEsNENBQUFDLFNBQUE7QUFBQTtBQUVBLFFBQUksT0FBTztBQVNYLElBQUFBLFFBQU8sVUFBVSxTQUFTLElBQUksSUFBSTtBQUNoQyxVQUFJLFNBQVMsR0FDVDtBQU9KLGVBQVMsVUFBVTtBQUNqQixZQUFJLE9BQVEsUUFBTztBQUVuQixpQkFBUztBQUNULGdCQUFRLEdBQUcsTUFBTSxNQUFNLFNBQVM7QUFDaEMsYUFBSztBQUVMLGVBQU87QUFBQSxNQUNUO0FBV0EsY0FBUSxjQUFjLEtBQUssRUFBRTtBQUM3QixhQUFPO0FBQUEsSUFDVDtBQUFBO0FBQUE7OztBQ3pDQTtBQUFBO0FBQUEsWUFBUSxNQUFNLFNBQVMsU0FBUztBQUM5QixVQUFJLFdBQVcsTUFBTTtBQUNyQixZQUFNLGtCQUFrQjtBQUV4QixVQUFJLGNBQWMsQ0FBQztBQUVuQixVQUFJLFlBQVksTUFBTTtBQUN0QixZQUFNLG9CQUFvQixTQUFTQyxjQUFhQyxlQUFjO0FBQzVELGVBQU9BO0FBQUEsTUFDVDtBQUNBLFlBQU0sa0JBQWtCLGFBQWEsV0FBVyxRQUFRLEdBQUc7QUFFM0QsVUFBSSxlQUFlLFlBQVk7QUFDL0IsWUFBTSxvQkFBb0I7QUFDMUIsWUFBTSxrQkFBa0I7QUFFeEIsYUFBTztBQUFBLElBQ1Q7QUFFQSxZQUFRLFFBQVEsU0FBUyxLQUFLO0FBQzVCLFVBQUksQ0FBQyxJQUFJLE9BQU87QUFDZCxlQUFPLENBQUM7QUFBQSxNQUNWO0FBRUEsVUFBSUMsUUFBTztBQUNYLFVBQUksUUFBUSxJQUFJLE1BQU0sTUFBTSxJQUFJLEVBQUUsTUFBTSxDQUFDO0FBRXpDLGFBQU8sTUFDSixJQUFJLFNBQVMsTUFBTTtBQUNsQixZQUFJLEtBQUssTUFBTSxjQUFjLEdBQUc7QUFDOUIsaUJBQU9BLE1BQUssc0JBQXNCO0FBQUEsWUFDaEMsVUFBVTtBQUFBLFlBQ1YsWUFBWTtBQUFBLFlBQ1osY0FBYztBQUFBLFlBQ2QsVUFBVTtBQUFBLFlBQ1YsWUFBWTtBQUFBLFlBQ1osY0FBYztBQUFBLFlBQ2QsVUFBVTtBQUFBLFVBQ1osQ0FBQztBQUFBLFFBQ0g7QUFFQSxZQUFJLFlBQVksS0FBSyxNQUFNLHdEQUF3RDtBQUNuRixZQUFJLENBQUMsV0FBVztBQUNkO0FBQUEsUUFDRjtBQUVBLFlBQUksU0FBUztBQUNiLFlBQUksU0FBUztBQUNiLFlBQUksZUFBZTtBQUNuQixZQUFJLFdBQVc7QUFDZixZQUFJLGFBQWE7QUFDakIsWUFBSSxXQUFZLFVBQVUsQ0FBQyxNQUFNO0FBRWpDLFlBQUksVUFBVSxDQUFDLEdBQUc7QUFDaEIseUJBQWUsVUFBVSxDQUFDO0FBQzFCLGNBQUksY0FBYyxhQUFhLFlBQVksR0FBRztBQUM5QyxjQUFJLGFBQWEsY0FBWSxDQUFDLEtBQUs7QUFDakM7QUFDRixjQUFJLGNBQWMsR0FBRztBQUNuQixxQkFBUyxhQUFhLE9BQU8sR0FBRyxXQUFXO0FBQzNDLHFCQUFTLGFBQWEsT0FBTyxjQUFjLENBQUM7QUFDNUMsZ0JBQUksWUFBWSxPQUFPLFFBQVEsU0FBUztBQUN4QyxnQkFBSSxZQUFZLEdBQUc7QUFDakIsNkJBQWUsYUFBYSxPQUFPLFlBQVksQ0FBQztBQUNoRCx1QkFBUyxPQUFPLE9BQU8sR0FBRyxTQUFTO0FBQUEsWUFDckM7QUFBQSxVQUNGO0FBQ0EscUJBQVc7QUFBQSxRQUNiO0FBRUEsWUFBSSxRQUFRO0FBQ1YscUJBQVc7QUFDWCx1QkFBYTtBQUFBLFFBQ2Y7QUFFQSxZQUFJLFdBQVcsZUFBZTtBQUM1Qix1QkFBYTtBQUNiLHlCQUFlO0FBQUEsUUFDakI7QUFFQSxZQUFJLGFBQWE7QUFBQSxVQUNmLFVBQVUsVUFBVSxDQUFDLEtBQUs7QUFBQSxVQUMxQixZQUFZLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLO0FBQUEsVUFDMUM7QUFBQSxVQUNBO0FBQUEsVUFDQTtBQUFBLFVBQ0EsY0FBYyxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSztBQUFBLFVBQzVDLFVBQVU7QUFBQSxRQUNaO0FBRUEsZUFBT0EsTUFBSyxzQkFBc0IsVUFBVTtBQUFBLE1BQzlDLENBQUMsRUFDQSxPQUFPLFNBQVMsVUFBVTtBQUN6QixlQUFPLENBQUMsQ0FBQztBQUFBLE1BQ1gsQ0FBQztBQUFBLElBQ0w7QUFFQSxhQUFTLFNBQVMsWUFBWTtBQUM1QixlQUFTLFlBQVksWUFBWTtBQUMvQixhQUFLLFFBQVEsSUFBSSxXQUFXLFFBQVE7QUFBQSxNQUN0QztBQUFBLElBQ0Y7QUFFQSxRQUFJLGdCQUFnQjtBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0EsUUFBSSxpQkFBaUI7QUFBQSxNQUNuQjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQSxrQkFBYyxRQUFRLFNBQVUsVUFBVTtBQUN4QyxlQUFTLFVBQVUsUUFBUSxJQUFJO0FBQy9CLGVBQVMsVUFBVSxRQUFRLFNBQVMsQ0FBQyxFQUFFLFlBQVksSUFBSSxTQUFTLE9BQU8sQ0FBQyxDQUFDLElBQUksV0FBWTtBQUN2RixlQUFPLEtBQUssUUFBUTtBQUFBLE1BQ3RCO0FBQUEsSUFDRixDQUFDO0FBQ0QsbUJBQWUsUUFBUSxTQUFVLFVBQVU7QUFDekMsZUFBUyxVQUFVLFFBQVEsSUFBSTtBQUMvQixlQUFTLFVBQVUsT0FBTyxTQUFTLENBQUMsRUFBRSxZQUFZLElBQUksU0FBUyxPQUFPLENBQUMsQ0FBQyxJQUFJLFdBQVk7QUFDdEYsZUFBTyxLQUFLLFFBQVE7QUFBQSxNQUN0QjtBQUFBLElBQ0YsQ0FBQztBQUVELFlBQVEsd0JBQXdCLFNBQVMsWUFBWTtBQUNuRCxhQUFPLElBQUksU0FBUyxVQUFVO0FBQUEsSUFDaEM7QUFBQTtBQUFBOzs7QUN2SUE7QUFBQSxtRUFBQUMsU0FBQTtBQUFBO0FBU0EsYUFBUyxRQUFRLEdBQUc7QUFBRTtBQUEyQixhQUFPLFVBQVUsY0FBYyxPQUFPLFVBQVUsWUFBWSxPQUFPLE9BQU8sV0FBVyxTQUFVQyxJQUFHO0FBQUUsZUFBTyxPQUFPQTtBQUFBLE1BQUcsSUFBSSxTQUFVQSxJQUFHO0FBQUUsZUFBT0EsTUFBSyxjQUFjLE9BQU8sVUFBVUEsR0FBRSxnQkFBZ0IsVUFBVUEsT0FBTSxPQUFPLFlBQVksV0FBVyxPQUFPQTtBQUFBLE1BQUcsR0FBRyxRQUFRLENBQUM7QUFBQSxJQUFHO0FBQzdULGFBQVMsZ0JBQWdCLEdBQUdDLElBQUc7QUFBRSxVQUFJLEVBQUUsYUFBYUEsSUFBSSxPQUFNLElBQUksVUFBVSxtQ0FBbUM7QUFBQSxJQUFHO0FBQ2xILGFBQVMsa0JBQWtCLEdBQUcsR0FBRztBQUFFLGVBQVMsSUFBSSxHQUFHLElBQUksRUFBRSxRQUFRLEtBQUs7QUFBRSxZQUFJLElBQUksRUFBRSxDQUFDO0FBQUcsVUFBRSxhQUFhLEVBQUUsY0FBYyxPQUFJLEVBQUUsZUFBZSxNQUFJLFdBQVcsTUFBTSxFQUFFLFdBQVcsT0FBSyxPQUFPLGVBQWUsR0FBRyxlQUFlLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFBQSxNQUFHO0FBQUEsSUFBRTtBQUN2TyxhQUFTLGFBQWEsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLEtBQUssa0JBQWtCLEVBQUUsV0FBVyxDQUFDLEdBQUcsS0FBSyxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUc7QUFBQSxJQUFHO0FBQzFLLGFBQVMsZUFBZSxHQUFHO0FBQUUsVUFBSSxJQUFJLGFBQWEsR0FBRyxRQUFRO0FBQUcsYUFBTyxZQUFZLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTtBQUFBLElBQUk7QUFDNUcsYUFBUyxhQUFhLEdBQUcsR0FBRztBQUFFLFVBQUksWUFBWSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUcsUUFBTztBQUFHLFVBQUksSUFBSSxFQUFFLE9BQU8sV0FBVztBQUFHLFVBQUksV0FBVyxHQUFHO0FBQUUsWUFBSSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssU0FBUztBQUFHLFlBQUksWUFBWSxRQUFRLENBQUMsRUFBRyxRQUFPO0FBQUcsY0FBTSxJQUFJLFVBQVUsOENBQThDO0FBQUEsTUFBRztBQUFFLGNBQVEsYUFBYSxJQUFJLFNBQVMsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUMzVCxhQUFTLFdBQVcsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLElBQUksZ0JBQWdCLENBQUMsR0FBRywyQkFBMkIsR0FBRywwQkFBMEIsSUFBSSxRQUFRLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLFdBQVcsSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFBQSxJQUFHO0FBQzFNLGFBQVMsMkJBQTJCLEdBQUcsR0FBRztBQUFFLFVBQUksTUFBTSxZQUFZLFFBQVEsQ0FBQyxLQUFLLGNBQWMsT0FBTyxHQUFJLFFBQU87QUFBRyxVQUFJLFdBQVcsRUFBRyxPQUFNLElBQUksVUFBVSwwREFBMEQ7QUFBRyxhQUFPLHVCQUF1QixDQUFDO0FBQUEsSUFBRztBQUN4UCxhQUFTLHVCQUF1QixHQUFHO0FBQUUsVUFBSSxXQUFXLEVBQUcsT0FBTSxJQUFJLGVBQWUsMkRBQTJEO0FBQUcsYUFBTztBQUFBLElBQUc7QUFDeEosYUFBUyw0QkFBNEI7QUFBRSxVQUFJO0FBQUUsWUFBSSxJQUFJLENBQUMsUUFBUSxVQUFVLFFBQVEsS0FBSyxRQUFRLFVBQVUsU0FBUyxDQUFDLEdBQUcsV0FBWTtBQUFBLFFBQUMsQ0FBQyxDQUFDO0FBQUEsTUFBRyxTQUFTQyxJQUFHO0FBQUEsTUFBQztBQUFFLGNBQVEsNEJBQTRCLFNBQVNDLDZCQUE0QjtBQUFFLGVBQU8sQ0FBQyxDQUFDO0FBQUEsTUFBRyxHQUFHO0FBQUEsSUFBRztBQUNsUCxhQUFTLGdCQUFnQixHQUFHO0FBQUUsYUFBTyxrQkFBa0IsT0FBTyxpQkFBaUIsT0FBTyxlQUFlLEtBQUssSUFBSSxTQUFVRCxJQUFHO0FBQUUsZUFBT0EsR0FBRSxhQUFhLE9BQU8sZUFBZUEsRUFBQztBQUFBLE1BQUcsR0FBRyxnQkFBZ0IsQ0FBQztBQUFBLElBQUc7QUFDcE0sYUFBUyxVQUFVLEdBQUcsR0FBRztBQUFFLFVBQUksY0FBYyxPQUFPLEtBQUssU0FBUyxFQUFHLE9BQU0sSUFBSSxVQUFVLG9EQUFvRDtBQUFHLFFBQUUsWUFBWSxPQUFPLE9BQU8sS0FBSyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxHQUFHLFVBQVUsTUFBSSxjQUFjLEtBQUcsRUFBRSxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUcsS0FBSyxnQkFBZ0IsR0FBRyxDQUFDO0FBQUEsSUFBRztBQUNuVixhQUFTLGdCQUFnQixHQUFHLEdBQUc7QUFBRSxhQUFPLGtCQUFrQixPQUFPLGlCQUFpQixPQUFPLGVBQWUsS0FBSyxJQUFJLFNBQVVBLElBQUdFLElBQUc7QUFBRSxlQUFPRixHQUFFLFlBQVlFLElBQUdGO0FBQUEsTUFBRyxHQUFHLGdCQUFnQixHQUFHLENBQUM7QUFBQSxJQUFHO0FBQ3hMLFFBQUksV0FBVztBQUFmLFFBQ0UsV0FBVyxTQUFTO0FBT3RCLElBQUFILFFBQU8sVUFBdUIseUJBQVUsV0FBVztBQU9qRCxlQUFTLGdCQUFnQixXQUFXO0FBQ2xDLFlBQUk7QUFDSix3QkFBZ0IsTUFBTSxlQUFlO0FBQ3JDLGdCQUFRLFdBQVcsTUFBTSxpQkFBaUIsQ0FBQztBQUFBLFVBQ3pDLFlBQVk7QUFBQSxRQUNkLENBQUMsQ0FBQztBQUNGLFlBQUksQ0FBQyxXQUFXO0FBQ2QsZ0JBQU0sSUFBSSxNQUFNLHNEQUFzRDtBQUFBLFFBQ3hFO0FBSUEsY0FBTSxtQkFBbUI7QUFDekIsY0FBTSxZQUFZO0FBQ2xCLGVBQU87QUFBQSxNQUNUO0FBV0EsZ0JBQVUsaUJBQWlCLFNBQVM7QUFDcEMsYUFBTyxhQUFhLGlCQUFpQixDQUFDO0FBQUEsUUFDcEMsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLE9BQU8sTUFBTSxLQUFLLFVBQVU7QUFDMUMsY0FBSSxLQUFLLFdBQVc7QUFDbEIsbUJBQU8sS0FBSyxVQUFVLElBQUksTUFBTSxRQUFRO0FBQUEsVUFDMUM7QUFDQSxtQkFBUztBQUNULGlCQUFPO0FBQUEsUUFDVDtBQUFBLE1BQ0YsQ0FBQyxDQUFDO0FBQUEsSUFDSixFQUFFLFFBQVE7QUFBQTtBQUFBOzs7QUMxRVY7QUFBQSxvRUFBQU0sU0FBQTtBQUFBO0FBU0EsYUFBUyxRQUFRLEdBQUc7QUFBRTtBQUEyQixhQUFPLFVBQVUsY0FBYyxPQUFPLFVBQVUsWUFBWSxPQUFPLE9BQU8sV0FBVyxTQUFVQyxJQUFHO0FBQUUsZUFBTyxPQUFPQTtBQUFBLE1BQUcsSUFBSSxTQUFVQSxJQUFHO0FBQUUsZUFBT0EsTUFBSyxjQUFjLE9BQU8sVUFBVUEsR0FBRSxnQkFBZ0IsVUFBVUEsT0FBTSxPQUFPLFlBQVksV0FBVyxPQUFPQTtBQUFBLE1BQUcsR0FBRyxRQUFRLENBQUM7QUFBQSxJQUFHO0FBQzdULGFBQVMsZ0JBQWdCLEdBQUdDLElBQUc7QUFBRSxVQUFJLEVBQUUsYUFBYUEsSUFBSSxPQUFNLElBQUksVUFBVSxtQ0FBbUM7QUFBQSxJQUFHO0FBQ2xILGFBQVMsa0JBQWtCLEdBQUcsR0FBRztBQUFFLGVBQVMsSUFBSSxHQUFHLElBQUksRUFBRSxRQUFRLEtBQUs7QUFBRSxZQUFJLElBQUksRUFBRSxDQUFDO0FBQUcsVUFBRSxhQUFhLEVBQUUsY0FBYyxPQUFJLEVBQUUsZUFBZSxNQUFJLFdBQVcsTUFBTSxFQUFFLFdBQVcsT0FBSyxPQUFPLGVBQWUsR0FBRyxlQUFlLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFBQSxNQUFHO0FBQUEsSUFBRTtBQUN2TyxhQUFTLGFBQWEsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLEtBQUssa0JBQWtCLEVBQUUsV0FBVyxDQUFDLEdBQUcsS0FBSyxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUc7QUFBQSxJQUFHO0FBQzFLLGFBQVMsZUFBZSxHQUFHO0FBQUUsVUFBSSxJQUFJLGFBQWEsR0FBRyxRQUFRO0FBQUcsYUFBTyxZQUFZLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTtBQUFBLElBQUk7QUFDNUcsYUFBUyxhQUFhLEdBQUcsR0FBRztBQUFFLFVBQUksWUFBWSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUcsUUFBTztBQUFHLFVBQUksSUFBSSxFQUFFLE9BQU8sV0FBVztBQUFHLFVBQUksV0FBVyxHQUFHO0FBQUUsWUFBSSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssU0FBUztBQUFHLFlBQUksWUFBWSxRQUFRLENBQUMsRUFBRyxRQUFPO0FBQUcsY0FBTSxJQUFJLFVBQVUsOENBQThDO0FBQUEsTUFBRztBQUFFLGNBQVEsYUFBYSxJQUFJLFNBQVMsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUMzVCxRQUFJLEtBQUssUUFBUSxJQUFJO0FBQ3JCLFFBQUksZUFBZTtBQUNuQixRQUFJLFFBQVEsbUJBQTZCLG1CQUFtQjtBQUM1RCxRQUFJLE9BQU87QUFDWCxRQUFJLGFBQWE7QUFDakIsUUFBSSxrQkFBa0I7QUFNdEIsSUFBQUYsUUFBTyxVQUF1QiwyQkFBWTtBQUt4QyxlQUFTLGlCQUFpQkcsU0FBUTtBQUNoQyx3QkFBZ0IsTUFBTSxnQkFBZ0I7QUFDdEMsWUFBSSxDQUFDQSxTQUFRO0FBQ1gsZ0JBQU0sSUFBSSxNQUFNLHlDQUF5QztBQUFBLFFBQzNEO0FBQ0EsYUFBSyxTQUFTQTtBQUNkLGFBQUssV0FBVyxvQkFBSSxJQUFJO0FBQUEsTUFDMUI7QUFPQSxhQUFPLGFBQWEsa0JBQWtCLENBQUM7QUFBQSxRQUNyQyxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsU0FBUztBQUN2QixjQUFJLFFBQVE7QUFDWixtQkFBUyxPQUFPLFVBQVUsUUFBUSxPQUFPLElBQUksTUFBTSxJQUFJLEdBQUcsT0FBTyxHQUFHLE9BQU8sTUFBTSxRQUFRO0FBQ3ZGLGlCQUFLLElBQUksSUFBSSxVQUFVLElBQUk7QUFBQSxVQUM3QjtBQUNBLGVBQUssUUFBUSxTQUFVLEtBQUs7QUFDMUIsZ0JBQUksTUFBTSxRQUFRLEdBQUcsR0FBRztBQUN0QixxQkFBTyxJQUFJLFFBQVEsU0FBVSxTQUFTO0FBQ3BDLHVCQUFPLE1BQU0sWUFBWSxPQUFPO0FBQUEsY0FDbEMsQ0FBQztBQUFBLFlBQ0g7QUFDQSxrQkFBTSxZQUFZLEdBQUc7QUFBQSxVQUN2QixDQUFDO0FBQ0QsY0FBSSxDQUFDLEtBQUssU0FBUztBQUNqQixpQkFBSyxVQUFVLEtBQUssbUJBQW1CLEtBQUssSUFBSTtBQUNoRCxvQkFBUSxHQUFHLHFCQUFxQixLQUFLLE9BQU87QUFBQSxVQUM5QztBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFPRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsV0FBVztBQUN6QixjQUFJLFNBQVM7QUFDYixjQUFJLEtBQUssU0FBUztBQUNoQixvQkFBUSxlQUFlLHFCQUFxQixLQUFLLE9BQU87QUFDeEQsaUJBQUssVUFBVTtBQUNmLGtCQUFNLEtBQUssS0FBSyxTQUFTLE9BQU8sQ0FBQyxFQUFFLFFBQVEsU0FBVSxTQUFTO0FBQzVELHFCQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU87QUFBQSxZQUNyQyxDQUFDO0FBQUEsVUFDSDtBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFPRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsV0FBVyxLQUFLO0FBQzlCLGNBQUksVUFBVTtBQUNkLGNBQUksS0FBSztBQUNQLHNCQUFVLE9BQU8sUUFBUSxXQUFXLE1BQU0sSUFBSTtBQUFBLFVBQ2hEO0FBQ0EsaUJBQU87QUFBQSxZQUNMLE9BQU87QUFBQTtBQUFBLFlBRVAsT0FBTztBQUFBLFlBQ1AsU0FBUyxDQUFDLHNCQUFzQixPQUFPLFdBQVcsb0JBQW9CLEdBQUcsT0FBTyxJQUFJLFNBQVMsa0JBQWtCLEVBQUUsS0FBSyxJQUFJO0FBQUEsWUFDMUgsT0FBTyxPQUFPLElBQUk7QUFBQSxZQUNsQixXQUFXO0FBQUEsWUFDWCxPQUFNLG9CQUFJLEtBQUssR0FBRSxTQUFTO0FBQUEsWUFDMUIsU0FBUyxLQUFLLGVBQWU7QUFBQSxZQUM3QixJQUFJLEtBQUssVUFBVTtBQUFBLFlBQ25CLE9BQU8sS0FBSyxTQUFTLEdBQUc7QUFBQSxVQUMxQjtBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BTUYsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLGlCQUFpQjtBQUMvQixpQkFBTztBQUFBLFlBQ0wsS0FBSyxRQUFRO0FBQUEsWUFDYixLQUFLLFFBQVEsU0FBUyxRQUFRLE9BQU8sSUFBSTtBQUFBLFlBQ3pDLEtBQUssUUFBUSxTQUFTLFFBQVEsT0FBTyxJQUFJO0FBQUEsWUFDekMsS0FBSyxRQUFRLElBQUk7QUFBQSxZQUNqQixVQUFVLFFBQVE7QUFBQSxZQUNsQixTQUFTLFFBQVE7QUFBQSxZQUNqQixNQUFNLFFBQVE7QUFBQSxZQUNkLGFBQWEsUUFBUSxZQUFZO0FBQUEsVUFDbkM7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU1GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxZQUFZO0FBQzFCLGlCQUFPO0FBQUEsWUFDTCxTQUFTLEdBQUcsUUFBUTtBQUFBLFlBQ3BCLFFBQVEsR0FBRyxPQUFPO0FBQUEsVUFDcEI7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BT0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFNBQVMsS0FBSztBQUM1QixjQUFJLFFBQVEsTUFBTSxXQUFXLE1BQU0sR0FBRyxJQUFJLFdBQVcsSUFBSTtBQUN6RCxpQkFBTyxNQUFNLElBQUksU0FBVSxNQUFNO0FBQy9CLG1CQUFPO0FBQUEsY0FDTCxRQUFRLEtBQUssZ0JBQWdCO0FBQUEsY0FDN0IsTUFBTSxLQUFLLFlBQVk7QUFBQSxjQUN2QixZQUFZLEtBQUssZ0JBQWdCO0FBQUEsY0FDakMsTUFBTSxLQUFLLGNBQWM7QUFBQSxjQUN6QixRQUFRLEtBQUssY0FBYztBQUFBLGNBQzNCLFVBQVUsS0FBSyxTQUFTO0FBQUEsWUFDMUI7QUFBQSxVQUNGLENBQUM7QUFBQSxRQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BT0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFlBQVksU0FBUztBQUNuQyxjQUFJLENBQUMsS0FBSyxTQUFTLElBQUksT0FBTyxHQUFHO0FBQy9CLG9CQUFRLG1CQUFtQjtBQUMzQixnQkFBSSxVQUFVLElBQUksZ0JBQWdCLE9BQU87QUFDekMsaUJBQUssU0FBUyxJQUFJLFNBQVMsT0FBTztBQUNsQyxpQkFBSyxPQUFPLEtBQUssT0FBTztBQUFBLFVBQzFCO0FBQUEsUUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFTRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsbUJBQW1CLEtBQUs7QUFDdEMsY0FBSSxPQUFPLEtBQUssV0FBVyxHQUFHO0FBQzlCLGNBQUksV0FBVyxLQUFLLHNCQUFzQjtBQUUxQyxjQUFJLFNBQVMsT0FBTyxLQUFLLE9BQU8sZ0JBQWdCLGFBQWEsS0FBSyxPQUFPLFlBQVksR0FBRyxJQUFJLEtBQUssT0FBTztBQUN4RyxjQUFJO0FBQ0osY0FBSSxDQUFDLFNBQVMsVUFBVSxRQUFRO0FBRTlCLG9CQUFRLEtBQUssaUVBQWlFO0FBRTlFLG9CQUFRLEtBQUssK0JBQStCO0FBQzVDLHFCQUFTO0FBQUEsVUFDWDtBQUNBLG1CQUFTLGVBQWU7QUFDdEIsa0JBQU0sVUFBVSxNQUFNO0FBQ3RCLGtCQUFNLG9CQUFvQixRQUFRLFFBQVE7QUFDMUMsZ0JBQUksVUFBVSxDQUFDLFFBQVEsVUFBVTtBQUcvQixrQkFBSSxTQUFTO0FBQ1gsNkJBQWEsT0FBTztBQUFBLGNBQ3RCO0FBRUEsc0JBQVEsS0FBSyxDQUFDO0FBQUEsWUFDaEI7QUFBQSxVQUNGO0FBQ0EsY0FBSSxDQUFDLFlBQVksU0FBUyxXQUFXLEdBQUc7QUFDdEMsbUJBQU8sUUFBUSxTQUFTLFlBQVk7QUFBQSxVQUN0QztBQUdBLHVCQUFhLFVBQVUsU0FBVSxTQUFTLE1BQU07QUFDOUMsZ0JBQUksT0FBTyxLQUFLLElBQUk7QUFDcEIsZ0JBQUksWUFBWSxRQUFRLGFBQWE7QUFHckMscUJBQVMsT0FBTyxPQUFPO0FBQ3JCLHFCQUFPLFdBQVk7QUFDakIsc0JBQU0sS0FBSztBQUNYLHFCQUFLO0FBQUEsY0FDUDtBQUFBLFlBQ0Y7QUFDQSxzQkFBVSxVQUFVO0FBQ3BCLHNCQUFVLEtBQUssVUFBVSxPQUFPLFVBQVUsQ0FBQztBQUMzQyxzQkFBVSxLQUFLLFNBQVMsT0FBTyxPQUFPLENBQUM7QUFBQSxVQUN6QyxHQUFHLFdBQVk7QUFDYixtQkFBTyxVQUFVLGFBQWE7QUFBQSxVQUNoQyxDQUFDO0FBQ0QsZUFBSyxPQUFPLElBQUksSUFBSTtBQUlwQixjQUFJLFFBQVE7QUFDVixzQkFBVSxXQUFXLGNBQWMsR0FBSTtBQUFBLFVBQ3pDO0FBQUEsUUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BUUYsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLHdCQUF3QjtBQUt0QyxpQkFBTyxLQUFLLE9BQU8sV0FBVyxPQUFPLFNBQVUsTUFBTTtBQUNuRCxnQkFBSSxZQUFZLEtBQUssYUFBYTtBQUNsQyxtQkFBTyxVQUFVO0FBQUEsVUFDbkIsQ0FBQztBQUFBLFFBQ0g7QUFBQSxNQUNGLENBQUMsQ0FBQztBQUFBLElBQ0osRUFBRTtBQUFBO0FBQUE7OztBQ3hRRjtBQUFBLG1FQUFBQyxTQUFBO0FBQUE7QUFTQSxhQUFTLFFBQVEsR0FBRztBQUFFO0FBQTJCLGFBQU8sVUFBVSxjQUFjLE9BQU8sVUFBVSxZQUFZLE9BQU8sT0FBTyxXQUFXLFNBQVVDLElBQUc7QUFBRSxlQUFPLE9BQU9BO0FBQUEsTUFBRyxJQUFJLFNBQVVBLElBQUc7QUFBRSxlQUFPQSxNQUFLLGNBQWMsT0FBTyxVQUFVQSxHQUFFLGdCQUFnQixVQUFVQSxPQUFNLE9BQU8sWUFBWSxXQUFXLE9BQU9BO0FBQUEsTUFBRyxHQUFHLFFBQVEsQ0FBQztBQUFBLElBQUc7QUFDN1QsYUFBUyxnQkFBZ0IsR0FBR0MsSUFBRztBQUFFLFVBQUksRUFBRSxhQUFhQSxJQUFJLE9BQU0sSUFBSSxVQUFVLG1DQUFtQztBQUFBLElBQUc7QUFDbEgsYUFBUyxrQkFBa0IsR0FBRyxHQUFHO0FBQUUsZUFBUyxJQUFJLEdBQUcsSUFBSSxFQUFFLFFBQVEsS0FBSztBQUFFLFlBQUksSUFBSSxFQUFFLENBQUM7QUFBRyxVQUFFLGFBQWEsRUFBRSxjQUFjLE9BQUksRUFBRSxlQUFlLE1BQUksV0FBVyxNQUFNLEVBQUUsV0FBVyxPQUFLLE9BQU8sZUFBZSxHQUFHLGVBQWUsRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQUc7QUFBQSxJQUFFO0FBQ3ZPLGFBQVMsYUFBYSxHQUFHLEdBQUcsR0FBRztBQUFFLGFBQU8sS0FBSyxrQkFBa0IsRUFBRSxXQUFXLENBQUMsR0FBRyxLQUFLLGtCQUFrQixHQUFHLENBQUMsR0FBRyxPQUFPLGVBQWUsR0FBRyxhQUFhLEVBQUUsVUFBVSxNQUFHLENBQUMsR0FBRztBQUFBLElBQUc7QUFDMUssYUFBUyxlQUFlLEdBQUc7QUFBRSxVQUFJLElBQUksYUFBYSxHQUFHLFFBQVE7QUFBRyxhQUFPLFlBQVksUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJO0FBQUEsSUFBSTtBQUM1RyxhQUFTLGFBQWEsR0FBRyxHQUFHO0FBQUUsVUFBSSxZQUFZLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRyxRQUFPO0FBQUcsVUFBSSxJQUFJLEVBQUUsT0FBTyxXQUFXO0FBQUcsVUFBSSxXQUFXLEdBQUc7QUFBRSxZQUFJLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxTQUFTO0FBQUcsWUFBSSxZQUFZLFFBQVEsQ0FBQyxFQUFHLFFBQU87QUFBRyxjQUFNLElBQUksVUFBVSw4Q0FBOEM7QUFBQSxNQUFHO0FBQUUsY0FBUSxhQUFhLElBQUksU0FBUyxRQUFRLENBQUM7QUFBQSxJQUFHO0FBQzNULGFBQVMsV0FBVyxHQUFHLEdBQUcsR0FBRztBQUFFLGFBQU8sSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLDJCQUEyQixHQUFHLDBCQUEwQixJQUFJLFFBQVEsVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEVBQUUsV0FBVyxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUFBLElBQUc7QUFDMU0sYUFBUywyQkFBMkIsR0FBRyxHQUFHO0FBQUUsVUFBSSxNQUFNLFlBQVksUUFBUSxDQUFDLEtBQUssY0FBYyxPQUFPLEdBQUksUUFBTztBQUFHLFVBQUksV0FBVyxFQUFHLE9BQU0sSUFBSSxVQUFVLDBEQUEwRDtBQUFHLGFBQU8sdUJBQXVCLENBQUM7QUFBQSxJQUFHO0FBQ3hQLGFBQVMsdUJBQXVCLEdBQUc7QUFBRSxVQUFJLFdBQVcsRUFBRyxPQUFNLElBQUksZUFBZSwyREFBMkQ7QUFBRyxhQUFPO0FBQUEsSUFBRztBQUN4SixhQUFTLDRCQUE0QjtBQUFFLFVBQUk7QUFBRSxZQUFJLElBQUksQ0FBQyxRQUFRLFVBQVUsUUFBUSxLQUFLLFFBQVEsVUFBVSxTQUFTLENBQUMsR0FBRyxXQUFZO0FBQUEsUUFBQyxDQUFDLENBQUM7QUFBQSxNQUFHLFNBQVNDLElBQUc7QUFBQSxNQUFDO0FBQUUsY0FBUSw0QkFBNEIsU0FBU0MsNkJBQTRCO0FBQUUsZUFBTyxDQUFDLENBQUM7QUFBQSxNQUFHLEdBQUc7QUFBQSxJQUFHO0FBQ2xQLGFBQVMsZ0JBQWdCLEdBQUc7QUFBRSxhQUFPLGtCQUFrQixPQUFPLGlCQUFpQixPQUFPLGVBQWUsS0FBSyxJQUFJLFNBQVVELElBQUc7QUFBRSxlQUFPQSxHQUFFLGFBQWEsT0FBTyxlQUFlQSxFQUFDO0FBQUEsTUFBRyxHQUFHLGdCQUFnQixDQUFDO0FBQUEsSUFBRztBQUNwTSxhQUFTLFVBQVUsR0FBRyxHQUFHO0FBQUUsVUFBSSxjQUFjLE9BQU8sS0FBSyxTQUFTLEVBQUcsT0FBTSxJQUFJLFVBQVUsb0RBQW9EO0FBQUcsUUFBRSxZQUFZLE9BQU8sT0FBTyxLQUFLLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxPQUFPLEdBQUcsVUFBVSxNQUFJLGNBQWMsS0FBRyxFQUFFLENBQUMsR0FBRyxPQUFPLGVBQWUsR0FBRyxhQUFhLEVBQUUsVUFBVSxNQUFHLENBQUMsR0FBRyxLQUFLLGdCQUFnQixHQUFHLENBQUM7QUFBQSxJQUFHO0FBQ25WLGFBQVMsZ0JBQWdCLEdBQUcsR0FBRztBQUFFLGFBQU8sa0JBQWtCLE9BQU8saUJBQWlCLE9BQU8sZUFBZSxLQUFLLElBQUksU0FBVUEsSUFBR0UsSUFBRztBQUFFLGVBQU9GLEdBQUUsWUFBWUUsSUFBR0Y7QUFBQSxNQUFHLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQztBQUFBLElBQUc7QUFDeEwsUUFBSSxXQUFXO0FBQWYsUUFDRSxXQUFXLFNBQVM7QUFPdEIsSUFBQUgsUUFBTyxVQUF1Qix5QkFBVSxXQUFXO0FBT2pELGVBQVMsZ0JBQWdCLFdBQVc7QUFDbEMsWUFBSTtBQUNKLHdCQUFnQixNQUFNLGVBQWU7QUFDckMsZ0JBQVEsV0FBVyxNQUFNLGlCQUFpQixDQUFDO0FBQUEsVUFDekMsWUFBWTtBQUFBLFFBQ2QsQ0FBQyxDQUFDO0FBQ0YsWUFBSSxDQUFDLFdBQVc7QUFDZCxnQkFBTSxJQUFJLE1BQU0sc0RBQXNEO0FBQUEsUUFDeEU7QUFDQSxjQUFNLG1CQUFtQjtBQUN6QixjQUFNLFlBQVk7QUFDbEIsZUFBTztBQUFBLE1BQ1Q7QUFXQSxnQkFBVSxpQkFBaUIsU0FBUztBQUNwQyxhQUFPLGFBQWEsaUJBQWlCLENBQUM7QUFBQSxRQUNwQyxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsT0FBTyxNQUFNLEtBQUssVUFBVTtBQUMxQyxjQUFJLEtBQUssV0FBVztBQUNsQixtQkFBTyxLQUFLLFVBQVUsSUFBSSxNQUFNLFFBQVE7QUFBQSxVQUMxQztBQUNBLG1CQUFTO0FBQ1QsaUJBQU87QUFBQSxRQUNUO0FBQUEsTUFDRixDQUFDLENBQUM7QUFBQSxJQUNKLEVBQUUsUUFBUTtBQUFBO0FBQUE7OztBQ3ZFVjtBQUFBLG9FQUFBTSxTQUFBO0FBQUE7QUFTQSxhQUFTLFFBQVEsR0FBRztBQUFFO0FBQTJCLGFBQU8sVUFBVSxjQUFjLE9BQU8sVUFBVSxZQUFZLE9BQU8sT0FBTyxXQUFXLFNBQVVDLElBQUc7QUFBRSxlQUFPLE9BQU9BO0FBQUEsTUFBRyxJQUFJLFNBQVVBLElBQUc7QUFBRSxlQUFPQSxNQUFLLGNBQWMsT0FBTyxVQUFVQSxHQUFFLGdCQUFnQixVQUFVQSxPQUFNLE9BQU8sWUFBWSxXQUFXLE9BQU9BO0FBQUEsTUFBRyxHQUFHLFFBQVEsQ0FBQztBQUFBLElBQUc7QUFDN1QsYUFBUyxnQkFBZ0IsR0FBR0MsSUFBRztBQUFFLFVBQUksRUFBRSxhQUFhQSxJQUFJLE9BQU0sSUFBSSxVQUFVLG1DQUFtQztBQUFBLElBQUc7QUFDbEgsYUFBUyxrQkFBa0IsR0FBRyxHQUFHO0FBQUUsZUFBUyxJQUFJLEdBQUcsSUFBSSxFQUFFLFFBQVEsS0FBSztBQUFFLFlBQUksSUFBSSxFQUFFLENBQUM7QUFBRyxVQUFFLGFBQWEsRUFBRSxjQUFjLE9BQUksRUFBRSxlQUFlLE1BQUksV0FBVyxNQUFNLEVBQUUsV0FBVyxPQUFLLE9BQU8sZUFBZSxHQUFHLGVBQWUsRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQUc7QUFBQSxJQUFFO0FBQ3ZPLGFBQVMsYUFBYSxHQUFHLEdBQUcsR0FBRztBQUFFLGFBQU8sS0FBSyxrQkFBa0IsRUFBRSxXQUFXLENBQUMsR0FBRyxLQUFLLGtCQUFrQixHQUFHLENBQUMsR0FBRyxPQUFPLGVBQWUsR0FBRyxhQUFhLEVBQUUsVUFBVSxNQUFHLENBQUMsR0FBRztBQUFBLElBQUc7QUFDMUssYUFBUyxlQUFlLEdBQUc7QUFBRSxVQUFJLElBQUksYUFBYSxHQUFHLFFBQVE7QUFBRyxhQUFPLFlBQVksUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJO0FBQUEsSUFBSTtBQUM1RyxhQUFTLGFBQWEsR0FBRyxHQUFHO0FBQUUsVUFBSSxZQUFZLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRyxRQUFPO0FBQUcsVUFBSSxJQUFJLEVBQUUsT0FBTyxXQUFXO0FBQUcsVUFBSSxXQUFXLEdBQUc7QUFBRSxZQUFJLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxTQUFTO0FBQUcsWUFBSSxZQUFZLFFBQVEsQ0FBQyxFQUFHLFFBQU87QUFBRyxjQUFNLElBQUksVUFBVSw4Q0FBOEM7QUFBQSxNQUFHO0FBQUUsY0FBUSxhQUFhLElBQUksU0FBUyxRQUFRLENBQUM7QUFBQSxJQUFHO0FBQzNULFFBQUksS0FBSyxRQUFRLElBQUk7QUFDckIsUUFBSSxlQUFlO0FBQ25CLFFBQUksUUFBUSxtQkFBNkIsbUJBQW1CO0FBQzVELFFBQUksT0FBTztBQUNYLFFBQUksYUFBYTtBQUNqQixRQUFJLGtCQUFrQjtBQU10QixJQUFBRixRQUFPLFVBQXVCLDJCQUFZO0FBS3hDLGVBQVMsaUJBQWlCRyxTQUFRO0FBQ2hDLHdCQUFnQixNQUFNLGdCQUFnQjtBQUN0QyxZQUFJLENBQUNBLFNBQVE7QUFDWCxnQkFBTSxJQUFJLE1BQU0seUNBQXlDO0FBQUEsUUFDM0Q7QUFDQSxhQUFLLFNBQVNBO0FBQ2QsYUFBSyxXQUFXLG9CQUFJLElBQUk7QUFBQSxNQUMxQjtBQU9BLGFBQU8sYUFBYSxrQkFBa0IsQ0FBQztBQUFBLFFBQ3JDLEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxTQUFTO0FBQ3ZCLGNBQUksUUFBUTtBQUNaLG1CQUFTLE9BQU8sVUFBVSxRQUFRLE9BQU8sSUFBSSxNQUFNLElBQUksR0FBRyxPQUFPLEdBQUcsT0FBTyxNQUFNLFFBQVE7QUFDdkYsaUJBQUssSUFBSSxJQUFJLFVBQVUsSUFBSTtBQUFBLFVBQzdCO0FBQ0EsZUFBSyxRQUFRLFNBQVUsS0FBSztBQUMxQixnQkFBSSxNQUFNLFFBQVEsR0FBRyxHQUFHO0FBQ3RCLHFCQUFPLElBQUksUUFBUSxTQUFVLFNBQVM7QUFDcEMsdUJBQU8sTUFBTSxZQUFZLE9BQU87QUFBQSxjQUNsQyxDQUFDO0FBQUEsWUFDSDtBQUNBLGtCQUFNLFlBQVksR0FBRztBQUFBLFVBQ3ZCLENBQUM7QUFDRCxjQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCLGlCQUFLLFVBQVUsS0FBSyxvQkFBb0IsS0FBSyxJQUFJO0FBQ2pELG9CQUFRLEdBQUcsc0JBQXNCLEtBQUssT0FBTztBQUFBLFVBQy9DO0FBQUEsUUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxXQUFXO0FBQ3pCLGNBQUksU0FBUztBQUNiLGNBQUksS0FBSyxTQUFTO0FBQ2hCLG9CQUFRLGVBQWUsc0JBQXNCLEtBQUssT0FBTztBQUN6RCxpQkFBSyxVQUFVO0FBQ2Ysa0JBQU0sS0FBSyxLQUFLLFNBQVMsT0FBTyxDQUFDLEVBQUUsUUFBUSxTQUFVLFNBQVM7QUFDNUQscUJBQU8sT0FBTyxPQUFPLE9BQU8sT0FBTztBQUFBLFlBQ3JDLENBQUM7QUFBQSxVQUNIO0FBQUEsUUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxXQUFXLEtBQUs7QUFDOUIsY0FBSSxVQUFVO0FBQ2QsY0FBSSxLQUFLO0FBQ1Asc0JBQVUsT0FBTyxRQUFRLFdBQVcsTUFBTSxJQUFJO0FBQUEsVUFDaEQ7QUFDQSxpQkFBTztBQUFBLFlBQ0wsT0FBTztBQUFBO0FBQUEsWUFFUCxPQUFPO0FBQUEsWUFDUCxTQUFTLENBQUMsdUJBQXVCLE9BQU8sV0FBVyxvQkFBb0IsR0FBRyxPQUFPLElBQUksU0FBUyxrQkFBa0IsRUFBRSxLQUFLLElBQUk7QUFBQSxZQUMzSCxPQUFPLE9BQU8sSUFBSTtBQUFBLFlBQ2xCLFdBQVc7QUFBQSxZQUNYLE9BQU0sb0JBQUksS0FBSyxHQUFFLFNBQVM7QUFBQSxZQUMxQixTQUFTLEtBQUssZUFBZTtBQUFBLFlBQzdCLElBQUksS0FBSyxVQUFVO0FBQUEsWUFDbkIsT0FBTyxLQUFLLFNBQVMsR0FBRztBQUFBLFVBQzFCO0FBQUEsUUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFNRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsaUJBQWlCO0FBQy9CLGlCQUFPO0FBQUEsWUFDTCxLQUFLLFFBQVE7QUFBQSxZQUNiLEtBQUssUUFBUSxTQUFTLFFBQVEsT0FBTyxJQUFJO0FBQUEsWUFDekMsS0FBSyxRQUFRLFNBQVMsUUFBUSxPQUFPLElBQUk7QUFBQSxZQUN6QyxLQUFLLFFBQVEsSUFBSTtBQUFBLFlBQ2pCLFVBQVUsUUFBUTtBQUFBLFlBQ2xCLFNBQVMsUUFBUTtBQUFBLFlBQ2pCLE1BQU0sUUFBUTtBQUFBLFlBQ2QsYUFBYSxRQUFRLFlBQVk7QUFBQSxVQUNuQztBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BTUYsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFlBQVk7QUFDMUIsaUJBQU87QUFBQSxZQUNMLFNBQVMsR0FBRyxRQUFRO0FBQUEsWUFDcEIsUUFBUSxHQUFHLE9BQU87QUFBQSxVQUNwQjtBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFPRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsU0FBUyxLQUFLO0FBQzVCLGNBQUksUUFBUSxNQUFNLFdBQVcsTUFBTSxHQUFHLElBQUksV0FBVyxJQUFJO0FBQ3pELGlCQUFPLE1BQU0sSUFBSSxTQUFVLE1BQU07QUFDL0IsbUJBQU87QUFBQSxjQUNMLFFBQVEsS0FBSyxnQkFBZ0I7QUFBQSxjQUM3QixNQUFNLEtBQUssWUFBWTtBQUFBLGNBQ3ZCLFlBQVksS0FBSyxnQkFBZ0I7QUFBQSxjQUNqQyxNQUFNLEtBQUssY0FBYztBQUFBLGNBQ3pCLFFBQVEsS0FBSyxjQUFjO0FBQUEsY0FDM0IsVUFBVSxLQUFLLFNBQVM7QUFBQSxZQUMxQjtBQUFBLFVBQ0YsQ0FBQztBQUFBLFFBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFPRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsWUFBWSxTQUFTO0FBQ25DLGNBQUksQ0FBQyxLQUFLLFNBQVMsSUFBSSxPQUFPLEdBQUc7QUFDL0Isb0JBQVEsbUJBQW1CO0FBQzNCLGdCQUFJLFVBQVUsSUFBSSxnQkFBZ0IsT0FBTztBQUN6QyxpQkFBSyxTQUFTLElBQUksU0FBUyxPQUFPO0FBQ2xDLGlCQUFLLE9BQU8sS0FBSyxPQUFPO0FBQUEsVUFDMUI7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVNGLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxvQkFBb0IsS0FBSztBQUN2QyxjQUFJLE9BQU8sS0FBSyxXQUFXLEdBQUc7QUFDOUIsY0FBSSxXQUFXLEtBQUssc0JBQXNCO0FBRTFDLGNBQUksU0FBUyxPQUFPLEtBQUssT0FBTyxnQkFBZ0IsYUFBYSxLQUFLLE9BQU8sWUFBWSxHQUFHLElBQUksS0FBSyxPQUFPO0FBQ3hHLGNBQUk7QUFDSixjQUFJLENBQUMsU0FBUyxVQUFVLFFBQVE7QUFFOUIsb0JBQVEsS0FBSyxpRUFBaUU7QUFFOUUsb0JBQVEsS0FBSywrQkFBK0I7QUFDNUMscUJBQVM7QUFBQSxVQUNYO0FBQ0EsbUJBQVMsZUFBZTtBQUN0QixrQkFBTSxVQUFVLE1BQU07QUFDdEIsa0JBQU0sb0JBQW9CLFFBQVEsUUFBUTtBQUMxQyxnQkFBSSxVQUFVLENBQUMsUUFBUSxVQUFVO0FBRy9CLGtCQUFJLFNBQVM7QUFDWCw2QkFBYSxPQUFPO0FBQUEsY0FDdEI7QUFFQSxzQkFBUSxLQUFLLENBQUM7QUFBQSxZQUNoQjtBQUFBLFVBQ0Y7QUFDQSxjQUFJLENBQUMsWUFBWSxTQUFTLFdBQVcsR0FBRztBQUN0QyxtQkFBTyxRQUFRLFNBQVMsWUFBWTtBQUFBLFVBQ3RDO0FBR0EsdUJBQWEsVUFBVSxTQUFVLFNBQVMsTUFBTTtBQUM5QyxnQkFBSSxPQUFPLEtBQUssSUFBSTtBQUNwQixnQkFBSSxZQUFZLFFBQVEsYUFBYTtBQUdyQyxxQkFBUyxPQUFPLE9BQU87QUFDckIscUJBQU8sV0FBWTtBQUNqQixzQkFBTSxLQUFLO0FBQ1gscUJBQUs7QUFBQSxjQUNQO0FBQUEsWUFDRjtBQUNBLHNCQUFVLFVBQVU7QUFDcEIsc0JBQVUsS0FBSyxVQUFVLE9BQU8sVUFBVSxDQUFDO0FBQzNDLHNCQUFVLEtBQUssU0FBUyxPQUFPLE9BQU8sQ0FBQztBQUFBLFVBQ3pDLEdBQUcsV0FBWTtBQUNiLG1CQUFPLFVBQVUsYUFBYTtBQUFBLFVBQ2hDLENBQUM7QUFDRCxlQUFLLE9BQU8sSUFBSSxJQUFJO0FBSXBCLGNBQUksUUFBUTtBQUNWLHNCQUFVLFdBQVcsY0FBYyxHQUFJO0FBQUEsVUFDekM7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFRRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsd0JBQXdCO0FBS3RDLGlCQUFPLEtBQUssT0FBTyxXQUFXLE9BQU8sU0FBVSxNQUFNO0FBQ25ELGdCQUFJLFlBQVksS0FBSyxhQUFhO0FBQ2xDLG1CQUFPLFVBQVU7QUFBQSxVQUNuQixDQUFDO0FBQUEsUUFDSDtBQUFBLE1BQ0YsQ0FBQyxDQUFDO0FBQUEsSUFDSixFQUFFO0FBQUE7QUFBQTs7O0FDeFFGLElBQUFDLGtCQUFBO0FBQUEsc0RBQUFDLFNBQUE7QUFBQTtBQUVBLFFBQU0sT0FBTyxRQUFRLE1BQU07QUFDM0IsUUFBTSxXQUFXO0FBQ2pCLFFBQU0sRUFBRSxNQUFNLElBQUk7QUFhbEIsUUFBTSxrQkFBa0JBLFFBQU8sVUFBVSxTQUFTQyxpQkFBZ0IsVUFBVSxDQUFDLEdBQUc7QUFDOUUsZUFBUyxLQUFLLE1BQU0sRUFBRSxZQUFZLE1BQU0sZUFBZSxRQUFRLGNBQWMsQ0FBQztBQUU5RSxXQUFLLFNBQVMsUUFBUTtBQUN0QixXQUFLLFFBQVEsUUFBUTtBQUNyQixXQUFLLG1CQUFtQixRQUFRO0FBQ2hDLFdBQUssbUJBQW1CLFFBQVE7QUFDaEMsV0FBSyxTQUFTLFFBQVE7QUFFdEIsVUFBSSxRQUFRLElBQUssTUFBSyxNQUFNLFFBQVE7QUFDcEMsVUFBSSxRQUFRLEtBQU0sTUFBSyxPQUFPLFFBQVE7QUFDdEMsVUFBSSxRQUFRLE1BQU8sTUFBSyxRQUFRLFFBQVE7QUFHeEMsV0FBSyxLQUFLLFFBQVEsQ0FBQUMsWUFBVTtBQUsxQixhQUFLLFNBQVNBLFFBQU87QUFDckIsYUFBSyxTQUFTQTtBQUFBLE1BQ2hCLENBQUM7QUFHRCxXQUFLLEtBQUssVUFBVSxTQUFPO0FBS3pCLFlBQUksUUFBUSxLQUFLLFFBQVE7QUFDdkIsZUFBSyxTQUFTO0FBQ2QsY0FBSSxLQUFLLE9BQU87QUFDZCxpQkFBSyxNQUFNO0FBQUEsVUFDYjtBQUFBLFFBQ0Y7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBS0EsU0FBSyxTQUFTLGlCQUFpQixRQUFRO0FBVXZDLG9CQUFnQixVQUFVLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBSyxVQUFVO0FBQ3RFLFVBQUksS0FBSyxVQUFXLEtBQUssY0FBYyxRQUFRLENBQUMsS0FBSyxrQkFBbUI7QUFDdEUsZUFBTyxTQUFTLElBQUk7QUFBQSxNQUN0QjtBQU1BLFlBQU0sUUFBUSxLQUFLLFNBQVUsS0FBSyxVQUFVLEtBQUssT0FBTztBQUV4RCxVQUFJLENBQUMsU0FBUyxLQUFLLE9BQU8sS0FBSyxLQUFLLEtBQUssT0FBTyxLQUFLLEtBQUssQ0FBQyxHQUFHO0FBQzVELFlBQUksUUFBUSxDQUFDLEtBQUssUUFBUTtBQUN4QixpQkFBTyxLQUFLLElBQUksTUFBTSxRQUFRO0FBQUEsUUFDaEM7QUFFQSxZQUFJO0FBQ0osWUFBSTtBQUlKLFlBQUk7QUFDRix3QkFBYyxLQUFLLE9BQU8sVUFBVSxPQUFPLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxLQUFLLE9BQU8sT0FBTztBQUFBLFFBQ2xGLFNBQVMsS0FBSztBQUNaLHFCQUFXO0FBQUEsUUFDYjtBQUVBLFlBQUksWUFBWSxDQUFDLGFBQWE7QUFFNUIsbUJBQVM7QUFDVCxjQUFJLFNBQVUsT0FBTTtBQUNwQjtBQUFBLFFBQ0Y7QUFFQSxlQUFPLEtBQUssSUFBSSxhQUFhLFFBQVE7QUFBQSxNQUN2QztBQUNBLFdBQUssZUFBZSxPQUFPO0FBQzNCLGFBQU8sU0FBUyxJQUFJO0FBQUEsSUFDdEI7QUFVQSxvQkFBZ0IsVUFBVSxVQUFVLFNBQVMsUUFBUSxRQUFRLFVBQVU7QUFDckUsVUFBSSxLQUFLLE1BQU07QUFDYixjQUFNLFFBQVEsT0FBTyxPQUFPLEtBQUssU0FBUyxJQUFJO0FBQzlDLFlBQUksQ0FBQyxNQUFNLFFBQVE7QUFDakIsaUJBQU8sU0FBUyxJQUFJO0FBQUEsUUFDdEI7QUFLQSxlQUFPLEtBQUssS0FBSyxPQUFPLFFBQVE7QUFBQSxNQUNsQztBQUVBLGVBQVMsSUFBSSxHQUFHLElBQUksT0FBTyxRQUFRLEtBQUs7QUFDdEMsWUFBSSxDQUFDLEtBQUssUUFBUSxPQUFPLENBQUMsQ0FBQyxFQUFHO0FBRTlCLFlBQUksT0FBTyxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssUUFBUTtBQUNuQyxlQUFLLElBQUksT0FBTyxDQUFDLEVBQUUsT0FBTyxPQUFPLENBQUMsRUFBRSxRQUFRO0FBQzVDO0FBQUEsUUFDRjtBQUVBLFlBQUk7QUFDSixZQUFJO0FBSUosWUFBSTtBQUNGLHdCQUFjLEtBQUssT0FBTztBQUFBLFlBQ3hCLE9BQU8sT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsS0FBSztBQUFBLFlBQ2pDLEtBQUssT0FBTztBQUFBLFVBQ2Q7QUFBQSxRQUNGLFNBQVMsS0FBSztBQUNaLHFCQUFXO0FBQUEsUUFDYjtBQUVBLFlBQUksWUFBWSxDQUFDLGFBQWE7QUFFNUIsaUJBQU8sQ0FBQyxFQUFFLFNBQVM7QUFDbkIsY0FBSSxVQUFVO0FBRVoscUJBQVMsSUFBSTtBQUNiLGtCQUFNO0FBQUEsVUFDUjtBQUFBLFFBQ0YsT0FBTztBQUNMLGVBQUssSUFBSSxhQUFhLE9BQU8sQ0FBQyxFQUFFLFFBQVE7QUFBQSxRQUMxQztBQUFBLE1BQ0Y7QUFFQSxhQUFPLFNBQVMsSUFBSTtBQUFBLElBQ3RCO0FBV0Esb0JBQWdCLFVBQVUsVUFBVSxTQUFTLFFBQVEsT0FBTztBQUMxRCxZQUFNLE9BQU8sTUFBTTtBQUNuQixVQUFJLEtBQUssUUFBUTtBQUNmLGVBQU87QUFBQSxNQUNUO0FBSUEsWUFBTSxRQUFRLEtBQUssU0FBVSxLQUFLLFVBQVUsS0FBSyxPQUFPO0FBR3hELFVBQ0UsS0FBSyxjQUFjLFFBQ25CLENBQUMsU0FDRCxLQUFLLE9BQU8sS0FBSyxLQUFLLEtBQUssT0FBTyxLQUFLLEtBQUssQ0FBQyxHQUM3QztBQUlBLFlBQUksS0FBSyxvQkFBb0IsS0FBSyxjQUFjLE1BQU07QUFDcEQsaUJBQU87QUFBQSxRQUNUO0FBQUEsTUFDRjtBQUVBLGFBQU87QUFBQSxJQUNUO0FBTUEsb0JBQWdCLFVBQVUsT0FBTyxTQUFTLE9BQU87QUFFL0MsYUFBTztBQUFBLElBQ1Q7QUFBQTtBQUFBOzs7QUNsTkEsSUFBQUMsa0JBQUE7QUFBQSxzREFBQUMsU0FBQTtBQUFBO0FBRUEsUUFBTSxPQUFPLFFBQVEsTUFBTTtBQUMzQixRQUFNLEVBQUUsTUFBTSxJQUFJO0FBQ2xCLFFBQU0sa0JBQWtCO0FBVXhCLFFBQU0sd0JBQXdCQSxRQUFPLFVBQVUsU0FBU0MsdUJBQXNCLFVBQVUsQ0FBQyxHQUFHO0FBQzFGLHNCQUFnQixLQUFLLE1BQU0sT0FBTztBQUNsQyxVQUFJLENBQUMsUUFBUSxhQUFhLE9BQU8sUUFBUSxVQUFVLFFBQVEsWUFBWTtBQUNyRSxjQUFNLElBQUksTUFBTSx5REFBeUQ7QUFBQSxNQUMzRTtBQUVBLFdBQUssWUFBWSxRQUFRO0FBQ3pCLFdBQUssUUFBUSxLQUFLLFNBQVMsUUFBUSxVQUFVO0FBQzdDLFdBQUssbUJBQW1CLEtBQUssb0JBQW9CLFFBQVEsVUFBVTtBQUduRSxXQUFLLFlBQVk7QUFLakIsZUFBUyxlQUFlLEtBQUs7QUFDM0IsYUFBSyxLQUFLLFNBQVMsS0FBSyxLQUFLLFNBQVM7QUFBQSxNQUN4QztBQUVBLFVBQUksQ0FBQyxLQUFLLFVBQVUsZ0JBQWdCO0FBQ2xDLGFBQUssVUFBVSxpQkFBaUIsZUFBZSxLQUFLLElBQUk7QUFDeEQsYUFBSyxVQUFVLEdBQUcsU0FBUyxLQUFLLFVBQVUsY0FBYztBQUFBLE1BQzFEO0FBQUEsSUFDRjtBQUtBLFNBQUssU0FBUyx1QkFBdUIsZUFBZTtBQVVwRCwwQkFBc0IsVUFBVSxTQUFTLFNBQVMsT0FBTyxNQUFNLEtBQUssVUFBVTtBQUM1RSxVQUFJLEtBQUssVUFBVyxLQUFLLGNBQWMsUUFBUSxDQUFDLEtBQUssa0JBQW1CO0FBQ3RFLGVBQU8sU0FBUyxJQUFJO0FBQUEsTUFDdEI7QUFJQSxVQUFJLENBQUMsS0FBSyxTQUFTLEtBQUssT0FBTyxLQUFLLEtBQUssS0FBSyxLQUFLLE9BQU8sS0FBSyxLQUFLLENBQUMsR0FBRztBQUN0RSxhQUFLLFVBQVUsSUFBSSxLQUFLLEtBQUssR0FBRyxLQUFLLFNBQVMsTUFBTSxLQUFLLElBQUk7QUFBQSxNQUMvRDtBQUVBLGVBQVMsSUFBSTtBQUFBLElBQ2Y7QUFVQSwwQkFBc0IsVUFBVSxVQUFVLFNBQVMsUUFBUSxRQUFRLFVBQVU7QUFDM0UsZUFBUyxJQUFJLEdBQUcsSUFBSSxPQUFPLFFBQVEsS0FBSztBQUN0QyxZQUFJLEtBQUssUUFBUSxPQUFPLENBQUMsQ0FBQyxHQUFHO0FBQzNCLGVBQUssVUFBVTtBQUFBLFlBQ2IsT0FBTyxDQUFDLEVBQUUsTUFBTSxLQUFLO0FBQUEsWUFDckIsT0FBTyxDQUFDLEVBQUUsTUFBTTtBQUFBLFlBQ2hCLE9BQU8sQ0FBQyxFQUFFO0FBQUEsWUFDVixLQUFLO0FBQUEsVUFDUDtBQUNBLGlCQUFPLENBQUMsRUFBRSxTQUFTO0FBQUEsUUFDckI7QUFBQSxNQUNGO0FBRUEsYUFBTyxTQUFTLElBQUk7QUFBQSxJQUN0QjtBQU9BLDBCQUFzQixVQUFVLGNBQWMsU0FBUyxjQUFjO0FBRW5FLGNBQVEsTUFBTTtBQUFBLFFBQ1osR0FBRyxLQUFLLFVBQVUsSUFBSTtBQUFBLFFBQ3RCO0FBQUEsTUFDRixFQUFFLEtBQUssSUFBSSxDQUFDO0FBQUEsSUFDZDtBQU9BLDBCQUFzQixVQUFVLFFBQVEsU0FBUyxRQUFRO0FBQ3ZELFVBQUksS0FBSyxVQUFVLE9BQU87QUFDeEIsYUFBSyxVQUFVLE1BQU07QUFBQSxNQUN2QjtBQUVBLFVBQUksS0FBSyxVQUFVLGdCQUFnQjtBQUNqQyxhQUFLLFVBQVUsZUFBZSxTQUFTLEtBQUssVUFBVSxjQUFjO0FBQ3BFLGFBQUssVUFBVSxpQkFBaUI7QUFBQSxNQUNsQztBQUFBLElBQ0Y7QUFBQTtBQUFBOzs7QUN0SEE7QUFBQSwyREFBQUMsU0FBQTtBQUFBO0FBY0EsYUFBUyxRQUFRLEdBQUc7QUFBRTtBQUEyQixhQUFPLFVBQVUsY0FBYyxPQUFPLFVBQVUsWUFBWSxPQUFPLE9BQU8sV0FBVyxTQUFVQyxJQUFHO0FBQUUsZUFBTyxPQUFPQTtBQUFBLE1BQUcsSUFBSSxTQUFVQSxJQUFHO0FBQUUsZUFBT0EsTUFBSyxjQUFjLE9BQU8sVUFBVUEsR0FBRSxnQkFBZ0IsVUFBVUEsT0FBTSxPQUFPLFlBQVksV0FBVyxPQUFPQTtBQUFBLE1BQUcsR0FBRyxRQUFRLENBQUM7QUFBQSxJQUFHO0FBQzdULGFBQVMsZ0JBQWdCLEdBQUdDLElBQUc7QUFBRSxVQUFJLEVBQUUsYUFBYUEsSUFBSSxPQUFNLElBQUksVUFBVSxtQ0FBbUM7QUFBQSxJQUFHO0FBQ2xILGFBQVMsa0JBQWtCLEdBQUcsR0FBRztBQUFFLGVBQVMsSUFBSSxHQUFHLElBQUksRUFBRSxRQUFRLEtBQUs7QUFBRSxZQUFJLElBQUksRUFBRSxDQUFDO0FBQUcsVUFBRSxhQUFhLEVBQUUsY0FBYyxPQUFJLEVBQUUsZUFBZSxNQUFJLFdBQVcsTUFBTSxFQUFFLFdBQVcsT0FBSyxPQUFPLGVBQWUsR0FBRyxlQUFlLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFBQSxNQUFHO0FBQUEsSUFBRTtBQUN2TyxhQUFTLGFBQWEsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLEtBQUssa0JBQWtCLEVBQUUsV0FBVyxDQUFDLEdBQUcsS0FBSyxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUc7QUFBQSxJQUFHO0FBQzFLLGFBQVMsZUFBZSxHQUFHO0FBQUUsVUFBSSxJQUFJLGFBQWEsR0FBRyxRQUFRO0FBQUcsYUFBTyxZQUFZLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTtBQUFBLElBQUk7QUFDNUcsYUFBUyxhQUFhLEdBQUcsR0FBRztBQUFFLFVBQUksWUFBWSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUcsUUFBTztBQUFHLFVBQUksSUFBSSxFQUFFLE9BQU8sV0FBVztBQUFHLFVBQUksV0FBVyxHQUFHO0FBQUUsWUFBSSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssU0FBUztBQUFHLFlBQUksWUFBWSxRQUFRLENBQUMsRUFBRyxRQUFPO0FBQUcsY0FBTSxJQUFJLFVBQVUsOENBQThDO0FBQUEsTUFBRztBQUFFLGNBQVEsYUFBYSxJQUFJLFNBQVMsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUMzVCxRQUFJLFdBQXdCLDJCQUFZO0FBUXRDLGVBQVNDLFVBQVNDLFNBQVE7QUFDeEIsd0JBQWdCLE1BQU1ELFNBQVE7QUFDOUIsWUFBSSxTQUFTO0FBQ2IsWUFBSSxRQUFRQyxPQUFNLE1BQU0sWUFBWSxNQUFNLFFBQVFBLE9BQU0sS0FBSyxFQUFFQSxtQkFBa0IsU0FBUztBQUN4RixnQkFBTSxJQUFJLE1BQU0sa0NBQWtDO0FBQUEsUUFDcEQsT0FBTztBQUNMLGVBQUssU0FBU0E7QUFDZCxlQUFLLFFBQVEsS0FBSyxJQUFJO0FBQUEsUUFDeEI7QUFBQSxNQUNGO0FBUUEsYUFBTyxhQUFhRCxXQUFVLENBQUM7QUFBQSxRQUM3QixLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsT0FBTztBQUNyQixtQkFBUyxPQUFPLFVBQVUsUUFBUSxPQUFPLElBQUksTUFBTSxJQUFJLEdBQUcsT0FBTyxHQUFHLE9BQU8sTUFBTSxRQUFRO0FBQ3ZGLGlCQUFLLElBQUksSUFBSSxVQUFVLElBQUk7QUFBQSxVQUM3QjtBQUNBLGNBQUksT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDLE1BQU0sWUFBWTtBQUUvQyxvQkFBUSxLQUFLLDJEQUEyRDtBQUN4RSxpQkFBSyxJQUFJO0FBQUEsVUFDWDtBQUNBLGNBQUksT0FBTyxRQUFRLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxNQUFNLFdBQVcsS0FBSyxJQUFJLElBQUksQ0FBQztBQUN2RSxlQUFLLFFBQVEsS0FBSyxTQUFTO0FBQzNCLGVBQUssYUFBYSxLQUFLLElBQUksSUFBSSxLQUFLO0FBQ3BDLGlCQUFPLEtBQUssT0FBTyxNQUFNLElBQUk7QUFBQSxRQUMvQjtBQUFBLE1BQ0YsQ0FBQyxDQUFDO0FBQUEsSUFDSixFQUFFO0FBRUYsSUFBQUgsUUFBTyxVQUFVO0FBQUE7QUFBQTs7O0FDaEVqQixJQUFBSyxrQkFBQTtBQUFBLDRDQUFBQyxTQUFBO0FBQUE7QUFNQSxRQUFNLHFCQUFOLE1BQU0sNEJBQTJCLE1BQU07QUFBQSxNQUNyQyxZQUFZLFVBQVU7QUFDcEIsY0FBTTtBQUFBLFNBQ0QsU0FBUyxTQUFTLEVBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQUEsQ0FBSTtBQUUzQyxjQUFNLGtCQUFrQixNQUFNLG1CQUFrQjtBQUFBLE1BQ2xEO0FBQUEsSUFDRjtBQU1BLElBQUFBLFFBQU8sVUFBVSxjQUFZO0FBQzNCLFVBQUksU0FBUyxTQUFTLEdBQUc7QUFDdkIsY0FBTSxJQUFJLG1CQUFtQixRQUFRO0FBQUEsTUFDdkM7QUFPQSxlQUFTLE9BQU8sVUFBVSxDQUFDLEdBQUc7QUFDNUIsYUFBSyxVQUFVO0FBQUEsTUFDakI7QUFFQSxhQUFPLFVBQVUsWUFBWTtBQVE3QixlQUFTLGlCQUFpQixNQUFNO0FBQzlCLGVBQU8sSUFBSSxPQUFPLElBQUk7QUFBQSxNQUN4QjtBQU1BLHVCQUFpQixTQUFTO0FBQzFCLGFBQU87QUFBQSxJQUNUO0FBQUE7QUFBQTs7O0FDbkRBLElBQUFDLGdCQUFBO0FBQUEsMENBQUFDLFNBQUE7QUFBQTtBQUVBLFFBQU1DLFVBQVM7QUFDZixRQUFNLEVBQUUsUUFBUSxJQUFJO0FBQ3BCLFFBQU0sWUFBWTtBQU1sQixhQUFTLFNBQVMsS0FBSyxPQUFPO0FBSTVCLFVBQUksT0FBTyxVQUFVO0FBQ25CLGVBQU8sTUFBTSxTQUFTO0FBQ3hCLGFBQU87QUFBQSxJQUNUO0FBUUEsSUFBQUQsUUFBTyxVQUFVQyxRQUFPLENBQUMsTUFBTSxTQUFTO0FBQ3RDLFlBQU0sZ0JBQWdCLFVBQVUsVUFBVSxJQUFJO0FBQzlDLFdBQUssT0FBTyxJQUFJLGNBQWMsTUFBTSxLQUFLLFlBQVksVUFBVSxLQUFLLEtBQUs7QUFDekUsYUFBTztBQUFBLElBQ1QsQ0FBQztBQUFBO0FBQUE7OztBQzdCRCxJQUFBQyxrQkFBQTtBQUFBLHlEQUFBQyxTQUFBO0FBQUE7QUFTQSxhQUFTLGdCQUFnQixHQUFHLEdBQUcsR0FBRztBQUFFLGNBQVEsSUFBSSxlQUFlLENBQUMsTUFBTSxJQUFJLE9BQU8sZUFBZSxHQUFHLEdBQUcsRUFBRSxPQUFPLEdBQUcsWUFBWSxNQUFJLGNBQWMsTUFBSSxVQUFVLEtBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUc7QUFBQSxJQUFHO0FBQ25MLGFBQVMsUUFBUSxHQUFHO0FBQUU7QUFBMkIsYUFBTyxVQUFVLGNBQWMsT0FBTyxVQUFVLFlBQVksT0FBTyxPQUFPLFdBQVcsU0FBVUMsSUFBRztBQUFFLGVBQU8sT0FBT0E7QUFBQSxNQUFHLElBQUksU0FBVUEsSUFBRztBQUFFLGVBQU9BLE1BQUssY0FBYyxPQUFPLFVBQVVBLEdBQUUsZ0JBQWdCLFVBQVVBLE9BQU0sT0FBTyxZQUFZLFdBQVcsT0FBT0E7QUFBQSxNQUFHLEdBQUcsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUM3VCxhQUFTLGdCQUFnQixHQUFHQyxJQUFHO0FBQUUsVUFBSSxFQUFFLGFBQWFBLElBQUksT0FBTSxJQUFJLFVBQVUsbUNBQW1DO0FBQUEsSUFBRztBQUNsSCxhQUFTLGtCQUFrQixHQUFHLEdBQUc7QUFBRSxlQUFTLElBQUksR0FBRyxJQUFJLEVBQUUsUUFBUSxLQUFLO0FBQUUsWUFBSSxJQUFJLEVBQUUsQ0FBQztBQUFHLFVBQUUsYUFBYSxFQUFFLGNBQWMsT0FBSSxFQUFFLGVBQWUsTUFBSSxXQUFXLE1BQU0sRUFBRSxXQUFXLE9BQUssT0FBTyxlQUFlLEdBQUcsZUFBZSxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQUEsTUFBRztBQUFBLElBQUU7QUFDdk8sYUFBUyxhQUFhLEdBQUcsR0FBRyxHQUFHO0FBQUUsYUFBTyxLQUFLLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxHQUFHLEtBQUssa0JBQWtCLEdBQUcsQ0FBQyxHQUFHLE9BQU8sZUFBZSxHQUFHLGFBQWEsRUFBRSxVQUFVLE1BQUcsQ0FBQyxHQUFHO0FBQUEsSUFBRztBQUMxSyxhQUFTLGVBQWUsR0FBRztBQUFFLFVBQUksSUFBSSxhQUFhLEdBQUcsUUFBUTtBQUFHLGFBQU8sWUFBWSxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUk7QUFBQSxJQUFJO0FBQzVHLGFBQVMsYUFBYSxHQUFHLEdBQUc7QUFBRSxVQUFJLFlBQVksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFHLFFBQU87QUFBRyxVQUFJLElBQUksRUFBRSxPQUFPLFdBQVc7QUFBRyxVQUFJLFdBQVcsR0FBRztBQUFFLFlBQUksSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLFNBQVM7QUFBRyxZQUFJLFlBQVksUUFBUSxDQUFDLEVBQUcsUUFBTztBQUFHLGNBQU0sSUFBSSxVQUFVLDhDQUE4QztBQUFBLE1BQUc7QUFBRSxjQUFRLGFBQWEsSUFBSSxTQUFTLFFBQVEsQ0FBQztBQUFBLElBQUc7QUFDM1QsYUFBUyxXQUFXLEdBQUcsR0FBRyxHQUFHO0FBQUUsYUFBTyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCLElBQUksUUFBUSxVQUFVLEdBQUcsS0FBSyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxXQUFXLElBQUksRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFBRztBQUMxTSxhQUFTLDJCQUEyQixHQUFHLEdBQUc7QUFBRSxVQUFJLE1BQU0sWUFBWSxRQUFRLENBQUMsS0FBSyxjQUFjLE9BQU8sR0FBSSxRQUFPO0FBQUcsVUFBSSxXQUFXLEVBQUcsT0FBTSxJQUFJLFVBQVUsMERBQTBEO0FBQUcsYUFBTyx1QkFBdUIsQ0FBQztBQUFBLElBQUc7QUFDeFAsYUFBUyx1QkFBdUIsR0FBRztBQUFFLFVBQUksV0FBVyxFQUFHLE9BQU0sSUFBSSxlQUFlLDJEQUEyRDtBQUFHLGFBQU87QUFBQSxJQUFHO0FBQ3hKLGFBQVMsNEJBQTRCO0FBQUUsVUFBSTtBQUFFLFlBQUksSUFBSSxDQUFDLFFBQVEsVUFBVSxRQUFRLEtBQUssUUFBUSxVQUFVLFNBQVMsQ0FBQyxHQUFHLFdBQVk7QUFBQSxRQUFDLENBQUMsQ0FBQztBQUFBLE1BQUcsU0FBU0MsSUFBRztBQUFBLE1BQUM7QUFBRSxjQUFRLDRCQUE0QixTQUFTQyw2QkFBNEI7QUFBRSxlQUFPLENBQUMsQ0FBQztBQUFBLE1BQUcsR0FBRztBQUFBLElBQUc7QUFDbFAsYUFBUyxnQkFBZ0IsR0FBRztBQUFFLGFBQU8sa0JBQWtCLE9BQU8saUJBQWlCLE9BQU8sZUFBZSxLQUFLLElBQUksU0FBVUQsSUFBRztBQUFFLGVBQU9BLEdBQUUsYUFBYSxPQUFPLGVBQWVBLEVBQUM7QUFBQSxNQUFHLEdBQUcsZ0JBQWdCLENBQUM7QUFBQSxJQUFHO0FBQ3BNLGFBQVMsVUFBVSxHQUFHLEdBQUc7QUFBRSxVQUFJLGNBQWMsT0FBTyxLQUFLLFNBQVMsRUFBRyxPQUFNLElBQUksVUFBVSxvREFBb0Q7QUFBRyxRQUFFLFlBQVksT0FBTyxPQUFPLEtBQUssRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE9BQU8sR0FBRyxVQUFVLE1BQUksY0FBYyxLQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU8sZUFBZSxHQUFHLGFBQWEsRUFBRSxVQUFVLE1BQUcsQ0FBQyxHQUFHLEtBQUssZ0JBQWdCLEdBQUcsQ0FBQztBQUFBLElBQUc7QUFDblYsYUFBUyxnQkFBZ0IsR0FBRyxHQUFHO0FBQUUsYUFBTyxrQkFBa0IsT0FBTyxpQkFBaUIsT0FBTyxlQUFlLEtBQUssSUFBSSxTQUFVQSxJQUFHRSxJQUFHO0FBQUUsZUFBT0YsR0FBRSxZQUFZRSxJQUFHRjtBQUFBLE1BQUcsR0FBRyxnQkFBZ0IsR0FBRyxDQUFDO0FBQUEsSUFBRztBQUN4TCxRQUFJLFdBQVc7QUFBZixRQUNFLFNBQVMsU0FBUztBQURwQixRQUVFLFlBQVksU0FBUztBQUN2QixRQUFJLGVBQWU7QUFDbkIsUUFBSSxZQUFZO0FBQWhCLFFBQ0UsUUFBUSxVQUFVO0FBRHBCLFFBRUUsUUFBUSxVQUFVO0FBQ3BCLFFBQUksV0FBVztBQUNmLFFBQUksbUJBQW1CO0FBQ3ZCLFFBQUksbUJBQW1CO0FBQ3ZCLFFBQUksd0JBQXdCO0FBQzVCLFFBQUksV0FBVztBQUNmLFFBQUksWUFBWTtBQUFoQixRQUNFLE9BQU8sVUFBVTtBQUNuQixRQUFJLFNBQVM7QUFRYixRQUFJLGVBQWU7QUFPbkIsUUFBSSxTQUFzQix5QkFBVSxZQUFZO0FBTTlDLGVBQVNHLFFBQU8sU0FBUztBQUN2QixZQUFJO0FBQ0osd0JBQWdCLE1BQU1BLE9BQU07QUFDNUIsZ0JBQVEsV0FBVyxNQUFNQSxTQUFRLENBQUM7QUFBQSxVQUNoQyxZQUFZO0FBQUEsUUFDZCxDQUFDLENBQUM7QUFDRixjQUFNLFVBQVUsT0FBTztBQUN2QixlQUFPO0FBQUEsTUFDVDtBQUNBLGdCQUFVQSxTQUFRLFVBQVU7QUFDNUIsYUFBTyxhQUFhQSxTQUFRLENBQUM7QUFBQSxRQUMzQixLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsTUFBTSx3QkFBd0I7QUFDNUMsY0FBSUMsVUFBUztBQUNiLGlCQUFPLE9BQU8sT0FBT0EsU0FBUTtBQUFBLFlBQzNCLE9BQU87QUFBQSxjQUNMLE9BQU8sU0FBUyxNQUFNLE1BQU07QUFDMUIsb0JBQUksWUFBWSxPQUFPLE9BQU8sQ0FBQyxHQUFHLHdCQUF3QixJQUFJO0FBUTlELG9CQUFJLGdCQUFnQixPQUFPO0FBQ3pCLDRCQUFVLFFBQVEsS0FBSztBQUN2Qiw0QkFBVSxVQUFVLEtBQUs7QUFBQSxnQkFDM0I7QUFDQSxnQkFBQUEsUUFBTyxNQUFNLFNBQVM7QUFBQSxjQUN4QjtBQUFBLFlBQ0Y7QUFBQSxVQUNGLENBQUM7QUFBQSxRQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BVUYsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFlBQVk7QUFDMUIsY0FBSSxTQUFTO0FBQ2IsY0FBSSxPQUFPLFVBQVUsU0FBUyxLQUFLLFVBQVUsQ0FBQyxNQUFNLFNBQVksVUFBVSxDQUFDLElBQUksQ0FBQyxHQUM5RSxTQUFTLEtBQUssUUFDZEMsVUFBUyxLQUFLLFFBQ2QsY0FBYyxLQUFLLGFBQ25CLFNBQVMsS0FBSyxRQUNkLGFBQWEsS0FBSyxPQUNsQixRQUFRLGVBQWUsU0FBUyxTQUFTLFlBQ3pDLG1CQUFtQixLQUFLLGFBQ3hCLGNBQWMscUJBQXFCLFNBQVMsT0FBTyxrQkFDbkRDLGNBQWEsS0FBSyxZQUNsQixTQUFTLEtBQUssUUFDZCxXQUFXLEtBQUssVUFDaEIsYUFBYSxLQUFLLFlBQ2xCLFlBQVksS0FBSyxXQUNqQixZQUFZLEtBQUssV0FDakIsY0FBYyxLQUFLLGFBQ25CLG9CQUFvQixLQUFLLG1CQUN6QixvQkFBb0IsS0FBSztBQUUzQixjQUFJLEtBQUssV0FBVyxRQUFRO0FBQzFCLGlCQUFLLE1BQU07QUFBQSxVQUNiO0FBQ0EsZUFBSyxTQUFTO0FBQ2QsZUFBSyxTQUFTRCxXQUFVLEtBQUssVUFBVSxnQkFBd0I7QUFDL0QsZUFBSyxjQUFjLGVBQWU7QUFFbEMsZUFBSyxTQUFTLFVBQVUsS0FBSyxVQUFVLE9BQU8sSUFBSTtBQUNsRCxlQUFLLFFBQVE7QUFDYixjQUFJLEtBQUssWUFBWTtBQUNuQixpQkFBSyxXQUFXLFNBQVM7QUFBQSxVQUMzQjtBQUNBLGNBQUksS0FBSyxZQUFZO0FBQ25CLGlCQUFLLFdBQVcsU0FBUztBQUFBLFVBQzNCO0FBQ0EsZUFBSyxhQUFhLElBQUksaUJBQWlCLElBQUk7QUFDM0MsZUFBSyxhQUFhLElBQUksaUJBQWlCLElBQUk7QUFDM0MsZUFBSyxZQUFZLENBQUM7QUFDbEIsZUFBSyxjQUFjO0FBR25CLGNBQUlDLGFBQVk7QUFDZCxZQUFBQSxjQUFhLE1BQU0sUUFBUUEsV0FBVSxJQUFJQSxjQUFhLENBQUNBLFdBQVU7QUFDakUsWUFBQUEsWUFBVyxRQUFRLFNBQVUsV0FBVztBQUN0QyxxQkFBTyxPQUFPLElBQUksU0FBUztBQUFBLFlBQzdCLENBQUM7QUFBQSxVQUNIO0FBQ0EsY0FBSSxVQUFVLFlBQVksY0FBYyxhQUFhLGFBQWEsYUFBYTtBQUM3RSxrQkFBTSxJQUFJLE1BQU0sQ0FBQyxzR0FBc0csa0RBQWtELHNFQUFzRSxFQUFFLEtBQUssSUFBSSxDQUFDO0FBQUEsVUFDN1A7QUFDQSxjQUFJLG1CQUFtQjtBQUNyQixpQkFBSyxXQUFXLE9BQU8saUJBQWlCO0FBQUEsVUFDMUM7QUFDQSxjQUFJLG1CQUFtQjtBQUNyQixpQkFBSyxXQUFXLE9BQU8saUJBQWlCO0FBQUEsVUFDMUM7QUFBQSxRQUNGO0FBQUEsTUFDRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsZUFBZSxPQUFPO0FBQ3BDLGNBQUksU0FBUztBQUNiLGNBQUksa0JBQWtCLGNBQWMsS0FBSyxRQUFRLEtBQUs7QUFDdEQsY0FBSSxvQkFBb0IsTUFBTTtBQUM1QixtQkFBTztBQUFBLFVBQ1Q7QUFDQSxjQUFJLHVCQUF1QixjQUFjLEtBQUssUUFBUSxLQUFLLEtBQUs7QUFDaEUsY0FBSSx5QkFBeUIsTUFBTTtBQUNqQyxtQkFBTztBQUFBLFVBQ1Q7QUFDQSxjQUFJLENBQUMsS0FBSyxjQUFjLEtBQUssV0FBVyxXQUFXLEdBQUc7QUFDcEQsbUJBQU8sd0JBQXdCO0FBQUEsVUFDakM7QUFDQSxjQUFJLFFBQVEsS0FBSyxXQUFXLFVBQVUsU0FBVSxXQUFXO0FBQ3pELGdCQUFJLHNCQUFzQixjQUFjLE9BQU8sUUFBUSxVQUFVLEtBQUs7QUFDdEUsZ0JBQUksd0JBQXdCLE1BQU07QUFDaEMsb0NBQXNCO0FBQUEsWUFDeEI7QUFDQSxtQkFBTyx1QkFBdUI7QUFBQSxVQUNoQyxDQUFDO0FBQ0QsaUJBQU8sVUFBVTtBQUFBLFFBQ25CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFnQ0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLElBQUksT0FBTyxLQUFLO0FBQzlCLG1CQUFTLE9BQU8sVUFBVSxRQUFRLFFBQVEsSUFBSSxNQUFNLE9BQU8sSUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLE9BQU8sR0FBRyxPQUFPLE1BQU0sUUFBUTtBQUMzRyxrQkFBTSxPQUFPLENBQUMsSUFBSSxVQUFVLElBQUk7QUFBQSxVQUNsQztBQUdBLGNBQUksVUFBVSxXQUFXLEdBQUc7QUFJMUIsa0JBQU0sS0FBSyxJQUFJLE1BQU07QUFDckIsaUJBQUssZ0JBQWdCLEtBQUs7QUFDMUIsaUJBQUssTUFBTSxLQUFLO0FBQ2hCLG1CQUFPO0FBQUEsVUFDVDtBQUdBLGNBQUksVUFBVSxXQUFXLEdBQUc7QUFDMUIsZ0JBQUksT0FBTyxRQUFRLEdBQUcsTUFBTSxVQUFVO0FBQ3BDLGtCQUFJLEtBQUssSUFBSSxJQUFJLFFBQVE7QUFDekIsbUJBQUssZ0JBQWdCLEdBQUc7QUFDeEIsbUJBQUssTUFBTSxHQUFHO0FBQ2QscUJBQU87QUFBQSxZQUNUO0FBQ0Esa0JBQU0sZ0JBQWdCLGdCQUFnQixnQkFBZ0IsQ0FBQyxHQUFHLE9BQU8sS0FBSyxHQUFHLFNBQVMsS0FBSyxHQUFHLFdBQVcsR0FBRztBQUN4RyxpQkFBSyxnQkFBZ0IsR0FBRztBQUN4QixpQkFBSyxNQUFNLEdBQUc7QUFDZCxtQkFBTztBQUFBLFVBQ1Q7QUFDQSxjQUFJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLGNBQUksUUFBUSxJQUFJLE1BQU0sWUFBWSxTQUFTLE1BQU07QUFHL0MsZ0JBQUksU0FBUyxPQUFPLElBQUksU0FBUyxJQUFJLE1BQU0sWUFBWTtBQUN2RCxnQkFBSSxDQUFDLFFBQVE7QUFDWCxrQkFBSSxPQUFPLE9BQU8sT0FBTyxDQUFDLEdBQUcsS0FBSyxhQUFhLE1BQU0sZ0JBQWdCLGdCQUFnQixnQkFBZ0IsZ0JBQWdCLENBQUMsR0FBRyxPQUFPLEtBQUssR0FBRyxPQUFPLEtBQUssR0FBRyxTQUFTLEtBQUssR0FBRyxXQUFXLEdBQUcsQ0FBQztBQUN2TCxrQkFBSSxLQUFLLFFBQVMsTUFBSyxVQUFVLEdBQUcsT0FBTyxLQUFLLFNBQVMsR0FBRyxFQUFFLE9BQU8sS0FBSyxPQUFPO0FBQ2pGLGtCQUFJLEtBQUssTUFBTyxNQUFLLFFBQVEsS0FBSztBQUNsQyxrQkFBSSxLQUFLLE1BQU8sTUFBSyxRQUFRLEtBQUs7QUFDbEMsbUJBQUssTUFBTSxJQUFJO0FBQ2YscUJBQU87QUFBQSxZQUNUO0FBQUEsVUFDRjtBQUNBLGVBQUssTUFBTSxPQUFPLE9BQU8sQ0FBQyxHQUFHLEtBQUssYUFBYSxnQkFBZ0IsZ0JBQWdCLGdCQUFnQixnQkFBZ0IsQ0FBQyxHQUFHLE9BQU8sS0FBSyxHQUFHLE9BQU8sS0FBSyxHQUFHLFNBQVMsS0FBSyxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDbEwsaUJBQU87QUFBQSxRQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BVUYsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFdBQVcsTUFBTSxLQUFLLFVBQVU7QUFDOUMsY0FBSSxLQUFLLFFBQVE7QUFDZixtQkFBTyxTQUFTO0FBQUEsVUFDbEI7QUFTQSxjQUFJLENBQUMsS0FBSyxLQUFLLEdBQUc7QUFDaEIsaUJBQUssS0FBSyxJQUFJLEtBQUs7QUFBQSxVQUNyQjtBQUtBLGNBQUksQ0FBQyxLQUFLLE9BQU8sS0FBSyxLQUFLLENBQUMsS0FBSyxLQUFLLE9BQU8sS0FBSyxLQUFLLENBQUMsTUFBTSxHQUFHO0FBRS9ELG9CQUFRLE1BQU0sc0NBQXNDLEtBQUssS0FBSyxDQUFDO0FBQUEsVUFDakU7QUFHQSxjQUFJLENBQUMsS0FBSyxlQUFlLE9BQU87QUFFOUIsb0JBQVEsTUFBTSwyRkFBMkYsSUFBSTtBQUFBLFVBQy9HO0FBTUEsY0FBSTtBQUNGLGlCQUFLLEtBQUssS0FBSyxPQUFPLFVBQVUsTUFBTSxLQUFLLE9BQU8sT0FBTyxDQUFDO0FBQUEsVUFDNUQsVUFBRTtBQUNBLGlCQUFLLGVBQWUsT0FBTztBQUUzQixxQkFBUztBQUFBLFVBQ1g7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BT0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLE9BQU8sVUFBVTtBQUMvQixjQUFJQSxjQUFhLEtBQUssV0FBVyxNQUFNO0FBQ3ZDLHVCQUFhQSxhQUFZLFNBQVUsV0FBVyxNQUFNO0FBQ2xELGdCQUFJLENBQUMsYUFBYSxVQUFVLFNBQVUsUUFBTyxhQUFhLElBQUk7QUFDOUQsc0JBQVUsS0FBSyxVQUFVLElBQUk7QUFDN0Isc0JBQVUsSUFBSTtBQUFBLFVBQ2hCLEdBQUcsUUFBUTtBQUFBLFFBQ2I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFPRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsSUFBSSxXQUFXO0FBTTdCLGNBQUksU0FBUyxDQUFDLFNBQVMsU0FBUyxLQUFLLFVBQVUsSUFBSSxTQUFTLElBQUksSUFBSSxzQkFBc0I7QUFBQSxZQUN4RjtBQUFBLFVBQ0YsQ0FBQyxJQUFJO0FBQ0wsY0FBSSxDQUFDLE9BQU8sa0JBQWtCLENBQUMsT0FBTyxlQUFlLFlBQVk7QUFDL0Qsa0JBQU0sSUFBSSxNQUFNLDBFQUEwRTtBQUFBLFVBQzVGO0FBR0EsZUFBSyxTQUFTLFNBQVMsTUFBTTtBQUM3QixlQUFLLFNBQVMsUUFBUSxNQUFNO0FBQzVCLGVBQUssS0FBSyxNQUFNO0FBQ2hCLGNBQUksVUFBVSxrQkFBa0I7QUFDOUIsaUJBQUssV0FBVyxPQUFPO0FBQUEsVUFDekI7QUFDQSxjQUFJLFVBQVUsa0JBQWtCO0FBQzlCLGlCQUFLLFdBQVcsT0FBTztBQUFBLFVBQ3pCO0FBQ0EsaUJBQU87QUFBQSxRQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BT0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLE9BQU8sV0FBVztBQUNoQyxjQUFJLENBQUMsVUFBVyxRQUFPO0FBQ3ZCLGNBQUksU0FBUztBQUNiLGNBQUksQ0FBQyxTQUFTLFNBQVMsS0FBSyxVQUFVLElBQUksU0FBUyxHQUFHO0FBQ3BELHFCQUFTLEtBQUssV0FBVyxPQUFPLFNBQVVDLFFBQU87QUFDL0MscUJBQU9BLE9BQU0sY0FBYztBQUFBLFlBQzdCLENBQUMsRUFBRSxDQUFDO0FBQUEsVUFDTjtBQUNBLGNBQUksUUFBUTtBQUNWLGlCQUFLLE9BQU8sTUFBTTtBQUFBLFVBQ3BCO0FBQ0EsaUJBQU87QUFBQSxRQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU1GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxRQUFRO0FBQ3RCLGVBQUssT0FBTztBQUNaLGlCQUFPO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxRQUFRO0FBQ3RCLGVBQUssV0FBVyxTQUFTO0FBQ3pCLGVBQUssV0FBVyxTQUFTO0FBQ3pCLGVBQUssTUFBTTtBQUNYLGVBQUssS0FBSyxPQUFPO0FBQ2pCLGlCQUFPO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFNRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsWUFBWTtBQUMxQixlQUFLLFdBQVcsV0FBVztBQUFBLFFBQzdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVNGLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxNQUFNLFNBQVMsVUFBVTtBQUN2QyxjQUFJLE9BQU8sWUFBWSxZQUFZO0FBQ2pDLHVCQUFXO0FBQ1gsc0JBQVUsQ0FBQztBQUFBLFVBQ2I7QUFDQSxvQkFBVSxXQUFXLENBQUM7QUFDdEIsY0FBSSxVQUFVLENBQUM7QUFDZixjQUFJLGNBQWMsT0FBTyxPQUFPLENBQUMsR0FBRyxRQUFRLFNBQVMsQ0FBQyxDQUFDO0FBR3ZELG1CQUFTLGVBQWUsV0FBVyxNQUFNO0FBQ3ZDLGdCQUFJLFFBQVEsU0FBUyxPQUFPLFVBQVUsZ0JBQWdCLFlBQVk7QUFDaEUsc0JBQVEsUUFBUSxVQUFVLFlBQVksV0FBVztBQUFBLFlBQ25EO0FBQ0Esc0JBQVUsTUFBTSxTQUFTLFNBQVUsS0FBSyxLQUFLO0FBQzNDLGtCQUFJLEtBQUs7QUFDUCx1QkFBTyxLQUFLLEdBQUc7QUFBQSxjQUNqQjtBQUNBLGtCQUFJLE9BQU8sVUFBVSxrQkFBa0IsWUFBWTtBQUNqRCxzQkFBTSxVQUFVLGNBQWMsS0FBSyxRQUFRLE1BQU07QUFBQSxjQUNuRDtBQUNBLG1CQUFLLE1BQU0sR0FBRztBQUFBLFlBQ2hCLENBQUM7QUFBQSxVQUNIO0FBSUEsbUJBQVMsV0FBVyxXQUFXLE1BQU07QUFDbkMsMkJBQWUsV0FBVyxTQUFVLEtBQUssUUFBUTtBQUcvQyxrQkFBSSxNQUFNO0FBQ1IseUJBQVMsT0FBTztBQUNoQixvQkFBSSxRQUFRO0FBQ1YsMEJBQVEsVUFBVSxJQUFJLElBQUk7QUFBQSxnQkFDNUI7QUFHQSxxQkFBSztBQUFBLGNBQ1A7QUFDQSxxQkFBTztBQUFBLFlBQ1QsQ0FBQztBQUFBLFVBQ0g7QUFJQSx1QkFBYSxLQUFLLFdBQVcsT0FBTyxTQUFVLFdBQVc7QUFDdkQsbUJBQU8sQ0FBQyxDQUFDLFVBQVU7QUFBQSxVQUNyQixDQUFDLEdBQUcsWUFBWSxXQUFZO0FBQzFCLG1CQUFPLFNBQVMsTUFBTSxPQUFPO0FBQUEsVUFDL0IsQ0FBQztBQUFBLFFBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFPRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsU0FBUztBQUN2QixjQUFJLFVBQVUsVUFBVSxTQUFTLEtBQUssVUFBVSxDQUFDLE1BQU0sU0FBWSxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQ25GLGNBQUksTUFBTSxJQUFJLE9BQU87QUFDckIsY0FBSSxVQUFVLENBQUM7QUFDZixjQUFJLFdBQVc7QUFDZixjQUFJLFVBQVUsV0FBWTtBQUN4QixnQkFBSSxJQUFJLFFBQVE7QUFDaEIsbUJBQU8sS0FBSztBQUNWLHNCQUFRLENBQUMsRUFBRSxRQUFRO0FBQUEsWUFDckI7QUFBQSxVQUNGO0FBR0EsZUFBSyxXQUFXLE9BQU8sU0FBVSxXQUFXO0FBQzFDLG1CQUFPLENBQUMsQ0FBQyxVQUFVO0FBQUEsVUFDckIsQ0FBQyxFQUFFLFFBQVEsU0FBVSxXQUFXO0FBQzlCLGdCQUFJLE1BQU0sVUFBVSxPQUFPLE9BQU87QUFDbEMsZ0JBQUksQ0FBQyxLQUFLO0FBQ1I7QUFBQSxZQUNGO0FBQ0Esb0JBQVEsS0FBSyxHQUFHO0FBQ2hCLGdCQUFJLEdBQUcsT0FBTyxTQUFVLEtBQUs7QUFDM0Isa0JBQUksWUFBWSxJQUFJLGFBQWEsQ0FBQztBQUNsQyxrQkFBSSxVQUFVLEtBQUssVUFBVSxJQUFJO0FBQ2pDLGtCQUFJLEtBQUssT0FBTyxHQUFHO0FBQUEsWUFDckIsQ0FBQztBQUNELGdCQUFJLEdBQUcsU0FBUyxTQUFVLEtBQUs7QUFDN0Isa0JBQUksWUFBWSxJQUFJLGFBQWEsQ0FBQztBQUNsQyxrQkFBSSxVQUFVLEtBQUssVUFBVSxJQUFJO0FBQ2pDLGtCQUFJLEtBQUssU0FBUyxHQUFHO0FBQUEsWUFDdkIsQ0FBQztBQUFBLFVBQ0gsQ0FBQztBQUNELGlCQUFPO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BY0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLGFBQWE7QUFDM0IsaUJBQU8sSUFBSSxTQUFTLElBQUk7QUFBQSxRQUMxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFTRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsUUFBUSxJQUFJO0FBQzFCLGNBQUksT0FBTyxLQUFLLElBQUk7QUFDcEIsY0FBSSxLQUFLLFVBQVUsRUFBRSxHQUFHO0FBQ3RCLGdCQUFJLFVBQVUsS0FBSyxVQUFVLEVBQUU7QUFDL0IsbUJBQU8sS0FBSyxVQUFVLEVBQUU7QUFHeEIscUJBQVMsUUFBUSxVQUFVLFFBQVEsT0FBTyxJQUFJLE1BQU0sUUFBUSxJQUFJLFFBQVEsSUFBSSxDQUFDLEdBQUcsUUFBUSxHQUFHLFFBQVEsT0FBTyxTQUFTO0FBQ2pILG1CQUFLLFFBQVEsQ0FBQyxJQUFJLFVBQVUsS0FBSztBQUFBLFlBQ25DO0FBQ0EsZ0JBQUksT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDLE1BQU0sWUFBWTtBQUUvQyxzQkFBUSxLQUFLLDJEQUEyRDtBQUN4RSxtQkFBSyxJQUFJO0FBQUEsWUFDWDtBQUdBLGdCQUFJLE9BQU8sUUFBUSxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsTUFBTSxXQUFXLEtBQUssSUFBSSxJQUFJLENBQUM7QUFDdkUsaUJBQUssUUFBUSxLQUFLLFNBQVM7QUFDM0IsaUJBQUssYUFBYSxPQUFPO0FBQ3pCLGlCQUFLLFVBQVUsS0FBSyxXQUFXO0FBQy9CLG1CQUFPLEtBQUssTUFBTSxJQUFJO0FBQUEsVUFDeEI7QUFDQSxlQUFLLFVBQVUsRUFBRSxJQUFJO0FBQ3JCLGlCQUFPO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxtQkFBbUI7QUFDakMsY0FBSTtBQUVKLGtCQUFRLEtBQUssd0ZBQXdGO0FBQ3JHLFdBQUMsbUJBQW1CLEtBQUssWUFBWSxPQUFPLE1BQU0sa0JBQWtCLFNBQVM7QUFBQSxRQUMvRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU9GLEdBQUc7QUFBQSxRQUNELEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxxQkFBcUI7QUFDbkMsY0FBSTtBQUVKLGtCQUFRLEtBQUssNEZBQTRGO0FBQ3pHLFdBQUMsb0JBQW9CLEtBQUssWUFBWSxTQUFTLE1BQU0sbUJBQW1CLFNBQVM7QUFBQSxRQUNuRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFNRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsTUFBTTtBQUNwQixnQkFBTSxJQUFJLE1BQU0sQ0FBQyw2Q0FBNkMsK0NBQStDLHNFQUFzRSxFQUFFLEtBQUssSUFBSSxDQUFDO0FBQUEsUUFDak07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BU0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFNBQVMsT0FBTyxXQUFXO0FBQ3pDLG1CQUFTLGVBQWUsS0FBSztBQUUzQixnQkFBSSxVQUFVLFdBQVcsQ0FBQyxLQUFLLFdBQVcsU0FBUyxTQUFTLEdBQUc7QUFDN0QsbUJBQUssSUFBSSxTQUFTO0FBQUEsWUFDcEI7QUFDQSxpQkFBSyxLQUFLLE9BQU8sS0FBSyxTQUFTO0FBQUEsVUFDakM7QUFDQSxjQUFJLENBQUMsVUFBVSxjQUFjLEtBQUssR0FBRztBQUNuQyxzQkFBVSxjQUFjLEtBQUssSUFBSSxlQUFlLEtBQUssSUFBSTtBQUN6RCxzQkFBVSxHQUFHLE9BQU8sVUFBVSxjQUFjLEtBQUssQ0FBQztBQUFBLFVBQ3BEO0FBQUEsUUFDRjtBQUFBLE1BQ0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLGdCQUFnQixLQUFLO0FBQ25DLGNBQUksS0FBSyxhQUFhO0FBQ3BCLG1CQUFPLE9BQU8sS0FBSyxLQUFLLFdBQVc7QUFBQSxVQUNyQztBQUFBLFFBQ0Y7QUFBQSxNQUNGLENBQUMsQ0FBQztBQUFBLElBQ0osRUFBRSxTQUFTO0FBQ1gsYUFBUyxjQUFjLFFBQVEsT0FBTztBQUNwQyxVQUFJLFFBQVEsT0FBTyxLQUFLO0FBQ3hCLFVBQUksQ0FBQyxTQUFTLFVBQVUsR0FBRztBQUN6QixlQUFPO0FBQUEsTUFDVDtBQUNBLGFBQU87QUFBQSxJQUNUO0FBTUEsV0FBTyxlQUFlLE9BQU8sV0FBVyxjQUFjO0FBQUEsTUFDcEQsY0FBYztBQUFBLE1BQ2QsWUFBWTtBQUFBLE1BQ1osS0FBSyxTQUFTLE1BQU07QUFDbEIsWUFBSSxRQUFRLEtBQUssZUFBZTtBQUNoQyxlQUFPLENBQUMsTUFBTSxRQUFRLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLE9BQU8sSUFBSTtBQUFBLE1BQzNEO0FBQUEsSUFDRixDQUFDO0FBQ0QsSUFBQVYsUUFBTyxVQUFVO0FBQUE7QUFBQTs7O0FDL3BCakI7QUFBQSxnRUFBQVcsU0FBQTtBQUFBO0FBU0EsYUFBUyxRQUFRLEdBQUc7QUFBRTtBQUEyQixhQUFPLFVBQVUsY0FBYyxPQUFPLFVBQVUsWUFBWSxPQUFPLE9BQU8sV0FBVyxTQUFVQyxJQUFHO0FBQUUsZUFBTyxPQUFPQTtBQUFBLE1BQUcsSUFBSSxTQUFVQSxJQUFHO0FBQUUsZUFBT0EsTUFBSyxjQUFjLE9BQU8sVUFBVUEsR0FBRSxnQkFBZ0IsVUFBVUEsT0FBTSxPQUFPLFlBQVksV0FBVyxPQUFPQTtBQUFBLE1BQUcsR0FBRyxRQUFRLENBQUM7QUFBQSxJQUFHO0FBQzdULGFBQVMsa0JBQWtCLEdBQUcsR0FBRztBQUFFLGVBQVMsSUFBSSxHQUFHLElBQUksRUFBRSxRQUFRLEtBQUs7QUFBRSxZQUFJLElBQUksRUFBRSxDQUFDO0FBQUcsVUFBRSxhQUFhLEVBQUUsY0FBYyxPQUFJLEVBQUUsZUFBZSxNQUFJLFdBQVcsTUFBTSxFQUFFLFdBQVcsT0FBSyxPQUFPLGVBQWUsR0FBRyxlQUFlLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFBQSxNQUFHO0FBQUEsSUFBRTtBQUN2TyxhQUFTLGFBQWEsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLEtBQUssa0JBQWtCLEVBQUUsV0FBVyxDQUFDLEdBQUcsS0FBSyxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUc7QUFBQSxJQUFHO0FBQzFLLGFBQVMsZUFBZSxHQUFHO0FBQUUsVUFBSSxJQUFJLGFBQWEsR0FBRyxRQUFRO0FBQUcsYUFBTyxZQUFZLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTtBQUFBLElBQUk7QUFDNUcsYUFBUyxhQUFhLEdBQUcsR0FBRztBQUFFLFVBQUksWUFBWSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUcsUUFBTztBQUFHLFVBQUksSUFBSSxFQUFFLE9BQU8sV0FBVztBQUFHLFVBQUksV0FBVyxHQUFHO0FBQUUsWUFBSSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssU0FBUztBQUFHLFlBQUksWUFBWSxRQUFRLENBQUMsRUFBRyxRQUFPO0FBQUcsY0FBTSxJQUFJLFVBQVUsOENBQThDO0FBQUEsTUFBRztBQUFFLGNBQVEsYUFBYSxJQUFJLFNBQVMsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUMzVCxhQUFTLGdCQUFnQixHQUFHQyxJQUFHO0FBQUUsVUFBSSxFQUFFLGFBQWFBLElBQUksT0FBTSxJQUFJLFVBQVUsbUNBQW1DO0FBQUEsSUFBRztBQUNsSCxhQUFTLFdBQVcsR0FBRyxHQUFHLEdBQUc7QUFBRSxhQUFPLElBQUksZ0JBQWdCLENBQUMsR0FBRywyQkFBMkIsR0FBRywwQkFBMEIsSUFBSSxRQUFRLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLFdBQVcsSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFBQSxJQUFHO0FBQzFNLGFBQVMsMkJBQTJCLEdBQUcsR0FBRztBQUFFLFVBQUksTUFBTSxZQUFZLFFBQVEsQ0FBQyxLQUFLLGNBQWMsT0FBTyxHQUFJLFFBQU87QUFBRyxVQUFJLFdBQVcsRUFBRyxPQUFNLElBQUksVUFBVSwwREFBMEQ7QUFBRyxhQUFPLHVCQUF1QixDQUFDO0FBQUEsSUFBRztBQUN4UCxhQUFTLHVCQUF1QixHQUFHO0FBQUUsVUFBSSxXQUFXLEVBQUcsT0FBTSxJQUFJLGVBQWUsMkRBQTJEO0FBQUcsYUFBTztBQUFBLElBQUc7QUFDeEosYUFBUyw0QkFBNEI7QUFBRSxVQUFJO0FBQUUsWUFBSSxJQUFJLENBQUMsUUFBUSxVQUFVLFFBQVEsS0FBSyxRQUFRLFVBQVUsU0FBUyxDQUFDLEdBQUcsV0FBWTtBQUFBLFFBQUMsQ0FBQyxDQUFDO0FBQUEsTUFBRyxTQUFTQyxJQUFHO0FBQUEsTUFBQztBQUFFLGNBQVEsNEJBQTRCLFNBQVNDLDZCQUE0QjtBQUFFLGVBQU8sQ0FBQyxDQUFDO0FBQUEsTUFBRyxHQUFHO0FBQUEsSUFBRztBQUNsUCxhQUFTLGdCQUFnQixHQUFHO0FBQUUsYUFBTyxrQkFBa0IsT0FBTyxpQkFBaUIsT0FBTyxlQUFlLEtBQUssSUFBSSxTQUFVRCxJQUFHO0FBQUUsZUFBT0EsR0FBRSxhQUFhLE9BQU8sZUFBZUEsRUFBQztBQUFBLE1BQUcsR0FBRyxnQkFBZ0IsQ0FBQztBQUFBLElBQUc7QUFDcE0sYUFBUyxVQUFVLEdBQUcsR0FBRztBQUFFLFVBQUksY0FBYyxPQUFPLEtBQUssU0FBUyxFQUFHLE9BQU0sSUFBSSxVQUFVLG9EQUFvRDtBQUFHLFFBQUUsWUFBWSxPQUFPLE9BQU8sS0FBSyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxHQUFHLFVBQVUsTUFBSSxjQUFjLEtBQUcsRUFBRSxDQUFDLEdBQUcsT0FBTyxlQUFlLEdBQUcsYUFBYSxFQUFFLFVBQVUsTUFBRyxDQUFDLEdBQUcsS0FBSyxnQkFBZ0IsR0FBRyxDQUFDO0FBQUEsSUFBRztBQUNuVixhQUFTLGdCQUFnQixHQUFHLEdBQUc7QUFBRSxhQUFPLGtCQUFrQixPQUFPLGlCQUFpQixPQUFPLGVBQWUsS0FBSyxJQUFJLFNBQVVBLElBQUdFLElBQUc7QUFBRSxlQUFPRixHQUFFLFlBQVlFLElBQUdGO0FBQUEsTUFBRyxHQUFHLGdCQUFnQixHQUFHLENBQUM7QUFBQSxJQUFHO0FBQ3hMLFFBQUksV0FBVztBQUFmLFFBQ0UsUUFBUSxTQUFTO0FBQ25CLFFBQUksU0FBUztBQUNiLFFBQUksU0FBUztBQUNiLFFBQUksUUFBUSxtQkFBNkIsdUJBQXVCO0FBQ2hFLGFBQVMsMkJBQTJCLE9BQU87QUFDekMsYUFBTyxPQUFPLE1BQU0sT0FBTyxDQUFDLEVBQUUsWUFBWSxJQUFJLE1BQU0sTUFBTSxDQUFDLElBQUk7QUFBQSxJQUNqRTtBQVFBLElBQUFILFFBQU8sVUFBVSxXQUFZO0FBQzNCLFVBQUksT0FBTyxVQUFVLFNBQVMsS0FBSyxVQUFVLENBQUMsTUFBTSxTQUFZLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFJaEYsV0FBSyxTQUFTLEtBQUssVUFBVSxPQUFPLElBQUk7QUFPeEMsVUFBSSxnQkFBNkIseUJBQVUsU0FBUztBQU9sRCxpQkFBU00sZUFBYyxTQUFTO0FBQzlCLDBCQUFnQixNQUFNQSxjQUFhO0FBQ25DLGlCQUFPLFdBQVcsTUFBTUEsZ0JBQWUsQ0FBQyxPQUFPLENBQUM7QUFBQSxRQUNsRDtBQUNBLGtCQUFVQSxnQkFBZSxPQUFPO0FBQ2hDLGVBQU8sYUFBYUEsY0FBYTtBQUFBLE1BQ25DLEVBQUUsTUFBTTtBQUNSLFVBQUlDLFVBQVMsSUFBSSxjQUFjLElBQUk7QUFLbkMsYUFBTyxLQUFLLEtBQUssTUFBTSxFQUFFLFFBQVEsU0FBVSxPQUFPO0FBQ2hELGNBQU0sb0NBQW9DLEtBQUs7QUFDL0MsWUFBSSxVQUFVLE9BQU87QUFFbkIsa0JBQVEsS0FBSyx1RkFBdUY7QUFDcEc7QUFBQSxRQUNGO0FBWUEsc0JBQWMsVUFBVSxLQUFLLElBQUksV0FBWTtBQUUzQyxjQUFJQyxRQUFPLFFBQVFEO0FBR25CLG1CQUFTLE9BQU8sVUFBVSxRQUFRLE9BQU8sSUFBSSxNQUFNLElBQUksR0FBRyxPQUFPLEdBQUcsT0FBTyxNQUFNLFFBQVE7QUFDdkYsaUJBQUssSUFBSSxJQUFJLFVBQVUsSUFBSTtBQUFBLFVBQzdCO0FBQ0EsY0FBSSxLQUFLLFdBQVcsR0FBRztBQUNyQixnQkFBSSxNQUFNLEtBQUssQ0FBQztBQUNoQixnQkFBSSxPQUFPLE9BQU8sSUFBSSxXQUFXLE9BQU87QUFBQSxjQUN0QyxTQUFTO0FBQUEsWUFDWDtBQUNBLGlCQUFLLFFBQVEsS0FBSyxLQUFLLElBQUk7QUFDM0IsWUFBQUMsTUFBSyxnQkFBZ0IsSUFBSTtBQUN6QixZQUFBQSxNQUFLLE1BQU0sSUFBSTtBQUNmLG1CQUFPLFFBQVFEO0FBQUEsVUFDakI7QUFHQSxjQUFJLEtBQUssV0FBVyxHQUFHO0FBQ3JCLFlBQUFDLE1BQUssSUFBSSxPQUFPLEVBQUU7QUFDbEIsbUJBQU9BO0FBQUEsVUFDVDtBQU1BLGlCQUFPQSxNQUFLLElBQUksTUFBTUEsT0FBTSxDQUFDLEtBQUssRUFBRSxPQUFPLElBQUksQ0FBQztBQUFBLFFBQ2xEO0FBQ0Esc0JBQWMsVUFBVSwyQkFBMkIsS0FBSyxDQUFDLElBQUksV0FBWTtBQUN2RSxrQkFBUSxRQUFRRCxTQUFRLGVBQWUsS0FBSztBQUFBLFFBQzlDO0FBQUEsTUFDRixDQUFDO0FBQ0QsYUFBT0E7QUFBQSxJQUNUO0FBQUE7QUFBQTs7O0FDMUhBO0FBQUEsNERBQUFFLFNBQUE7QUFBQTtBQVNBLGFBQVMsUUFBUSxHQUFHO0FBQUU7QUFBMkIsYUFBTyxVQUFVLGNBQWMsT0FBTyxVQUFVLFlBQVksT0FBTyxPQUFPLFdBQVcsU0FBVUMsSUFBRztBQUFFLGVBQU8sT0FBT0E7QUFBQSxNQUFHLElBQUksU0FBVUEsSUFBRztBQUFFLGVBQU9BLE1BQUssY0FBYyxPQUFPLFVBQVVBLEdBQUUsZ0JBQWdCLFVBQVVBLE9BQU0sT0FBTyxZQUFZLFdBQVcsT0FBT0E7QUFBQSxNQUFHLEdBQUcsUUFBUSxDQUFDO0FBQUEsSUFBRztBQUM3VCxhQUFTLGdCQUFnQixHQUFHQyxJQUFHO0FBQUUsVUFBSSxFQUFFLGFBQWFBLElBQUksT0FBTSxJQUFJLFVBQVUsbUNBQW1DO0FBQUEsSUFBRztBQUNsSCxhQUFTLGtCQUFrQixHQUFHLEdBQUc7QUFBRSxlQUFTLElBQUksR0FBRyxJQUFJLEVBQUUsUUFBUSxLQUFLO0FBQUUsWUFBSSxJQUFJLEVBQUUsQ0FBQztBQUFHLFVBQUUsYUFBYSxFQUFFLGNBQWMsT0FBSSxFQUFFLGVBQWUsTUFBSSxXQUFXLE1BQU0sRUFBRSxXQUFXLE9BQUssT0FBTyxlQUFlLEdBQUcsZUFBZSxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQUEsTUFBRztBQUFBLElBQUU7QUFDdk8sYUFBUyxhQUFhLEdBQUcsR0FBRyxHQUFHO0FBQUUsYUFBTyxLQUFLLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxHQUFHLEtBQUssa0JBQWtCLEdBQUcsQ0FBQyxHQUFHLE9BQU8sZUFBZSxHQUFHLGFBQWEsRUFBRSxVQUFVLE1BQUcsQ0FBQyxHQUFHO0FBQUEsSUFBRztBQUMxSyxhQUFTLGVBQWUsR0FBRztBQUFFLFVBQUksSUFBSSxhQUFhLEdBQUcsUUFBUTtBQUFHLGFBQU8sWUFBWSxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUk7QUFBQSxJQUFJO0FBQzVHLGFBQVMsYUFBYSxHQUFHLEdBQUc7QUFBRSxVQUFJLFlBQVksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFHLFFBQU87QUFBRyxVQUFJLElBQUksRUFBRSxPQUFPLFdBQVc7QUFBRyxVQUFJLFdBQVcsR0FBRztBQUFFLFlBQUksSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLFNBQVM7QUFBRyxZQUFJLFlBQVksUUFBUSxDQUFDLEVBQUcsUUFBTztBQUFHLGNBQU0sSUFBSSxVQUFVLDhDQUE4QztBQUFBLE1BQUc7QUFBRSxjQUFRLGFBQWEsSUFBSSxTQUFTLFFBQVEsQ0FBQztBQUFBLElBQUc7QUFDM1QsUUFBSUMsZ0JBQWU7QUFNbkIsSUFBQUgsUUFBTyxVQUF1QiwyQkFBWTtBQU14QyxlQUFTLFlBQVk7QUFDbkIsWUFBSSxVQUFVLFVBQVUsU0FBUyxLQUFLLFVBQVUsQ0FBQyxNQUFNLFNBQVksVUFBVSxDQUFDLElBQUksQ0FBQztBQUNuRix3QkFBZ0IsTUFBTSxTQUFTO0FBQy9CLGFBQUssVUFBVSxvQkFBSSxJQUFJO0FBQ3ZCLGFBQUssVUFBVTtBQUFBLE1BQ2pCO0FBU0EsYUFBTyxhQUFhLFdBQVcsQ0FBQztBQUFBLFFBQzlCLEtBQUs7QUFBQSxRQUNMLE9BQU8sU0FBUyxJQUFJLElBQUksU0FBUztBQUMvQixjQUFJLFFBQVE7QUFDWixjQUFJLENBQUMsS0FBSyxRQUFRLElBQUksRUFBRSxHQUFHO0FBR3pCLHNCQUFVLE9BQU8sT0FBTyxDQUFDLEdBQUcsV0FBVyxLQUFLLE9BQU87QUFDbkQsZ0JBQUksV0FBVyxRQUFRLGNBQWMsS0FBSyxRQUFRO0FBSWxELGdCQUFJLFVBQVU7QUFDWixzQkFBUSxhQUFhLE1BQU0sUUFBUSxRQUFRLElBQUksU0FBUyxNQUFNLElBQUksQ0FBQyxRQUFRO0FBQUEsWUFDN0UsT0FBTztBQUNMLHNCQUFRLGFBQWEsQ0FBQztBQUFBLFlBQ3hCO0FBQ0EsZ0JBQUlJLFVBQVNELGNBQWEsT0FBTztBQUNqQyxZQUFBQyxRQUFPLEdBQUcsU0FBUyxXQUFZO0FBQzdCLHFCQUFPLE1BQU0sUUFBUSxFQUFFO0FBQUEsWUFDekIsQ0FBQztBQUNELGlCQUFLLFFBQVEsSUFBSSxJQUFJQSxPQUFNO0FBQUEsVUFDN0I7QUFDQSxpQkFBTyxLQUFLLFFBQVEsSUFBSSxFQUFFO0FBQUEsUUFDNUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BU0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLElBQUksSUFBSSxTQUFTO0FBQy9CLGlCQUFPLEtBQUssSUFBSSxJQUFJLE9BQU87QUFBQSxRQUM3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BUUYsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLElBQUksSUFBSTtBQUN0QixpQkFBTyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksRUFBRTtBQUFBLFFBQzlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFRRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsTUFBTSxJQUFJO0FBQ3hCLGNBQUksU0FBUztBQUNiLGNBQUksSUFBSTtBQUNOLG1CQUFPLEtBQUssY0FBYyxFQUFFO0FBQUEsVUFDOUI7QUFDQSxlQUFLLFFBQVEsUUFBUSxTQUFVLEtBQUssS0FBSztBQUN2QyxtQkFBTyxPQUFPLGNBQWMsR0FBRztBQUFBLFVBQ2pDLENBQUM7QUFBQSxRQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFRRixHQUFHO0FBQUEsUUFDRCxLQUFLO0FBQUEsUUFDTCxPQUFPLFNBQVMsY0FBYyxJQUFJO0FBQ2hDLGNBQUksQ0FBQyxLQUFLLFFBQVEsSUFBSSxFQUFFLEdBQUc7QUFDekI7QUFBQSxVQUNGO0FBQ0EsY0FBSUEsVUFBUyxLQUFLLFFBQVEsSUFBSSxFQUFFO0FBQ2hDLFVBQUFBLFFBQU8sTUFBTTtBQUNiLGVBQUssUUFBUSxFQUFFO0FBQUEsUUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BU0YsR0FBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0wsT0FBTyxTQUFTLFFBQVEsSUFBSTtBQUMxQixlQUFLLFFBQVEsUUFBUSxFQUFFLEVBQUU7QUFBQSxRQUMzQjtBQUFBLE1BQ0YsQ0FBQyxDQUFDO0FBQUEsSUFDSixFQUFFO0FBQUE7QUFBQTs7O0FDNUlGO0FBQUE7QUFBQTtBQVNBLFFBQUksVUFBVTtBQUNkLFFBQUksV0FBVztBQUFmLFFBQ0UsT0FBTyxTQUFTO0FBTWxCLFlBQVEsVUFBVSxrQkFBMkI7QUFLN0MsWUFBUSxhQUFhO0FBS3JCLFlBQVEsU0FBUztBQUtqQixZQUFRLFlBQVksUUFBUTtBQUs1QixZQUFRLFNBQVMsUUFBUTtBQUt6QixZQUFRLGVBQWU7QUFLdkIsWUFBUSxTQUFTO0FBS2pCLFlBQVEsbUJBQW1CO0FBSzNCLFlBQVEsbUJBQW1CO0FBSzNCLFlBQVEsWUFBWTtBQUtwQixZQUFRLFlBQVk7QUFZcEIsWUFBUSxVQUFVLElBQUksUUFBUSxVQUFVO0FBVXhDLFFBQUksZ0JBQWdCLFFBQVEsYUFBYTtBQUd6QyxXQUFPLEtBQUssUUFBUSxPQUFPLElBQUksTUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLFNBQVMsVUFBVSxPQUFPLFVBQVUsU0FBUyxXQUFXLGNBQWMsb0JBQW9CLHNCQUFzQixvQkFBb0Isc0JBQXNCLGFBQWEsT0FBTyxDQUFDLEVBQUUsUUFBUSxTQUFVLFFBQVE7QUFDL1AsYUFBTyxRQUFRLE1BQU0sSUFBSSxXQUFZO0FBQ25DLGVBQU8sY0FBYyxNQUFNLEVBQUUsTUFBTSxlQUFlLFNBQVM7QUFBQSxNQUM3RDtBQUFBLElBQ0YsQ0FBQztBQU9ELFdBQU8sZUFBZSxTQUFTLFNBQVM7QUFBQSxNQUN0QyxLQUFLLFNBQVMsTUFBTTtBQUNsQixlQUFPLGNBQWM7QUFBQSxNQUN2QjtBQUFBLE1BQ0EsS0FBSyxTQUFTLElBQUksS0FBSztBQUNyQixzQkFBYyxRQUFRO0FBQUEsTUFDeEI7QUFBQSxJQUNGLENBQUM7QUFPRCxXQUFPLGVBQWUsU0FBUyxjQUFjO0FBQUEsTUFDM0MsS0FBSyxTQUFTLE1BQU07QUFDbEIsZUFBTyxjQUFjO0FBQUEsTUFDdkI7QUFBQSxJQUNGLENBQUM7QUFPRCxXQUFPLGVBQWUsU0FBUyxjQUFjO0FBQUEsTUFDM0MsS0FBSyxTQUFTLE1BQU07QUFDbEIsZUFBTyxjQUFjO0FBQUEsTUFDdkI7QUFBQSxJQUNGLENBQUM7QUFPRCxLQUFDLGFBQWEsRUFBRSxRQUFRLFNBQVUsTUFBTTtBQUN0QyxhQUFPLGVBQWUsU0FBUyxNQUFNO0FBQUEsUUFDbkMsS0FBSyxTQUFTLE1BQU07QUFDbEIsaUJBQU8sY0FBYyxJQUFJO0FBQUEsUUFDM0I7QUFBQSxRQUNBLEtBQUssU0FBUyxJQUFJLEtBQUs7QUFDckIsd0JBQWMsSUFBSSxJQUFJO0FBQUEsUUFDeEI7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNILENBQUM7QUFNRCxXQUFPLGVBQWUsU0FBUyxXQUFXO0FBQUEsTUFDeEMsS0FBSyxTQUFTLE1BQU07QUFDbEIsZUFBTztBQUFBLFVBQ0wsbUJBQW1CLGNBQWM7QUFBQSxVQUNqQyxtQkFBbUIsY0FBYztBQUFBLFVBQ2pDLFlBQVksY0FBYztBQUFBLFFBQzVCO0FBQUEsTUFDRjtBQUFBLElBQ0YsQ0FBQztBQUlELFNBQUssV0FBVyxTQUFTLFdBQVc7QUFDcEMsU0FBSyxhQUFhLFNBQVMsYUFBYSxDQUFDLEtBQUssQ0FBQztBQUMvQyxTQUFLLGNBQWMsU0FBUyxhQUFhLENBQUMsYUFBYSxhQUFhLENBQUM7QUFDckUsU0FBSyxhQUFhLFNBQVMsY0FBYyxDQUFDLGVBQWUsYUFBYSxTQUFTLFFBQVEsQ0FBQztBQUN4RixTQUFLLGNBQWMsU0FBUyxjQUFjLENBQUMsWUFBWSxhQUFhLENBQUM7QUFBQTtBQUFBOzs7QUMxS3JFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxtQkFBNEI7OztBQ0E1QixzQkFBa0M7QUFDbEMsd0JBQXVCOzs7QUNJdkIsSUFBTSxhQUFOLGNBQXlCLE1BQU07QUFBQztBQUt6QixJQUFNLHVCQUFOLGNBQW1DLFdBQVc7QUFBQSxFQUNuRCxZQUFZLFFBQVE7QUFDbEIsVUFBTSxxQkFBcUIsT0FBTyxVQUFVLENBQUMsRUFBRTtBQUFBLEVBQ2pEO0FBQ0Y7QUFLTyxJQUFNLHVCQUFOLGNBQW1DLFdBQVc7QUFBQSxFQUNuRCxZQUFZLFFBQVE7QUFDbEIsVUFBTSxxQkFBcUIsT0FBTyxVQUFVLENBQUMsRUFBRTtBQUFBLEVBQ2pEO0FBQ0Y7QUFLTyxJQUFNLHVCQUFOLGNBQW1DLFdBQVc7QUFBQSxFQUNuRCxZQUFZLFFBQVE7QUFDbEIsVUFBTSxxQkFBcUIsT0FBTyxVQUFVLENBQUMsRUFBRTtBQUFBLEVBQ2pEO0FBQ0Y7QUFLTyxJQUFNLGdDQUFOLGNBQTRDLFdBQVc7QUFBQztBQUt4RCxJQUFNLG1CQUFOLGNBQStCLFdBQVc7QUFBQSxFQUMvQyxZQUFZLE1BQU07QUFDaEIsVUFBTSxnQkFBZ0IsSUFBSSxFQUFFO0FBQUEsRUFDOUI7QUFDRjtBQUtPLElBQU0sdUJBQU4sY0FBbUMsV0FBVztBQUFDO0FBSy9DLElBQU0sc0JBQU4sY0FBa0MsV0FBVztBQUFBLEVBQ2xELGNBQWM7QUFDWixVQUFNLDJCQUEyQjtBQUFBLEVBQ25DO0FBQ0Y7OztBQ3hEQSxJQUFNLElBQUk7QUFBVixJQUNFLElBQUk7QUFETixJQUVFLElBQUk7QUFFQyxJQUFNLGFBQWE7QUFBQSxFQUN4QixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQ1A7QUFFTyxJQUFNLFdBQVc7QUFBQSxFQUN0QixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQ1A7QUFFTyxJQUFNLHdCQUF3QjtBQUFBLEVBQ25DLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLEtBQUs7QUFBQSxFQUNMLFNBQVM7QUFDWDtBQUVPLElBQU0sWUFBWTtBQUFBLEVBQ3ZCLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLEtBQUs7QUFDUDtBQUVPLElBQU0sWUFBWTtBQUFBLEVBQ3ZCLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLEtBQUs7QUFBQSxFQUNMLFNBQVM7QUFDWDtBQUVPLElBQU0sY0FBYztBQUFBLEVBQ3pCLE1BQU07QUFBQSxFQUNOLFFBQVE7QUFDVjtBQUVPLElBQU0sb0JBQW9CO0FBQUEsRUFDL0IsTUFBTTtBQUFBLEVBQ04sUUFBUTtBQUFBLEVBQ1IsUUFBUTtBQUNWO0FBRU8sSUFBTSx5QkFBeUI7QUFBQSxFQUNwQyxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixjQUFjO0FBQ2hCO0FBRU8sSUFBTSx3QkFBd0I7QUFBQSxFQUNuQyxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixjQUFjO0FBQ2hCO0FBRU8sSUFBTSxpQkFBaUI7QUFBQSxFQUM1QixNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixXQUFXO0FBQ2I7QUFFTyxJQUFNLHVCQUF1QjtBQUFBLEVBQ2xDLE1BQU07QUFBQSxFQUNOLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLFdBQVc7QUFDYjtBQUVPLElBQU0sNEJBQTRCO0FBQUEsRUFDdkMsTUFBTTtBQUFBLEVBQ04sUUFBUTtBQUFBLEVBQ1IsUUFBUTtBQUFBLEVBQ1IsV0FBVztBQUFBLEVBQ1gsY0FBYztBQUNoQjtBQUVPLElBQU0sMkJBQTJCO0FBQUEsRUFDdEMsTUFBTTtBQUFBLEVBQ04sUUFBUTtBQUFBLEVBQ1IsUUFBUTtBQUFBLEVBQ1IsV0FBVztBQUFBLEVBQ1gsY0FBYztBQUNoQjtBQUVPLElBQU0saUJBQWlCO0FBQUEsRUFDNUIsTUFBTTtBQUFBLEVBQ04sT0FBTztBQUFBLEVBQ1AsS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBLEVBQ04sUUFBUTtBQUNWO0FBRU8sSUFBTSw4QkFBOEI7QUFBQSxFQUN6QyxNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQ1Y7QUFFTyxJQUFNLGVBQWU7QUFBQSxFQUMxQixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQ1Y7QUFFTyxJQUFNLDRCQUE0QjtBQUFBLEVBQ3ZDLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFDVjtBQUVPLElBQU0sNEJBQTRCO0FBQUEsRUFDdkMsTUFBTTtBQUFBLEVBQ04sT0FBTztBQUFBLEVBQ1AsS0FBSztBQUFBLEVBQ0wsU0FBUztBQUFBLEVBQ1QsTUFBTTtBQUFBLEVBQ04sUUFBUTtBQUNWO0FBRU8sSUFBTSxnQkFBZ0I7QUFBQSxFQUMzQixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixjQUFjO0FBQ2hCO0FBRU8sSUFBTSw2QkFBNkI7QUFBQSxFQUN4QyxNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixjQUFjO0FBQ2hCO0FBRU8sSUFBTSxnQkFBZ0I7QUFBQSxFQUMzQixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixjQUFjO0FBQ2hCO0FBRU8sSUFBTSw2QkFBNkI7QUFBQSxFQUN4QyxNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixjQUFjO0FBQ2hCOzs7QUMxS0EsSUFBcUIsT0FBckIsTUFBMEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNeEIsSUFBSSxPQUFPO0FBQ1QsVUFBTSxJQUFJLG9CQUFvQjtBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxPQUFPO0FBQ1QsVUFBTSxJQUFJLG9CQUFvQjtBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxJQUFJLFdBQVc7QUFDYixXQUFPLEtBQUs7QUFBQSxFQUNkO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxjQUFjO0FBQ2hCLFVBQU0sSUFBSSxvQkFBb0I7QUFBQSxFQUNoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBV0EsV0FBVyxJQUFJLE1BQU07QUFDbkIsVUFBTSxJQUFJLG9CQUFvQjtBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBVUEsYUFBYSxJQUFJQyxTQUFRO0FBQ3ZCLFVBQU0sSUFBSSxvQkFBb0I7QUFBQSxFQUNoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsT0FBTyxJQUFJO0FBQ1QsVUFBTSxJQUFJLG9CQUFvQjtBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxPQUFPLFdBQVc7QUFDaEIsVUFBTSxJQUFJLG9CQUFvQjtBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxVQUFVO0FBQ1osVUFBTSxJQUFJLG9CQUFvQjtBQUFBLEVBQ2hDO0FBQ0Y7OztBQzdGQSxJQUFJLFlBQVk7QUFNaEIsSUFBcUIsYUFBckIsTUFBcUIsb0JBQW1CLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBSzNDLFdBQVcsV0FBVztBQUNwQixRQUFJLGNBQWMsTUFBTTtBQUN0QixrQkFBWSxJQUFJLFlBQVc7QUFBQSxJQUM3QjtBQUNBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQSxFQUdBLElBQUksT0FBTztBQUNULFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQSxFQUdBLElBQUksT0FBTztBQUNULFdBQU8sSUFBSSxLQUFLLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRTtBQUFBLEVBQ3JEO0FBQUE7QUFBQSxFQUdBLElBQUksY0FBYztBQUNoQixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUEsRUFHQSxXQUFXLElBQUksRUFBRSxRQUFBQyxTQUFRLE9BQU8sR0FBRztBQUNqQyxXQUFPLGNBQWMsSUFBSUEsU0FBUSxNQUFNO0FBQUEsRUFDekM7QUFBQTtBQUFBLEVBR0EsYUFBYSxJQUFJQSxTQUFRO0FBQ3ZCLFdBQU8sYUFBYSxLQUFLLE9BQU8sRUFBRSxHQUFHQSxPQUFNO0FBQUEsRUFDN0M7QUFBQTtBQUFBLEVBR0EsT0FBTyxJQUFJO0FBQ1QsV0FBTyxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUUsa0JBQWtCO0FBQUEsRUFDekM7QUFBQTtBQUFBLEVBR0EsT0FBTyxXQUFXO0FBQ2hCLFdBQU8sVUFBVSxTQUFTO0FBQUEsRUFDNUI7QUFBQTtBQUFBLEVBR0EsSUFBSSxVQUFVO0FBQ1osV0FBTztBQUFBLEVBQ1Q7QUFDRjs7O0FDekRBLElBQU0sV0FBVyxvQkFBSSxJQUFJO0FBQ3pCLFNBQVMsUUFBUSxVQUFVO0FBQ3pCLE1BQUksTUFBTSxTQUFTLElBQUksUUFBUTtBQUMvQixNQUFJLFFBQVEsUUFBVztBQUNyQixVQUFNLElBQUksS0FBSyxlQUFlLFNBQVM7QUFBQSxNQUNyQyxRQUFRO0FBQUEsTUFDUixVQUFVO0FBQUEsTUFDVixNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxLQUFLO0FBQUEsTUFDTCxNQUFNO0FBQUEsTUFDTixRQUFRO0FBQUEsTUFDUixRQUFRO0FBQUEsTUFDUixLQUFLO0FBQUEsSUFDUCxDQUFDO0FBQ0QsYUFBUyxJQUFJLFVBQVUsR0FBRztBQUFBLEVBQzVCO0FBQ0EsU0FBTztBQUNUO0FBRUEsSUFBTSxZQUFZO0FBQUEsRUFDaEIsTUFBTTtBQUFBLEVBQ04sT0FBTztBQUFBLEVBQ1AsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBLEVBQ04sUUFBUTtBQUFBLEVBQ1IsUUFBUTtBQUNWO0FBRUEsU0FBUyxZQUFZLEtBQUssTUFBTTtBQUM5QixRQUFNLFlBQVksSUFBSSxPQUFPLElBQUksRUFBRSxRQUFRLFdBQVcsRUFBRSxHQUN0RCxTQUFTLGtEQUFrRCxLQUFLLFNBQVMsR0FDekUsQ0FBQyxFQUFFLFFBQVEsTUFBTSxPQUFPLFNBQVMsT0FBTyxTQUFTLE9BQU8sSUFBSTtBQUM5RCxTQUFPLENBQUMsT0FBTyxRQUFRLE1BQU0sU0FBUyxPQUFPLFNBQVMsT0FBTztBQUMvRDtBQUVBLFNBQVMsWUFBWSxLQUFLLE1BQU07QUFDOUIsUUFBTSxZQUFZLElBQUksY0FBYyxJQUFJO0FBQ3hDLFFBQU0sU0FBUyxDQUFDO0FBQ2hCLFdBQVMsSUFBSSxHQUFHLElBQUksVUFBVSxRQUFRLEtBQUs7QUFDekMsVUFBTSxFQUFFLE1BQU0sTUFBTSxJQUFJLFVBQVUsQ0FBQztBQUNuQyxVQUFNLE1BQU0sVUFBVSxJQUFJO0FBRTFCLFFBQUksU0FBUyxPQUFPO0FBQ2xCLGFBQU8sR0FBRyxJQUFJO0FBQUEsSUFDaEIsV0FBVyxDQUFDLFlBQVksR0FBRyxHQUFHO0FBQzVCLGFBQU8sR0FBRyxJQUFJLFNBQVMsT0FBTyxFQUFFO0FBQUEsSUFDbEM7QUFBQSxFQUNGO0FBQ0EsU0FBTztBQUNUO0FBRUEsSUFBTSxnQkFBZ0Isb0JBQUksSUFBSTtBQUs5QixJQUFxQixXQUFyQixNQUFxQixrQkFBaUIsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLekMsT0FBTyxPQUFPLE1BQU07QUFDbEIsUUFBSSxPQUFPLGNBQWMsSUFBSSxJQUFJO0FBQ2pDLFFBQUksU0FBUyxRQUFXO0FBQ3RCLG9CQUFjLElBQUksTUFBTyxPQUFPLElBQUksVUFBUyxJQUFJLENBQUU7QUFBQSxJQUNyRDtBQUNBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLE9BQU8sYUFBYTtBQUNsQixrQkFBYyxNQUFNO0FBQ3BCLGFBQVMsTUFBTTtBQUFBLEVBQ2pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBVUEsT0FBTyxpQkFBaUJDLElBQUc7QUFDekIsV0FBTyxLQUFLLFlBQVlBLEVBQUM7QUFBQSxFQUMzQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVVBLE9BQU8sWUFBWSxNQUFNO0FBQ3ZCLFFBQUksQ0FBQyxNQUFNO0FBQ1QsYUFBTztBQUFBLElBQ1Q7QUFDQSxRQUFJO0FBQ0YsVUFBSSxLQUFLLGVBQWUsU0FBUyxFQUFFLFVBQVUsS0FBSyxDQUFDLEVBQUUsT0FBTztBQUM1RCxhQUFPO0FBQUEsSUFDVCxTQUFTLEdBQUc7QUFDVixhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFBQSxFQUVBLFlBQVksTUFBTTtBQUNoQixVQUFNO0FBRU4sU0FBSyxXQUFXO0FBRWhCLFNBQUssUUFBUSxVQUFTLFlBQVksSUFBSTtBQUFBLEVBQ3hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxPQUFPO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxJQUFJLE9BQU87QUFDVCxXQUFPLEtBQUs7QUFBQSxFQUNkO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxJQUFJLGNBQWM7QUFDaEIsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdBLFdBQVcsSUFBSSxFQUFFLFFBQUFDLFNBQVEsT0FBTyxHQUFHO0FBQ2pDLFdBQU8sY0FBYyxJQUFJQSxTQUFRLFFBQVEsS0FBSyxJQUFJO0FBQUEsRUFDcEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFVQSxhQUFhLElBQUlBLFNBQVE7QUFDdkIsV0FBTyxhQUFhLEtBQUssT0FBTyxFQUFFLEdBQUdBLE9BQU07QUFBQSxFQUM3QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsT0FBTyxJQUFJO0FBQ1QsUUFBSSxDQUFDLEtBQUssTUFBTyxRQUFPO0FBQ3hCLFVBQU0sT0FBTyxJQUFJLEtBQUssRUFBRTtBQUV4QixRQUFJLE1BQU0sSUFBSSxFQUFHLFFBQU87QUFFeEIsVUFBTSxNQUFNLFFBQVEsS0FBSyxJQUFJO0FBQzdCLFFBQUksQ0FBQyxNQUFNLE9BQU8sS0FBSyxRQUFRLE1BQU0sUUFBUSxNQUFNLElBQUksSUFBSSxnQkFDdkQsWUFBWSxLQUFLLElBQUksSUFDckIsWUFBWSxLQUFLLElBQUk7QUFFekIsUUFBSSxXQUFXLE1BQU07QUFDbkIsYUFBTyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUk7QUFBQSxJQUMzQjtBQUdBLFVBQU0sZUFBZSxTQUFTLEtBQUssSUFBSTtBQUV2QyxVQUFNLFFBQVEsYUFBYTtBQUFBLE1BQ3pCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLE1BQU07QUFBQSxNQUNOO0FBQUEsTUFDQTtBQUFBLE1BQ0EsYUFBYTtBQUFBLElBQ2YsQ0FBQztBQUVELFFBQUksT0FBTyxDQUFDO0FBQ1osVUFBTSxPQUFPLE9BQU87QUFDcEIsWUFBUSxRQUFRLElBQUksT0FBTyxNQUFPO0FBQ2xDLFlBQVEsUUFBUSxTQUFTLEtBQUs7QUFBQSxFQUNoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsT0FBTyxXQUFXO0FBQ2hCLFdBQU8sVUFBVSxTQUFTLFVBQVUsVUFBVSxTQUFTLEtBQUs7QUFBQSxFQUM5RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksVUFBVTtBQUNaLFdBQU8sS0FBSztBQUFBLEVBQ2Q7QUFDRjs7O0FDbE9BLElBQUksY0FBYyxDQUFDO0FBQ25CLFNBQVMsWUFBWSxXQUFXLE9BQU8sQ0FBQyxHQUFHO0FBQ3pDLFFBQU0sTUFBTSxLQUFLLFVBQVUsQ0FBQyxXQUFXLElBQUksQ0FBQztBQUM1QyxNQUFJLE1BQU0sWUFBWSxHQUFHO0FBQ3pCLE1BQUksQ0FBQyxLQUFLO0FBQ1IsVUFBTSxJQUFJLEtBQUssV0FBVyxXQUFXLElBQUk7QUFDekMsZ0JBQVksR0FBRyxJQUFJO0FBQUEsRUFDckI7QUFDQSxTQUFPO0FBQ1Q7QUFFQSxJQUFNLGNBQWMsb0JBQUksSUFBSTtBQUM1QixTQUFTLGFBQWEsV0FBVyxPQUFPLENBQUMsR0FBRztBQUMxQyxRQUFNLE1BQU0sS0FBSyxVQUFVLENBQUMsV0FBVyxJQUFJLENBQUM7QUFDNUMsTUFBSSxNQUFNLFlBQVksSUFBSSxHQUFHO0FBQzdCLE1BQUksUUFBUSxRQUFXO0FBQ3JCLFVBQU0sSUFBSSxLQUFLLGVBQWUsV0FBVyxJQUFJO0FBQzdDLGdCQUFZLElBQUksS0FBSyxHQUFHO0FBQUEsRUFDMUI7QUFDQSxTQUFPO0FBQ1Q7QUFFQSxJQUFNLGVBQWUsb0JBQUksSUFBSTtBQUM3QixTQUFTLGFBQWEsV0FBVyxPQUFPLENBQUMsR0FBRztBQUMxQyxRQUFNLE1BQU0sS0FBSyxVQUFVLENBQUMsV0FBVyxJQUFJLENBQUM7QUFDNUMsTUFBSSxNQUFNLGFBQWEsSUFBSSxHQUFHO0FBQzlCLE1BQUksUUFBUSxRQUFXO0FBQ3JCLFVBQU0sSUFBSSxLQUFLLGFBQWEsV0FBVyxJQUFJO0FBQzNDLGlCQUFhLElBQUksS0FBSyxHQUFHO0FBQUEsRUFDM0I7QUFDQSxTQUFPO0FBQ1Q7QUFFQSxJQUFNLGVBQWUsb0JBQUksSUFBSTtBQUM3QixTQUFTLGFBQWEsV0FBVyxPQUFPLENBQUMsR0FBRztBQUMxQyxRQUFNLEVBQUUsTUFBTSxHQUFHLGFBQWEsSUFBSTtBQUNsQyxRQUFNLE1BQU0sS0FBSyxVQUFVLENBQUMsV0FBVyxZQUFZLENBQUM7QUFDcEQsTUFBSSxNQUFNLGFBQWEsSUFBSSxHQUFHO0FBQzlCLE1BQUksUUFBUSxRQUFXO0FBQ3JCLFVBQU0sSUFBSSxLQUFLLG1CQUFtQixXQUFXLElBQUk7QUFDakQsaUJBQWEsSUFBSSxLQUFLLEdBQUc7QUFBQSxFQUMzQjtBQUNBLFNBQU87QUFDVDtBQUVBLElBQUksaUJBQWlCO0FBQ3JCLFNBQVMsZUFBZTtBQUN0QixNQUFJLGdCQUFnQjtBQUNsQixXQUFPO0FBQUEsRUFDVCxPQUFPO0FBQ0wscUJBQWlCLElBQUksS0FBSyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUU7QUFDN0QsV0FBTztBQUFBLEVBQ1Q7QUFDRjtBQUVBLElBQU0sMkJBQTJCLG9CQUFJLElBQUk7QUFDekMsU0FBUyw0QkFBNEIsV0FBVztBQUM5QyxNQUFJLE9BQU8seUJBQXlCLElBQUksU0FBUztBQUNqRCxNQUFJLFNBQVMsUUFBVztBQUN0QixXQUFPLElBQUksS0FBSyxlQUFlLFNBQVMsRUFBRSxnQkFBZ0I7QUFDMUQsNkJBQXlCLElBQUksV0FBVyxJQUFJO0FBQUEsRUFDOUM7QUFDQSxTQUFPO0FBQ1Q7QUFFQSxJQUFNLGdCQUFnQixvQkFBSSxJQUFJO0FBQzlCLFNBQVMsa0JBQWtCLFdBQVc7QUFDcEMsTUFBSSxPQUFPLGNBQWMsSUFBSSxTQUFTO0FBQ3RDLE1BQUksQ0FBQyxNQUFNO0FBQ1QsVUFBTSxTQUFTLElBQUksS0FBSyxPQUFPLFNBQVM7QUFFeEMsV0FBTyxpQkFBaUIsU0FBUyxPQUFPLFlBQVksSUFBSSxPQUFPO0FBRS9ELFFBQUksRUFBRSxpQkFBaUIsT0FBTztBQUM1QixhQUFPLEVBQUUsR0FBRyxzQkFBc0IsR0FBRyxLQUFLO0FBQUEsSUFDNUM7QUFDQSxrQkFBYyxJQUFJLFdBQVcsSUFBSTtBQUFBLEVBQ25DO0FBQ0EsU0FBTztBQUNUO0FBRUEsU0FBUyxrQkFBa0IsV0FBVztBQVlwQyxRQUFNLFNBQVMsVUFBVSxRQUFRLEtBQUs7QUFDdEMsTUFBSSxXQUFXLElBQUk7QUFDakIsZ0JBQVksVUFBVSxVQUFVLEdBQUcsTUFBTTtBQUFBLEVBQzNDO0FBRUEsUUFBTSxTQUFTLFVBQVUsUUFBUSxLQUFLO0FBQ3RDLE1BQUksV0FBVyxJQUFJO0FBQ2pCLFdBQU8sQ0FBQyxTQUFTO0FBQUEsRUFDbkIsT0FBTztBQUNMLFFBQUk7QUFDSixRQUFJO0FBQ0osUUFBSTtBQUNGLGdCQUFVLGFBQWEsU0FBUyxFQUFFLGdCQUFnQjtBQUNsRCxvQkFBYztBQUFBLElBQ2hCLFNBQVMsR0FBRztBQUNWLFlBQU0sVUFBVSxVQUFVLFVBQVUsR0FBRyxNQUFNO0FBQzdDLGdCQUFVLGFBQWEsT0FBTyxFQUFFLGdCQUFnQjtBQUNoRCxvQkFBYztBQUFBLElBQ2hCO0FBRUEsVUFBTSxFQUFFLGlCQUFpQixTQUFTLElBQUk7QUFDdEMsV0FBTyxDQUFDLGFBQWEsaUJBQWlCLFFBQVE7QUFBQSxFQUNoRDtBQUNGO0FBRUEsU0FBUyxpQkFBaUIsV0FBVyxpQkFBaUIsZ0JBQWdCO0FBQ3BFLE1BQUksa0JBQWtCLGlCQUFpQjtBQUNyQyxRQUFJLENBQUMsVUFBVSxTQUFTLEtBQUssR0FBRztBQUM5QixtQkFBYTtBQUFBLElBQ2Y7QUFFQSxRQUFJLGdCQUFnQjtBQUNsQixtQkFBYSxPQUFPLGNBQWM7QUFBQSxJQUNwQztBQUVBLFFBQUksaUJBQWlCO0FBQ25CLG1CQUFhLE9BQU8sZUFBZTtBQUFBLElBQ3JDO0FBQ0EsV0FBTztBQUFBLEVBQ1QsT0FBTztBQUNMLFdBQU87QUFBQSxFQUNUO0FBQ0Y7QUFFQSxTQUFTLFVBQVUsR0FBRztBQUNwQixRQUFNLEtBQUssQ0FBQztBQUNaLFdBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxLQUFLO0FBQzVCLFVBQU0sS0FBSyxTQUFTLElBQUksTUFBTSxHQUFHLENBQUM7QUFDbEMsT0FBRyxLQUFLLEVBQUUsRUFBRSxDQUFDO0FBQUEsRUFDZjtBQUNBLFNBQU87QUFDVDtBQUVBLFNBQVMsWUFBWSxHQUFHO0FBQ3RCLFFBQU0sS0FBSyxDQUFDO0FBQ1osV0FBUyxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUs7QUFDM0IsVUFBTSxLQUFLLFNBQVMsSUFBSSxNQUFNLElBQUksS0FBSyxDQUFDO0FBQ3hDLE9BQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQztBQUFBLEVBQ2Y7QUFDQSxTQUFPO0FBQ1Q7QUFFQSxTQUFTLFVBQVUsS0FBSyxRQUFRLFdBQVcsUUFBUTtBQUNqRCxRQUFNLE9BQU8sSUFBSSxZQUFZO0FBRTdCLE1BQUksU0FBUyxTQUFTO0FBQ3BCLFdBQU87QUFBQSxFQUNULFdBQVcsU0FBUyxNQUFNO0FBQ3hCLFdBQU8sVUFBVSxNQUFNO0FBQUEsRUFDekIsT0FBTztBQUNMLFdBQU8sT0FBTyxNQUFNO0FBQUEsRUFDdEI7QUFDRjtBQUVBLFNBQVMsb0JBQW9CLEtBQUs7QUFDaEMsTUFBSSxJQUFJLG1CQUFtQixJQUFJLG9CQUFvQixRQUFRO0FBQ3pELFdBQU87QUFBQSxFQUNULE9BQU87QUFDTCxXQUNFLElBQUksb0JBQW9CLFVBQ3hCLENBQUMsSUFBSSxVQUNMLElBQUksT0FBTyxXQUFXLElBQUksS0FDMUIsNEJBQTRCLElBQUksTUFBTSxFQUFFLG9CQUFvQjtBQUFBLEVBRWhFO0FBQ0Y7QUFNQSxJQUFNLHNCQUFOLE1BQTBCO0FBQUEsRUFDeEIsWUFBWSxNQUFNLGFBQWEsTUFBTTtBQUNuQyxTQUFLLFFBQVEsS0FBSyxTQUFTO0FBQzNCLFNBQUssUUFBUSxLQUFLLFNBQVM7QUFFM0IsVUFBTSxFQUFFLE9BQU8sT0FBTyxHQUFHLFVBQVUsSUFBSTtBQUV2QyxRQUFJLENBQUMsZUFBZSxPQUFPLEtBQUssU0FBUyxFQUFFLFNBQVMsR0FBRztBQUNyRCxZQUFNLFdBQVcsRUFBRSxhQUFhLE9BQU8sR0FBRyxLQUFLO0FBQy9DLFVBQUksS0FBSyxRQUFRLEVBQUcsVUFBUyx1QkFBdUIsS0FBSztBQUN6RCxXQUFLLE1BQU0sYUFBYSxNQUFNLFFBQVE7QUFBQSxJQUN4QztBQUFBLEVBQ0Y7QUFBQSxFQUVBLE9BQU8sR0FBRztBQUNSLFFBQUksS0FBSyxLQUFLO0FBQ1osWUFBTSxRQUFRLEtBQUssUUFBUSxLQUFLLE1BQU0sQ0FBQyxJQUFJO0FBQzNDLGFBQU8sS0FBSyxJQUFJLE9BQU8sS0FBSztBQUFBLElBQzlCLE9BQU87QUFFTCxZQUFNLFFBQVEsS0FBSyxRQUFRLEtBQUssTUFBTSxDQUFDLElBQUksUUFBUSxHQUFHLENBQUM7QUFDdkQsYUFBTyxTQUFTLE9BQU8sS0FBSyxLQUFLO0FBQUEsSUFDbkM7QUFBQSxFQUNGO0FBQ0Y7QUFNQSxJQUFNLG9CQUFOLE1BQXdCO0FBQUEsRUFDdEIsWUFBWSxJQUFJLE1BQU0sTUFBTTtBQUMxQixTQUFLLE9BQU87QUFDWixTQUFLLGVBQWU7QUFFcEIsUUFBSSxJQUFJO0FBQ1IsUUFBSSxLQUFLLEtBQUssVUFBVTtBQUV0QixXQUFLLEtBQUs7QUFBQSxJQUNaLFdBQVcsR0FBRyxLQUFLLFNBQVMsU0FBUztBQU9uQyxZQUFNLFlBQVksTUFBTSxHQUFHLFNBQVM7QUFDcEMsWUFBTSxVQUFVLGFBQWEsSUFBSSxXQUFXLFNBQVMsS0FBSyxVQUFVLFNBQVM7QUFDN0UsVUFBSSxHQUFHLFdBQVcsS0FBSyxTQUFTLE9BQU8sT0FBTyxFQUFFLE9BQU87QUFDckQsWUFBSTtBQUNKLGFBQUssS0FBSztBQUFBLE1BQ1osT0FBTztBQUdMLFlBQUk7QUFDSixhQUFLLEtBQUssR0FBRyxXQUFXLElBQUksS0FBSyxHQUFHLFFBQVEsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLEdBQUcsT0FBTyxDQUFDO0FBQzlFLGFBQUssZUFBZSxHQUFHO0FBQUEsTUFDekI7QUFBQSxJQUNGLFdBQVcsR0FBRyxLQUFLLFNBQVMsVUFBVTtBQUNwQyxXQUFLLEtBQUs7QUFBQSxJQUNaLFdBQVcsR0FBRyxLQUFLLFNBQVMsUUFBUTtBQUNsQyxXQUFLLEtBQUs7QUFDVixVQUFJLEdBQUcsS0FBSztBQUFBLElBQ2QsT0FBTztBQUdMLFVBQUk7QUFDSixXQUFLLEtBQUssR0FBRyxRQUFRLEtBQUssRUFBRSxLQUFLLEVBQUUsU0FBUyxHQUFHLE9BQU8sQ0FBQztBQUN2RCxXQUFLLGVBQWUsR0FBRztBQUFBLElBQ3pCO0FBRUEsVUFBTSxXQUFXLEVBQUUsR0FBRyxLQUFLLEtBQUs7QUFDaEMsYUFBUyxXQUFXLFNBQVMsWUFBWTtBQUN6QyxTQUFLLE1BQU0sYUFBYSxNQUFNLFFBQVE7QUFBQSxFQUN4QztBQUFBLEVBRUEsU0FBUztBQUNQLFFBQUksS0FBSyxjQUFjO0FBR3JCLGFBQU8sS0FBSyxjQUFjLEVBQ3ZCLElBQUksQ0FBQyxFQUFFLE1BQU0sTUFBTSxLQUFLLEVBQ3hCLEtBQUssRUFBRTtBQUFBLElBQ1o7QUFDQSxXQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssR0FBRyxTQUFTLENBQUM7QUFBQSxFQUMzQztBQUFBLEVBRUEsZ0JBQWdCO0FBQ2QsVUFBTSxRQUFRLEtBQUssSUFBSSxjQUFjLEtBQUssR0FBRyxTQUFTLENBQUM7QUFDdkQsUUFBSSxLQUFLLGNBQWM7QUFDckIsYUFBTyxNQUFNLElBQUksQ0FBQyxTQUFTO0FBQ3pCLFlBQUksS0FBSyxTQUFTLGdCQUFnQjtBQUNoQyxnQkFBTSxhQUFhLEtBQUssYUFBYSxXQUFXLEtBQUssR0FBRyxJQUFJO0FBQUEsWUFDMUQsUUFBUSxLQUFLLEdBQUc7QUFBQSxZQUNoQixRQUFRLEtBQUssS0FBSztBQUFBLFVBQ3BCLENBQUM7QUFDRCxpQkFBTztBQUFBLFlBQ0wsR0FBRztBQUFBLFlBQ0gsT0FBTztBQUFBLFVBQ1Q7QUFBQSxRQUNGLE9BQU87QUFDTCxpQkFBTztBQUFBLFFBQ1Q7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLGtCQUFrQjtBQUNoQixXQUFPLEtBQUssSUFBSSxnQkFBZ0I7QUFBQSxFQUNsQztBQUNGO0FBS0EsSUFBTSxtQkFBTixNQUF1QjtBQUFBLEVBQ3JCLFlBQVksTUFBTSxXQUFXLE1BQU07QUFDakMsU0FBSyxPQUFPLEVBQUUsT0FBTyxRQUFRLEdBQUcsS0FBSztBQUNyQyxRQUFJLENBQUMsYUFBYSxZQUFZLEdBQUc7QUFDL0IsV0FBSyxNQUFNLGFBQWEsTUFBTSxJQUFJO0FBQUEsSUFDcEM7QUFBQSxFQUNGO0FBQUEsRUFFQSxPQUFPLE9BQU8sTUFBTTtBQUNsQixRQUFJLEtBQUssS0FBSztBQUNaLGFBQU8sS0FBSyxJQUFJLE9BQU8sT0FBTyxJQUFJO0FBQUEsSUFDcEMsT0FBTztBQUNMLGFBQWUsbUJBQW1CLE1BQU0sT0FBTyxLQUFLLEtBQUssU0FBUyxLQUFLLEtBQUssVUFBVSxNQUFNO0FBQUEsSUFDOUY7QUFBQSxFQUNGO0FBQUEsRUFFQSxjQUFjLE9BQU8sTUFBTTtBQUN6QixRQUFJLEtBQUssS0FBSztBQUNaLGFBQU8sS0FBSyxJQUFJLGNBQWMsT0FBTyxJQUFJO0FBQUEsSUFDM0MsT0FBTztBQUNMLGFBQU8sQ0FBQztBQUFBLElBQ1Y7QUFBQSxFQUNGO0FBQ0Y7QUFFQSxJQUFNLHVCQUF1QjtBQUFBLEVBQzNCLFVBQVU7QUFBQSxFQUNWLGFBQWE7QUFBQSxFQUNiLFNBQVMsQ0FBQyxHQUFHLENBQUM7QUFDaEI7QUFLQSxJQUFxQixTQUFyQixNQUFxQixRQUFPO0FBQUEsRUFDMUIsT0FBTyxTQUFTLE1BQU07QUFDcEIsV0FBTyxRQUFPO0FBQUEsTUFDWixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsSUFDUDtBQUFBLEVBQ0Y7QUFBQSxFQUVBLE9BQU8sT0FBTyxRQUFRLGlCQUFpQixnQkFBZ0IsY0FBYyxjQUFjLE9BQU87QUFDeEYsVUFBTSxrQkFBa0IsVUFBVSxTQUFTO0FBRTNDLFVBQU0sVUFBVSxvQkFBb0IsY0FBYyxVQUFVLGFBQWE7QUFDekUsVUFBTSxtQkFBbUIsbUJBQW1CLFNBQVM7QUFDckQsVUFBTSxrQkFBa0Isa0JBQWtCLFNBQVM7QUFDbkQsVUFBTSxnQkFBZ0IscUJBQXFCLFlBQVksS0FBSyxTQUFTO0FBQ3JFLFdBQU8sSUFBSSxRQUFPLFNBQVMsa0JBQWtCLGlCQUFpQixlQUFlLGVBQWU7QUFBQSxFQUM5RjtBQUFBLEVBRUEsT0FBTyxhQUFhO0FBQ2xCLHFCQUFpQjtBQUNqQixnQkFBWSxNQUFNO0FBQ2xCLGlCQUFhLE1BQU07QUFDbkIsaUJBQWEsTUFBTTtBQUNuQiw2QkFBeUIsTUFBTTtBQUMvQixrQkFBYyxNQUFNO0FBQUEsRUFDdEI7QUFBQSxFQUVBLE9BQU8sV0FBVyxFQUFFLFFBQVEsaUJBQWlCLGdCQUFnQixhQUFhLElBQUksQ0FBQyxHQUFHO0FBQ2hGLFdBQU8sUUFBTyxPQUFPLFFBQVEsaUJBQWlCLGdCQUFnQixZQUFZO0FBQUEsRUFDNUU7QUFBQSxFQUVBLFlBQVksUUFBUSxXQUFXLGdCQUFnQixjQUFjLGlCQUFpQjtBQUM1RSxVQUFNLENBQUMsY0FBYyx1QkFBdUIsb0JBQW9CLElBQUksa0JBQWtCLE1BQU07QUFFNUYsU0FBSyxTQUFTO0FBQ2QsU0FBSyxrQkFBa0IsYUFBYSx5QkFBeUI7QUFDN0QsU0FBSyxpQkFBaUIsa0JBQWtCLHdCQUF3QjtBQUNoRSxTQUFLLGVBQWU7QUFDcEIsU0FBSyxPQUFPLGlCQUFpQixLQUFLLFFBQVEsS0FBSyxpQkFBaUIsS0FBSyxjQUFjO0FBRW5GLFNBQUssZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUU7QUFDbEQsU0FBSyxjQUFjLEVBQUUsUUFBUSxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUU7QUFDaEQsU0FBSyxnQkFBZ0I7QUFDckIsU0FBSyxXQUFXLENBQUM7QUFFakIsU0FBSyxrQkFBa0I7QUFDdkIsU0FBSyxvQkFBb0I7QUFBQSxFQUMzQjtBQUFBLEVBRUEsSUFBSSxjQUFjO0FBQ2hCLFFBQUksS0FBSyxxQkFBcUIsTUFBTTtBQUNsQyxXQUFLLG9CQUFvQixvQkFBb0IsSUFBSTtBQUFBLElBQ25EO0FBRUEsV0FBTyxLQUFLO0FBQUEsRUFDZDtBQUFBLEVBRUEsY0FBYztBQUNaLFVBQU0sZUFBZSxLQUFLLFVBQVU7QUFDcEMsVUFBTSxrQkFDSCxLQUFLLG9CQUFvQixRQUFRLEtBQUssb0JBQW9CLFlBQzFELEtBQUssbUJBQW1CLFFBQVEsS0FBSyxtQkFBbUI7QUFDM0QsV0FBTyxnQkFBZ0IsaUJBQWlCLE9BQU87QUFBQSxFQUNqRDtBQUFBLEVBRUEsTUFBTSxNQUFNO0FBQ1YsUUFBSSxDQUFDLFFBQVEsT0FBTyxvQkFBb0IsSUFBSSxFQUFFLFdBQVcsR0FBRztBQUMxRCxhQUFPO0FBQUEsSUFDVCxPQUFPO0FBQ0wsYUFBTyxRQUFPO0FBQUEsUUFDWixLQUFLLFVBQVUsS0FBSztBQUFBLFFBQ3BCLEtBQUssbUJBQW1CLEtBQUs7QUFBQSxRQUM3QixLQUFLLGtCQUFrQixLQUFLO0FBQUEsUUFDNUIscUJBQXFCLEtBQUssWUFBWSxLQUFLLEtBQUs7QUFBQSxRQUNoRCxLQUFLLGVBQWU7QUFBQSxNQUN0QjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFFQSxjQUFjLE9BQU8sQ0FBQyxHQUFHO0FBQ3ZCLFdBQU8sS0FBSyxNQUFNLEVBQUUsR0FBRyxNQUFNLGFBQWEsS0FBSyxDQUFDO0FBQUEsRUFDbEQ7QUFBQSxFQUVBLGtCQUFrQixPQUFPLENBQUMsR0FBRztBQUMzQixXQUFPLEtBQUssTUFBTSxFQUFFLEdBQUcsTUFBTSxhQUFhLE1BQU0sQ0FBQztBQUFBLEVBQ25EO0FBQUEsRUFFQSxPQUFPLFFBQVFDLFVBQVMsT0FBTztBQUM3QixXQUFPLFVBQVUsTUFBTSxRQUFnQixRQUFRLE1BQU07QUFDbkQsWUFBTSxPQUFPQSxVQUFTLEVBQUUsT0FBTyxRQUFRLEtBQUssVUFBVSxJQUFJLEVBQUUsT0FBTyxPQUFPLEdBQ3hFLFlBQVlBLFVBQVMsV0FBVztBQUNsQyxVQUFJLENBQUMsS0FBSyxZQUFZLFNBQVMsRUFBRSxNQUFNLEdBQUc7QUFDeEMsYUFBSyxZQUFZLFNBQVMsRUFBRSxNQUFNLElBQUksVUFBVSxDQUFDLE9BQU8sS0FBSyxRQUFRLElBQUksTUFBTSxPQUFPLENBQUM7QUFBQSxNQUN6RjtBQUNBLGFBQU8sS0FBSyxZQUFZLFNBQVMsRUFBRSxNQUFNO0FBQUEsSUFDM0MsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVBLFNBQVMsUUFBUUEsVUFBUyxPQUFPO0FBQy9CLFdBQU8sVUFBVSxNQUFNLFFBQWdCLFVBQVUsTUFBTTtBQUNyRCxZQUFNLE9BQU9BLFVBQ1AsRUFBRSxTQUFTLFFBQVEsTUFBTSxXQUFXLE9BQU8sUUFBUSxLQUFLLFVBQVUsSUFDbEUsRUFBRSxTQUFTLE9BQU8sR0FDdEIsWUFBWUEsVUFBUyxXQUFXO0FBQ2xDLFVBQUksQ0FBQyxLQUFLLGNBQWMsU0FBUyxFQUFFLE1BQU0sR0FBRztBQUMxQyxhQUFLLGNBQWMsU0FBUyxFQUFFLE1BQU0sSUFBSTtBQUFBLFVBQVksQ0FBQyxPQUNuRCxLQUFLLFFBQVEsSUFBSSxNQUFNLFNBQVM7QUFBQSxRQUNsQztBQUFBLE1BQ0Y7QUFDQSxhQUFPLEtBQUssY0FBYyxTQUFTLEVBQUUsTUFBTTtBQUFBLElBQzdDLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxZQUFZO0FBQ1YsV0FBTztBQUFBLE1BQ0w7QUFBQSxNQUNBO0FBQUEsTUFDQSxNQUFjO0FBQUEsTUFDZCxNQUFNO0FBR0osWUFBSSxDQUFDLEtBQUssZUFBZTtBQUN2QixnQkFBTSxPQUFPLEVBQUUsTUFBTSxXQUFXLFdBQVcsTUFBTTtBQUNqRCxlQUFLLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsU0FBUyxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUFFO0FBQUEsWUFDbkYsQ0FBQyxPQUFPLEtBQUssUUFBUSxJQUFJLE1BQU0sV0FBVztBQUFBLFVBQzVDO0FBQUEsUUFDRjtBQUVBLGVBQU8sS0FBSztBQUFBLE1BQ2Q7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBRUEsS0FBSyxRQUFRO0FBQ1gsV0FBTyxVQUFVLE1BQU0sUUFBZ0IsTUFBTSxNQUFNO0FBQ2pELFlBQU0sT0FBTyxFQUFFLEtBQUssT0FBTztBQUkzQixVQUFJLENBQUMsS0FBSyxTQUFTLE1BQU0sR0FBRztBQUMxQixhQUFLLFNBQVMsTUFBTSxJQUFJLENBQUMsU0FBUyxJQUFJLEtBQUssR0FBRyxDQUFDLEdBQUcsU0FBUyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRTtBQUFBLFVBQUksQ0FBQyxPQUMvRSxLQUFLLFFBQVEsSUFBSSxNQUFNLEtBQUs7QUFBQSxRQUM5QjtBQUFBLE1BQ0Y7QUFFQSxhQUFPLEtBQUssU0FBUyxNQUFNO0FBQUEsSUFDN0IsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVBLFFBQVEsSUFBSSxVQUFVLE9BQU87QUFDM0IsVUFBTSxLQUFLLEtBQUssWUFBWSxJQUFJLFFBQVEsR0FDdEMsVUFBVSxHQUFHLGNBQWMsR0FDM0IsV0FBVyxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxZQUFZLE1BQU0sS0FBSztBQUMvRCxXQUFPLFdBQVcsU0FBUyxRQUFRO0FBQUEsRUFDckM7QUFBQSxFQUVBLGdCQUFnQixPQUFPLENBQUMsR0FBRztBQUd6QixXQUFPLElBQUksb0JBQW9CLEtBQUssTUFBTSxLQUFLLGVBQWUsS0FBSyxhQUFhLElBQUk7QUFBQSxFQUN0RjtBQUFBLEVBRUEsWUFBWSxJQUFJLFdBQVcsQ0FBQyxHQUFHO0FBQzdCLFdBQU8sSUFBSSxrQkFBa0IsSUFBSSxLQUFLLE1BQU0sUUFBUTtBQUFBLEVBQ3REO0FBQUEsRUFFQSxhQUFhLE9BQU8sQ0FBQyxHQUFHO0FBQ3RCLFdBQU8sSUFBSSxpQkFBaUIsS0FBSyxNQUFNLEtBQUssVUFBVSxHQUFHLElBQUk7QUFBQSxFQUMvRDtBQUFBLEVBRUEsY0FBYyxPQUFPLENBQUMsR0FBRztBQUN2QixXQUFPLFlBQVksS0FBSyxNQUFNLElBQUk7QUFBQSxFQUNwQztBQUFBLEVBRUEsWUFBWTtBQUNWLFdBQ0UsS0FBSyxXQUFXLFFBQ2hCLEtBQUssT0FBTyxZQUFZLE1BQU0sV0FDOUIsNEJBQTRCLEtBQUssSUFBSSxFQUFFLE9BQU8sV0FBVyxPQUFPO0FBQUEsRUFFcEU7QUFBQSxFQUVBLGtCQUFrQjtBQUNoQixRQUFJLEtBQUssY0FBYztBQUNyQixhQUFPLEtBQUs7QUFBQSxJQUNkLFdBQVcsQ0FBQyxrQkFBa0IsR0FBRztBQUMvQixhQUFPO0FBQUEsSUFDVCxPQUFPO0FBQ0wsYUFBTyxrQkFBa0IsS0FBSyxNQUFNO0FBQUEsSUFDdEM7QUFBQSxFQUNGO0FBQUEsRUFFQSxpQkFBaUI7QUFDZixXQUFPLEtBQUssZ0JBQWdCLEVBQUU7QUFBQSxFQUNoQztBQUFBLEVBRUEsd0JBQXdCO0FBQ3RCLFdBQU8sS0FBSyxnQkFBZ0IsRUFBRTtBQUFBLEVBQ2hDO0FBQUEsRUFFQSxpQkFBaUI7QUFDZixXQUFPLEtBQUssZ0JBQWdCLEVBQUU7QUFBQSxFQUNoQztBQUFBLEVBRUEsT0FBTyxPQUFPO0FBQ1osV0FDRSxLQUFLLFdBQVcsTUFBTSxVQUN0QixLQUFLLG9CQUFvQixNQUFNLG1CQUMvQixLQUFLLG1CQUFtQixNQUFNO0FBQUEsRUFFbEM7QUFBQSxFQUVBLFdBQVc7QUFDVCxXQUFPLFVBQVUsS0FBSyxNQUFNLEtBQUssS0FBSyxlQUFlLEtBQUssS0FBSyxjQUFjO0FBQUEsRUFDL0U7QUFDRjs7O0FDN2lCQSxJQUFJQyxhQUFZO0FBTWhCLElBQXFCLGtCQUFyQixNQUFxQix5QkFBd0IsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLaEQsV0FBVyxjQUFjO0FBQ3ZCLFFBQUlBLGVBQWMsTUFBTTtBQUN0QixNQUFBQSxhQUFZLElBQUksaUJBQWdCLENBQUM7QUFBQSxJQUNuQztBQUNBLFdBQU9BO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sU0FBU0MsU0FBUTtBQUN0QixXQUFPQSxZQUFXLElBQUksaUJBQWdCLGNBQWMsSUFBSSxpQkFBZ0JBLE9BQU07QUFBQSxFQUNoRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVVBLE9BQU8sZUFBZUMsSUFBRztBQUN2QixRQUFJQSxJQUFHO0FBQ0wsWUFBTSxJQUFJQSxHQUFFLE1BQU0sdUNBQXVDO0FBQ3pELFVBQUksR0FBRztBQUNMLGVBQU8sSUFBSSxpQkFBZ0IsYUFBYSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQUEsTUFDckQ7QUFBQSxJQUNGO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLFlBQVlELFNBQVE7QUFDbEIsVUFBTTtBQUVOLFNBQUssUUFBUUE7QUFBQSxFQUNmO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxPQUFPO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLElBQUksT0FBTztBQUNULFdBQU8sS0FBSyxVQUFVLElBQUksUUFBUSxNQUFNLGFBQWEsS0FBSyxPQUFPLFFBQVEsQ0FBQztBQUFBLEVBQzVFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxJQUFJLFdBQVc7QUFDYixRQUFJLEtBQUssVUFBVSxHQUFHO0FBQ3BCLGFBQU87QUFBQSxJQUNULE9BQU87QUFDTCxhQUFPLFVBQVUsYUFBYSxDQUFDLEtBQUssT0FBTyxRQUFRLENBQUM7QUFBQSxJQUN0RDtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLGFBQWE7QUFDWCxXQUFPLEtBQUs7QUFBQSxFQUNkO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBVUEsYUFBYSxJQUFJRSxTQUFRO0FBQ3ZCLFdBQU8sYUFBYSxLQUFLLE9BQU9BLE9BQU07QUFBQSxFQUN4QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsSUFBSSxjQUFjO0FBQ2hCLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLFNBQVM7QUFDUCxXQUFPLEtBQUs7QUFBQSxFQUNkO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxPQUFPLFdBQVc7QUFDaEIsV0FBTyxVQUFVLFNBQVMsV0FBVyxVQUFVLFVBQVUsS0FBSztBQUFBLEVBQ2hFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxJQUFJLFVBQVU7QUFDWixXQUFPO0FBQUEsRUFDVDtBQUNGOzs7QUMvSUEsSUFBcUIsY0FBckIsY0FBeUMsS0FBSztBQUFBLEVBQzVDLFlBQVksVUFBVTtBQUNwQixVQUFNO0FBRU4sU0FBSyxXQUFXO0FBQUEsRUFDbEI7QUFBQTtBQUFBLEVBR0EsSUFBSSxPQUFPO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBLEVBR0EsSUFBSSxPQUFPO0FBQ1QsV0FBTyxLQUFLO0FBQUEsRUFDZDtBQUFBO0FBQUEsRUFHQSxJQUFJLGNBQWM7QUFDaEIsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBLEVBR0EsYUFBYTtBQUNYLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQSxFQUdBLGVBQWU7QUFDYixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUEsRUFHQSxTQUFTO0FBQ1AsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBLEVBR0EsU0FBUztBQUNQLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQSxFQUdBLElBQUksVUFBVTtBQUNaLFdBQU87QUFBQSxFQUNUO0FBQ0Y7OztBQ3hDTyxTQUFTLGNBQWMsT0FBT0MsY0FBYTtBQUNoRCxNQUFJQztBQUNKLE1BQUksWUFBWSxLQUFLLEtBQUssVUFBVSxNQUFNO0FBQ3hDLFdBQU9EO0FBQUEsRUFDVCxXQUFXLGlCQUFpQixNQUFNO0FBQ2hDLFdBQU87QUFBQSxFQUNULFdBQVcsU0FBUyxLQUFLLEdBQUc7QUFDMUIsVUFBTSxVQUFVLE1BQU0sWUFBWTtBQUNsQyxRQUFJLFlBQVksVUFBVyxRQUFPQTtBQUFBLGFBQ3pCLFlBQVksV0FBVyxZQUFZLFNBQVUsUUFBTyxXQUFXO0FBQUEsYUFDL0QsWUFBWSxTQUFTLFlBQVksTUFBTyxRQUFPLGdCQUFnQjtBQUFBLFFBQ25FLFFBQU8sZ0JBQWdCLGVBQWUsT0FBTyxLQUFLLFNBQVMsT0FBTyxLQUFLO0FBQUEsRUFDOUUsV0FBVyxTQUFTLEtBQUssR0FBRztBQUMxQixXQUFPLGdCQUFnQixTQUFTLEtBQUs7QUFBQSxFQUN2QyxXQUFXLE9BQU8sVUFBVSxZQUFZLFlBQVksU0FBUyxPQUFPLE1BQU0sV0FBVyxZQUFZO0FBRy9GLFdBQU87QUFBQSxFQUNULE9BQU87QUFDTCxXQUFPLElBQUksWUFBWSxLQUFLO0FBQUEsRUFDOUI7QUFDRjs7O0FDakNBLElBQU0sbUJBQW1CO0FBQUEsRUFDdkIsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sVUFBVTtBQUFBLEVBQ1YsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUNSO0FBRUEsSUFBTSx3QkFBd0I7QUFBQSxFQUM1QixNQUFNLENBQUMsTUFBTSxJQUFJO0FBQUEsRUFDakIsU0FBUyxDQUFDLE1BQU0sSUFBSTtBQUFBLEVBQ3BCLE1BQU0sQ0FBQyxNQUFNLElBQUk7QUFBQSxFQUNqQixNQUFNLENBQUMsTUFBTSxJQUFJO0FBQUEsRUFDakIsTUFBTSxDQUFDLE1BQU0sSUFBSTtBQUFBLEVBQ2pCLFVBQVUsQ0FBQyxPQUFPLEtBQUs7QUFBQSxFQUN2QixNQUFNLENBQUMsTUFBTSxJQUFJO0FBQUEsRUFDakIsTUFBTSxDQUFDLE1BQU0sSUFBSTtBQUFBLEVBQ2pCLE1BQU0sQ0FBQyxNQUFNLElBQUk7QUFBQSxFQUNqQixNQUFNLENBQUMsTUFBTSxJQUFJO0FBQUEsRUFDakIsTUFBTSxDQUFDLE1BQU0sSUFBSTtBQUFBLEVBQ2pCLE1BQU0sQ0FBQyxNQUFNLElBQUk7QUFBQSxFQUNqQixNQUFNLENBQUMsTUFBTSxJQUFJO0FBQUEsRUFDakIsTUFBTSxDQUFDLE1BQU0sSUFBSTtBQUFBLEVBQ2pCLE1BQU0sQ0FBQyxNQUFNLElBQUk7QUFBQSxFQUNqQixTQUFTLENBQUMsTUFBTSxJQUFJO0FBQUEsRUFDcEIsTUFBTSxDQUFDLE1BQU0sSUFBSTtBQUFBLEVBQ2pCLE1BQU0sQ0FBQyxNQUFNLElBQUk7QUFBQSxFQUNqQixNQUFNLENBQUMsTUFBTSxJQUFJO0FBQ25CO0FBRUEsSUFBTSxlQUFlLGlCQUFpQixRQUFRLFFBQVEsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFO0FBRXZFLFNBQVMsWUFBWSxLQUFLO0FBQy9CLE1BQUksUUFBUSxTQUFTLEtBQUssRUFBRTtBQUM1QixNQUFJLE1BQU0sS0FBSyxHQUFHO0FBQ2hCLFlBQVE7QUFDUixhQUFTLElBQUksR0FBRyxJQUFJLElBQUksUUFBUSxLQUFLO0FBQ25DLFlBQU0sT0FBTyxJQUFJLFdBQVcsQ0FBQztBQUU3QixVQUFJLElBQUksQ0FBQyxFQUFFLE9BQU8saUJBQWlCLE9BQU8sTUFBTSxJQUFJO0FBQ2xELGlCQUFTLGFBQWEsUUFBUSxJQUFJLENBQUMsQ0FBQztBQUFBLE1BQ3RDLE9BQU87QUFDTCxtQkFBVyxPQUFPLHVCQUF1QjtBQUN2QyxnQkFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLHNCQUFzQixHQUFHO0FBQzVDLGNBQUksUUFBUSxPQUFPLFFBQVEsS0FBSztBQUM5QixxQkFBUyxPQUFPO0FBQUEsVUFDbEI7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFDQSxXQUFPLFNBQVMsT0FBTyxFQUFFO0FBQUEsRUFDM0IsT0FBTztBQUNMLFdBQU87QUFBQSxFQUNUO0FBQ0Y7QUFHQSxJQUFNLGtCQUFrQixvQkFBSSxJQUFJO0FBQ3pCLFNBQVMsdUJBQXVCO0FBQ3JDLGtCQUFnQixNQUFNO0FBQ3hCO0FBRU8sU0FBUyxXQUFXLEVBQUUsZ0JBQWdCLEdBQUcsU0FBUyxJQUFJO0FBQzNELFFBQU0sS0FBSyxtQkFBbUI7QUFFOUIsTUFBSSxjQUFjLGdCQUFnQixJQUFJLEVBQUU7QUFDeEMsTUFBSSxnQkFBZ0IsUUFBVztBQUM3QixrQkFBYyxvQkFBSSxJQUFJO0FBQ3RCLG9CQUFnQixJQUFJLElBQUksV0FBVztBQUFBLEVBQ3JDO0FBQ0EsTUFBSSxRQUFRLFlBQVksSUFBSSxNQUFNO0FBQ2xDLE1BQUksVUFBVSxRQUFXO0FBQ3ZCLFlBQVEsSUFBSSxPQUFPLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRTtBQUNyRCxnQkFBWSxJQUFJLFFBQVEsS0FBSztBQUFBLEVBQy9CO0FBRUEsU0FBTztBQUNUOzs7QUNwRkEsSUFBSSxNQUFNLE1BQU0sS0FBSyxJQUFJO0FBQXpCLElBQ0UsY0FBYztBQURoQixJQUVFLGdCQUFnQjtBQUZsQixJQUdFLHlCQUF5QjtBQUgzQixJQUlFLHdCQUF3QjtBQUoxQixJQUtFLHFCQUFxQjtBQUx2QixJQU1FO0FBTkYsSUFPRSxzQkFBc0I7QUFLeEIsSUFBcUIsV0FBckIsTUFBOEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBSzVCLFdBQVcsTUFBTTtBQUNmLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLFdBQVcsSUFBSUUsSUFBRztBQUNoQixVQUFNQTtBQUFBLEVBQ1I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxXQUFXLFlBQVksTUFBTTtBQUMzQixrQkFBYztBQUFBLEVBQ2hCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsV0FBVyxjQUFjO0FBQ3ZCLFdBQU8sY0FBYyxhQUFhLFdBQVcsUUFBUTtBQUFBLEVBQ3ZEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsZ0JBQWdCO0FBQ3pCLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsY0FBYyxRQUFRO0FBQy9CLG9CQUFnQjtBQUFBLEVBQ2xCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcseUJBQXlCO0FBQ2xDLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsdUJBQXVCLGlCQUFpQjtBQUNqRCw2QkFBeUI7QUFBQSxFQUMzQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLHdCQUF3QjtBQUNqQyxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLHNCQUFzQixnQkFBZ0I7QUFDL0MsNEJBQXdCO0FBQUEsRUFDMUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVlBLFdBQVcsc0JBQXNCO0FBQy9CLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLFdBQVcsb0JBQW9CLGNBQWM7QUFDM0MsMEJBQXNCLHFCQUFxQixZQUFZO0FBQUEsRUFDekQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxxQkFBcUI7QUFDOUIsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdBLFdBQVcsbUJBQW1CLFlBQVk7QUFDeEMseUJBQXFCLGFBQWE7QUFBQSxFQUNwQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLGlCQUFpQjtBQUMxQixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLGVBQWUsR0FBRztBQUMzQixxQkFBaUI7QUFBQSxFQUNuQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxPQUFPLGNBQWM7QUFDbkIsV0FBTyxXQUFXO0FBQ2xCLGFBQVMsV0FBVztBQUNwQixhQUFTLFdBQVc7QUFDcEIseUJBQXFCO0FBQUEsRUFDdkI7QUFDRjs7O0FDbkxBLElBQXFCLFVBQXJCLE1BQTZCO0FBQUEsRUFDM0IsWUFBWSxRQUFRLGFBQWE7QUFDL0IsU0FBSyxTQUFTO0FBQ2QsU0FBSyxjQUFjO0FBQUEsRUFDckI7QUFBQSxFQUVBLFlBQVk7QUFDVixRQUFJLEtBQUssYUFBYTtBQUNwQixhQUFPLEdBQUcsS0FBSyxNQUFNLEtBQUssS0FBSyxXQUFXO0FBQUEsSUFDNUMsT0FBTztBQUNMLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxFQUNGO0FBQ0Y7OztBQ0FBLElBQU0sZ0JBQWdCLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUc7QUFBNUUsSUFDRSxhQUFhLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUc7QUFFckUsU0FBUyxlQUFlLE1BQU0sT0FBTztBQUNuQyxTQUFPLElBQUk7QUFBQSxJQUNUO0FBQUEsSUFDQSxpQkFBaUIsS0FBSyxhQUFhLE9BQU8sS0FBSyxVQUFVLElBQUk7QUFBQSxFQUMvRDtBQUNGO0FBRU8sU0FBUyxVQUFVLE1BQU0sT0FBTyxLQUFLO0FBQzFDLFFBQU0sSUFBSSxJQUFJLEtBQUssS0FBSyxJQUFJLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUVqRCxNQUFJLE9BQU8sT0FBTyxRQUFRLEdBQUc7QUFDM0IsTUFBRSxlQUFlLEVBQUUsZUFBZSxJQUFJLElBQUk7QUFBQSxFQUM1QztBQUVBLFFBQU0sS0FBSyxFQUFFLFVBQVU7QUFFdkIsU0FBTyxPQUFPLElBQUksSUFBSTtBQUN4QjtBQUVBLFNBQVMsZUFBZSxNQUFNLE9BQU8sS0FBSztBQUN4QyxTQUFPLE9BQU8sV0FBVyxJQUFJLElBQUksYUFBYSxlQUFlLFFBQVEsQ0FBQztBQUN4RTtBQUVBLFNBQVMsaUJBQWlCLE1BQU0sU0FBUztBQUN2QyxRQUFNLFFBQVEsV0FBVyxJQUFJLElBQUksYUFBYSxlQUM1QyxTQUFTLE1BQU0sVUFBVSxDQUFDLE1BQU0sSUFBSSxPQUFPLEdBQzNDLE1BQU0sVUFBVSxNQUFNLE1BQU07QUFDOUIsU0FBTyxFQUFFLE9BQU8sU0FBUyxHQUFHLElBQUk7QUFDbEM7QUFFTyxTQUFTLGtCQUFrQixZQUFZLGFBQWE7QUFDekQsVUFBUyxhQUFhLGNBQWMsS0FBSyxJQUFLO0FBQ2hEO0FBTU8sU0FBUyxnQkFBZ0IsU0FBUyxxQkFBcUIsR0FBRyxjQUFjLEdBQUc7QUFDaEYsUUFBTSxFQUFFLE1BQU0sT0FBTyxJQUFJLElBQUksU0FDM0IsVUFBVSxlQUFlLE1BQU0sT0FBTyxHQUFHLEdBQ3pDLFVBQVUsa0JBQWtCLFVBQVUsTUFBTSxPQUFPLEdBQUcsR0FBRyxXQUFXO0FBRXRFLE1BQUksYUFBYSxLQUFLLE9BQU8sVUFBVSxVQUFVLEtBQUssc0JBQXNCLENBQUMsR0FDM0U7QUFFRixNQUFJLGFBQWEsR0FBRztBQUNsQixlQUFXLE9BQU87QUFDbEIsaUJBQWEsZ0JBQWdCLFVBQVUsb0JBQW9CLFdBQVc7QUFBQSxFQUN4RSxXQUFXLGFBQWEsZ0JBQWdCLE1BQU0sb0JBQW9CLFdBQVcsR0FBRztBQUM5RSxlQUFXLE9BQU87QUFDbEIsaUJBQWE7QUFBQSxFQUNmLE9BQU87QUFDTCxlQUFXO0FBQUEsRUFDYjtBQUVBLFNBQU8sRUFBRSxVQUFVLFlBQVksU0FBUyxHQUFHLFdBQVcsT0FBTyxFQUFFO0FBQ2pFO0FBRU8sU0FBUyxnQkFBZ0IsVUFBVSxxQkFBcUIsR0FBRyxjQUFjLEdBQUc7QUFDakYsUUFBTSxFQUFFLFVBQVUsWUFBWSxRQUFRLElBQUksVUFDeEMsZ0JBQWdCLGtCQUFrQixVQUFVLFVBQVUsR0FBRyxrQkFBa0IsR0FBRyxXQUFXLEdBQ3pGLGFBQWEsV0FBVyxRQUFRO0FBRWxDLE1BQUksVUFBVSxhQUFhLElBQUksVUFBVSxnQkFBZ0IsSUFBSSxvQkFDM0Q7QUFFRixNQUFJLFVBQVUsR0FBRztBQUNmLFdBQU8sV0FBVztBQUNsQixlQUFXLFdBQVcsSUFBSTtBQUFBLEVBQzVCLFdBQVcsVUFBVSxZQUFZO0FBQy9CLFdBQU8sV0FBVztBQUNsQixlQUFXLFdBQVcsUUFBUTtBQUFBLEVBQ2hDLE9BQU87QUFDTCxXQUFPO0FBQUEsRUFDVDtBQUVBLFFBQU0sRUFBRSxPQUFPLElBQUksSUFBSSxpQkFBaUIsTUFBTSxPQUFPO0FBQ3JELFNBQU8sRUFBRSxNQUFNLE9BQU8sS0FBSyxHQUFHLFdBQVcsUUFBUSxFQUFFO0FBQ3JEO0FBRU8sU0FBUyxtQkFBbUIsVUFBVTtBQUMzQyxRQUFNLEVBQUUsTUFBTSxPQUFPLElBQUksSUFBSTtBQUM3QixRQUFNLFVBQVUsZUFBZSxNQUFNLE9BQU8sR0FBRztBQUMvQyxTQUFPLEVBQUUsTUFBTSxTQUFTLEdBQUcsV0FBVyxRQUFRLEVBQUU7QUFDbEQ7QUFFTyxTQUFTLG1CQUFtQixhQUFhO0FBQzlDLFFBQU0sRUFBRSxNQUFNLFFBQVEsSUFBSTtBQUMxQixRQUFNLEVBQUUsT0FBTyxJQUFJLElBQUksaUJBQWlCLE1BQU0sT0FBTztBQUNyRCxTQUFPLEVBQUUsTUFBTSxPQUFPLEtBQUssR0FBRyxXQUFXLFdBQVcsRUFBRTtBQUN4RDtBQVFPLFNBQVMsb0JBQW9CLEtBQUssS0FBSztBQUM1QyxRQUFNLG9CQUNKLENBQUMsWUFBWSxJQUFJLFlBQVksS0FDN0IsQ0FBQyxZQUFZLElBQUksZUFBZSxLQUNoQyxDQUFDLFlBQVksSUFBSSxhQUFhO0FBQ2hDLE1BQUksbUJBQW1CO0FBQ3JCLFVBQU0saUJBQ0osQ0FBQyxZQUFZLElBQUksT0FBTyxLQUFLLENBQUMsWUFBWSxJQUFJLFVBQVUsS0FBSyxDQUFDLFlBQVksSUFBSSxRQUFRO0FBRXhGLFFBQUksZ0JBQWdCO0FBQ2xCLFlBQU0sSUFBSTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUNBLFFBQUksQ0FBQyxZQUFZLElBQUksWUFBWSxFQUFHLEtBQUksVUFBVSxJQUFJO0FBQ3RELFFBQUksQ0FBQyxZQUFZLElBQUksZUFBZSxFQUFHLEtBQUksYUFBYSxJQUFJO0FBQzVELFFBQUksQ0FBQyxZQUFZLElBQUksYUFBYSxFQUFHLEtBQUksV0FBVyxJQUFJO0FBQ3hELFdBQU8sSUFBSTtBQUNYLFdBQU8sSUFBSTtBQUNYLFdBQU8sSUFBSTtBQUNYLFdBQU87QUFBQSxNQUNMLG9CQUFvQixJQUFJLHNCQUFzQjtBQUFBLE1BQzlDLGFBQWEsSUFBSSxlQUFlO0FBQUEsSUFDbEM7QUFBQSxFQUNGLE9BQU87QUFDTCxXQUFPLEVBQUUsb0JBQW9CLEdBQUcsYUFBYSxFQUFFO0FBQUEsRUFDakQ7QUFDRjtBQUVPLFNBQVMsbUJBQW1CLEtBQUsscUJBQXFCLEdBQUcsY0FBYyxHQUFHO0FBQy9FLFFBQU0sWUFBWSxVQUFVLElBQUksUUFBUSxHQUN0QyxZQUFZO0FBQUEsSUFDVixJQUFJO0FBQUEsSUFDSjtBQUFBLElBQ0EsZ0JBQWdCLElBQUksVUFBVSxvQkFBb0IsV0FBVztBQUFBLEVBQy9ELEdBQ0EsZUFBZSxlQUFlLElBQUksU0FBUyxHQUFHLENBQUM7QUFFakQsTUFBSSxDQUFDLFdBQVc7QUFDZCxXQUFPLGVBQWUsWUFBWSxJQUFJLFFBQVE7QUFBQSxFQUNoRCxXQUFXLENBQUMsV0FBVztBQUNyQixXQUFPLGVBQWUsUUFBUSxJQUFJLFVBQVU7QUFBQSxFQUM5QyxXQUFXLENBQUMsY0FBYztBQUN4QixXQUFPLGVBQWUsV0FBVyxJQUFJLE9BQU87QUFBQSxFQUM5QyxNQUFPLFFBQU87QUFDaEI7QUFFTyxTQUFTLHNCQUFzQixLQUFLO0FBQ3pDLFFBQU0sWUFBWSxVQUFVLElBQUksSUFBSSxHQUNsQyxlQUFlLGVBQWUsSUFBSSxTQUFTLEdBQUcsV0FBVyxJQUFJLElBQUksQ0FBQztBQUVwRSxNQUFJLENBQUMsV0FBVztBQUNkLFdBQU8sZUFBZSxRQUFRLElBQUksSUFBSTtBQUFBLEVBQ3hDLFdBQVcsQ0FBQyxjQUFjO0FBQ3hCLFdBQU8sZUFBZSxXQUFXLElBQUksT0FBTztBQUFBLEVBQzlDLE1BQU8sUUFBTztBQUNoQjtBQUVPLFNBQVMsd0JBQXdCLEtBQUs7QUFDM0MsUUFBTSxZQUFZLFVBQVUsSUFBSSxJQUFJLEdBQ2xDLGFBQWEsZUFBZSxJQUFJLE9BQU8sR0FBRyxFQUFFLEdBQzVDLFdBQVcsZUFBZSxJQUFJLEtBQUssR0FBRyxZQUFZLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQztBQUV4RSxNQUFJLENBQUMsV0FBVztBQUNkLFdBQU8sZUFBZSxRQUFRLElBQUksSUFBSTtBQUFBLEVBQ3hDLFdBQVcsQ0FBQyxZQUFZO0FBQ3RCLFdBQU8sZUFBZSxTQUFTLElBQUksS0FBSztBQUFBLEVBQzFDLFdBQVcsQ0FBQyxVQUFVO0FBQ3BCLFdBQU8sZUFBZSxPQUFPLElBQUksR0FBRztBQUFBLEVBQ3RDLE1BQU8sUUFBTztBQUNoQjtBQUVPLFNBQVMsbUJBQW1CLEtBQUs7QUFDdEMsUUFBTSxFQUFFLE1BQU0sUUFBUSxRQUFRLFlBQVksSUFBSTtBQUM5QyxRQUFNLFlBQ0YsZUFBZSxNQUFNLEdBQUcsRUFBRSxLQUN6QixTQUFTLE1BQU0sV0FBVyxLQUFLLFdBQVcsS0FBSyxnQkFBZ0IsR0FDbEUsY0FBYyxlQUFlLFFBQVEsR0FBRyxFQUFFLEdBQzFDLGNBQWMsZUFBZSxRQUFRLEdBQUcsRUFBRSxHQUMxQyxtQkFBbUIsZUFBZSxhQUFhLEdBQUcsR0FBRztBQUV2RCxNQUFJLENBQUMsV0FBVztBQUNkLFdBQU8sZUFBZSxRQUFRLElBQUk7QUFBQSxFQUNwQyxXQUFXLENBQUMsYUFBYTtBQUN2QixXQUFPLGVBQWUsVUFBVSxNQUFNO0FBQUEsRUFDeEMsV0FBVyxDQUFDLGFBQWE7QUFDdkIsV0FBTyxlQUFlLFVBQVUsTUFBTTtBQUFBLEVBQ3hDLFdBQVcsQ0FBQyxrQkFBa0I7QUFDNUIsV0FBTyxlQUFlLGVBQWUsV0FBVztBQUFBLEVBQ2xELE1BQU8sUUFBTztBQUNoQjs7O0FDN0xPLFNBQVMsWUFBWSxHQUFHO0FBQzdCLFNBQU8sT0FBTyxNQUFNO0FBQ3RCO0FBRU8sU0FBUyxTQUFTLEdBQUc7QUFDMUIsU0FBTyxPQUFPLE1BQU07QUFDdEI7QUFFTyxTQUFTLFVBQVUsR0FBRztBQUMzQixTQUFPLE9BQU8sTUFBTSxZQUFZLElBQUksTUFBTTtBQUM1QztBQUVPLFNBQVMsU0FBUyxHQUFHO0FBQzFCLFNBQU8sT0FBTyxNQUFNO0FBQ3RCO0FBRU8sU0FBUyxPQUFPLEdBQUc7QUFDeEIsU0FBTyxPQUFPLFVBQVUsU0FBUyxLQUFLLENBQUMsTUFBTTtBQUMvQztBQUlPLFNBQVMsY0FBYztBQUM1QixNQUFJO0FBQ0YsV0FBTyxPQUFPLFNBQVMsZUFBZSxDQUFDLENBQUMsS0FBSztBQUFBLEVBQy9DLFNBQVMsR0FBRztBQUNWLFdBQU87QUFBQSxFQUNUO0FBQ0Y7QUFFTyxTQUFTLG9CQUFvQjtBQUNsQyxNQUFJO0FBQ0YsV0FDRSxPQUFPLFNBQVMsZUFDaEIsQ0FBQyxDQUFDLEtBQUssV0FDTixjQUFjLEtBQUssT0FBTyxhQUFhLGlCQUFpQixLQUFLLE9BQU87QUFBQSxFQUV6RSxTQUFTLEdBQUc7QUFDVixXQUFPO0FBQUEsRUFDVDtBQUNGO0FBSU8sU0FBUyxXQUFXLE9BQU87QUFDaEMsU0FBTyxNQUFNLFFBQVEsS0FBSyxJQUFJLFFBQVEsQ0FBQyxLQUFLO0FBQzlDO0FBRU8sU0FBUyxPQUFPLEtBQUssSUFBSSxTQUFTO0FBQ3ZDLE1BQUksSUFBSSxXQUFXLEdBQUc7QUFDcEIsV0FBTztBQUFBLEVBQ1Q7QUFDQSxTQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sU0FBUztBQUNoQyxVQUFNLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJO0FBQzVCLFFBQUksQ0FBQyxNQUFNO0FBQ1QsYUFBTztBQUFBLElBQ1QsV0FBVyxRQUFRLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEdBQUc7QUFDaEQsYUFBTztBQUFBLElBQ1QsT0FBTztBQUNMLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRixHQUFHLElBQUksRUFBRSxDQUFDO0FBQ1o7QUFFTyxTQUFTLEtBQUssS0FBSyxNQUFNO0FBQzlCLFNBQU8sS0FBSyxPQUFPLENBQUMsR0FBRyxNQUFNO0FBQzNCLE1BQUUsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNaLFdBQU87QUFBQSxFQUNULEdBQUcsQ0FBQyxDQUFDO0FBQ1A7QUFFTyxTQUFTLGVBQWUsS0FBSyxNQUFNO0FBQ3hDLFNBQU8sT0FBTyxVQUFVLGVBQWUsS0FBSyxLQUFLLElBQUk7QUFDdkQ7QUFFTyxTQUFTLHFCQUFxQixVQUFVO0FBQzdDLE1BQUksWUFBWSxNQUFNO0FBQ3BCLFdBQU87QUFBQSxFQUNULFdBQVcsT0FBTyxhQUFhLFVBQVU7QUFDdkMsVUFBTSxJQUFJLHFCQUFxQixpQ0FBaUM7QUFBQSxFQUNsRSxPQUFPO0FBQ0wsUUFDRSxDQUFDLGVBQWUsU0FBUyxVQUFVLEdBQUcsQ0FBQyxLQUN2QyxDQUFDLGVBQWUsU0FBUyxhQUFhLEdBQUcsQ0FBQyxLQUMxQyxDQUFDLE1BQU0sUUFBUSxTQUFTLE9BQU8sS0FDL0IsU0FBUyxRQUFRLEtBQUssQ0FBQyxNQUFNLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQ3JEO0FBQ0EsWUFBTSxJQUFJLHFCQUFxQix1QkFBdUI7QUFBQSxJQUN4RDtBQUNBLFdBQU87QUFBQSxNQUNMLFVBQVUsU0FBUztBQUFBLE1BQ25CLGFBQWEsU0FBUztBQUFBLE1BQ3RCLFNBQVMsTUFBTSxLQUFLLFNBQVMsT0FBTztBQUFBLElBQ3RDO0FBQUEsRUFDRjtBQUNGO0FBSU8sU0FBUyxlQUFlLE9BQU8sUUFBUSxLQUFLO0FBQ2pELFNBQU8sVUFBVSxLQUFLLEtBQUssU0FBUyxVQUFVLFNBQVM7QUFDekQ7QUFHTyxTQUFTLFNBQVMsR0FBR0MsSUFBRztBQUM3QixTQUFPLElBQUlBLEtBQUksS0FBSyxNQUFNLElBQUlBLEVBQUM7QUFDakM7QUFFTyxTQUFTLFNBQVMsT0FBT0EsS0FBSSxHQUFHO0FBQ3JDLFFBQU0sUUFBUSxRQUFRO0FBQ3RCLE1BQUk7QUFDSixNQUFJLE9BQU87QUFDVCxhQUFTLE9BQU8sS0FBSyxDQUFDLE9BQU8sU0FBU0EsSUFBRyxHQUFHO0FBQUEsRUFDOUMsT0FBTztBQUNMLGNBQVUsS0FBSyxPQUFPLFNBQVNBLElBQUcsR0FBRztBQUFBLEVBQ3ZDO0FBQ0EsU0FBTztBQUNUO0FBRU8sU0FBUyxhQUFhLFFBQVE7QUFDbkMsTUFBSSxZQUFZLE1BQU0sS0FBSyxXQUFXLFFBQVEsV0FBVyxJQUFJO0FBQzNELFdBQU87QUFBQSxFQUNULE9BQU87QUFDTCxXQUFPLFNBQVMsUUFBUSxFQUFFO0FBQUEsRUFDNUI7QUFDRjtBQUVPLFNBQVMsY0FBYyxRQUFRO0FBQ3BDLE1BQUksWUFBWSxNQUFNLEtBQUssV0FBVyxRQUFRLFdBQVcsSUFBSTtBQUMzRCxXQUFPO0FBQUEsRUFDVCxPQUFPO0FBQ0wsV0FBTyxXQUFXLE1BQU07QUFBQSxFQUMxQjtBQUNGO0FBRU8sU0FBUyxZQUFZLFVBQVU7QUFFcEMsTUFBSSxZQUFZLFFBQVEsS0FBSyxhQUFhLFFBQVEsYUFBYSxJQUFJO0FBQ2pFLFdBQU87QUFBQSxFQUNULE9BQU87QUFDTCxVQUFNLElBQUksV0FBVyxPQUFPLFFBQVEsSUFBSTtBQUN4QyxXQUFPLEtBQUssTUFBTSxDQUFDO0FBQUEsRUFDckI7QUFDRjtBQUVPLFNBQVMsUUFBUSxRQUFRLFFBQVEsYUFBYSxPQUFPO0FBQzFELFFBQU0sU0FBUyxNQUFNLFFBQ25CLFVBQVUsYUFBYSxLQUFLLFFBQVEsS0FBSztBQUMzQyxTQUFPLFFBQVEsU0FBUyxNQUFNLElBQUk7QUFDcEM7QUFJTyxTQUFTLFdBQVcsTUFBTTtBQUMvQixTQUFPLE9BQU8sTUFBTSxNQUFNLE9BQU8sUUFBUSxLQUFLLE9BQU8sUUFBUTtBQUMvRDtBQUVPLFNBQVMsV0FBVyxNQUFNO0FBQy9CLFNBQU8sV0FBVyxJQUFJLElBQUksTUFBTTtBQUNsQztBQUVPLFNBQVMsWUFBWSxNQUFNLE9BQU87QUFDdkMsUUFBTSxXQUFXLFNBQVMsUUFBUSxHQUFHLEVBQUUsSUFBSSxHQUN6QyxVQUFVLFFBQVEsUUFBUSxZQUFZO0FBRXhDLE1BQUksYUFBYSxHQUFHO0FBQ2xCLFdBQU8sV0FBVyxPQUFPLElBQUksS0FBSztBQUFBLEVBQ3BDLE9BQU87QUFDTCxXQUFPLENBQUMsSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsRUFBRSxXQUFXLENBQUM7QUFBQSxFQUN4RTtBQUNGO0FBR08sU0FBUyxhQUFhLEtBQUs7QUFDaEMsTUFBSSxJQUFJLEtBQUs7QUFBQSxJQUNYLElBQUk7QUFBQSxJQUNKLElBQUksUUFBUTtBQUFBLElBQ1osSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLEVBQ047QUFHQSxNQUFJLElBQUksT0FBTyxPQUFPLElBQUksUUFBUSxHQUFHO0FBQ25DLFFBQUksSUFBSSxLQUFLLENBQUM7QUFJZCxNQUFFLGVBQWUsSUFBSSxNQUFNLElBQUksUUFBUSxHQUFHLElBQUksR0FBRztBQUFBLEVBQ25EO0FBQ0EsU0FBTyxDQUFDO0FBQ1Y7QUFHQSxTQUFTLGdCQUFnQixNQUFNLG9CQUFvQixhQUFhO0FBQzlELFFBQU0sUUFBUSxrQkFBa0IsVUFBVSxNQUFNLEdBQUcsa0JBQWtCLEdBQUcsV0FBVztBQUNuRixTQUFPLENBQUMsUUFBUSxxQkFBcUI7QUFDdkM7QUFFTyxTQUFTLGdCQUFnQixVQUFVLHFCQUFxQixHQUFHLGNBQWMsR0FBRztBQUNqRixRQUFNLGFBQWEsZ0JBQWdCLFVBQVUsb0JBQW9CLFdBQVc7QUFDNUUsUUFBTSxpQkFBaUIsZ0JBQWdCLFdBQVcsR0FBRyxvQkFBb0IsV0FBVztBQUNwRixVQUFRLFdBQVcsUUFBUSxJQUFJLGFBQWEsa0JBQWtCO0FBQ2hFO0FBRU8sU0FBUyxlQUFlLE1BQU07QUFDbkMsTUFBSSxPQUFPLElBQUk7QUFDYixXQUFPO0FBQUEsRUFDVCxNQUFPLFFBQU8sT0FBTyxTQUFTLHFCQUFxQixPQUFPLE9BQU8sTUFBTztBQUMxRTtBQUlPLFNBQVMsY0FBYyxJQUFJLGNBQWMsUUFBUSxXQUFXLE1BQU07QUFDdkUsUUFBTSxPQUFPLElBQUksS0FBSyxFQUFFLEdBQ3RCLFdBQVc7QUFBQSxJQUNULFdBQVc7QUFBQSxJQUNYLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxJQUNQLEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLFFBQVE7QUFBQSxFQUNWO0FBRUYsTUFBSSxVQUFVO0FBQ1osYUFBUyxXQUFXO0FBQUEsRUFDdEI7QUFFQSxRQUFNLFdBQVcsRUFBRSxjQUFjLGNBQWMsR0FBRyxTQUFTO0FBRTNELFFBQU0sU0FBUyxJQUFJLEtBQUssZUFBZSxRQUFRLFFBQVEsRUFDcEQsY0FBYyxJQUFJLEVBQ2xCLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxZQUFZLE1BQU0sY0FBYztBQUN0RCxTQUFPLFNBQVMsT0FBTyxRQUFRO0FBQ2pDO0FBR08sU0FBUyxhQUFhLFlBQVksY0FBYztBQUNyRCxNQUFJLFVBQVUsU0FBUyxZQUFZLEVBQUU7QUFHckMsTUFBSSxPQUFPLE1BQU0sT0FBTyxHQUFHO0FBQ3pCLGNBQVU7QUFBQSxFQUNaO0FBRUEsUUFBTSxTQUFTLFNBQVMsY0FBYyxFQUFFLEtBQUssR0FDM0MsZUFBZSxVQUFVLEtBQUssT0FBTyxHQUFHLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUNuRSxTQUFPLFVBQVUsS0FBSztBQUN4QjtBQUlPLFNBQVMsU0FBUyxPQUFPO0FBQzlCLFFBQU0sZUFBZSxPQUFPLEtBQUs7QUFDakMsTUFBSSxPQUFPLFVBQVUsYUFBYSxVQUFVLE1BQU0sT0FBTyxNQUFNLFlBQVk7QUFDekUsVUFBTSxJQUFJLHFCQUFxQixzQkFBc0IsS0FBSyxFQUFFO0FBQzlELFNBQU87QUFDVDtBQUVPLFNBQVMsZ0JBQWdCLEtBQUssWUFBWTtBQUMvQyxRQUFNLGFBQWEsQ0FBQztBQUNwQixhQUFXLEtBQUssS0FBSztBQUNuQixRQUFJLGVBQWUsS0FBSyxDQUFDLEdBQUc7QUFDMUIsWUFBTSxJQUFJLElBQUksQ0FBQztBQUNmLFVBQUksTUFBTSxVQUFhLE1BQU0sS0FBTTtBQUNuQyxpQkFBVyxXQUFXLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQztBQUFBLElBQ3hDO0FBQUEsRUFDRjtBQUNBLFNBQU87QUFDVDtBQVNPLFNBQVMsYUFBYUMsU0FBUUMsU0FBUTtBQUMzQyxRQUFNLFFBQVEsS0FBSyxNQUFNLEtBQUssSUFBSUQsVUFBUyxFQUFFLENBQUMsR0FDNUMsVUFBVSxLQUFLLE1BQU0sS0FBSyxJQUFJQSxVQUFTLEVBQUUsQ0FBQyxHQUMxQyxPQUFPQSxXQUFVLElBQUksTUFBTTtBQUU3QixVQUFRQyxTQUFRO0FBQUEsSUFDZCxLQUFLO0FBQ0gsYUFBTyxHQUFHLElBQUksR0FBRyxTQUFTLE9BQU8sQ0FBQyxDQUFDLElBQUksU0FBUyxTQUFTLENBQUMsQ0FBQztBQUFBLElBQzdELEtBQUs7QUFDSCxhQUFPLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxVQUFVLElBQUksSUFBSSxPQUFPLEtBQUssRUFBRTtBQUFBLElBQzNELEtBQUs7QUFDSCxhQUFPLEdBQUcsSUFBSSxHQUFHLFNBQVMsT0FBTyxDQUFDLENBQUMsR0FBRyxTQUFTLFNBQVMsQ0FBQyxDQUFDO0FBQUEsSUFDNUQ7QUFDRSxZQUFNLElBQUksV0FBVyxnQkFBZ0JBLE9BQU0sc0NBQXNDO0FBQUEsRUFDckY7QUFDRjtBQUVPLFNBQVMsV0FBVyxLQUFLO0FBQzlCLFNBQU8sS0FBSyxLQUFLLENBQUMsUUFBUSxVQUFVLFVBQVUsYUFBYSxDQUFDO0FBQzlEOzs7QUNoVE8sSUFBTSxhQUFhO0FBQUEsRUFDeEI7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGO0FBRU8sSUFBTSxjQUFjO0FBQUEsRUFDekI7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGO0FBRU8sSUFBTSxlQUFlLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUc7QUFFaEYsU0FBUyxPQUFPLFFBQVE7QUFDN0IsVUFBUSxRQUFRO0FBQUEsSUFDZCxLQUFLO0FBQ0gsYUFBTyxDQUFDLEdBQUcsWUFBWTtBQUFBLElBQ3pCLEtBQUs7QUFDSCxhQUFPLENBQUMsR0FBRyxXQUFXO0FBQUEsSUFDeEIsS0FBSztBQUNILGFBQU8sQ0FBQyxHQUFHLFVBQVU7QUFBQSxJQUN2QixLQUFLO0FBQ0gsYUFBTyxDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQUEsSUFDdkUsS0FBSztBQUNILGFBQU8sQ0FBQyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sSUFBSTtBQUFBLElBQ2hGO0FBQ0UsYUFBTztBQUFBLEVBQ1g7QUFDRjtBQUVPLElBQU0sZUFBZTtBQUFBLEVBQzFCO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0Y7QUFFTyxJQUFNLGdCQUFnQixDQUFDLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLEtBQUs7QUFFdEUsSUFBTSxpQkFBaUIsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHO0FBRXpELFNBQVMsU0FBUyxRQUFRO0FBQy9CLFVBQVEsUUFBUTtBQUFBLElBQ2QsS0FBSztBQUNILGFBQU8sQ0FBQyxHQUFHLGNBQWM7QUFBQSxJQUMzQixLQUFLO0FBQ0gsYUFBTyxDQUFDLEdBQUcsYUFBYTtBQUFBLElBQzFCLEtBQUs7QUFDSCxhQUFPLENBQUMsR0FBRyxZQUFZO0FBQUEsSUFDekIsS0FBSztBQUNILGFBQU8sQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHO0FBQUEsSUFDM0M7QUFDRSxhQUFPO0FBQUEsRUFDWDtBQUNGO0FBRU8sSUFBTSxZQUFZLENBQUMsTUFBTSxJQUFJO0FBRTdCLElBQU0sV0FBVyxDQUFDLGlCQUFpQixhQUFhO0FBRWhELElBQU0sWUFBWSxDQUFDLE1BQU0sSUFBSTtBQUU3QixJQUFNLGFBQWEsQ0FBQyxLQUFLLEdBQUc7QUFFNUIsU0FBUyxLQUFLLFFBQVE7QUFDM0IsVUFBUSxRQUFRO0FBQUEsSUFDZCxLQUFLO0FBQ0gsYUFBTyxDQUFDLEdBQUcsVUFBVTtBQUFBLElBQ3ZCLEtBQUs7QUFDSCxhQUFPLENBQUMsR0FBRyxTQUFTO0FBQUEsSUFDdEIsS0FBSztBQUNILGFBQU8sQ0FBQyxHQUFHLFFBQVE7QUFBQSxJQUNyQjtBQUNFLGFBQU87QUFBQSxFQUNYO0FBQ0Y7QUFFTyxTQUFTLG9CQUFvQixJQUFJO0FBQ3RDLFNBQU8sVUFBVSxHQUFHLE9BQU8sS0FBSyxJQUFJLENBQUM7QUFDdkM7QUFFTyxTQUFTLG1CQUFtQixJQUFJLFFBQVE7QUFDN0MsU0FBTyxTQUFTLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQztBQUN4QztBQUVPLFNBQVMsaUJBQWlCLElBQUksUUFBUTtBQUMzQyxTQUFPLE9BQU8sTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDO0FBQ3BDO0FBRU8sU0FBUyxlQUFlLElBQUksUUFBUTtBQUN6QyxTQUFPLEtBQUssTUFBTSxFQUFFLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQztBQUN6QztBQUVPLFNBQVMsbUJBQW1CLE1BQU0sT0FBTyxVQUFVLFVBQVUsU0FBUyxPQUFPO0FBQ2xGLFFBQU0sUUFBUTtBQUFBLElBQ1osT0FBTyxDQUFDLFFBQVEsS0FBSztBQUFBLElBQ3JCLFVBQVUsQ0FBQyxXQUFXLE1BQU07QUFBQSxJQUM1QixRQUFRLENBQUMsU0FBUyxLQUFLO0FBQUEsSUFDdkIsT0FBTyxDQUFDLFFBQVEsS0FBSztBQUFBLElBQ3JCLE1BQU0sQ0FBQyxPQUFPLE9BQU8sTUFBTTtBQUFBLElBQzNCLE9BQU8sQ0FBQyxRQUFRLEtBQUs7QUFBQSxJQUNyQixTQUFTLENBQUMsVUFBVSxNQUFNO0FBQUEsSUFDMUIsU0FBUyxDQUFDLFVBQVUsTUFBTTtBQUFBLEVBQzVCO0FBRUEsUUFBTSxXQUFXLENBQUMsU0FBUyxXQUFXLFNBQVMsRUFBRSxRQUFRLElBQUksTUFBTTtBQUVuRSxNQUFJLFlBQVksVUFBVSxVQUFVO0FBQ2xDLFVBQU0sUUFBUSxTQUFTO0FBQ3ZCLFlBQVEsT0FBTztBQUFBLE1BQ2IsS0FBSztBQUNILGVBQU8sUUFBUSxhQUFhLFFBQVEsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQUEsTUFDcEQsS0FBSztBQUNILGVBQU8sUUFBUSxjQUFjLFFBQVEsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQUEsTUFDckQsS0FBSztBQUNILGVBQU8sUUFBUSxVQUFVLFFBQVEsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQUEsTUFDakQ7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVBLFFBQU0sV0FBVyxPQUFPLEdBQUcsT0FBTyxFQUFFLEtBQUssUUFBUSxHQUMvQyxXQUFXLEtBQUssSUFBSSxLQUFLLEdBQ3pCLFdBQVcsYUFBYSxHQUN4QixXQUFXLE1BQU0sSUFBSSxHQUNyQixVQUFVLFNBQ04sV0FDRSxTQUFTLENBQUMsSUFDVixTQUFTLENBQUMsS0FBSyxTQUFTLENBQUMsSUFDM0IsV0FDQSxNQUFNLElBQUksRUFBRSxDQUFDLElBQ2I7QUFDTixTQUFPLFdBQVcsR0FBRyxRQUFRLElBQUksT0FBTyxTQUFTLE1BQU0sUUFBUSxJQUFJLE9BQU87QUFDNUU7OztBQ2pLQSxTQUFTLGdCQUFnQixRQUFRLGVBQWU7QUFDOUMsTUFBSUMsS0FBSTtBQUNSLGFBQVcsU0FBUyxRQUFRO0FBQzFCLFFBQUksTUFBTSxTQUFTO0FBQ2pCLE1BQUFBLE1BQUssTUFBTTtBQUFBLElBQ2IsT0FBTztBQUNMLE1BQUFBLE1BQUssY0FBYyxNQUFNLEdBQUc7QUFBQSxJQUM5QjtBQUFBLEVBQ0Y7QUFDQSxTQUFPQTtBQUNUO0FBRUEsSUFBTSx5QkFBeUI7QUFBQSxFQUM3QixHQUFXO0FBQUEsRUFDWCxJQUFZO0FBQUEsRUFDWixLQUFhO0FBQUEsRUFDYixNQUFjO0FBQUEsRUFDZCxHQUFXO0FBQUEsRUFDWCxJQUFZO0FBQUEsRUFDWixLQUFhO0FBQUEsRUFDYixNQUFjO0FBQUEsRUFDZCxHQUFXO0FBQUEsRUFDWCxJQUFZO0FBQUEsRUFDWixLQUFhO0FBQUEsRUFDYixNQUFjO0FBQUEsRUFDZCxHQUFXO0FBQUEsRUFDWCxJQUFZO0FBQUEsRUFDWixLQUFhO0FBQUEsRUFDYixNQUFjO0FBQUEsRUFDZCxHQUFXO0FBQUEsRUFDWCxJQUFZO0FBQUEsRUFDWixLQUFhO0FBQUEsRUFDYixNQUFjO0FBQ2hCO0FBTUEsSUFBcUIsWUFBckIsTUFBcUIsV0FBVTtBQUFBLEVBQzdCLE9BQU8sT0FBTyxRQUFRLE9BQU8sQ0FBQyxHQUFHO0FBQy9CLFdBQU8sSUFBSSxXQUFVLFFBQVEsSUFBSTtBQUFBLEVBQ25DO0FBQUEsRUFFQSxPQUFPLFlBQVksS0FBSztBQUl0QixRQUFJLFVBQVUsTUFDWixjQUFjLElBQ2QsWUFBWTtBQUNkLFVBQU0sU0FBUyxDQUFDO0FBQ2hCLGFBQVMsSUFBSSxHQUFHLElBQUksSUFBSSxRQUFRLEtBQUs7QUFDbkMsWUFBTSxJQUFJLElBQUksT0FBTyxDQUFDO0FBQ3RCLFVBQUksTUFBTSxLQUFLO0FBQ2IsWUFBSSxZQUFZLFNBQVMsR0FBRztBQUMxQixpQkFBTyxLQUFLLEVBQUUsU0FBUyxhQUFhLFFBQVEsS0FBSyxXQUFXLEdBQUcsS0FBSyxZQUFZLENBQUM7QUFBQSxRQUNuRjtBQUNBLGtCQUFVO0FBQ1Ysc0JBQWM7QUFDZCxvQkFBWSxDQUFDO0FBQUEsTUFDZixXQUFXLFdBQVc7QUFDcEIsdUJBQWU7QUFBQSxNQUNqQixXQUFXLE1BQU0sU0FBUztBQUN4Qix1QkFBZTtBQUFBLE1BQ2pCLE9BQU87QUFDTCxZQUFJLFlBQVksU0FBUyxHQUFHO0FBQzFCLGlCQUFPLEtBQUssRUFBRSxTQUFTLFFBQVEsS0FBSyxXQUFXLEdBQUcsS0FBSyxZQUFZLENBQUM7QUFBQSxRQUN0RTtBQUNBLHNCQUFjO0FBQ2Qsa0JBQVU7QUFBQSxNQUNaO0FBQUEsSUFDRjtBQUVBLFFBQUksWUFBWSxTQUFTLEdBQUc7QUFDMUIsYUFBTyxLQUFLLEVBQUUsU0FBUyxhQUFhLFFBQVEsS0FBSyxXQUFXLEdBQUcsS0FBSyxZQUFZLENBQUM7QUFBQSxJQUNuRjtBQUVBLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxPQUFPLHVCQUF1QixPQUFPO0FBQ25DLFdBQU8sdUJBQXVCLEtBQUs7QUFBQSxFQUNyQztBQUFBLEVBRUEsWUFBWSxRQUFRLFlBQVk7QUFDOUIsU0FBSyxPQUFPO0FBQ1osU0FBSyxNQUFNO0FBQ1gsU0FBSyxZQUFZO0FBQUEsRUFDbkI7QUFBQSxFQUVBLHdCQUF3QixJQUFJLE1BQU07QUFDaEMsUUFBSSxLQUFLLGNBQWMsTUFBTTtBQUMzQixXQUFLLFlBQVksS0FBSyxJQUFJLGtCQUFrQjtBQUFBLElBQzlDO0FBQ0EsVUFBTSxLQUFLLEtBQUssVUFBVSxZQUFZLElBQUksRUFBRSxHQUFHLEtBQUssTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuRSxXQUFPLEdBQUcsT0FBTztBQUFBLEVBQ25CO0FBQUEsRUFFQSxZQUFZLElBQUksT0FBTyxDQUFDLEdBQUc7QUFDekIsV0FBTyxLQUFLLElBQUksWUFBWSxJQUFJLEVBQUUsR0FBRyxLQUFLLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFBQSxFQUMzRDtBQUFBLEVBRUEsZUFBZSxJQUFJLE1BQU07QUFDdkIsV0FBTyxLQUFLLFlBQVksSUFBSSxJQUFJLEVBQUUsT0FBTztBQUFBLEVBQzNDO0FBQUEsRUFFQSxvQkFBb0IsSUFBSSxNQUFNO0FBQzVCLFdBQU8sS0FBSyxZQUFZLElBQUksSUFBSSxFQUFFLGNBQWM7QUFBQSxFQUNsRDtBQUFBLEVBRUEsZUFBZSxVQUFVLE1BQU07QUFDN0IsVUFBTSxLQUFLLEtBQUssWUFBWSxTQUFTLE9BQU8sSUFBSTtBQUNoRCxXQUFPLEdBQUcsSUFBSSxZQUFZLFNBQVMsTUFBTSxTQUFTLEdBQUcsU0FBUyxJQUFJLFNBQVMsQ0FBQztBQUFBLEVBQzlFO0FBQUEsRUFFQSxnQkFBZ0IsSUFBSSxNQUFNO0FBQ3hCLFdBQU8sS0FBSyxZQUFZLElBQUksSUFBSSxFQUFFLGdCQUFnQjtBQUFBLEVBQ3BEO0FBQUEsRUFFQSxJQUFJQyxJQUFHLElBQUksR0FBRztBQUVaLFFBQUksS0FBSyxLQUFLLGFBQWE7QUFDekIsYUFBTyxTQUFTQSxJQUFHLENBQUM7QUFBQSxJQUN0QjtBQUVBLFVBQU0sT0FBTyxFQUFFLEdBQUcsS0FBSyxLQUFLO0FBRTVCLFFBQUksSUFBSSxHQUFHO0FBQ1QsV0FBSyxRQUFRO0FBQUEsSUFDZjtBQUVBLFdBQU8sS0FBSyxJQUFJLGdCQUFnQixJQUFJLEVBQUUsT0FBT0EsRUFBQztBQUFBLEVBQ2hEO0FBQUEsRUFFQSx5QkFBeUIsSUFBSSxLQUFLO0FBQ2hDLFVBQU0sZUFBZSxLQUFLLElBQUksWUFBWSxNQUFNLE1BQzlDLHVCQUF1QixLQUFLLElBQUksa0JBQWtCLEtBQUssSUFBSSxtQkFBbUIsV0FDOUUsU0FBUyxDQUFDLE1BQU0sWUFBWSxLQUFLLElBQUksUUFBUSxJQUFJLE1BQU0sT0FBTyxHQUM5REMsZ0JBQWUsQ0FBQyxTQUFTO0FBQ3ZCLFVBQUksR0FBRyxpQkFBaUIsR0FBRyxXQUFXLEtBQUssS0FBSyxRQUFRO0FBQ3RELGVBQU87QUFBQSxNQUNUO0FBRUEsYUFBTyxHQUFHLFVBQVUsR0FBRyxLQUFLLGFBQWEsR0FBRyxJQUFJLEtBQUssTUFBTSxJQUFJO0FBQUEsSUFDakUsR0FDQSxXQUFXLE1BQ1QsZUFDWSxvQkFBb0IsRUFBRSxJQUM5QixPQUFPLEVBQUUsTUFBTSxXQUFXLFdBQVcsTUFBTSxHQUFHLFdBQVcsR0FDL0QsUUFBUSxDQUFDLFFBQVEsZUFDZixlQUNZLGlCQUFpQixJQUFJLE1BQU0sSUFDbkMsT0FBTyxhQUFhLEVBQUUsT0FBTyxPQUFPLElBQUksRUFBRSxPQUFPLFFBQVEsS0FBSyxVQUFVLEdBQUcsT0FBTyxHQUN4RixVQUFVLENBQUMsUUFBUSxlQUNqQixlQUNZLG1CQUFtQixJQUFJLE1BQU0sSUFDckM7QUFBQSxNQUNFLGFBQWEsRUFBRSxTQUFTLE9BQU8sSUFBSSxFQUFFLFNBQVMsUUFBUSxPQUFPLFFBQVEsS0FBSyxVQUFVO0FBQUEsTUFDcEY7QUFBQSxJQUNGLEdBQ04sYUFBYSxDQUFDLFVBQVU7QUFDdEIsWUFBTSxhQUFhLFdBQVUsdUJBQXVCLEtBQUs7QUFDekQsVUFBSSxZQUFZO0FBQ2QsZUFBTyxLQUFLLHdCQUF3QixJQUFJLFVBQVU7QUFBQSxNQUNwRCxPQUFPO0FBQ0wsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGLEdBQ0EsTUFBTSxDQUFDLFdBQ0wsZUFBdUIsZUFBZSxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUUsS0FBSyxPQUFPLEdBQUcsS0FBSyxHQUNuRixnQkFBZ0IsQ0FBQyxVQUFVO0FBRXpCLGNBQVEsT0FBTztBQUFBO0FBQUEsUUFFYixLQUFLO0FBQ0gsaUJBQU8sS0FBSyxJQUFJLEdBQUcsV0FBVztBQUFBLFFBQ2hDLEtBQUs7QUFBQTtBQUFBLFFBRUwsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLGFBQWEsQ0FBQztBQUFBO0FBQUEsUUFFbkMsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLE1BQU07QUFBQSxRQUMzQixLQUFLO0FBQ0gsaUJBQU8sS0FBSyxJQUFJLEdBQUcsUUFBUSxDQUFDO0FBQUE7QUFBQSxRQUU5QixLQUFLO0FBQ0gsaUJBQU8sS0FBSyxJQUFJLEtBQUssTUFBTSxHQUFHLGNBQWMsRUFBRSxHQUFHLENBQUM7QUFBQSxRQUNwRCxLQUFLO0FBQ0gsaUJBQU8sS0FBSyxJQUFJLEtBQUssTUFBTSxHQUFHLGNBQWMsR0FBRyxDQUFDO0FBQUE7QUFBQSxRQUVsRCxLQUFLO0FBQ0gsaUJBQU8sS0FBSyxJQUFJLEdBQUcsTUFBTTtBQUFBLFFBQzNCLEtBQUs7QUFDSCxpQkFBTyxLQUFLLElBQUksR0FBRyxRQUFRLENBQUM7QUFBQTtBQUFBLFFBRTlCLEtBQUs7QUFDSCxpQkFBTyxLQUFLLElBQUksR0FBRyxPQUFPLE9BQU8sSUFBSSxLQUFLLEdBQUcsT0FBTyxFQUFFO0FBQUEsUUFDeEQsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLE9BQU8sT0FBTyxJQUFJLEtBQUssR0FBRyxPQUFPLElBQUksQ0FBQztBQUFBLFFBQzNELEtBQUs7QUFDSCxpQkFBTyxLQUFLLElBQUksR0FBRyxJQUFJO0FBQUEsUUFDekIsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUFBO0FBQUEsUUFFNUIsS0FBSztBQUVILGlCQUFPQSxjQUFhLEVBQUUsUUFBUSxVQUFVLFFBQVEsS0FBSyxLQUFLLE9BQU8sQ0FBQztBQUFBLFFBQ3BFLEtBQUs7QUFFSCxpQkFBT0EsY0FBYSxFQUFFLFFBQVEsU0FBUyxRQUFRLEtBQUssS0FBSyxPQUFPLENBQUM7QUFBQSxRQUNuRSxLQUFLO0FBRUgsaUJBQU9BLGNBQWEsRUFBRSxRQUFRLFVBQVUsUUFBUSxLQUFLLEtBQUssT0FBTyxDQUFDO0FBQUEsUUFDcEUsS0FBSztBQUVILGlCQUFPLEdBQUcsS0FBSyxXQUFXLEdBQUcsSUFBSSxFQUFFLFFBQVEsU0FBUyxRQUFRLEtBQUssSUFBSSxPQUFPLENBQUM7QUFBQSxRQUMvRSxLQUFLO0FBRUgsaUJBQU8sR0FBRyxLQUFLLFdBQVcsR0FBRyxJQUFJLEVBQUUsUUFBUSxRQUFRLFFBQVEsS0FBSyxJQUFJLE9BQU8sQ0FBQztBQUFBO0FBQUEsUUFFOUUsS0FBSztBQUVILGlCQUFPLEdBQUc7QUFBQTtBQUFBLFFBRVosS0FBSztBQUNILGlCQUFPLFNBQVM7QUFBQTtBQUFBLFFBRWxCLEtBQUs7QUFDSCxpQkFBTyx1QkFBdUIsT0FBTyxFQUFFLEtBQUssVUFBVSxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksR0FBRyxHQUFHO0FBQUEsUUFDbkYsS0FBSztBQUNILGlCQUFPLHVCQUF1QixPQUFPLEVBQUUsS0FBSyxVQUFVLEdBQUcsS0FBSyxJQUFJLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQztBQUFBO0FBQUEsUUFFdEYsS0FBSztBQUVILGlCQUFPLEtBQUssSUFBSSxHQUFHLE9BQU87QUFBQSxRQUM1QixLQUFLO0FBRUgsaUJBQU8sUUFBUSxTQUFTLElBQUk7QUFBQSxRQUM5QixLQUFLO0FBRUgsaUJBQU8sUUFBUSxRQUFRLElBQUk7QUFBQSxRQUM3QixLQUFLO0FBRUgsaUJBQU8sUUFBUSxVQUFVLElBQUk7QUFBQTtBQUFBLFFBRS9CLEtBQUs7QUFFSCxpQkFBTyxLQUFLLElBQUksR0FBRyxPQUFPO0FBQUEsUUFDNUIsS0FBSztBQUVILGlCQUFPLFFBQVEsU0FBUyxLQUFLO0FBQUEsUUFDL0IsS0FBSztBQUVILGlCQUFPLFFBQVEsUUFBUSxLQUFLO0FBQUEsUUFDOUIsS0FBSztBQUVILGlCQUFPLFFBQVEsVUFBVSxLQUFLO0FBQUE7QUFBQSxRQUVoQyxLQUFLO0FBRUgsaUJBQU8sdUJBQ0gsT0FBTyxFQUFFLE9BQU8sV0FBVyxLQUFLLFVBQVUsR0FBRyxPQUFPLElBQ3BELEtBQUssSUFBSSxHQUFHLEtBQUs7QUFBQSxRQUN2QixLQUFLO0FBRUgsaUJBQU8sdUJBQ0gsT0FBTyxFQUFFLE9BQU8sV0FBVyxLQUFLLFVBQVUsR0FBRyxPQUFPLElBQ3BELEtBQUssSUFBSSxHQUFHLE9BQU8sQ0FBQztBQUFBLFFBQzFCLEtBQUs7QUFFSCxpQkFBTyxNQUFNLFNBQVMsSUFBSTtBQUFBLFFBQzVCLEtBQUs7QUFFSCxpQkFBTyxNQUFNLFFBQVEsSUFBSTtBQUFBLFFBQzNCLEtBQUs7QUFFSCxpQkFBTyxNQUFNLFVBQVUsSUFBSTtBQUFBO0FBQUEsUUFFN0IsS0FBSztBQUVILGlCQUFPLHVCQUNILE9BQU8sRUFBRSxPQUFPLFVBQVUsR0FBRyxPQUFPLElBQ3BDLEtBQUssSUFBSSxHQUFHLEtBQUs7QUFBQSxRQUN2QixLQUFLO0FBRUgsaUJBQU8sdUJBQ0gsT0FBTyxFQUFFLE9BQU8sVUFBVSxHQUFHLE9BQU8sSUFDcEMsS0FBSyxJQUFJLEdBQUcsT0FBTyxDQUFDO0FBQUEsUUFDMUIsS0FBSztBQUVILGlCQUFPLE1BQU0sU0FBUyxLQUFLO0FBQUEsUUFDN0IsS0FBSztBQUVILGlCQUFPLE1BQU0sUUFBUSxLQUFLO0FBQUEsUUFDNUIsS0FBSztBQUVILGlCQUFPLE1BQU0sVUFBVSxLQUFLO0FBQUE7QUFBQSxRQUU5QixLQUFLO0FBRUgsaUJBQU8sdUJBQXVCLE9BQU8sRUFBRSxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksS0FBSyxJQUFJLEdBQUcsSUFBSTtBQUFBLFFBQ3RGLEtBQUs7QUFFSCxpQkFBTyx1QkFDSCxPQUFPLEVBQUUsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUNsQyxLQUFLLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUEsUUFDOUMsS0FBSztBQUVILGlCQUFPLHVCQUNILE9BQU8sRUFBRSxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQ2xDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUFBLFFBQ3pCLEtBQUs7QUFFSCxpQkFBTyx1QkFDSCxPQUFPLEVBQUUsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUNsQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUM7QUFBQTtBQUFBLFFBRXpCLEtBQUs7QUFFSCxpQkFBTyxJQUFJLE9BQU87QUFBQSxRQUNwQixLQUFLO0FBRUgsaUJBQU8sSUFBSSxNQUFNO0FBQUEsUUFDbkIsS0FBSztBQUNILGlCQUFPLElBQUksUUFBUTtBQUFBLFFBQ3JCLEtBQUs7QUFDSCxpQkFBTyxLQUFLLElBQUksR0FBRyxTQUFTLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUEsUUFDckQsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLFVBQVUsQ0FBQztBQUFBLFFBQ2hDLEtBQUs7QUFDSCxpQkFBTyxLQUFLLElBQUksR0FBRyxVQUFVO0FBQUEsUUFDL0IsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLFlBQVksQ0FBQztBQUFBLFFBQ2xDLEtBQUs7QUFDSCxpQkFBTyxLQUFLLElBQUksR0FBRyxlQUFlO0FBQUEsUUFDcEMsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLGlCQUFpQixDQUFDO0FBQUEsUUFDdkMsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLGNBQWMsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBQSxRQUMxRCxLQUFLO0FBQ0gsaUJBQU8sS0FBSyxJQUFJLEdBQUcsZUFBZSxDQUFDO0FBQUEsUUFDckMsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxHQUFHLE9BQU87QUFBQSxRQUM1QixLQUFLO0FBQ0gsaUJBQU8sS0FBSyxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQUEsUUFDL0IsS0FBSztBQUVILGlCQUFPLEtBQUssSUFBSSxHQUFHLE9BQU87QUFBQSxRQUM1QixLQUFLO0FBRUgsaUJBQU8sS0FBSyxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQUEsUUFDL0IsS0FBSztBQUNILGlCQUFPLEtBQUssSUFBSSxLQUFLLE1BQU0sR0FBRyxLQUFLLEdBQUksQ0FBQztBQUFBLFFBQzFDLEtBQUs7QUFDSCxpQkFBTyxLQUFLLElBQUksR0FBRyxFQUFFO0FBQUEsUUFDdkI7QUFDRSxpQkFBTyxXQUFXLEtBQUs7QUFBQSxNQUMzQjtBQUFBLElBQ0Y7QUFFRixXQUFPLGdCQUFnQixXQUFVLFlBQVksR0FBRyxHQUFHLGFBQWE7QUFBQSxFQUNsRTtBQUFBLEVBRUEseUJBQXlCLEtBQUssS0FBSztBQUNqQyxVQUFNLGVBQWUsQ0FBQyxVQUFVO0FBQzVCLGNBQVEsTUFBTSxDQUFDLEdBQUc7QUFBQSxRQUNoQixLQUFLO0FBQ0gsaUJBQU87QUFBQSxRQUNULEtBQUs7QUFDSCxpQkFBTztBQUFBLFFBQ1QsS0FBSztBQUNILGlCQUFPO0FBQUEsUUFDVCxLQUFLO0FBQ0gsaUJBQU87QUFBQSxRQUNULEtBQUs7QUFDSCxpQkFBTztBQUFBLFFBQ1QsS0FBSztBQUNILGlCQUFPO0FBQUEsUUFDVCxLQUFLO0FBQ0gsaUJBQU87QUFBQSxRQUNULEtBQUs7QUFDSCxpQkFBTztBQUFBLFFBQ1Q7QUFDRSxpQkFBTztBQUFBLE1BQ1g7QUFBQSxJQUNGLEdBQ0EsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFVBQVU7QUFDckMsWUFBTSxTQUFTLGFBQWEsS0FBSztBQUNqQyxVQUFJLFFBQVE7QUFDVixlQUFPLEtBQUssSUFBSSxPQUFPLElBQUksTUFBTSxHQUFHLE1BQU0sTUFBTTtBQUFBLE1BQ2xELE9BQU87QUFDTCxlQUFPO0FBQUEsTUFDVDtBQUFBLElBQ0YsR0FDQSxTQUFTLFdBQVUsWUFBWSxHQUFHLEdBQ2xDLGFBQWEsT0FBTztBQUFBLE1BQ2xCLENBQUMsT0FBTyxFQUFFLFNBQVMsSUFBSSxNQUFPLFVBQVUsUUFBUSxNQUFNLE9BQU8sR0FBRztBQUFBLE1BQ2hFLENBQUM7QUFBQSxJQUNILEdBQ0EsWUFBWSxJQUFJLFFBQVEsR0FBRyxXQUFXLElBQUksWUFBWSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxRSxXQUFPLGdCQUFnQixRQUFRLGNBQWMsU0FBUyxDQUFDO0FBQUEsRUFDekQ7QUFDRjs7O0FDbFlBLElBQU0sWUFBWTtBQUVsQixTQUFTLGtCQUFrQixTQUFTO0FBQ2xDLFFBQU0sT0FBTyxRQUFRLE9BQU8sQ0FBQyxHQUFHLE1BQU0sSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUN0RCxTQUFPLE9BQU8sSUFBSSxJQUFJLEdBQUc7QUFDM0I7QUFFQSxTQUFTLHFCQUFxQixZQUFZO0FBQ3hDLFNBQU8sQ0FBQyxNQUNOLFdBQ0c7QUFBQSxJQUNDLENBQUMsQ0FBQyxZQUFZLFlBQVksTUFBTSxHQUFHLE9BQU87QUFDeEMsWUFBTSxDQUFDLEtBQUssTUFBTSxJQUFJLElBQUksR0FBRyxHQUFHLE1BQU07QUFDdEMsYUFBTyxDQUFDLEVBQUUsR0FBRyxZQUFZLEdBQUcsSUFBSSxHQUFHLFFBQVEsWUFBWSxJQUFJO0FBQUEsSUFDN0Q7QUFBQSxJQUNBLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUFBLEVBQ2QsRUFDQyxNQUFNLEdBQUcsQ0FBQztBQUNqQjtBQUVBLFNBQVMsTUFBTUMsT0FBTSxVQUFVO0FBQzdCLE1BQUlBLE1BQUssTUFBTTtBQUNiLFdBQU8sQ0FBQyxNQUFNLElBQUk7QUFBQSxFQUNwQjtBQUVBLGFBQVcsQ0FBQyxPQUFPLFNBQVMsS0FBSyxVQUFVO0FBQ3pDLFVBQU0sSUFBSSxNQUFNLEtBQUtBLEVBQUM7QUFDdEIsUUFBSSxHQUFHO0FBQ0wsYUFBTyxVQUFVLENBQUM7QUFBQSxJQUNwQjtBQUFBLEVBQ0Y7QUFDQSxTQUFPLENBQUMsTUFBTSxJQUFJO0FBQ3BCO0FBRUEsU0FBUyxlQUFlLE1BQU07QUFDNUIsU0FBTyxDQUFDQyxRQUFPLFdBQVc7QUFDeEIsVUFBTSxNQUFNLENBQUM7QUFDYixRQUFJO0FBRUosU0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLFFBQVEsS0FBSztBQUNoQyxVQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksYUFBYUEsT0FBTSxTQUFTLENBQUMsQ0FBQztBQUFBLElBQy9DO0FBQ0EsV0FBTyxDQUFDLEtBQUssTUFBTSxTQUFTLENBQUM7QUFBQSxFQUMvQjtBQUNGO0FBR0EsSUFBTSxjQUFjO0FBQ3BCLElBQU0sa0JBQWtCLE1BQU0sWUFBWSxNQUFNLFdBQVcsVUFBVSxNQUFNO0FBQzNFLElBQU0sbUJBQW1CO0FBQ3pCLElBQU0sZUFBZSxPQUFPLEdBQUcsaUJBQWlCLE1BQU0sR0FBRyxlQUFlLEVBQUU7QUFDMUUsSUFBTSx3QkFBd0IsT0FBTyxPQUFPLGFBQWEsTUFBTSxJQUFJO0FBQ25FLElBQU0sY0FBYztBQUNwQixJQUFNLGVBQWU7QUFDckIsSUFBTSxrQkFBa0I7QUFDeEIsSUFBTSxxQkFBcUIsWUFBWSxZQUFZLGNBQWMsU0FBUztBQUMxRSxJQUFNLHdCQUF3QixZQUFZLFFBQVEsU0FBUztBQUMzRCxJQUFNLGNBQWM7QUFDcEIsSUFBTSxlQUFlO0FBQUEsRUFDbkIsR0FBRyxpQkFBaUIsTUFBTSxRQUFRLFlBQVksTUFBTSxLQUFLLFVBQVUsTUFBTTtBQUMzRTtBQUNBLElBQU0sd0JBQXdCLE9BQU8sT0FBTyxhQUFhLE1BQU0sSUFBSTtBQUVuRSxTQUFTLElBQUlBLFFBQU8sS0FBSyxVQUFVO0FBQ2pDLFFBQU0sSUFBSUEsT0FBTSxHQUFHO0FBQ25CLFNBQU8sWUFBWSxDQUFDLElBQUksV0FBVyxhQUFhLENBQUM7QUFDbkQ7QUFFQSxTQUFTLGNBQWNBLFFBQU8sUUFBUTtBQUNwQyxRQUFNLE9BQU87QUFBQSxJQUNYLE1BQU0sSUFBSUEsUUFBTyxNQUFNO0FBQUEsSUFDdkIsT0FBTyxJQUFJQSxRQUFPLFNBQVMsR0FBRyxDQUFDO0FBQUEsSUFDL0IsS0FBSyxJQUFJQSxRQUFPLFNBQVMsR0FBRyxDQUFDO0FBQUEsRUFDL0I7QUFFQSxTQUFPLENBQUMsTUFBTSxNQUFNLFNBQVMsQ0FBQztBQUNoQztBQUVBLFNBQVMsZUFBZUEsUUFBTyxRQUFRO0FBQ3JDLFFBQU0sT0FBTztBQUFBLElBQ1gsT0FBTyxJQUFJQSxRQUFPLFFBQVEsQ0FBQztBQUFBLElBQzNCLFNBQVMsSUFBSUEsUUFBTyxTQUFTLEdBQUcsQ0FBQztBQUFBLElBQ2pDLFNBQVMsSUFBSUEsUUFBTyxTQUFTLEdBQUcsQ0FBQztBQUFBLElBQ2pDLGNBQWMsWUFBWUEsT0FBTSxTQUFTLENBQUMsQ0FBQztBQUFBLEVBQzdDO0FBRUEsU0FBTyxDQUFDLE1BQU0sTUFBTSxTQUFTLENBQUM7QUFDaEM7QUFFQSxTQUFTLGlCQUFpQkEsUUFBTyxRQUFRO0FBQ3ZDLFFBQU0sUUFBUSxDQUFDQSxPQUFNLE1BQU0sS0FBSyxDQUFDQSxPQUFNLFNBQVMsQ0FBQyxHQUMvQyxhQUFhLGFBQWFBLE9BQU0sU0FBUyxDQUFDLEdBQUdBLE9BQU0sU0FBUyxDQUFDLENBQUMsR0FDOUQsT0FBTyxRQUFRLE9BQU8sZ0JBQWdCLFNBQVMsVUFBVTtBQUMzRCxTQUFPLENBQUMsQ0FBQyxHQUFHLE1BQU0sU0FBUyxDQUFDO0FBQzlCO0FBRUEsU0FBUyxnQkFBZ0JBLFFBQU8sUUFBUTtBQUN0QyxRQUFNLE9BQU9BLE9BQU0sTUFBTSxJQUFJLFNBQVMsT0FBT0EsT0FBTSxNQUFNLENBQUMsSUFBSTtBQUM5RCxTQUFPLENBQUMsQ0FBQyxHQUFHLE1BQU0sU0FBUyxDQUFDO0FBQzlCO0FBSUEsSUFBTSxjQUFjLE9BQU8sTUFBTSxpQkFBaUIsTUFBTSxHQUFHO0FBSTNELElBQU0sY0FDSjtBQUVGLFNBQVMsbUJBQW1CQSxRQUFPO0FBQ2pDLFFBQU0sQ0FBQ0QsSUFBRyxTQUFTLFVBQVUsU0FBUyxRQUFRLFNBQVMsV0FBVyxXQUFXLGVBQWUsSUFDMUZDO0FBRUYsUUFBTSxvQkFBb0JELEdBQUUsQ0FBQyxNQUFNO0FBQ25DLFFBQU0sa0JBQWtCLGFBQWEsVUFBVSxDQUFDLE1BQU07QUFFdEQsUUFBTSxjQUFjLENBQUMsS0FBSyxRQUFRLFVBQ2hDLFFBQVEsV0FBYyxTQUFVLE9BQU8scUJBQXNCLENBQUMsTUFBTTtBQUV0RSxTQUFPO0FBQUEsSUFDTDtBQUFBLE1BQ0UsT0FBTyxZQUFZLGNBQWMsT0FBTyxDQUFDO0FBQUEsTUFDekMsUUFBUSxZQUFZLGNBQWMsUUFBUSxDQUFDO0FBQUEsTUFDM0MsT0FBTyxZQUFZLGNBQWMsT0FBTyxDQUFDO0FBQUEsTUFDekMsTUFBTSxZQUFZLGNBQWMsTUFBTSxDQUFDO0FBQUEsTUFDdkMsT0FBTyxZQUFZLGNBQWMsT0FBTyxDQUFDO0FBQUEsTUFDekMsU0FBUyxZQUFZLGNBQWMsU0FBUyxDQUFDO0FBQUEsTUFDN0MsU0FBUyxZQUFZLGNBQWMsU0FBUyxHQUFHLGNBQWMsSUFBSTtBQUFBLE1BQ2pFLGNBQWMsWUFBWSxZQUFZLGVBQWUsR0FBRyxlQUFlO0FBQUEsSUFDekU7QUFBQSxFQUNGO0FBQ0Y7QUFLQSxJQUFNLGFBQWE7QUFBQSxFQUNqQixLQUFLO0FBQUEsRUFDTCxLQUFLLEtBQUs7QUFBQSxFQUNWLEtBQUssS0FBSztBQUFBLEVBQ1YsS0FBSyxLQUFLO0FBQUEsRUFDVixLQUFLLEtBQUs7QUFBQSxFQUNWLEtBQUssS0FBSztBQUFBLEVBQ1YsS0FBSyxLQUFLO0FBQUEsRUFDVixLQUFLLEtBQUs7QUFBQSxFQUNWLEtBQUssS0FBSztBQUNaO0FBRUEsU0FBUyxZQUFZLFlBQVksU0FBUyxVQUFVLFFBQVEsU0FBUyxXQUFXLFdBQVc7QUFDekYsUUFBTSxTQUFTO0FBQUEsSUFDYixNQUFNLFFBQVEsV0FBVyxJQUFJLGVBQWUsYUFBYSxPQUFPLENBQUMsSUFBSSxhQUFhLE9BQU87QUFBQSxJQUN6RixPQUFlLFlBQVksUUFBUSxRQUFRLElBQUk7QUFBQSxJQUMvQyxLQUFLLGFBQWEsTUFBTTtBQUFBLElBQ3hCLE1BQU0sYUFBYSxPQUFPO0FBQUEsSUFDMUIsUUFBUSxhQUFhLFNBQVM7QUFBQSxFQUNoQztBQUVBLE1BQUksVUFBVyxRQUFPLFNBQVMsYUFBYSxTQUFTO0FBQ3JELE1BQUksWUFBWTtBQUNkLFdBQU8sVUFDTCxXQUFXLFNBQVMsSUFDUixhQUFhLFFBQVEsVUFBVSxJQUFJLElBQ25DLGNBQWMsUUFBUSxVQUFVLElBQUk7QUFBQSxFQUNwRDtBQUVBLFNBQU87QUFDVDtBQUdBLElBQU0sVUFDSjtBQUVGLFNBQVMsZUFBZUMsUUFBTztBQUM3QixRQUFNO0FBQUEsSUFDRjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsRUFDRixJQUFJQSxRQUNKLFNBQVMsWUFBWSxZQUFZLFNBQVMsVUFBVSxRQUFRLFNBQVMsV0FBVyxTQUFTO0FBRTNGLE1BQUlDO0FBQ0osTUFBSSxXQUFXO0FBQ2IsSUFBQUEsVUFBUyxXQUFXLFNBQVM7QUFBQSxFQUMvQixXQUFXLFdBQVc7QUFDcEIsSUFBQUEsVUFBUztBQUFBLEVBQ1gsT0FBTztBQUNMLElBQUFBLFVBQVMsYUFBYSxZQUFZLFlBQVk7QUFBQSxFQUNoRDtBQUVBLFNBQU8sQ0FBQyxRQUFRLElBQUksZ0JBQWdCQSxPQUFNLENBQUM7QUFDN0M7QUFFQSxTQUFTLGtCQUFrQkYsSUFBRztBQUU1QixTQUFPQSxHQUNKLFFBQVEsc0JBQXNCLEdBQUcsRUFDakMsUUFBUSxZQUFZLEdBQUcsRUFDdkIsS0FBSztBQUNWO0FBSUEsSUFBTSxVQUNGO0FBREosSUFFRSxTQUNFO0FBSEosSUFJRSxRQUNFO0FBRUosU0FBUyxvQkFBb0JDLFFBQU87QUFDbEMsUUFBTSxDQUFDLEVBQUUsWUFBWSxRQUFRLFVBQVUsU0FBUyxTQUFTLFdBQVcsU0FBUyxJQUFJQSxRQUMvRSxTQUFTLFlBQVksWUFBWSxTQUFTLFVBQVUsUUFBUSxTQUFTLFdBQVcsU0FBUztBQUMzRixTQUFPLENBQUMsUUFBUSxnQkFBZ0IsV0FBVztBQUM3QztBQUVBLFNBQVMsYUFBYUEsUUFBTztBQUMzQixRQUFNLENBQUMsRUFBRSxZQUFZLFVBQVUsUUFBUSxTQUFTLFdBQVcsV0FBVyxPQUFPLElBQUlBLFFBQy9FLFNBQVMsWUFBWSxZQUFZLFNBQVMsVUFBVSxRQUFRLFNBQVMsV0FBVyxTQUFTO0FBQzNGLFNBQU8sQ0FBQyxRQUFRLGdCQUFnQixXQUFXO0FBQzdDO0FBRUEsSUFBTSwrQkFBK0IsZUFBZSxhQUFhLHFCQUFxQjtBQUN0RixJQUFNLGdDQUFnQyxlQUFlLGNBQWMscUJBQXFCO0FBQ3hGLElBQU0sbUNBQW1DLGVBQWUsaUJBQWlCLHFCQUFxQjtBQUM5RixJQUFNLHVCQUF1QixlQUFlLFlBQVk7QUFFeEQsSUFBTSw2QkFBNkI7QUFBQSxFQUNqQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGO0FBQ0EsSUFBTSw4QkFBOEI7QUFBQSxFQUNsQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGO0FBQ0EsSUFBTSwrQkFBK0I7QUFBQSxFQUNuQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGO0FBQ0EsSUFBTSwwQkFBMEI7QUFBQSxFQUM5QjtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0Y7QUFNTyxTQUFTLGFBQWFELElBQUc7QUFDOUIsU0FBTztBQUFBLElBQ0xBO0FBQUEsSUFDQSxDQUFDLDhCQUE4QiwwQkFBMEI7QUFBQSxJQUN6RCxDQUFDLCtCQUErQiwyQkFBMkI7QUFBQSxJQUMzRCxDQUFDLGtDQUFrQyw0QkFBNEI7QUFBQSxJQUMvRCxDQUFDLHNCQUFzQix1QkFBdUI7QUFBQSxFQUNoRDtBQUNGO0FBRU8sU0FBUyxpQkFBaUJBLElBQUc7QUFDbEMsU0FBTyxNQUFNLGtCQUFrQkEsRUFBQyxHQUFHLENBQUMsU0FBUyxjQUFjLENBQUM7QUFDOUQ7QUFFTyxTQUFTLGNBQWNBLElBQUc7QUFDL0IsU0FBTztBQUFBLElBQ0xBO0FBQUEsSUFDQSxDQUFDLFNBQVMsbUJBQW1CO0FBQUEsSUFDN0IsQ0FBQyxRQUFRLG1CQUFtQjtBQUFBLElBQzVCLENBQUMsT0FBTyxZQUFZO0FBQUEsRUFDdEI7QUFDRjtBQUVPLFNBQVMsaUJBQWlCQSxJQUFHO0FBQ2xDLFNBQU8sTUFBTUEsSUFBRyxDQUFDLGFBQWEsa0JBQWtCLENBQUM7QUFDbkQ7QUFFQSxJQUFNLHFCQUFxQixrQkFBa0IsY0FBYztBQUVwRCxTQUFTLGlCQUFpQkEsSUFBRztBQUNsQyxTQUFPLE1BQU1BLElBQUcsQ0FBQyxhQUFhLGtCQUFrQixDQUFDO0FBQ25EO0FBRUEsSUFBTSwrQkFBK0IsZUFBZSxhQUFhLHFCQUFxQjtBQUN0RixJQUFNLHVCQUF1QixlQUFlLFlBQVk7QUFFeEQsSUFBTSxrQ0FBa0M7QUFBQSxFQUN0QztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0Y7QUFFTyxTQUFTLFNBQVNBLElBQUc7QUFDMUIsU0FBTztBQUFBLElBQ0xBO0FBQUEsSUFDQSxDQUFDLDhCQUE4QiwwQkFBMEI7QUFBQSxJQUN6RCxDQUFDLHNCQUFzQiwrQkFBK0I7QUFBQSxFQUN4RDtBQUNGOzs7QUM5VEEsSUFBTSxVQUFVO0FBR1QsSUFBTSxpQkFBaUI7QUFBQSxFQUMxQixPQUFPO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixPQUFPLElBQUk7QUFBQSxJQUNYLFNBQVMsSUFBSSxLQUFLO0FBQUEsSUFDbEIsU0FBUyxJQUFJLEtBQUssS0FBSztBQUFBLElBQ3ZCLGNBQWMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUFBLEVBQ25DO0FBQUEsRUFDQSxNQUFNO0FBQUEsSUFDSixPQUFPO0FBQUEsSUFDUCxTQUFTLEtBQUs7QUFBQSxJQUNkLFNBQVMsS0FBSyxLQUFLO0FBQUEsSUFDbkIsY0FBYyxLQUFLLEtBQUssS0FBSztBQUFBLEVBQy9CO0FBQUEsRUFDQSxPQUFPLEVBQUUsU0FBUyxJQUFJLFNBQVMsS0FBSyxJQUFJLGNBQWMsS0FBSyxLQUFLLElBQUs7QUFBQSxFQUNyRSxTQUFTLEVBQUUsU0FBUyxJQUFJLGNBQWMsS0FBSyxJQUFLO0FBQUEsRUFDaEQsU0FBUyxFQUFFLGNBQWMsSUFBSztBQUNoQztBQWpCSyxJQWtCTCxlQUFlO0FBQUEsRUFDYixPQUFPO0FBQUEsSUFDTCxVQUFVO0FBQUEsSUFDVixRQUFRO0FBQUEsSUFDUixPQUFPO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixPQUFPLE1BQU07QUFBQSxJQUNiLFNBQVMsTUFBTSxLQUFLO0FBQUEsSUFDcEIsU0FBUyxNQUFNLEtBQUssS0FBSztBQUFBLElBQ3pCLGNBQWMsTUFBTSxLQUFLLEtBQUssS0FBSztBQUFBLEVBQ3JDO0FBQUEsRUFDQSxVQUFVO0FBQUEsSUFDUixRQUFRO0FBQUEsSUFDUixPQUFPO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixPQUFPLEtBQUs7QUFBQSxJQUNaLFNBQVMsS0FBSyxLQUFLO0FBQUEsSUFDbkIsU0FBUyxLQUFLLEtBQUssS0FBSztBQUFBLElBQ3hCLGNBQWMsS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBLEVBQ3BDO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDTixPQUFPO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixPQUFPLEtBQUs7QUFBQSxJQUNaLFNBQVMsS0FBSyxLQUFLO0FBQUEsSUFDbkIsU0FBUyxLQUFLLEtBQUssS0FBSztBQUFBLElBQ3hCLGNBQWMsS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBLEVBQ3BDO0FBQUEsRUFFQSxHQUFHO0FBQ0w7QUFoREssSUFpREwscUJBQXFCLFNBQVc7QUFqRDNCLElBa0RMLHNCQUFzQixTQUFXO0FBbEQ1QixJQW1ETCxpQkFBaUI7QUFBQSxFQUNmLE9BQU87QUFBQSxJQUNMLFVBQVU7QUFBQSxJQUNWLFFBQVE7QUFBQSxJQUNSLE9BQU8scUJBQXFCO0FBQUEsSUFDNUIsTUFBTTtBQUFBLElBQ04sT0FBTyxxQkFBcUI7QUFBQSxJQUM1QixTQUFTLHFCQUFxQixLQUFLO0FBQUEsSUFDbkMsU0FBUyxxQkFBcUIsS0FBSyxLQUFLO0FBQUEsSUFDeEMsY0FBYyxxQkFBcUIsS0FBSyxLQUFLLEtBQUs7QUFBQSxFQUNwRDtBQUFBLEVBQ0EsVUFBVTtBQUFBLElBQ1IsUUFBUTtBQUFBLElBQ1IsT0FBTyxxQkFBcUI7QUFBQSxJQUM1QixNQUFNLHFCQUFxQjtBQUFBLElBQzNCLE9BQVEscUJBQXFCLEtBQU07QUFBQSxJQUNuQyxTQUFVLHFCQUFxQixLQUFLLEtBQU07QUFBQSxJQUMxQyxTQUFVLHFCQUFxQixLQUFLLEtBQUssS0FBTTtBQUFBLElBQy9DLGNBQWUscUJBQXFCLEtBQUssS0FBSyxLQUFLLE1BQVE7QUFBQSxFQUM3RDtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ04sT0FBTyxzQkFBc0I7QUFBQSxJQUM3QixNQUFNO0FBQUEsSUFDTixPQUFPLHNCQUFzQjtBQUFBLElBQzdCLFNBQVMsc0JBQXNCLEtBQUs7QUFBQSxJQUNwQyxTQUFTLHNCQUFzQixLQUFLLEtBQUs7QUFBQSxJQUN6QyxjQUFjLHNCQUFzQixLQUFLLEtBQUssS0FBSztBQUFBLEVBQ3JEO0FBQUEsRUFDQSxHQUFHO0FBQ0w7QUFHRixJQUFNLGVBQWU7QUFBQSxFQUNuQjtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0Y7QUFFQSxJQUFNLGVBQWUsYUFBYSxNQUFNLENBQUMsRUFBRSxRQUFRO0FBR25ELFNBQVMsTUFBTSxLQUFLLE1BQU0sUUFBUSxPQUFPO0FBRXZDLFFBQU0sT0FBTztBQUFBLElBQ1gsUUFBUSxRQUFRLEtBQUssU0FBUyxFQUFFLEdBQUcsSUFBSSxRQUFRLEdBQUksS0FBSyxVQUFVLENBQUMsRUFBRztBQUFBLElBQ3RFLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxHQUFHO0FBQUEsSUFDM0Isb0JBQW9CLEtBQUssc0JBQXNCLElBQUk7QUFBQSxJQUNuRCxRQUFRLEtBQUssVUFBVSxJQUFJO0FBQUEsRUFDN0I7QUFDQSxTQUFPLElBQUksU0FBUyxJQUFJO0FBQzFCO0FBRUEsU0FBUyxpQkFBaUIsUUFBUSxNQUFNO0FBQ3RDLE1BQUksTUFBTSxLQUFLLGdCQUFnQjtBQUMvQixhQUFXLFFBQVEsYUFBYSxNQUFNLENBQUMsR0FBRztBQUN4QyxRQUFJLEtBQUssSUFBSSxHQUFHO0FBQ2QsYUFBTyxLQUFLLElBQUksSUFBSSxPQUFPLElBQUksRUFBRSxjQUFjO0FBQUEsSUFDakQ7QUFBQSxFQUNGO0FBQ0EsU0FBTztBQUNUO0FBR0EsU0FBUyxnQkFBZ0IsUUFBUSxNQUFNO0FBR3JDLFFBQU0sU0FBUyxpQkFBaUIsUUFBUSxJQUFJLElBQUksSUFBSSxLQUFLO0FBRXpELGVBQWEsWUFBWSxDQUFDLFVBQVUsWUFBWTtBQUM5QyxRQUFJLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxHQUFHO0FBQy9CLFVBQUksVUFBVTtBQUNaLGNBQU0sY0FBYyxLQUFLLFFBQVEsSUFBSTtBQUNyQyxjQUFNLE9BQU8sT0FBTyxPQUFPLEVBQUUsUUFBUTtBQWlCckMsY0FBTSxTQUFTLEtBQUssTUFBTSxjQUFjLElBQUk7QUFDNUMsYUFBSyxPQUFPLEtBQUssU0FBUztBQUMxQixhQUFLLFFBQVEsS0FBSyxTQUFTLE9BQU87QUFBQSxNQUNwQztBQUNBLGFBQU87QUFBQSxJQUNULE9BQU87QUFDTCxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0YsR0FBRyxJQUFJO0FBSVAsZUFBYSxPQUFPLENBQUMsVUFBVSxZQUFZO0FBQ3pDLFFBQUksQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLEdBQUc7QUFDL0IsVUFBSSxVQUFVO0FBQ1osY0FBTSxXQUFXLEtBQUssUUFBUSxJQUFJO0FBQ2xDLGFBQUssUUFBUSxLQUFLO0FBQ2xCLGFBQUssT0FBTyxLQUFLLFdBQVcsT0FBTyxRQUFRLEVBQUUsT0FBTztBQUFBLE1BQ3REO0FBQ0EsYUFBTztBQUFBLElBQ1QsT0FBTztBQUNMLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRixHQUFHLElBQUk7QUFDVDtBQUdBLFNBQVMsYUFBYSxNQUFNO0FBQzFCLFFBQU0sVUFBVSxDQUFDO0FBQ2pCLGFBQVcsQ0FBQyxLQUFLLEtBQUssS0FBSyxPQUFPLFFBQVEsSUFBSSxHQUFHO0FBQy9DLFFBQUksVUFBVSxHQUFHO0FBQ2YsY0FBUSxHQUFHLElBQUk7QUFBQSxJQUNqQjtBQUFBLEVBQ0Y7QUFDQSxTQUFPO0FBQ1Q7QUFlQSxJQUFxQixXQUFyQixNQUFxQixVQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJNUIsWUFBWSxRQUFRO0FBQ2xCLFVBQU0sV0FBVyxPQUFPLHVCQUF1QixjQUFjO0FBQzdELFFBQUksU0FBUyxXQUFXLGlCQUFpQjtBQUV6QyxRQUFJLE9BQU8sUUFBUTtBQUNqQixlQUFTLE9BQU87QUFBQSxJQUNsQjtBQUtBLFNBQUssU0FBUyxPQUFPO0FBSXJCLFNBQUssTUFBTSxPQUFPLE9BQU8sT0FBTyxPQUFPO0FBSXZDLFNBQUsscUJBQXFCLFdBQVcsYUFBYTtBQUlsRCxTQUFLLFVBQVUsT0FBTyxXQUFXO0FBSWpDLFNBQUssU0FBUztBQUlkLFNBQUssa0JBQWtCO0FBQUEsRUFDekI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdBLE9BQU8sV0FBVyxPQUFPLE1BQU07QUFDN0IsV0FBTyxVQUFTLFdBQVcsRUFBRSxjQUFjLE1BQU0sR0FBRyxJQUFJO0FBQUEsRUFDMUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFzQkEsT0FBTyxXQUFXLEtBQUssT0FBTyxDQUFDLEdBQUc7QUFDaEMsUUFBSSxPQUFPLFFBQVEsT0FBTyxRQUFRLFVBQVU7QUFDMUMsWUFBTSxJQUFJO0FBQUEsUUFDUiwrREFDRSxRQUFRLE9BQU8sU0FBUyxPQUFPLEdBQ2pDO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFFQSxXQUFPLElBQUksVUFBUztBQUFBLE1BQ2xCLFFBQVEsZ0JBQWdCLEtBQUssVUFBUyxhQUFhO0FBQUEsTUFDbkQsS0FBSyxPQUFPLFdBQVcsSUFBSTtBQUFBLE1BQzNCLG9CQUFvQixLQUFLO0FBQUEsTUFDekIsUUFBUSxLQUFLO0FBQUEsSUFDZixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFZQSxPQUFPLGlCQUFpQixjQUFjO0FBQ3BDLFFBQUksU0FBUyxZQUFZLEdBQUc7QUFDMUIsYUFBTyxVQUFTLFdBQVcsWUFBWTtBQUFBLElBQ3pDLFdBQVcsVUFBUyxXQUFXLFlBQVksR0FBRztBQUM1QyxhQUFPO0FBQUEsSUFDVCxXQUFXLE9BQU8saUJBQWlCLFVBQVU7QUFDM0MsYUFBTyxVQUFTLFdBQVcsWUFBWTtBQUFBLElBQ3pDLE9BQU87QUFDTCxZQUFNLElBQUk7QUFBQSxRQUNSLDZCQUE2QixZQUFZLFlBQVksT0FBTyxZQUFZO0FBQUEsTUFDMUU7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWdCQSxPQUFPLFFBQVEsTUFBTSxNQUFNO0FBQ3pCLFVBQU0sQ0FBQyxNQUFNLElBQUksaUJBQWlCLElBQUk7QUFDdEMsUUFBSSxRQUFRO0FBQ1YsYUFBTyxVQUFTLFdBQVcsUUFBUSxJQUFJO0FBQUEsSUFDekMsT0FBTztBQUNMLGFBQU8sVUFBUyxRQUFRLGNBQWMsY0FBYyxJQUFJLCtCQUErQjtBQUFBLElBQ3pGO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFrQkEsT0FBTyxZQUFZLE1BQU0sTUFBTTtBQUM3QixVQUFNLENBQUMsTUFBTSxJQUFJLGlCQUFpQixJQUFJO0FBQ3RDLFFBQUksUUFBUTtBQUNWLGFBQU8sVUFBUyxXQUFXLFFBQVEsSUFBSTtBQUFBLElBQ3pDLE9BQU87QUFDTCxhQUFPLFVBQVMsUUFBUSxjQUFjLGNBQWMsSUFBSSwrQkFBK0I7QUFBQSxJQUN6RjtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLE9BQU8sUUFBUSxRQUFRLGNBQWMsTUFBTTtBQUN6QyxRQUFJLENBQUMsUUFBUTtBQUNYLFlBQU0sSUFBSSxxQkFBcUIsa0RBQWtEO0FBQUEsSUFDbkY7QUFFQSxVQUFNLFVBQVUsa0JBQWtCLFVBQVUsU0FBUyxJQUFJLFFBQVEsUUFBUSxXQUFXO0FBRXBGLFFBQUksU0FBUyxnQkFBZ0I7QUFDM0IsWUFBTSxJQUFJLHFCQUFxQixPQUFPO0FBQUEsSUFDeEMsT0FBTztBQUNMLGFBQU8sSUFBSSxVQUFTLEVBQUUsUUFBUSxDQUFDO0FBQUEsSUFDakM7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxPQUFPLGNBQWMsTUFBTTtBQUN6QixVQUFNLGFBQWE7QUFBQSxNQUNqQixNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUEsTUFDVCxVQUFVO0FBQUEsTUFDVixPQUFPO0FBQUEsTUFDUCxRQUFRO0FBQUEsTUFDUixNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxLQUFLO0FBQUEsTUFDTCxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsTUFDVCxRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsTUFDVCxhQUFhO0FBQUEsTUFDYixjQUFjO0FBQUEsSUFDaEIsRUFBRSxPQUFPLEtBQUssWUFBWSxJQUFJLElBQUk7QUFFbEMsUUFBSSxDQUFDLFdBQVksT0FBTSxJQUFJLGlCQUFpQixJQUFJO0FBRWhELFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsT0FBTyxXQUFXLEdBQUc7QUFDbkIsV0FBUSxLQUFLLEVBQUUsbUJBQW9CO0FBQUEsRUFDckM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxTQUFTO0FBQ1gsV0FBTyxLQUFLLFVBQVUsS0FBSyxJQUFJLFNBQVM7QUFBQSxFQUMxQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksa0JBQWtCO0FBQ3BCLFdBQU8sS0FBSyxVQUFVLEtBQUssSUFBSSxrQkFBa0I7QUFBQSxFQUNuRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUF3QkEsU0FBUyxLQUFLLE9BQU8sQ0FBQyxHQUFHO0FBRXZCLFVBQU0sVUFBVTtBQUFBLE1BQ2QsR0FBRztBQUFBLE1BQ0gsT0FBTyxLQUFLLFVBQVUsU0FBUyxLQUFLLFVBQVU7QUFBQSxJQUNoRDtBQUNBLFdBQU8sS0FBSyxVQUNSLFVBQVUsT0FBTyxLQUFLLEtBQUssT0FBTyxFQUFFLHlCQUF5QixNQUFNLEdBQUcsSUFDdEU7QUFBQSxFQUNOO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBZ0JBLFFBQVEsT0FBTyxDQUFDLEdBQUc7QUFDakIsUUFBSSxDQUFDLEtBQUssUUFBUyxRQUFPO0FBRTFCLFVBQU1HLEtBQUksYUFDUCxJQUFJLENBQUMsU0FBUztBQUNiLFlBQU0sTUFBTSxLQUFLLE9BQU8sSUFBSTtBQUM1QixVQUFJLFlBQVksR0FBRyxHQUFHO0FBQ3BCLGVBQU87QUFBQSxNQUNUO0FBQ0EsYUFBTyxLQUFLLElBQ1QsZ0JBQWdCLEVBQUUsT0FBTyxRQUFRLGFBQWEsUUFBUSxHQUFHLE1BQU0sTUFBTSxLQUFLLE1BQU0sR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUN4RixPQUFPLEdBQUc7QUFBQSxJQUNmLENBQUMsRUFDQSxPQUFPLENBQUNDLE9BQU1BLEVBQUM7QUFFbEIsV0FBTyxLQUFLLElBQ1QsY0FBYyxFQUFFLE1BQU0sZUFBZSxPQUFPLEtBQUssYUFBYSxVQUFVLEdBQUcsS0FBSyxDQUFDLEVBQ2pGLE9BQU9ELEVBQUM7QUFBQSxFQUNiO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsV0FBVztBQUNULFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTyxDQUFDO0FBQzNCLFdBQU8sRUFBRSxHQUFHLEtBQUssT0FBTztBQUFBLEVBQzFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVlBLFFBQVE7QUFFTixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFFMUIsUUFBSUUsS0FBSTtBQUNSLFFBQUksS0FBSyxVQUFVLEVBQUcsQ0FBQUEsTUFBSyxLQUFLLFFBQVE7QUFDeEMsUUFBSSxLQUFLLFdBQVcsS0FBSyxLQUFLLGFBQWEsRUFBRyxDQUFBQSxNQUFLLEtBQUssU0FBUyxLQUFLLFdBQVcsSUFBSTtBQUNyRixRQUFJLEtBQUssVUFBVSxFQUFHLENBQUFBLE1BQUssS0FBSyxRQUFRO0FBQ3hDLFFBQUksS0FBSyxTQUFTLEVBQUcsQ0FBQUEsTUFBSyxLQUFLLE9BQU87QUFDdEMsUUFBSSxLQUFLLFVBQVUsS0FBSyxLQUFLLFlBQVksS0FBSyxLQUFLLFlBQVksS0FBSyxLQUFLLGlCQUFpQjtBQUN4RixNQUFBQSxNQUFLO0FBQ1AsUUFBSSxLQUFLLFVBQVUsRUFBRyxDQUFBQSxNQUFLLEtBQUssUUFBUTtBQUN4QyxRQUFJLEtBQUssWUFBWSxFQUFHLENBQUFBLE1BQUssS0FBSyxVQUFVO0FBQzVDLFFBQUksS0FBSyxZQUFZLEtBQUssS0FBSyxpQkFBaUI7QUFHOUMsTUFBQUEsTUFBSyxRQUFRLEtBQUssVUFBVSxLQUFLLGVBQWUsS0FBTSxDQUFDLElBQUk7QUFDN0QsUUFBSUEsT0FBTSxJQUFLLENBQUFBLE1BQUs7QUFDcEIsV0FBT0E7QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWtCQSxVQUFVLE9BQU8sQ0FBQyxHQUFHO0FBQ25CLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUUxQixVQUFNLFNBQVMsS0FBSyxTQUFTO0FBQzdCLFFBQUksU0FBUyxLQUFLLFVBQVUsTUFBVSxRQUFPO0FBRTdDLFdBQU87QUFBQSxNQUNMLHNCQUFzQjtBQUFBLE1BQ3RCLGlCQUFpQjtBQUFBLE1BQ2pCLGVBQWU7QUFBQSxNQUNmLFFBQVE7QUFBQSxNQUNSLEdBQUc7QUFBQSxNQUNILGVBQWU7QUFBQSxJQUNqQjtBQUVBLFVBQU0sV0FBVyxTQUFTLFdBQVcsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVELFdBQU8sU0FBUyxVQUFVLElBQUk7QUFBQSxFQUNoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxTQUFTO0FBQ1AsV0FBTyxLQUFLLE1BQU07QUFBQSxFQUNwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXO0FBQ1QsV0FBTyxLQUFLLE1BQU07QUFBQSxFQUNwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxDQUFDLE9BQU8sSUFBSSw0QkFBNEIsQ0FBQyxJQUFJO0FBQzNDLFFBQUksS0FBSyxTQUFTO0FBQ2hCLGFBQU8sc0JBQXNCLEtBQUssVUFBVSxLQUFLLE1BQU0sQ0FBQztBQUFBLElBQzFELE9BQU87QUFDTCxhQUFPLCtCQUErQixLQUFLLGFBQWE7QUFBQSxJQUMxRDtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVztBQUNULFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUUxQixXQUFPLGlCQUFpQixLQUFLLFFBQVEsS0FBSyxNQUFNO0FBQUEsRUFDbEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsVUFBVTtBQUNSLFdBQU8sS0FBSyxTQUFTO0FBQUEsRUFDdkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxLQUFLLFVBQVU7QUFDYixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFFMUIsVUFBTSxNQUFNLFVBQVMsaUJBQWlCLFFBQVEsR0FDNUMsU0FBUyxDQUFDO0FBRVosZUFBVyxLQUFLLGNBQWM7QUFDNUIsVUFBSSxlQUFlLElBQUksUUFBUSxDQUFDLEtBQUssZUFBZSxLQUFLLFFBQVEsQ0FBQyxHQUFHO0FBQ25FLGVBQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7QUFBQSxNQUNyQztBQUFBLElBQ0Y7QUFFQSxXQUFPLE1BQU0sTUFBTSxFQUFFLFFBQVEsT0FBTyxHQUFHLElBQUk7QUFBQSxFQUM3QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE1BQU0sVUFBVTtBQUNkLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUUxQixVQUFNLE1BQU0sVUFBUyxpQkFBaUIsUUFBUTtBQUM5QyxXQUFPLEtBQUssS0FBSyxJQUFJLE9BQU8sQ0FBQztBQUFBLEVBQy9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLFNBQVMsSUFBSTtBQUNYLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUMxQixVQUFNLFNBQVMsQ0FBQztBQUNoQixlQUFXLEtBQUssT0FBTyxLQUFLLEtBQUssTUFBTSxHQUFHO0FBQ3hDLGFBQU8sQ0FBQyxJQUFJLFNBQVMsR0FBRyxLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUFBLElBQzVDO0FBQ0EsV0FBTyxNQUFNLE1BQU0sRUFBRSxRQUFRLE9BQU8sR0FBRyxJQUFJO0FBQUEsRUFDN0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFVQSxJQUFJLE1BQU07QUFDUixXQUFPLEtBQUssVUFBUyxjQUFjLElBQUksQ0FBQztBQUFBLEVBQzFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLElBQUksUUFBUTtBQUNWLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUUxQixVQUFNLFFBQVEsRUFBRSxHQUFHLEtBQUssUUFBUSxHQUFHLGdCQUFnQixRQUFRLFVBQVMsYUFBYSxFQUFFO0FBQ25GLFdBQU8sTUFBTSxNQUFNLEVBQUUsUUFBUSxNQUFNLENBQUM7QUFBQSxFQUN0QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFlBQVksRUFBRSxRQUFRLGlCQUFpQixvQkFBb0IsT0FBTyxJQUFJLENBQUMsR0FBRztBQUN4RSxVQUFNLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRSxRQUFRLGdCQUFnQixDQUFDO0FBQ3RELFVBQU0sT0FBTyxFQUFFLEtBQUssUUFBUSxtQkFBbUI7QUFDL0MsV0FBTyxNQUFNLE1BQU0sSUFBSTtBQUFBLEVBQ3pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBVUEsR0FBRyxNQUFNO0FBQ1AsV0FBTyxLQUFLLFVBQVUsS0FBSyxRQUFRLElBQUksRUFBRSxJQUFJLElBQUksSUFBSTtBQUFBLEVBQ3ZEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFpQkEsWUFBWTtBQUNWLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUMxQixVQUFNLE9BQU8sS0FBSyxTQUFTO0FBQzNCLG9CQUFnQixLQUFLLFFBQVEsSUFBSTtBQUNqQyxXQUFPLE1BQU0sTUFBTSxFQUFFLFFBQVEsS0FBSyxHQUFHLElBQUk7QUFBQSxFQUMzQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFVBQVU7QUFDUixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsVUFBTSxPQUFPLGFBQWEsS0FBSyxVQUFVLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQztBQUNsRSxXQUFPLE1BQU0sTUFBTSxFQUFFLFFBQVEsS0FBSyxHQUFHLElBQUk7QUFBQSxFQUMzQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFdBQVcsT0FBTztBQUNoQixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFFMUIsUUFBSSxNQUFNLFdBQVcsR0FBRztBQUN0QixhQUFPO0FBQUEsSUFDVDtBQUVBLFlBQVEsTUFBTSxJQUFJLENBQUMsTUFBTSxVQUFTLGNBQWMsQ0FBQyxDQUFDO0FBRWxELFVBQU0sUUFBUSxDQUFDLEdBQ2IsY0FBYyxDQUFDLEdBQ2YsT0FBTyxLQUFLLFNBQVM7QUFDdkIsUUFBSTtBQUVKLGVBQVcsS0FBSyxjQUFjO0FBQzVCLFVBQUksTUFBTSxRQUFRLENBQUMsS0FBSyxHQUFHO0FBQ3pCLG1CQUFXO0FBRVgsWUFBSSxNQUFNO0FBR1YsbUJBQVcsTUFBTSxhQUFhO0FBQzVCLGlCQUFPLEtBQUssT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLFlBQVksRUFBRTtBQUMxQyxzQkFBWSxFQUFFLElBQUk7QUFBQSxRQUNwQjtBQUdBLFlBQUksU0FBUyxLQUFLLENBQUMsQ0FBQyxHQUFHO0FBQ3JCLGlCQUFPLEtBQUssQ0FBQztBQUFBLFFBQ2Y7QUFJQSxjQUFNLElBQUksS0FBSyxNQUFNLEdBQUc7QUFDeEIsY0FBTSxDQUFDLElBQUk7QUFDWCxvQkFBWSxDQUFDLEtBQUssTUFBTSxNQUFPLElBQUksT0FBUTtBQUFBLE1BRzdDLFdBQVcsU0FBUyxLQUFLLENBQUMsQ0FBQyxHQUFHO0FBQzVCLG9CQUFZLENBQUMsSUFBSSxLQUFLLENBQUM7QUFBQSxNQUN6QjtBQUFBLElBQ0Y7QUFJQSxlQUFXLE9BQU8sYUFBYTtBQUM3QixVQUFJLFlBQVksR0FBRyxNQUFNLEdBQUc7QUFDMUIsY0FBTSxRQUFRLEtBQ1osUUFBUSxXQUFXLFlBQVksR0FBRyxJQUFJLFlBQVksR0FBRyxJQUFJLEtBQUssT0FBTyxRQUFRLEVBQUUsR0FBRztBQUFBLE1BQ3RGO0FBQUEsSUFDRjtBQUVBLG9CQUFnQixLQUFLLFFBQVEsS0FBSztBQUNsQyxXQUFPLE1BQU0sTUFBTSxFQUFFLFFBQVEsTUFBTSxHQUFHLElBQUk7QUFBQSxFQUM1QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLGFBQWE7QUFDWCxRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsV0FBTyxLQUFLO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFNBQVM7QUFDUCxRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsVUFBTSxVQUFVLENBQUM7QUFDakIsZUFBVyxLQUFLLE9BQU8sS0FBSyxLQUFLLE1BQU0sR0FBRztBQUN4QyxjQUFRLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssT0FBTyxDQUFDO0FBQUEsSUFDeEQ7QUFDQSxXQUFPLE1BQU0sTUFBTSxFQUFFLFFBQVEsUUFBUSxHQUFHLElBQUk7QUFBQSxFQUM5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLFFBQVE7QUFDVixXQUFPLEtBQUssVUFBVSxLQUFLLE9BQU8sU0FBUyxJQUFJO0FBQUEsRUFDakQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxXQUFXO0FBQ2IsV0FBTyxLQUFLLFVBQVUsS0FBSyxPQUFPLFlBQVksSUFBSTtBQUFBLEVBQ3BEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksU0FBUztBQUNYLFdBQU8sS0FBSyxVQUFVLEtBQUssT0FBTyxVQUFVLElBQUk7QUFBQSxFQUNsRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLFFBQVE7QUFDVixXQUFPLEtBQUssVUFBVSxLQUFLLE9BQU8sU0FBUyxJQUFJO0FBQUEsRUFDakQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxPQUFPO0FBQ1QsV0FBTyxLQUFLLFVBQVUsS0FBSyxPQUFPLFFBQVEsSUFBSTtBQUFBLEVBQ2hEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksUUFBUTtBQUNWLFdBQU8sS0FBSyxVQUFVLEtBQUssT0FBTyxTQUFTLElBQUk7QUFBQSxFQUNqRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLFVBQVU7QUFDWixXQUFPLEtBQUssVUFBVSxLQUFLLE9BQU8sV0FBVyxJQUFJO0FBQUEsRUFDbkQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxVQUFVO0FBQ1osV0FBTyxLQUFLLFVBQVUsS0FBSyxPQUFPLFdBQVcsSUFBSTtBQUFBLEVBQ25EO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksZUFBZTtBQUNqQixXQUFPLEtBQUssVUFBVSxLQUFLLE9BQU8sZ0JBQWdCLElBQUk7QUFBQSxFQUN4RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksVUFBVTtBQUNaLFdBQU8sS0FBSyxZQUFZO0FBQUEsRUFDMUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxnQkFBZ0I7QUFDbEIsV0FBTyxLQUFLLFVBQVUsS0FBSyxRQUFRLFNBQVM7QUFBQSxFQUM5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLHFCQUFxQjtBQUN2QixXQUFPLEtBQUssVUFBVSxLQUFLLFFBQVEsY0FBYztBQUFBLEVBQ25EO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxPQUFPLE9BQU87QUFDWixRQUFJLENBQUMsS0FBSyxXQUFXLENBQUMsTUFBTSxTQUFTO0FBQ25DLGFBQU87QUFBQSxJQUNUO0FBRUEsUUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLE1BQU0sR0FBRyxHQUFHO0FBQy9CLGFBQU87QUFBQSxJQUNUO0FBRUEsYUFBUyxHQUFHLElBQUksSUFBSTtBQUVsQixVQUFJLE9BQU8sVUFBYSxPQUFPLEVBQUcsUUFBTyxPQUFPLFVBQWEsT0FBTztBQUNwRSxhQUFPLE9BQU87QUFBQSxJQUNoQjtBQUVBLGVBQVcsS0FBSyxjQUFjO0FBQzVCLFVBQUksQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsQ0FBQyxHQUFHO0FBQ3hDLGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUNBLFdBQU87QUFBQSxFQUNUO0FBQ0Y7OztBQ3I5QkEsSUFBTUMsV0FBVTtBQUdoQixTQUFTLGlCQUFpQixPQUFPLEtBQUs7QUFDcEMsTUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLFNBQVM7QUFDNUIsV0FBTyxTQUFTLFFBQVEsMEJBQTBCO0FBQUEsRUFDcEQsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFNBQVM7QUFDL0IsV0FBTyxTQUFTLFFBQVEsd0JBQXdCO0FBQUEsRUFDbEQsV0FBVyxNQUFNLE9BQU87QUFDdEIsV0FBTyxTQUFTO0FBQUEsTUFDZDtBQUFBLE1BQ0EscUVBQXFFLE1BQU0sTUFBTSxDQUFDLFlBQVksSUFBSSxNQUFNLENBQUM7QUFBQSxJQUMzRztBQUFBLEVBQ0YsT0FBTztBQUNMLFdBQU87QUFBQSxFQUNUO0FBQ0Y7QUFjQSxJQUFxQixXQUFyQixNQUFxQixVQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJNUIsWUFBWSxRQUFRO0FBSWxCLFNBQUssSUFBSSxPQUFPO0FBSWhCLFNBQUssSUFBSSxPQUFPO0FBSWhCLFNBQUssVUFBVSxPQUFPLFdBQVc7QUFJakMsU0FBSyxrQkFBa0I7QUFBQSxFQUN6QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsT0FBTyxRQUFRLFFBQVEsY0FBYyxNQUFNO0FBQ3pDLFFBQUksQ0FBQyxRQUFRO0FBQ1gsWUFBTSxJQUFJLHFCQUFxQixrREFBa0Q7QUFBQSxJQUNuRjtBQUVBLFVBQU0sVUFBVSxrQkFBa0IsVUFBVSxTQUFTLElBQUksUUFBUSxRQUFRLFdBQVc7QUFFcEYsUUFBSSxTQUFTLGdCQUFnQjtBQUMzQixZQUFNLElBQUkscUJBQXFCLE9BQU87QUFBQSxJQUN4QyxPQUFPO0FBQ0wsYUFBTyxJQUFJLFVBQVMsRUFBRSxRQUFRLENBQUM7QUFBQSxJQUNqQztBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLE9BQU8sY0FBYyxPQUFPLEtBQUs7QUFDL0IsVUFBTSxhQUFhLGlCQUFpQixLQUFLLEdBQ3ZDLFdBQVcsaUJBQWlCLEdBQUc7QUFFakMsVUFBTSxnQkFBZ0IsaUJBQWlCLFlBQVksUUFBUTtBQUUzRCxRQUFJLGlCQUFpQixNQUFNO0FBQ3pCLGFBQU8sSUFBSSxVQUFTO0FBQUEsUUFDbEIsT0FBTztBQUFBLFFBQ1AsS0FBSztBQUFBLE1BQ1AsQ0FBQztBQUFBLElBQ0gsT0FBTztBQUNMLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsT0FBTyxNQUFNLE9BQU8sVUFBVTtBQUM1QixVQUFNLE1BQU0sU0FBUyxpQkFBaUIsUUFBUSxHQUM1QyxLQUFLLGlCQUFpQixLQUFLO0FBQzdCLFdBQU8sVUFBUyxjQUFjLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQztBQUFBLEVBQ2hEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxPQUFPLE9BQU8sS0FBSyxVQUFVO0FBQzNCLFVBQU0sTUFBTSxTQUFTLGlCQUFpQixRQUFRLEdBQzVDLEtBQUssaUJBQWlCLEdBQUc7QUFDM0IsV0FBTyxVQUFTLGNBQWMsR0FBRyxNQUFNLEdBQUcsR0FBRyxFQUFFO0FBQUEsRUFDakQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFVQSxPQUFPLFFBQVEsTUFBTSxNQUFNO0FBQ3pCLFVBQU0sQ0FBQ0MsSUFBRyxDQUFDLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSyxDQUFDO0FBQ3hDLFFBQUlBLE1BQUssR0FBRztBQUNWLFVBQUksT0FBTztBQUNYLFVBQUk7QUFDRixnQkFBUSxTQUFTLFFBQVFBLElBQUcsSUFBSTtBQUNoQyx1QkFBZSxNQUFNO0FBQUEsTUFDdkIsU0FBU0MsSUFBRztBQUNWLHVCQUFlO0FBQUEsTUFDakI7QUFFQSxVQUFJLEtBQUs7QUFDVCxVQUFJO0FBQ0YsY0FBTSxTQUFTLFFBQVEsR0FBRyxJQUFJO0FBQzlCLHFCQUFhLElBQUk7QUFBQSxNQUNuQixTQUFTQSxJQUFHO0FBQ1YscUJBQWE7QUFBQSxNQUNmO0FBRUEsVUFBSSxnQkFBZ0IsWUFBWTtBQUM5QixlQUFPLFVBQVMsY0FBYyxPQUFPLEdBQUc7QUFBQSxNQUMxQztBQUVBLFVBQUksY0FBYztBQUNoQixjQUFNLE1BQU0sU0FBUyxRQUFRLEdBQUcsSUFBSTtBQUNwQyxZQUFJLElBQUksU0FBUztBQUNmLGlCQUFPLFVBQVMsTUFBTSxPQUFPLEdBQUc7QUFBQSxRQUNsQztBQUFBLE1BQ0YsV0FBVyxZQUFZO0FBQ3JCLGNBQU0sTUFBTSxTQUFTLFFBQVFELElBQUcsSUFBSTtBQUNwQyxZQUFJLElBQUksU0FBUztBQUNmLGlCQUFPLFVBQVMsT0FBTyxLQUFLLEdBQUc7QUFBQSxRQUNqQztBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQ0EsV0FBTyxVQUFTLFFBQVEsY0FBYyxjQUFjLElBQUksK0JBQStCO0FBQUEsRUFDekY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxPQUFPLFdBQVcsR0FBRztBQUNuQixXQUFRLEtBQUssRUFBRSxtQkFBb0I7QUFBQSxFQUNyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLFFBQVE7QUFDVixXQUFPLEtBQUssVUFBVSxLQUFLLElBQUk7QUFBQSxFQUNqQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLE1BQU07QUFDUixXQUFPLEtBQUssVUFBVSxLQUFLLElBQUk7QUFBQSxFQUNqQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLGVBQWU7QUFDakIsV0FBTyxLQUFLLFVBQVcsS0FBSyxJQUFJLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxPQUFRO0FBQUEsRUFDNUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxVQUFVO0FBQ1osV0FBTyxLQUFLLGtCQUFrQjtBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksZ0JBQWdCO0FBQ2xCLFdBQU8sS0FBSyxVQUFVLEtBQUssUUFBUSxTQUFTO0FBQUEsRUFDOUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxxQkFBcUI7QUFDdkIsV0FBTyxLQUFLLFVBQVUsS0FBSyxRQUFRLGNBQWM7QUFBQSxFQUNuRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sT0FBTyxnQkFBZ0I7QUFDNUIsV0FBTyxLQUFLLFVBQVUsS0FBSyxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSTtBQUFBLEVBQy9EO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFXQSxNQUFNLE9BQU8sZ0JBQWdCLE1BQU07QUFDakMsUUFBSSxDQUFDLEtBQUssUUFBUyxRQUFPO0FBQzFCLFVBQU0sUUFBUSxLQUFLLE1BQU0sUUFBUSxNQUFNLElBQUk7QUFDM0MsUUFBSTtBQUNKLFFBQUksTUFBTSxnQkFBZ0I7QUFDeEIsWUFBTSxLQUFLLElBQUksWUFBWSxFQUFFLFFBQVEsTUFBTSxPQUFPLENBQUM7QUFBQSxJQUNyRCxPQUFPO0FBQ0wsWUFBTSxLQUFLO0FBQUEsSUFDYjtBQUNBLFVBQU0sSUFBSSxRQUFRLE1BQU0sSUFBSTtBQUM1QixXQUFPLEtBQUssTUFBTSxJQUFJLEtBQUssT0FBTyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLFFBQVEsTUFBTSxLQUFLLElBQUksUUFBUTtBQUFBLEVBQzNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsUUFBUSxNQUFNO0FBQ1osV0FBTyxLQUFLLFVBQVUsS0FBSyxRQUFRLEtBQUssS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFFBQVEsS0FBSyxHQUFHLElBQUksSUFBSTtBQUFBLEVBQ2xGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFVBQVU7QUFDUixXQUFPLEtBQUssRUFBRSxRQUFRLE1BQU0sS0FBSyxFQUFFLFFBQVE7QUFBQSxFQUM3QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFFBQVEsVUFBVTtBQUNoQixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsV0FBTyxLQUFLLElBQUk7QUFBQSxFQUNsQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFNBQVMsVUFBVTtBQUNqQixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsV0FBTyxLQUFLLEtBQUs7QUFBQSxFQUNuQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFNBQVMsVUFBVTtBQUNqQixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsV0FBTyxLQUFLLEtBQUssWUFBWSxLQUFLLElBQUk7QUFBQSxFQUN4QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFTQSxJQUFJLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FBQyxHQUFHO0FBQ3ZCLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUMxQixXQUFPLFVBQVMsY0FBYyxTQUFTLEtBQUssR0FBRyxPQUFPLEtBQUssQ0FBQztBQUFBLEVBQzlEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsV0FBVyxXQUFXO0FBQ3BCLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTyxDQUFDO0FBQzNCLFVBQU0sU0FBUyxVQUNWLElBQUksZ0JBQWdCLEVBQ3BCLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsRUFDOUIsS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLFNBQVMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxHQUM3QyxVQUFVLENBQUM7QUFDYixRQUFJLEVBQUUsR0FBQUEsR0FBRSxJQUFJLE1BQ1YsSUFBSTtBQUVOLFdBQU9BLEtBQUksS0FBSyxHQUFHO0FBQ2pCLFlBQU0sUUFBUSxPQUFPLENBQUMsS0FBSyxLQUFLLEdBQzlCLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEtBQUssSUFBSTtBQUNyQyxjQUFRLEtBQUssVUFBUyxjQUFjQSxJQUFHLElBQUksQ0FBQztBQUM1QyxNQUFBQSxLQUFJO0FBQ0osV0FBSztBQUFBLElBQ1A7QUFFQSxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsUUFBUSxVQUFVO0FBQ2hCLFVBQU0sTUFBTSxTQUFTLGlCQUFpQixRQUFRO0FBRTlDLFFBQUksQ0FBQyxLQUFLLFdBQVcsQ0FBQyxJQUFJLFdBQVcsSUFBSSxHQUFHLGNBQWMsTUFBTSxHQUFHO0FBQ2pFLGFBQU8sQ0FBQztBQUFBLElBQ1Y7QUFFQSxRQUFJLEVBQUUsR0FBQUEsR0FBRSxJQUFJLE1BQ1YsTUFBTSxHQUNOO0FBRUYsVUFBTSxVQUFVLENBQUM7QUFDakIsV0FBT0EsS0FBSSxLQUFLLEdBQUc7QUFDakIsWUFBTSxRQUFRLEtBQUssTUFBTSxLQUFLLElBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUM7QUFDMUQsYUFBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksS0FBSyxJQUFJO0FBQ25DLGNBQVEsS0FBSyxVQUFTLGNBQWNBLElBQUcsSUFBSSxDQUFDO0FBQzVDLE1BQUFBLEtBQUk7QUFDSixhQUFPO0FBQUEsSUFDVDtBQUVBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsY0FBYyxlQUFlO0FBQzNCLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTyxDQUFDO0FBQzNCLFdBQU8sS0FBSyxRQUFRLEtBQUssT0FBTyxJQUFJLGFBQWEsRUFBRSxNQUFNLEdBQUcsYUFBYTtBQUFBLEVBQzNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsU0FBUyxPQUFPO0FBQ2QsV0FBTyxLQUFLLElBQUksTUFBTSxLQUFLLEtBQUssSUFBSSxNQUFNO0FBQUEsRUFDNUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxXQUFXLE9BQU87QUFDaEIsUUFBSSxDQUFDLEtBQUssUUFBUyxRQUFPO0FBQzFCLFdBQU8sQ0FBQyxLQUFLLE1BQU0sQ0FBQyxNQUFNO0FBQUEsRUFDNUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxTQUFTLE9BQU87QUFDZCxRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsV0FBTyxDQUFDLE1BQU0sTUFBTSxDQUFDLEtBQUs7QUFBQSxFQUM1QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFFBQVEsT0FBTztBQUNiLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUMxQixXQUFPLEtBQUssS0FBSyxNQUFNLEtBQUssS0FBSyxLQUFLLE1BQU07QUFBQSxFQUM5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sT0FBTztBQUNaLFFBQUksQ0FBQyxLQUFLLFdBQVcsQ0FBQyxNQUFNLFNBQVM7QUFDbkMsYUFBTztBQUFBLElBQ1Q7QUFFQSxXQUFPLEtBQUssRUFBRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUFBLEVBQ3hEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLGFBQWEsT0FBTztBQUNsQixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsVUFBTUEsS0FBSSxLQUFLLElBQUksTUFBTSxJQUFJLEtBQUssSUFBSSxNQUFNLEdBQzFDLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxLQUFLLElBQUksTUFBTTtBQUV4QyxRQUFJQSxNQUFLLEdBQUc7QUFDVixhQUFPO0FBQUEsSUFDVCxPQUFPO0FBQ0wsYUFBTyxVQUFTLGNBQWNBLElBQUcsQ0FBQztBQUFBLElBQ3BDO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsTUFBTSxPQUFPO0FBQ1gsUUFBSSxDQUFDLEtBQUssUUFBUyxRQUFPO0FBQzFCLFVBQU1BLEtBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxLQUFLLElBQUksTUFBTSxHQUMxQyxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxJQUFJLE1BQU07QUFDeEMsV0FBTyxVQUFTLGNBQWNBLElBQUcsQ0FBQztBQUFBLEVBQ3BDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFXQSxPQUFPLE1BQU0sV0FBVztBQUN0QixVQUFNLENBQUMsT0FBTyxLQUFLLElBQUksVUFDcEIsS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQ3hCO0FBQUEsTUFDQyxDQUFDLENBQUMsT0FBTyxPQUFPLEdBQUcsU0FBUztBQUMxQixZQUFJLENBQUMsU0FBUztBQUNaLGlCQUFPLENBQUMsT0FBTyxJQUFJO0FBQUEsUUFDckIsV0FBVyxRQUFRLFNBQVMsSUFBSSxLQUFLLFFBQVEsV0FBVyxJQUFJLEdBQUc7QUFDN0QsaUJBQU8sQ0FBQyxPQUFPLFFBQVEsTUFBTSxJQUFJLENBQUM7QUFBQSxRQUNwQyxPQUFPO0FBQ0wsaUJBQU8sQ0FBQyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJO0FBQUEsUUFDdkM7QUFBQSxNQUNGO0FBQUEsTUFDQSxDQUFDLENBQUMsR0FBRyxJQUFJO0FBQUEsSUFDWDtBQUNGLFFBQUksT0FBTztBQUNULFlBQU0sS0FBSyxLQUFLO0FBQUEsSUFDbEI7QUFDQSxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sSUFBSSxXQUFXO0FBQ3BCLFFBQUksUUFBUSxNQUNWLGVBQWU7QUFDakIsVUFBTSxVQUFVLENBQUMsR0FDZixPQUFPLFVBQVUsSUFBSSxDQUFDLE1BQU07QUFBQSxNQUMxQixFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSTtBQUFBLE1BQ3ZCLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFJO0FBQUEsSUFDekIsQ0FBQyxHQUNELFlBQVksTUFBTSxVQUFVLE9BQU8sR0FBRyxJQUFJLEdBQzFDLE1BQU0sVUFBVSxLQUFLLENBQUMsR0FBRyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUk7QUFFaEQsZUFBVyxLQUFLLEtBQUs7QUFDbkIsc0JBQWdCLEVBQUUsU0FBUyxNQUFNLElBQUk7QUFFckMsVUFBSSxpQkFBaUIsR0FBRztBQUN0QixnQkFBUSxFQUFFO0FBQUEsTUFDWixPQUFPO0FBQ0wsWUFBSSxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsTUFBTTtBQUMvQixrQkFBUSxLQUFLLFVBQVMsY0FBYyxPQUFPLEVBQUUsSUFBSSxDQUFDO0FBQUEsUUFDcEQ7QUFFQSxnQkFBUTtBQUFBLE1BQ1Y7QUFBQSxJQUNGO0FBRUEsV0FBTyxVQUFTLE1BQU0sT0FBTztBQUFBLEVBQy9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsY0FBYyxXQUFXO0FBQ3ZCLFdBQU8sVUFBUyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sU0FBUyxDQUFDLEVBQ3pDLElBQUksQ0FBQyxNQUFNLEtBQUssYUFBYSxDQUFDLENBQUMsRUFDL0IsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsUUFBUSxDQUFDO0FBQUEsRUFDcEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVztBQUNULFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBT0Q7QUFDMUIsV0FBTyxJQUFJLEtBQUssRUFBRSxNQUFNLENBQUMsV0FBTSxLQUFLLEVBQUUsTUFBTSxDQUFDO0FBQUEsRUFDL0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsQ0FBQyxPQUFPLElBQUksNEJBQTRCLENBQUMsSUFBSTtBQUMzQyxRQUFJLEtBQUssU0FBUztBQUNoQixhQUFPLHFCQUFxQixLQUFLLEVBQUUsTUFBTSxDQUFDLFVBQVUsS0FBSyxFQUFFLE1BQU0sQ0FBQztBQUFBLElBQ3BFLE9BQU87QUFDTCxhQUFPLCtCQUErQixLQUFLLGFBQWE7QUFBQSxJQUMxRDtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQW9CQSxlQUFlLGFBQXFCLFlBQVksT0FBTyxDQUFDLEdBQUc7QUFDekQsV0FBTyxLQUFLLFVBQ1IsVUFBVSxPQUFPLEtBQUssRUFBRSxJQUFJLE1BQU0sSUFBSSxHQUFHLFVBQVUsRUFBRSxlQUFlLElBQUksSUFDeEVBO0FBQUEsRUFDTjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsTUFBTSxNQUFNO0FBQ1YsUUFBSSxDQUFDLEtBQUssUUFBUyxRQUFPQTtBQUMxQixXQUFPLEdBQUcsS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQUEsRUFDcEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLFlBQVk7QUFDVixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU9BO0FBQzFCLFdBQU8sR0FBRyxLQUFLLEVBQUUsVUFBVSxDQUFDLElBQUksS0FBSyxFQUFFLFVBQVUsQ0FBQztBQUFBLEVBQ3BEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLFVBQVUsTUFBTTtBQUNkLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBT0E7QUFDMUIsV0FBTyxHQUFHLEtBQUssRUFBRSxVQUFVLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxVQUFVLElBQUksQ0FBQztBQUFBLEVBQzVEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBYUEsU0FBUyxZQUFZLEVBQUUsWUFBWSxXQUFNLElBQUksQ0FBQyxHQUFHO0FBQy9DLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBT0E7QUFDMUIsV0FBTyxHQUFHLEtBQUssRUFBRSxTQUFTLFVBQVUsQ0FBQyxHQUFHLFNBQVMsR0FBRyxLQUFLLEVBQUUsU0FBUyxVQUFVLENBQUM7QUFBQSxFQUNqRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBY0EsV0FBVyxNQUFNLE1BQU07QUFDckIsUUFBSSxDQUFDLEtBQUssU0FBUztBQUNqQixhQUFPLFNBQVMsUUFBUSxLQUFLLGFBQWE7QUFBQSxJQUM1QztBQUNBLFdBQU8sS0FBSyxFQUFFLEtBQUssS0FBSyxHQUFHLE1BQU0sSUFBSTtBQUFBLEVBQ3ZDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLGFBQWEsT0FBTztBQUNsQixXQUFPLFVBQVMsY0FBYyxNQUFNLEtBQUssQ0FBQyxHQUFHLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFBQSxFQUM1RDtBQUNGOzs7QUNocEJBLElBQXFCLE9BQXJCLE1BQTBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTXhCLE9BQU8sT0FBTyxPQUFPLFNBQVMsYUFBYTtBQUN6QyxVQUFNLFFBQVEsU0FBUyxJQUFJLEVBQUUsUUFBUSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sR0FBRyxDQUFDO0FBRTVELFdBQU8sQ0FBQyxLQUFLLGVBQWUsTUFBTSxXQUFXLE1BQU0sSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7QUFBQSxFQUN2RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sZ0JBQWdCLE1BQU07QUFDM0IsV0FBTyxTQUFTLFlBQVksSUFBSTtBQUFBLEVBQ2xDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBZ0JBLE9BQU8sY0FBYyxPQUFPO0FBQzFCLFdBQU8sY0FBYyxPQUFPLFNBQVMsV0FBVztBQUFBLEVBQ2xEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLE9BQU8sZUFBZSxFQUFFLFNBQVMsTUFBTSxTQUFTLEtBQUssSUFBSSxDQUFDLEdBQUc7QUFDM0QsWUFBUSxVQUFVLE9BQU8sT0FBTyxNQUFNLEdBQUcsZUFBZTtBQUFBLEVBQzFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBVUEsT0FBTywwQkFBMEIsRUFBRSxTQUFTLE1BQU0sU0FBUyxLQUFLLElBQUksQ0FBQyxHQUFHO0FBQ3RFLFlBQVEsVUFBVSxPQUFPLE9BQU8sTUFBTSxHQUFHLHNCQUFzQjtBQUFBLEVBQ2pFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLE9BQU8sbUJBQW1CLEVBQUUsU0FBUyxNQUFNLFNBQVMsS0FBSyxJQUFJLENBQUMsR0FBRztBQUUvRCxZQUFRLFVBQVUsT0FBTyxPQUFPLE1BQU0sR0FBRyxlQUFlLEVBQUUsTUFBTTtBQUFBLEVBQ2xFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBbUJBLE9BQU8sT0FDTCxTQUFTLFFBQ1QsRUFBRSxTQUFTLE1BQU0sa0JBQWtCLE1BQU0sU0FBUyxNQUFNLGlCQUFpQixVQUFVLElBQUksQ0FBQyxHQUN4RjtBQUNBLFlBQVEsVUFBVSxPQUFPLE9BQU8sUUFBUSxpQkFBaUIsY0FBYyxHQUFHLE9BQU8sTUFBTTtBQUFBLEVBQ3pGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWVBLE9BQU8sYUFDTCxTQUFTLFFBQ1QsRUFBRSxTQUFTLE1BQU0sa0JBQWtCLE1BQU0sU0FBUyxNQUFNLGlCQUFpQixVQUFVLElBQUksQ0FBQyxHQUN4RjtBQUNBLFlBQVEsVUFBVSxPQUFPLE9BQU8sUUFBUSxpQkFBaUIsY0FBYyxHQUFHLE9BQU8sUUFBUSxJQUFJO0FBQUEsRUFDL0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFnQkEsT0FBTyxTQUFTLFNBQVMsUUFBUSxFQUFFLFNBQVMsTUFBTSxrQkFBa0IsTUFBTSxTQUFTLEtBQUssSUFBSSxDQUFDLEdBQUc7QUFDOUYsWUFBUSxVQUFVLE9BQU8sT0FBTyxRQUFRLGlCQUFpQixJQUFJLEdBQUcsU0FBUyxNQUFNO0FBQUEsRUFDakY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWNBLE9BQU8sZUFDTCxTQUFTLFFBQ1QsRUFBRSxTQUFTLE1BQU0sa0JBQWtCLE1BQU0sU0FBUyxLQUFLLElBQUksQ0FBQyxHQUM1RDtBQUNBLFlBQVEsVUFBVSxPQUFPLE9BQU8sUUFBUSxpQkFBaUIsSUFBSSxHQUFHLFNBQVMsUUFBUSxJQUFJO0FBQUEsRUFDdkY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFVQSxPQUFPLFVBQVUsRUFBRSxTQUFTLEtBQUssSUFBSSxDQUFDLEdBQUc7QUFDdkMsV0FBTyxPQUFPLE9BQU8sTUFBTSxFQUFFLFVBQVU7QUFBQSxFQUN6QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFZQSxPQUFPLEtBQUssU0FBUyxTQUFTLEVBQUUsU0FBUyxLQUFLLElBQUksQ0FBQyxHQUFHO0FBQ3BELFdBQU8sT0FBTyxPQUFPLFFBQVEsTUFBTSxTQUFTLEVBQUUsS0FBSyxNQUFNO0FBQUEsRUFDM0Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdBLE9BQU8sV0FBVztBQUNoQixXQUFPLEVBQUUsVUFBVSxZQUFZLEdBQUcsWUFBWSxrQkFBa0IsRUFBRTtBQUFBLEVBQ3BFO0FBQ0Y7OztBQzFNQSxTQUFTLFFBQVEsU0FBUyxPQUFPO0FBQy9CLFFBQU0sY0FBYyxDQUFDLE9BQU8sR0FBRyxNQUFNLEdBQUcsRUFBRSxlQUFlLEtBQUssQ0FBQyxFQUFFLFFBQVEsS0FBSyxFQUFFLFFBQVEsR0FDdEYsS0FBSyxZQUFZLEtBQUssSUFBSSxZQUFZLE9BQU87QUFDL0MsU0FBTyxLQUFLLE1BQU0sU0FBUyxXQUFXLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQztBQUN0RDtBQUVBLFNBQVMsZUFBZSxRQUFRLE9BQU8sT0FBTztBQUM1QyxRQUFNLFVBQVU7QUFBQSxJQUNkLENBQUMsU0FBUyxDQUFDLEdBQUcsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJO0FBQUEsSUFDbkMsQ0FBQyxZQUFZLENBQUMsR0FBRyxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDO0FBQUEsSUFDcEUsQ0FBQyxVQUFVLENBQUMsR0FBRyxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQUEsSUFDL0Q7QUFBQSxNQUNFO0FBQUEsTUFDQSxDQUFDLEdBQUcsTUFBTTtBQUNSLGNBQU0sT0FBTyxRQUFRLEdBQUcsQ0FBQztBQUN6QixnQkFBUSxPQUFRLE9BQU8sS0FBTTtBQUFBLE1BQy9CO0FBQUEsSUFDRjtBQUFBLElBQ0EsQ0FBQyxRQUFRLE9BQU87QUFBQSxFQUNsQjtBQUVBLFFBQU0sVUFBVSxDQUFDO0FBQ2pCLFFBQU0sVUFBVTtBQUNoQixNQUFJLGFBQWE7QUFVakIsYUFBVyxDQUFDLE1BQU0sTUFBTSxLQUFLLFNBQVM7QUFDcEMsUUFBSSxNQUFNLFFBQVEsSUFBSSxLQUFLLEdBQUc7QUFDNUIsb0JBQWM7QUFFZCxjQUFRLElBQUksSUFBSSxPQUFPLFFBQVEsS0FBSztBQUNwQyxrQkFBWSxRQUFRLEtBQUssT0FBTztBQUVoQyxVQUFJLFlBQVksT0FBTztBQUVyQixnQkFBUSxJQUFJO0FBQ1osaUJBQVMsUUFBUSxLQUFLLE9BQU87QUFLN0IsWUFBSSxTQUFTLE9BQU87QUFFbEIsc0JBQVk7QUFFWixrQkFBUSxJQUFJO0FBQ1osbUJBQVMsUUFBUSxLQUFLLE9BQU87QUFBQSxRQUMvQjtBQUFBLE1BQ0YsT0FBTztBQUNMLGlCQUFTO0FBQUEsTUFDWDtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRUEsU0FBTyxDQUFDLFFBQVEsU0FBUyxXQUFXLFdBQVc7QUFDakQ7QUFFZSxTQUFSLGFBQWtCLFNBQVMsT0FBTyxPQUFPLE1BQU07QUFDcEQsTUFBSSxDQUFDLFFBQVEsU0FBUyxXQUFXLFdBQVcsSUFBSSxlQUFlLFNBQVMsT0FBTyxLQUFLO0FBRXBGLFFBQU0sa0JBQWtCLFFBQVE7QUFFaEMsUUFBTSxrQkFBa0IsTUFBTTtBQUFBLElBQzVCLENBQUMsTUFBTSxDQUFDLFNBQVMsV0FBVyxXQUFXLGNBQWMsRUFBRSxRQUFRLENBQUMsS0FBSztBQUFBLEVBQ3ZFO0FBRUEsTUFBSSxnQkFBZ0IsV0FBVyxHQUFHO0FBQ2hDLFFBQUksWUFBWSxPQUFPO0FBQ3JCLGtCQUFZLE9BQU8sS0FBSyxFQUFFLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUFBLElBQzlDO0FBRUEsUUFBSSxjQUFjLFFBQVE7QUFDeEIsY0FBUSxXQUFXLEtBQUssUUFBUSxXQUFXLEtBQUssS0FBSyxtQkFBbUIsWUFBWTtBQUFBLElBQ3RGO0FBQUEsRUFDRjtBQUVBLFFBQU0sV0FBVyxTQUFTLFdBQVcsU0FBUyxJQUFJO0FBRWxELE1BQUksZ0JBQWdCLFNBQVMsR0FBRztBQUM5QixXQUFPLFNBQVMsV0FBVyxpQkFBaUIsSUFBSSxFQUM3QyxRQUFRLEdBQUcsZUFBZSxFQUMxQixLQUFLLFFBQVE7QUFBQSxFQUNsQixPQUFPO0FBQ0wsV0FBTztBQUFBLEVBQ1Q7QUFDRjs7O0FDdEZBLElBQU0sY0FBYztBQUVwQixTQUFTLFFBQVEsT0FBTyxPQUFPLENBQUMsTUFBTSxHQUFHO0FBQ3ZDLFNBQU8sRUFBRSxPQUFPLE9BQU8sQ0FBQyxDQUFDRyxFQUFDLE1BQU0sS0FBSyxZQUFZQSxFQUFDLENBQUMsRUFBRTtBQUN2RDtBQUVBLElBQU0sT0FBTyxPQUFPLGFBQWEsR0FBRztBQUNwQyxJQUFNLGNBQWMsS0FBSyxJQUFJO0FBQzdCLElBQU0sb0JBQW9CLElBQUksT0FBTyxhQUFhLEdBQUc7QUFFckQsU0FBUyxhQUFhQSxJQUFHO0FBR3ZCLFNBQU9BLEdBQUUsUUFBUSxPQUFPLE1BQU0sRUFBRSxRQUFRLG1CQUFtQixXQUFXO0FBQ3hFO0FBRUEsU0FBUyxxQkFBcUJBLElBQUc7QUFDL0IsU0FBT0EsR0FDSixRQUFRLE9BQU8sRUFBRSxFQUNqQixRQUFRLG1CQUFtQixHQUFHLEVBQzlCLFlBQVk7QUFDakI7QUFFQSxTQUFTLE1BQU0sU0FBUyxZQUFZO0FBQ2xDLE1BQUksWUFBWSxNQUFNO0FBQ3BCLFdBQU87QUFBQSxFQUNULE9BQU87QUFDTCxXQUFPO0FBQUEsTUFDTCxPQUFPLE9BQU8sUUFBUSxJQUFJLFlBQVksRUFBRSxLQUFLLEdBQUcsQ0FBQztBQUFBLE1BQ2pELE9BQU8sQ0FBQyxDQUFDQSxFQUFDLE1BQ1IsUUFBUSxVQUFVLENBQUMsTUFBTSxxQkFBcUJBLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQyxDQUFDLElBQUk7QUFBQSxJQUNwRjtBQUFBLEVBQ0Y7QUFDRjtBQUVBLFNBQVMsT0FBTyxPQUFPLFFBQVE7QUFDN0IsU0FBTyxFQUFFLE9BQU8sT0FBTyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFHLE9BQU87QUFDbEU7QUFFQSxTQUFTLE9BQU8sT0FBTztBQUNyQixTQUFPLEVBQUUsT0FBTyxPQUFPLENBQUMsQ0FBQ0EsRUFBQyxNQUFNQSxHQUFFO0FBQ3BDO0FBRUEsU0FBUyxZQUFZLE9BQU87QUFDMUIsU0FBTyxNQUFNLFFBQVEsK0JBQStCLE1BQU07QUFDNUQ7QUFNQSxTQUFTLGFBQWEsT0FBTyxLQUFLO0FBQ2hDLFFBQU0sTUFBTSxXQUFXLEdBQUcsR0FDeEIsTUFBTSxXQUFXLEtBQUssS0FBSyxHQUMzQixRQUFRLFdBQVcsS0FBSyxLQUFLLEdBQzdCLE9BQU8sV0FBVyxLQUFLLEtBQUssR0FDNUIsTUFBTSxXQUFXLEtBQUssS0FBSyxHQUMzQixXQUFXLFdBQVcsS0FBSyxPQUFPLEdBQ2xDLGFBQWEsV0FBVyxLQUFLLE9BQU8sR0FDcEMsV0FBVyxXQUFXLEtBQUssT0FBTyxHQUNsQyxZQUFZLFdBQVcsS0FBSyxPQUFPLEdBQ25DLFlBQVksV0FBVyxLQUFLLE9BQU8sR0FDbkMsWUFBWSxXQUFXLEtBQUssT0FBTyxHQUNuQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sT0FBTyxZQUFZLEVBQUUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUNBLEVBQUMsTUFBTUEsSUFBRyxTQUFTLEtBQUssSUFDeEYsVUFBVSxDQUFDLE1BQU07QUFDZixRQUFJLE1BQU0sU0FBUztBQUNqQixhQUFPLFFBQVEsQ0FBQztBQUFBLElBQ2xCO0FBQ0EsWUFBUSxFQUFFLEtBQUs7QUFBQTtBQUFBLE1BRWIsS0FBSztBQUNILGVBQU8sTUFBTSxJQUFJLEtBQUssT0FBTyxHQUFHLENBQUM7QUFBQSxNQUNuQyxLQUFLO0FBQ0gsZUFBTyxNQUFNLElBQUksS0FBSyxNQUFNLEdBQUcsQ0FBQztBQUFBO0FBQUEsTUFFbEMsS0FBSztBQUNILGVBQU8sUUFBUSxRQUFRO0FBQUEsTUFDekIsS0FBSztBQUNILGVBQU8sUUFBUSxXQUFXLGNBQWM7QUFBQSxNQUMxQyxLQUFLO0FBQ0gsZUFBTyxRQUFRLElBQUk7QUFBQSxNQUNyQixLQUFLO0FBQ0gsZUFBTyxRQUFRLFNBQVM7QUFBQSxNQUMxQixLQUFLO0FBQ0gsZUFBTyxRQUFRLEdBQUc7QUFBQTtBQUFBLE1BRXBCLEtBQUs7QUFDSCxlQUFPLFFBQVEsUUFBUTtBQUFBLE1BQ3pCLEtBQUs7QUFDSCxlQUFPLFFBQVEsR0FBRztBQUFBLE1BQ3BCLEtBQUs7QUFDSCxlQUFPLE1BQU0sSUFBSSxPQUFPLFNBQVMsSUFBSSxHQUFHLENBQUM7QUFBQSxNQUMzQyxLQUFLO0FBQ0gsZUFBTyxNQUFNLElBQUksT0FBTyxRQUFRLElBQUksR0FBRyxDQUFDO0FBQUEsTUFDMUMsS0FBSztBQUNILGVBQU8sUUFBUSxRQUFRO0FBQUEsTUFDekIsS0FBSztBQUNILGVBQU8sUUFBUSxHQUFHO0FBQUEsTUFDcEIsS0FBSztBQUNILGVBQU8sTUFBTSxJQUFJLE9BQU8sU0FBUyxLQUFLLEdBQUcsQ0FBQztBQUFBLE1BQzVDLEtBQUs7QUFDSCxlQUFPLE1BQU0sSUFBSSxPQUFPLFFBQVEsS0FBSyxHQUFHLENBQUM7QUFBQTtBQUFBLE1BRTNDLEtBQUs7QUFDSCxlQUFPLFFBQVEsUUFBUTtBQUFBLE1BQ3pCLEtBQUs7QUFDSCxlQUFPLFFBQVEsR0FBRztBQUFBO0FBQUEsTUFFcEIsS0FBSztBQUNILGVBQU8sUUFBUSxVQUFVO0FBQUEsTUFDM0IsS0FBSztBQUNILGVBQU8sUUFBUSxLQUFLO0FBQUE7QUFBQSxNQUV0QixLQUFLO0FBQ0gsZUFBTyxRQUFRLEdBQUc7QUFBQSxNQUNwQixLQUFLO0FBQ0gsZUFBTyxRQUFRLFFBQVE7QUFBQSxNQUN6QixLQUFLO0FBQ0gsZUFBTyxRQUFRLEdBQUc7QUFBQSxNQUNwQixLQUFLO0FBQ0gsZUFBTyxRQUFRLFFBQVE7QUFBQSxNQUN6QixLQUFLO0FBQ0gsZUFBTyxRQUFRLEdBQUc7QUFBQSxNQUNwQixLQUFLO0FBQ0gsZUFBTyxRQUFRLFFBQVE7QUFBQSxNQUN6QixLQUFLO0FBQ0gsZUFBTyxRQUFRLFFBQVE7QUFBQSxNQUN6QixLQUFLO0FBQ0gsZUFBTyxRQUFRLEdBQUc7QUFBQSxNQUNwQixLQUFLO0FBQ0gsZUFBTyxRQUFRLFFBQVE7QUFBQSxNQUN6QixLQUFLO0FBQ0gsZUFBTyxRQUFRLEdBQUc7QUFBQSxNQUNwQixLQUFLO0FBQ0gsZUFBTyxRQUFRLFVBQVU7QUFBQSxNQUMzQixLQUFLO0FBQ0gsZUFBTyxRQUFRLEtBQUs7QUFBQSxNQUN0QixLQUFLO0FBQ0gsZUFBTyxPQUFPLFNBQVM7QUFBQSxNQUN6QixLQUFLO0FBQ0gsZUFBTyxPQUFPLFFBQVE7QUFBQSxNQUN4QixLQUFLO0FBQ0gsZUFBTyxRQUFRLEdBQUc7QUFBQTtBQUFBLE1BRXBCLEtBQUs7QUFDSCxlQUFPLE1BQU0sSUFBSSxVQUFVLEdBQUcsQ0FBQztBQUFBO0FBQUEsTUFFakMsS0FBSztBQUNILGVBQU8sUUFBUSxJQUFJO0FBQUEsTUFDckIsS0FBSztBQUNILGVBQU8sUUFBUSxXQUFXLGNBQWM7QUFBQTtBQUFBLE1BRTFDLEtBQUs7QUFDSCxlQUFPLFFBQVEsUUFBUTtBQUFBLE1BQ3pCLEtBQUs7QUFDSCxlQUFPLFFBQVEsR0FBRztBQUFBO0FBQUEsTUFFcEIsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNILGVBQU8sUUFBUSxHQUFHO0FBQUEsTUFDcEIsS0FBSztBQUNILGVBQU8sTUFBTSxJQUFJLFNBQVMsU0FBUyxLQUFLLEdBQUcsQ0FBQztBQUFBLE1BQzlDLEtBQUs7QUFDSCxlQUFPLE1BQU0sSUFBSSxTQUFTLFFBQVEsS0FBSyxHQUFHLENBQUM7QUFBQSxNQUM3QyxLQUFLO0FBQ0gsZUFBTyxNQUFNLElBQUksU0FBUyxTQUFTLElBQUksR0FBRyxDQUFDO0FBQUEsTUFDN0MsS0FBSztBQUNILGVBQU8sTUFBTSxJQUFJLFNBQVMsUUFBUSxJQUFJLEdBQUcsQ0FBQztBQUFBO0FBQUEsTUFFNUMsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNILGVBQU8sT0FBTyxJQUFJLE9BQU8sUUFBUSxTQUFTLE1BQU0sU0FBUyxJQUFJLE1BQU0sS0FBSyxHQUFHLENBQUM7QUFBQSxNQUM5RSxLQUFLO0FBQ0gsZUFBTyxPQUFPLElBQUksT0FBTyxRQUFRLFNBQVMsTUFBTSxLQUFLLElBQUksTUFBTSxJQUFJLEdBQUcsQ0FBQztBQUFBO0FBQUE7QUFBQSxNQUd6RSxLQUFLO0FBQ0gsZUFBTyxPQUFPLG9CQUFvQjtBQUFBO0FBQUE7QUFBQSxNQUdwQyxLQUFLO0FBQ0gsZUFBTyxPQUFPLFdBQVc7QUFBQSxNQUMzQjtBQUNFLGVBQU8sUUFBUSxDQUFDO0FBQUEsSUFDcEI7QUFBQSxFQUNGO0FBRUYsUUFBTSxPQUFPLFFBQVEsS0FBSyxLQUFLO0FBQUEsSUFDN0IsZUFBZTtBQUFBLEVBQ2pCO0FBRUEsT0FBSyxRQUFRO0FBRWIsU0FBTztBQUNUO0FBRUEsSUFBTSwwQkFBMEI7QUFBQSxFQUM5QixNQUFNO0FBQUEsSUFDSixXQUFXO0FBQUEsSUFDWCxTQUFTO0FBQUEsRUFDWDtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsU0FBUztBQUFBLElBQ1QsV0FBVztBQUFBLElBQ1gsT0FBTztBQUFBLElBQ1AsTUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUNBLEtBQUs7QUFBQSxJQUNILFNBQVM7QUFBQSxJQUNULFdBQVc7QUFBQSxFQUNiO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxPQUFPO0FBQUEsSUFDUCxNQUFNO0FBQUEsRUFDUjtBQUFBLEVBQ0EsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsUUFBUTtBQUFBLElBQ04sU0FBUztBQUFBLElBQ1QsV0FBVztBQUFBLEVBQ2I7QUFBQSxFQUNBLFFBQVE7QUFBQSxJQUNOLFNBQVM7QUFBQSxJQUNULFdBQVc7QUFBQSxFQUNiO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDTixTQUFTO0FBQUEsSUFDVCxXQUFXO0FBQUEsRUFDYjtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ04sU0FBUztBQUFBLElBQ1QsV0FBVztBQUFBLEVBQ2I7QUFBQSxFQUNBLGNBQWM7QUFBQSxJQUNaLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxFQUNUO0FBQ0Y7QUFFQSxTQUFTLGFBQWEsTUFBTSxZQUFZLGNBQWM7QUFDcEQsUUFBTSxFQUFFLE1BQU0sTUFBTSxJQUFJO0FBRXhCLE1BQUksU0FBUyxXQUFXO0FBQ3RCLFVBQU0sVUFBVSxRQUFRLEtBQUssS0FBSztBQUNsQyxXQUFPO0FBQUEsTUFDTCxTQUFTLENBQUM7QUFBQSxNQUNWLEtBQUssVUFBVSxNQUFNO0FBQUEsSUFDdkI7QUFBQSxFQUNGO0FBRUEsUUFBTSxRQUFRLFdBQVcsSUFBSTtBQUs3QixNQUFJLGFBQWE7QUFDakIsTUFBSSxTQUFTLFFBQVE7QUFDbkIsUUFBSSxXQUFXLFVBQVUsTUFBTTtBQUM3QixtQkFBYSxXQUFXLFNBQVMsV0FBVztBQUFBLElBQzlDLFdBQVcsV0FBVyxhQUFhLE1BQU07QUFDdkMsVUFBSSxXQUFXLGNBQWMsU0FBUyxXQUFXLGNBQWMsT0FBTztBQUNwRSxxQkFBYTtBQUFBLE1BQ2YsT0FBTztBQUNMLHFCQUFhO0FBQUEsTUFDZjtBQUFBLElBQ0YsT0FBTztBQUdMLG1CQUFhLGFBQWEsU0FBUyxXQUFXO0FBQUEsSUFDaEQ7QUFBQSxFQUNGO0FBQ0EsTUFBSSxNQUFNLHdCQUF3QixVQUFVO0FBQzVDLE1BQUksT0FBTyxRQUFRLFVBQVU7QUFDM0IsVUFBTSxJQUFJLEtBQUs7QUFBQSxFQUNqQjtBQUVBLE1BQUksS0FBSztBQUNQLFdBQU87QUFBQSxNQUNMLFNBQVM7QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFQSxTQUFPO0FBQ1Q7QUFFQSxTQUFTLFdBQVcsT0FBTztBQUN6QixRQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxLQUFLLEVBQUU7QUFDN0UsU0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLEtBQUs7QUFDMUI7QUFFQSxTQUFTLE1BQU0sT0FBTyxPQUFPLFVBQVU7QUFDckMsUUFBTSxVQUFVLE1BQU0sTUFBTSxLQUFLO0FBRWpDLE1BQUksU0FBUztBQUNYLFVBQU0sTUFBTSxDQUFDO0FBQ2IsUUFBSSxhQUFhO0FBQ2pCLGVBQVcsS0FBSyxVQUFVO0FBQ3hCLFVBQUksZUFBZSxVQUFVLENBQUMsR0FBRztBQUMvQixjQUFNLElBQUksU0FBUyxDQUFDLEdBQ2xCLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxJQUFJO0FBQ3JDLFlBQUksQ0FBQyxFQUFFLFdBQVcsRUFBRSxPQUFPO0FBQ3pCLGNBQUksRUFBRSxNQUFNLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLFFBQVEsTUFBTSxZQUFZLGFBQWEsTUFBTSxDQUFDO0FBQUEsUUFDOUU7QUFDQSxzQkFBYztBQUFBLE1BQ2hCO0FBQUEsSUFDRjtBQUNBLFdBQU8sQ0FBQyxTQUFTLEdBQUc7QUFBQSxFQUN0QixPQUFPO0FBQ0wsV0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQUEsRUFDckI7QUFDRjtBQUVBLFNBQVMsb0JBQW9CLFNBQVM7QUFDcEMsUUFBTSxVQUFVLENBQUMsVUFBVTtBQUN6QixZQUFRLE9BQU87QUFBQSxNQUNiLEtBQUs7QUFDSCxlQUFPO0FBQUEsTUFDVCxLQUFLO0FBQ0gsZUFBTztBQUFBLE1BQ1QsS0FBSztBQUNILGVBQU87QUFBQSxNQUNULEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFDSCxlQUFPO0FBQUEsTUFDVCxLQUFLO0FBQ0gsZUFBTztBQUFBLE1BQ1QsS0FBSztBQUNILGVBQU87QUFBQSxNQUNULEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFDSCxlQUFPO0FBQUEsTUFDVCxLQUFLO0FBQ0gsZUFBTztBQUFBLE1BQ1QsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNILGVBQU87QUFBQSxNQUNULEtBQUs7QUFDSCxlQUFPO0FBQUEsTUFDVCxLQUFLO0FBQ0gsZUFBTztBQUFBLE1BQ1QsS0FBSztBQUNILGVBQU87QUFBQSxNQUNUO0FBQ0UsZUFBTztBQUFBLElBQ1g7QUFBQSxFQUNGO0FBRUEsTUFBSSxPQUFPO0FBQ1gsTUFBSTtBQUNKLE1BQUksQ0FBQyxZQUFZLFFBQVEsQ0FBQyxHQUFHO0FBQzNCLFdBQU8sU0FBUyxPQUFPLFFBQVEsQ0FBQztBQUFBLEVBQ2xDO0FBRUEsTUFBSSxDQUFDLFlBQVksUUFBUSxDQUFDLEdBQUc7QUFDM0IsUUFBSSxDQUFDLE1BQU07QUFDVCxhQUFPLElBQUksZ0JBQWdCLFFBQVEsQ0FBQztBQUFBLElBQ3RDO0FBQ0EscUJBQWlCLFFBQVE7QUFBQSxFQUMzQjtBQUVBLE1BQUksQ0FBQyxZQUFZLFFBQVEsQ0FBQyxHQUFHO0FBQzNCLFlBQVEsS0FBSyxRQUFRLElBQUksS0FBSyxJQUFJO0FBQUEsRUFDcEM7QUFFQSxNQUFJLENBQUMsWUFBWSxRQUFRLENBQUMsR0FBRztBQUMzQixRQUFJLFFBQVEsSUFBSSxNQUFNLFFBQVEsTUFBTSxHQUFHO0FBQ3JDLGNBQVEsS0FBSztBQUFBLElBQ2YsV0FBVyxRQUFRLE1BQU0sTUFBTSxRQUFRLE1BQU0sR0FBRztBQUM5QyxjQUFRLElBQUk7QUFBQSxJQUNkO0FBQUEsRUFDRjtBQUVBLE1BQUksUUFBUSxNQUFNLEtBQUssUUFBUSxHQUFHO0FBQ2hDLFlBQVEsSUFBSSxDQUFDLFFBQVE7QUFBQSxFQUN2QjtBQUVBLE1BQUksQ0FBQyxZQUFZLFFBQVEsQ0FBQyxHQUFHO0FBQzNCLFlBQVEsSUFBSSxZQUFZLFFBQVEsQ0FBQztBQUFBLEVBQ25DO0FBRUEsUUFBTSxPQUFPLE9BQU8sS0FBSyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsTUFBTTtBQUNqRCxVQUFNLElBQUksUUFBUSxDQUFDO0FBQ25CLFFBQUksR0FBRztBQUNMLFFBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQztBQUFBLElBQ2xCO0FBRUEsV0FBTztBQUFBLEVBQ1QsR0FBRyxDQUFDLENBQUM7QUFFTCxTQUFPLENBQUMsTUFBTSxNQUFNLGNBQWM7QUFDcEM7QUFFQSxJQUFJLHFCQUFxQjtBQUV6QixTQUFTLG1CQUFtQjtBQUMxQixNQUFJLENBQUMsb0JBQW9CO0FBQ3ZCLHlCQUFxQixTQUFTLFdBQVcsYUFBYTtBQUFBLEVBQ3hEO0FBRUEsU0FBTztBQUNUO0FBRUEsU0FBUyxzQkFBc0IsT0FBTyxRQUFRO0FBQzVDLE1BQUksTUFBTSxTQUFTO0FBQ2pCLFdBQU87QUFBQSxFQUNUO0FBRUEsUUFBTSxhQUFhLFVBQVUsdUJBQXVCLE1BQU0sR0FBRztBQUM3RCxRQUFNLFNBQVMsbUJBQW1CLFlBQVksTUFBTTtBQUVwRCxNQUFJLFVBQVUsUUFBUSxPQUFPLFNBQVMsTUFBUyxHQUFHO0FBQ2hELFdBQU87QUFBQSxFQUNUO0FBRUEsU0FBTztBQUNUO0FBRU8sU0FBUyxrQkFBa0IsUUFBUSxRQUFRO0FBQ2hELFNBQU8sTUFBTSxVQUFVLE9BQU8sR0FBRyxPQUFPLElBQUksQ0FBQyxNQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ3RGO0FBTU8sSUFBTSxjQUFOLE1BQWtCO0FBQUEsRUFDdkIsWUFBWSxRQUFRQyxTQUFRO0FBQzFCLFNBQUssU0FBUztBQUNkLFNBQUssU0FBU0E7QUFDZCxTQUFLLFNBQVMsa0JBQWtCLFVBQVUsWUFBWUEsT0FBTSxHQUFHLE1BQU07QUFDckUsU0FBSyxRQUFRLEtBQUssT0FBTyxJQUFJLENBQUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDO0FBQzNELFNBQUssb0JBQW9CLEtBQUssTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFLGFBQWE7QUFFL0QsUUFBSSxDQUFDLEtBQUssbUJBQW1CO0FBQzNCLFlBQU0sQ0FBQyxhQUFhLFFBQVEsSUFBSSxXQUFXLEtBQUssS0FBSztBQUNyRCxXQUFLLFFBQVEsT0FBTyxhQUFhLEdBQUc7QUFDcEMsV0FBSyxXQUFXO0FBQUEsSUFDbEI7QUFBQSxFQUNGO0FBQUEsRUFFQSxrQkFBa0IsT0FBTztBQUN2QixRQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCLGFBQU8sRUFBRSxPQUFPLFFBQVEsS0FBSyxRQUFRLGVBQWUsS0FBSyxjQUFjO0FBQUEsSUFDekUsT0FBTztBQUNMLFlBQU0sQ0FBQyxZQUFZLE9BQU8sSUFBSSxNQUFNLE9BQU8sS0FBSyxPQUFPLEtBQUssUUFBUSxHQUNsRSxDQUFDLFFBQVEsTUFBTSxjQUFjLElBQUksVUFDN0Isb0JBQW9CLE9BQU8sSUFDM0IsQ0FBQyxNQUFNLE1BQU0sTUFBUztBQUM1QixVQUFJLGVBQWUsU0FBUyxHQUFHLEtBQUssZUFBZSxTQUFTLEdBQUcsR0FBRztBQUNoRSxjQUFNLElBQUk7QUFBQSxVQUNSO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFDQSxhQUFPO0FBQUEsUUFDTDtBQUFBLFFBQ0EsUUFBUSxLQUFLO0FBQUEsUUFDYixPQUFPLEtBQUs7QUFBQSxRQUNaO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBRUEsSUFBSSxVQUFVO0FBQ1osV0FBTyxDQUFDLEtBQUs7QUFBQSxFQUNmO0FBQUEsRUFFQSxJQUFJLGdCQUFnQjtBQUNsQixXQUFPLEtBQUssb0JBQW9CLEtBQUssa0JBQWtCLGdCQUFnQjtBQUFBLEVBQ3pFO0FBQ0Y7QUFFTyxTQUFTLGtCQUFrQixRQUFRLE9BQU9BLFNBQVE7QUFDdkQsUUFBTSxTQUFTLElBQUksWUFBWSxRQUFRQSxPQUFNO0FBQzdDLFNBQU8sT0FBTyxrQkFBa0IsS0FBSztBQUN2QztBQUVPLFNBQVMsZ0JBQWdCLFFBQVEsT0FBT0EsU0FBUTtBQUNyRCxRQUFNLEVBQUUsUUFBUSxNQUFNLGdCQUFnQixjQUFjLElBQUksa0JBQWtCLFFBQVEsT0FBT0EsT0FBTTtBQUMvRixTQUFPLENBQUMsUUFBUSxNQUFNLGdCQUFnQixhQUFhO0FBQ3JEO0FBRU8sU0FBUyxtQkFBbUIsWUFBWSxRQUFRO0FBQ3JELE1BQUksQ0FBQyxZQUFZO0FBQ2YsV0FBTztBQUFBLEVBQ1Q7QUFFQSxRQUFNLFlBQVksVUFBVSxPQUFPLFFBQVEsVUFBVTtBQUNyRCxRQUFNLEtBQUssVUFBVSxZQUFZLGlCQUFpQixDQUFDO0FBQ25ELFFBQU0sUUFBUSxHQUFHLGNBQWM7QUFDL0IsUUFBTSxlQUFlLEdBQUcsZ0JBQWdCO0FBQ3hDLFNBQU8sTUFBTSxJQUFJLENBQUMsTUFBTSxhQUFhLEdBQUcsWUFBWSxZQUFZLENBQUM7QUFDbkU7OztBQ25jQSxJQUFNQyxXQUFVO0FBQ2hCLElBQU0sV0FBVztBQUVqQixTQUFTLGdCQUFnQixNQUFNO0FBQzdCLFNBQU8sSUFBSSxRQUFRLG9CQUFvQixhQUFhLEtBQUssSUFBSSxvQkFBb0I7QUFDbkY7QUFNQSxTQUFTLHVCQUF1QixJQUFJO0FBQ2xDLE1BQUksR0FBRyxhQUFhLE1BQU07QUFDeEIsT0FBRyxXQUFXLGdCQUFnQixHQUFHLENBQUM7QUFBQSxFQUNwQztBQUNBLFNBQU8sR0FBRztBQUNaO0FBS0EsU0FBUyw0QkFBNEIsSUFBSTtBQUN2QyxNQUFJLEdBQUcsa0JBQWtCLE1BQU07QUFDN0IsT0FBRyxnQkFBZ0I7QUFBQSxNQUNqQixHQUFHO0FBQUEsTUFDSCxHQUFHLElBQUksc0JBQXNCO0FBQUEsTUFDN0IsR0FBRyxJQUFJLGVBQWU7QUFBQSxJQUN4QjtBQUFBLEVBQ0Y7QUFDQSxTQUFPLEdBQUc7QUFDWjtBQUlBLFNBQVNDLE9BQU0sTUFBTSxNQUFNO0FBQ3pCLFFBQU0sVUFBVTtBQUFBLElBQ2QsSUFBSSxLQUFLO0FBQUEsSUFDVCxNQUFNLEtBQUs7QUFBQSxJQUNYLEdBQUcsS0FBSztBQUFBLElBQ1IsR0FBRyxLQUFLO0FBQUEsSUFDUixLQUFLLEtBQUs7QUFBQSxJQUNWLFNBQVMsS0FBSztBQUFBLEVBQ2hCO0FBQ0EsU0FBTyxJQUFJLFNBQVMsRUFBRSxHQUFHLFNBQVMsR0FBRyxNQUFNLEtBQUssUUFBUSxDQUFDO0FBQzNEO0FBSUEsU0FBUyxVQUFVLFNBQVMsR0FBRyxJQUFJO0FBRWpDLE1BQUksV0FBVyxVQUFVLElBQUksS0FBSztBQUdsQyxRQUFNLEtBQUssR0FBRyxPQUFPLFFBQVE7QUFHN0IsTUFBSSxNQUFNLElBQUk7QUFDWixXQUFPLENBQUMsVUFBVSxDQUFDO0FBQUEsRUFDckI7QUFHQSxlQUFhLEtBQUssS0FBSyxLQUFLO0FBRzVCLFFBQU0sS0FBSyxHQUFHLE9BQU8sUUFBUTtBQUM3QixNQUFJLE9BQU8sSUFBSTtBQUNiLFdBQU8sQ0FBQyxVQUFVLEVBQUU7QUFBQSxFQUN0QjtBQUdBLFNBQU8sQ0FBQyxVQUFVLEtBQUssSUFBSSxJQUFJLEVBQUUsSUFBSSxLQUFLLEtBQU0sS0FBSyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ2xFO0FBR0EsU0FBUyxRQUFRLElBQUlDLFNBQVE7QUFDM0IsUUFBTUEsVUFBUyxLQUFLO0FBRXBCLFFBQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtBQUVyQixTQUFPO0FBQUEsSUFDTCxNQUFNLEVBQUUsZUFBZTtBQUFBLElBQ3ZCLE9BQU8sRUFBRSxZQUFZLElBQUk7QUFBQSxJQUN6QixLQUFLLEVBQUUsV0FBVztBQUFBLElBQ2xCLE1BQU0sRUFBRSxZQUFZO0FBQUEsSUFDcEIsUUFBUSxFQUFFLGNBQWM7QUFBQSxJQUN4QixRQUFRLEVBQUUsY0FBYztBQUFBLElBQ3hCLGFBQWEsRUFBRSxtQkFBbUI7QUFBQSxFQUNwQztBQUNGO0FBR0EsU0FBUyxRQUFRLEtBQUtBLFNBQVEsTUFBTTtBQUNsQyxTQUFPLFVBQVUsYUFBYSxHQUFHLEdBQUdBLFNBQVEsSUFBSTtBQUNsRDtBQUdBLFNBQVMsV0FBVyxNQUFNLEtBQUs7QUFDN0IsUUFBTSxPQUFPLEtBQUssR0FDaEIsT0FBTyxLQUFLLEVBQUUsT0FBTyxLQUFLLE1BQU0sSUFBSSxLQUFLLEdBQ3pDLFFBQVEsS0FBSyxFQUFFLFFBQVEsS0FBSyxNQUFNLElBQUksTUFBTSxJQUFJLEtBQUssTUFBTSxJQUFJLFFBQVEsSUFBSSxHQUMzRSxJQUFJO0FBQUEsSUFDRixHQUFHLEtBQUs7QUFBQSxJQUNSO0FBQUEsSUFDQTtBQUFBLElBQ0EsS0FDRSxLQUFLLElBQUksS0FBSyxFQUFFLEtBQUssWUFBWSxNQUFNLEtBQUssQ0FBQyxJQUM3QyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQ25CLEtBQUssTUFBTSxJQUFJLEtBQUssSUFBSTtBQUFBLEVBQzVCLEdBQ0EsY0FBYyxTQUFTLFdBQVc7QUFBQSxJQUNoQyxPQUFPLElBQUksUUFBUSxLQUFLLE1BQU0sSUFBSSxLQUFLO0FBQUEsSUFDdkMsVUFBVSxJQUFJLFdBQVcsS0FBSyxNQUFNLElBQUksUUFBUTtBQUFBLElBQ2hELFFBQVEsSUFBSSxTQUFTLEtBQUssTUFBTSxJQUFJLE1BQU07QUFBQSxJQUMxQyxPQUFPLElBQUksUUFBUSxLQUFLLE1BQU0sSUFBSSxLQUFLO0FBQUEsSUFDdkMsTUFBTSxJQUFJLE9BQU8sS0FBSyxNQUFNLElBQUksSUFBSTtBQUFBLElBQ3BDLE9BQU8sSUFBSTtBQUFBLElBQ1gsU0FBUyxJQUFJO0FBQUEsSUFDYixTQUFTLElBQUk7QUFBQSxJQUNiLGNBQWMsSUFBSTtBQUFBLEVBQ3BCLENBQUMsRUFBRSxHQUFHLGNBQWMsR0FDcEIsVUFBVSxhQUFhLENBQUM7QUFFMUIsTUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsU0FBUyxNQUFNLEtBQUssSUFBSTtBQUVoRCxNQUFJLGdCQUFnQixHQUFHO0FBQ3JCLFVBQU07QUFFTixRQUFJLEtBQUssS0FBSyxPQUFPLEVBQUU7QUFBQSxFQUN6QjtBQUVBLFNBQU8sRUFBRSxJQUFJLEVBQUU7QUFDakI7QUFJQSxTQUFTLG9CQUFvQixRQUFRLFlBQVksTUFBTUMsU0FBUSxNQUFNLGdCQUFnQjtBQUNuRixRQUFNLEVBQUUsU0FBUyxLQUFLLElBQUk7QUFDMUIsTUFBSyxVQUFVLE9BQU8sS0FBSyxNQUFNLEVBQUUsV0FBVyxLQUFNLFlBQVk7QUFDOUQsVUFBTSxxQkFBcUIsY0FBYyxNQUN2QyxPQUFPLFNBQVMsV0FBVyxRQUFRO0FBQUEsTUFDakMsR0FBRztBQUFBLE1BQ0gsTUFBTTtBQUFBLE1BQ047QUFBQSxJQUNGLENBQUM7QUFDSCxXQUFPLFVBQVUsT0FBTyxLQUFLLFFBQVEsSUFBSTtBQUFBLEVBQzNDLE9BQU87QUFDTCxXQUFPLFNBQVM7QUFBQSxNQUNkLElBQUksUUFBUSxjQUFjLGNBQWMsSUFBSSx3QkFBd0JBLE9BQU0sRUFBRTtBQUFBLElBQzlFO0FBQUEsRUFDRjtBQUNGO0FBSUEsU0FBUyxhQUFhLElBQUlBLFNBQVEsU0FBUyxNQUFNO0FBQy9DLFNBQU8sR0FBRyxVQUNOLFVBQVUsT0FBTyxPQUFPLE9BQU8sT0FBTyxHQUFHO0FBQUEsSUFDdkM7QUFBQSxJQUNBLGFBQWE7QUFBQSxFQUNmLENBQUMsRUFBRSx5QkFBeUIsSUFBSUEsT0FBTSxJQUN0QztBQUNOO0FBRUEsU0FBUyxVQUFVLEdBQUcsVUFBVTtBQUM5QixRQUFNLGFBQWEsRUFBRSxFQUFFLE9BQU8sUUFBUSxFQUFFLEVBQUUsT0FBTztBQUNqRCxNQUFJLElBQUk7QUFDUixNQUFJLGNBQWMsRUFBRSxFQUFFLFFBQVEsRUFBRyxNQUFLO0FBQ3RDLE9BQUssU0FBUyxFQUFFLEVBQUUsTUFBTSxhQUFhLElBQUksQ0FBQztBQUUxQyxNQUFJLFVBQVU7QUFDWixTQUFLO0FBQ0wsU0FBSyxTQUFTLEVBQUUsRUFBRSxLQUFLO0FBQ3ZCLFNBQUs7QUFDTCxTQUFLLFNBQVMsRUFBRSxFQUFFLEdBQUc7QUFBQSxFQUN2QixPQUFPO0FBQ0wsU0FBSyxTQUFTLEVBQUUsRUFBRSxLQUFLO0FBQ3ZCLFNBQUssU0FBUyxFQUFFLEVBQUUsR0FBRztBQUFBLEVBQ3ZCO0FBQ0EsU0FBTztBQUNUO0FBRUEsU0FBUyxVQUNQLEdBQ0EsVUFDQSxpQkFDQSxzQkFDQSxlQUNBLGNBQ0E7QUFDQSxNQUFJLElBQUksU0FBUyxFQUFFLEVBQUUsSUFBSTtBQUN6QixNQUFJLFVBQVU7QUFDWixTQUFLO0FBQ0wsU0FBSyxTQUFTLEVBQUUsRUFBRSxNQUFNO0FBQ3hCLFFBQUksRUFBRSxFQUFFLGdCQUFnQixLQUFLLEVBQUUsRUFBRSxXQUFXLEtBQUssQ0FBQyxpQkFBaUI7QUFDakUsV0FBSztBQUFBLElBQ1A7QUFBQSxFQUNGLE9BQU87QUFDTCxTQUFLLFNBQVMsRUFBRSxFQUFFLE1BQU07QUFBQSxFQUMxQjtBQUVBLE1BQUksRUFBRSxFQUFFLGdCQUFnQixLQUFLLEVBQUUsRUFBRSxXQUFXLEtBQUssQ0FBQyxpQkFBaUI7QUFDakUsU0FBSyxTQUFTLEVBQUUsRUFBRSxNQUFNO0FBRXhCLFFBQUksRUFBRSxFQUFFLGdCQUFnQixLQUFLLENBQUMsc0JBQXNCO0FBQ2xELFdBQUs7QUFDTCxXQUFLLFNBQVMsRUFBRSxFQUFFLGFBQWEsQ0FBQztBQUFBLElBQ2xDO0FBQUEsRUFDRjtBQUVBLE1BQUksZUFBZTtBQUNqQixRQUFJLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxLQUFLLENBQUMsY0FBYztBQUN0RCxXQUFLO0FBQUEsSUFDUCxXQUFXLEVBQUUsSUFBSSxHQUFHO0FBQ2xCLFdBQUs7QUFDTCxXQUFLLFNBQVMsS0FBSyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNuQyxXQUFLO0FBQ0wsV0FBSyxTQUFTLEtBQUssTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFBQSxJQUNyQyxPQUFPO0FBQ0wsV0FBSztBQUNMLFdBQUssU0FBUyxLQUFLLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNsQyxXQUFLO0FBQ0wsV0FBSyxTQUFTLEtBQUssTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQUEsSUFDcEM7QUFBQSxFQUNGO0FBRUEsTUFBSSxjQUFjO0FBQ2hCLFNBQUssTUFBTSxFQUFFLEtBQUssV0FBVztBQUFBLEVBQy9CO0FBQ0EsU0FBTztBQUNUO0FBR0EsSUFBTSxvQkFBb0I7QUFBQSxFQUN0QixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixhQUFhO0FBQ2Y7QUFQRixJQVFFLHdCQUF3QjtBQUFBLEVBQ3RCLFlBQVk7QUFBQSxFQUNaLFNBQVM7QUFBQSxFQUNULE1BQU07QUFBQSxFQUNOLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLGFBQWE7QUFDZjtBQWZGLElBZ0JFLDJCQUEyQjtBQUFBLEVBQ3pCLFNBQVM7QUFBQSxFQUNULE1BQU07QUFBQSxFQUNOLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLGFBQWE7QUFDZjtBQUdGLElBQU1DLGdCQUFlLENBQUMsUUFBUSxTQUFTLE9BQU8sUUFBUSxVQUFVLFVBQVUsYUFBYTtBQUF2RixJQUNFLG1CQUFtQjtBQUFBLEVBQ2pCO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0Y7QUFURixJQVVFLHNCQUFzQixDQUFDLFFBQVEsV0FBVyxRQUFRLFVBQVUsVUFBVSxhQUFhO0FBR3JGLFNBQVMsY0FBYyxNQUFNO0FBQzNCLFFBQU0sYUFBYTtBQUFBLElBQ2pCLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxJQUNQLE9BQU87QUFBQSxJQUNQLFFBQVE7QUFBQSxJQUNSLEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxJQUNQLFFBQVE7QUFBQSxJQUNSLFNBQVM7QUFBQSxJQUNULFNBQVM7QUFBQSxJQUNULFVBQVU7QUFBQSxJQUNWLFFBQVE7QUFBQSxJQUNSLFNBQVM7QUFBQSxJQUNULGFBQWE7QUFBQSxJQUNiLGNBQWM7QUFBQSxJQUNkLFNBQVM7QUFBQSxJQUNULFVBQVU7QUFBQSxJQUNWLFlBQVk7QUFBQSxJQUNaLGFBQWE7QUFBQSxJQUNiLGFBQWE7QUFBQSxJQUNiLFVBQVU7QUFBQSxJQUNWLFdBQVc7QUFBQSxJQUNYLFNBQVM7QUFBQSxFQUNYLEVBQUUsS0FBSyxZQUFZLENBQUM7QUFFcEIsTUFBSSxDQUFDLFdBQVksT0FBTSxJQUFJLGlCQUFpQixJQUFJO0FBRWhELFNBQU87QUFDVDtBQUVBLFNBQVMsNEJBQTRCLE1BQU07QUFDekMsVUFBUSxLQUFLLFlBQVksR0FBRztBQUFBLElBQzFCLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFDSCxhQUFPO0FBQUEsSUFDVCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQ0gsYUFBTztBQUFBLElBQ1QsS0FBSztBQUFBLElBQ0wsS0FBSztBQUNILGFBQU87QUFBQSxJQUNUO0FBQ0UsYUFBTyxjQUFjLElBQUk7QUFBQSxFQUM3QjtBQUNGO0FBeUJBLFNBQVMsbUJBQW1CLE1BQU07QUFDaEMsTUFBSSxpQkFBaUIsUUFBVztBQUM5QixtQkFBZSxTQUFTLElBQUk7QUFBQSxFQUM5QjtBQUlBLE1BQUksS0FBSyxTQUFTLFFBQVE7QUFDeEIsV0FBTyxLQUFLLE9BQU8sWUFBWTtBQUFBLEVBQ2pDO0FBQ0EsUUFBTSxXQUFXLEtBQUs7QUFDdEIsTUFBSSxjQUFjLHFCQUFxQixJQUFJLFFBQVE7QUFDbkQsTUFBSSxnQkFBZ0IsUUFBVztBQUM3QixrQkFBYyxLQUFLLE9BQU8sWUFBWTtBQUN0Qyx5QkFBcUIsSUFBSSxVQUFVLFdBQVc7QUFBQSxFQUNoRDtBQUNBLFNBQU87QUFDVDtBQUtBLFNBQVMsUUFBUSxLQUFLLE1BQU07QUFDMUIsUUFBTSxPQUFPLGNBQWMsS0FBSyxNQUFNLFNBQVMsV0FBVztBQUMxRCxNQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCLFdBQU8sU0FBUyxRQUFRLGdCQUFnQixJQUFJLENBQUM7QUFBQSxFQUMvQztBQUVBLFFBQU0sTUFBTSxPQUFPLFdBQVcsSUFBSTtBQUVsQyxNQUFJLElBQUk7QUFHUixNQUFJLENBQUMsWUFBWSxJQUFJLElBQUksR0FBRztBQUMxQixlQUFXLEtBQUtBLGVBQWM7QUFDNUIsVUFBSSxZQUFZLElBQUksQ0FBQyxDQUFDLEdBQUc7QUFDdkIsWUFBSSxDQUFDLElBQUksa0JBQWtCLENBQUM7QUFBQSxNQUM5QjtBQUFBLElBQ0Y7QUFFQSxVQUFNLFVBQVUsd0JBQXdCLEdBQUcsS0FBSyxtQkFBbUIsR0FBRztBQUN0RSxRQUFJLFNBQVM7QUFDWCxhQUFPLFNBQVMsUUFBUSxPQUFPO0FBQUEsSUFDakM7QUFFQSxVQUFNLGVBQWUsbUJBQW1CLElBQUk7QUFDNUMsS0FBQyxJQUFJLENBQUMsSUFBSSxRQUFRLEtBQUssY0FBYyxJQUFJO0FBQUEsRUFDM0MsT0FBTztBQUNMLFNBQUssU0FBUyxJQUFJO0FBQUEsRUFDcEI7QUFFQSxTQUFPLElBQUksU0FBUyxFQUFFLElBQUksTUFBTSxLQUFLLEVBQUUsQ0FBQztBQUMxQztBQUVBLFNBQVMsYUFBYSxPQUFPLEtBQUssTUFBTTtBQUN0QyxRQUFNLFFBQVEsWUFBWSxLQUFLLEtBQUssSUFBSSxPQUFPLEtBQUssT0FDbERELFVBQVMsQ0FBQyxHQUFHLFNBQVM7QUFDcEIsUUFBSSxRQUFRLEdBQUcsU0FBUyxLQUFLLFlBQVksSUFBSSxHQUFHLElBQUk7QUFDcEQsVUFBTSxZQUFZLElBQUksSUFBSSxNQUFNLElBQUksRUFBRSxhQUFhLElBQUk7QUFDdkQsV0FBTyxVQUFVLE9BQU8sR0FBRyxJQUFJO0FBQUEsRUFDakMsR0FDQSxTQUFTLENBQUMsU0FBUztBQUNqQixRQUFJLEtBQUssV0FBVztBQUNsQixVQUFJLENBQUMsSUFBSSxRQUFRLE9BQU8sSUFBSSxHQUFHO0FBQzdCLGVBQU8sSUFBSSxRQUFRLElBQUksRUFBRSxLQUFLLE1BQU0sUUFBUSxJQUFJLEdBQUcsSUFBSSxFQUFFLElBQUksSUFBSTtBQUFBLE1BQ25FLE1BQU8sUUFBTztBQUFBLElBQ2hCLE9BQU87QUFDTCxhQUFPLElBQUksS0FBSyxPQUFPLElBQUksRUFBRSxJQUFJLElBQUk7QUFBQSxJQUN2QztBQUFBLEVBQ0Y7QUFFRixNQUFJLEtBQUssTUFBTTtBQUNiLFdBQU9BLFFBQU8sT0FBTyxLQUFLLElBQUksR0FBRyxLQUFLLElBQUk7QUFBQSxFQUM1QztBQUVBLGFBQVcsUUFBUSxLQUFLLE9BQU87QUFDN0IsVUFBTSxRQUFRLE9BQU8sSUFBSTtBQUN6QixRQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssR0FBRztBQUN4QixhQUFPQSxRQUFPLE9BQU8sSUFBSTtBQUFBLElBQzNCO0FBQUEsRUFDRjtBQUNBLFNBQU9BLFFBQU8sUUFBUSxNQUFNLEtBQUssR0FBRyxLQUFLLE1BQU0sS0FBSyxNQUFNLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZFO0FBRUEsU0FBUyxTQUFTLFNBQVM7QUFDekIsTUFBSSxPQUFPLENBQUMsR0FDVjtBQUNGLE1BQUksUUFBUSxTQUFTLEtBQUssT0FBTyxRQUFRLFFBQVEsU0FBUyxDQUFDLE1BQU0sVUFBVTtBQUN6RSxXQUFPLFFBQVEsUUFBUSxTQUFTLENBQUM7QUFDakMsV0FBTyxNQUFNLEtBQUssT0FBTyxFQUFFLE1BQU0sR0FBRyxRQUFRLFNBQVMsQ0FBQztBQUFBLEVBQ3hELE9BQU87QUFDTCxXQUFPLE1BQU0sS0FBSyxPQUFPO0FBQUEsRUFDM0I7QUFDQSxTQUFPLENBQUMsTUFBTSxJQUFJO0FBQ3BCO0FBS0EsSUFBSTtBQU9KLElBQU0sdUJBQXVCLG9CQUFJLElBQUk7QUFzQnJDLElBQXFCLFdBQXJCLE1BQXFCLFVBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUk1QixZQUFZLFFBQVE7QUFDbEIsVUFBTSxPQUFPLE9BQU8sUUFBUSxTQUFTO0FBRXJDLFFBQUksVUFDRixPQUFPLFlBQ04sT0FBTyxNQUFNLE9BQU8sRUFBRSxJQUFJLElBQUksUUFBUSxlQUFlLElBQUksVUFDekQsQ0FBQyxLQUFLLFVBQVUsZ0JBQWdCLElBQUksSUFBSTtBQUkzQyxTQUFLLEtBQUssWUFBWSxPQUFPLEVBQUUsSUFBSSxTQUFTLElBQUksSUFBSSxPQUFPO0FBRTNELFFBQUksSUFBSSxNQUNOLElBQUk7QUFDTixRQUFJLENBQUMsU0FBUztBQUNaLFlBQU0sWUFBWSxPQUFPLE9BQU8sT0FBTyxJQUFJLE9BQU8sS0FBSyxNQUFNLE9BQU8sSUFBSSxLQUFLLE9BQU8sSUFBSTtBQUV4RixVQUFJLFdBQVc7QUFDYixTQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEdBQUcsT0FBTyxJQUFJLENBQUM7QUFBQSxNQUN0QyxPQUFPO0FBR0wsY0FBTSxLQUFLLFNBQVMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLE1BQU0sT0FBTyxJQUFJLEtBQUssT0FBTyxLQUFLLEVBQUU7QUFDN0UsWUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO0FBQ3ZCLGtCQUFVLE9BQU8sTUFBTSxFQUFFLElBQUksSUFBSSxJQUFJLFFBQVEsZUFBZSxJQUFJO0FBQ2hFLFlBQUksVUFBVSxPQUFPO0FBQ3JCLFlBQUksVUFBVSxPQUFPO0FBQUEsTUFDdkI7QUFBQSxJQUNGO0FBS0EsU0FBSyxRQUFRO0FBSWIsU0FBSyxNQUFNLE9BQU8sT0FBTyxPQUFPLE9BQU87QUFJdkMsU0FBSyxVQUFVO0FBSWYsU0FBSyxXQUFXO0FBSWhCLFNBQUssZ0JBQWdCO0FBSXJCLFNBQUssSUFBSTtBQUlULFNBQUssSUFBSTtBQUlULFNBQUssa0JBQWtCO0FBQUEsRUFDekI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFXQSxPQUFPLE1BQU07QUFDWCxXQUFPLElBQUksVUFBUyxDQUFDLENBQUM7QUFBQSxFQUN4QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBdUJBLE9BQU8sUUFBUTtBQUNiLFVBQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxTQUFTLFNBQVMsR0FDckMsQ0FBQyxNQUFNLE9BQU8sS0FBSyxNQUFNLFFBQVEsUUFBUSxXQUFXLElBQUk7QUFDMUQsV0FBTyxRQUFRLEVBQUUsTUFBTSxPQUFPLEtBQUssTUFBTSxRQUFRLFFBQVEsWUFBWSxHQUFHLElBQUk7QUFBQSxFQUM5RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUEyQkEsT0FBTyxNQUFNO0FBQ1gsVUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLFNBQVMsU0FBUyxHQUNyQyxDQUFDLE1BQU0sT0FBTyxLQUFLLE1BQU0sUUFBUSxRQUFRLFdBQVcsSUFBSTtBQUUxRCxTQUFLLE9BQU8sZ0JBQWdCO0FBQzVCLFdBQU8sUUFBUSxFQUFFLE1BQU0sT0FBTyxLQUFLLE1BQU0sUUFBUSxRQUFRLFlBQVksR0FBRyxJQUFJO0FBQUEsRUFDOUU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBU0EsT0FBTyxXQUFXLE1BQU0sVUFBVSxDQUFDLEdBQUc7QUFDcEMsVUFBTSxLQUFLLE9BQU8sSUFBSSxJQUFJLEtBQUssUUFBUSxJQUFJO0FBQzNDLFFBQUksT0FBTyxNQUFNLEVBQUUsR0FBRztBQUNwQixhQUFPLFVBQVMsUUFBUSxlQUFlO0FBQUEsSUFDekM7QUFFQSxVQUFNLFlBQVksY0FBYyxRQUFRLE1BQU0sU0FBUyxXQUFXO0FBQ2xFLFFBQUksQ0FBQyxVQUFVLFNBQVM7QUFDdEIsYUFBTyxVQUFTLFFBQVEsZ0JBQWdCLFNBQVMsQ0FBQztBQUFBLElBQ3BEO0FBRUEsV0FBTyxJQUFJLFVBQVM7QUFBQSxNQUNsQjtBQUFBLE1BQ0EsTUFBTTtBQUFBLE1BQ04sS0FBSyxPQUFPLFdBQVcsT0FBTztBQUFBLElBQ2hDLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBYUEsT0FBTyxXQUFXLGNBQWMsVUFBVSxDQUFDLEdBQUc7QUFDNUMsUUFBSSxDQUFDLFNBQVMsWUFBWSxHQUFHO0FBQzNCLFlBQU0sSUFBSTtBQUFBLFFBQ1IseURBQXlELE9BQU8sWUFBWSxlQUFlLFlBQVk7QUFBQSxNQUN6RztBQUFBLElBQ0YsV0FBVyxlQUFlLENBQUMsWUFBWSxlQUFlLFVBQVU7QUFFOUQsYUFBTyxVQUFTLFFBQVEsd0JBQXdCO0FBQUEsSUFDbEQsT0FBTztBQUNMLGFBQU8sSUFBSSxVQUFTO0FBQUEsUUFDbEIsSUFBSTtBQUFBLFFBQ0osTUFBTSxjQUFjLFFBQVEsTUFBTSxTQUFTLFdBQVc7QUFBQSxRQUN0RCxLQUFLLE9BQU8sV0FBVyxPQUFPO0FBQUEsTUFDaEMsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBYUEsT0FBTyxZQUFZLFNBQVMsVUFBVSxDQUFDLEdBQUc7QUFDeEMsUUFBSSxDQUFDLFNBQVMsT0FBTyxHQUFHO0FBQ3RCLFlBQU0sSUFBSSxxQkFBcUIsd0NBQXdDO0FBQUEsSUFDekUsT0FBTztBQUNMLGFBQU8sSUFBSSxVQUFTO0FBQUEsUUFDbEIsSUFBSSxVQUFVO0FBQUEsUUFDZCxNQUFNLGNBQWMsUUFBUSxNQUFNLFNBQVMsV0FBVztBQUFBLFFBQ3RELEtBQUssT0FBTyxXQUFXLE9BQU87QUFBQSxNQUNoQyxDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQW1DQSxPQUFPLFdBQVcsS0FBSyxPQUFPLENBQUMsR0FBRztBQUNoQyxVQUFNLE9BQU8sQ0FBQztBQUNkLFVBQU0sWUFBWSxjQUFjLEtBQUssTUFBTSxTQUFTLFdBQVc7QUFDL0QsUUFBSSxDQUFDLFVBQVUsU0FBUztBQUN0QixhQUFPLFVBQVMsUUFBUSxnQkFBZ0IsU0FBUyxDQUFDO0FBQUEsSUFDcEQ7QUFFQSxVQUFNLE1BQU0sT0FBTyxXQUFXLElBQUk7QUFDbEMsVUFBTSxhQUFhLGdCQUFnQixLQUFLLDJCQUEyQjtBQUNuRSxVQUFNLEVBQUUsb0JBQW9CLFlBQVksSUFBSSxvQkFBb0IsWUFBWSxHQUFHO0FBRS9FLFVBQU0sUUFBUSxTQUFTLElBQUksR0FDekIsZUFBZSxDQUFDLFlBQVksS0FBSyxjQUFjLElBQzNDLEtBQUssaUJBQ0wsVUFBVSxPQUFPLEtBQUssR0FDMUIsa0JBQWtCLENBQUMsWUFBWSxXQUFXLE9BQU8sR0FDakQscUJBQXFCLENBQUMsWUFBWSxXQUFXLElBQUksR0FDakQsbUJBQW1CLENBQUMsWUFBWSxXQUFXLEtBQUssS0FBSyxDQUFDLFlBQVksV0FBVyxHQUFHLEdBQ2hGLGlCQUFpQixzQkFBc0Isa0JBQ3ZDLGtCQUFrQixXQUFXLFlBQVksV0FBVztBQVF0RCxTQUFLLGtCQUFrQixvQkFBb0IsaUJBQWlCO0FBQzFELFlBQU0sSUFBSTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUVBLFFBQUksb0JBQW9CLGlCQUFpQjtBQUN2QyxZQUFNLElBQUksOEJBQThCLHdDQUF3QztBQUFBLElBQ2xGO0FBRUEsVUFBTSxjQUFjLG1CQUFvQixXQUFXLFdBQVcsQ0FBQztBQUcvRCxRQUFJLE9BQ0YsZUFDQSxTQUFTLFFBQVEsT0FBTyxZQUFZO0FBQ3RDLFFBQUksYUFBYTtBQUNmLGNBQVE7QUFDUixzQkFBZ0I7QUFDaEIsZUFBUyxnQkFBZ0IsUUFBUSxvQkFBb0IsV0FBVztBQUFBLElBQ2xFLFdBQVcsaUJBQWlCO0FBQzFCLGNBQVE7QUFDUixzQkFBZ0I7QUFDaEIsZUFBUyxtQkFBbUIsTUFBTTtBQUFBLElBQ3BDLE9BQU87QUFDTCxjQUFRQztBQUNSLHNCQUFnQjtBQUFBLElBQ2xCO0FBR0EsUUFBSSxhQUFhO0FBQ2pCLGVBQVcsS0FBSyxPQUFPO0FBQ3JCLFlBQU0sSUFBSSxXQUFXLENBQUM7QUFDdEIsVUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHO0FBQ25CLHFCQUFhO0FBQUEsTUFDZixXQUFXLFlBQVk7QUFDckIsbUJBQVcsQ0FBQyxJQUFJLGNBQWMsQ0FBQztBQUFBLE1BQ2pDLE9BQU87QUFDTCxtQkFBVyxDQUFDLElBQUksT0FBTyxDQUFDO0FBQUEsTUFDMUI7QUFBQSxJQUNGO0FBR0EsVUFBTSxxQkFBcUIsY0FDckIsbUJBQW1CLFlBQVksb0JBQW9CLFdBQVcsSUFDOUQsa0JBQ0Esc0JBQXNCLFVBQVUsSUFDaEMsd0JBQXdCLFVBQVUsR0FDdEMsVUFBVSxzQkFBc0IsbUJBQW1CLFVBQVU7QUFFL0QsUUFBSSxTQUFTO0FBQ1gsYUFBTyxVQUFTLFFBQVEsT0FBTztBQUFBLElBQ2pDO0FBR0EsVUFBTSxZQUFZLGNBQ1osZ0JBQWdCLFlBQVksb0JBQW9CLFdBQVcsSUFDM0Qsa0JBQ0EsbUJBQW1CLFVBQVUsSUFDN0IsWUFDSixDQUFDLFNBQVMsV0FBVyxJQUFJLFFBQVEsV0FBVyxjQUFjLFNBQVMsR0FDbkUsT0FBTyxJQUFJLFVBQVM7QUFBQSxNQUNsQixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixHQUFHO0FBQUEsTUFDSDtBQUFBLElBQ0YsQ0FBQztBQUdILFFBQUksV0FBVyxXQUFXLGtCQUFrQixJQUFJLFlBQVksS0FBSyxTQUFTO0FBQ3hFLGFBQU8sVUFBUztBQUFBLFFBQ2Q7QUFBQSxRQUNBLHVDQUF1QyxXQUFXLE9BQU8sa0JBQWtCLEtBQUssTUFBTSxDQUFDO0FBQUEsTUFDekY7QUFBQSxJQUNGO0FBRUEsUUFBSSxDQUFDLEtBQUssU0FBUztBQUNqQixhQUFPLFVBQVMsUUFBUSxLQUFLLE9BQU87QUFBQSxJQUN0QztBQUVBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBbUJBLE9BQU8sUUFBUSxNQUFNLE9BQU8sQ0FBQyxHQUFHO0FBQzlCLFVBQU0sQ0FBQyxNQUFNLFVBQVUsSUFBSSxhQUFhLElBQUk7QUFDNUMsV0FBTyxvQkFBb0IsTUFBTSxZQUFZLE1BQU0sWUFBWSxJQUFJO0FBQUEsRUFDckU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWlCQSxPQUFPLFlBQVksTUFBTSxPQUFPLENBQUMsR0FBRztBQUNsQyxVQUFNLENBQUMsTUFBTSxVQUFVLElBQUksaUJBQWlCLElBQUk7QUFDaEQsV0FBTyxvQkFBb0IsTUFBTSxZQUFZLE1BQU0sWUFBWSxJQUFJO0FBQUEsRUFDckU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBa0JBLE9BQU8sU0FBUyxNQUFNLE9BQU8sQ0FBQyxHQUFHO0FBQy9CLFVBQU0sQ0FBQyxNQUFNLFVBQVUsSUFBSSxjQUFjLElBQUk7QUFDN0MsV0FBTyxvQkFBb0IsTUFBTSxZQUFZLE1BQU0sUUFBUSxJQUFJO0FBQUEsRUFDakU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFnQkEsT0FBTyxXQUFXLE1BQU0sS0FBSyxPQUFPLENBQUMsR0FBRztBQUN0QyxRQUFJLFlBQVksSUFBSSxLQUFLLFlBQVksR0FBRyxHQUFHO0FBQ3pDLFlBQU0sSUFBSSxxQkFBcUIsa0RBQWtEO0FBQUEsSUFDbkY7QUFFQSxVQUFNLEVBQUUsU0FBUyxNQUFNLGtCQUFrQixLQUFLLElBQUksTUFDaEQsY0FBYyxPQUFPLFNBQVM7QUFBQSxNQUM1QjtBQUFBLE1BQ0E7QUFBQSxNQUNBLGFBQWE7QUFBQSxJQUNmLENBQUMsR0FDRCxDQUFDLE1BQU0sWUFBWSxnQkFBZ0IsT0FBTyxJQUFJLGdCQUFnQixhQUFhLE1BQU0sR0FBRztBQUN0RixRQUFJLFNBQVM7QUFDWCxhQUFPLFVBQVMsUUFBUSxPQUFPO0FBQUEsSUFDakMsT0FBTztBQUNMLGFBQU8sb0JBQW9CLE1BQU0sWUFBWSxNQUFNLFVBQVUsR0FBRyxJQUFJLE1BQU0sY0FBYztBQUFBLElBQzFGO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsT0FBTyxXQUFXLE1BQU0sS0FBSyxPQUFPLENBQUMsR0FBRztBQUN0QyxXQUFPLFVBQVMsV0FBVyxNQUFNLEtBQUssSUFBSTtBQUFBLEVBQzVDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUF1QkEsT0FBTyxRQUFRLE1BQU0sT0FBTyxDQUFDLEdBQUc7QUFDOUIsVUFBTSxDQUFDLE1BQU0sVUFBVSxJQUFJLFNBQVMsSUFBSTtBQUN4QyxXQUFPLG9CQUFvQixNQUFNLFlBQVksTUFBTSxPQUFPLElBQUk7QUFBQSxFQUNoRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsT0FBTyxRQUFRLFFBQVEsY0FBYyxNQUFNO0FBQ3pDLFFBQUksQ0FBQyxRQUFRO0FBQ1gsWUFBTSxJQUFJLHFCQUFxQixrREFBa0Q7QUFBQSxJQUNuRjtBQUVBLFVBQU0sVUFBVSxrQkFBa0IsVUFBVSxTQUFTLElBQUksUUFBUSxRQUFRLFdBQVc7QUFFcEYsUUFBSSxTQUFTLGdCQUFnQjtBQUMzQixZQUFNLElBQUkscUJBQXFCLE9BQU87QUFBQSxJQUN4QyxPQUFPO0FBQ0wsYUFBTyxJQUFJLFVBQVMsRUFBRSxRQUFRLENBQUM7QUFBQSxJQUNqQztBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxPQUFPLFdBQVcsR0FBRztBQUNuQixXQUFRLEtBQUssRUFBRSxtQkFBb0I7QUFBQSxFQUNyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsT0FBTyxtQkFBbUIsWUFBWSxhQUFhLENBQUMsR0FBRztBQUNyRCxVQUFNLFlBQVksbUJBQW1CLFlBQVksT0FBTyxXQUFXLFVBQVUsQ0FBQztBQUM5RSxXQUFPLENBQUMsWUFBWSxPQUFPLFVBQVUsSUFBSSxDQUFDLE1BQU8sSUFBSSxFQUFFLE1BQU0sSUFBSyxFQUFFLEtBQUssRUFBRTtBQUFBLEVBQzdFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLE9BQU8sYUFBYSxLQUFLLGFBQWEsQ0FBQyxHQUFHO0FBQ3hDLFVBQU0sV0FBVyxrQkFBa0IsVUFBVSxZQUFZLEdBQUcsR0FBRyxPQUFPLFdBQVcsVUFBVSxDQUFDO0FBQzVGLFdBQU8sU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFBQSxFQUMzQztBQUFBLEVBRUEsT0FBTyxhQUFhO0FBQ2xCLG1CQUFlO0FBQ2YseUJBQXFCLE1BQU07QUFBQSxFQUM3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdBLElBQUksTUFBTTtBQUNSLFdBQU8sS0FBSyxJQUFJO0FBQUEsRUFDbEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLElBQUksVUFBVTtBQUNaLFdBQU8sS0FBSyxZQUFZO0FBQUEsRUFDMUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxnQkFBZ0I7QUFDbEIsV0FBTyxLQUFLLFVBQVUsS0FBSyxRQUFRLFNBQVM7QUFBQSxFQUM5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLHFCQUFxQjtBQUN2QixXQUFPLEtBQUssVUFBVSxLQUFLLFFBQVEsY0FBYztBQUFBLEVBQ25EO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxTQUFTO0FBQ1gsV0FBTyxLQUFLLFVBQVUsS0FBSyxJQUFJLFNBQVM7QUFBQSxFQUMxQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksa0JBQWtCO0FBQ3BCLFdBQU8sS0FBSyxVQUFVLEtBQUssSUFBSSxrQkFBa0I7QUFBQSxFQUNuRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksaUJBQWlCO0FBQ25CLFdBQU8sS0FBSyxVQUFVLEtBQUssSUFBSSxpQkFBaUI7QUFBQSxFQUNsRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxJQUFJLE9BQU87QUFDVCxXQUFPLEtBQUs7QUFBQSxFQUNkO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksV0FBVztBQUNiLFdBQU8sS0FBSyxVQUFVLEtBQUssS0FBSyxPQUFPO0FBQUEsRUFDekM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxJQUFJLE9BQU87QUFDVCxXQUFPLEtBQUssVUFBVSxLQUFLLEVBQUUsT0FBTztBQUFBLEVBQ3RDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxVQUFVO0FBQ1osV0FBTyxLQUFLLFVBQVUsS0FBSyxLQUFLLEtBQUssRUFBRSxRQUFRLENBQUMsSUFBSTtBQUFBLEVBQ3REO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxRQUFRO0FBQ1YsV0FBTyxLQUFLLFVBQVUsS0FBSyxFQUFFLFFBQVE7QUFBQSxFQUN2QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksTUFBTTtBQUNSLFdBQU8sS0FBSyxVQUFVLEtBQUssRUFBRSxNQUFNO0FBQUEsRUFDckM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxJQUFJLE9BQU87QUFDVCxXQUFPLEtBQUssVUFBVSxLQUFLLEVBQUUsT0FBTztBQUFBLEVBQ3RDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxTQUFTO0FBQ1gsV0FBTyxLQUFLLFVBQVUsS0FBSyxFQUFFLFNBQVM7QUFBQSxFQUN4QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksU0FBUztBQUNYLFdBQU8sS0FBSyxVQUFVLEtBQUssRUFBRSxTQUFTO0FBQUEsRUFDeEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxJQUFJLGNBQWM7QUFDaEIsV0FBTyxLQUFLLFVBQVUsS0FBSyxFQUFFLGNBQWM7QUFBQSxFQUM3QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsSUFBSSxXQUFXO0FBQ2IsV0FBTyxLQUFLLFVBQVUsdUJBQXVCLElBQUksRUFBRSxXQUFXO0FBQUEsRUFDaEU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLElBQUksYUFBYTtBQUNmLFdBQU8sS0FBSyxVQUFVLHVCQUF1QixJQUFJLEVBQUUsYUFBYTtBQUFBLEVBQ2xFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLElBQUksVUFBVTtBQUNaLFdBQU8sS0FBSyxVQUFVLHVCQUF1QixJQUFJLEVBQUUsVUFBVTtBQUFBLEVBQy9EO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksWUFBWTtBQUNkLFdBQU8sS0FBSyxXQUFXLEtBQUssSUFBSSxlQUFlLEVBQUUsU0FBUyxLQUFLLE9BQU87QUFBQSxFQUN4RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsSUFBSSxlQUFlO0FBQ2pCLFdBQU8sS0FBSyxVQUFVLDRCQUE0QixJQUFJLEVBQUUsVUFBVTtBQUFBLEVBQ3BFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxJQUFJLGtCQUFrQjtBQUNwQixXQUFPLEtBQUssVUFBVSw0QkFBNEIsSUFBSSxFQUFFLGFBQWE7QUFBQSxFQUN2RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksZ0JBQWdCO0FBQ2xCLFdBQU8sS0FBSyxVQUFVLDRCQUE0QixJQUFJLEVBQUUsV0FBVztBQUFBLEVBQ3JFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsSUFBSSxVQUFVO0FBQ1osV0FBTyxLQUFLLFVBQVUsbUJBQW1CLEtBQUssQ0FBQyxFQUFFLFVBQVU7QUFBQSxFQUM3RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsSUFBSSxhQUFhO0FBQ2YsV0FBTyxLQUFLLFVBQVUsS0FBSyxPQUFPLFNBQVMsRUFBRSxRQUFRLEtBQUssSUFBSSxDQUFDLEVBQUUsS0FBSyxRQUFRLENBQUMsSUFBSTtBQUFBLEVBQ3JGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxJQUFJLFlBQVk7QUFDZCxXQUFPLEtBQUssVUFBVSxLQUFLLE9BQU8sUUFBUSxFQUFFLFFBQVEsS0FBSyxJQUFJLENBQUMsRUFBRSxLQUFLLFFBQVEsQ0FBQyxJQUFJO0FBQUEsRUFDcEY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLElBQUksZUFBZTtBQUNqQixXQUFPLEtBQUssVUFBVSxLQUFLLFNBQVMsU0FBUyxFQUFFLFFBQVEsS0FBSyxJQUFJLENBQUMsRUFBRSxLQUFLLFVBQVUsQ0FBQyxJQUFJO0FBQUEsRUFDekY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLElBQUksY0FBYztBQUNoQixXQUFPLEtBQUssVUFBVSxLQUFLLFNBQVMsUUFBUSxFQUFFLFFBQVEsS0FBSyxJQUFJLENBQUMsRUFBRSxLQUFLLFVBQVUsQ0FBQyxJQUFJO0FBQUEsRUFDeEY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLElBQUksU0FBUztBQUNYLFdBQU8sS0FBSyxVQUFVLENBQUMsS0FBSyxJQUFJO0FBQUEsRUFDbEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxJQUFJLGtCQUFrQjtBQUNwQixRQUFJLEtBQUssU0FBUztBQUNoQixhQUFPLEtBQUssS0FBSyxXQUFXLEtBQUssSUFBSTtBQUFBLFFBQ25DLFFBQVE7QUFBQSxRQUNSLFFBQVEsS0FBSztBQUFBLE1BQ2YsQ0FBQztBQUFBLElBQ0gsT0FBTztBQUNMLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksaUJBQWlCO0FBQ25CLFFBQUksS0FBSyxTQUFTO0FBQ2hCLGFBQU8sS0FBSyxLQUFLLFdBQVcsS0FBSyxJQUFJO0FBQUEsUUFDbkMsUUFBUTtBQUFBLFFBQ1IsUUFBUSxLQUFLO0FBQUEsTUFDZixDQUFDO0FBQUEsSUFDSCxPQUFPO0FBQ0wsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLElBQUksZ0JBQWdCO0FBQ2xCLFdBQU8sS0FBSyxVQUFVLEtBQUssS0FBSyxjQUFjO0FBQUEsRUFDaEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsSUFBSSxVQUFVO0FBQ1osUUFBSSxLQUFLLGVBQWU7QUFDdEIsYUFBTztBQUFBLElBQ1QsT0FBTztBQUNMLGFBQ0UsS0FBSyxTQUFTLEtBQUssSUFBSSxFQUFFLE9BQU8sR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLFVBQzdDLEtBQUssU0FBUyxLQUFLLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFO0FBQUEsSUFFekM7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLHFCQUFxQjtBQUNuQixRQUFJLENBQUMsS0FBSyxXQUFXLEtBQUssZUFBZTtBQUN2QyxhQUFPLENBQUMsSUFBSTtBQUFBLElBQ2Q7QUFDQSxVQUFNLFFBQVE7QUFDZCxVQUFNLFdBQVc7QUFDakIsVUFBTSxVQUFVLGFBQWEsS0FBSyxDQUFDO0FBQ25DLFVBQU0sV0FBVyxLQUFLLEtBQUssT0FBTyxVQUFVLEtBQUs7QUFDakQsVUFBTSxTQUFTLEtBQUssS0FBSyxPQUFPLFVBQVUsS0FBSztBQUUvQyxVQUFNLEtBQUssS0FBSyxLQUFLLE9BQU8sVUFBVSxXQUFXLFFBQVE7QUFDekQsVUFBTSxLQUFLLEtBQUssS0FBSyxPQUFPLFVBQVUsU0FBUyxRQUFRO0FBQ3ZELFFBQUksT0FBTyxJQUFJO0FBQ2IsYUFBTyxDQUFDLElBQUk7QUFBQSxJQUNkO0FBQ0EsVUFBTSxNQUFNLFVBQVUsS0FBSztBQUMzQixVQUFNLE1BQU0sVUFBVSxLQUFLO0FBQzNCLFVBQU0sS0FBSyxRQUFRLEtBQUssRUFBRTtBQUMxQixVQUFNLEtBQUssUUFBUSxLQUFLLEVBQUU7QUFDMUIsUUFDRSxHQUFHLFNBQVMsR0FBRyxRQUNmLEdBQUcsV0FBVyxHQUFHLFVBQ2pCLEdBQUcsV0FBVyxHQUFHLFVBQ2pCLEdBQUcsZ0JBQWdCLEdBQUcsYUFDdEI7QUFDQSxhQUFPLENBQUNILE9BQU0sTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUdBLE9BQU0sTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUM7QUFBQSxJQUM1RDtBQUNBLFdBQU8sQ0FBQyxJQUFJO0FBQUEsRUFDZDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsSUFBSSxlQUFlO0FBQ2pCLFdBQU8sV0FBVyxLQUFLLElBQUk7QUFBQSxFQUM3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsSUFBSSxjQUFjO0FBQ2hCLFdBQU8sWUFBWSxLQUFLLE1BQU0sS0FBSyxLQUFLO0FBQUEsRUFDMUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLElBQUksYUFBYTtBQUNmLFdBQU8sS0FBSyxVQUFVLFdBQVcsS0FBSyxJQUFJLElBQUk7QUFBQSxFQUNoRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFTQSxJQUFJLGtCQUFrQjtBQUNwQixXQUFPLEtBQUssVUFBVSxnQkFBZ0IsS0FBSyxRQUFRLElBQUk7QUFBQSxFQUN6RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsSUFBSSx1QkFBdUI7QUFDekIsV0FBTyxLQUFLLFVBQ1I7QUFBQSxNQUNFLEtBQUs7QUFBQSxNQUNMLEtBQUssSUFBSSxzQkFBc0I7QUFBQSxNQUMvQixLQUFLLElBQUksZUFBZTtBQUFBLElBQzFCLElBQ0E7QUFBQSxFQUNOO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxzQkFBc0IsT0FBTyxDQUFDLEdBQUc7QUFDL0IsVUFBTSxFQUFFLFFBQVEsaUJBQWlCLFNBQVMsSUFBSSxVQUFVO0FBQUEsTUFDdEQsS0FBSyxJQUFJLE1BQU0sSUFBSTtBQUFBLE1BQ25CO0FBQUEsSUFDRixFQUFFLGdCQUFnQixJQUFJO0FBQ3RCLFdBQU8sRUFBRSxRQUFRLGlCQUFpQixnQkFBZ0IsU0FBUztBQUFBLEVBQzdEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFZQSxNQUFNQyxVQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUc7QUFDM0IsV0FBTyxLQUFLLFFBQVEsZ0JBQWdCLFNBQVNBLE9BQU0sR0FBRyxJQUFJO0FBQUEsRUFDNUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLFVBQVU7QUFDUixXQUFPLEtBQUssUUFBUSxTQUFTLFdBQVc7QUFBQSxFQUMxQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBV0EsUUFBUSxNQUFNLEVBQUUsZ0JBQWdCLE9BQU8sbUJBQW1CLE1BQU0sSUFBSSxDQUFDLEdBQUc7QUFDdEUsV0FBTyxjQUFjLE1BQU0sU0FBUyxXQUFXO0FBQy9DLFFBQUksS0FBSyxPQUFPLEtBQUssSUFBSSxHQUFHO0FBQzFCLGFBQU87QUFBQSxJQUNULFdBQVcsQ0FBQyxLQUFLLFNBQVM7QUFDeEIsYUFBTyxVQUFTLFFBQVEsZ0JBQWdCLElBQUksQ0FBQztBQUFBLElBQy9DLE9BQU87QUFDTCxVQUFJLFFBQVEsS0FBSztBQUNqQixVQUFJLGlCQUFpQixrQkFBa0I7QUFDckMsY0FBTSxjQUFjLEtBQUssT0FBTyxLQUFLLEVBQUU7QUFDdkMsY0FBTSxRQUFRLEtBQUssU0FBUztBQUM1QixTQUFDLEtBQUssSUFBSSxRQUFRLE9BQU8sYUFBYSxJQUFJO0FBQUEsTUFDNUM7QUFDQSxhQUFPRCxPQUFNLE1BQU0sRUFBRSxJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQUEsSUFDeEM7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxZQUFZLEVBQUUsUUFBUSxpQkFBaUIsZUFBZSxJQUFJLENBQUMsR0FBRztBQUM1RCxVQUFNLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRSxRQUFRLGlCQUFpQixlQUFlLENBQUM7QUFDdEUsV0FBT0EsT0FBTSxNQUFNLEVBQUUsSUFBSSxDQUFDO0FBQUEsRUFDNUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLFVBQVUsUUFBUTtBQUNoQixXQUFPLEtBQUssWUFBWSxFQUFFLE9BQU8sQ0FBQztBQUFBLEVBQ3BDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWVBLElBQUksUUFBUTtBQUNWLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUUxQixVQUFNLGFBQWEsZ0JBQWdCLFFBQVEsMkJBQTJCO0FBQ3RFLFVBQU0sRUFBRSxvQkFBb0IsWUFBWSxJQUFJLG9CQUFvQixZQUFZLEtBQUssR0FBRztBQUVwRixVQUFNLG1CQUNGLENBQUMsWUFBWSxXQUFXLFFBQVEsS0FDaEMsQ0FBQyxZQUFZLFdBQVcsVUFBVSxLQUNsQyxDQUFDLFlBQVksV0FBVyxPQUFPLEdBQ2pDLGtCQUFrQixDQUFDLFlBQVksV0FBVyxPQUFPLEdBQ2pELHFCQUFxQixDQUFDLFlBQVksV0FBVyxJQUFJLEdBQ2pELG1CQUFtQixDQUFDLFlBQVksV0FBVyxLQUFLLEtBQUssQ0FBQyxZQUFZLFdBQVcsR0FBRyxHQUNoRixpQkFBaUIsc0JBQXNCLGtCQUN2QyxrQkFBa0IsV0FBVyxZQUFZLFdBQVc7QUFFdEQsU0FBSyxrQkFBa0Isb0JBQW9CLGlCQUFpQjtBQUMxRCxZQUFNLElBQUk7QUFBQSxRQUNSO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFFQSxRQUFJLG9CQUFvQixpQkFBaUI7QUFDdkMsWUFBTSxJQUFJLDhCQUE4Qix3Q0FBd0M7QUFBQSxJQUNsRjtBQUVBLFFBQUk7QUFDSixRQUFJLGtCQUFrQjtBQUNwQixjQUFRO0FBQUEsUUFDTixFQUFFLEdBQUcsZ0JBQWdCLEtBQUssR0FBRyxvQkFBb0IsV0FBVyxHQUFHLEdBQUcsV0FBVztBQUFBLFFBQzdFO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGLFdBQVcsQ0FBQyxZQUFZLFdBQVcsT0FBTyxHQUFHO0FBQzNDLGNBQVEsbUJBQW1CLEVBQUUsR0FBRyxtQkFBbUIsS0FBSyxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUM7QUFBQSxJQUM3RSxPQUFPO0FBQ0wsY0FBUSxFQUFFLEdBQUcsS0FBSyxTQUFTLEdBQUcsR0FBRyxXQUFXO0FBSTVDLFVBQUksWUFBWSxXQUFXLEdBQUcsR0FBRztBQUMvQixjQUFNLE1BQU0sS0FBSyxJQUFJLFlBQVksTUFBTSxNQUFNLE1BQU0sS0FBSyxHQUFHLE1BQU0sR0FBRztBQUFBLE1BQ3RFO0FBQUEsSUFDRjtBQUVBLFVBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxRQUFRLE9BQU8sS0FBSyxHQUFHLEtBQUssSUFBSTtBQUNoRCxXQUFPQSxPQUFNLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUFBLEVBQzlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWVBLEtBQUssVUFBVTtBQUNiLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUMxQixVQUFNLE1BQU0sU0FBUyxpQkFBaUIsUUFBUTtBQUM5QyxXQUFPQSxPQUFNLE1BQU0sV0FBVyxNQUFNLEdBQUcsQ0FBQztBQUFBLEVBQzFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxNQUFNLFVBQVU7QUFDZCxRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsVUFBTSxNQUFNLFNBQVMsaUJBQWlCLFFBQVEsRUFBRSxPQUFPO0FBQ3ZELFdBQU9BLE9BQU0sTUFBTSxXQUFXLE1BQU0sR0FBRyxDQUFDO0FBQUEsRUFDMUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWNBLFFBQVEsTUFBTSxFQUFFLGlCQUFpQixNQUFNLElBQUksQ0FBQyxHQUFHO0FBQzdDLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUUxQixVQUFNLElBQUksQ0FBQyxHQUNULGlCQUFpQixTQUFTLGNBQWMsSUFBSTtBQUM5QyxZQUFRLGdCQUFnQjtBQUFBLE1BQ3RCLEtBQUs7QUFDSCxVQUFFLFFBQVE7QUFBQTtBQUFBLE1BRVosS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNILFVBQUUsTUFBTTtBQUFBO0FBQUEsTUFFVixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0gsVUFBRSxPQUFPO0FBQUE7QUFBQSxNQUVYLEtBQUs7QUFDSCxVQUFFLFNBQVM7QUFBQTtBQUFBLE1BRWIsS0FBSztBQUNILFVBQUUsU0FBUztBQUFBO0FBQUEsTUFFYixLQUFLO0FBQ0gsVUFBRSxjQUFjO0FBQ2hCO0FBQUEsTUFDRixLQUFLO0FBQ0g7QUFBQSxJQUVKO0FBRUEsUUFBSSxtQkFBbUIsU0FBUztBQUM5QixVQUFJLGdCQUFnQjtBQUNsQixjQUFNLGNBQWMsS0FBSyxJQUFJLGVBQWU7QUFDNUMsY0FBTSxFQUFFLFFBQVEsSUFBSTtBQUNwQixZQUFJLFVBQVUsYUFBYTtBQUN6QixZQUFFLGFBQWEsS0FBSyxhQUFhO0FBQUEsUUFDbkM7QUFDQSxVQUFFLFVBQVU7QUFBQSxNQUNkLE9BQU87QUFDTCxVQUFFLFVBQVU7QUFBQSxNQUNkO0FBQUEsSUFDRjtBQUVBLFFBQUksbUJBQW1CLFlBQVk7QUFDakMsWUFBTSxJQUFJLEtBQUssS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUNsQyxRQUFFLFNBQVMsSUFBSSxLQUFLLElBQUk7QUFBQSxJQUMxQjtBQUVBLFdBQU8sS0FBSyxJQUFJLENBQUM7QUFBQSxFQUNuQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBY0EsTUFBTSxNQUFNLE1BQU07QUFDaEIsV0FBTyxLQUFLLFVBQ1IsS0FBSyxLQUFLLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQ3BCLFFBQVEsTUFBTSxJQUFJLEVBQ2xCLE1BQU0sQ0FBQyxJQUNWO0FBQUEsRUFDTjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFnQkEsU0FBUyxLQUFLLE9BQU8sQ0FBQyxHQUFHO0FBQ3ZCLFdBQU8sS0FBSyxVQUNSLFVBQVUsT0FBTyxLQUFLLElBQUksY0FBYyxJQUFJLENBQUMsRUFBRSx5QkFBeUIsTUFBTSxHQUFHLElBQ2pGRDtBQUFBLEVBQ047QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBcUJBLGVBQWUsYUFBcUIsWUFBWSxPQUFPLENBQUMsR0FBRztBQUN6RCxXQUFPLEtBQUssVUFDUixVQUFVLE9BQU8sS0FBSyxJQUFJLE1BQU0sSUFBSSxHQUFHLFVBQVUsRUFBRSxlQUFlLElBQUksSUFDdEVBO0FBQUEsRUFDTjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFlQSxjQUFjLE9BQU8sQ0FBQyxHQUFHO0FBQ3ZCLFdBQU8sS0FBSyxVQUNSLFVBQVUsT0FBTyxLQUFLLElBQUksTUFBTSxJQUFJLEdBQUcsSUFBSSxFQUFFLG9CQUFvQixJQUFJLElBQ3JFLENBQUM7QUFBQSxFQUNQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBZ0JBLE1BQU07QUFBQSxJQUNKLFFBQUFHLFVBQVM7QUFBQSxJQUNULGtCQUFrQjtBQUFBLElBQ2xCLHVCQUF1QjtBQUFBLElBQ3ZCLGdCQUFnQjtBQUFBLElBQ2hCLGVBQWU7QUFBQSxFQUNqQixJQUFJLENBQUMsR0FBRztBQUNOLFFBQUksQ0FBQyxLQUFLLFNBQVM7QUFDakIsYUFBTztBQUFBLElBQ1Q7QUFFQSxVQUFNLE1BQU1BLFlBQVc7QUFFdkIsUUFBSSxJQUFJLFVBQVUsTUFBTSxHQUFHO0FBQzNCLFNBQUs7QUFDTCxTQUFLLFVBQVUsTUFBTSxLQUFLLGlCQUFpQixzQkFBc0IsZUFBZSxZQUFZO0FBQzVGLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBVUEsVUFBVSxFQUFFLFFBQUFBLFVBQVMsV0FBVyxJQUFJLENBQUMsR0FBRztBQUN0QyxRQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCLGFBQU87QUFBQSxJQUNUO0FBRUEsV0FBTyxVQUFVLE1BQU1BLFlBQVcsVUFBVTtBQUFBLEVBQzlDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsZ0JBQWdCO0FBQ2QsV0FBTyxhQUFhLE1BQU0sY0FBYztBQUFBLEVBQzFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFpQkEsVUFBVTtBQUFBLElBQ1IsdUJBQXVCO0FBQUEsSUFDdkIsa0JBQWtCO0FBQUEsSUFDbEIsZ0JBQWdCO0FBQUEsSUFDaEIsZ0JBQWdCO0FBQUEsSUFDaEIsZUFBZTtBQUFBLElBQ2YsUUFBQUEsVUFBUztBQUFBLEVBQ1gsSUFBSSxDQUFDLEdBQUc7QUFDTixRQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCLGFBQU87QUFBQSxJQUNUO0FBRUEsUUFBSSxJQUFJLGdCQUFnQixNQUFNO0FBQzlCLFdBQ0UsSUFDQTtBQUFBLE1BQ0U7QUFBQSxNQUNBQSxZQUFXO0FBQUEsTUFDWDtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFBQSxFQUVKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxZQUFZO0FBQ1YsV0FBTyxhQUFhLE1BQU0saUNBQWlDLEtBQUs7QUFBQSxFQUNsRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVVBLFNBQVM7QUFDUCxXQUFPLGFBQWEsS0FBSyxNQUFNLEdBQUcsaUNBQWlDO0FBQUEsRUFDckU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxZQUFZO0FBQ1YsUUFBSSxDQUFDLEtBQUssU0FBUztBQUNqQixhQUFPO0FBQUEsSUFDVDtBQUNBLFdBQU8sVUFBVSxNQUFNLElBQUk7QUFBQSxFQUM3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBY0EsVUFBVSxFQUFFLGdCQUFnQixNQUFNLGNBQWMsT0FBTyxxQkFBcUIsS0FBSyxJQUFJLENBQUMsR0FBRztBQUN2RixRQUFJLE1BQU07QUFFVixRQUFJLGVBQWUsZUFBZTtBQUNoQyxVQUFJLG9CQUFvQjtBQUN0QixlQUFPO0FBQUEsTUFDVDtBQUNBLFVBQUksYUFBYTtBQUNmLGVBQU87QUFBQSxNQUNULFdBQVcsZUFBZTtBQUN4QixlQUFPO0FBQUEsTUFDVDtBQUFBLElBQ0Y7QUFFQSxXQUFPLGFBQWEsTUFBTSxLQUFLLElBQUk7QUFBQSxFQUNyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBY0EsTUFBTSxPQUFPLENBQUMsR0FBRztBQUNmLFFBQUksQ0FBQyxLQUFLLFNBQVM7QUFDakIsYUFBTztBQUFBLElBQ1Q7QUFFQSxXQUFPLEdBQUcsS0FBSyxVQUFVLENBQUMsSUFBSSxLQUFLLFVBQVUsSUFBSSxDQUFDO0FBQUEsRUFDcEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVztBQUNULFdBQU8sS0FBSyxVQUFVLEtBQUssTUFBTSxJQUFJSDtBQUFBLEVBQ3ZDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLENBQUMsT0FBTyxJQUFJLDRCQUE0QixDQUFDLElBQUk7QUFDM0MsUUFBSSxLQUFLLFNBQVM7QUFDaEIsYUFBTyxrQkFBa0IsS0FBSyxNQUFNLENBQUMsV0FBVyxLQUFLLEtBQUssSUFBSSxhQUFhLEtBQUssTUFBTTtBQUFBLElBQ3hGLE9BQU87QUFDTCxhQUFPLCtCQUErQixLQUFLLGFBQWE7QUFBQSxJQUMxRDtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsVUFBVTtBQUNSLFdBQU8sS0FBSyxTQUFTO0FBQUEsRUFDdkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVztBQUNULFdBQU8sS0FBSyxVQUFVLEtBQUssS0FBSztBQUFBLEVBQ2xDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFlBQVk7QUFDVixXQUFPLEtBQUssVUFBVSxLQUFLLEtBQUssTUFBTztBQUFBLEVBQ3pDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLGdCQUFnQjtBQUNkLFdBQU8sS0FBSyxVQUFVLEtBQUssTUFBTSxLQUFLLEtBQUssR0FBSSxJQUFJO0FBQUEsRUFDckQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsU0FBUztBQUNQLFdBQU8sS0FBSyxNQUFNO0FBQUEsRUFDcEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsU0FBUztBQUNQLFdBQU8sS0FBSyxTQUFTO0FBQUEsRUFDdkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBU0EsU0FBUyxPQUFPLENBQUMsR0FBRztBQUNsQixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU8sQ0FBQztBQUUzQixVQUFNLE9BQU8sRUFBRSxHQUFHLEtBQUssRUFBRTtBQUV6QixRQUFJLEtBQUssZUFBZTtBQUN0QixXQUFLLGlCQUFpQixLQUFLO0FBQzNCLFdBQUssa0JBQWtCLEtBQUssSUFBSTtBQUNoQyxXQUFLLFNBQVMsS0FBSyxJQUFJO0FBQUEsSUFDekI7QUFDQSxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXO0FBQ1QsV0FBTyxJQUFJLEtBQUssS0FBSyxVQUFVLEtBQUssS0FBSyxHQUFHO0FBQUEsRUFDOUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBbUJBLEtBQUssZUFBZSxPQUFPLGdCQUFnQixPQUFPLENBQUMsR0FBRztBQUNwRCxRQUFJLENBQUMsS0FBSyxXQUFXLENBQUMsY0FBYyxTQUFTO0FBQzNDLGFBQU8sU0FBUyxRQUFRLHdDQUF3QztBQUFBLElBQ2xFO0FBRUEsVUFBTSxVQUFVLEVBQUUsUUFBUSxLQUFLLFFBQVEsaUJBQWlCLEtBQUssaUJBQWlCLEdBQUcsS0FBSztBQUV0RixVQUFNLFFBQVEsV0FBVyxJQUFJLEVBQUUsSUFBSSxTQUFTLGFBQWEsR0FDdkQsZUFBZSxjQUFjLFFBQVEsSUFBSSxLQUFLLFFBQVEsR0FDdEQsVUFBVSxlQUFlLE9BQU8sZUFDaEMsUUFBUSxlQUFlLGdCQUFnQixNQUN2QyxTQUFTLGFBQUssU0FBUyxPQUFPLE9BQU8sT0FBTztBQUU5QyxXQUFPLGVBQWUsT0FBTyxPQUFPLElBQUk7QUFBQSxFQUMxQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVVBLFFBQVEsT0FBTyxnQkFBZ0IsT0FBTyxDQUFDLEdBQUc7QUFDeEMsV0FBTyxLQUFLLEtBQUssVUFBUyxJQUFJLEdBQUcsTUFBTSxJQUFJO0FBQUEsRUFDN0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxNQUFNLGVBQWU7QUFDbkIsV0FBTyxLQUFLLFVBQVUsU0FBUyxjQUFjLE1BQU0sYUFBYSxJQUFJO0FBQUEsRUFDdEU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFhQSxRQUFRLGVBQWUsTUFBTSxNQUFNO0FBQ2pDLFFBQUksQ0FBQyxLQUFLLFFBQVMsUUFBTztBQUUxQixVQUFNLFVBQVUsY0FBYyxRQUFRO0FBQ3RDLFVBQU0saUJBQWlCLEtBQUssUUFBUSxjQUFjLE1BQU0sRUFBRSxlQUFlLEtBQUssQ0FBQztBQUMvRSxXQUNFLGVBQWUsUUFBUSxNQUFNLElBQUksS0FBSyxXQUFXLFdBQVcsZUFBZSxNQUFNLE1BQU0sSUFBSTtBQUFBLEVBRS9GO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLE9BQU8sT0FBTztBQUNaLFdBQ0UsS0FBSyxXQUNMLE1BQU0sV0FDTixLQUFLLFFBQVEsTUFBTSxNQUFNLFFBQVEsS0FDakMsS0FBSyxLQUFLLE9BQU8sTUFBTSxJQUFJLEtBQzNCLEtBQUssSUFBSSxPQUFPLE1BQU0sR0FBRztBQUFBLEVBRTdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFvQkEsV0FBVyxVQUFVLENBQUMsR0FBRztBQUN2QixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFDMUIsVUFBTSxPQUFPLFFBQVEsUUFBUSxVQUFTLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxLQUFLLEtBQUssQ0FBQyxHQUN0RSxVQUFVLFFBQVEsVUFBVyxPQUFPLE9BQU8sQ0FBQyxRQUFRLFVBQVUsUUFBUSxVQUFXO0FBQ25GLFFBQUksUUFBUSxDQUFDLFNBQVMsVUFBVSxRQUFRLFNBQVMsV0FBVyxTQUFTO0FBQ3JFLFFBQUksT0FBTyxRQUFRO0FBQ25CLFFBQUksTUFBTSxRQUFRLFFBQVEsSUFBSSxHQUFHO0FBQy9CLGNBQVEsUUFBUTtBQUNoQixhQUFPO0FBQUEsSUFDVDtBQUNBLFdBQU8sYUFBYSxNQUFNLEtBQUssS0FBSyxPQUFPLEdBQUc7QUFBQSxNQUM1QyxHQUFHO0FBQUEsTUFDSCxTQUFTO0FBQUEsTUFDVDtBQUFBLE1BQ0E7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWVBLG1CQUFtQixVQUFVLENBQUMsR0FBRztBQUMvQixRQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFFMUIsV0FBTyxhQUFhLFFBQVEsUUFBUSxVQUFTLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxLQUFLLEtBQUssQ0FBQyxHQUFHLE1BQU07QUFBQSxNQUN0RixHQUFHO0FBQUEsTUFDSCxTQUFTO0FBQUEsTUFDVCxPQUFPLENBQUMsU0FBUyxVQUFVLE1BQU07QUFBQSxNQUNqQyxXQUFXO0FBQUEsSUFDYixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sT0FBTyxXQUFXO0FBQ3ZCLFFBQUksQ0FBQyxVQUFVLE1BQU0sVUFBUyxVQUFVLEdBQUc7QUFDekMsWUFBTSxJQUFJLHFCQUFxQix5Q0FBeUM7QUFBQSxJQUMxRTtBQUNBLFdBQU8sT0FBTyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsR0FBRyxLQUFLLEdBQUc7QUFBQSxFQUN2RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sT0FBTyxXQUFXO0FBQ3ZCLFFBQUksQ0FBQyxVQUFVLE1BQU0sVUFBUyxVQUFVLEdBQUc7QUFDekMsWUFBTSxJQUFJLHFCQUFxQix5Q0FBeUM7QUFBQSxJQUMxRTtBQUNBLFdBQU8sT0FBTyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsR0FBRyxLQUFLLEdBQUc7QUFBQSxFQUN2RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdBLE9BQU8sa0JBQWtCLE1BQU0sS0FBSyxVQUFVLENBQUMsR0FBRztBQUNoRCxVQUFNLEVBQUUsU0FBUyxNQUFNLGtCQUFrQixLQUFLLElBQUksU0FDaEQsY0FBYyxPQUFPLFNBQVM7QUFBQSxNQUM1QjtBQUFBLE1BQ0E7QUFBQSxNQUNBLGFBQWE7QUFBQSxJQUNmLENBQUM7QUFDSCxXQUFPLGtCQUFrQixhQUFhLE1BQU0sR0FBRztBQUFBLEVBQ2pEO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxPQUFPLGtCQUFrQixNQUFNLEtBQUssVUFBVSxDQUFDLEdBQUc7QUFDaEQsV0FBTyxVQUFTLGtCQUFrQixNQUFNLEtBQUssT0FBTztBQUFBLEVBQ3REO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFjQSxPQUFPLGtCQUFrQixLQUFLLFVBQVUsQ0FBQyxHQUFHO0FBQzFDLFVBQU0sRUFBRSxTQUFTLE1BQU0sa0JBQWtCLEtBQUssSUFBSSxTQUNoRCxjQUFjLE9BQU8sU0FBUztBQUFBLE1BQzVCO0FBQUEsTUFDQTtBQUFBLE1BQ0EsYUFBYTtBQUFBLElBQ2YsQ0FBQztBQUNILFdBQU8sSUFBSSxZQUFZLGFBQWEsR0FBRztBQUFBLEVBQ3pDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVlBLE9BQU8saUJBQWlCLE1BQU0sY0FBYyxPQUFPLENBQUMsR0FBRztBQUNyRCxRQUFJLFlBQVksSUFBSSxLQUFLLFlBQVksWUFBWSxHQUFHO0FBQ2xELFlBQU0sSUFBSTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUNBLFVBQU0sRUFBRSxTQUFTLE1BQU0sa0JBQWtCLEtBQUssSUFBSSxNQUNoRCxjQUFjLE9BQU8sU0FBUztBQUFBLE1BQzVCO0FBQUEsTUFDQTtBQUFBLE1BQ0EsYUFBYTtBQUFBLElBQ2YsQ0FBQztBQUVILFFBQUksQ0FBQyxZQUFZLE9BQU8sYUFBYSxNQUFNLEdBQUc7QUFDNUMsWUFBTSxJQUFJO0FBQUEsUUFDUiw0Q0FBNEMsV0FBVywyQ0FDWixhQUFhLE1BQU07QUFBQSxNQUNoRTtBQUFBLElBQ0Y7QUFFQSxVQUFNLEVBQUUsUUFBUSxNQUFNLGdCQUFnQixjQUFjLElBQUksYUFBYSxrQkFBa0IsSUFBSTtBQUUzRixRQUFJLGVBQWU7QUFDakIsYUFBTyxVQUFTLFFBQVEsYUFBYTtBQUFBLElBQ3ZDLE9BQU87QUFDTCxhQUFPO0FBQUEsUUFDTDtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQSxVQUFVLGFBQWEsTUFBTTtBQUFBLFFBQzdCO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLFdBQVcsYUFBYTtBQUN0QixXQUFlO0FBQUEsRUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxXQUFXO0FBQ3BCLFdBQWU7QUFBQSxFQUNqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLHdCQUF3QjtBQUNqQyxXQUFlO0FBQUEsRUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxZQUFZO0FBQ3JCLFdBQWU7QUFBQSxFQUNqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLFlBQVk7QUFDckIsV0FBZTtBQUFBLEVBQ2pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsY0FBYztBQUN2QixXQUFlO0FBQUEsRUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxvQkFBb0I7QUFDN0IsV0FBZTtBQUFBLEVBQ2pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcseUJBQXlCO0FBQ2xDLFdBQWU7QUFBQSxFQUNqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLHdCQUF3QjtBQUNqQyxXQUFlO0FBQUEsRUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxpQkFBaUI7QUFDMUIsV0FBZTtBQUFBLEVBQ2pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsdUJBQXVCO0FBQ2hDLFdBQWU7QUFBQSxFQUNqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLDRCQUE0QjtBQUNyQyxXQUFlO0FBQUEsRUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVywyQkFBMkI7QUFDcEMsV0FBZTtBQUFBLEVBQ2pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsaUJBQWlCO0FBQzFCLFdBQWU7QUFBQSxFQUNqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLDhCQUE4QjtBQUN2QyxXQUFlO0FBQUEsRUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxlQUFlO0FBQ3hCLFdBQWU7QUFBQSxFQUNqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLDRCQUE0QjtBQUNyQyxXQUFlO0FBQUEsRUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyw0QkFBNEI7QUFDckMsV0FBZTtBQUFBLEVBQ2pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsZ0JBQWdCO0FBQ3pCLFdBQWU7QUFBQSxFQUNqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLDZCQUE2QjtBQUN0QyxXQUFlO0FBQUEsRUFDakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxnQkFBZ0I7QUFDekIsV0FBZTtBQUFBLEVBQ2pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsNkJBQTZCO0FBQ3RDLFdBQWU7QUFBQSxFQUNqQjtBQUNGO0FBS08sU0FBUyxpQkFBaUIsYUFBYTtBQUM1QyxNQUFJLFNBQVMsV0FBVyxXQUFXLEdBQUc7QUFDcEMsV0FBTztBQUFBLEVBQ1QsV0FBVyxlQUFlLFlBQVksV0FBVyxTQUFTLFlBQVksUUFBUSxDQUFDLEdBQUc7QUFDaEYsV0FBTyxTQUFTLFdBQVcsV0FBVztBQUFBLEVBQ3hDLFdBQVcsZUFBZSxPQUFPLGdCQUFnQixVQUFVO0FBQ3pELFdBQU8sU0FBUyxXQUFXLFdBQVc7QUFBQSxFQUN4QyxPQUFPO0FBQ0wsVUFBTSxJQUFJO0FBQUEsTUFDUiw4QkFBOEIsV0FBVyxhQUFhLE9BQU8sV0FBVztBQUFBLElBQzFFO0FBQUEsRUFDRjtBQUNGOzs7QUM5K0VPLElBQUssaUJBQUwsa0JBQUtLLG9CQUFMO0FBQ0wsRUFBQUEsZ0JBQUEsVUFBTztBQUNQLEVBQUFBLGdCQUFBLGdCQUFhO0FBQ2IsRUFBQUEsZ0JBQUEsVUFBTztBQUNQLEVBQUFBLGdCQUFBLGVBQVk7QUFDWixFQUFBQSxnQkFBQSxhQUFVO0FBTEEsU0FBQUE7QUFBQSxHQUFBO0FBOEJMLElBQUssbUJBQUwsa0JBQUtDLHNCQUFMO0FBQ0wsRUFBQUEsa0JBQUEsWUFBUztBQUNULEVBQUFBLGtCQUFBLFNBQU07QUFDTixFQUFBQSxrQkFBQSxZQUFTO0FBQ1QsRUFBQUEsa0JBQUEsWUFBUztBQUNULEVBQUFBLGtCQUFBLFVBQU87QUFDUCxFQUFBQSxrQkFBQSxhQUFVO0FBTkEsU0FBQUE7QUFBQSxHQUFBO0FBU0wsSUFBSyxlQUFMLGtCQUFLQyxrQkFBTDtBQUNMLEVBQUFBLGNBQUEsYUFBVTtBQUNWLEVBQUFBLGNBQUEsV0FBUTtBQUNSLEVBQUFBLGNBQUEsZUFBWTtBQUNaLEVBQUFBLGNBQUEsU0FBTTtBQUNOLEVBQUFBLGNBQUEsVUFBTztBQUNQLEVBQUFBLGNBQUEsZUFBWTtBQU5GLFNBQUFBO0FBQUEsR0FBQTs7O0F4QnpETCxJQUFlLFdBQWYsY0FBZ0MseUJBQVM7QUFBQSxFQUF6QztBQUFBO0FBQ0wsd0JBQVEsV0FBa0I7QUFDMUIsd0JBQVEsT0FBYztBQUV0QjtBQUFBO0FBQUEsd0JBQVEsaUJBQTRELENBQUM7QUFDckUsd0JBQVEscUJBQW9CO0FBQUE7QUFBQTtBQUFBLEVBRTVCLE1BQWdCLFlBQVksYUFBNEM7QUFFdEUsV0FBTyxNQUFNLFlBQVksWUFBWTtBQUFBLEVBQ3ZDO0FBQUEsRUFFQSxNQUFnQixjQUFjLGFBQTRDO0FBQ3hFLFdBQU8sTUFBTSxZQUFZLGNBQWM7QUFBQSxFQUN6QztBQUFBLEVBRVUsbUJBQW1CLE9BQTRDO0FBQ3ZFLFVBQU0sY0FBMEMsQ0FBQztBQUVqRCxVQUFNLFFBQVEsVUFBUTtBQUNwQixVQUFJLENBQUMsS0FBSyxTQUFVO0FBR3BCLFlBQU0sWUFBWSxLQUFLLFNBQVMsTUFBTSxHQUFHO0FBR3pDLFVBQUksVUFBVSxXQUFXLEdBQUc7QUFDMUIsWUFBSSxDQUFDLFlBQVksTUFBTSxHQUFHO0FBQ3hCLHNCQUFZLE1BQU0sSUFBSTtBQUFBLFlBQ3BCLE1BQU07QUFBQSxZQUNOLFVBQVU7QUFBQSxZQUNWLE9BQU8sQ0FBQztBQUFBLFlBQ1IsWUFBWSxDQUFDO0FBQUEsVUFDZjtBQUFBLFFBQ0Y7QUFDQSxvQkFBWSxNQUFNLEVBQUUsTUFBTSxLQUFLLElBQUk7QUFDbkM7QUFBQSxNQUNGO0FBR0EsVUFBSSxlQUFlO0FBQ25CLFVBQUksY0FBYztBQUdsQixlQUFTLElBQUksR0FBRyxJQUFJLFVBQVUsU0FBUyxHQUFHLEtBQUs7QUFDN0MsY0FBTSxhQUFhLFVBQVUsQ0FBQztBQUM5QixzQkFBYyxjQUFjLEdBQUcsV0FBVyxJQUFJLFVBQVUsS0FBSztBQUc3RCxZQUFJLE1BQU0sR0FBRztBQUNYLGNBQUksQ0FBQyxhQUFhLFVBQVUsR0FBRztBQUM3Qix5QkFBYSxVQUFVLElBQUk7QUFBQSxjQUN6QixNQUFNO0FBQUEsY0FDTixVQUFVO0FBQUEsY0FDVixPQUFPLENBQUM7QUFBQSxjQUNSLFlBQVksQ0FBQztBQUFBLFlBQ2Y7QUFBQSxVQUNGO0FBRUEsY0FBSSxNQUFNLFVBQVUsU0FBUyxHQUFHO0FBQzlCLHlCQUFhLFVBQVUsRUFBRSxNQUFNLEtBQUssSUFBSTtBQUFBLFVBQzFDO0FBQ0EseUJBQWUsYUFBYSxVQUFVLEVBQUU7QUFBQSxRQUMxQyxPQUVLO0FBQ0gsY0FBSSxDQUFDLGFBQWEsVUFBVSxHQUFHO0FBQzdCLHlCQUFhLFVBQVUsSUFBSTtBQUFBLGNBQ3pCLE1BQU07QUFBQSxjQUNOLFVBQVU7QUFBQSxjQUNWLE9BQU8sQ0FBQztBQUFBLGNBQ1IsWUFBWSxDQUFDO0FBQUEsWUFDZjtBQUFBLFVBQ0Y7QUFFQSxjQUFJLE1BQU0sVUFBVSxTQUFTLEdBQUc7QUFDOUIseUJBQWEsVUFBVSxFQUFFLE1BQU0sS0FBSyxJQUFJO0FBQUEsVUFDMUM7QUFDQSx5QkFBZSxhQUFhLFVBQVUsRUFBRTtBQUFBLFFBQzFDO0FBQUEsTUFDRjtBQUFBLElBQ0YsQ0FBQztBQUVELFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLVSxnQkFBZ0IsV0FBNkI7QUFDckQsUUFBSSxDQUFDLFVBQVcsUUFBTztBQUV2QixRQUFJO0FBQ0YsVUFBSTtBQUdKLFVBQUksT0FBTyxjQUFjLFVBQVU7QUFFakMsZUFBTyxTQUFTLFFBQVEsU0FBUyxFQUFFLFFBQVEsS0FBSyxFQUFFLFNBQVM7QUFBQSxNQUM3RDtBQUdBLFVBQUkscUJBQXFCLE1BQU07QUFDN0IsZUFBTyxTQUFTLFdBQVcsU0FBUyxFQUFFLFFBQVEsS0FBSyxFQUFFLFNBQVM7QUFBQSxNQUNoRTtBQUdBLFVBQUksYUFBYSxPQUFPLFVBQVUsYUFBYSxZQUFZO0FBQ3pELGVBQU8sU0FBUyxXQUFXLFVBQVUsU0FBUyxDQUFDLEVBQUUsUUFBUSxLQUFLLEVBQUUsU0FBUztBQUFBLE1BQzNFO0FBR0EsYUFBTyxJQUFJLEtBQUssU0FBUztBQUN6QixhQUFPLFNBQVMsV0FBVyxJQUFJLEVBQUUsUUFBUSxLQUFLLEVBQUUsU0FBUztBQUFBLElBQzNELFNBQVMsT0FBTztBQUNkLGNBQVEsTUFBTSw2QkFBNkIsT0FBTyxTQUFTO0FBQzNELGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRjtBQUFBLEVBRVUsMEJBQTBCLE1BQWlCO0FBRW5ELFFBQUksS0FBSyxrQkFBbUI7QUFHNUIsU0FBSyxzQkFBc0IsSUFBSTtBQUcvQixTQUFLLDRCQUE0QixJQUFJO0FBRXJDLFNBQUssb0JBQW9CO0FBQUEsRUFDM0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTVUsc0JBQXNCLE1BQWlCO0FBRy9DLHNCQUFBQyxRQUFXLGVBQWUsS0FBSyxDQUFDLFFBQWdCLEtBQUssRUFBRSxHQUFHLENBQUM7QUFHM0Qsc0JBQUFBLFFBQVcsZUFBZSxjQUFjLFNBQVMsTUFBTTtBQUNyRCxVQUFJLENBQUMsS0FBTSxRQUFPO0FBR2xCLFVBQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsZUFBTyxTQUFTLFFBQVEsSUFBSSxFQUFFLFNBQVMsYUFBYTtBQUFBLE1BQ3REO0FBR0EsVUFBSSxLQUFLLGlCQUFpQjtBQUN4QixlQUFPLEtBQUssU0FBUyxhQUFhO0FBQUEsTUFDcEM7QUFHQSxVQUFJLGdCQUFnQixNQUFNO0FBQ3hCLGVBQU8sU0FBUyxXQUFXLElBQUksRUFBRSxTQUFTLGFBQWE7QUFBQSxNQUN6RDtBQUdBLGFBQU8sU0FBUyxRQUFRLEtBQUssU0FBUyxDQUFDLEVBQUUsU0FBUyxhQUFhO0FBQUEsSUFDakUsQ0FBQztBQUdELHNCQUFBQSxRQUFXLGVBQWUsZ0JBQWdCLFNBQVMsVUFBVTtBQUMzRCxVQUFJLENBQUMsU0FBVSxRQUFPO0FBR3RCLFVBQUksT0FBTyxPQUFPLGdCQUFnQixFQUFFLFNBQVMsUUFBUSxHQUFHO0FBQ3RELGVBQU87QUFBQSxNQUNUO0FBR0EsWUFBTSxvQkFBb0IsU0FBUyxjQUFjLEtBQUs7QUFDdEQsaUJBQVcsT0FBTyxrQkFBa0I7QUFDbEMsWUFBSSxJQUFJLFlBQVksTUFBTSxtQkFBbUI7QUFDM0MsaUJBQU8saUJBQWlCLEdBQUc7QUFBQSxRQUM3QjtBQUFBLE1BQ0Y7QUFHQSxhQUFPO0FBQUEsSUFDVCxDQUFDO0FBR0Qsc0JBQUFBLFFBQVcsZUFBZSxZQUFZLFNBQVMsR0FBRyxHQUFHO0FBQ25ELGFBQU8sSUFBSTtBQUFBLElBQ2IsQ0FBQztBQUdELHNCQUFBQSxRQUFXLGVBQWUsT0FBTyxTQUFTLEdBQUcsR0FBRztBQUM5QyxhQUFPLElBQUk7QUFBQSxJQUNiLENBQUM7QUFBQSxFQUVIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1VLDRCQUE0QixNQUFpQjtBQUFBLEVBR3ZEO0FBQUEsRUFFQSxNQUFnQixhQUFhLFdBQXdCLE1BQTBCO0FBSTdFLFFBQUksaUJBQWlCLEtBQUssY0FBYyxRQUFRO0FBRWhELFFBQUksQ0FBQyxnQkFBZ0I7QUFDbkIsWUFBTSxhQUFhLEtBQUssSUFBSSxNQUFNLFFBQVEsZ0JBQWdCLEtBQUssVUFBVSxZQUFZO0FBQ3JGLFlBQU0saUJBQWlCLE1BQU0sTUFBTSxVQUFVO0FBRTdDLFVBQUksQ0FBQyxlQUFlLElBQUk7QUFDdEIsZ0JBQVEsTUFBTSxnREFBZ0QsZUFBZSxVQUFVO0FBQ3ZGO0FBQUEsTUFDRjtBQUVBLFlBQU0sZUFBZSxNQUFNLGVBQWUsS0FBSztBQUMvQyx1QkFBaUIsa0JBQUFBLFFBQVcsUUFBUSxZQUFZO0FBQ2hELFdBQUssY0FBYyxRQUFRLElBQUk7QUFBQSxJQUNqQztBQUdBLFVBQU0sYUFBYSxlQUFlLENBQUMsQ0FBQztBQUNwQyxjQUFVLFlBQVk7QUFHdEIsVUFBTSxpQkFBaUIsS0FBSyxZQUFZO0FBQ3hDLFVBQU0sT0FBTyxVQUFVLGlCQUFpQixRQUFRO0FBRWhELFNBQUssUUFBUSxDQUFDLFFBQVE7QUFDcEIsWUFBTSxRQUFRLElBQUksYUFBYSxJQUFJO0FBR25DLFlBQU0saUJBQWlCLGVBQWUsV0FBVyxXQUFXLEtBQUssVUFBVTtBQUMzRSxZQUFNLGVBQWUsVUFBVSxHQUFHLGNBQWM7QUFFaEQsVUFBSSxnQkFBZ0IsZ0JBQWdCO0FBQ2xDLFlBQUksVUFBVSxJQUFJLFFBQVE7QUFBQSxNQUM1QixPQUFPO0FBQ0wsWUFBSSxVQUFVLE9BQU8sUUFBUTtBQUFBLE1BQy9CO0FBQUEsSUFDRixDQUFDO0FBR0QsVUFBTSxnQkFBZ0IsVUFBVSxpQkFBaUIsa0JBQWtCO0FBQ25FLGtCQUFjLFFBQVEsQ0FBQyxvQkFBb0I7QUFDekMsWUFBTSxRQUFRLGdCQUFnQixhQUFhLElBQUk7QUFFL0MsWUFBTSxzQkFBc0IsZUFBZSxXQUFXLFdBQVcsS0FBSyxVQUFVO0FBQ2hGLFlBQU0sZUFBZSxVQUFVLEdBQUcsY0FBYztBQUVoRCxVQUFJLGdCQUFnQixxQkFBcUI7QUFDdkMsd0JBQWdCLFVBQVUsSUFBSSxRQUFRO0FBQUEsTUFDeEMsT0FBTztBQUNMLHdCQUFnQixVQUFVLE9BQU8sUUFBUTtBQUFBLE1BQzNDO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRUEsTUFBZ0IsZUFBZSxXQUF3QixjQUFzQixNQUEwQjtBQUNyRyxRQUFJO0FBR0YsVUFBSSxXQUFXLEtBQUssY0FBYyxZQUFZO0FBRzlDLFVBQUksQ0FBQyxVQUFVO0FBQ2IsY0FBTSxXQUFXLEtBQUssSUFBSSxNQUFNLFFBQVEsZ0JBQWdCLEtBQUssVUFBVSxlQUFlLEtBQUssR0FBRztBQUM5RixjQUFNLFdBQVcsTUFBTSxNQUFNLFFBQVE7QUFFckMsWUFBSSxDQUFDLFNBQVMsSUFBSTtBQUNoQixnQkFBTSxJQUFJLE1BQU0saUNBQWlDLFNBQVMsVUFBVSxFQUFFO0FBQUEsUUFDeEU7QUFFQSxjQUFNLGlCQUFpQixNQUFNLFNBQVMsS0FBSztBQUMzQyxtQkFBVyxrQkFBQUEsUUFBVyxRQUFRLGNBQWM7QUFHNUMsYUFBSyxjQUFjLFlBQVksSUFBSTtBQUFBLE1BQ3JDO0FBR0EsWUFBTSxPQUFPLFNBQVMsSUFBSTtBQUcxQixnQkFBVSxhQUFhO0FBQUEsSUFFekIsU0FBUyxPQUFPO0FBQ2QsY0FBUSxNQUFNLCtCQUErQixZQUFZLEtBQUssS0FBSztBQUNuRSxnQkFBVSxhQUFhLG9EQUFvRCxNQUFNLE9BQU87QUFBQSxJQUMxRjtBQUFBLEVBQ0Y7QUFBQSxFQUVVLGdCQUFnQixXQUF3QixRQUFhLE1BQWlCO0FBRzlFLFVBQU0saUJBQWlCLEtBQUssWUFBWTtBQUN4QyxVQUFNLE9BQU87QUFBQSxNQUNYLEVBQUUsSUFBSSxxQkFBcUIsTUFBTSxnQkFBZ0I7QUFBQSxNQUNqRCxFQUFFLElBQUksaUJBQWlCLE1BQU0sWUFBWTtBQUFBLE1BQ3pDLEVBQUUsSUFBSSxrQkFBa0IsTUFBTSxhQUFhO0FBQUEsTUFDM0MsRUFBRSxJQUFJLHFCQUFxQixNQUFNLHNCQUFzQjtBQUFBLE1BQ3ZELEVBQUUsSUFBSSxxQkFBcUIsTUFBTSxnQkFBZ0I7QUFBQSxNQUNqRCxFQUFFLElBQUksa0JBQWtCLE1BQU0sYUFBYTtBQUFBLElBQzdDO0FBRUEsU0FBSyxRQUFRLENBQUMsUUFBUTtBQUVwQixVQUFJLElBQUksU0FBUyxnQkFBZ0I7QUFDL0I7QUFBQSxNQUNGO0FBRUEsWUFBTSxVQUFVLFVBQVUsY0FBYyxJQUFJLElBQUksRUFBRSxFQUFFO0FBQ3BELGVBQVMsaUJBQWlCLFNBQVMsTUFBTTtBQUN2QyxlQUFPLFlBQVksYUFBYSxJQUFJLE1BQU0sSUFBSTtBQUFBLE1BQ2hELENBQUM7QUFBQSxJQUNILENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQSxFQUdVLHlCQUF5QixXQUE4QjtBQUMvRCxVQUFNLGdCQUFnQixVQUFVLGlCQUFpQixjQUFjO0FBRS9ELGtCQUFjLFFBQVEsWUFBVTtBQUM5QixhQUFPLGlCQUFpQixTQUFTLE1BQU07QUFDckMsY0FBTSxjQUFjLE9BQU8sUUFBUSxlQUFlO0FBQ2xELHFCQUFhLFVBQVUsT0FBTyxXQUFXO0FBR3pDLFlBQUksYUFBYTtBQUNmLGdCQUFNLGFBQWEsWUFBWSxhQUFhLGtCQUFrQjtBQUM5RCxjQUFJLFlBQVk7QUFDZCxrQkFBTSxjQUFjLFlBQVksVUFBVSxTQUFTLFdBQVc7QUFDOUQseUJBQWEsUUFBUSxVQUFVLFVBQVUsY0FBYyxZQUFZLFNBQVMsQ0FBQztBQUFBLFVBQy9FO0FBQUEsUUFDRjtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUdELFVBQU0sZUFBZSxVQUFVLGlCQUFpQixlQUFlO0FBQy9ELGlCQUFhLFFBQVEsV0FBUztBQUM1QixZQUFNLGFBQWEsTUFBTSxhQUFhLGtCQUFrQjtBQUN4RCxVQUFJLFlBQVk7QUFDZCxjQUFNLGNBQWMsYUFBYSxRQUFRLFVBQVUsVUFBVSxZQUFZLE1BQU07QUFDL0UsWUFBSSxhQUFhO0FBQ2YsZ0JBQU0sVUFBVSxJQUFJLFdBQVc7QUFBQSxRQUNqQztBQUFBLE1BQ0Y7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQSxFQUdVLDBCQUEwQixXQUE4QjtBQUNoRSxVQUFNLFlBQVksVUFBVSxpQkFBaUIsWUFBWTtBQUV6RCxjQUFVLFFBQVEsVUFBUTtBQUV4QixXQUFLLFNBQVMsV0FBVztBQUV6QixXQUFLLGlCQUFpQixZQUFZLENBQUMsVUFBVTtBQUMzQyxjQUFNLFdBQVcsS0FBSyxhQUFhLGdCQUFnQjtBQUNuRCxjQUFNLGFBQWEsS0FBSyxhQUFhLGtCQUFrQjtBQUV2RCxZQUFJLFVBQVU7QUFDWixlQUFLLGFBQWEsVUFBVSxhQUFhLFNBQVMsVUFBVSxJQUFJLE1BQVM7QUFBQSxRQUMzRTtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVBLE1BQWdCLGFBQWEsVUFBa0IsWUFBb0M7QUFDakYsUUFBSTtBQUVGLFlBQU0sT0FBTyxLQUFLLElBQUksTUFBTSxzQkFBc0IsUUFBUTtBQUUxRCxVQUFJLENBQUMsUUFBUSxnQkFBZ0IseUJBQVM7QUFDcEMsZ0JBQVEsTUFBTSxvQ0FBb0MsUUFBUSxFQUFFO0FBQzVEO0FBQUEsTUFDRjtBQUdBLFlBQU0sT0FBTyxLQUFLLElBQUksVUFBVSxRQUFRLEtBQUs7QUFDN0MsWUFBTSxLQUFLLFNBQVMsSUFBVztBQUcvQixVQUFJLGVBQWUsUUFBVztBQUM1QixjQUFNLFNBQVMsS0FBSyxJQUFJLFVBQVUsY0FBYztBQUNoRCxZQUFJLFFBQVE7QUFFVixnQkFBTSxXQUFXLEVBQUUsTUFBTSxZQUFZLElBQUksRUFBRTtBQUMzQyxpQkFBTyxVQUFVLFFBQVE7QUFDekIsaUJBQU8sZUFBZSxFQUFFLE1BQU0sVUFBVSxJQUFJLFNBQVMsR0FBRyxJQUFJO0FBQUEsUUFDOUQ7QUFBQSxNQUNGO0FBQUEsSUFDRixTQUFTLE9BQU87QUFDZCxjQUFRLE1BQU0sOEJBQThCLEtBQUssRUFBRTtBQUFBLElBQ3JEO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBZ0IsT0FBTyxVQUFrQixNQUFXLE1BQVcsUUFBYSxNQUEwQjtBQUNwRyxZQUFRLElBQUksaUJBQWlCLFFBQVEsRUFBRTtBQUN2QyxVQUFNLFlBQVksS0FBSyxZQUFZLFNBQVMsQ0FBQztBQUM3QyxjQUFVLE1BQU07QUFHaEIsY0FBVSxTQUFTLGtCQUFrQjtBQUdyQyxVQUFNLGtCQUFrQixVQUFVLFVBQVUsRUFBRSxLQUFLLDBCQUEwQixDQUFDO0FBRzlFLFVBQU0sbUJBQW1CLFVBQVUsVUFBVSxFQUFFLEtBQUssMkJBQTJCLENBQUM7QUFHaEYsU0FBSywwQkFBMEIsUUFBUSxJQUFJO0FBRTNDLFFBQUk7QUFFRixZQUFNLFFBQVEsSUFBSTtBQUFBLFFBQ2hCLEtBQUssYUFBYSxpQkFBaUIsSUFBSTtBQUFBLFFBQ3ZDLEtBQUssZUFBZSxrQkFBa0IsVUFBVSxJQUFJO0FBQUEsTUFDdEQsQ0FBQztBQUdELFdBQUssZ0JBQWdCLGlCQUFpQixRQUFRLElBQUk7QUFHbEQsV0FBSyxnQ0FBZ0Msa0JBQWtCLElBQUk7QUFBQSxJQUM3RCxTQUFTLE9BQU87QUFDZCxjQUFRLE1BQU0sNEJBQTRCLFFBQVEsS0FBSyxLQUFLO0FBQzVELHVCQUFpQixZQUFZLCtDQUErQyxNQUFNLE9BQU87QUFBQSxJQUMzRjtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFVLGdDQUFnQyxXQUF3QixNQUFpQjtBQUFBLEVBR25GO0FBQ0Y7OztBeUJsY08sSUFBTSxxQkFBcUI7QUFFM0IsSUFBTSxlQUFOLGNBQTJCLFNBQVM7QUFBQTtBQUFBLEVBSXpDLFlBQVksTUFBNkIsUUFBcUIsTUFBb0IsYUFBMEI7QUFDMUcsVUFBTSxJQUFJO0FBRDZCO0FBQXFCO0FBQW9CO0FBSGxGLHdCQUFRLFNBQWlCLENBQUM7QUFDMUI7QUFBQSx3QkFBUSxpQkFBeUIsQ0FBQztBQUloQyxTQUFLLE9BQU87QUFBQSxFQUNkO0FBQUEsRUFFQSxjQUFzQjtBQUNwQixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsaUJBQXlCO0FBQ3ZCLFdBQU8sS0FBSyxLQUFLLEVBQUUscUJBQXFCO0FBQUEsRUFDMUM7QUFBQSxFQUVBLFVBQWtCO0FBQ2hCLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxNQUFNLFNBQXdCO0FBQzVCLFNBQUssUUFBUSxNQUFNLEtBQUssWUFBWSxLQUFLLFdBQVc7QUFLcEQsWUFBUSxJQUFJLDhCQUE4QixLQUFLLEtBQUs7QUFHcEQsVUFBTSxlQUFlO0FBQUEsTUFDbkIsT0FBTyxLQUFLO0FBQUEsTUFDWixZQUFZLEtBQUssTUFBTTtBQUFBLE1BQ3ZCLGdCQUFnQixLQUFLLHVCQUF1QjtBQUFBLE1BQzVDLGNBQWMsS0FBSyxxQkFBcUI7QUFBQSxNQUN4QyxpQkFBaUIsS0FBSyx3QkFBd0I7QUFBQSxNQUM5QyxjQUFjLEtBQUssc0JBQXNCO0FBQUEsTUFDekMsbUJBQW1CLEtBQUssMEJBQTBCO0FBQUEsTUFDbEQsb0JBQW9CLEtBQUssNEJBQTRCO0FBQUE7QUFBQSxNQUVyRCxhQUFhLEtBQUssb0JBQW9CO0FBQUEsTUFDdEMsbUJBQW1CLEtBQUssMEJBQTBCO0FBQUEsTUFDbEQsaUJBQWlCLEtBQUsseUJBQXlCO0FBQUEsTUFDL0MsaUJBQWlCLEtBQUsseUJBQXlCO0FBQUEsTUFDL0MsYUFBYSxLQUFLLHFCQUFxQjtBQUFBLE1BQ3ZDLGNBQWMsS0FBSyxzQkFBc0I7QUFBQTtBQUFBLE1BRXpDLFlBQVksS0FBSyxrQkFBa0I7QUFBQSxNQUNuQyxjQUFjLEtBQUssb0JBQW9CO0FBQUEsTUFDdkMsZUFBZSxLQUFLLHFCQUFxQjtBQUFBO0FBQUEsTUFFekMsY0FBYyxLQUFLLG9CQUFvQjtBQUFBLE1BQ3ZDLGFBQWEsS0FBSyxtQkFBbUI7QUFBQSxNQUNyQyxjQUFjLEtBQUssc0JBQXNCO0FBQUEsSUFDM0M7QUFFQSxVQUFNLEtBQUssT0FBTyxvQkFBb0IsY0FBYyxLQUFLLE1BQU0sS0FBSyxRQUFRLEtBQUssSUFBSTtBQUFBLEVBQ3ZGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLE1BQWMscUJBQW9DO0FBRWhELFNBQUssZ0JBQWdCLENBQUMsR0FBRyxLQUFLLEtBQUs7QUFFbkMsU0FBSyxnQkFBZ0IsS0FBSyxjQUFjLE1BQU0sR0FBRyxLQUFLLE1BQU0sS0FBSyxjQUFjLFNBQVMsR0FBRyxDQUFDO0FBQUEsRUFDOUY7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLHlCQUFpQztBQUN2QyxXQUFPLEtBQUssTUFBTSxPQUFPLFVBQVEsS0FBSyxlQUFlLE1BQU0sRUFBRTtBQUFBLEVBQy9EO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSx1QkFBK0I7QUFDckMsV0FBTyxLQUFLLE1BQU0sT0FBTyxVQUFRLEtBQUssZUFBZSxNQUFPLEVBQUU7QUFBQSxFQUNoRTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsMEJBQWtDO0FBQ3hDLFdBQU8sS0FBSyxNQUFNLE9BQU8sVUFBUSxLQUFLLGVBQWUsWUFBWSxFQUFFO0FBQUEsRUFDckU7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLHdCQUFnQztBQUN0QyxVQUFNLGlCQUFpQixLQUFLLHVCQUF1QjtBQUNuRCxXQUFPLEtBQUssTUFBTSxTQUFTLElBQ3ZCLEtBQUssTUFBTyxpQkFBaUIsS0FBSyxNQUFNLFNBQVUsR0FBRyxJQUNyRDtBQUFBLEVBQ047QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLDRCQUFvQztBQUMxQyxXQUFPLEtBQUssTUFBTTtBQUFBLE1BQU8sVUFDdkIsS0FBSyx3Q0FDTCxLQUFLO0FBQUEsSUFDUCxFQUFFO0FBQUEsRUFDSjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsOEJBQXNDO0FBRTVDLFVBQU0sd0JBQXdCLEtBQUssTUFDaEMsT0FBTyxVQUFRLEtBQUssZUFBZSxVQUFVLEtBQUssVUFBVSxLQUFLLFlBQVksQ0FBQyxFQUM5RSxPQUFPLENBQUMsT0FBTyxTQUFTLFNBQVMsS0FBSyxVQUFVLEtBQUssYUFBYSxJQUFJLENBQUM7QUFHMUUsVUFBTSxRQUFRLEtBQUssTUFBTSx3QkFBd0IsRUFBRTtBQUNuRCxVQUFNLFVBQVUsd0JBQXdCO0FBRXhDLFFBQUksUUFBUSxHQUFHO0FBQ2IsYUFBTyxHQUFHLEtBQUssS0FBSyxVQUFVLElBQUksVUFBVSxNQUFNLEVBQUU7QUFBQSxJQUN0RCxPQUFPO0FBQ0wsYUFBTyxVQUFVLElBQUksR0FBRyxPQUFPLE1BQU07QUFBQSxJQUN2QztBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLHNCQUE4QjtBQUNwQyxXQUFPLEtBQUssTUFBTSxPQUFPLFVBQVEsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxLQUFLLGFBQWEsQ0FBQyxLQUFLLFlBQVksQ0FBQyxLQUFLLGlCQUFpQixDQUFDLEtBQUssYUFBYSxFQUFFO0FBQUEsRUFDckk7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLDRCQUFvQztBQUMxQyxVQUFNLGFBQWEsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsU0FBUztBQUU5RCxXQUFPLEtBQUssTUFBTSxPQUFPLFVBQVE7QUFFL0IsVUFBSSxLQUFLLGVBQWUsT0FBUSxRQUFPO0FBR3ZDLFVBQUksQ0FBQyxLQUFLLFNBQVUsUUFBTztBQUczQixVQUFJO0FBQ0YsY0FBTSxlQUFlLEtBQUssZ0JBQWdCLEtBQUssUUFBUTtBQUN2RCxZQUFJLENBQUMsYUFBYyxRQUFPO0FBQzFCLGVBQU8sZ0JBQWdCO0FBQUEsTUFDekIsU0FBUyxPQUFPO0FBQ2QsZ0JBQVEsTUFBTSw2QkFBNkIsT0FBTyxJQUFJO0FBQ3RELGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRixDQUFDLEVBQUU7QUFBQSxFQUNMO0FBQUEsRUFFUSw0QkFBb0M7QUFDMUMsVUFBTSxhQUFhLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVM7QUFDL0QsVUFBTSxnQkFBZ0IsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUztBQUVsRSxXQUFPLEtBQUssTUFBTSxPQUFPLFVBQVE7QUFFL0IsVUFBSSxLQUFLLGVBQWUsT0FBUSxRQUFPO0FBR3ZDLFVBQUksQ0FBQyxLQUFLLFNBQVUsUUFBTztBQUczQixVQUFJO0FBQ0YsY0FBTSxlQUFlLEtBQUssZ0JBQWdCLEtBQUssUUFBUTtBQUN2RCxZQUFJLENBQUMsYUFBYyxRQUFPO0FBRTFCLGVBQU8sZUFBZSxjQUFjLGdCQUFnQjtBQUFBLE1BQ3RELFNBQVMsT0FBTztBQUNkLGdCQUFRLE1BQU0sNkJBQTZCLE9BQU8sSUFBSTtBQUN0RCxlQUFPO0FBQUEsTUFDVDtBQUFBLElBQ0YsQ0FBQyxFQUFFO0FBQUEsRUFDTDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsMkJBQW1DO0FBQ3pDLFVBQU0sb0JBQW9CLEtBQUssMEJBQTBCO0FBRXpELFVBQU0sb0JBQW9CLEtBQUssMEJBQTBCO0FBRXpELFFBQUksc0JBQXNCLEVBQUcsUUFBTztBQUVwQyxVQUFNLFNBQVUsb0JBQW9CLHFCQUFxQixvQkFBcUI7QUFDOUUsVUFBTSxlQUFlLEtBQUssTUFBTSxLQUFLO0FBRXJDLFlBQVEsU0FBUyxJQUFJLE1BQU0sTUFBTSxlQUFlLE9BQU8sZUFBZSxJQUFJLFdBQU0sZUFBZSxJQUFJLFdBQU07QUFBQSxFQUMzRztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsMkJBQW1DO0FBQ3pDLFVBQU0sb0JBQW9CLEtBQUssMEJBQTBCO0FBQ3pELFVBQU0sUUFBUSxvQkFBb0I7QUFFbEMsV0FBTyxNQUFNLFFBQVEsQ0FBQyxJQUFJO0FBQUEsRUFDNUI7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLHVCQUErQjtBQUVyQyxVQUFNLGFBQWEsb0JBQUksSUFBcUI7QUFDNUMsVUFBTUMsT0FBTSxTQUFTLElBQUk7QUFHekIsU0FBSyxNQUFNLFFBQVEsVUFBUTtBQUN6QixVQUFJLEtBQUssZUFBZSxVQUFVLEtBQUssVUFBVTtBQUMvQyxjQUFNLFdBQVcsS0FBSyxnQkFBZ0IsS0FBSyxRQUFRO0FBQ25ELFlBQUksQ0FBQyxTQUFVLFFBQU87QUFFdEIsY0FBTSxnQkFBZ0IsU0FBUyxXQUFXLFFBQVE7QUFFbEQsY0FBTSxVQUFVQSxLQUFJLEtBQUssZUFBZSxNQUFNLEVBQUU7QUFHaEQsWUFBSSxXQUFXLEdBQUc7QUFFaEIsZ0JBQU0sVUFBVSxjQUFjLFNBQVMsWUFBWTtBQUNuRCxxQkFBVyxJQUFJLFNBQVMsSUFBSTtBQUFBLFFBQzlCO0FBQUEsTUFDRjtBQUFBLElBQ0YsQ0FBQztBQUdELFVBQU0sa0JBQWtCLFdBQVc7QUFDbkMsV0FBTyxLQUFLLE1BQU8sa0JBQWtCLElBQUssR0FBRztBQUFBLEVBQy9DO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSx3QkFBZ0M7QUFFdEMsVUFBTSxlQUFlLEtBQUssTUFBTSxPQUFPLFVBQVE7QUFHN0MsYUFBTyxLQUFLO0FBQUEsSUFDZCxDQUFDLEVBQUU7QUFFSCxXQUFPLEtBQUssTUFBTSxTQUFTLElBQ3ZCLEtBQUssTUFBTyxlQUFlLEtBQUssTUFBTSxTQUFVLEdBQUcsSUFDbkQ7QUFBQSxFQUNOO0FBQUEsRUFFVSw0QkFBNEIsTUFBaUI7QUFBQSxFQUV2RDtBQUFBLEVBRVUsZ0NBQWdDLFdBQXdCLE1BQWlCO0FBQ2pGLFNBQUssMEJBQTBCLFNBQVM7QUFDeEMsU0FBSywyQkFBMkIsU0FBUztBQUFBLEVBQzNDO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSwyQkFBMkIsV0FBOEI7QUFFL0QsVUFBTSxlQUFlLFVBQVUsY0FBYyx3QkFBd0I7QUFDckUsVUFBTSxjQUFjLFVBQVUsY0FBYyx1QkFBdUI7QUFDbkUsVUFBTSxvQkFBb0IsVUFBVSxjQUFjLHFCQUFxQjtBQUN2RSxVQUFNLGNBQWMsVUFBVSxjQUFjLHVCQUF1QjtBQUNuRSxVQUFNLGNBQWMsVUFBVSxjQUFjLHVCQUF1QjtBQUNuRSxVQUFNLGFBQWEsVUFBVSxpQkFBaUIsMkNBQTJDO0FBRXpGLFFBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDLFlBQWE7QUFHekYsU0FBSyx1QkFBdUIsVUFBVTtBQUd0QyxTQUFLLG1CQUFtQixXQUFXLFVBQVU7QUFHN0MsaUJBQWEsaUJBQWlCLFNBQVMsTUFBTTtBQUMzQyxrQkFBWSxVQUFVLE9BQU8sUUFBUTtBQUFBLElBQ3ZDLENBQUM7QUFHRCxzQkFBa0IsaUJBQWlCLFNBQVMsTUFBTTtBQUNoRCxrQkFBWSxVQUFVLElBQUksUUFBUTtBQUFBLElBQ3BDLENBQUM7QUFHRCxnQkFBWSxpQkFBaUIsU0FBUyxNQUFNO0FBQzFDLFdBQUssbUJBQW1CLFdBQVcsVUFBVTtBQUM3QyxXQUFLLHVCQUF1QixVQUFVO0FBQ3RDLGtCQUFZLFVBQVUsSUFBSSxRQUFRO0FBQUEsSUFDcEMsQ0FBQztBQUdELGdCQUFZLGlCQUFpQixTQUFTLE1BQU07QUFDMUMsaUJBQVcsUUFBUSxjQUFZO0FBQzdCLFFBQUMsU0FBOEIsVUFBVTtBQUFBLE1BQzNDLENBQUM7QUFDRCxXQUFLLG1CQUFtQixXQUFXLFVBQVU7QUFDN0MsV0FBSyx1QkFBdUIsVUFBVTtBQUFBLElBQ3hDLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSxtQkFBbUIsV0FBd0IsWUFBdUM7QUFDeEYsZUFBVyxRQUFRLGNBQVk7QUFDN0IsWUFBTSxLQUFLO0FBQ1gsWUFBTSxhQUFhLEdBQUcsUUFBUTtBQUU5QixVQUFJLFlBQVk7QUFFaEIsY0FBTSxVQUFVLFVBQVUsaUJBQWlCLHNCQUFzQixVQUFVLElBQUk7QUFHL0UsWUFBSSxRQUFRLFdBQVcsR0FBRztBQUN4QixrQkFBUSxLQUFLLG1DQUFtQyxVQUFVLEVBQUU7QUFBQSxRQUM5RDtBQUdFLGdCQUFRLFFBQVEsWUFBVTtBQUN4QixrQkFBUSxJQUFJLGFBQWEsR0FBRyxVQUFVLFlBQVksU0FBUyxjQUFjLFVBQVUsRUFBRTtBQUNyRixjQUFJLEdBQUcsU0FBUztBQUNkLG1CQUFPLFVBQVUsT0FBTyxRQUFRO0FBQUEsVUFDbEMsT0FBTztBQUNMLG1CQUFPLFVBQVUsSUFBSSxRQUFRO0FBQUEsVUFDL0I7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsdUJBQXVCLFlBQXVDO0FBQ3BFLFVBQU0sUUFBaUMsQ0FBQztBQUV4QyxlQUFXLFFBQVEsY0FBWTtBQUM3QixZQUFNLEtBQUs7QUFDWCxZQUFNLGNBQWMsR0FBRyxRQUFRO0FBQy9CLFVBQUksYUFBYTtBQUNmLGNBQU0sV0FBVyxJQUFJLEdBQUc7QUFBQSxNQUMxQjtBQUFBLElBQ0YsQ0FBQztBQUVELGlCQUFhLFFBQVEsa0NBQWtDLEtBQUssVUFBVSxLQUFLLENBQUM7QUFBQSxFQUM5RTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsdUJBQXVCLFlBQXVDO0FBQ3BFLFVBQU0sYUFBYSxhQUFhLFFBQVEsZ0NBQWdDO0FBQ3hFLFFBQUksQ0FBQyxXQUFZO0FBRWpCLFFBQUk7QUFDRixZQUFNLFFBQVEsS0FBSyxNQUFNLFVBQVU7QUFDbkMsaUJBQVcsUUFBUSxjQUFZO0FBQzdCLGNBQU0sS0FBSztBQUNYLGNBQU0sY0FBYyxHQUFHLFFBQVE7QUFDL0IsWUFBSSxlQUFlLE1BQU0sV0FBVyxNQUFNLFFBQVc7QUFDbkQsYUFBRyxVQUFVLE1BQU0sV0FBVztBQUFBLFFBQ2hDO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSCxTQUFTLE9BQU87QUFDZCxjQUFRLE1BQU0sbURBQWdELEtBQUs7QUFBQSxJQUNyRTtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLG9CQUE2QjtBQUNuQyxVQUFNLFFBQVEsU0FBUyxJQUFJLEVBQUUsUUFBUSxLQUFLO0FBQzFDLFVBQU0sV0FBVyxNQUFNLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUV2QyxXQUFPLEtBQUssTUFDVCxPQUFPLFVBQVE7QUFFZCxVQUFJLEtBQUssZUFBZSxVQUFVLEtBQUssZUFBZSxZQUFhLFFBQU87QUFHMUUsVUFBSSxLQUFLLGVBQWU7QUFDdEIsY0FBTSxnQkFBZ0IsS0FBSyxnQkFBZ0IsS0FBSyxhQUFhO0FBQzdELFlBQUksQ0FBQyxjQUFlLFFBQU87QUFDM0IsY0FBTSxvQkFBb0IsU0FBUyxXQUFXLGFBQWE7QUFFM0QsZUFBTyxxQkFBcUIsU0FBUyxvQkFBb0I7QUFBQSxNQUMzRDtBQUdBLFVBQUksS0FBSyxTQUFTO0FBQ2hCLGNBQU0sVUFBVSxLQUFLLGdCQUFnQixLQUFLLE9BQU87QUFDakQsWUFBSSxDQUFDLFFBQVMsUUFBTztBQUVyQixjQUFNLGNBQWMsU0FBUyxXQUFXLE9BQU8sRUFBRSxRQUFRLEtBQUs7QUFDOUQsZUFBTyxZQUFZLE9BQU8sS0FBSztBQUFBLE1BQ2pDO0FBRUEsYUFBTztBQUFBLElBQ1QsQ0FBQyxFQUNBLEtBQUssQ0FBQyxHQUFHLE1BQU07QUFFZCxVQUFJLEVBQUUsYUFBYSxFQUFFLFVBQVU7QUFDN0IsZUFBUSxPQUFPLEVBQUUsWUFBWSxDQUFDLElBQUksT0FBTyxFQUFFLFlBQVksQ0FBQztBQUFBLE1BQzFEO0FBR0EsWUFBTSxRQUFRLEVBQUUsVUFBVSxJQUFJLEtBQUssRUFBRSxPQUFPLElBQUk7QUFDaEQsWUFBTSxRQUFRLEVBQUUsVUFBVSxJQUFJLEtBQUssRUFBRSxPQUFPLElBQUk7QUFFaEQsVUFBSSxTQUFTLE1BQU8sUUFBTyxNQUFNLFFBQVEsSUFBSSxNQUFNLFFBQVE7QUFDM0QsVUFBSSxNQUFPLFFBQU87QUFDbEIsVUFBSSxNQUFPLFFBQU87QUFDbEIsYUFBTztBQUFBLElBQ1QsQ0FBQyxFQUNBLE1BQU0sR0FBRyxDQUFDO0FBQUEsRUFDZjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1Esc0JBQStCO0FBQ3JDLFVBQU0sUUFBUSxTQUFTLElBQUksRUFBRSxRQUFRLEtBQUs7QUFFMUMsV0FBTyxLQUFLLE1BQ1QsT0FBTyxVQUFRO0FBRWQsVUFBSSxLQUFLLGVBQWUsVUFBVSxLQUFLLGVBQWUsWUFBYSxRQUFPO0FBRzFFLFVBQUksS0FBSyxTQUFTO0FBQ2hCLGNBQU0sVUFBVSxLQUFLLGdCQUFnQixLQUFLLE9BQU87QUFDakQsWUFBSSxDQUFDLFFBQVMsUUFBTztBQUVyQixjQUFNLGNBQWMsU0FBUyxXQUFXLE9BQU8sRUFBRSxRQUFRLEtBQUs7QUFDOUQsZUFBTyxjQUFjO0FBQUEsTUFDdkI7QUFFQSxhQUFPO0FBQUEsSUFDVCxDQUFDLEVBQ0EsS0FBSyxDQUFDLEdBQUcsTUFBTTtBQUVkLFlBQU0sUUFBUSxFQUFFLFVBQVUsSUFBSSxLQUFLLEVBQUUsT0FBTyxJQUFJO0FBQ2hELFlBQU0sUUFBUSxFQUFFLFVBQVUsSUFBSSxLQUFLLEVBQUUsT0FBTyxJQUFJO0FBRWhELFVBQUksU0FBUyxNQUFPLFFBQU8sTUFBTSxRQUFRLElBQUksTUFBTSxRQUFRO0FBQzNELFVBQUksTUFBTyxRQUFPO0FBQ2xCLFVBQUksTUFBTyxRQUFPO0FBQ2xCLGFBQU87QUFBQSxJQUNULENBQUMsRUFDQSxNQUFNLEdBQUcsQ0FBQztBQUFBLEVBQ2Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLHVCQUFnQztBQUN0QyxVQUFNLFFBQVEsU0FBUyxJQUFJLEVBQUUsUUFBUSxLQUFLO0FBQzFDLFVBQU0sV0FBVyxNQUFNLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUV2QyxXQUFPLEtBQUssTUFDVCxPQUFPLFVBQVE7QUFFZCxVQUFJLEtBQUssZUFBZSxVQUFVLEtBQUssZUFBZSxZQUFhLFFBQU87QUFHMUUsVUFBSSxLQUFLLFNBQVM7QUFDaEIsY0FBTSxVQUFVLEtBQUssZ0JBQWdCLEtBQUssT0FBTztBQUNqRCxZQUFJLENBQUMsUUFBUyxRQUFPO0FBRXJCLGNBQU0sY0FBYyxTQUFTLFdBQVcsT0FBTyxFQUFFLFFBQVEsS0FBSztBQUM5RCxlQUFPLGVBQWUsU0FBUyxlQUFlO0FBQUEsTUFDaEQ7QUFFQSxhQUFPO0FBQUEsSUFDVCxDQUFDLEVBQ0EsS0FBSyxDQUFDLEdBQUcsTUFBTTtBQUVkLFlBQU0sUUFBUSxFQUFFLFVBQVUsSUFBSSxLQUFLLEVBQUUsT0FBTyxJQUFJO0FBQ2hELFlBQU0sUUFBUSxFQUFFLFVBQVUsSUFBSSxLQUFLLEVBQUUsT0FBTyxJQUFJO0FBRWhELFVBQUksU0FBUyxNQUFPLFFBQU8sTUFBTSxRQUFRLElBQUksTUFBTSxRQUFRO0FBQzNELFVBQUksTUFBTyxRQUFPO0FBQ2xCLFVBQUksTUFBTyxRQUFPO0FBQ2xCLGFBQU87QUFBQSxJQUNULENBQUMsRUFDQSxNQUFNLEdBQUcsQ0FBQztBQUFBLEVBQ2Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLHNCQUErQjtBQUNyQyxXQUFPLEtBQUssTUFDWCxPQUFPLFVBQVE7QUFFZCxhQUFPLENBQUMsS0FBSyxXQUNOLEtBQUssZUFBZSxVQUNwQixLQUFLLGVBQWU7QUFBQSxJQUM3QixDQUFDLEVBQ0EsSUFBSSxVQUFRO0FBRVgsVUFBSSxLQUFLLGFBQWE7QUFFcEIsY0FBTSxnQkFBMEIsQ0FBQztBQUdqQyxtQkFBVyxTQUFTLEtBQUssYUFBYTtBQUNwQyxnQkFBTSxRQUFRLEtBQUssWUFBWSxLQUFLO0FBQ3BDLGNBQUksT0FBTztBQUNULDBCQUFjLEtBQUssR0FBRyxLQUFLLEVBQUU7QUFBQSxVQUMvQjtBQUFBLFFBQ0Y7QUFHQSxhQUFLLGVBQWUsSUFBSSxjQUFjLFNBQVMsSUFDM0MsZ0JBQ0EsQ0FBQyxtQkFBbUI7QUFBQSxNQUMxQixPQUFPO0FBQ0wsYUFBSyxlQUFlLElBQUksQ0FBQyxtQkFBZ0I7QUFBQSxNQUMzQztBQUVBLGFBQU87QUFBQSxJQUNULENBQUMsRUFDQSxLQUFLLENBQUMsR0FBRyxNQUFNO0FBRWQsWUFBTSxRQUFRLEVBQUUsY0FBYyxJQUFJLEtBQUssRUFBRSxXQUFXLElBQUk7QUFDeEQsWUFBTSxRQUFRLEVBQUUsY0FBYyxJQUFJLEtBQUssRUFBRSxXQUFXLElBQUk7QUFFeEQsVUFBSSxTQUFTLE1BQU8sUUFBTyxNQUFNLFFBQVEsSUFBSSxNQUFNLFFBQVE7QUFDM0QsVUFBSSxNQUFPLFFBQU87QUFDbEIsVUFBSSxNQUFPLFFBQU87QUFDbEIsYUFBTztBQUFBLElBQ1QsQ0FBQyxFQUNBLE1BQU0sR0FBRyxDQUFDO0FBQUEsRUFDYjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EscUJBQThCO0FBQ3BDLFVBQU1BLE9BQU0sU0FBUyxJQUFJO0FBRXpCLFdBQU8sS0FBSyxNQUNULE9BQU8sVUFBUTtBQUVkLGFBQU8sS0FBSyxlQUFlLFVBQ3JCLEtBQUssZUFBZSxlQUNwQixLQUFLO0FBQUEsSUFDYixDQUFDLEVBQ0EsS0FBSyxDQUFDLEdBQUcsTUFBTTtBQUVkLFlBQU0sUUFBUSxFQUFFLGNBQWMsSUFBSSxLQUFLLEVBQUUsV0FBVyxJQUFJO0FBQ3hELFlBQU0sUUFBUSxFQUFFLGNBQWMsSUFBSSxLQUFLLEVBQUUsV0FBVyxJQUFJO0FBRXhELFVBQUksU0FBUyxNQUFPLFFBQU8sTUFBTSxRQUFRLElBQUksTUFBTSxRQUFRO0FBQzNELFVBQUksTUFBTyxRQUFPO0FBQ2xCLFVBQUksTUFBTyxRQUFPO0FBQ2xCLGFBQU87QUFBQSxJQUNULENBQUMsRUFDQSxNQUFNLEdBQUcsQ0FBQyxFQUNWLElBQUksVUFBUTtBQUVYLFVBQUksS0FBSyxhQUFhO0FBQ3BCLGNBQU0sY0FBYyxLQUFLLGdCQUFnQixLQUFLLFdBQVc7QUFDekQsWUFBSSxhQUFhO0FBQ2YsZ0JBQU0sZUFBZSxTQUFTLFdBQVcsV0FBVztBQUNwRCxnQkFBTSxVQUFVLEtBQUssTUFBTUEsS0FBSSxLQUFLLGNBQWMsTUFBTSxFQUFFLElBQUk7QUFDOUQsZUFBSyxTQUFTLElBQUk7QUFBQSxRQUNwQjtBQUFBLE1BQ0Y7QUFDQSxhQUFPO0FBQUEsSUFDVCxDQUFDO0FBQUEsRUFDTDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1Esd0JBQStEO0FBRXJFLFVBQU0sYUFBYSxvQkFBSSxJQUFxQjtBQUc1QyxTQUFLLE1BQ0YsT0FBTyxVQUFRLEtBQUssZUFBZSxVQUFVLEtBQUssZUFBZSxXQUFXLEVBQzVFLFFBQVEsVUFBUTtBQUNmLFlBQU0sY0FBYyxLQUFLLGNBQWM7QUFFdkMsVUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLEdBQUc7QUFDaEMsbUJBQVcsSUFBSSxhQUFhLENBQUMsQ0FBQztBQUFBLE1BQ2hDO0FBQ0EsaUJBQVcsSUFBSSxXQUFXLEVBQUcsS0FBSyxJQUFJO0FBQUEsSUFDeEMsQ0FBQztBQUdILFVBQU0sU0FBUyxNQUFNLEtBQUssV0FBVyxRQUFRLENBQUMsRUFDM0MsSUFBSSxDQUFDLENBQUMsU0FBUyxLQUFLLE9BQU87QUFBQSxNQUMxQjtBQUFBLE1BQ0EsT0FBTyxNQUFNLE1BQU0sR0FBRyxDQUFDO0FBQUE7QUFBQSxJQUN6QixFQUFFLEVBQ0QsS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLE1BQU0sU0FBUyxFQUFFLE1BQU0sTUFBTSxFQUM5QyxNQUFNLEdBQUcsQ0FBQztBQUViLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxNQUFNLFVBQXlCO0FBQUEsRUFFL0I7QUFDRjs7O0FDdG5CQSxJQUFBQyxxQkFBdUI7QUFPaEIsSUFBZSxlQUFmLGNBQW9DLFNBQVM7QUFBQSxFQUlsRCxZQUFZLE1BQStCLFFBQXVCLE1BQXNCLGFBQTBCO0FBQ2hILFVBQU0sSUFBSTtBQUQrQjtBQUF1QjtBQUFzQjtBQUh4Rix3QkFBVSxTQUFpQixDQUFDO0FBQzVCLHdCQUFVLGVBQXdCLFNBQVMsSUFBSTtBQUFBLEVBSS9DO0FBQUEsRUFRQSxpQkFBeUI7QUFDdkIsV0FBTyxLQUFLLEtBQUssRUFBRSxxQkFBcUI7QUFBQSxFQUMxQztBQUFBLEVBRUEsVUFBa0I7QUFDaEIsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLE1BQU0sU0FBd0I7QUFDNUIsU0FBSyxRQUFRLE1BQU0sS0FBSyxZQUFZLEtBQUssV0FBVztBQUNwRCxVQUFNLEtBQUssWUFBWTtBQUFBLEVBQ3pCO0FBQUEsRUFFQSxNQUFnQixjQUE2QjtBQUUzQyxVQUFNLFdBQVc7QUFBQSxNQUNmLE9BQU8sS0FBSztBQUFBLE1BQ1osYUFBYSxLQUFLO0FBQUEsTUFDbEIsVUFBVSxLQUFLLGlCQUFpQjtBQUFBLElBQ2xDO0FBRUEsVUFBTSxLQUFLLE9BQU8sS0FBSyxZQUFZLEdBQUcsVUFBVSxLQUFLLE1BQU0sS0FBSyxRQUFRLEtBQUssSUFBSTtBQUFBLEVBQ25GO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLVSxXQUFXLE1BQXNCO0FBRXpDLFdBQU8sU0FBUyxXQUFXLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxLQUFLO0FBQUEsRUFDckQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtVLHVCQUFpQztBQUN6QyxXQUFPO0FBQUEsTUFDTCxLQUFLLEtBQUssRUFBRSxTQUFTO0FBQUEsTUFDckIsS0FBSyxLQUFLLEVBQUUsU0FBUztBQUFBLE1BQ3JCLEtBQUssS0FBSyxFQUFFLFNBQVM7QUFBQSxNQUNyQixLQUFLLEtBQUssRUFBRSxTQUFTO0FBQUEsTUFDckIsS0FBSyxLQUFLLEVBQUUsU0FBUztBQUFBLE1BQ3JCLEtBQUssS0FBSyxFQUFFLFNBQVM7QUFBQSxNQUNyQixLQUFLLEtBQUssRUFBRSxTQUFTO0FBQUEsSUFDdkI7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLVSxnQkFBZ0IsTUFBeUI7QUFDakQsVUFBTSxVQUFVO0FBQ2hCLFdBQU8sS0FBSyxNQUFNLE9BQU8sVUFBUTtBQUMvQixVQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFHMUIsWUFBTSxXQUFXLE9BQU8sS0FBSyxZQUFZLFdBQ3JDLFNBQVMsUUFBUSxLQUFLLE9BQU8sSUFDN0IsS0FBSztBQUVULGFBQU8sU0FBUyxRQUFRLE1BQU0sT0FBTztBQUFBLElBQ3ZDLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQSxFQU9VLGtCQUF3QjtBQUNoQyxTQUFLLGNBQWMsU0FBUyxJQUFJO0FBQ2hDLFNBQUssWUFBWTtBQUFBLEVBQ25CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1VLDRCQUE0QixNQUFpQjtBQUVyRCx1QkFBQUMsUUFBVyxlQUFlLG9CQUFvQixDQUFDLFNBQVM7QUFDdEQsVUFBSSxDQUFDLEtBQU0sUUFBTztBQUNsQixVQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzVCLGVBQU8sU0FBUyxRQUFRLElBQUksRUFBRSxTQUFTLE9BQU87QUFBQSxNQUNoRDtBQUNBLGFBQU8sS0FBSyxTQUFTLE9BQU87QUFBQSxJQUM5QixDQUFDO0FBRUQsdUJBQUFBLFFBQVcsZUFBZSxlQUFlLENBQUMsU0FBUztBQUNqRCxVQUFJLENBQUMsS0FBTSxRQUFPO0FBQ2xCLFVBQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsZUFBTyxTQUFTLFFBQVEsSUFBSSxFQUFFLFNBQVMsV0FBVztBQUFBLE1BQ3BEO0FBQ0EsYUFBTyxLQUFLLFNBQVMsV0FBVztBQUFBLElBQ2xDLENBQUM7QUFHRCx1QkFBQUEsUUFBVyxlQUFlLGNBQWMsQ0FBQyxTQUFTO0FBQ2hELGFBQU8sU0FBUyxXQUFXLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxLQUFLO0FBQUEsSUFDckQsQ0FBQztBQUdELHVCQUFBQSxRQUFXLGVBQWUsa0JBQWtCLENBQUMsU0FBUztBQUNwRCxVQUFJLENBQUMsS0FBTSxRQUFPO0FBQ2xCLFVBQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsZUFBTyxTQUFTLFFBQVEsSUFBSSxFQUFFLFNBQVMsb0JBQW9CO0FBQUEsTUFDN0Q7QUFDQSxhQUFPLEtBQUssU0FBUyxvQkFBb0I7QUFBQSxJQUMzQyxDQUFDO0FBR0QsdUJBQUFBLFFBQVcsZUFBZSxVQUFVLFNBQVMsTUFBTSxNQUFNLFNBQVM7QUFDaEUsYUFBUSxTQUFTLE9BQVEsUUFBUSxHQUFHLElBQUksSUFBSSxRQUFRLFFBQVEsSUFBSTtBQUFBLElBQ2xFLENBQUM7QUFFRCx1QkFBQUEsUUFBVyxlQUFlLGFBQWEsQ0FBQyxTQUFTO0FBQy9DLFVBQUksQ0FBQyxLQUFNLFFBQU87QUFDbEIsVUFBSSxPQUFPLFNBQVMsVUFBVTtBQUM1QixlQUFPLFNBQVMsUUFBUSxJQUFJLEVBQUUsVUFBVTtBQUFBLE1BQzFDO0FBQ0EsVUFBSTtBQUNGLGVBQU8sT0FBTyxLQUFLLGNBQWMsYUFBYSxLQUFLLFVBQVUsSUFBSTtBQUFBLE1BQ25FLFNBQVMsR0FBRztBQUNWLGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRixDQUFDO0FBRUQsdUJBQUFBLFFBQVcsZUFBZSxpQkFBaUIsQ0FBQyxTQUFTO0FBQ25ELFVBQUksQ0FBQyxLQUFNLFFBQU87QUFDbEIsYUFBTyxLQUFLO0FBQUEsSUFDZCxDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9VLGdDQUFnQyxXQUF3QixNQUFpQjtBQUVqRixVQUFNLGFBQWEsVUFBVSxjQUFjLGdCQUFnQjtBQUMzRCxVQUFNLGFBQWEsVUFBVSxjQUFjLGdCQUFnQjtBQUMzRCxVQUFNLGNBQWMsVUFBVSxjQUFjLGlCQUFpQjtBQUU3RCxRQUFJLFlBQVk7QUFDZCxpQkFBVyxpQkFBaUIsU0FBUyxNQUFNO0FBQ3pDLGFBQUssbUJBQW1CO0FBQUEsTUFDMUIsQ0FBQztBQUFBLElBQ0g7QUFFQSxRQUFJLFlBQVk7QUFDZCxpQkFBVyxpQkFBaUIsU0FBUyxNQUFNO0FBQ3pDLGFBQUssZUFBZTtBQUFBLE1BQ3RCLENBQUM7QUFBQSxJQUNIO0FBRUEsUUFBSSxhQUFhO0FBQ2Ysa0JBQVksaUJBQWlCLFNBQVMsTUFBTSxLQUFLLGdCQUFnQixDQUFDO0FBQUEsSUFDcEU7QUFFQSxVQUFNLGVBQWUsVUFBVSxjQUFjLHlCQUF5QjtBQUV0RSxRQUFJLGNBQWM7QUFLaEIsbUJBQWEsaUJBQWlCLFVBQVUsTUFBTTtBQUM1QyxjQUFNLG1CQUFtQixLQUFLLDhCQUE4QixhQUFhLEtBQUs7QUFDOUUsYUFBSyxpQkFBaUIsZ0JBQWdCO0FBQUEsTUFDeEMsQ0FBQztBQUFBLElBQ0g7QUFHQSxVQUFNLFlBQVksVUFBVSxpQkFBaUIsZ0JBQWdCO0FBQzdELGNBQVUsUUFBUSxVQUFRO0FBQ3hCLFdBQUssaUJBQWlCLFNBQVMsQ0FBQyxNQUFNO0FBQ3BDLGNBQU0sU0FBUyxFQUFFO0FBQ2pCLGNBQU0sV0FBVyxPQUFPLGFBQWEsZ0JBQWdCO0FBQ3JELGNBQU0sYUFBYSxPQUFPLGFBQWEsa0JBQWtCO0FBRXpELFlBQUksVUFBVTtBQUNaLGVBQUssYUFBYSxVQUFVLGFBQWEsU0FBUyxVQUFVLElBQUksTUFBUztBQUFBLFFBQzNFO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSCxDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRVEsOEJBQThCLGdCQUEwQztBQUU5RSxZQUFRLElBQUksZ0JBQWdCLGNBQWMscUJBQXFCO0FBQy9ELFlBQVEsZ0JBQWdCO0FBQUEsTUFDdEIsS0FBSztBQUNIO0FBQUEsTUFDRixLQUFLO0FBQ0g7QUFBQSxNQUNGLEtBQUs7QUFDSDtBQUFBLE1BQ0YsS0FBSztBQUNIO0FBQUEsTUFDRjtBQUNFO0FBQUEsSUFDSjtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTVEsaUJBQWlCLFVBQWtDO0FBRXpELGlCQUFhLFFBQVEsc0JBQXNCLFFBQVE7QUFHbkQsUUFBSTtBQUNKLFlBQVEsVUFBVTtBQUFBLE1BQ2hCO0FBQ0UsaUJBQVM7QUFDVDtBQUFBLE1BQ0Y7QUFDRSxpQkFBUztBQUNUO0FBQUEsTUFDRjtBQUNFLGlCQUFTO0FBQ1Q7QUFBQSxNQUNGO0FBQ0UsaUJBQVM7QUFDVDtBQUFBLE1BQ0Y7QUFDRSxpQkFBUztBQUFBLElBQ2I7QUFHQSxRQUFJLEtBQUssVUFBVSxLQUFLLE9BQU8sS0FBSztBQUNsQyxZQUFNLE9BQU8sS0FBSyxPQUFPLElBQUksVUFBVTtBQUN2QyxVQUFJLE1BQU07QUFDUixhQUFLLGFBQWEsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUFBLE1BQ3BDO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUVBLE1BQU0sVUFBeUI7QUFBQSxFQUUvQjtBQUNGOzs7QUN0UU8sSUFBTSwyQkFBMkI7QUFFakMsSUFBTSxvQkFBTixjQUFnQyxhQUFhO0FBQUEsRUFFbEQsWUFBWSxNQUFxQixRQUFhLE1BQVksYUFBMEI7QUFDbEYsVUFBTSxNQUFNLFFBQVEsTUFBTSxXQUFXO0FBQUEsRUFFdkM7QUFBQSxFQUVBLGNBQXNCO0FBQ3BCLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxpQkFBeUI7QUFDdkIsV0FBTyxLQUFLLEtBQUssRUFBRSxrQkFBa0I7QUFBQSxFQUN2QztBQUFBLEVBRUEsVUFBa0I7QUFDaEIsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtVLG1CQUF3QjtBQUNoQyxVQUFNLGVBQWUsS0FBSyxZQUFZLFFBQVEsT0FBTztBQUNyRCxVQUFNLGFBQWEsS0FBSyxZQUFZLE1BQU0sT0FBTztBQUdqRCxRQUFJLFlBQVksYUFBYSxRQUFRLE1BQU07QUFHM0MsUUFBSSxVQUFVLFdBQVcsTUFBTSxNQUFNO0FBa0JyQyxVQUFNLFFBQW9CLENBQUM7QUFDM0IsUUFBSSxrQkFBNkIsQ0FBQztBQUNsQyxRQUFJLGFBQWE7QUFFakIsV0FBTyxjQUFjLFNBQVM7QUFFNUIsWUFBTSxVQUFtQjtBQUFBLFFBQ3ZCLE1BQU07QUFBQSxRQUNOLGdCQUFnQixXQUFXLFVBQVUsYUFBYTtBQUFBLFFBQ2xELFNBQVMsV0FBVyxRQUFRLFNBQVMsSUFBSSxHQUFHLEtBQUs7QUFBQSxRQUNqRCxZQUFZLFdBQVc7QUFBQSxRQUN2QixhQUFhLEtBQUssZ0JBQWdCLFVBQVU7QUFBQSxNQUM5QztBQUVBLHNCQUFnQixLQUFLLE9BQU87QUFHNUIsVUFBSSxnQkFBZ0IsV0FBVyxHQUFHO0FBRWhDLGNBQU0sYUFBYSxnQkFBZ0IsQ0FBQyxFQUFFLEtBQUs7QUFHM0MsY0FBTSxLQUFLO0FBQUEsVUFDVCxNQUFNLENBQUMsR0FBRyxlQUFlO0FBQUEsVUFDekI7QUFBQSxRQUNGLENBQUM7QUFFRCwwQkFBa0IsQ0FBQztBQUFBLE1BQ3JCO0FBR0EsbUJBQWEsV0FBVyxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFBQSxJQUMxQztBQUVBLFdBQU87QUFBQSxNQUNMO0FBQUEsTUFDQTtBQUFBLE1BQ0EsV0FBVyxhQUFhLFNBQVMsV0FBVztBQUFBLE1BQzVDLFVBQVUsS0FBSyxxQkFBcUI7QUFBQSxNQUNwQyxZQUFZLGFBQWEsU0FBUyxXQUFXO0FBQUEsSUFDL0M7QUFBQSxFQUNGO0FBQUEsRUFFVSxxQkFBMkI7QUFDbkMsU0FBSyxjQUFjLEtBQUssWUFBWSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7QUFDdkQsU0FBSyxZQUFZO0FBQUEsRUFDbkI7QUFBQSxFQUVVLGlCQUF1QjtBQUMvQixTQUFLLGNBQWMsS0FBSyxZQUFZLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQztBQUN0RCxTQUFLLFlBQVk7QUFBQSxFQUNuQjtBQUFBLEVBRUEsTUFBTSxVQUF5QjtBQUFBLEVBRS9CO0FBQ0Y7OztBQzFHTyxJQUFNLDBCQUEwQjtBQUVoQyxJQUFNLG1CQUFOLGNBQStCLGFBQWE7QUFBQSxFQUVqRCxZQUFZLE1BQXFCLFFBQWEsTUFBWSxhQUEwQjtBQUNsRixVQUFNLE1BQU0sUUFBUSxNQUFNLFdBQVc7QUFBQSxFQUV2QztBQUFBLEVBRUEsY0FBc0I7QUFDcEIsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLGlCQUF5QjtBQUN2QixXQUFPLEtBQUssS0FBSyxFQUFFLGlCQUFpQjtBQUFBLEVBQ3RDO0FBQUEsRUFFQSxVQUFrQjtBQUNoQixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1UsbUJBQXdCO0FBRWhDLFVBQU0sY0FBYyxLQUFLLFlBQVksUUFBUSxNQUFNO0FBR25ELFVBQU0saUJBQWlCO0FBR3ZCLFVBQU0sb0JBQW9CLEtBQUsscUJBQXFCO0FBY3BELFVBQU0sT0FBc0IsQ0FBQztBQUM3QixRQUFJLGFBQWE7QUFFakIsYUFBUyxJQUFJLEdBQUcsSUFBSSxnQkFBZ0IsS0FBSztBQUN2QyxZQUFNLFdBQVcsS0FBSyxnQkFBZ0IsVUFBVTtBQUNoRCxZQUFNLFdBQVcsV0FBVyxVQUFVO0FBRXRDLFdBQUssS0FBSztBQUFBLFFBQ1IsTUFBTTtBQUFBLFFBQ04sU0FBUyxXQUFXLFFBQVEsU0FBUyxJQUFJLEdBQUcsS0FBSztBQUFBLFFBQ2pELFlBQVksV0FBVztBQUFBLFFBQ3ZCLFdBQVcsV0FBVztBQUFBO0FBQUEsUUFFdEIsU0FBUyxrQkFBa0IsUUFBUTtBQUFBLFFBQ25DLGVBQWUsR0FBRyxrQkFBa0IsUUFBUSxDQUFDLElBQUksV0FBVyxHQUFHO0FBQUEsUUFDL0QsYUFBYTtBQUFBLE1BQ2YsQ0FBQztBQUVELG1CQUFhLFdBQVcsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQUEsSUFDMUM7QUFHQSxVQUFNLFVBQVUsWUFBWSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxDQUFDO0FBQzdELFVBQU0sYUFBYSxHQUFHLFlBQVksU0FBUyxPQUFPLENBQUMsTUFBTSxRQUFRLFNBQVMsYUFBYSxDQUFDO0FBRXhGLFdBQU87QUFBQSxNQUNMO0FBQUEsTUFDQSxZQUFZLFlBQVk7QUFBQSxNQUN4QjtBQUFBLE1BQ0EsVUFBVTtBQUFBLE1BQ1Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBRVUscUJBQTJCO0FBQ25DLFNBQUssY0FBYyxLQUFLLFlBQVksTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ3RELFNBQUssWUFBWTtBQUFBLEVBQ25CO0FBQUEsRUFFVSxpQkFBdUI7QUFDL0IsU0FBSyxjQUFjLEtBQUssWUFBWSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDckQsU0FBSyxZQUFZO0FBQUEsRUFDbkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPVSxnQ0FBZ0MsV0FBd0IsTUFBaUI7QUFFakYsVUFBTSxnQ0FBZ0MsV0FBVyxJQUFJO0FBR3JELFVBQU0sb0JBQW9CLFVBQVUsY0FBYyxzQkFBc0I7QUFFeEUsUUFBSSxtQkFBbUI7QUFFckIsd0JBQWtCLGlCQUFpQixVQUFVLE1BQU07QUFDakQsY0FBTSxnQkFBZ0Isa0JBQWtCO0FBQ3hDLGNBQU0sY0FBYyxVQUFVLGNBQWMseUJBQXlCO0FBRXJFLFlBQUksYUFBYTtBQUVmLG1CQUFTLElBQUksR0FBRyxLQUFLLElBQUksS0FBSztBQUM1Qix3QkFBWSxVQUFVLE9BQU8sUUFBUSxDQUFDLEVBQUU7QUFBQSxVQUMxQztBQUdBLGNBQUksa0JBQWtCLFdBQVc7QUFDL0Isd0JBQVksVUFBVSxJQUFJLGFBQWE7QUFBQSxVQUN6QztBQUdBLHVCQUFhLFFBQVEsdUJBQXVCLGFBQWE7QUFBQSxRQUMzRDtBQUFBLE1BQ0YsQ0FBQztBQUdELFlBQU0sYUFBYSxhQUFhLFFBQVEscUJBQXFCO0FBQzdELFVBQUksWUFBWTtBQUNkLDBCQUFrQixRQUFRO0FBRzFCLGNBQU0sUUFBUSxJQUFJLE1BQU0sUUFBUTtBQUNoQywwQkFBa0IsY0FBYyxLQUFLO0FBQUEsTUFDdkM7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTSxVQUF5QjtBQUFBLEVBRS9CO0FBQ0Y7OztBQzNJTyxJQUFNLHlCQUF5QjtBQUUvQixJQUFNLGtCQUFOLGNBQThCLGFBQWE7QUFBQSxFQUloRCxZQUFZLE1BQXFCLFFBQWEsTUFBWSxhQUEwQjtBQUNsRixVQUFNLE1BQU0sUUFBUSxNQUFNLFdBQVc7QUFIdkM7QUFBQSx3QkFBUTtBQUtOLFNBQUssb0JBQW9CLEtBQUs7QUFBQSxFQUNoQztBQUFBLEVBRUEsY0FBc0I7QUFDcEIsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLGlCQUF5QjtBQUN2QixXQUFPLEtBQUssS0FBSyxFQUFFLGdCQUFnQjtBQUFBLEVBQ3JDO0FBQUEsRUFFQSxVQUFrQjtBQUNoQixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1UsbUJBQXdCO0FBQ2hDLFVBQU0sV0FBVyxLQUFLLGdCQUFnQixLQUFLLFdBQVc7QUFHdEQsVUFBTSxZQUF3QixDQUFDO0FBQy9CLGFBQVMsT0FBTyxHQUFHLE9BQU8sSUFBSSxRQUFRO0FBRXBDLFlBQU0sWUFBWSxTQUFTLE9BQU8sVUFBUTtBQUN4QyxZQUFJLENBQUMsS0FBSyxRQUFTLFFBQU87QUFHMUIsY0FBTSxXQUFXLE9BQU8sS0FBSyxZQUFZLFdBQ3JDLFNBQVMsUUFBUSxLQUFLLE9BQU8sSUFDN0IsS0FBSztBQUdULGVBQU8sU0FBUyxTQUFTO0FBQUEsTUFDM0IsQ0FBQztBQUVELGdCQUFVLEtBQUs7QUFBQSxRQUNiO0FBQUEsUUFDQSxlQUFlLEtBQUssV0FBVyxJQUFJO0FBQUEsUUFDbkMsT0FBTztBQUFBLE1BQ1QsQ0FBQztBQUFBLElBQ0g7QUFHQSxVQUFNLGVBQWUsS0FBSyx5QkFBeUIsS0FBSyxpQkFBaUI7QUFFekUsV0FBTztBQUFBLE1BQ0w7QUFBQSxNQUNBLE1BQU0sS0FBSztBQUFBLE1BQ1gsU0FBUyxLQUFLLFlBQVk7QUFBQSxNQUMxQixTQUFTLEtBQUssWUFBWSxTQUFTLE1BQU07QUFBQTtBQUFBLE1BQ3pDLFNBQVMsS0FBSyxZQUFZLFFBQVEsU0FBUyxJQUFJLEdBQUcsS0FBSztBQUFBLE1BQ3ZELGFBQWE7QUFBQSxNQUNiO0FBQUEsTUFDQSxZQUFZLEtBQUssWUFBWSxTQUFTLG9CQUFvQjtBQUFBLE1BQzFEO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTVEseUJBQXlCLGFBQXVCO0FBQ3RELFVBQU0sUUFBUSxTQUFTLElBQUksRUFBRSxRQUFRLEtBQUs7QUFDMUMsVUFBTSxlQUFlLFlBQVksUUFBUSxPQUFPO0FBQ2hELFVBQU0sY0FBYyxZQUFZLE1BQU0sT0FBTztBQUc3QyxRQUFJLGlCQUFpQixhQUFhLFVBQVU7QUFFNUMsUUFBSSxtQkFBbUIsRUFBRyxrQkFBaUI7QUFHM0MsVUFBTUMsWUFBVyxDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUc7QUFHbkQsVUFBTSxpQkFBaUIsb0JBQUksSUFBWTtBQUd2QyxTQUFLLE1BQU0sUUFBUSxVQUFRO0FBQ3pCLFVBQUksS0FBSyxTQUFTO0FBQ2hCLGNBQU0sYUFBYSxPQUFPLEtBQUssWUFBWSxXQUN2QyxLQUFLLFFBQVEsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUN6QixTQUFTLFdBQVcsS0FBSyxPQUFPLEVBQUUsVUFBVTtBQUVoRCxZQUFJLFdBQVksZ0JBQWUsSUFBSSxVQUFVO0FBQUEsTUFDL0M7QUFHQSxVQUFJLEtBQUssZUFBZTtBQUN0QixjQUFNLGFBQWEsT0FBTyxLQUFLLGtCQUFrQixXQUM3QyxLQUFLLGNBQWMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUMvQixTQUFTLFdBQVcsS0FBSyxhQUFhLEVBQUUsVUFBVTtBQUV0RCxZQUFJLFdBQVksZ0JBQWUsSUFBSSxVQUFVO0FBQUEsTUFDL0M7QUFBQSxJQUNGLENBQUM7QUFJRCxVQUFNLGtCQUFrQixZQUFZLFNBQVMsU0FBUztBQUN0RCxVQUFNLGVBQWUsYUFBYSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxTQUFTLFNBQVM7QUFDekUsVUFBTSxlQUFlLGFBQWEsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsU0FBUyxTQUFTO0FBR3hFLFVBQU0sUUFBNkIsQ0FBQztBQUNwQyxRQUFJLGNBQWlDLENBQUM7QUFHdEMsVUFBTSxrQkFBa0IsYUFBYSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxlQUFlO0FBRXpFLGFBQVMsSUFBSSxHQUFHLElBQUksZ0JBQWdCLEtBQUs7QUFDdkMsWUFBTSxNQUFNLGtCQUFrQixpQkFBaUIsSUFBSTtBQUNuRCxZQUFNLFlBQVksSUFBSSxTQUFTLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDaEQsWUFBTSxVQUFVLEdBQUcsWUFBWSxJQUFJLFNBQVM7QUFFNUMsa0JBQVksS0FBSztBQUFBLFFBQ2Y7QUFBQSxRQUNBLE1BQU07QUFBQSxRQUNOLGdCQUFnQjtBQUFBLFFBQ2hCLFNBQVM7QUFBQSxRQUNULFlBQVk7QUFBQSxRQUNaLFVBQVUsZUFBZSxJQUFJLE9BQU87QUFBQSxNQUN0QyxDQUFDO0FBQUEsSUFDSDtBQUdBLFVBQU1DLGVBQWMsWUFBWTtBQUNoQyxhQUFTLE1BQU0sR0FBRyxPQUFPQSxjQUFhLE9BQU87QUFDM0MsWUFBTSxZQUFZLElBQUksU0FBUyxFQUFFLFNBQVMsR0FBRyxHQUFHO0FBQ2hELFlBQU0sVUFBVSxHQUFHLGVBQWUsSUFBSSxTQUFTO0FBRy9DLFlBQU0sVUFBVSxNQUFNLFVBQVUsTUFBTTtBQUN0QyxZQUFNLGFBQWEsWUFBWSxRQUFRLE9BQU8sWUFBWSxVQUFVLGFBQWE7QUFFakYsa0JBQVksS0FBSztBQUFBLFFBQ2Y7QUFBQSxRQUNBLE1BQU07QUFBQSxRQUNOLGdCQUFnQjtBQUFBLFFBQ2hCO0FBQUEsUUFDQTtBQUFBLFFBQ0EsVUFBVSxlQUFlLElBQUksT0FBTztBQUFBLE1BQ3RDLENBQUM7QUFFRCxVQUFJLFlBQVksV0FBVyxHQUFHO0FBQzVCLGNBQU0sS0FBSyxXQUFXO0FBQ3RCLHNCQUFjLENBQUM7QUFBQSxNQUNqQjtBQUFBLElBQ0Y7QUFHQSxRQUFJLFlBQVksU0FBUyxHQUFHO0FBQzFCLFVBQUksTUFBTTtBQUNWLGFBQU8sWUFBWSxTQUFTLEdBQUc7QUFDN0IsY0FBTSxZQUFZLElBQUksU0FBUyxFQUFFLFNBQVMsR0FBRyxHQUFHO0FBQ2hELGNBQU0sVUFBVSxHQUFHLFlBQVksSUFBSSxTQUFTO0FBRTVDLG9CQUFZLEtBQUs7QUFBQSxVQUNmO0FBQUEsVUFDQSxNQUFNO0FBQUEsVUFDTixnQkFBZ0I7QUFBQSxVQUNoQixTQUFTO0FBQUEsVUFDVCxZQUFZO0FBQUEsVUFDWixVQUFVLGVBQWUsSUFBSSxPQUFPO0FBQUEsUUFDdEMsQ0FBQztBQUNEO0FBQUEsTUFDRjtBQUNBLFlBQU0sS0FBSyxXQUFXO0FBQUEsSUFDeEI7QUFFQSxXQUFPO0FBQUEsTUFDTCxXQUFXLFlBQVksU0FBUyxXQUFXO0FBQUEsTUFDM0MsVUFBQUQ7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLDBCQUFnQztBQUN0QyxTQUFLLG9CQUFvQixLQUFLLGtCQUFrQixNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7QUFDbkUsU0FBSyxZQUFZO0FBQUEsRUFDbkI7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLHNCQUE0QjtBQUNsQyxTQUFLLG9CQUFvQixLQUFLLGtCQUFrQixLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUM7QUFDbEUsU0FBSyxZQUFZO0FBQUEsRUFDbkI7QUFBQSxFQUVVLHFCQUEyQjtBQUNuQyxTQUFLLGNBQWMsS0FBSyxZQUFZLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNyRCxTQUFLLG9CQUFvQixLQUFLO0FBQzlCLFNBQUssWUFBWTtBQUFBLEVBQ25CO0FBQUEsRUFFVSxpQkFBdUI7QUFDL0IsU0FBSyxjQUFjLEtBQUssWUFBWSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDcEQsU0FBSyxvQkFBb0IsS0FBSztBQUM5QixTQUFLLFlBQVk7QUFBQSxFQUNuQjtBQUFBLEVBRVUsa0JBQXdCO0FBQ2hDLFNBQUssY0FBYyxTQUFTLElBQUk7QUFDaEMsU0FBSyxvQkFBb0IsS0FBSztBQUM5QixTQUFLLFlBQVk7QUFBQSxFQUNuQjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1UsZ0NBQWdDLFdBQXdCLE1BQWlCO0FBRWpGLFVBQU0sZ0NBQWdDLFdBQVcsSUFBSTtBQUdyRCxVQUFNLFdBQVcsVUFBVSxpQkFBaUIsb0JBQW9CO0FBQ2hFLGFBQVMsUUFBUSxTQUFPO0FBQ3RCLFVBQUksaUJBQWlCLFNBQVMsQ0FBQyxNQUFNO0FBQ25DLGNBQU0sVUFBVSxJQUFJLGFBQWEsV0FBVztBQUM1QyxZQUFJLFNBQVM7QUFFWCxlQUFLLGNBQWMsU0FBUyxRQUFRLE9BQU87QUFFM0MsZUFBSyxvQkFBb0IsS0FBSztBQUM5QixlQUFLLFlBQVk7QUFBQSxRQUNuQjtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUdELFVBQU0saUJBQWlCLFVBQVUsY0FBYyxxQkFBcUI7QUFDcEUsVUFBTSxpQkFBaUIsVUFBVSxjQUFjLHFCQUFxQjtBQUVwRSxRQUFJLGdCQUFnQjtBQUNsQixxQkFBZSxpQkFBaUIsU0FBUyxNQUFNO0FBQzdDLGFBQUssd0JBQXdCO0FBQUEsTUFDL0IsQ0FBQztBQUFBLElBQ0g7QUFFQSxRQUFJLGdCQUFnQjtBQUNsQixxQkFBZSxpQkFBaUIsU0FBUyxNQUFNO0FBQzdDLGFBQUssb0JBQW9CO0FBQUEsTUFDM0IsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBQUEsRUFFQSxNQUFNLFVBQXlCO0FBQUEsRUFHL0I7QUFDRjs7O0FDMVFPLElBQU0sK0JBQStCO0FBRXJDLElBQU0sdUJBQU4sY0FBbUMsYUFBYTtBQUFBLEVBRXJELFlBQVksTUFBcUIsUUFBYSxNQUFZLGFBQTBCO0FBQ2xGLFVBQU0sTUFBTSxRQUFRLE1BQU0sV0FBVztBQUFBLEVBRXZDO0FBQUEsRUFFQSxjQUFzQjtBQUNwQixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsaUJBQXlCO0FBQ3ZCLFdBQU8sS0FBSyxLQUFLLEVBQUUsaUJBQWlCO0FBQUEsRUFDdEM7QUFBQSxFQUVBLFVBQWtCO0FBQ2hCLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLVSxtQkFBd0I7QUFFaEMsVUFBTSxjQUFjLEtBQUs7QUFHekIsVUFBTSxpQkFBaUIsWUFBWTtBQUNuQyxVQUFNLHVCQUF3QixtQkFBbUIsSUFBSyxJQUFLLG1CQUFtQixJQUFLLElBQUksaUJBQWlCO0FBQ3hHLFVBQU0sZUFBZSxZQUFZLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3JFLFVBQU0sZ0JBQWdCO0FBRXRCLFVBQU0saUJBQWtCO0FBR3hCLFVBQU0sb0JBQW9CLEtBQUsscUJBQXFCO0FBY3BELFVBQU0sT0FBc0IsQ0FBQztBQUM3QixRQUFJLGFBQWE7QUFFakIsYUFBUyxJQUFJLEdBQUcsSUFBSSxnQkFBZ0IsS0FBSztBQUN2QyxZQUFNLFdBQVcsS0FBSyxnQkFBZ0IsVUFBVTtBQUNoRCxZQUFNLFdBQVcsV0FBVyxVQUFVO0FBRXRDLFdBQUssS0FBSztBQUFBLFFBQ1IsTUFBTTtBQUFBLFFBQ04sU0FBUyxXQUFXLFFBQVEsU0FBUyxJQUFJLEdBQUcsS0FBSztBQUFBLFFBQ2pELFlBQVksV0FBVztBQUFBLFFBQ3ZCLFdBQVcsV0FBVztBQUFBLFFBQ3RCLFNBQVMsa0JBQWtCLFFBQVE7QUFBQSxRQUNuQyxlQUFlLEdBQUcsa0JBQWtCLFFBQVEsQ0FBQyxJQUFJLFdBQVcsR0FBRztBQUFBLFFBQy9ELGFBQWE7QUFBQSxNQUNmLENBQUM7QUFFRCxtQkFBYSxXQUFXLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUFBLElBQzFDO0FBR0EsVUFBTSxVQUFVLGNBQWMsS0FBSyxFQUFFLE1BQU0saUJBQWlCLEVBQUUsQ0FBQztBQUMvRCxVQUFNLGFBQWEsR0FBRyxjQUFjLFNBQVMsT0FBTyxDQUFDLE1BQU0sUUFBUSxTQUFTLGFBQWEsQ0FBQztBQUUxRixXQUFPO0FBQUEsTUFDTDtBQUFBLE1BQ0EsWUFBWSxjQUFjO0FBQUEsTUFDMUI7QUFBQSxNQUNBLFVBQVU7QUFBQTtBQUFBLE1BQ1Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBRVUscUJBQTJCO0FBQ25DLFNBQUssY0FBYyxLQUFLLFlBQVksTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ3RELFNBQUssWUFBWTtBQUFBLEVBQ25CO0FBQUEsRUFFVSxpQkFBdUI7QUFDL0IsU0FBSyxjQUFjLEtBQUssWUFBWSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDckQsU0FBSyxZQUFZO0FBQUEsRUFDbkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPVSxnQ0FBZ0MsV0FBd0IsTUFBaUI7QUFFakYsVUFBTSxnQ0FBZ0MsV0FBVyxJQUFJO0FBR3JELFVBQU0sb0JBQW9CLFVBQVUsY0FBYyxzQkFBc0I7QUFFeEUsUUFBSSxtQkFBbUI7QUFFckIsd0JBQWtCLGlCQUFpQixVQUFVLE1BQU07QUFDakQsY0FBTSxnQkFBZ0Isa0JBQWtCO0FBQ3hDLGNBQU0sY0FBYyxVQUFVLGNBQWMseUJBQXlCO0FBRXJFLFlBQUksYUFBYTtBQUVmLG1CQUFTLElBQUksR0FBRyxLQUFLLElBQUksS0FBSztBQUM1Qix3QkFBWSxVQUFVLE9BQU8sUUFBUSxDQUFDLEVBQUU7QUFBQSxVQUMxQztBQUdBLGNBQUksa0JBQWtCLFdBQVc7QUFDL0Isd0JBQVksVUFBVSxJQUFJLGFBQWE7QUFBQSxVQUN6QztBQUdBLHVCQUFhLFFBQVEsZ0NBQWdDLGFBQWE7QUFBQSxRQUNwRTtBQUFBLE1BQ0YsQ0FBQztBQUdELFlBQU0sYUFBYSxhQUFhLFFBQVEsOEJBQThCO0FBQ3RFLFVBQUksWUFBWTtBQUNkLDBCQUFrQixRQUFRO0FBRzFCLGNBQU0sUUFBUSxJQUFJLE1BQU0sUUFBUTtBQUNoQywwQkFBa0IsY0FBYyxLQUFLO0FBQUEsTUFDdkM7QUFBQSxJQUNGO0FBR0EsU0FBSyw4QkFBOEIsU0FBUztBQUFBLEVBQzlDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1RLDhCQUE4QixXQUE4QjtBQUNsRSxVQUFNLGVBQWUsVUFBVSxpQkFBaUIsZ0JBQWdCO0FBRWhFLGlCQUFhLFFBQVEsWUFBVTtBQUM3QixhQUFPLGlCQUFpQixTQUFTLENBQUMsVUFBVTtBQUMxQyxjQUFNLFNBQVMsTUFBTTtBQUdyQixjQUFNLFdBQVcsT0FBTyxRQUFRO0FBQ2hDLGNBQU0sYUFBYSxTQUFTLE9BQU8sUUFBUSxjQUFjLEtBQUssRUFBRTtBQUVoRSxZQUFJLFVBQVU7QUFFWixlQUFLLE9BQU8sSUFBSSxVQUFVLGFBQWEsVUFBVSxJQUFJLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUFBLFFBQ2xGO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSCxDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRUEsTUFBTSxVQUF5QjtBQUFBLEVBRS9CO0FBQ0Y7OztBQy9LQSxJQUFBRSxxQkFBdUI7QUFFaEIsSUFBTSxpQkFBaUI7QUFFdkIsSUFBTSxXQUFOLGNBQXVCLFNBQVM7QUFBQTtBQUFBLEVBSXJDLFlBQVksTUFBNkIsUUFBcUIsTUFBb0IsYUFBMEI7QUFFMUcsVUFBTSxJQUFJO0FBRjZCO0FBQXFCO0FBQW9CO0FBSGxGLHdCQUFRLFNBQWlCLENBQUM7QUFDMUI7QUFBQSx3QkFBUSxzQkFBOEI7QUFLcEMsU0FBSyxPQUFPO0FBQUEsRUFDZDtBQUFBLEVBRUEsY0FBc0I7QUFDcEIsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLGlCQUF5QjtBQUN2QixXQUFPLEtBQUssS0FBSyxFQUFFLGlCQUFpQjtBQUFBLEVBQ3RDO0FBQUEsRUFFQSxVQUFrQjtBQUNoQixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsaUJBQXVCO0FBQzdCLFNBQUsscUJBQXFCLENBQUMsS0FBSztBQUNoQyxTQUFLLE9BQU87QUFBQSxFQUNkO0FBQUEsRUFFQSxNQUFNLFNBQXdCO0FBQzVCLFNBQUssUUFBUSxNQUFNLEtBQUssWUFBWSxLQUFLLFdBQVc7QUFHcEQsVUFBTSxvQkFBb0IsS0FBSyxtQkFBbUIsS0FBSyxLQUFLO0FBRzVELFVBQU0saUJBQWlCLEtBQUsscUJBQXFCLE9BQU8sS0FBSyxxQkFBcUIsaUJBQWlCO0FBR25HLFVBQU0sS0FBSyxPQUFPLGdCQUFnQjtBQUFBLE1BQ2hDLE9BQU8sS0FBSztBQUFBLE1BQ1osY0FBYztBQUFBLE1BQ2Q7QUFBQSxNQUNBLG9CQUFvQixLQUFLO0FBQUEsSUFDM0IsR0FBRyxLQUFLLE1BQU0sS0FBSyxRQUFRLEtBQUssSUFBSTtBQUFBLEVBQ3RDO0FBQUEsRUFFVSw0QkFBNEIsTUFBaUI7QUFFckQsdUJBQUFDLFFBQVcsZUFBZSxrQkFBa0IsU0FBUyxRQUFRO0FBQzNELFVBQUksQ0FBQyxPQUFRLFFBQU87QUFHcEIsZUFBUyxjQUFjLFlBQVk7QUFFakMsWUFBSSxRQUFRLFdBQVcsUUFBUSxXQUFXLE1BQU0sU0FBUztBQUd6RCxZQUFJLFdBQVcsWUFBWTtBQUN6QixpQkFBTyxPQUFPLFdBQVcsVUFBVSxFQUFFLFFBQVEsZUFBYTtBQUN4RCxxQkFBUyxjQUFjLFNBQVM7QUFBQSxVQUNsQyxDQUFDO0FBQUEsUUFDSDtBQUVBLGVBQU87QUFBQSxNQUNUO0FBRUEsYUFBTyxjQUFjLE1BQU07QUFBQSxJQUM3QixDQUFDO0FBR0QsdUJBQUFBLFFBQVcsZUFBZSx5QkFBeUIsU0FBUyxRQUFRLFNBQVM7QUFDM0UsVUFBSSxTQUFTO0FBQ2IsVUFBSSxDQUFDLE9BQVEsUUFBTztBQUdwQixVQUFJLE9BQU8sU0FBUyxPQUFPLE1BQU0sU0FBUyxHQUFHO0FBQzNDLGtCQUFVLFFBQVEsR0FBRyxFQUFFLFlBQVksT0FBTyxNQUFNLFVBQVUsT0FBTyxVQUFVLE9BQU8sT0FBTyxPQUFPLE9BQU8sRUFBRSxDQUFDO0FBQUEsTUFDNUc7QUFHQSxVQUFJLE9BQU8sWUFBWTtBQUNyQixlQUFPLE9BQU8sT0FBTyxVQUFVLEVBQUUsUUFBUSxlQUFhO0FBQ3BELG9CQUFVLG1CQUFBQSxRQUFXLFFBQVEsc0JBQXNCLFdBQVcsT0FBTztBQUFBLFFBQ3ZFLENBQUM7QUFBQSxNQUNIO0FBRUEsYUFBTyxJQUFJLG1CQUFBQSxRQUFXLFdBQVcsTUFBTTtBQUFBLElBQ3pDLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT1UsZ0NBQWdDLFdBQXdCLE1BQWlCO0FBRWpGLFVBQU0sbUJBQW1CLFVBQVUsY0FBYyxxQkFBcUI7QUFDdEUsUUFBSSxrQkFBa0I7QUFDcEIsdUJBQWlCLGlCQUFpQixTQUFTLE1BQU07QUFDL0MsYUFBSyxlQUFlO0FBQUEsTUFDdEIsQ0FBQztBQUFBLElBQ0g7QUFHQSxTQUFLLHlCQUF5QixTQUFTO0FBR3ZDLFVBQU0sWUFBWSxVQUFVLGlCQUFpQixZQUFZO0FBRXpELGNBQVUsUUFBUSxVQUFRO0FBRXhCLFdBQUssU0FBUyxXQUFXO0FBR3pCLFdBQUssaUJBQWlCLFlBQVksQ0FBQyxVQUFVO0FBQzNDLGNBQU0sV0FBVyxLQUFLLGFBQWEsZ0JBQWdCO0FBQ25ELGNBQU0sYUFBYSxLQUFLLGFBQWEsa0JBQWtCO0FBRXZELFlBQUksVUFBVTtBQUNaLGVBQUssYUFBYSxVQUFVLGFBQWEsU0FBUyxVQUFVLElBQUksTUFBUztBQUFBLFFBQzNFO0FBQUEsTUFDRixDQUFDO0FBR0QsV0FBSyxpQkFBaUIsU0FBUyxDQUFDLFVBQVU7QUFFeEMsa0JBQVUsaUJBQWlCLHFCQUFxQixFQUFFLFFBQVEsUUFBTTtBQUM5RCxhQUFHLFlBQVksVUFBVTtBQUFBLFFBQzNCLENBQUM7QUFHRCxhQUFLLFNBQVMsVUFBVTtBQUFBLE1BRTFCLENBQUM7QUFBQSxJQUNILENBQUM7QUFBQSxFQUVIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT1EscUJBQXFCLGNBQXdCO0FBQ25ELFVBQU0scUJBQTBCLENBQUM7QUFHakMsVUFBTSx5QkFBeUIsQ0FBQyxRQUFhLGlCQUEwQjtBQUNyRSxZQUFNLGFBQWEsZ0JBQWdCLE9BQU8sUUFBUTtBQUdsRCxVQUFJLENBQUMsbUJBQW1CLFVBQVUsR0FBRztBQUNuQywyQkFBbUIsVUFBVSxJQUFJO0FBQUEsVUFDL0IsT0FBTyxDQUFDO0FBQUEsVUFDUixNQUFNO0FBQUEsVUFDTixVQUFVO0FBQUEsUUFDWjtBQUFBLE1BQ0Y7QUFHQSxVQUFJLE9BQU8sU0FBUyxPQUFPLE1BQU0sU0FBUyxHQUFHO0FBQzNDLDJCQUFtQixVQUFVLEVBQUUsTUFBTSxLQUFLLEdBQUcsT0FBTyxLQUFLO0FBQUEsTUFDM0Q7QUFHQSxVQUFJLE9BQU8sWUFBWTtBQUNyQixlQUFPLE9BQU8sT0FBTyxVQUFVLEVBQUUsUUFBUSxDQUFDLGNBQW1CO0FBQzNELGlDQUF1QixXQUFXLFVBQVU7QUFBQSxRQUM5QyxDQUFDO0FBQUEsTUFDSDtBQUFBLElBQ0Y7QUFHQSxXQUFPLE9BQU8sWUFBWSxFQUFFLFFBQVEsWUFBVTtBQUM1Qyw2QkFBdUIsTUFBYTtBQUFBLElBQ3RDLENBQUM7QUFFRCxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsTUFBTSxVQUF5QjtBQUFBLEVBRS9CO0FBQ0Y7OztBQ25NQSxJQUFBQyxtQkFBbUM7OztBQ0FuQyxxQkFBaUQ7QUFFakQsSUFBTSxhQUFTLDZCQUFhO0FBQUEsRUFDMUIsT0FBTztBQUFBO0FBQUEsRUFDUCxRQUFRLHNCQUFPO0FBQUEsSUFDYixzQkFBTyxVQUFVLEVBQUUsUUFBUSxzQkFBc0IsQ0FBQztBQUFBLElBQ2xELHNCQUFPLE9BQU8sQ0FBQyxFQUFFLFdBQVcsT0FBTyxRQUFRLE1BQU07QUFDL0MsYUFBTyxJQUFJLFNBQVMsTUFBTSxNQUFNLFlBQVksQ0FBQyxNQUFNLE9BQU87QUFBQSxJQUM1RCxDQUFDO0FBQUEsRUFDSDtBQUFBLEVBQ0EsWUFBWTtBQUFBLElBQ1YsSUFBSSwwQkFBVyxRQUFRO0FBQUE7QUFBQSxJQUN2QixJQUFJLDBCQUFXLEtBQUs7QUFBQSxNQUFFLFVBQVU7QUFBQSxNQUM5QixPQUFPO0FBQUEsTUFDUCxRQUFRLHNCQUFPLEtBQUs7QUFBQSxJQUFFLENBQUM7QUFBQTtBQUFBLEVBQzNCO0FBQ0YsQ0FBQztBQUVELElBQU8saUJBQVE7OztBQ2JSLElBQU0sZUFBNkI7RUFDeEM7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0FBR0YsSUFBQTs7RUFBQSxXQUFBO0FBSUUsYUFBQUMsU0FBWSxTQUFpQkMsSUFBVTtBQUNyQyxVQUFJQSxPQUFNO0FBQUcsY0FBTSxJQUFJLE1BQU0sa0NBQWtDO0FBQy9ELFdBQUssVUFBVTtBQUNmLFdBQUssSUFBSUE7SUFDWDtBQUVPLElBQUFELFNBQUEsVUFBUCxTQUFlLEtBQWU7QUFDNUIsYUFBTyxJQUFJQSxTQUFRLGFBQWEsUUFBUSxHQUFHLENBQUM7SUFDOUM7QUFJQSxJQUFBQSxTQUFBLFVBQUEsTUFBQSxTQUFJQyxJQUFTO0FBQ1gsYUFBTyxLQUFLLE1BQU1BLEtBQUksT0FBTyxJQUFJRCxTQUFRLEtBQUssU0FBU0MsRUFBQztJQUMxRDtBQUdBLElBQUFELFNBQUEsVUFBQSxTQUFBLFNBQU8sT0FBYztBQUNuQixhQUFPLEtBQUssWUFBWSxNQUFNLFdBQVcsS0FBSyxNQUFNLE1BQU07SUFDNUQ7QUFHQSxJQUFBQSxTQUFBLFVBQUEsV0FBQSxXQUFBO0FBQ0UsVUFBSUUsS0FBWSxhQUFhLEtBQUssT0FBTztBQUN6QyxVQUFJLEtBQUs7QUFBRyxRQUFBQSxNQUFLLEtBQUssSUFBSSxJQUFJLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxJQUFJQTtBQUMzRCxhQUFPQTtJQUNUO0FBRUEsSUFBQUYsU0FBQSxVQUFBLGVBQUEsV0FBQTtBQUNFLGFBQU8sS0FBSyxZQUFZLElBQUksSUFBSSxLQUFLLFVBQVU7SUFDakQ7QUFDRixXQUFBQTtFQUFBLEVBbkNBOzs7O0FDVE8sSUFBTSxZQUFZLFNBQ3ZCLE9BQTRCO0FBRTVCLFNBQU8sVUFBVSxRQUFRLFVBQVU7QUFDckM7QUFFTyxJQUFNRyxZQUFXLFNBQVUsT0FBYztBQUM5QyxTQUFPLE9BQU8sVUFBVTtBQUMxQjtBQUVPLElBQU0sZUFBZSxTQUFVLE9BQWM7QUFDbEQsU0FBTyxPQUFPLFVBQVUsWUFBWSxhQUFhLFNBQVMsS0FBbUI7QUFDL0U7QUFFTyxJQUFNLFVBQVUsTUFBTTtBQUt0QixJQUFNLFFBQVEsU0FBVSxPQUFlLEtBQW1CO0FBQW5CLE1BQUEsUUFBQSxRQUFBO0FBQUEsVUFBQTtFQUFtQjtBQUMvRCxNQUFJLFVBQVUsV0FBVyxHQUFHO0FBQzFCLFVBQU07QUFDTixZQUFROztBQUVWLE1BQU0sT0FBTyxDQUFBO0FBQ2IsV0FBUyxJQUFJLE9BQU8sSUFBSSxLQUFLO0FBQUssU0FBSyxLQUFLLENBQUM7QUFDN0MsU0FBTztBQUNUO0FBTU8sSUFBTSxTQUFTLFNBQWEsT0FBZ0IsT0FBYTtBQUM5RCxNQUFJLElBQUk7QUFDUixNQUFNLFFBQXFCLENBQUE7QUFFM0IsTUFBSSxRQUFRLEtBQUssR0FBRztBQUNsQixXQUFPLElBQUksT0FBTztBQUFLLFlBQU0sQ0FBQyxJQUFLLENBQUEsRUFBVyxPQUFPLEtBQUs7U0FDckQ7QUFDTCxXQUFPLElBQUksT0FBTztBQUFLLFlBQU0sQ0FBQyxJQUFJOztBQUVwQyxTQUFPO0FBQ1Q7QUFFTyxJQUFNLFVBQVUsU0FBYSxNQUFhO0FBQy9DLE1BQUksUUFBUSxJQUFJLEdBQUc7QUFDakIsV0FBTzs7QUFHVCxTQUFPLENBQUMsSUFBSTtBQUNkO0FBRU0sU0FBVUMsVUFDZCxNQUNBLGNBQ0EsV0FBZTtBQUFmLE1BQUEsY0FBQSxRQUFBO0FBQUEsZ0JBQUE7RUFBZTtBQUVmLE1BQU0sTUFBTSxPQUFPLElBQUk7QUFDdkIsaUJBQWUsZ0JBQWdCO0FBQy9CLE1BQUksSUFBSSxTQUFTLGNBQWM7QUFDN0IsV0FBTyxPQUFPLEdBQUc7O0FBR25CLGlCQUFlLGVBQWUsSUFBSTtBQUNsQyxNQUFJLGVBQWUsVUFBVSxRQUFRO0FBQ25DLGlCQUFhLE9BQU8sV0FBVyxlQUFlLFVBQVUsTUFBTTs7QUFHaEUsU0FBTyxVQUFVLE1BQU0sR0FBRyxZQUFZLElBQUksT0FBTyxHQUFHO0FBQ3REO0FBS08sSUFBTSxRQUFRLFNBQVUsS0FBYSxLQUFhLEtBQVc7QUFDbEUsTUFBTSxTQUFTLElBQUksTUFBTSxHQUFHO0FBQzVCLFNBQU8sTUFDSCxPQUFPLE1BQU0sR0FBRyxHQUFHLEVBQUUsT0FBTyxDQUFDLE9BQU8sTUFBTSxHQUFHLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUN6RDtBQUNOO0FBaUJPLElBQU0sUUFBUSxTQUFVLEdBQVcsR0FBUztBQUNqRCxNQUFNLElBQUksSUFBSTtBQUVkLFNBQU8sSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJO0FBQzdCO0FBS08sSUFBTSxTQUFTLFNBQVUsR0FBVyxHQUFTO0FBQ2xELFNBQU8sRUFBRSxLQUFLLEtBQUssTUFBTSxJQUFJLENBQUMsR0FBRyxLQUFLLE1BQU0sR0FBRyxDQUFDLEVBQUM7QUFDbkQ7QUFFTyxJQUFNLFFBQVEsU0FBYSxLQUEyQjtBQUMzRCxTQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssSUFBSSxXQUFXO0FBQzNDO0FBU08sSUFBTSxXQUFXLFNBQWEsS0FBMkI7QUFDOUQsU0FBTyxDQUFDLE1BQU0sR0FBRztBQUNuQjtBQUtPLElBQU0sV0FBVyxTQUFhLEtBQTZCLEtBQU07QUFDdEUsU0FBTyxTQUFTLEdBQUcsS0FBSyxJQUFJLFFBQVEsR0FBRyxNQUFNO0FBQy9DOzs7QUNuSU8sSUFBTSxXQUFXLFNBQ3RCLEdBQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQUMsSUFBSztBQUZMLE1BQUEsTUFBQSxRQUFBO0FBQUEsUUFBQTtFQUFLO0FBQ0wsTUFBQSxNQUFBLFFBQUE7QUFBQSxRQUFBO0VBQUs7QUFDTCxNQUFBQSxPQUFBLFFBQUE7QUFBQSxJQUFBQSxLQUFBO0VBQUs7QUFFTCxTQUFPLElBQUksS0FBSyxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUdBLEVBQUMsQ0FBQztBQUNoRDtBQU9PLElBQU0sYUFBYSxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO0FBS2xFLElBQU0sVUFBVSxNQUFPLEtBQUssS0FBSztBQUtqQyxJQUFNLFVBQVU7QUFPaEIsSUFBTSxlQUFlLFNBQVMsTUFBTSxHQUFHLENBQUM7QUFNeEMsSUFBTSxjQUFjLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQW1CeEMsSUFBTUMsY0FBYSxTQUFVLE1BQVk7QUFDOUMsU0FBUSxPQUFPLE1BQU0sS0FBSyxPQUFPLFFBQVEsS0FBTSxPQUFPLFFBQVE7QUFDaEU7QUFFTyxJQUFNQyxVQUFTLFNBQVUsT0FBYztBQUM1QyxTQUFPLGlCQUFpQjtBQUMxQjtBQUVPLElBQU0sY0FBYyxTQUFVLE9BQWM7QUFDakQsU0FBT0EsUUFBTyxLQUFLLEtBQUssQ0FBQyxNQUFNLE1BQU0sUUFBTyxDQUFFO0FBQ2hEO0FBWU8sSUFBTSxjQUFjLFNBQVUsT0FBYSxPQUFXO0FBRzNELE1BQU0sVUFBVSxNQUFNLFFBQU87QUFDN0IsTUFBTSxVQUFVLE1BQU0sUUFBTztBQUc3QixNQUFNLGVBQWUsVUFBVTtBQUcvQixTQUFPLEtBQUssTUFBTSxlQUFlLE9BQU87QUFDMUM7QUFLTyxJQUFNLFlBQVksU0FBVSxNQUFVO0FBQzNDLFNBQU8sWUFBWSxNQUFNLFlBQVk7QUFDdkM7QUFLTyxJQUFNLGNBQWMsU0FBVSxTQUFlO0FBQ2xELFNBQU8sSUFBSSxLQUFLLGFBQWEsUUFBTyxJQUFLLFVBQVUsT0FBTztBQUM1RDtBQUVPLElBQU0sZUFBZSxTQUFVLE1BQVU7QUFDOUMsTUFBTSxRQUFRLEtBQUssWUFBVztBQUM5QixTQUFPLFVBQVUsS0FBS0MsWUFBVyxLQUFLLGVBQWMsQ0FBRSxJQUNsRCxLQUNBLFdBQVcsS0FBSztBQUN0QjtBQUtPLElBQU0sYUFBYSxTQUFVLE1BQVU7QUFDNUMsU0FBTyxZQUFZLEtBQUssVUFBUyxDQUFFO0FBQ3JDO0FBS08sSUFBTSxhQUFhLFNBQVUsTUFBYyxPQUFhO0FBQzdELE1BQU0sT0FBTyxTQUFTLE1BQU0sUUFBUSxHQUFHLENBQUM7QUFDeEMsU0FBTyxDQUFDLFdBQVcsSUFBSSxHQUFHLGFBQWEsSUFBSSxDQUFDO0FBQzlDO0FBS08sSUFBTSxVQUFVLFNBQVUsTUFBWSxNQUFpQjtBQUM1RCxTQUFPLFFBQVE7QUFDZixTQUFPLElBQUksS0FDVCxLQUFLLElBQ0gsS0FBSyxlQUFjLEdBQ25CLEtBQUssWUFBVyxHQUNoQixLQUFLLFdBQVUsR0FDZixLQUFLLFNBQVEsR0FDYixLQUFLLFdBQVUsR0FDZixLQUFLLFdBQVUsR0FDZixLQUFLLGdCQUFlLENBQUUsQ0FDdkI7QUFFTDtBQUVPLElBQU1DLFNBQVEsU0FBVSxNQUFpQjtBQUM5QyxNQUFNLFFBQVEsSUFBSSxLQUFLLEtBQUssUUFBTyxDQUFFO0FBQ3JDLFNBQU87QUFDVDtBQUVPLElBQU0sYUFBYSxTQUFVLE9BQXNCO0FBQ3hELE1BQU0sU0FBUyxDQUFBO0FBQ2YsV0FBUyxJQUFJLEdBQUcsSUFBSSxNQUFNLFFBQVEsS0FBSztBQUNyQyxXQUFPLEtBQUtBLE9BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQzs7QUFFN0IsU0FBTztBQUNUO0FBS08sSUFBTSxPQUFPLFNBQThCLE9BQVU7QUFDMUQsUUFBTSxLQUFLLFNBQVUsR0FBRyxHQUFDO0FBQ3ZCLFdBQU8sRUFBRSxRQUFPLElBQUssRUFBRSxRQUFPO0VBQ2hDLENBQUM7QUFDSDtBQUVPLElBQU0sb0JBQW9CLFNBQVUsTUFBYyxLQUFVO0FBQVYsTUFBQSxRQUFBLFFBQUE7QUFBQSxVQUFBO0VBQVU7QUFDakUsTUFBTSxPQUFPLElBQUksS0FBSyxJQUFJO0FBQzFCLFNBQU87SUFDTEMsVUFBUyxLQUFLLGVBQWMsRUFBRyxTQUFRLEdBQUksR0FBRyxHQUFHO0lBQ2pEQSxVQUFTLEtBQUssWUFBVyxJQUFLLEdBQUcsR0FBRyxHQUFHO0lBQ3ZDQSxVQUFTLEtBQUssV0FBVSxHQUFJLEdBQUcsR0FBRztJQUNsQztJQUNBQSxVQUFTLEtBQUssWUFBVyxHQUFJLEdBQUcsR0FBRztJQUNuQ0EsVUFBUyxLQUFLLGNBQWEsR0FBSSxHQUFHLEdBQUc7SUFDckNBLFVBQVMsS0FBSyxjQUFhLEdBQUksR0FBRyxHQUFHO0lBQ3JDLE1BQU0sTUFBTTtJQUNaLEtBQUssRUFBRTtBQUNYO0FBRU8sSUFBTSxvQkFBb0IsU0FBVSxPQUFhO0FBQ3RELE1BQU0sS0FBSztBQUNYLE1BQU0sT0FBTyxHQUFHLEtBQUssS0FBSztBQUUxQixNQUFJLENBQUM7QUFBTSxVQUFNLElBQUksTUFBTSx3QkFBQSxPQUF3QixLQUFLLENBQUU7QUFFMUQsU0FBTyxJQUFJLEtBQ1QsS0FBSyxJQUNILFNBQVMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUNwQixTQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxHQUN4QixTQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FDcEIsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssR0FDekIsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssR0FDekIsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUMzQjtBQUVMO0FBRUEsSUFBTSxrQkFBa0IsU0FBVSxNQUFZLFVBQWdCO0FBRTVELE1BQU0sVUFBVSxLQUFLLGVBQWUsU0FBUyxFQUFFLFNBQVEsQ0FBRTtBQUV6RCxTQUFPLFFBQVEsUUFBUSxLQUFLLEdBQUcsSUFBSTtBQUNyQztBQUVPLElBQU0saUJBQWlCLFNBQVUsTUFBWSxVQUFnQjtBQUNsRSxNQUFNLGdCQUFnQixLQUFLLGVBQWMsRUFBRyxnQkFBZSxFQUFHO0FBRTlELE1BQU0sZ0JBQWdCLElBQUksS0FBSyxnQkFBZ0IsTUFBTSxhQUFhLENBQUM7QUFDbkUsTUFBTSxpQkFBaUIsSUFBSSxLQUFLLGdCQUFnQixNQUFNLGFBQVEsUUFBUixhQUFRLFNBQVIsV0FBWSxLQUFLLENBQUM7QUFDeEUsTUFBTSxXQUFXLGVBQWUsUUFBTyxJQUFLLGNBQWMsUUFBTztBQUVqRSxTQUFPLElBQUksS0FBSyxLQUFLLFFBQU8sSUFBSyxRQUFRO0FBQzNDOzs7QUM1TUEsSUFBQTs7RUFBQSxXQUFBO0FBUUUsYUFBQUMsWUFBWSxRQUFXLE1BQXVCO0FBTDlCLFdBQUEsVUFBdUI7QUFDdkIsV0FBQSxVQUF1QjtBQUNoQyxXQUFBLFVBQWtCLENBQUE7QUFDbEIsV0FBQSxRQUFRO0FBR2IsV0FBSyxTQUFTO0FBQ2QsV0FBSyxPQUFPO0FBRVosVUFBSSxXQUFXLFdBQVc7QUFDeEIsYUFBSyxVQUFVLEtBQUssTUFDaEIsS0FBSyxTQUNMLElBQUksS0FBSyxLQUFLLE9BQU8sUUFBTyxJQUFLLENBQUM7QUFDdEMsYUFBSyxVQUFVLEtBQUssTUFBTSxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssTUFBTSxRQUFPLElBQUssQ0FBQztpQkFDL0QsV0FBVyxVQUFVO0FBQzlCLGFBQUssVUFBVSxLQUFLLE1BQU0sS0FBSyxLQUFLLElBQUksS0FBSyxLQUFLLEdBQUcsUUFBTyxJQUFLLENBQUM7aUJBQ3pELFdBQVcsU0FBUztBQUM3QixhQUFLLFVBQVUsS0FBSyxNQUFNLEtBQUssS0FBSyxJQUFJLEtBQUssS0FBSyxHQUFHLFFBQU8sSUFBSyxDQUFDOztJQUV0RTtBQVVBLElBQUFBLFlBQUEsVUFBQSxTQUFBLFNBQU8sTUFBVTtBQUNmLFFBQUUsS0FBSztBQUNQLFVBQU0sV0FBVyxLQUFLLFdBQVcsT0FBTyxLQUFLO0FBQzdDLFVBQU0sVUFBVSxLQUFLLFdBQVcsT0FBTyxLQUFLO0FBRTVDLFVBQUksS0FBSyxXQUFXLFdBQVc7QUFDN0IsWUFBSTtBQUFVLGlCQUFPO0FBQ3JCLFlBQUk7QUFBUyxpQkFBTztpQkFDWCxLQUFLLFdBQVcsVUFBVTtBQUNuQyxZQUFJO0FBQVMsaUJBQU87aUJBQ1gsS0FBSyxXQUFXLFNBQVM7QUFDbEMsWUFBSTtBQUFVLGlCQUFPO0FBQ3JCLGFBQUssSUFBSSxJQUFJO0FBQ2IsZUFBTzs7QUFHVCxhQUFPLEtBQUssSUFBSSxJQUFJO0lBQ3RCO0FBT0EsSUFBQUEsWUFBQSxVQUFBLE1BQUEsU0FBSSxNQUFVO0FBQ1osV0FBSyxRQUFRLEtBQUssSUFBSTtBQUN0QixhQUFPO0lBQ1Q7QUFRQSxJQUFBQSxZQUFBLFVBQUEsV0FBQSxXQUFBO0FBQ0UsVUFBTSxNQUFNLEtBQUs7QUFDakIsY0FBUSxLQUFLLFFBQVE7UUFDbkIsS0FBSztRQUNMLEtBQUs7QUFDSCxpQkFBTztRQUNULEtBQUs7UUFDTCxLQUFLO1FBQ0w7QUFDRSxpQkFBUSxJQUFJLFNBQVMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJOztJQUVqRDtBQUVBLElBQUFBLFlBQUEsVUFBQSxRQUFBLFdBQUE7QUFDRSxhQUFPLElBQUlBLFlBQVcsS0FBSyxRQUFRLEtBQUssSUFBSTtJQUM5QztBQUNGLFdBQUFBO0VBQUEsRUFuRkE7Ozs7O0FDREEsSUFBSSxnQkFBZ0IsU0FBUyxHQUFHLEdBQUc7QUFDakMsa0JBQWdCLE9BQU8sa0JBQ2xCLEVBQUUsV0FBVyxDQUFDLEVBQUUsYUFBYSxTQUFTLFNBQVVDLElBQUdDLElBQUc7QUFBRSxJQUFBRCxHQUFFLFlBQVlDO0FBQUEsRUFBRyxLQUMxRSxTQUFVRCxJQUFHQyxJQUFHO0FBQUUsYUFBUyxLQUFLQSxHQUFHLEtBQUksT0FBTyxVQUFVLGVBQWUsS0FBS0EsSUFBRyxDQUFDLEVBQUcsQ0FBQUQsR0FBRSxDQUFDLElBQUlDLEdBQUUsQ0FBQztBQUFBLEVBQUc7QUFDcEcsU0FBTyxjQUFjLEdBQUcsQ0FBQztBQUMzQjtBQUVPLFNBQVMsVUFBVSxHQUFHLEdBQUc7QUFDOUIsTUFBSSxPQUFPLE1BQU0sY0FBYyxNQUFNO0FBQ2pDLFVBQU0sSUFBSSxVQUFVLHlCQUF5QixPQUFPLENBQUMsSUFBSSwrQkFBK0I7QUFDNUYsZ0JBQWMsR0FBRyxDQUFDO0FBQ2xCLFdBQVMsS0FBSztBQUFFLFNBQUssY0FBYztBQUFBLEVBQUc7QUFDdEMsSUFBRSxZQUFZLE1BQU0sT0FBTyxPQUFPLE9BQU8sQ0FBQyxLQUFLLEdBQUcsWUFBWSxFQUFFLFdBQVcsSUFBSSxHQUFHO0FBQ3BGO0FBRU8sSUFBSSxXQUFXLFdBQVc7QUFDL0IsYUFBVyxPQUFPLFVBQVUsU0FBU0MsVUFBUyxHQUFHO0FBQzdDLGFBQVNDLElBQUcsSUFBSSxHQUFHQyxLQUFJLFVBQVUsUUFBUSxJQUFJQSxJQUFHLEtBQUs7QUFDakQsTUFBQUQsS0FBSSxVQUFVLENBQUM7QUFDZixlQUFTLEtBQUtBLEdBQUcsS0FBSSxPQUFPLFVBQVUsZUFBZSxLQUFLQSxJQUFHLENBQUMsRUFBRyxHQUFFLENBQUMsSUFBSUEsR0FBRSxDQUFDO0FBQUEsSUFDL0U7QUFDQSxXQUFPO0FBQUEsRUFDWDtBQUNBLFNBQU8sU0FBUyxNQUFNLE1BQU0sU0FBUztBQUN2QztBQTZLTyxTQUFTLGNBQWMsSUFBSSxNQUFNLE1BQU07QUFDNUMsTUFBSSxRQUFRLFVBQVUsV0FBVyxFQUFHLFVBQVMsSUFBSSxHQUFHRSxLQUFJLEtBQUssUUFBUSxJQUFJLElBQUlBLElBQUcsS0FBSztBQUNqRixRQUFJLE1BQU0sRUFBRSxLQUFLLE9BQU87QUFDcEIsVUFBSSxDQUFDLEdBQUksTUFBSyxNQUFNLFVBQVUsTUFBTSxLQUFLLE1BQU0sR0FBRyxDQUFDO0FBQ25ELFNBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQztBQUFBLElBQ2xCO0FBQUEsRUFDSjtBQUNBLFNBQU8sR0FBRyxPQUFPLE1BQU0sTUFBTSxVQUFVLE1BQU0sS0FBSyxJQUFJLENBQUM7QUFDekQ7OztBQ3JOQSxJQUFBOztFQUFBLFNBQUEsUUFBQTtBQUFnRCxjQUFBQyxxQkFBQSxNQUFBO0FBRzlDLGFBQUFBLG9CQUNFLFFBQ0EsTUFDQSxVQUFrQjtBQUhwQixVQUFBLFFBS0UsT0FBQSxLQUFBLE1BQU0sUUFBUSxJQUFJLEtBQUM7QUFFbkIsWUFBSyxXQUFXOztJQUNsQjtBQUVBLElBQUFBLG9CQUFBLFVBQUEsTUFBQSxTQUFJLE1BQVU7QUFDWixVQUFJLEtBQUssU0FBUyxNQUFNLEtBQUssUUFBUSxNQUFNLEdBQUc7QUFDNUMsYUFBSyxRQUFRLEtBQUssSUFBSTtBQUN0QixlQUFPOztBQUVULGFBQU87SUFDVDtBQUNGLFdBQUFBO0VBQUEsRUFwQmdELGtCQUFVOzs7OztBQ0kxRCxJQUFNLFVBQW9CO0VBQ3hCLFVBQVU7SUFDUjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTs7RUFFRixZQUFZO0lBQ1Y7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBOztFQUVGLFFBQVE7SUFDTixNQUFNO0lBQ04sUUFBUTtJQUNSLGNBQWM7SUFDZCxPQUFPO0lBQ1AsVUFBVTtJQUNWLGNBQWM7SUFDZCxXQUFXO0lBQ1gsV0FBVztJQUNYLGFBQWE7SUFDYixZQUFZO0lBQ1osV0FBVztJQUNYLElBQUk7SUFDSixJQUFJO0lBQ0osS0FBSztJQUNMLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLEtBQUs7SUFDTCxNQUFNO0lBQ04sS0FBSztJQUNMLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxLQUFLO0lBQ0wsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87OztBQUlYLElBQUEsZUFBZTs7O0FDckVmLElBQU0sV0FBVyxTQUFVLEtBQWUsS0FBVztBQUNuRCxTQUFPLElBQUksUUFBUSxHQUFHLE1BQU07QUFDOUI7QUFRQSxJQUFNLGlCQUEwQixTQUFDLElBQUU7QUFBSyxTQUFBLEdBQUcsU0FBUTtBQUFYO0FBSXhDLElBQU0sdUJBQXNDLFNBQzFDLE1BQ0EsT0FDQSxLQUFXO0FBQ1IsU0FBQSxHQUFBLE9BQUcsT0FBSyxHQUFBLEVBQUEsT0FBSSxLQUFHLElBQUEsRUFBQSxPQUFLLElBQUk7QUFBeEI7QUFVTCxJQUFBOztFQUFBLFdBQUE7QUFpQkUsYUFBQUMsUUFDRSxPQUNBLFNBQ0EsVUFDQSxlQUFtRDtBQUZuRCxVQUFBLFlBQUEsUUFBQTtBQUFBLGtCQUFBO01BQWlDO0FBQ2pDLFVBQUEsYUFBQSxRQUFBO0FBQUEsbUJBQUE7TUFBNEI7QUFDNUIsVUFBQSxrQkFBQSxRQUFBO0FBQUEsd0JBQUE7TUFBbUQ7QUFFbkQsV0FBSyxPQUFPLENBQUE7QUFDWixXQUFLLFdBQVcsWUFBWTtBQUM1QixXQUFLLFVBQVU7QUFDZixXQUFLLGdCQUFnQjtBQUNyQixXQUFLLFFBQVE7QUFDYixXQUFLLFVBQVUsTUFBTTtBQUNyQixXQUFLLGNBQWMsTUFBTTtBQUV6QixVQUFJLEtBQUssWUFBWSxZQUFZO0FBQy9CLFlBQU0sYUFBYyxDQUFBLEVBQWdCLE9BQU8sS0FBSyxRQUFRLFVBQVU7QUFDbEUsWUFBTSxjQUFlLENBQUEsRUFBZ0IsT0FBTyxLQUFLLFFBQVEsV0FBVztBQUVwRSxtQkFBVyxLQUFLLFNBQUMsR0FBRyxHQUFDO0FBQUssaUJBQUEsSUFBSTtRQUFKLENBQUs7QUFDL0Isb0JBQVksS0FBSyxTQUFDLEdBQUcsR0FBQztBQUFLLGlCQUFBLElBQUk7UUFBSixDQUFLO0FBRWhDLGFBQUssYUFBYSxXQUFXLE9BQU8sV0FBVztBQUMvQyxZQUFJLENBQUMsS0FBSyxXQUFXO0FBQVEsZUFBSyxhQUFhOztBQUdqRCxVQUFJLFVBQVUsS0FBSyxZQUFZLFNBQVMsR0FBRztBQUN6QyxZQUFNLFlBQVksQ0FBQyxRQUFRLEtBQUssWUFBWSxTQUFTLElBQ2pELENBQUMsS0FBSyxZQUFZLFNBQVMsSUFDM0IsS0FBSyxZQUFZO0FBQ3JCLFlBQU0sT0FBTyxPQUFPLFNBQVM7QUFFN0IsYUFBSyxZQUFZO1VBQ2YsVUFBVSxVQUFVLE9BQU8sU0FBVSxTQUFnQjtBQUNuRCxtQkFBTyxDQUFDLFFBQVE7VUFDbEIsQ0FBQztVQUNELFdBQVcsVUFBVSxPQUFPLFNBQVUsU0FBZ0I7QUFDcEQsbUJBQU8sUUFBUSxRQUFRLENBQUM7VUFDMUIsQ0FBQztVQUNELFlBQ0UsS0FBSyxRQUFRLElBQUksTUFBTSxNQUN2QixLQUFLLFFBQVEsSUFBSSxNQUFNLE1BQ3ZCLEtBQUssUUFBUSxJQUFJLE1BQU0sTUFDdkIsS0FBSyxRQUFRLElBQUksTUFBTSxNQUN2QixLQUFLLFFBQVEsSUFBSSxNQUFNLE1BQ3ZCLEtBQUssUUFBUSxJQUFJLE1BQU0sTUFDdkIsS0FBSyxRQUFRLElBQUksTUFBTTtVQUN6QixZQUNFLEtBQUssUUFBUSxJQUFJLE1BQU0sTUFDdkIsS0FBSyxRQUFRLElBQUksTUFBTSxNQUN2QixLQUFLLFFBQVEsSUFBSSxNQUFNLE1BQ3ZCLEtBQUssUUFBUSxJQUFJLE1BQU0sTUFDdkIsS0FBSyxRQUFRLElBQUksTUFBTSxNQUN2QixLQUFLLFFBQVEsSUFBSSxNQUFNLE1BQ3ZCLEtBQUssUUFBUSxJQUFJLE1BQU07O0FBRzNCLFlBQU0sZUFBZSxTQUFVLEdBQVksR0FBVTtBQUNuRCxpQkFBTyxFQUFFLFVBQVUsRUFBRTtRQUN2QjtBQUVBLGFBQUssVUFBVSxTQUFTLEtBQUssWUFBWTtBQUN6QyxhQUFLLFVBQVUsVUFBVSxLQUFLLFlBQVk7QUFFMUMsWUFBSSxDQUFDLEtBQUssVUFBVSxTQUFTO0FBQVEsZUFBSyxVQUFVLFdBQVc7QUFDL0QsWUFBSSxDQUFDLEtBQUssVUFBVSxVQUFVO0FBQVEsZUFBSyxVQUFVLFlBQVk7YUFDNUQ7QUFDTCxhQUFLLFlBQVk7O0lBRXJCO0FBUU8sSUFBQUEsUUFBQSxxQkFBUCxTQUEwQixPQUFZO0FBQ3BDLFVBQU0sYUFBYTtBQUVuQixVQUFJLEVBQUUsTUFBTSxRQUFRLFFBQVFBLFFBQU87QUFBYyxlQUFPO0FBQ3hELFVBQUksTUFBTSxZQUFZLFNBQVMsTUFBTSxZQUFZO0FBQU8sZUFBTztBQUUvRCxlQUFXLE9BQU8sTUFBTSxhQUFhO0FBQ25DLFlBQUksU0FBUyxDQUFDLFdBQVcsUUFBUSxRQUFRLE1BQU0sR0FBRyxHQUFHO0FBQUcsaUJBQU87QUFDL0QsWUFBSSxDQUFDLFNBQVNBLFFBQU8sWUFBWSxNQUFNLFFBQVEsSUFBSSxHQUFHLEdBQUc7QUFBRyxpQkFBTzs7QUFHckUsYUFBTztJQUNUO0FBRUEsSUFBQUEsUUFBQSxVQUFBLHFCQUFBLFdBQUE7QUFDRSxhQUFPQSxRQUFPLG1CQUFtQixLQUFLLEtBQUs7SUFDN0M7QUFTQSxJQUFBQSxRQUFBLFVBQUEsV0FBQSxXQUFBO0FBQ0UsVUFBTSxVQUFVLEtBQUs7QUFFckIsVUFBSSxFQUFFLEtBQUssUUFBUSxRQUFRQSxRQUFPLGNBQWM7QUFDOUMsZUFBTyxRQUFRLHlEQUF5RDs7QUFHMUUsV0FBSyxPQUFPLENBQUMsUUFBUSxPQUFPLENBQUM7QUFHN0IsV0FBSyxNQUFNLFlBQVksS0FBSyxRQUFRLElBQUksQ0FBQyxFQUFDO0FBRTFDLFVBQUksS0FBSyxRQUFRLE9BQU87QUFDdEIsYUFBSyxJQUFJLFFBQVEsT0FBTyxDQUFDO0FBQ3pCLFlBQU0sUUFBUSxLQUFLLFFBQVE7QUFDM0IsYUFBSyxJQUNILEtBQUssY0FDSCxNQUFNLGVBQWMsR0FDcEIsS0FBSyxTQUFTLFdBQVcsTUFBTSxZQUFXLENBQUUsR0FDNUMsTUFBTSxXQUFVLENBQUUsQ0FDbkI7aUJBRU0sS0FBSyxRQUFRLE9BQU87QUFDN0IsYUFBSyxJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQ3BCLElBQUksS0FBSyxRQUFRLE1BQU0sU0FBUSxDQUFFLEVBQ2pDLElBQ0MsS0FBSyxPQUFPLEtBQUssUUFBUSxLQUFLLElBQUksUUFBUSxPQUFPLElBQUksUUFBUSxNQUFNLENBQUM7O0FBSTFFLFVBQUksQ0FBQyxLQUFLLG1CQUFrQjtBQUFJLGFBQUssSUFBSSxRQUFRLGlCQUFpQixDQUFDO0FBRW5FLGFBQU8sS0FBSyxLQUFLLEtBQUssRUFBRTtJQUMxQjtBQUVBLElBQUFBLFFBQUEsVUFBQSxTQUFBLFdBQUE7QUFDRSxVQUFNLFVBQVUsS0FBSztBQUVyQixVQUFJLEtBQUssUUFBUSxhQUFhO0FBQUcsYUFBSyxJQUFJLEtBQUssUUFBUSxTQUFTLFNBQVEsQ0FBRTtBQUUxRSxXQUFLLElBQ0gsS0FBSyxPQUFPLEtBQUssUUFBUSxRQUFRLElBQUksUUFBUSxPQUFPLElBQUksUUFBUSxNQUFNLENBQUM7SUFFM0U7QUFFQSxJQUFBQSxRQUFBLFVBQUEsV0FBQSxXQUFBO0FBQ0UsVUFBTSxVQUFVLEtBQUs7QUFFckIsVUFBSSxLQUFLLFFBQVEsYUFBYTtBQUFHLGFBQUssSUFBSSxLQUFLLFFBQVEsU0FBUyxTQUFRLENBQUU7QUFFMUUsV0FBSyxJQUNILEtBQUssT0FBTyxLQUFLLFFBQVEsUUFBUSxJQUM3QixRQUFRLFNBQVMsSUFDakIsUUFBUSxRQUFRLENBQUM7SUFFekI7QUFFQSxJQUFBQSxRQUFBLFVBQUEsUUFBQSxXQUFBO0FBQ0UsVUFBTSxVQUFVLEtBQUs7QUFFckIsVUFBSSxLQUFLLFFBQVEsYUFBYTtBQUFHLGFBQUssSUFBSSxLQUFLLFFBQVEsU0FBUyxTQUFRLENBQUU7QUFFMUUsVUFBSSxLQUFLLGFBQWEsS0FBSyxVQUFVLFlBQVk7QUFDL0MsYUFBSyxJQUNILEtBQUssT0FBTyxLQUFLLFFBQVEsUUFBUSxJQUM3QixRQUFRLFVBQVUsSUFDbEIsUUFBUSxTQUFTLENBQUM7YUFFbkI7QUFDTCxhQUFLLElBQ0gsS0FBSyxPQUFPLEtBQUssUUFBUSxRQUFRLElBQUksUUFBUSxNQUFNLElBQUksUUFBUSxLQUFLLENBQUM7O0FBSXpFLFVBQUksS0FBSyxZQUFZLFNBQVM7QUFDNUIsYUFBSyxJQUFJLFFBQVEsSUFBSSxDQUFDO0FBQ3RCLGFBQUssU0FBUTs7QUFHZixVQUFJLEtBQUssWUFBWTtBQUNuQixhQUFLLFlBQVc7aUJBQ1AsS0FBSyxXQUFXO0FBQ3pCLGFBQUssV0FBVTtpQkFDTixLQUFLLFlBQVksUUFBUTtBQUNsQyxhQUFLLFFBQU87O0lBRWhCO0FBRUEsSUFBQUEsUUFBQSxVQUFBLFNBQUEsV0FBQTtBQUNFLFVBQU0sVUFBVSxLQUFLO0FBRXJCLFVBQUksS0FBSyxRQUFRLGFBQWEsR0FBRztBQUMvQixhQUFLLElBQUksS0FBSyxRQUFRLFNBQVMsU0FBUSxDQUFFLEVBQUUsSUFDekMsS0FBSyxPQUFPLEtBQUssUUFBUSxRQUFRLElBQUksUUFBUSxPQUFPLElBQUksUUFBUSxNQUFNLENBQUM7O0FBSTNFLFVBQUksS0FBSyxhQUFhLEtBQUssVUFBVSxZQUFZO0FBQy9DLFlBQUksS0FBSyxRQUFRLGFBQWEsR0FBRztBQUMvQixlQUFLLElBQ0gsS0FBSyxPQUFPLEtBQUssUUFBUSxRQUFRLElBQzdCLFFBQVEsVUFBVSxJQUNsQixRQUFRLFNBQVMsQ0FBQztlQUVuQjtBQUNMLGVBQUssSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFLElBQUksUUFBUSxVQUFVLENBQUM7O2lCQUV4QyxLQUFLLGFBQWEsS0FBSyxVQUFVLFlBQVk7QUFDdEQsYUFBSyxJQUNILEtBQUssT0FBTyxLQUFLLFFBQVEsUUFBUSxJQUFJLFFBQVEsTUFBTSxJQUFJLFFBQVEsS0FBSyxDQUFDO2FBRWxFO0FBQ0wsWUFBSSxLQUFLLFFBQVEsYUFBYTtBQUFHLGVBQUssSUFBSSxRQUFRLE1BQU0sQ0FBQztBQUV6RCxZQUFJLEtBQUssWUFBWSxTQUFTO0FBQzVCLGVBQUssSUFBSSxRQUFRLElBQUksQ0FBQztBQUN0QixlQUFLLFNBQVE7O0FBR2YsWUFBSSxLQUFLLFlBQVk7QUFDbkIsZUFBSyxZQUFXO21CQUNQLEtBQUssV0FBVztBQUN6QixlQUFLLFdBQVU7O0FBR2pCLFlBQUksS0FBSyxZQUFZLFFBQVE7QUFDM0IsZUFBSyxRQUFPOzs7SUFHbEI7QUFFQSxJQUFBQSxRQUFBLFVBQUEsVUFBQSxXQUFBO0FBQ0UsVUFBTSxVQUFVLEtBQUs7QUFFckIsVUFBSSxLQUFLLFlBQVksU0FBUztBQUM1QixZQUFJLEtBQUssUUFBUSxhQUFhLEdBQUc7QUFDL0IsZUFBSyxJQUFJLEtBQUssUUFBUSxTQUFTLFNBQVEsQ0FBRSxFQUFFLElBQUksUUFBUSxRQUFRLENBQUM7QUFDaEUsY0FBSSxLQUFLLE9BQU8sS0FBSyxRQUFRLFFBQVE7QUFBRyxpQkFBSyxJQUFJLFFBQVEsSUFBSSxDQUFDO2VBQ3pEOztBQUdQLGFBQUssU0FBUTthQUNSO0FBQ0wsWUFBSSxLQUFLLFFBQVEsYUFBYSxHQUFHO0FBQy9CLGVBQUssSUFBSSxLQUFLLFFBQVEsU0FBUyxTQUFRLENBQUU7O0FBRTNDLGFBQUssSUFDSCxLQUFLLE9BQU8sS0FBSyxRQUFRLFFBQVEsSUFDN0IsUUFBUSxRQUFRLElBQ2hCLFFBQVEsT0FBTyxDQUFDOztBQUd4QixVQUFJLEtBQUssWUFBWTtBQUNuQixhQUFLLFlBQVc7aUJBQ1AsS0FBSyxhQUFhLEtBQUssVUFBVSxZQUFZO0FBQ3RELGFBQUssSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFLElBQUksUUFBUSxVQUFVLENBQUM7aUJBQ3RDLEtBQUssV0FBVztBQUN6QixhQUFLLFdBQVU7O0lBRW5CO0FBRUEsSUFBQUEsUUFBQSxVQUFBLFNBQUEsV0FBQTtBQUNFLFVBQU0sVUFBVSxLQUFLO0FBRXJCLFVBQUksS0FBSyxZQUFZLFNBQVM7QUFDNUIsWUFBSSxLQUFLLFFBQVEsYUFBYSxHQUFHO0FBQy9CLGVBQUssSUFBSSxLQUFLLFFBQVEsU0FBUyxTQUFRLENBQUU7QUFDekMsZUFBSyxJQUFJLFFBQVEsT0FBTyxDQUFDO2VBQ3BCOztBQUdQLGFBQUssU0FBUTthQUNSO0FBQ0wsWUFBSSxLQUFLLFFBQVEsYUFBYSxHQUFHO0FBQy9CLGVBQUssSUFBSSxLQUFLLFFBQVEsU0FBUyxTQUFRLENBQUU7O0FBRTNDLGFBQUssSUFDSCxLQUFLLE9BQU8sS0FBSyxRQUFRLFFBQVEsSUFBSSxRQUFRLE9BQU8sSUFBSSxRQUFRLE1BQU0sQ0FBQzs7QUFJM0UsVUFBSSxLQUFLLFlBQVk7QUFDbkIsYUFBSyxZQUFXO2lCQUNQLEtBQUssV0FBVztBQUN6QixhQUFLLFdBQVU7O0FBR2pCLFVBQUksS0FBSyxRQUFRLFdBQVc7QUFDMUIsYUFBSyxJQUFJLFFBQVEsUUFBUSxDQUFDLEVBQ3ZCLElBQUksS0FBSyxLQUFLLEtBQUssUUFBUSxXQUFXLEtBQUssS0FBSyxRQUFRLEtBQUssQ0FBQyxDQUFDLEVBQy9ELElBQUksUUFBUSxLQUFLLENBQUM7O0FBR3ZCLFVBQUksS0FBSyxRQUFRLFVBQVU7QUFDekIsYUFBSyxJQUFJLFFBQVEsSUFBSSxDQUFDLEVBQ25CLElBQ0MsS0FBSyxPQUFRLEtBQUssUUFBUSxTQUFzQixNQUFNLElBQ2xELFFBQVEsT0FBTyxJQUNmLFFBQVEsTUFBTSxDQUFDLEVBRXBCLElBQUksS0FBSyxLQUFLLEtBQUssUUFBUSxVQUFVLFFBQVcsUUFBUSxLQUFLLENBQUMsQ0FBQzs7SUFFdEU7QUFFUSxJQUFBQSxRQUFBLFVBQUEsY0FBUixXQUFBO0FBQ0UsVUFBTSxVQUFVLEtBQUs7QUFDckIsVUFBSSxLQUFLLGFBQWEsS0FBSyxVQUFVLFVBQVU7QUFDN0MsYUFBSyxJQUFJLFFBQVEsSUFBSSxDQUFDLEVBQ25CLElBQ0MsS0FBSyxLQUFLLEtBQUssVUFBVSxVQUFVLEtBQUssYUFBYSxRQUFRLElBQUksQ0FBQyxDQUFDLEVBRXBFLElBQUksUUFBUSxLQUFLLENBQUMsRUFDbEIsSUFBSSxLQUFLLEtBQUssS0FBSyxZQUFZLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDO2FBQ3JEO0FBQ0wsYUFBSyxJQUFJLFFBQVEsUUFBUSxDQUFDLEVBQUUsSUFDMUIsS0FBSyxLQUFLLEtBQUssWUFBWSxLQUFLLEtBQUssUUFBUSxLQUFLLENBQUMsQ0FBQzs7SUFJMUQ7QUFFUSxJQUFBQSxRQUFBLFVBQUEsYUFBUixXQUFBO0FBQ0UsVUFBTSxVQUFVLEtBQUs7QUFDckIsVUFBSSxLQUFLLFVBQVUsWUFBWSxDQUFDLEtBQUssVUFBVSxZQUFZO0FBQ3pELGFBQUssSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFLElBQ3RCLEtBQUssS0FBSyxLQUFLLFVBQVUsVUFBVSxLQUFLLFdBQVcsQ0FBQzs7QUFJeEQsVUFBSSxLQUFLLFVBQVUsV0FBVztBQUM1QixZQUFJLEtBQUssVUFBVTtBQUFVLGVBQUssSUFBSSxRQUFRLEtBQUssQ0FBQztBQUVwRCxhQUFLLElBQUksUUFBUSxRQUFRLENBQUMsRUFBRSxJQUMxQixLQUFLLEtBQUssS0FBSyxVQUFVLFdBQVcsS0FBSyxhQUFhLFFBQVEsS0FBSyxDQUFDLENBQUM7O0lBRzNFO0FBRVEsSUFBQUEsUUFBQSxVQUFBLFVBQVIsV0FBQTtBQUNFLFVBQU0sVUFBVSxLQUFLO0FBRXJCLFdBQUssSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFLElBQ3RCLEtBQUssS0FBSyxLQUFLLFlBQVksUUFBUSxRQUFXLFFBQVEsS0FBSyxDQUFDLENBQUM7SUFFakU7QUFFUSxJQUFBQSxRQUFBLFVBQUEsV0FBUixXQUFBO0FBQ0UsV0FBSyxJQUNILEtBQUssS0FBSyxLQUFLLFFBQVEsU0FBUyxLQUFLLFdBQVcsS0FBSyxRQUFRLEtBQUssQ0FBQyxDQUFDO0lBRXhFO0FBRUEsSUFBQUEsUUFBQSxVQUFBLE1BQUEsU0FBSUMsSUFBa0I7QUFDcEIsTUFBQUEsS0FBSSxTQUFTQSxHQUFFLFNBQVEsR0FBSSxFQUFFO0FBQzdCLFVBQUk7QUFDSixVQUFNLFVBQVUsS0FBSztBQUVyQixVQUFJQSxPQUFNO0FBQUksZUFBTyxRQUFRLE1BQU07QUFFbkMsVUFBTSxPQUFPLEtBQUssSUFBSUEsRUFBQztBQUN2QixjQUFRLE1BQU07UUFDWixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7QUFDSCxnQkFBTSxPQUFPLFFBQVEsSUFBSTtBQUN6QjtRQUNGLEtBQUs7UUFDTCxLQUFLO0FBQ0gsZ0JBQU0sT0FBTyxRQUFRLElBQUk7QUFDekI7UUFDRixLQUFLO1FBQ0wsS0FBSztBQUNILGdCQUFNLE9BQU8sUUFBUSxJQUFJO0FBQ3pCO1FBQ0Y7QUFDRSxnQkFBTSxPQUFPLFFBQVEsSUFBSTs7QUFHN0IsYUFBT0EsS0FBSSxJQUFJLE1BQU0sTUFBTSxRQUFRLE1BQU0sSUFBSTtJQUMvQztBQUVBLElBQUFELFFBQUEsVUFBQSxZQUFBLFNBQVUsR0FBUztBQUNqQixhQUFPLEtBQUssU0FBUyxXQUFXLElBQUksQ0FBQztJQUN2QztBQUVBLElBQUFBLFFBQUEsVUFBQSxjQUFBLFNBQVksTUFBc0I7QUFDaEMsVUFBTSxVQUFVRSxVQUFTLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSSxLQUFLLGFBQVk7QUFDbkUsY0FDSSxLQUFpQixJQUFJLEtBQUssSUFBSyxLQUFpQixDQUFDLElBQUksTUFBTSxNQUM3RCxLQUFLLFNBQVMsU0FBUyxPQUFPO0lBRWxDO0FBRUEsSUFBQUYsUUFBQSxVQUFBLFNBQUEsU0FBT0MsSUFBUztBQUNkLGFBQU9BLEtBQUksUUFBUTtJQUNyQjtBQUVBLElBQUFELFFBQUEsVUFBQSxNQUFBLFNBQUlHLElBQVM7QUFDWCxXQUFLLEtBQUssS0FBSyxHQUFHO0FBQ2xCLFdBQUssS0FBSyxLQUFLQSxFQUFDO0FBQ2hCLGFBQU87SUFDVDtBQUVBLElBQUFILFFBQUEsVUFBQSxPQUFBLFNBQ0UsS0FDQSxVQUNBLFlBQ0EsT0FBVztBQUpiLFVBQUEsUUFBQTtBQUlFLFVBQUEsVUFBQSxRQUFBO0FBQUEsZ0JBQUE7TUFBVztBQUVYLFVBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRztBQUNqQixjQUFNLENBQUMsR0FBRzs7QUFFWixVQUFNLFlBQVksU0FDaEIsT0FDQSxXQUNBLGdCQUFzQjtBQUV0QixZQUFJLE9BQU87QUFFWCxpQkFBUyxJQUFJLEdBQUcsSUFBSSxNQUFNLFFBQVEsS0FBSztBQUNyQyxjQUFJLE1BQU0sR0FBRztBQUNYLGdCQUFJLE1BQU0sTUFBTSxTQUFTLEdBQUc7QUFDMUIsc0JBQVEsTUFBTSxpQkFBaUI7bUJBQzFCO0FBQ0wsc0JBQVEsWUFBWTs7O0FBR3hCLGtCQUFRLE1BQU0sQ0FBQzs7QUFFakIsZUFBTztNQUNUO0FBRUEsaUJBQ0UsWUFDQSxTQUFVLEdBQUM7QUFDVCxlQUFPLEVBQUUsU0FBUTtNQUNuQjtBQUVGLFVBQU0sZUFBZSxTQUFDLEtBQWM7QUFDbEMsZUFBTyxZQUFZLFNBQVMsS0FBSyxPQUFNLEdBQUc7TUFDNUM7QUFFQSxVQUFJLFlBQVk7QUFDZCxlQUFPLFVBQVUsSUFBSSxJQUFJLFlBQVksR0FBRyxPQUFPLFVBQVU7YUFDcEQ7QUFDTCxlQUFPLElBQUksSUFBSSxZQUFZLEVBQUUsS0FBSyxRQUFRLEdBQUc7O0lBRWpEO0FBQ0YsV0FBQUE7RUFBQSxFQWxkQTs7Ozs7QUNoQ0EsSUFBQTs7RUFBQSxXQUFBO0FBT0UsYUFBQUksUUFBWSxPQUE4QjtBQUZsQyxXQUFBLE9BQU87QUFHYixXQUFLLFFBQVE7SUFDZjtBQUVBLElBQUFBLFFBQUEsVUFBQSxRQUFBLFNBQU0sTUFBWTtBQUNoQixXQUFLLE9BQU87QUFDWixXQUFLLE9BQU87QUFDWixhQUFPLEtBQUssV0FBVTtJQUN4QjtBQUVBLElBQUFBLFFBQUEsVUFBQSxTQUFBLFdBQUE7QUFDRSxhQUFPLEtBQUssUUFBUSxLQUFLLFdBQVc7SUFDdEM7QUFFQSxJQUFBQSxRQUFBLFVBQUEsYUFBQSxXQUFBO0FBQ0UsVUFBSTtBQUNKLFVBQUk7QUFFSixXQUFLLFNBQVM7QUFDZCxXQUFLLFFBQVE7QUFDYixTQUFHO0FBQ0QsWUFBSSxLQUFLO0FBQU0saUJBQU87QUFFdEIsWUFBSSxPQUFJO0FBQ1IsZUFBTztBQUNQLGlCQUFXLFVBQVEsS0FBSyxPQUFPO0FBQzdCLGlCQUFPLEtBQUssTUFBTSxNQUFJO0FBQ3RCLGNBQU1DLFNBQVEsS0FBSyxLQUFLLEtBQUssSUFBSTtBQUNqQyxjQUFJQSxRQUFPO0FBQ1QsZ0JBQUksU0FBUyxRQUFRQSxPQUFNLENBQUMsRUFBRSxTQUFTLEtBQUssQ0FBQyxFQUFFLFFBQVE7QUFDckQscUJBQU9BO0FBQ1AsMkJBQWE7Ozs7QUFLbkIsWUFBSSxRQUFRLE1BQU07QUFDaEIsZUFBSyxPQUFPLEtBQUssS0FBSyxPQUFPLEtBQUssQ0FBQyxFQUFFLE1BQU07QUFFM0MsY0FBSSxLQUFLLFNBQVM7QUFBSSxpQkFBSyxPQUFPOztBQUdwQyxZQUFJLFFBQVEsTUFBTTtBQUNoQixlQUFLLE9BQU87QUFDWixlQUFLLFNBQVM7QUFDZCxlQUFLLFFBQVE7QUFDYjs7ZUFFSyxlQUFlO0FBRXhCLFdBQUssU0FBUztBQUNkLFdBQUssUUFBUTtBQUNiLGFBQU87SUFDVDtBQUVBLElBQUFELFFBQUEsVUFBQSxTQUFBLFNBQU8sTUFBWTtBQUNqQixVQUFJLEtBQUssV0FBVyxNQUFNO0FBQ3hCLFlBQUksS0FBSyxPQUFPO0FBQ2QsY0FBTSxJQUFJLEtBQUs7QUFDZixlQUFLLFdBQVU7QUFDZixpQkFBTzs7QUFHVCxhQUFLLFdBQVU7QUFDZixlQUFPOztBQUdULGFBQU87SUFDVDtBQUVBLElBQUFBLFFBQUEsVUFBQSxlQUFBLFdBQUE7QUFDRSxhQUFPLEtBQUssT0FBTyxRQUFRO0lBQzdCO0FBRUEsSUFBQUEsUUFBQSxVQUFBLFNBQUEsU0FBTyxNQUFZO0FBQ2pCLFVBQUksS0FBSyxPQUFPLElBQUk7QUFBRyxlQUFPO0FBRTlCLFlBQU0sSUFBSSxNQUFNLGNBQWMsT0FBTyxnQkFBZ0IsS0FBSyxNQUFNO0lBQ2xFO0FBQ0YsV0FBQUE7RUFBQSxFQXRGQTs7QUF3RmMsU0FBUCxVQUEyQixNQUFjLFVBQTRCO0FBQTVCLE1BQUEsYUFBQSxRQUFBO0FBQUEsZUFBQTtFQUE0QjtBQUMxRSxNQUFNLFVBQTRCLENBQUE7QUFDbEMsTUFBTSxNQUFNLElBQUksT0FBTyxTQUFTLE1BQU07QUFFdEMsTUFBSSxDQUFDLElBQUksTUFBTSxJQUFJO0FBQUcsV0FBTztBQUU3QixJQUFDO0FBQ0QsU0FBTztBQUVQLFdBQVMsSUFBQztBQUVSLFFBQUksT0FBTyxPQUFPO0FBQ2xCLFFBQU1FLEtBQUksSUFBSSxhQUFZO0FBQzFCLFFBQUlBO0FBQUcsY0FBUSxXQUFXLFNBQVNBLEdBQUUsQ0FBQyxHQUFHLEVBQUU7QUFDM0MsUUFBSSxJQUFJLE9BQU07QUFBSSxZQUFNLElBQUksTUFBTSxnQkFBZ0I7QUFFbEQsWUFBUSxJQUFJLFFBQVE7TUFDbEIsS0FBSztBQUNILGdCQUFRLE9BQU8sTUFBTTtBQUNyQixZQUFJLElBQUksV0FBVSxHQUFJO0FBQ3BCLGFBQUU7QUFDRixZQUFDOztBQUVIOzs7TUFJRixLQUFLO0FBQ0gsZ0JBQVEsT0FBTyxNQUFNO0FBQ3JCLGdCQUFRLFlBQVksQ0FBQyxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxFQUFFO0FBQ3JFLFlBQUksV0FBVTtBQUNkLFdBQUU7QUFDRixVQUFDO0FBQ0Q7TUFFRixLQUFLO0FBQ0gsZ0JBQVEsT0FBTyxNQUFNO0FBQ3JCLFlBQUksSUFBSSxXQUFVLEdBQUk7QUFDcEIsYUFBRTtBQUNGLGFBQUU7QUFDRixZQUFDOztBQUVIO01BRUYsS0FBSztBQUNILGdCQUFRLE9BQU8sTUFBTTtBQUNyQixZQUFJLElBQUksV0FBVSxHQUFJO0FBQ3BCLGFBQUU7QUFDRixZQUFDOztBQUVIO01BRUYsS0FBSztBQUNILGdCQUFRLE9BQU8sTUFBTTtBQUNyQixZQUFJLElBQUksV0FBVSxHQUFJO0FBQ3BCLGFBQUU7QUFDRixZQUFDOztBQUVIO01BRUYsS0FBSztBQUNILGdCQUFRLE9BQU8sTUFBTTtBQUNyQixZQUFJLElBQUksV0FBVSxHQUFJO0FBQ3BCLGFBQUU7QUFDRixZQUFDOztBQUVIO01BRUYsS0FBSztBQUNILGdCQUFRLE9BQU8sTUFBTTtBQUNyQixZQUFJLElBQUksV0FBVSxHQUFJO0FBQ3BCLGFBQUU7QUFDRixZQUFDOztBQUVIO01BRUYsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztBQUNILGdCQUFRLE9BQU8sTUFBTTtBQUNyQixZQUFNLE1BQWtCLElBQUksT0FDekIsT0FBTyxHQUFHLENBQUMsRUFDWCxZQUFXO0FBQ2QsZ0JBQVEsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDO0FBRS9CLFlBQUksQ0FBQyxJQUFJLFdBQVU7QUFBSTtBQUd2QixlQUFPLElBQUksT0FBTyxPQUFPLEdBQUc7QUFDMUIsY0FBSSxJQUFJLE9BQU07QUFBSSxrQkFBTSxJQUFJLE1BQU0sZ0JBQWdCO0FBRWxELGNBQU0sTUFBTSxVQUFTO0FBQ3JCLGNBQUksQ0FBQyxLQUFLO0FBQ1Isa0JBQU0sSUFBSSxNQUNSLHVCQUF1QixJQUFJLFNBQVMsb0JBQW9COztBQUk1RCxrQkFBUSxVQUFVLEtBQUssTUFBTSxHQUFHLENBQWM7QUFDOUMsY0FBSSxXQUFVOztBQUVoQixXQUFFO0FBQ0YsY0FBSztBQUNMLFVBQUM7QUFDRDtNQUVGLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztBQUNILGdCQUFRLE9BQU8sTUFBTTtBQUNyQixnQkFBUSxVQUFVLENBQUMsUUFBTyxDQUFZO0FBRXRDLFlBQUksQ0FBQyxJQUFJLFdBQVU7QUFBSTtBQUd2QixlQUFPLElBQUksT0FBTyxPQUFPLEdBQUc7QUFDMUIsY0FBSSxJQUFJLE9BQU07QUFBSSxrQkFBTSxJQUFJLE1BQU0sZ0JBQWdCO0FBRWxELGNBQU0sSUFBSSxRQUFPO0FBQ2pCLGNBQUksQ0FBQyxHQUFHO0FBQ04sa0JBQU0sSUFBSSxNQUNSLHVCQUF1QixJQUFJLFNBQVMsa0JBQWtCOztBQUkxRCxrQkFBUSxRQUFRLEtBQUssQ0FBQztBQUN0QixjQUFJLFdBQVU7O0FBR2hCLFdBQUU7QUFDRixVQUFDO0FBQ0Q7TUFFRjtBQUNFLGNBQU0sSUFBSSxNQUFNLGdCQUFnQjs7RUFFdEM7QUFFQSxXQUFTLEtBQUU7QUFDVCxRQUFNLEtBQUssSUFBSSxPQUFPLElBQUk7QUFDMUIsUUFBTSxNQUFNLElBQUksT0FBTyxLQUFLO0FBQzVCLFFBQUksRUFBRSxNQUFNO0FBQU07QUFFbEIsT0FBRztBQUNELFVBQU0sTUFBTSxVQUFTO0FBQ3JCLFVBQU0sTUFBTSxVQUFTO0FBQ3JCLFVBQU0sSUFBSSxRQUFPO0FBR2pCLFVBQUksS0FBSztBQUdQLFlBQUksS0FBSztBQUNQLGNBQUksV0FBVTtBQUNkLGNBQUksQ0FBQyxRQUFRO0FBQVcsb0JBQVEsWUFBWSxDQUFBO0FBQzFDLGtCQUFRLFVBQTBCLEtBQ2xDLE1BQU0sR0FBaUIsRUFBRSxJQUFJLEdBQUcsQ0FBQztlQUU5QjtBQUNMLGNBQUksQ0FBQyxRQUFRO0FBQVksb0JBQVEsYUFBYSxDQUFBO0FBQzVDLGtCQUFRLFdBQXdCLEtBQUssR0FBRztBQUMxQyxjQUFJLE9BQU8sUUFBUTs7aUJBR1osS0FBSztBQUNkLFlBQUksV0FBVTtBQUNkLFlBQUksQ0FBQyxRQUFRO0FBQVcsa0JBQVEsWUFBWSxDQUFBO0FBQzFDLGdCQUFRLFVBQTBCLEtBQUssTUFBTSxHQUFpQixDQUFDO2lCQUN4RCxJQUFJLFdBQVcsY0FBYztBQUN0QyxZQUFJLFdBQVU7QUFDZCxZQUFJLENBQUMsUUFBUSxXQUFXO0FBQ3RCLGtCQUFRLFlBQVksQ0FBQyxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxFQUFFOztpQkFFOUQsSUFBSSxXQUFXLFdBQVc7QUFDbkMsWUFBSSxXQUFVO0FBQ2QsWUFBSUEsS0FBSSxJQUFJLGFBQVk7QUFDeEIsWUFBSSxDQUFDQSxJQUFHO0FBQ04sZ0JBQU0sSUFBSSxNQUNSLHVCQUF1QixJQUFJLFNBQVMsd0JBQXdCOztBQUdoRSxnQkFBUSxXQUFXLENBQUMsU0FBU0EsR0FBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3RDLGVBQU8sSUFBSSxPQUFPLE9BQU8sR0FBRztBQUMxQixVQUFBQSxLQUFJLElBQUksYUFBWTtBQUNwQixjQUFJLENBQUNBLElBQUc7QUFDTixrQkFBTSxJQUFJLE1BQ1IsdUJBQXVCLElBQUksU0FBUyxxQkFBcUI7O0FBRzdELGtCQUFRLFNBQVMsS0FBSyxTQUFTQSxHQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7O2lCQUVqQyxHQUFHO0FBQ1osWUFBSSxXQUFVO0FBQ2QsWUFBSSxDQUFDLFFBQVE7QUFBUyxrQkFBUSxVQUFVLENBQUE7QUFDdEMsZ0JBQVEsUUFBcUIsS0FBSyxDQUFDO2FBQ2hDO0FBQ0w7O2FBRUssSUFBSSxPQUFPLE9BQU8sS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJO0VBQ3RFO0FBRUEsV0FBUyxLQUFFO0FBQ1QsUUFBTSxLQUFLLElBQUksT0FBTyxJQUFJO0FBQzFCLFFBQUksQ0FBQztBQUFJO0FBRVQsT0FBRztBQUNELFVBQUlBLEtBQUksSUFBSSxhQUFZO0FBQ3hCLFVBQUksQ0FBQ0EsSUFBRztBQUNOLGNBQU0sSUFBSSxNQUFNLHVCQUF1QixJQUFJLFNBQVMsaUJBQWlCOztBQUV2RSxjQUFRLFNBQVMsQ0FBQyxTQUFTQSxHQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDcEMsYUFBTyxJQUFJLE9BQU8sT0FBTyxHQUFHO0FBQzFCLFFBQUFBLEtBQUksSUFBSSxhQUFZO0FBQ3BCLFlBQUksQ0FBQ0EsSUFBRztBQUNOLGdCQUFNLElBQUksTUFBTSx1QkFBdUIsSUFBSSxTQUFTLGlCQUFpQjs7QUFFdkUsZ0JBQVEsT0FBTyxLQUFLLFNBQVNBLEdBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQzs7YUFFakMsSUFBSSxPQUFPLE9BQU8sS0FBSyxJQUFJLE9BQU8sSUFBSTtFQUNqRDtBQUVBLFdBQVMsVUFBTztBQUNkLFlBQVEsSUFBSSxRQUFRO01BQ2xCLEtBQUs7QUFDSCxlQUFPO01BQ1QsS0FBSztBQUNILGVBQU87TUFDVCxLQUFLO0FBQ0gsZUFBTztNQUNULEtBQUs7QUFDSCxlQUFPO01BQ1QsS0FBSztBQUNILGVBQU87TUFDVCxLQUFLO0FBQ0gsZUFBTztNQUNULEtBQUs7QUFDSCxlQUFPO01BQ1QsS0FBSztBQUNILGVBQU87TUFDVCxLQUFLO0FBQ0gsZUFBTztNQUNULEtBQUs7QUFDSCxlQUFPO01BQ1QsS0FBSztBQUNILGVBQU87TUFDVCxLQUFLO0FBQ0gsZUFBTztNQUNUO0FBQ0UsZUFBTzs7RUFFYjtBQUVBLFdBQVMsWUFBUztBQUNoQixZQUFRLElBQUksUUFBUTtNQUNsQixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO0FBQ0gsZUFBTyxJQUFJLE9BQU8sT0FBTyxHQUFHLENBQUMsRUFBRSxZQUFXO01BQzVDO0FBQ0UsZUFBTzs7RUFFYjtBQUVBLFdBQVMsWUFBUztBQUNoQixZQUFRLElBQUksUUFBUTtNQUNsQixLQUFLO0FBQ0gsWUFBSSxXQUFVO0FBQ2QsZUFBTztNQUNULEtBQUs7QUFDSCxZQUFJLFdBQVU7QUFDZCxlQUFPO01BQ1QsS0FBSztBQUNILFlBQUksV0FBVTtBQUNkLGVBQU8sSUFBSSxPQUFPLE1BQU0sSUFBSSxLQUFLO01BQ25DLEtBQUs7QUFDSCxZQUFJLFdBQVU7QUFDZCxlQUFPLElBQUksT0FBTyxNQUFNLElBQUksS0FBSztNQUNuQyxLQUFLO0FBQ0gsWUFBTSxJQUFJLFNBQVMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO0FBQ25DLFlBQUksSUFBSSxRQUFRLElBQUk7QUFBSyxnQkFBTSxJQUFJLE1BQU0sdUJBQXVCLENBQUM7QUFFakUsWUFBSSxXQUFVO0FBQ2QsZUFBTyxJQUFJLE9BQU8sTUFBTSxJQUFJLENBQUMsSUFBSTtNQUVuQztBQUNFLGVBQU87O0VBRWI7QUFFQSxXQUFTLFFBQUs7QUFDWixRQUFJLE9BQU8sSUFBSTtBQUNmLFFBQUksT0FBTyxLQUFLO0FBRWhCLFFBQUksTUFBTSxVQUFTO0FBQ25CLFFBQUksQ0FBQztBQUFLO0FBRVYsWUFBUSxhQUFhLENBQUMsR0FBRztBQUN6QixRQUFJLFdBQVU7QUFFZCxXQUFPLElBQUksT0FBTyxPQUFPLEdBQUc7QUFDMUIsWUFBTSxVQUFTO0FBQ2YsVUFBSSxDQUFDLEtBQUs7QUFDUixjQUFNLElBQUksTUFDUix1QkFBdUIsSUFBSSxTQUFTLHFCQUFxQjs7QUFJN0QsY0FBUSxXQUFXLEtBQUssR0FBRztBQUMzQixVQUFJLFdBQVU7O0VBRWxCO0FBRUEsV0FBUyxJQUFDO0FBQ1IsUUFBSSxJQUFJLFdBQVcsU0FBUztBQUMxQixVQUFNLE9BQU8sS0FBSyxNQUFNLElBQUksSUFBSTtBQUVoQyxVQUFJLENBQUM7QUFBTSxjQUFNLElBQUksTUFBTSw2QkFBNkIsSUFBSSxJQUFJO0FBQ2hFLGNBQVEsUUFBUSxJQUFJLEtBQUssSUFBSTtlQUNwQixJQUFJLE9BQU8sS0FBSyxHQUFHO0FBQzVCLGNBQVEsUUFBUSxTQUFTLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRTtBQUN6QyxVQUFJLE9BQU8sUUFBUTs7RUFHdkI7QUFDRjs7O0FDdGFBLElBQVk7Q0FBWixTQUFZQyxZQUFTO0FBQ25CLEVBQUFBLFdBQUFBLFdBQUEsUUFBQSxJQUFBLENBQUEsSUFBQTtBQUNBLEVBQUFBLFdBQUFBLFdBQUEsU0FBQSxJQUFBLENBQUEsSUFBQTtBQUNBLEVBQUFBLFdBQUFBLFdBQUEsUUFBQSxJQUFBLENBQUEsSUFBQTtBQUNBLEVBQUFBLFdBQUFBLFdBQUEsT0FBQSxJQUFBLENBQUEsSUFBQTtBQUNBLEVBQUFBLFdBQUFBLFdBQUEsUUFBQSxJQUFBLENBQUEsSUFBQTtBQUNBLEVBQUFBLFdBQUFBLFdBQUEsVUFBQSxJQUFBLENBQUEsSUFBQTtBQUNBLEVBQUFBLFdBQUFBLFdBQUEsVUFBQSxJQUFBLENBQUEsSUFBQTtBQUNGLEdBUlksY0FBQSxZQUFTLENBQUEsRUFBQTtBQVVmLFNBQVUscUJBQ2QsTUFBZTtBQU1mLFNBQU8sT0FBTyxVQUFVO0FBQzFCOzs7QUMrREEsSUFBTSxXQUFXLFNBQVUsTUFBYyxVQUE0QjtBQUE1QixNQUFBLGFBQUEsUUFBQTtBQUFBLGVBQUE7RUFBNEI7QUFDbkUsU0FBTyxJQUFJLE1BQU0sVUFBVSxNQUFNLFFBQVEsS0FBSyxNQUFTO0FBQ3pEO0FBRUEsSUFBTSxTQUFTO0VBQ2I7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztBQUdGLGVBQU8sY0FBYyxDQUFBO0FBQ3JCLGVBQU8sWUFBWSxVQUFVLE1BQU0sSUFBSTtBQUN2QyxlQUFPLFlBQVksVUFBVSxRQUFRLElBQUk7QUFDekMsZUFBTyxZQUFZLFVBQVUsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sTUFBTTtBQUM5RCxlQUFPLFlBQVksVUFBVSxNQUFNLElBQUk7QUFDdkMsZUFBTyxZQUFZLFVBQVUsT0FBTyxJQUFJO0FBQ3hDLGVBQU8sWUFBWSxVQUFVLE1BQU0sSUFBSSxDQUFDLFlBQVksV0FBVyxFQUFFLE9BQU8sTUFBTTtBQU05RSxJQUFNLFNBQVMsU0FDYixPQUNBLFNBQ0EsVUFDQSxlQUE2QjtBQUU3QixTQUFPLElBQUksZUFBTyxPQUFPLFNBQVMsVUFBVSxhQUFhLEVBQUUsU0FBUTtBQUNyRTtBQUVRLElBQUEscUJBQXVCLGVBQU07OztBQy9IckMsSUFBQTs7RUFBQSxXQUFBO0FBTUUsYUFBQUMsTUFDRSxNQUNBLFFBQ0EsUUFDQSxhQUFtQjtBQUVuQixXQUFLLE9BQU87QUFDWixXQUFLLFNBQVM7QUFDZCxXQUFLLFNBQVM7QUFDZCxXQUFLLGNBQWMsZUFBZTtJQUNwQztBQUVBLElBQUFBLE1BQUEsVUFBQSxXQUFBLFdBQUE7QUFDRSxhQUFPLEtBQUs7SUFDZDtBQUVBLElBQUFBLE1BQUEsVUFBQSxhQUFBLFdBQUE7QUFDRSxhQUFPLEtBQUs7SUFDZDtBQUVBLElBQUFBLE1BQUEsVUFBQSxhQUFBLFdBQUE7QUFDRSxhQUFPLEtBQUs7SUFDZDtBQUVBLElBQUFBLE1BQUEsVUFBQSxrQkFBQSxXQUFBO0FBQ0UsYUFBTyxLQUFLO0lBQ2Q7QUFFQSxJQUFBQSxNQUFBLFVBQUEsVUFBQSxXQUFBO0FBQ0UsY0FDRyxLQUFLLE9BQU8sS0FBSyxLQUFLLEtBQUssU0FBUyxLQUFLLEtBQUssVUFBVSxNQUN6RCxLQUFLO0lBRVQ7QUFDRixXQUFBQTtFQUFBLEVBeENBOztBQTBDQSxJQUFBQzs7RUFBQSxTQUFBLFFBQUE7QUFBOEIsY0FBQUEsV0FBQSxNQUFBO0FBaUI1QixhQUFBQSxVQUNFLE1BQ0EsT0FDQSxLQUNBLE1BQ0EsUUFDQSxRQUNBLGFBQW1CO0FBUHJCLFVBQUEsUUFTRSxPQUFBLEtBQUEsTUFBTSxNQUFNLFFBQVEsUUFBUSxXQUFXLEtBQUM7QUFDeEMsWUFBSyxPQUFPO0FBQ1osWUFBSyxRQUFRO0FBQ2IsWUFBSyxNQUFNOztJQUNiO0FBekJPLElBQUFBLFVBQUEsV0FBUCxTQUFnQixNQUFVO0FBQ3hCLGFBQU8sSUFBSSxLQUNULEtBQUssZUFBYyxHQUNuQixLQUFLLFlBQVcsSUFBSyxHQUNyQixLQUFLLFdBQVUsR0FDZixLQUFLLFlBQVcsR0FDaEIsS0FBSyxjQUFhLEdBQ2xCLEtBQUssY0FBYSxHQUNsQixLQUFLLFFBQU8sSUFBSyxHQUFJO0lBRXpCO0FBaUJBLElBQUFBLFVBQUEsVUFBQSxhQUFBLFdBQUE7QUFDRSxhQUFPLFdBQVcsSUFBSSxLQUFLLEtBQUssUUFBTyxDQUFFLENBQUM7SUFDNUM7QUFFQSxJQUFBQSxVQUFBLFVBQUEsVUFBQSxXQUFBO0FBQ0UsYUFBTyxJQUFJLEtBQ1QsS0FBSyxJQUNILEtBQUssTUFDTCxLQUFLLFFBQVEsR0FDYixLQUFLLEtBQ0wsS0FBSyxNQUNMLEtBQUssUUFDTCxLQUFLLFFBQ0wsS0FBSyxXQUFXLENBQ2pCLEVBQ0QsUUFBTztJQUNYO0FBRUEsSUFBQUEsVUFBQSxVQUFBLFNBQUEsV0FBQTtBQUNFLGFBQU8sS0FBSztJQUNkO0FBRUEsSUFBQUEsVUFBQSxVQUFBLFdBQUEsV0FBQTtBQUNFLGFBQU8sS0FBSztJQUNkO0FBRUEsSUFBQUEsVUFBQSxVQUFBLFVBQUEsV0FBQTtBQUNFLGFBQU8sS0FBSztJQUNkO0FBRU8sSUFBQUEsVUFBQSxVQUFBLFdBQVAsU0FBZ0IsT0FBYTtBQUMzQixXQUFLLFFBQVE7SUFDZjtBQUVPLElBQUFBLFVBQUEsVUFBQSxZQUFQLFNBQWlCQyxTQUFjO0FBQzdCLFdBQUssU0FBU0E7QUFDZCxVQUFJLEtBQUssUUFBUSxJQUFJO0FBQ25CLFlBQU0sVUFBVSxLQUFLLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDMUMsWUFBTSxXQUFXLE1BQU0sS0FBSyxPQUFPLEVBQUU7QUFDckMsYUFBSyxRQUFRO0FBQ2IsYUFBSyxRQUFRO0FBQ2IsWUFBSSxLQUFLLFVBQVUsR0FBRztBQUNwQixlQUFLLFFBQVE7QUFDYixZQUFFLEtBQUs7OztJQUdiO0FBRU8sSUFBQUQsVUFBQSxVQUFBLFlBQVAsU0FBaUIsTUFBYyxNQUFZO0FBQ3pDLFVBQUksT0FBTyxLQUFLLFdBQVUsR0FBSTtBQUM1QixhQUFLLE9BQU8sRUFBRSxLQUFLLFdBQVUsSUFBSyxLQUFLLElBQUksU0FBUyxPQUFPO2FBQ3REO0FBQ0wsYUFBSyxPQUFPLEVBQUUsS0FBSyxXQUFVLElBQUssUUFBUSxPQUFPOztBQUduRCxXQUFLLE9BQU07SUFDYjtBQUVPLElBQUFBLFVBQUEsVUFBQSxXQUFQLFNBQWdCLE1BQVk7QUFDMUIsV0FBSyxPQUFPO0FBQ1osV0FBSyxPQUFNO0lBQ2I7QUFFTyxJQUFBQSxVQUFBLFVBQUEsV0FBUCxTQUFnQixPQUFlLFVBQW1CLFFBQWdCO0FBQ2hFLFVBQUksVUFBVTtBQUVaLGFBQUssUUFBUSxLQUFLLE9BQU8sS0FBSyxLQUFLLFFBQVEsS0FBSyxJQUFJOztBQUd0RCxpQkFBUztBQUNQLGFBQUssUUFBUTtBQUNQLFlBQUEsS0FBZ0MsT0FBTyxLQUFLLE1BQU0sRUFBRSxHQUE3QyxTQUFNLEdBQUEsS0FBTyxVQUFPLEdBQUE7QUFDakMsWUFBSSxRQUFRO0FBQ1YsZUFBSyxPQUFPO0FBQ1osZUFBSyxTQUFTLE1BQU07O0FBR3RCLFlBQUksTUFBTSxNQUFNLEtBQUssU0FBUyxRQUFRLEtBQUssSUFBSTtBQUFHOztJQUV0RDtBQUVPLElBQUFBLFVBQUEsVUFBQSxhQUFQLFNBQ0UsU0FDQSxVQUNBLFFBQ0EsVUFBa0I7QUFFbEIsVUFBSSxVQUFVO0FBRVosYUFBSyxVQUNILEtBQUssT0FBTyxRQUFRLEtBQUssT0FBTyxLQUFLLEtBQUssV0FBVyxPQUFPLElBQUk7O0FBR3BFLGlCQUFTO0FBQ1AsYUFBSyxVQUFVO0FBQ1QsWUFBQSxLQUFtQyxPQUFPLEtBQUssUUFBUSxFQUFFLEdBQWxELFVBQU8sR0FBQSxLQUFPLFlBQVMsR0FBQTtBQUNwQyxZQUFJLFNBQVM7QUFDWCxlQUFLLFNBQVM7QUFDZCxlQUFLLFNBQVMsU0FBUyxPQUFPLE1BQU07O0FBR3RDLGFBQ0csTUFBTSxNQUFNLEtBQUssU0FBUyxRQUFRLEtBQUssSUFBSSxPQUMzQyxNQUFNLFFBQVEsS0FBSyxTQUFTLFVBQVUsS0FBSyxNQUFNLElBQ2xEO0FBQ0E7OztJQUdOO0FBRU8sSUFBQUEsVUFBQSxVQUFBLGFBQVAsU0FDRSxTQUNBLFVBQ0EsUUFDQSxVQUNBLFVBQWtCO0FBRWxCLFVBQUksVUFBVTtBQUVaLGFBQUssVUFDSCxLQUFLLE9BQ0YsU0FBUyxLQUFLLE9BQU8sT0FBTyxLQUFLLFNBQVMsS0FBSyxLQUFLLFdBQ25ELE9BQU8sSUFDUDs7QUFHUixpQkFBUztBQUNQLGFBQUssVUFBVTtBQUNULFlBQUEsS0FBcUMsT0FBTyxLQUFLLFFBQVEsRUFBRSxHQUFwRCxZQUFTLEdBQUEsS0FBTyxZQUFTLEdBQUE7QUFDdEMsWUFBSSxXQUFXO0FBQ2IsZUFBSyxTQUFTO0FBQ2QsZUFBSyxXQUFXLFdBQVcsT0FBTyxRQUFRLFFBQVE7O0FBR3BELGFBQ0csTUFBTSxNQUFNLEtBQUssU0FBUyxRQUFRLEtBQUssSUFBSSxPQUMzQyxNQUFNLFFBQVEsS0FBSyxTQUFTLFVBQVUsS0FBSyxNQUFNLE9BQ2pELE1BQU0sUUFBUSxLQUFLLFNBQVMsVUFBVSxLQUFLLE1BQU0sSUFDbEQ7QUFDQTs7O0lBR047QUFFTyxJQUFBQSxVQUFBLFVBQUEsU0FBUCxXQUFBO0FBQ0UsVUFBSSxLQUFLLE9BQU8sSUFBSTtBQUNsQjs7QUFHRixVQUFJLGNBQWMsV0FBVyxLQUFLLE1BQU0sS0FBSyxRQUFRLENBQUMsRUFBRSxDQUFDO0FBQ3pELFVBQUksS0FBSyxPQUFPLGFBQWE7QUFDM0I7O0FBR0YsYUFBTyxLQUFLLE1BQU0sYUFBYTtBQUM3QixhQUFLLE9BQU87QUFDWixVQUFFLEtBQUs7QUFDUCxZQUFJLEtBQUssVUFBVSxJQUFJO0FBQ3JCLGVBQUssUUFBUTtBQUNiLFlBQUUsS0FBSztBQUNQLGNBQUksS0FBSyxPQUFPLFNBQVM7QUFDdkI7OztBQUlKLHNCQUFjLFdBQVcsS0FBSyxNQUFNLEtBQUssUUFBUSxDQUFDLEVBQUUsQ0FBQzs7SUFFekQ7QUFFTyxJQUFBQSxVQUFBLFVBQUEsTUFBUCxTQUFXLFNBQXdCLFVBQWlCO0FBQzFDLFVBQUEsT0FBcUQsUUFBTyxNQUF0RCxXQUErQyxRQUFPLFVBQTVDLE9BQXFDLFFBQU8sTUFBdEMsU0FBK0IsUUFBTyxRQUE5QixXQUF1QixRQUFPLFVBQXBCLFdBQWEsUUFBTztBQUVwRSxjQUFRLE1BQU07UUFDWixLQUFLLFVBQVU7QUFDYixpQkFBTyxLQUFLLFNBQVMsUUFBUTtRQUMvQixLQUFLLFVBQVU7QUFDYixpQkFBTyxLQUFLLFVBQVUsUUFBUTtRQUNoQyxLQUFLLFVBQVU7QUFDYixpQkFBTyxLQUFLLFVBQVUsVUFBVSxJQUFJO1FBQ3RDLEtBQUssVUFBVTtBQUNiLGlCQUFPLEtBQUssU0FBUyxRQUFRO1FBQy9CLEtBQUssVUFBVTtBQUNiLGlCQUFPLEtBQUssU0FBUyxVQUFVLFVBQVUsTUFBTTtRQUNqRCxLQUFLLFVBQVU7QUFDYixpQkFBTyxLQUFLLFdBQVcsVUFBVSxVQUFVLFFBQVEsUUFBUTtRQUM3RCxLQUFLLFVBQVU7QUFDYixpQkFBTyxLQUFLLFdBQVcsVUFBVSxVQUFVLFFBQVEsVUFBVSxRQUFROztJQUUzRTtBQUNGLFdBQUFBO0VBQUEsRUE3TjhCLElBQUk7Ozs7QUNoQzVCLFNBQVUsa0JBQWtCLFNBQXlCO0FBQ3pELE1BQU0sVUFBb0IsQ0FBQTtBQUMxQixNQUFNLE9BQU8sT0FBTyxLQUFLLE9BQU87QUFHaEMsV0FBa0IsS0FBQSxHQUFBLFNBQUEsTUFBQSxLQUFBLE9BQUEsUUFBQSxNQUFNO0FBQW5CLFFBQU0sTUFBRyxPQUFBLEVBQUE7QUFDWixRQUFJLENBQUMsU0FBUyxhQUFhLEdBQUc7QUFBRyxjQUFRLEtBQUssR0FBRztBQUNqRCxRQUFJRSxRQUFPLFFBQVEsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLFFBQVEsR0FBRyxDQUFDLEdBQUc7QUFDdEQsY0FBUSxLQUFLLEdBQUc7OztBQUlwQixNQUFJLFFBQVEsUUFBUTtBQUNsQixVQUFNLElBQUksTUFBTSxzQkFBc0IsUUFBUSxLQUFLLElBQUksQ0FBQzs7QUFHMUQsU0FBQSxTQUFBLENBQUEsR0FBWSxPQUFPO0FBQ3JCO0FBRU0sU0FBVSxhQUFhLFNBQXlCO0FBQ3BELE1BQU0sT0FBSSxTQUFBLFNBQUEsQ0FBQSxHQUFRLGVBQWUsR0FBSyxrQkFBa0IsT0FBTyxDQUFDO0FBRWhFLE1BQUksVUFBVSxLQUFLLFFBQVE7QUFBRyxTQUFLLE9BQU8sTUFBTTtBQUVoRCxNQUFJLEVBQUUsVUFBVSxLQUFLLElBQUksS0FBSyxNQUFNLFlBQVksS0FBSyxJQUFJLElBQUk7QUFDM0QsVUFBTSxJQUFJLE1BQU0sc0JBQUEsT0FBc0IsS0FBSyxNQUFJLEdBQUEsRUFBQSxPQUFJLFFBQVEsSUFBSSxDQUFFOztBQUduRSxNQUFJLENBQUMsS0FBSztBQUFTLFNBQUssVUFBVSxJQUFJLE1BQUssb0JBQUksS0FBSSxHQUFHLGdCQUFnQixDQUFDLENBQUM7QUFFeEUsTUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLEdBQUc7QUFDekIsU0FBSyxPQUFPLE1BQU0sR0FBRzthQUNaQyxVQUFTLEtBQUssSUFBSSxHQUFHO1NBRXpCO0FBQ0wsU0FBSyxPQUFPLEtBQUssS0FBSzs7QUFHeEIsTUFBSSxVQUFVLEtBQUssUUFBUSxHQUFHO0FBQzVCLFFBQUlBLFVBQVMsS0FBSyxRQUFRO0FBQUcsV0FBSyxXQUFXLENBQUMsS0FBSyxRQUFRO0FBRTNELGFBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxTQUFTLFFBQVEsS0FBSztBQUM3QyxVQUFNLElBQUksS0FBSyxTQUFTLENBQUM7QUFDekIsVUFBSSxNQUFNLEtBQUssRUFBRSxLQUFLLFFBQVEsS0FBSyxNQUFNO0FBQ3ZDLGNBQU0sSUFBSSxNQUNSLDREQUFpRTs7OztBQU16RSxNQUNFLEVBQ0UsUUFBUSxLQUFLLFFBQWtCLEtBQy9CLFNBQVMsS0FBSyxRQUFvQixLQUNsQyxTQUFTLEtBQUssU0FBcUIsS0FDbkMsUUFBUSxLQUFLLFVBQVUsS0FDdkIsU0FBUyxLQUFLLFVBQXNCLEtBQ3BDLFVBQVUsS0FBSyxTQUFTLEtBQ3hCLFVBQVUsS0FBSyxRQUFRLElBRXpCO0FBQ0EsWUFBUSxLQUFLLE1BQU07TUFDakIsS0FBSyxNQUFNO0FBQ1QsWUFBSSxDQUFDLEtBQUs7QUFBUyxlQUFLLFVBQVUsS0FBSyxRQUFRLFlBQVcsSUFBSztBQUMvRCxhQUFLLGFBQWEsS0FBSyxRQUFRLFdBQVU7QUFDekM7TUFDRixLQUFLLE1BQU07QUFDVCxhQUFLLGFBQWEsS0FBSyxRQUFRLFdBQVU7QUFDekM7TUFDRixLQUFLLE1BQU07QUFDVCxhQUFLLFlBQVksQ0FBQyxXQUFXLEtBQUssT0FBTyxDQUFDO0FBQzFDOzs7QUFLTixNQUFJLFVBQVUsS0FBSyxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssT0FBTyxHQUFHO0FBQ3JELFNBQUssVUFBVSxDQUFDLEtBQUssT0FBTzs7QUFJOUIsTUFDRSxVQUFVLEtBQUssU0FBUyxLQUN4QixDQUFDLFFBQVEsS0FBSyxTQUFTLEtBQ3ZCQSxVQUFTLEtBQUssU0FBUyxHQUN2QjtBQUNBLFNBQUssWUFBWSxDQUFDLEtBQUssU0FBUzs7QUFJbEMsTUFBSSxDQUFDLFVBQVUsS0FBSyxVQUFVLEdBQUc7QUFDL0IsU0FBSyxhQUFhLENBQUE7QUFDbEIsU0FBSyxjQUFjLENBQUE7YUFDVixRQUFRLEtBQUssVUFBVSxHQUFHO0FBQ25DLFFBQU0sYUFBYSxDQUFBO0FBQ25CLFFBQU0sY0FBYyxDQUFBO0FBRXBCLGFBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxXQUFXLFFBQVEsS0FBSztBQUMvQyxVQUFNLElBQUksS0FBSyxXQUFXLENBQUM7QUFDM0IsVUFBSSxJQUFJLEdBQUc7QUFDVCxtQkFBVyxLQUFLLENBQUM7aUJBQ1IsSUFBSSxHQUFHO0FBQ2hCLG9CQUFZLEtBQUssQ0FBQzs7O0FBR3RCLFNBQUssYUFBYTtBQUNsQixTQUFLLGNBQWM7YUFDVixLQUFLLGFBQWEsR0FBRztBQUM5QixTQUFLLGNBQWMsQ0FBQyxLQUFLLFVBQVU7QUFDbkMsU0FBSyxhQUFhLENBQUE7U0FDYjtBQUNMLFNBQUssY0FBYyxDQUFBO0FBQ25CLFNBQUssYUFBYSxDQUFDLEtBQUssVUFBVTs7QUFJcEMsTUFBSSxVQUFVLEtBQUssUUFBUSxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsR0FBRztBQUN2RCxTQUFLLFdBQVcsQ0FBQyxLQUFLLFFBQVE7O0FBSWhDLE1BQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxHQUFHO0FBQzlCLFNBQUssYUFBYTthQUNUQSxVQUFTLEtBQUssU0FBUyxHQUFHO0FBQ25DLFNBQUssWUFBWSxDQUFDLEtBQUssU0FBUztBQUNoQyxTQUFLLGFBQWE7YUFDVCxhQUFhLEtBQUssU0FBUyxHQUFHO0FBQ3ZDLFNBQUssWUFBWSxDQUFDLFFBQVEsUUFBUSxLQUFLLFNBQVMsRUFBRSxPQUFPO0FBQ3pELFNBQUssYUFBYTthQUNULEtBQUsscUJBQXFCLFNBQVM7QUFDNUMsUUFBSSxDQUFDLEtBQUssVUFBVSxLQUFLLEtBQUssT0FBTyxNQUFNLFNBQVM7QUFDbEQsV0FBSyxZQUFZLENBQUMsS0FBSyxVQUFVLE9BQU87QUFDeEMsV0FBSyxhQUFhO1dBQ2I7QUFDTCxXQUFLLGFBQWEsQ0FBQyxDQUFDLEtBQUssVUFBVSxTQUFTLEtBQUssVUFBVSxDQUFDLENBQUM7QUFDN0QsV0FBSyxZQUFZOztTQUVkO0FBQ0wsUUFBTSxZQUFzQixDQUFBO0FBQzVCLFFBQU0sYUFBYSxDQUFBO0FBRW5CLGFBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxVQUFVLFFBQVEsS0FBSztBQUM5QyxVQUFNLE9BQU8sS0FBSyxVQUFVLENBQUM7QUFFN0IsVUFBSUEsVUFBUyxJQUFJLEdBQUc7QUFDbEIsa0JBQVUsS0FBSyxJQUFJO0FBQ25CO2lCQUNTLGFBQWEsSUFBSSxHQUFHO0FBQzdCLGtCQUFVLEtBQUssUUFBUSxRQUFRLElBQUksRUFBRSxPQUFPO0FBQzVDOztBQUdGLFVBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxPQUFPLE1BQU0sU0FBUztBQUN4QyxrQkFBVSxLQUFLLEtBQUssT0FBTzthQUN0QjtBQUNMLG1CQUFXLEtBQUssQ0FBQyxLQUFLLFNBQVMsS0FBSyxDQUFDLENBQUM7OztBQUcxQyxTQUFLLFlBQVksU0FBUyxTQUFTLElBQUksWUFBWTtBQUNuRCxTQUFLLGFBQWEsU0FBUyxVQUFVLElBQUksYUFBYTs7QUFJeEQsTUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEdBQUc7QUFDM0IsU0FBSyxTQUFTLEtBQUssT0FBTyxNQUFNLFNBQVMsQ0FBQyxLQUFLLFFBQVEsWUFBVyxDQUFFLElBQUk7YUFDL0RBLFVBQVMsS0FBSyxNQUFNLEdBQUc7QUFDaEMsU0FBSyxTQUFTLENBQUMsS0FBSyxNQUFNOztBQUk1QixNQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsR0FBRztBQUM3QixTQUFLLFdBQ0gsS0FBSyxPQUFPLE1BQU0sV0FBVyxDQUFDLEtBQUssUUFBUSxjQUFhLENBQUUsSUFBSTthQUN2REEsVUFBUyxLQUFLLFFBQVEsR0FBRztBQUNsQyxTQUFLLFdBQVcsQ0FBQyxLQUFLLFFBQVE7O0FBSWhDLE1BQUksQ0FBQyxVQUFVLEtBQUssUUFBUSxHQUFHO0FBQzdCLFNBQUssV0FDSCxLQUFLLE9BQU8sTUFBTSxXQUFXLENBQUMsS0FBSyxRQUFRLGNBQWEsQ0FBRSxJQUFJO2FBQ3ZEQSxVQUFTLEtBQUssUUFBUSxHQUFHO0FBQ2xDLFNBQUssV0FBVyxDQUFDLEtBQUssUUFBUTs7QUFHaEMsU0FBTyxFQUFFLGVBQWUsS0FBcUI7QUFDL0M7QUFFTSxTQUFVLGFBQWEsTUFBbUI7QUFDOUMsTUFBTSxvQkFBb0IsS0FBSyxRQUFRLFFBQU8sSUFBSztBQUNuRCxNQUFJLENBQUMscUJBQXFCLEtBQUssSUFBSSxHQUFHO0FBQ3BDLFdBQU8sQ0FBQTs7QUFHVCxNQUFNLFVBQWtCLENBQUE7QUFDeEIsT0FBSyxPQUFPLFFBQVEsU0FBQyxNQUFJO0FBQ3ZCLFNBQUssU0FBUyxRQUFRLFNBQUMsUUFBTTtBQUMzQixXQUFLLFNBQVMsUUFBUSxTQUFDLFFBQU07QUFDM0IsZ0JBQVEsS0FBSyxJQUFJLEtBQUssTUFBTSxRQUFRLFFBQVEsaUJBQWlCLENBQUM7TUFDaEUsQ0FBQztJQUNILENBQUM7RUFDSCxDQUFDO0FBRUQsU0FBTztBQUNUOzs7QUN0Tk0sU0FBVSxZQUFZLFdBQWlCO0FBQzNDLE1BQU0sVUFBVSxVQUNiLE1BQU0sSUFBSSxFQUNWLElBQUksU0FBUyxFQUNiLE9BQU8sU0FBQyxHQUFDO0FBQUssV0FBQSxNQUFNO0VBQU4sQ0FBVTtBQUMzQixTQUFBLFNBQUEsU0FBQSxDQUFBLEdBQVksUUFBUSxDQUFDLENBQUMsR0FBSyxRQUFRLENBQUMsQ0FBQztBQUN2QztBQUVNLFNBQVUsYUFBYSxNQUFZO0FBQ3ZDLE1BQU0sVUFBNEIsQ0FBQTtBQUVsQyxNQUFNLGtCQUFrQiwrQ0FBK0MsS0FDckUsSUFBSTtBQUdOLE1BQUksQ0FBQyxpQkFBaUI7QUFDcEIsV0FBTzs7QUFHQSxNQUFBLE9BQWlCLGdCQUFlLENBQUEsR0FBMUIsVUFBVyxnQkFBZSxDQUFBO0FBRXpDLE1BQUksTUFBTTtBQUNSLFlBQVEsT0FBTzs7QUFFakIsVUFBUSxVQUFVLGtCQUFrQixPQUFPO0FBQzNDLFNBQU87QUFDVDtBQUVBLFNBQVMsVUFBVSxXQUFpQjtBQUNsQyxjQUFZLFVBQVUsUUFBUSxhQUFhLEVBQUU7QUFDN0MsTUFBSSxDQUFDLFVBQVU7QUFBUSxXQUFPO0FBRTlCLE1BQU0sU0FBUyxpQkFBaUIsS0FBSyxVQUFVLFlBQVcsQ0FBRTtBQUM1RCxNQUFJLENBQUMsUUFBUTtBQUNYLFdBQU8sV0FBVyxTQUFTOztBQUdwQixNQUFBLE1BQU8sT0FBTSxDQUFBO0FBQ3RCLFVBQVEsSUFBSSxZQUFXLEdBQUk7SUFDekIsS0FBSztJQUNMLEtBQUs7QUFDSCxhQUFPLFdBQVcsU0FBUztJQUM3QixLQUFLO0FBQ0gsYUFBTyxhQUFhLFNBQVM7SUFDL0I7QUFDRSxZQUFNLElBQUksTUFBTSx3QkFBQSxPQUF3QixLQUFHLE1BQUEsRUFBQSxPQUFPLFNBQVMsQ0FBRTs7QUFFbkU7QUFFQSxTQUFTLFdBQVcsTUFBWTtBQUM5QixNQUFNLGVBQWUsS0FBSyxRQUFRLFlBQVksRUFBRTtBQUNoRCxNQUFNLFVBQVUsYUFBYSxZQUFZO0FBRXpDLE1BQU0sUUFBUSxLQUFLLFFBQVEsdUJBQXVCLEVBQUUsRUFBRSxNQUFNLEdBQUc7QUFFL0QsUUFBTSxRQUFRLFNBQUMsTUFBSTtBQUNYLFFBQUEsS0FBZSxLQUFLLE1BQU0sR0FBRyxHQUE1QixNQUFHLEdBQUEsQ0FBQSxHQUFFLFFBQUssR0FBQSxDQUFBO0FBQ2pCLFlBQVEsSUFBSSxZQUFXLEdBQUk7TUFDekIsS0FBSztBQUNILGdCQUFRLE9BQU8sVUFBVSxNQUFNLFlBQVcsQ0FBNEI7QUFDdEU7TUFDRixLQUFLO0FBQ0gsZ0JBQVEsT0FBTyxLQUFLLE1BQU0sWUFBVyxDQUF1QjtBQUM1RDtNQUNGLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7QUFDSCxZQUFNLE1BQU0sWUFBWSxLQUFLO0FBQzdCLFlBQU0sWUFBWSxJQUFJLFlBQVc7QUFHakMsZ0JBQVEsU0FBUyxJQUFJO0FBQ3JCO01BQ0YsS0FBSztNQUNMLEtBQUs7QUFDSCxnQkFBUSxZQUFZLGFBQWEsS0FBSztBQUN0QztNQUNGLEtBQUs7TUFDTCxLQUFLO0FBRUgsWUFBTSxVQUFVLGFBQWEsSUFBSTtBQUNqQyxnQkFBUSxPQUFPLFFBQVE7QUFDdkIsZ0JBQVEsVUFBVSxRQUFRO0FBQzFCO01BQ0YsS0FBSztBQUNILGdCQUFRLFFBQVEsa0JBQWtCLEtBQUs7QUFDdkM7TUFDRixLQUFLO0FBQ0gsZ0JBQVEsV0FBVyxPQUFPLEtBQUs7QUFDL0I7TUFDRjtBQUNFLGNBQU0sSUFBSSxNQUFNLDZCQUE2QixNQUFNLEdBQUc7O0VBRTVELENBQUM7QUFFRCxTQUFPO0FBQ1Q7QUFFQSxTQUFTLFlBQVksT0FBYTtBQUNoQyxNQUFJLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSTtBQUM3QixRQUFNLFNBQVMsTUFBTSxNQUFNLEdBQUc7QUFDOUIsV0FBTyxPQUFPLElBQUkscUJBQXFCOztBQUd6QyxTQUFPLHNCQUFzQixLQUFLO0FBQ3BDO0FBRUEsU0FBUyxzQkFBc0IsT0FBYTtBQUMxQyxNQUFJLGFBQWEsS0FBSyxLQUFLLEdBQUc7QUFDNUIsV0FBTyxPQUFPLEtBQUs7O0FBR3JCLFNBQU87QUFDVDtBQUVBLFNBQVMsYUFBYSxPQUFhO0FBQ2pDLE1BQU0sT0FBTyxNQUFNLE1BQU0sR0FBRztBQUU1QixTQUFPLEtBQUssSUFBSSxTQUFDLEtBQUc7QUFDbEIsUUFBSSxJQUFJLFdBQVcsR0FBRztBQUVwQixhQUFPLEtBQUssR0FBd0I7O0FBSXRDLFFBQU0sUUFBUSxJQUFJLE1BQU0sNEJBQTRCO0FBQ3BELFFBQUksQ0FBQyxTQUFTLE1BQU0sU0FBUyxHQUFHO0FBQzlCLFlBQU0sSUFBSSxZQUFZLDJCQUFBLE9BQTJCLEdBQUcsQ0FBRTs7QUFFeEQsUUFBTUMsS0FBSSxPQUFPLE1BQU0sQ0FBQyxDQUFDO0FBQ3pCLFFBQU0sV0FBVyxNQUFNLENBQUM7QUFDeEIsUUFBTSxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzVCLFdBQU8sSUFBSSxRQUFRLE1BQU1BLEVBQUM7RUFDNUIsQ0FBQztBQUNIOzs7QUNoSkEsSUFBQTs7RUFBQSxXQUFBO0FBSUUsYUFBQUMsY0FBWSxNQUFZLE1BQW9CO0FBQzFDLFVBQUksTUFBTSxLQUFLLFFBQU8sQ0FBRSxHQUFHO0FBQ3pCLGNBQU0sSUFBSSxXQUFXLHFDQUFxQzs7QUFFNUQsV0FBSyxPQUFPO0FBQ1osV0FBSyxPQUFPO0lBQ2Q7QUFFQSxXQUFBLGVBQVlBLGNBQUEsV0FBQSxTQUFLO1dBQWpCLFdBQUE7QUFDRSxlQUFPLENBQUMsS0FBSyxRQUFRLEtBQUssS0FBSyxZQUFXLE1BQU87TUFDbkQ7Ozs7QUFFTyxJQUFBQSxjQUFBLFVBQUEsV0FBUCxXQUFBO0FBQ0UsVUFBTSxVQUFVLGtCQUFrQixLQUFLLEtBQUssUUFBTyxHQUFJLEtBQUssS0FBSztBQUNqRSxVQUFJLENBQUMsS0FBSyxPQUFPO0FBQ2YsZUFBTyxTQUFBLE9BQVMsS0FBSyxNQUFJLEdBQUEsRUFBQSxPQUFJLE9BQU87O0FBR3RDLGFBQU8sSUFBQSxPQUFJLE9BQU87SUFDcEI7QUFFTyxJQUFBQSxjQUFBLFVBQUEsVUFBUCxXQUFBO0FBQ0UsYUFBTyxLQUFLLEtBQUssUUFBTztJQUMxQjtBQUVPLElBQUFBLGNBQUEsVUFBQSxjQUFQLFdBQUE7QUFDRSxVQUFJLEtBQUssT0FBTztBQUNkLGVBQU8sS0FBSzs7QUFHZCxhQUFPLGVBQWUsS0FBSyxNQUFNLEtBQUssSUFBSTtJQUM1QztBQUNGLFdBQUFBO0VBQUEsRUFwQ0E7Ozs7QUNLTSxTQUFVLGdCQUFnQixTQUF5QjtBQUN2RCxNQUFNLFFBQW9CLENBQUE7QUFDMUIsTUFBSSxVQUFVO0FBQ2QsTUFBTSxPQUEwQixPQUFPLEtBQUssT0FBTztBQUNuRCxNQUFNQyxlQUFjLE9BQU8sS0FBSyxlQUFlO0FBRS9DLFdBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLEtBQUs7QUFDcEMsUUFBSSxLQUFLLENBQUMsTUFBTTtBQUFRO0FBQ3hCLFFBQUksQ0FBQyxTQUFTQSxjQUFhLEtBQUssQ0FBQyxDQUFDO0FBQUc7QUFFckMsUUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFLFlBQVc7QUFDN0IsUUFBTSxRQUFRLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDN0IsUUFBSSxXQUFXO0FBRWYsUUFBSSxDQUFDLFVBQVUsS0FBSyxLQUFNLFFBQVEsS0FBSyxLQUFLLENBQUMsTUFBTTtBQUFTO0FBRTVELFlBQVEsS0FBSztNQUNYLEtBQUs7QUFDSCxtQkFBVyxNQUFNLFlBQVksUUFBUSxJQUFJO0FBQ3pDO01BQ0YsS0FBSztBQUNILFlBQUlDLFVBQVMsS0FBSyxHQUFHO0FBQ25CLHFCQUFXLElBQUksUUFBUSxLQUFLLEVBQUUsU0FBUTtlQUNqQztBQUNMLHFCQUFXLE1BQU0sU0FBUTs7QUFFM0I7TUFDRixLQUFLO0FBWUgsY0FBTTtBQUNOLG1CQUFXLFFBQ1QsS0FBb0MsRUFFbkMsSUFBSSxTQUFDLE1BQUk7QUFDUixjQUFJLGdCQUFnQixTQUFTO0FBQzNCLG1CQUFPOztBQUdULGNBQUksUUFBUSxJQUFJLEdBQUc7QUFDakIsbUJBQU8sSUFBSSxRQUFRLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDOztBQUdyQyxpQkFBTyxJQUFJLFFBQVEsSUFBSTtRQUN6QixDQUFDLEVBQ0EsU0FBUTtBQUVYO01BQ0YsS0FBSztBQUNILGtCQUFVLGFBQWEsT0FBaUIsUUFBUSxJQUFJO0FBQ3BEO01BRUYsS0FBSztBQUNILG1CQUFXLGtCQUFrQixPQUFpQixDQUFDLFFBQVEsSUFBSTtBQUMzRDtNQUVGO0FBQ0UsWUFBSSxRQUFRLEtBQUssR0FBRztBQUNsQixjQUFNLFlBQXNCLENBQUE7QUFDNUIsbUJBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUs7QUFDckMsc0JBQVUsQ0FBQyxJQUFJLE9BQU8sTUFBTSxDQUFDLENBQUM7O0FBRWhDLHFCQUFXLFVBQVUsU0FBUTtlQUN4QjtBQUNMLHFCQUFXLE9BQU8sS0FBSzs7O0FBSTdCLFFBQUksVUFBVTtBQUNaLFlBQU0sS0FBSyxDQUFDLEtBQUssUUFBUSxDQUFDOzs7QUFJOUIsTUFBTSxRQUFRLE1BQ1gsSUFBSSxTQUFDLElBQVk7UUFBWEMsT0FBRyxHQUFBLENBQUEsR0FBRUMsU0FBSyxHQUFBLENBQUE7QUFBTSxXQUFBLEdBQUEsT0FBR0QsTUFBRyxHQUFBLEVBQUEsT0FBSUMsT0FBTSxTQUFRLENBQUU7RUFBMUIsQ0FBNEIsRUFDbEQsS0FBSyxHQUFHO0FBQ1gsTUFBSSxhQUFhO0FBQ2pCLE1BQUksVUFBVSxJQUFJO0FBQ2hCLGlCQUFhLFNBQUEsT0FBUyxLQUFLOztBQUc3QixTQUFPLENBQUMsU0FBUyxVQUFVLEVBQUUsT0FBTyxTQUFDLEdBQUM7QUFBSyxXQUFBLENBQUMsQ0FBQztFQUFGLENBQUcsRUFBRSxLQUFLLElBQUk7QUFDM0Q7QUFFQSxTQUFTLGFBQWEsU0FBa0IsTUFBb0I7QUFDMUQsTUFBSSxDQUFDLFNBQVM7QUFDWixXQUFPOztBQUdULFNBQU8sWUFBWSxJQUFJLGFBQWEsSUFBSSxLQUFLLE9BQU8sR0FBRyxJQUFJLEVBQUUsU0FBUTtBQUN2RTs7O0FDcEdBLFNBQVMsVUFDUCxNQUNBLE9BQTJDO0FBRTNDLE1BQUksTUFBTSxRQUFRLElBQUksR0FBRztBQUN2QixRQUFJLENBQUMsTUFBTSxRQUFRLEtBQUs7QUFBRyxhQUFPO0FBQ2xDLFFBQUksS0FBSyxXQUFXLE1BQU07QUFBUSxhQUFPO0FBQ3pDLFdBQU8sS0FBSyxNQUFNLFNBQUMsTUFBTSxHQUFDO0FBQUssYUFBQSxLQUFLLFFBQU8sTUFBTyxNQUFNLENBQUMsRUFBRSxRQUFPO0lBQW5DLENBQXFDOztBQUd0RSxNQUFJLGdCQUFnQixNQUFNO0FBQ3hCLFdBQU8saUJBQWlCLFFBQVEsS0FBSyxRQUFPLE1BQU8sTUFBTSxRQUFPOztBQUdsRSxTQUFPLFNBQVM7QUFDbEI7QUFFQSxJQUFBOztFQUFBLFdBQUE7QUFBQSxhQUFBQyxTQUFBO0FBQ0UsV0FBQSxNQUEwQztBQUMxQyxXQUFBLFNBQXFCLENBQUE7QUFDckIsV0FBQSxRQUFvQixDQUFBO0FBQ3BCLFdBQUEsVUFBc0IsQ0FBQTtJQThFeEI7QUF2RVMsSUFBQUEsT0FBQSxVQUFBLFlBQVAsU0FDRSxNQUNBLE9BQ0EsTUFBd0I7QUFFeEIsVUFBSSxPQUFPO0FBQ1QsZ0JBQVEsaUJBQWlCLE9BQU9DLE9BQU0sS0FBSyxJQUFJLFdBQVcsS0FBSzs7QUFHakUsVUFBSSxTQUFTLE9BQU87QUFDbEIsYUFBSyxNQUFNO2FBQ047QUFDTCxhQUFLLFNBQVM7QUFDZCxhQUFLLElBQUksRUFBRSxLQUFLLElBQWdCOztJQUVwQztBQVNPLElBQUFELE9BQUEsVUFBQSxZQUFQLFNBQ0UsTUFDQSxNQUF3QjtBQUV4QixVQUFJLFNBQXVDO0FBQzNDLFVBQU0sV0FBVyxPQUFRLE9BQU8sS0FBSyxJQUFJLElBQTJCLENBQUE7QUFDcEUsVUFBTSxnQkFBZ0IsU0FBVUUsT0FBYztBQUM1QyxpQkFBU0MsS0FBSSxHQUFHQSxLQUFJLFNBQVMsUUFBUUEsTUFBSztBQUN4QyxjQUFNLE1BQU0sU0FBU0EsRUFBQztBQUN0QixjQUFJLENBQUMsVUFBVSxLQUFLLEdBQUcsR0FBR0QsTUFBSyxHQUFHLENBQUMsR0FBRztBQUNwQyxtQkFBTzs7O0FBR1gsZUFBTztNQUNUO0FBRUEsVUFBTSxlQUFlLEtBQUssSUFBSTtBQUM5QixVQUFJLFNBQVMsT0FBTztBQUNsQixpQkFBUyxLQUFLO2lCQUNMLFFBQVEsWUFBWSxHQUFHO0FBR2hDLGlCQUFTLElBQUksR0FBRyxJQUFJLGFBQWEsUUFBUSxLQUFLO0FBQzVDLGNBQU0sT0FBTyxhQUFhLENBQUM7QUFDM0IsY0FBSSxTQUFTLFVBQVUsY0FBYyxJQUFJO0FBQUc7QUFDNUMsbUJBQVMsS0FBSztBQUNkOzs7QUFJSixVQUFJLENBQUMsVUFBVSxLQUFLLEtBQUs7QUFHdkIsWUFBTSxhQUFhLElBQUksbUJBQVcsTUFBTSxJQUFJO0FBQzVDLGlCQUFTLElBQUksR0FBRyxJQUFLLEtBQUssSUFBZSxRQUFRLEtBQUs7QUFDcEQsY0FBSSxDQUFDLFdBQVcsT0FBUSxLQUFLLElBQWUsQ0FBQyxDQUFDO0FBQUc7O0FBRW5ELGlCQUFTLFdBQVcsU0FBUTtBQUM1QixhQUFLLFVBQVUsTUFBTSxRQUFRLElBQUk7O0FBR25DLGFBQU8sUUFBUSxNQUFNLElBQ2pCLFdBQVcsTUFBTSxJQUNqQixrQkFBa0IsT0FDbEJELE9BQU0sTUFBTSxJQUNaO0lBQ047QUFDRixXQUFBRDtFQUFBLEVBbEZBOzs7O0FDZkEsSUFBTSxXQUFRLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsQ0FBQSxHQUNULE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sR0FBRyxFQUFFLEdBQUMsSUFBQSxHQUNiLE9BQU8sSUFBSSxFQUFFLEdBQUMsSUFBQSxHQUNkLE9BQU8sSUFBSSxFQUFFLEdBQUMsSUFBQSxHQUNkLE9BQU8sSUFBSSxFQUFFLEdBQUMsSUFBQSxHQUNkLE9BQU8sR0FBRyxDQUFDLEdBQUMsSUFBQTtBQUdqQixJQUFNLFdBQVEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxDQUFBLEdBQ1QsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxHQUFHLEVBQUUsR0FBQyxJQUFBLEdBQ2IsT0FBTyxJQUFJLEVBQUUsR0FBQyxJQUFBLEdBQ2QsT0FBTyxJQUFJLEVBQUUsR0FBQyxJQUFBLEdBQ2QsT0FBTyxJQUFJLEVBQUUsR0FBQyxJQUFBLEdBQ2QsT0FBTyxHQUFHLENBQUMsR0FBQyxJQUFBO0FBR2pCLElBQU0sTUFBTSxNQUFNLEdBQUcsRUFBRTtBQUN2QixJQUFNLE1BQU0sTUFBTSxHQUFHLEVBQUU7QUFDdkIsSUFBTSxNQUFNLE1BQU0sR0FBRyxFQUFFO0FBQ3ZCLElBQU0sTUFBTSxNQUFNLEdBQUcsRUFBRTtBQUV2QixJQUFNLGNBQVcsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxDQUFBLEdBQ1osS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsS0FBRyxJQUFBLEdBQ0gsSUFBSSxNQUFNLEdBQUcsQ0FBQyxHQUFDLElBQUE7QUFHcEIsSUFBTSxjQUFXLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsQ0FBQSxHQUNaLEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILEtBQUcsSUFBQSxHQUNILElBQUksTUFBTSxHQUFHLENBQUMsR0FBQyxJQUFBO0FBR3BCLElBQU0sT0FBTyxNQUFNLEtBQUssQ0FBQztBQUN6QixJQUFNLE9BQU8sTUFBTSxLQUFLLENBQUM7QUFDekIsSUFBTSxPQUFPLE1BQU0sS0FBSyxDQUFDO0FBQ3pCLElBQU0sT0FBTyxNQUFNLEtBQUssQ0FBQztBQUV6QixJQUFNLGVBQVksY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxDQUFBLEdBQ2IsTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osTUFBSSxJQUFBLEdBQ0osS0FBSyxNQUFNLEdBQUcsQ0FBQyxHQUFDLElBQUE7QUFHckIsSUFBTSxlQUFZLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsY0FBQSxjQUFBLGNBQUEsQ0FBQSxHQUNiLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLE1BQUksSUFBQSxHQUNKLEtBQUssTUFBTSxHQUFHLENBQUMsR0FBQyxJQUFBO0FBR3JCLElBQU0sWUFBWSxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUc7QUFDN0UsSUFBTSxZQUFZLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRztBQUU3RSxJQUFNLFdBQVksV0FBQTtBQUNoQixNQUFJLFdBQXFCLENBQUE7QUFDekIsV0FBUyxJQUFJLEdBQUcsSUFBSSxJQUFJO0FBQUssZUFBVyxTQUFTLE9BQU8sTUFBTSxDQUFDLENBQUM7QUFDaEUsU0FBTztBQUNULEVBQUU7OztBQzdGSSxTQUFVLFlBQVksTUFBYyxTQUFzQjtBQUM5RCxNQUFNLFlBQVksU0FBUyxNQUFNLEdBQUcsQ0FBQztBQUVyQyxNQUFNLFVBQVVJLFlBQVcsSUFBSSxJQUFJLE1BQU07QUFDekMsTUFBTSxjQUFjQSxZQUFXLE9BQU8sQ0FBQyxJQUFJLE1BQU07QUFDakQsTUFBTSxjQUFjLFVBQVUsU0FBUztBQUN2QyxNQUFNLGNBQWMsV0FBVyxTQUFTO0FBRXhDLE1BQU0sU0FBTSxTQUFBLFNBQUEsRUFDVixTQUNBLGFBQ0EsYUFDQSxZQUFXLEdBQ1IsY0FBYyxJQUFJLENBQUMsR0FBQSxFQUN0QixTQUFTLEtBQUksQ0FBQTtBQUdmLE1BQUksTUFBTSxRQUFRLFFBQVEsR0FBRztBQUMzQixXQUFPOztBQUdULFNBQU8sVUFBVSxPQUFPLEdBQUcsVUFBVSxDQUFDO0FBQ3RDLE1BQUk7QUFDSixNQUFJO0FBQ0osTUFBSSxVQUFXLFlBQVksTUFBTSxJQUFJLGNBQWMsUUFBUSxNQUFNLENBQUM7QUFFbEUsTUFBSSxXQUFXLEdBQUc7QUFDaEIsY0FBVTtBQUdWLGVBQVcsT0FBTyxVQUFVLE1BQU0sY0FBYyxRQUFRLE1BQU0sQ0FBQztTQUMxRDtBQUdMLGVBQVcsVUFBVTs7QUFHdkIsTUFBTSxNQUFNLEtBQUssTUFBTSxXQUFXLENBQUM7QUFDbkMsTUFBTSxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzdCLE1BQU0sV0FBVyxLQUFLLE1BQU0sTUFBTSxNQUFNLENBQUM7QUFFekMsV0FBUyxJQUFJLEdBQUcsSUFBSSxRQUFRLFNBQVMsUUFBUSxLQUFLO0FBQ2hELFFBQUlDLEtBQUksUUFBUSxTQUFTLENBQUM7QUFDMUIsUUFBSUEsS0FBSSxHQUFHO0FBQ1QsTUFBQUEsTUFBSyxXQUFXOztBQUVsQixRQUFJLEVBQUVBLEtBQUksS0FBS0EsTUFBSyxXQUFXO0FBQzdCOztBQUdGLFFBQUksSUFBQztBQUNMLFFBQUlBLEtBQUksR0FBRztBQUNULFVBQUksV0FBV0EsS0FBSSxLQUFLO0FBQ3hCLFVBQUksWUFBWSxXQUFXO0FBQ3pCLGFBQUssSUFBSTs7V0FFTjtBQUNMLFVBQUk7O0FBR04sYUFBUyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFDMUIsYUFBTyxRQUFRLENBQUMsSUFBSTtBQUNwQjtBQUNBLFVBQUksT0FBTyxTQUFTLENBQUMsTUFBTSxRQUFRO0FBQU07OztBQUk3QyxNQUFJLFNBQVMsUUFBUSxVQUFVLENBQUMsR0FBRztBQUdqQyxRQUFJLElBQUksVUFBVSxXQUFXO0FBQzdCLFFBQUksWUFBWTtBQUFXLFdBQUssSUFBSTtBQUNwQyxRQUFJLElBQUksU0FBUztBQUdmLGVBQVMsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLO0FBQzFCLGVBQU8sUUFBUSxDQUFDLElBQUk7QUFDcEIsYUFBSztBQUNMLFlBQUksT0FBTyxTQUFTLENBQUMsTUFBTSxRQUFRO0FBQU07Ozs7QUFLL0MsTUFBSSxTQUFTO0FBT1gsUUFBSSxZQUFTO0FBQ2IsUUFBSSxDQUFDLFNBQVMsUUFBUSxVQUFVLEVBQUUsR0FBRztBQUNuQyxVQUFNLGVBQWUsV0FBVyxTQUFTLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQztBQUV4RCxVQUFJLFdBQVcsTUFBTSxJQUFJLGFBQWEsUUFBTyxJQUFLLFFBQVEsTUFBTSxDQUFDO0FBRWpFLFVBQU0sV0FBV0QsWUFBVyxPQUFPLENBQUMsSUFBSSxNQUFNO0FBQzlDLFVBQUksU0FBTTtBQUNWLFVBQUksWUFBWSxHQUFHO0FBQ2pCLG1CQUFXO0FBQ1gsaUJBQVMsV0FBVyxNQUFNLGVBQWUsUUFBUSxNQUFNLENBQUM7YUFDbkQ7QUFDTCxpQkFBUyxVQUFVOztBQUdyQixrQkFBWSxLQUFLLE1BQU0sS0FBSyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUM7V0FDM0M7QUFDTCxrQkFBWTs7QUFHZCxRQUFJLFNBQVMsUUFBUSxVQUFVLFNBQVMsR0FBRztBQUN6QyxlQUFTLElBQUksR0FBRyxJQUFJLFNBQVM7QUFBSyxlQUFPLFFBQVEsQ0FBQyxJQUFJOzs7QUFJMUQsU0FBTztBQUNUO0FBRUEsU0FBUyxjQUFjLE1BQVk7QUFDakMsTUFBTSxVQUFVQSxZQUFXLElBQUksSUFBSSxNQUFNO0FBQ3pDLE1BQU0sWUFBWSxTQUFTLE1BQU0sR0FBRyxDQUFDO0FBQ3JDLE1BQU0sT0FBTyxXQUFXLFNBQVM7QUFFakMsTUFBSSxZQUFZLEtBQUs7QUFDbkIsV0FBTztNQUNMLE9BQU87TUFDUCxVQUFVO01BQ1YsV0FBVztNQUNYLFVBQVUsU0FBUyxNQUFNLElBQUk7TUFDN0IsUUFBUTs7O0FBSVosU0FBTztJQUNMLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVUsU0FBUyxNQUFNLElBQUk7SUFDN0IsUUFBUTs7QUFFWjs7O0FDOUpNLFNBQVUsYUFDZCxNQUNBLE9BQ0EsU0FDQSxRQUNBLFVBQ0EsU0FBc0I7QUFFdEIsTUFBTSxTQUFvQjtJQUN4QixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVcsQ0FBQTs7QUFHYixNQUFJLFNBQXFCLENBQUE7QUFDekIsTUFBSSxRQUFRLFNBQVMsTUFBTSxRQUFRO0FBQ2pDLFFBQUksTUFBTSxRQUFRLE9BQU8sR0FBRztBQUMxQixlQUFTLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztXQUNqQjtBQUNMLGVBQVMsSUFBSSxHQUFHLElBQUksUUFBUSxRQUFRLFFBQVEsS0FBSztBQUMvQyxnQkFBUSxRQUFRLFFBQVEsQ0FBQztBQUN6QixlQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQzs7O2FBR3pDLFFBQVEsU0FBUyxNQUFNLFNBQVM7QUFDekMsYUFBUyxDQUFDLE9BQU8sTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7O0FBRzlDLE1BQUksTUFBTSxNQUFNLEdBQUc7QUFDakIsV0FBTzs7QUFLVCxTQUFPLFlBQVksT0FBTyxHQUFHLE9BQU87QUFFcEMsV0FBUyxJQUFJLEdBQUcsSUFBSSxPQUFPLFFBQVEsS0FBSztBQUN0QyxRQUFNLE9BQU8sT0FBTyxDQUFDO0FBQ3JCLFFBQU0sUUFBUSxLQUFLLENBQUM7QUFDcEIsUUFBTSxPQUFPLEtBQUssQ0FBQyxJQUFJO0FBRXZCLGFBQVMsSUFBSSxHQUFHLElBQUksUUFBUSxXQUFXLFFBQVEsS0FBSztBQUNsRCxVQUFJLElBQUM7QUFDQyxVQUFBLEtBQVksUUFBUSxXQUFXLENBQUMsR0FBL0IsT0FBSSxHQUFBLENBQUEsR0FBRUUsS0FBQyxHQUFBLENBQUE7QUFDZCxVQUFJQSxLQUFJLEdBQUc7QUFDVCxZQUFJLFFBQVFBLEtBQUksS0FBSztBQUNyQixhQUFLLE1BQU0sU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDO2FBQzNCO0FBQ0wsWUFBSSxTQUFTQSxLQUFJLEtBQUs7QUFDdEIsYUFBSyxNQUFNLElBQUksU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDOztBQUV0QyxVQUFJLFNBQVMsS0FBSyxLQUFLO0FBQU0sZUFBTyxVQUFVLENBQUMsSUFBSTs7O0FBSXZELFNBQU87QUFDVDs7O0FDbEVNLFNBQVUsT0FBTyxHQUFXQyxTQUFVO0FBQVYsTUFBQUEsWUFBQSxRQUFBO0FBQUEsSUFBQUEsVUFBQTtFQUFVO0FBQzFDLE1BQU0sSUFBSSxJQUFJO0FBQ2QsTUFBTSxJQUFJLEtBQUssTUFBTSxJQUFJLEdBQUc7QUFDNUIsTUFBTSxJQUFJLElBQUk7QUFDZCxNQUFNLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQztBQUMxQixNQUFNLElBQUksSUFBSTtBQUNkLE1BQU0sSUFBSSxLQUFLLE9BQU8sSUFBSSxLQUFLLEVBQUU7QUFDakMsTUFBTSxJQUFJLEtBQUssT0FBTyxJQUFJLElBQUksS0FBSyxDQUFDO0FBQ3BDLE1BQU0sSUFBSSxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsSUFBSTtBQUNoRCxNQUFNLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQztBQUMxQixNQUFNLElBQUksSUFBSTtBQUNkLE1BQU1DLEtBQUksS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNuRCxNQUFNLElBQUksS0FBSyxPQUFPLElBQUksS0FBSyxJQUFJLEtBQUtBLE1BQUssR0FBRztBQUNoRCxNQUFNLFFBQVEsS0FBSyxPQUFPLElBQUlBLEtBQUksSUFBSSxJQUFJLE9BQU8sRUFBRTtBQUNuRCxNQUFNLE9BQVEsSUFBSUEsS0FBSSxJQUFJLElBQUksT0FBTyxLQUFNO0FBQzNDLE1BQU0sT0FBTyxLQUFLLElBQUksR0FBRyxRQUFRLEdBQUcsTUFBTUQsT0FBTTtBQUNoRCxNQUFNLFlBQVksS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBRWxDLFNBQU8sQ0FBQyxLQUFLLE1BQU0sT0FBTyxjQUFjLE1BQU8sS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUMvRDs7O0FDSkEsSUFBQTs7RUFBQSxXQUFBO0FBTUUsYUFBQUUsVUFBb0IsU0FBc0I7QUFBdEIsV0FBQSxVQUFBO0lBQXlCO0FBRTdDLElBQUFBLFVBQUEsVUFBQSxVQUFBLFNBQVEsTUFBYyxPQUFhO0FBQ2pDLFVBQU0sVUFBVSxLQUFLO0FBRXJCLFVBQUksU0FBUyxLQUFLLFVBQVU7QUFDMUIsYUFBSyxXQUFXLFlBQVksTUFBTSxPQUFPOztBQUczQyxVQUNFLFNBQVMsUUFBUSxVQUFVLE1BQzFCLFVBQVUsS0FBSyxhQUFhLFNBQVMsS0FBSyxXQUMzQztBQUNNLFlBQUEsS0FBZ0MsS0FBSyxVQUFuQyxVQUFPLEdBQUEsU0FBRSxTQUFNLEdBQUEsUUFBRSxXQUFRLEdBQUE7QUFDakMsYUFBSyxZQUFZLGFBQ2YsTUFDQSxPQUNBLFNBQ0EsUUFDQSxVQUNBLE9BQU87O0FBSVgsVUFBSSxVQUFVLFFBQVEsUUFBUSxHQUFHO0FBQy9CLGFBQUssYUFBYSxPQUFPLE1BQU0sUUFBUSxRQUFROztJQUVuRDtBQUVBLFdBQUEsZUFBSUEsVUFBQSxXQUFBLFlBQVE7V0FBWixXQUFBO0FBQ0UsZUFBTyxLQUFLLFlBQVksS0FBSyxVQUFVLFdBQVc7TUFDcEQ7Ozs7QUFFQSxXQUFBLGVBQUlBLFVBQUEsV0FBQSxhQUFTO1dBQWIsV0FBQTtBQUNFLGVBQU8sS0FBSyxZQUFZLEtBQUssVUFBVSxZQUFZO01BQ3JEOzs7O0FBRUEsV0FBQSxlQUFJQSxVQUFBLFdBQUEsV0FBTztXQUFYLFdBQUE7QUFDRSxlQUFPLEtBQUssU0FBUztNQUN2Qjs7OztBQUVBLFdBQUEsZUFBSUEsVUFBQSxXQUFBLGVBQVc7V0FBZixXQUFBO0FBQ0UsZUFBTyxLQUFLLFNBQVM7TUFDdkI7Ozs7QUFFQSxXQUFBLGVBQUlBLFVBQUEsV0FBQSxVQUFNO1dBQVYsV0FBQTtBQUNFLGVBQU8sS0FBSyxTQUFTO01BQ3ZCOzs7O0FBRUEsV0FBQSxlQUFJQSxVQUFBLFdBQUEsWUFBUTtXQUFaLFdBQUE7QUFDRSxlQUFPLEtBQUssU0FBUztNQUN2Qjs7OztBQUVBLFdBQUEsZUFBSUEsVUFBQSxXQUFBLFNBQUs7V0FBVCxXQUFBO0FBQ0UsZUFBTyxLQUFLLFNBQVM7TUFDdkI7Ozs7QUFFQSxXQUFBLGVBQUlBLFVBQUEsV0FBQSxXQUFPO1dBQVgsV0FBQTtBQUNFLGVBQU8sS0FBSyxTQUFTO01BQ3ZCOzs7O0FBRUEsV0FBQSxlQUFJQSxVQUFBLFdBQUEsYUFBUztXQUFiLFdBQUE7QUFDRSxlQUFPLEtBQUssWUFBWSxLQUFLLFVBQVUsWUFBWSxDQUFBO01BQ3JEOzs7O0FBRUEsV0FBQSxlQUFJQSxVQUFBLFdBQUEsZUFBVztXQUFmLFdBQUE7QUFDRSxlQUFPLEtBQUssU0FBUztNQUN2Qjs7OztBQUVBLFdBQUEsZUFBSUEsVUFBQSxXQUFBLFlBQVE7V0FBWixXQUFBO0FBQ0UsZUFBTyxLQUFLLFNBQVM7TUFDdkI7Ozs7QUFFQSxXQUFBLGVBQUlBLFVBQUEsV0FBQSxhQUFTO1dBQWIsV0FBQTtBQUNFLGVBQU8sS0FBSyxTQUFTO01BQ3ZCOzs7O0FBRUEsSUFBQUEsVUFBQSxVQUFBLFVBQUEsV0FBQTtBQUNFLGFBQU8sQ0FBQyxNQUFNLEtBQUssT0FBTyxHQUFHLEdBQUcsS0FBSyxPQUFPO0lBQzlDO0FBRUEsSUFBQUEsVUFBQSxVQUFBLFVBQUEsU0FBUSxHQUFZLE9BQWE7QUFDL0IsVUFBTSxRQUFRLEtBQUssT0FBTyxRQUFRLENBQUM7QUFDbkMsVUFBTSxNQUFNLEtBQUssT0FBTyxLQUFLO0FBQzdCLFVBQU0sTUFBTSxPQUFzQixNQUFNLEtBQUssT0FBTztBQUNwRCxlQUFTLElBQUksT0FBTyxJQUFJLEtBQUs7QUFBSyxZQUFJLENBQUMsSUFBSTtBQUMzQyxhQUFPLENBQUMsS0FBSyxPQUFPLEdBQUc7SUFDekI7QUFFQSxJQUFBQSxVQUFBLFVBQUEsVUFBQSxTQUFRLE1BQWMsT0FBZSxLQUFXO0FBRTlDLFVBQU0sTUFBTSxPQUFzQixNQUFNLEtBQUssVUFBVSxDQUFDO0FBQ3hELFVBQUksSUFBSSxVQUFVLFNBQVMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUs7QUFDckQsVUFBTSxRQUFRO0FBQ2QsZUFBUyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFDMUIsWUFBSSxDQUFDLElBQUk7QUFDVCxVQUFFO0FBQ0YsWUFBSSxLQUFLLFNBQVMsQ0FBQyxNQUFNLEtBQUssUUFBUTtBQUFNOztBQUU5QyxhQUFPLENBQUMsS0FBSyxPQUFPLENBQUM7SUFDdkI7QUFFQSxJQUFBQSxVQUFBLFVBQUEsVUFBQSxTQUFRLE1BQWMsT0FBZSxLQUFXO0FBQzlDLFVBQU0sTUFBTSxPQUFPLE1BQU0sS0FBSyxPQUFPO0FBQ3JDLFVBQU0sSUFBSSxVQUFVLFNBQVMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUs7QUFDdkQsVUFBSSxDQUFDLElBQUk7QUFDVCxhQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN2QjtBQUVBLElBQUFBLFVBQUEsVUFBQSxXQUFBLFNBQVMsTUFBYyxHQUFXLFFBQWdCLGFBQW1CO0FBQXJFLFVBQUEsUUFBQTtBQUNFLFVBQUksTUFBYyxDQUFBO0FBQ2xCLFdBQUssUUFBUSxTQUFTLFFBQVEsU0FBQyxRQUFNO0FBQ25DLGNBQU0sSUFBSSxPQUFPLE1BQUssU0FBUyxNQUFNLFFBQVEsUUFBUSxXQUFXLENBQUM7TUFDbkUsQ0FBQztBQUNELFdBQUssR0FBRztBQUNSLGFBQU87SUFDVDtBQUVBLElBQUFBLFVBQUEsVUFBQSxXQUFBLFNBQVMsTUFBYyxRQUFnQixHQUFXLGFBQW1CO0FBQ25FLFVBQU0sTUFBTSxLQUFLLFFBQVEsU0FBUyxJQUNoQyxTQUFDLFFBQU07QUFBSyxlQUFBLElBQUksS0FBSyxNQUFNLFFBQVEsUUFBUSxXQUFXO01BQTFDLENBQTJDO0FBR3pELFdBQUssR0FBRztBQUNSLGFBQU87SUFDVDtBQUVBLElBQUFBLFVBQUEsVUFBQSxXQUFBLFNBQVMsTUFBYyxRQUFnQixRQUFnQixhQUFtQjtBQUN4RSxhQUFPLENBQUMsSUFBSSxLQUFLLE1BQU0sUUFBUSxRQUFRLFdBQVcsQ0FBQztJQUNyRDtBQUVBLElBQUFBLFVBQUEsVUFBQSxZQUFBLFNBQVUsTUFBZTtBQUN2QixjQUFRLE1BQU07UUFDWixLQUFLLFVBQVU7QUFDYixpQkFBTyxLQUFLLFFBQVEsS0FBSyxJQUFJO1FBQy9CLEtBQUssVUFBVTtBQUNiLGlCQUFPLEtBQUssUUFBUSxLQUFLLElBQUk7UUFDL0IsS0FBSyxVQUFVO0FBQ2IsaUJBQU8sS0FBSyxRQUFRLEtBQUssSUFBSTtRQUMvQixLQUFLLFVBQVU7QUFDYixpQkFBTyxLQUFLLFFBQVEsS0FBSyxJQUFJO1FBQy9CO0FBQ0UsaUJBQU8sS0FBSyxRQUFRLEtBQUssSUFBSTs7SUFFbkM7QUFFQSxJQUFBQSxVQUFBLFVBQUEsYUFBQSxTQUNFLE1BQWdFO0FBRWhFLGNBQVEsTUFBTTtRQUNaLEtBQUssVUFBVTtBQUNiLGlCQUFPLEtBQUssU0FBUyxLQUFLLElBQUk7UUFDaEMsS0FBSyxVQUFVO0FBQ2IsaUJBQU8sS0FBSyxTQUFTLEtBQUssSUFBSTtRQUNoQyxLQUFLLFVBQVU7QUFDYixpQkFBTyxLQUFLLFNBQVMsS0FBSyxJQUFJOztJQUVwQztBQUNGLFdBQUFBO0VBQUEsRUFwS0E7Ozs7O0FDVk0sU0FBVSxhQUNkLFVBQ0EsU0FDQSxPQUNBLEtBQ0EsSUFDQSxRQUF5QjtBQUV6QixNQUFNLFVBQWtCLENBQUE7QUFFeEIsV0FBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN4QyxRQUFJLFNBQU07QUFDVixRQUFJLFVBQU87QUFDWCxRQUFNLE1BQU0sU0FBUyxDQUFDO0FBRXRCLFFBQUksTUFBTSxHQUFHO0FBQ1gsZUFBUyxLQUFLLE1BQU0sTUFBTSxRQUFRLE1BQU07QUFDeEMsZ0JBQVUsTUFBTSxLQUFLLFFBQVEsTUFBTTtXQUM5QjtBQUNMLGVBQVMsS0FBSyxPQUFPLE1BQU0sS0FBSyxRQUFRLE1BQU07QUFDOUMsZ0JBQVUsTUFBTSxNQUFNLEdBQUcsUUFBUSxNQUFNOztBQUd6QyxRQUFNLE1BQU0sQ0FBQTtBQUNaLGFBQVMsSUFBSSxPQUFPLElBQUksS0FBSyxLQUFLO0FBQ2hDLFVBQU0sTUFBTSxPQUFPLENBQUM7QUFDcEIsVUFBSSxDQUFDLFVBQVUsR0FBRztBQUFHO0FBQ3JCLFVBQUksS0FBSyxHQUFHOztBQUVkLFFBQUksSUFBQztBQUNMLFFBQUksU0FBUyxHQUFHO0FBQ2QsVUFBSSxJQUFJLE1BQU0sTUFBTSxFQUFFLENBQUM7V0FDbEI7QUFDTCxVQUFJLElBQUksTUFBTTs7QUFHaEIsUUFBTSxPQUFPLFFBQVEsT0FBTztBQUM1QixRQUFNLE9BQU8sWUFBWSxHQUFHLGNBQWMsQ0FBQztBQUMzQyxRQUFNLE1BQU0sUUFBUSxNQUFNLElBQUk7QUFHOUIsUUFBSSxDQUFDLFNBQVMsU0FBUyxHQUFHO0FBQUcsY0FBUSxLQUFLLEdBQUc7O0FBRy9DLE9BQUssT0FBTztBQUVaLFNBQU87QUFDVDs7O0FDekNNLFNBQVUsS0FDZCxZQUNBLFNBQXNCO0FBRWQsTUFBQSxVQUE2QyxRQUFPLFNBQTNDLE9BQW9DLFFBQU8sTUFBckMsV0FBOEIsUUFBTyxVQUEzQixRQUFvQixRQUFPLE9BQXBCLFdBQWEsUUFBTztBQUU1RCxNQUFJLFFBQVEsUUFBUTtBQUNwQixNQUFJLFVBQVUsS0FBSyxhQUFhLEdBQUc7QUFDakMsV0FBTyxXQUFXLFVBQVU7O0FBRzlCLE1BQU0sY0FBY0MsVUFBUyxTQUFTLE9BQU87QUFFN0MsTUFBTSxLQUFLLElBQUksaUJBQVMsT0FBTztBQUMvQixLQUFHLFFBQVEsWUFBWSxNQUFNLFlBQVksS0FBSztBQUU5QyxNQUFJLFVBQVUsWUFBWSxJQUFJLGFBQWEsT0FBTztBQUVsRCxhQUFTO0FBQ0QsUUFBQSxLQUF1QixHQUFHLFVBQVUsSUFBSSxFQUM1QyxZQUFZLE1BQ1osWUFBWSxPQUNaLFlBQVksR0FBRyxHQUhWLFNBQU0sR0FBQSxDQUFBLEdBQUUsUUFBSyxHQUFBLENBQUEsR0FBRSxNQUFHLEdBQUEsQ0FBQTtBQU16QixRQUFNLFdBQVcsbUJBQW1CLFFBQVEsT0FBTyxLQUFLLElBQUksT0FBTztBQUVuRSxRQUFJLFNBQVMsUUFBUSxHQUFHO0FBQ3RCLFVBQU0sVUFBVSxhQUFhLFVBQVUsU0FBUyxPQUFPLEtBQUssSUFBSSxNQUFNO0FBRXRFLGVBQVMsSUFBSSxHQUFHLElBQUksUUFBUSxRQUFRLEtBQUs7QUFDdkMsWUFBTSxNQUFNLFFBQVEsQ0FBQztBQUNyQixZQUFJLFNBQVMsTUFBTSxPQUFPO0FBQ3hCLGlCQUFPLFdBQVcsVUFBVTs7QUFHOUIsWUFBSSxPQUFPLFNBQVM7QUFDbEIsY0FBTSxjQUFjLGVBQWUsS0FBSyxPQUFPO0FBQy9DLGNBQUksQ0FBQyxXQUFXLE9BQU8sV0FBVyxHQUFHO0FBQ25DLG1CQUFPLFdBQVcsVUFBVTs7QUFHOUIsY0FBSSxPQUFPO0FBQ1QsY0FBRTtBQUNGLGdCQUFJLENBQUMsT0FBTztBQUNWLHFCQUFPLFdBQVcsVUFBVTs7Ozs7V0FLL0I7QUFDTCxlQUFTLElBQUksT0FBTyxJQUFJLEtBQUssS0FBSztBQUNoQyxZQUFNLGFBQWEsT0FBTyxDQUFDO0FBQzNCLFlBQUksQ0FBQyxVQUFVLFVBQVUsR0FBRztBQUMxQjs7QUFHRixZQUFNLE9BQU8sWUFBWSxHQUFHLGNBQWMsVUFBVTtBQUNwRCxpQkFBUyxJQUFJLEdBQUcsSUFBSSxRQUFRLFFBQVEsS0FBSztBQUN2QyxjQUFNLE9BQU8sUUFBUSxDQUFDO0FBQ3RCLGNBQU0sTUFBTSxRQUFRLE1BQU0sSUFBSTtBQUM5QixjQUFJLFNBQVMsTUFBTSxPQUFPO0FBQ3hCLG1CQUFPLFdBQVcsVUFBVTs7QUFHOUIsY0FBSSxPQUFPLFNBQVM7QUFDbEIsZ0JBQU0sY0FBYyxlQUFlLEtBQUssT0FBTztBQUMvQyxnQkFBSSxDQUFDLFdBQVcsT0FBTyxXQUFXLEdBQUc7QUFDbkMscUJBQU8sV0FBVyxVQUFVOztBQUc5QixnQkFBSSxPQUFPO0FBQ1QsZ0JBQUU7QUFDRixrQkFBSSxDQUFDLE9BQU87QUFDVix1QkFBTyxXQUFXLFVBQVU7Ozs7Ozs7QUFPeEMsUUFBSSxRQUFRLGFBQWEsR0FBRztBQUMxQixhQUFPLFdBQVcsVUFBVTs7QUFJOUIsZ0JBQVksSUFBSSxTQUFTLFFBQVE7QUFFakMsUUFBSSxZQUFZLE9BQU8sU0FBUztBQUM5QixhQUFPLFdBQVcsVUFBVTs7QUFHOUIsUUFBSSxDQUFDLHFCQUFxQixJQUFJLEdBQUc7QUFDL0IsZ0JBQVUsR0FBRyxXQUFXLElBQUksRUFDMUIsWUFBWSxNQUNaLFlBQVksUUFDWixZQUFZLFFBQ1osQ0FBQzs7QUFJTCxPQUFHLFFBQVEsWUFBWSxNQUFNLFlBQVksS0FBSzs7QUFFbEQ7QUFFQSxTQUFTLFdBQ1AsSUFDQSxZQUNBLFNBQXNCO0FBR3BCLE1BQUEsVUFPRSxRQUFPLFNBTlQsV0FNRSxRQUFPLFVBTFQsWUFLRSxRQUFPLFdBSlQsV0FJRSxRQUFPLFVBSFQsYUFHRSxRQUFPLFlBRlQsY0FFRSxRQUFPLGFBRFQsWUFDRSxRQUFPO0FBRVgsU0FDRyxTQUFTLE9BQU8sS0FBSyxDQUFDLFNBQVMsU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLEtBQzVELFNBQVMsUUFBUSxLQUFLLENBQUMsR0FBRyxRQUFRLFVBQVUsS0FDNUMsU0FBUyxTQUFTLEtBQUssQ0FBQyxTQUFTLFdBQVcsR0FBRyxTQUFTLFVBQVUsQ0FBQyxLQUNuRSxTQUFTLEdBQUcsU0FBUyxLQUFLLENBQUMsR0FBRyxVQUFVLFVBQVUsS0FDbEQsYUFBYSxRQUFRLENBQUMsU0FBUyxHQUFHLFlBQVksVUFBVSxNQUN2RCxTQUFTLFVBQVUsS0FBSyxTQUFTLFdBQVcsTUFDNUMsQ0FBQyxTQUFTLFlBQVksR0FBRyxTQUFTLFVBQVUsQ0FBQyxLQUM3QyxDQUFDLFNBQVMsYUFBYSxHQUFHLFVBQVUsVUFBVSxDQUFDLEtBQ2hELFNBQVMsU0FBUyxNQUNmLGFBQWEsR0FBRyxXQUNoQixDQUFDLFNBQVMsV0FBVyxhQUFhLENBQUMsS0FDbkMsQ0FBQyxTQUFTLFdBQVcsQ0FBQyxHQUFHLFVBQVUsVUFBVSxLQUM1QyxjQUFjLEdBQUcsV0FDaEIsQ0FBQyxTQUFTLFdBQVcsYUFBYSxJQUFJLEdBQUcsT0FBTyxLQUNoRCxDQUFDLFNBQVMsV0FBVyxDQUFDLEdBQUcsY0FBYyxhQUFhLEdBQUcsT0FBTztBQUV4RTtBQUVBLFNBQVMsZUFBZSxNQUFZLFNBQXNCO0FBQ3hELFNBQU8sSUFBSSxhQUFhLE1BQU0sUUFBUSxJQUFJLEVBQUUsWUFBVztBQUN6RDtBQUVBLFNBQVMsV0FBdUMsWUFBeUI7QUFDdkUsU0FBTyxXQUFXLFNBQVE7QUFDNUI7QUFFQSxTQUFTLG1CQUNQLFFBQ0EsT0FDQSxLQUNBLElBQ0EsU0FBc0I7QUFFdEIsTUFBSSxXQUFXO0FBQ2YsV0FBUyxhQUFhLE9BQU8sYUFBYSxLQUFLLGNBQWM7QUFDM0QsUUFBTSxhQUFhLE9BQU8sVUFBVTtBQUVwQyxlQUFXLFdBQVcsSUFBSSxZQUFZLE9BQU87QUFFN0MsUUFBSTtBQUFVLGFBQU8sVUFBVSxJQUFJOztBQUdyQyxTQUFPO0FBQ1Q7QUFFQSxTQUFTLFlBQ1AsSUFDQSxhQUNBLFNBQXNCO0FBRWQsTUFBQSxPQUFxQyxRQUFPLE1BQXRDLFNBQStCLFFBQU8sUUFBOUIsV0FBdUIsUUFBTyxVQUFwQixXQUFhLFFBQU87QUFFcEQsTUFBSSxxQkFBcUIsSUFBSSxHQUFHO0FBQzlCLFdBQU8sYUFBYSxPQUFPOztBQUc3QixNQUNHLFFBQVEsTUFBTSxVQUNiLFNBQVMsTUFBTSxLQUNmLENBQUMsU0FBUyxRQUFRLFlBQVksSUFBSSxLQUNuQyxRQUFRLE1BQU0sWUFDYixTQUFTLFFBQVEsS0FDakIsQ0FBQyxTQUFTLFVBQVUsWUFBWSxNQUFNLEtBQ3ZDLFFBQVEsTUFBTSxZQUNiLFNBQVMsUUFBUSxLQUNqQixDQUFDLFNBQVMsVUFBVSxZQUFZLE1BQU0sR0FDeEM7QUFDQSxXQUFPLENBQUE7O0FBR1QsU0FBTyxHQUFHLFdBQVcsSUFBSSxFQUN2QixZQUFZLE1BQ1osWUFBWSxRQUNaLFlBQVksUUFDWixZQUFZLFdBQVc7QUFFM0I7OztBQ3RMTyxJQUFNLE9BQU87RUFDbEIsSUFBSSxJQUFJLFFBQVEsQ0FBQztFQUNqQixJQUFJLElBQUksUUFBUSxDQUFDO0VBQ2pCLElBQUksSUFBSSxRQUFRLENBQUM7RUFDakIsSUFBSSxJQUFJLFFBQVEsQ0FBQztFQUNqQixJQUFJLElBQUksUUFBUSxDQUFDO0VBQ2pCLElBQUksSUFBSSxRQUFRLENBQUM7RUFDakIsSUFBSSxJQUFJLFFBQVEsQ0FBQzs7QUFHWixJQUFNLGtCQUEyQjtFQUN0QyxNQUFNLFVBQVU7RUFDaEIsU0FBUztFQUNULFVBQVU7RUFDVixNQUFNLEtBQUs7RUFDWCxPQUFPO0VBQ1AsT0FBTztFQUNQLE1BQU07RUFDTixVQUFVO0VBQ1YsU0FBUztFQUNULFlBQVk7RUFDWixhQUFhO0VBQ2IsV0FBVztFQUNYLFVBQVU7RUFDVixXQUFXO0VBQ1gsWUFBWTtFQUNaLFFBQVE7RUFDUixVQUFVO0VBQ1YsVUFBVTtFQUNWLFVBQVU7O0FBR0wsSUFBTSxjQUFjLE9BQU8sS0FBSyxlQUFlO0FBUXRELElBQUE7O0VBQUEsV0FBQTtBQWlDRSxhQUFBQyxPQUFZLFNBQWdDLFNBQWU7QUFBL0MsVUFBQSxZQUFBLFFBQUE7QUFBQSxrQkFBQSxDQUFBO01BQThCO0FBQUUsVUFBQSxZQUFBLFFBQUE7QUFBQSxrQkFBQTtNQUFlO0FBRXpELFdBQUssU0FBUyxVQUFVLE9BQU8sSUFBSSxNQUFLO0FBR3hDLFdBQUssY0FBYyxrQkFBa0IsT0FBTztBQUNwQyxVQUFBLGdCQUFrQixhQUFhLE9BQU8sRUFBQztBQUMvQyxXQUFLLFVBQVU7SUFDakI7QUFFTyxJQUFBQSxPQUFBLFlBQVAsU0FBaUIsTUFBYyxVQUFtQjtBQUNoRCxhQUFPLFVBQVUsTUFBTSxRQUFRO0lBQ2pDO0FBRU8sSUFBQUEsT0FBQSxXQUFQLFNBQWdCLE1BQWMsVUFBbUI7QUFDL0MsYUFBTyxTQUFTLE1BQU0sUUFBUTtJQUNoQztBQUlPLElBQUFBLE9BQUEsYUFBUCxTQUFrQixLQUFXO0FBQzNCLGFBQU8sSUFBSUEsT0FBTUEsT0FBTSxZQUFZLEdBQUcsS0FBSyxNQUFTO0lBQ3REO0FBSVUsSUFBQUEsT0FBQSxVQUFBLFFBQVYsU0FDRSxZQUF5QjtBQUV6QixhQUFPLEtBQUssWUFBWSxLQUFLLE9BQU87SUFDdEM7QUFFUSxJQUFBQSxPQUFBLFVBQUEsWUFBUixTQUFrQixNQUF5QixNQUF3QjtBQUNqRSxVQUFJLENBQUMsS0FBSztBQUFRLGVBQU87QUFDekIsYUFBTyxLQUFLLE9BQU8sVUFBVSxNQUFNLElBQUk7SUFDekM7QUFFTyxJQUFBQSxPQUFBLFVBQUEsWUFBUCxTQUNFLE1BQ0EsT0FDQSxNQUF3QjtBQUV4QixVQUFJLENBQUMsS0FBSztBQUFRO0FBQ2xCLGFBQU8sS0FBSyxPQUFPLFVBQVUsTUFBTSxPQUFPLElBQUk7SUFDaEQ7QUFRQSxJQUFBQSxPQUFBLFVBQUEsTUFBQSxTQUFJLFVBQTRDO0FBQzlDLFVBQUksVUFBVTtBQUNaLGVBQU8sS0FBSyxNQUFNLElBQUksMkJBQW1CLE9BQU8sQ0FBQSxHQUFJLFFBQVEsQ0FBQzs7QUFHL0QsVUFBSSxTQUFTLEtBQUssVUFBVSxLQUFLO0FBQ2pDLFVBQUksV0FBVyxPQUFPO0FBQ3BCLGlCQUFTLEtBQUssTUFBTSxJQUFJLG1CQUFXLE9BQU8sQ0FBQSxDQUFFLENBQUM7QUFDN0MsYUFBSyxVQUFVLE9BQU8sTUFBTTs7QUFFOUIsYUFBTztJQUNUO0FBVUEsSUFBQUEsT0FBQSxVQUFBLFVBQUEsU0FDRSxPQUNBLFFBQ0EsS0FDQSxVQUE0QztBQUQ1QyxVQUFBLFFBQUEsUUFBQTtBQUFBLGNBQUE7TUFBVztBQUdYLFVBQUksQ0FBQyxZQUFZLEtBQUssS0FBSyxDQUFDLFlBQVksTUFBTSxHQUFHO0FBQy9DLGNBQU0sSUFBSSxNQUFNLHlDQUF5Qzs7QUFFM0QsVUFBTSxPQUFPO1FBQ1g7UUFDQTtRQUNBOztBQUdGLFVBQUksVUFBVTtBQUNaLGVBQU8sS0FBSyxNQUFNLElBQUksMkJBQW1CLFdBQVcsTUFBTSxRQUFRLENBQUM7O0FBR3JFLFVBQUksU0FBUyxLQUFLLFVBQVUsV0FBVyxJQUFJO0FBQzNDLFVBQUksV0FBVyxPQUFPO0FBQ3BCLGlCQUFTLEtBQUssTUFBTSxJQUFJLG1CQUFXLFdBQVcsSUFBSSxDQUFDO0FBQ25ELGFBQUssVUFBVSxXQUFXLFFBQVEsSUFBSTs7QUFFeEMsYUFBTztJQUNUO0FBU0EsSUFBQUEsT0FBQSxVQUFBLFNBQUEsU0FBTyxJQUFVLEtBQVc7QUFBWCxVQUFBLFFBQUEsUUFBQTtBQUFBLGNBQUE7TUFBVztBQUMxQixVQUFJLENBQUMsWUFBWSxFQUFFLEdBQUc7QUFDcEIsY0FBTSxJQUFJLE1BQU0sd0NBQXdDOztBQUUxRCxVQUFNLE9BQU8sRUFBRSxJQUFRLElBQVE7QUFDL0IsVUFBSSxTQUFTLEtBQUssVUFBVSxVQUFVLElBQUk7QUFDMUMsVUFBSSxXQUFXLE9BQU87QUFDcEIsaUJBQVMsS0FBSyxNQUFNLElBQUksbUJBQVcsVUFBVSxJQUFJLENBQUM7QUFDbEQsYUFBSyxVQUFVLFVBQVUsUUFBUSxJQUFJOztBQUV2QyxhQUFPO0lBQ1Q7QUFTQSxJQUFBQSxPQUFBLFVBQUEsUUFBQSxTQUFNLElBQVUsS0FBVztBQUFYLFVBQUEsUUFBQSxRQUFBO0FBQUEsY0FBQTtNQUFXO0FBQ3pCLFVBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRztBQUNwQixjQUFNLElBQUksTUFBTSx1Q0FBdUM7O0FBRXpELFVBQU0sT0FBTyxFQUFFLElBQVEsSUFBUTtBQUMvQixVQUFJLFNBQVMsS0FBSyxVQUFVLFNBQVMsSUFBSTtBQUN6QyxVQUFJLFdBQVcsT0FBTztBQUNwQixpQkFBUyxLQUFLLE1BQU0sSUFBSSxtQkFBVyxTQUFTLElBQUksQ0FBQztBQUNqRCxhQUFLLFVBQVUsU0FBUyxRQUFRLElBQUk7O0FBRXRDLGFBQU87SUFDVDtBQU1BLElBQUFBLE9BQUEsVUFBQSxRQUFBLFdBQUE7QUFDRSxhQUFPLEtBQUssSUFBRyxFQUFHO0lBQ3BCO0FBUUEsSUFBQUEsT0FBQSxVQUFBLFdBQUEsV0FBQTtBQUNFLGFBQU8sZ0JBQWdCLEtBQUssV0FBVztJQUN6QztBQU1BLElBQUFBLE9BQUEsVUFBQSxTQUFBLFNBQ0UsU0FDQSxVQUNBLGVBQTZCO0FBRTdCLGFBQU8sT0FBTyxNQUFNLFNBQVMsVUFBVSxhQUFhO0lBQ3REO0FBRUEsSUFBQUEsT0FBQSxVQUFBLDJCQUFBLFdBQUE7QUFDRSxhQUFPLG1CQUFtQixJQUFJO0lBQ2hDO0FBTUEsSUFBQUEsT0FBQSxVQUFBLFFBQUEsV0FBQTtBQUNFLGFBQU8sSUFBSUEsT0FBTSxLQUFLLFdBQVc7SUFDbkM7QUE5TWdCLElBQUFBLE9BQUEsY0FBMEM7TUFDeEQ7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7O0FBR2MsSUFBQUEsT0FBQSxTQUFTLFVBQVU7QUFDbkIsSUFBQUEsT0FBQSxVQUFVLFVBQVU7QUFDcEIsSUFBQUEsT0FBQSxTQUFTLFVBQVU7QUFDbkIsSUFBQUEsT0FBQSxRQUFRLFVBQVU7QUFDbEIsSUFBQUEsT0FBQSxTQUFTLFVBQVU7QUFDbkIsSUFBQUEsT0FBQSxXQUFXLFVBQVU7QUFDckIsSUFBQUEsT0FBQSxXQUFXLFVBQVU7QUFFckIsSUFBQUEsT0FBQSxLQUFLLEtBQUs7QUFDVixJQUFBQSxPQUFBLEtBQUssS0FBSztBQUNWLElBQUFBLE9BQUEsS0FBSyxLQUFLO0FBQ1YsSUFBQUEsT0FBQSxLQUFLLEtBQUs7QUFDVixJQUFBQSxPQUFBLEtBQUssS0FBSztBQUNWLElBQUFBLE9BQUEsS0FBSyxLQUFLO0FBQ1YsSUFBQUEsT0FBQSxLQUFLLEtBQUs7QUFvQm5CLElBQUFBLE9BQUEsY0FBYztBQU1kLElBQUFBLE9BQUEsa0JBQWtCO0FBNkozQixXQUFBQTtJQXROQTs7OztBQzNETSxTQUFVLFFBQ2QsWUFDQSxRQUNBLFNBQ0EsUUFDQSxTQUNBLE1BQXdCO0FBRXhCLE1BQU0sY0FBd0MsQ0FBQTtBQUM5QyxNQUFNLFVBQVUsV0FBVztBQUUzQixXQUFTLFdBQVcsT0FBYSxRQUFZO0FBQzNDLFlBQVEsUUFBUSxTQUFVLE9BQUs7QUFDN0IsWUFBTSxRQUFRLE9BQU8sUUFBUSxJQUFJLEVBQUUsUUFBUSxTQUFVLE1BQUk7QUFDdkQsb0JBQVksT0FBTyxJQUFJLENBQUMsSUFBSTtNQUM5QixDQUFDO0lBQ0gsQ0FBQztFQUNIO0FBRUEsVUFBUSxRQUFRLFNBQVUsTUFBSTtBQUM1QixRQUFNQyxhQUFZLElBQUksYUFBYSxNQUFNLElBQUksRUFBRSxZQUFXO0FBQzFELGdCQUFZLE9BQU9BLFVBQVMsQ0FBQyxJQUFJO0VBQ25DLENBQUM7QUFFRCxhQUFXLFNBQVMsU0FBVSxNQUFJO0FBQ2hDLFFBQU0sS0FBSyxPQUFPLElBQUk7QUFDdEIsUUFBSSxNQUFNLEVBQUU7QUFBRyxhQUFPLFFBQVEsS0FBSyxNQUFNLElBQUk7QUFDN0MsUUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHO0FBQ3BCLGlCQUFXLElBQUksS0FBSyxLQUFLLENBQUMsR0FBRyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUM7QUFDN0MsVUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHO0FBQ3BCLG9CQUFZLEVBQUUsSUFBSTtBQUNsQixlQUFPLFFBQVEsS0FBSyxNQUFNLElBQUk7OztBQUdsQyxXQUFPO0VBQ1Q7QUFFQSxNQUFJLFdBQVcsV0FBVyxXQUFXO0FBQ25DLGVBQVcsV0FBVyxLQUFLLE9BQU8sV0FBVyxLQUFLLE1BQU07QUFDeEQsZUFBVyxTQUFTLFNBQVUsTUFBSTtBQUNoQyxVQUFNLEtBQUssT0FBTyxJQUFJO0FBQ3RCLFVBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRztBQUNwQixvQkFBWSxFQUFFLElBQUk7QUFDbEIsZUFBTyxRQUFRLEtBQUssTUFBTSxJQUFJOztBQUVoQyxhQUFPO0lBQ1Q7O0FBR0YsV0FBUyxJQUFJLEdBQUcsSUFBSSxPQUFPLFFBQVEsS0FBSztBQUN0QyxRQUFNLFlBQVksSUFBSSxhQUFhLE9BQU8sQ0FBQyxHQUFHLElBQUksRUFBRSxZQUFXO0FBQy9ELFFBQUksQ0FBQyxXQUFXLE9BQU8sSUFBSSxLQUFLLFVBQVUsUUFBTyxDQUFFLENBQUM7QUFBRzs7QUFHekQsU0FBTyxRQUFRLFNBQVUsT0FBSztBQUM1QixTQUFLLFlBQVksTUFBTSxPQUFPO0VBQ2hDLENBQUM7QUFFRCxNQUFNLE1BQU0sV0FBVztBQUN2QixPQUFLLEdBQUc7QUFDUixVQUFRLFdBQVcsUUFBUTtJQUN6QixLQUFLO0lBQ0wsS0FBSztBQUNILGFBQU87SUFDVCxLQUFLO0FBQ0gsYUFBUyxJQUFJLFVBQVUsSUFBSSxJQUFJLFNBQVMsQ0FBQyxLQUFNO0lBQ2pELEtBQUs7SUFDTDtBQUNFLGFBQVMsSUFBSSxVQUFVLElBQUksQ0FBQyxLQUFNOztBQUV4Qzs7O0FDekRBLElBQU1DLG1CQUFtQztFQUN2QyxTQUFTO0VBQ1QsT0FBTztFQUNQLFFBQVE7RUFDUixVQUFVO0VBQ1YsWUFBWTtFQUNaLE1BQU07O0FBR0YsU0FBVSxXQUFXQyxJQUFXLFNBQWlDO0FBQ3JFLE1BQU0sWUFBZ0MsQ0FBQTtBQUN0QyxNQUFJLFlBQW9CLENBQUE7QUFDeEIsTUFBTSxhQUFpQyxDQUFBO0FBQ3ZDLE1BQUksYUFBcUIsQ0FBQTtBQUV6QixNQUFNLGdCQUFnQixhQUFhQSxFQUFDO0FBQzVCLE1BQUEsVUFBWSxjQUFhO0FBQzNCLE1BQUEsT0FBUyxjQUFhO0FBRTVCLE1BQU0sUUFBUSxlQUFlQSxJQUFHLFFBQVEsTUFBTTtBQUU5QyxRQUFNLFFBQVEsU0FBQyxNQUFJOztBQUNqQixRQUFJLENBQUM7QUFBTTtBQUNMLFFBQUEsS0FBeUIsY0FBYyxJQUFJLEdBQXpDLE9BQUksR0FBQSxNQUFFLFFBQUssR0FBQSxPQUFFLFFBQUssR0FBQTtBQUUxQixZQUFRLEtBQUssWUFBVyxHQUFJO01BQzFCLEtBQUs7QUFDSCxZQUFJLE1BQU0sUUFBUTtBQUNoQixnQkFBTSxJQUFJLE1BQU0sMkJBQUEsT0FBMkIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFFOztBQUc5RCxrQkFBVSxLQUFLLFlBQVksSUFBSSxDQUFDO0FBQ2hDO01BRUYsS0FBSztBQUNHLFlBQUEsTUFBZ0IsS0FBQSw0QkFBNEIsS0FBSyxJQUFJLE9BQUMsUUFBQSxPQUFBLFNBQUEsS0FBSSxDQUFBLEdBQXZELFlBQVMsR0FBQSxDQUFBO0FBQ2xCLFlBQUksYUFBYSxDQUFDLE1BQU07QUFDdEIsaUJBQU87O0FBRVQsb0JBQVksVUFBVSxPQUFPLFdBQVcsT0FBTyxLQUFLLENBQUM7QUFDckQ7TUFFRixLQUFLO0FBQ0gsWUFBSSxNQUFNLFFBQVE7QUFDaEIsZ0JBQU0sSUFBSSxNQUFNLDRCQUFBLE9BQTRCLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBRTs7QUFHL0QsbUJBQVcsS0FBSyxZQUFZLEtBQUssQ0FBQztBQUNsQztNQUVGLEtBQUs7QUFDSCxxQkFBYSxXQUFXLE9BQU8sV0FBVyxPQUFPLEtBQUssQ0FBQztBQUN2RDtNQUVGLEtBQUs7QUFDSDtNQUVGO0FBQ0UsY0FBTSxJQUFJLE1BQU0sMkJBQTJCLElBQUk7O0VBRXJELENBQUM7QUFFRCxTQUFPO0lBQ0w7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBOztBQUVKO0FBRUEsU0FBUyxVQUFVQSxJQUFXLFNBQWlDO0FBQ3ZELE1BQUEsS0FDSixXQUFXQSxJQUFHLE9BQU8sR0FEZixZQUFTLEdBQUEsV0FBRSxZQUFTLEdBQUEsV0FBRSxhQUFVLEdBQUEsWUFBRSxhQUFVLEdBQUEsWUFBRSxVQUFPLEdBQUEsU0FBRSxPQUFJLEdBQUE7QUFHbkUsTUFBTSxVQUFVLFFBQVEsVUFBVTtBQUVsQyxNQUFJLFFBQVEsWUFBWTtBQUN0QixZQUFRLFdBQVc7QUFDbkIsWUFBUSxTQUFTOztBQUduQixNQUNFLFFBQVEsWUFDUixVQUFVLFNBQVMsS0FDbkIsVUFBVSxVQUNWLFdBQVcsVUFDWCxXQUFXLFFBQ1g7QUFDQSxRQUFNLFNBQU8sSUFBSSxTQUFTLE9BQU87QUFFakMsV0FBSyxRQUFRLE9BQU87QUFDcEIsV0FBSyxLQUFLLFFBQVEsTUFBUztBQUUzQixjQUFVLFFBQVEsU0FBQ0MsTUFBRztBQUNwQixhQUFLLE1BQU0sSUFBSSxNQUFNLGtCQUFrQkEsTUFBSyxTQUFTLElBQUksR0FBRyxPQUFPLENBQUM7SUFDdEUsQ0FBQztBQUVELGNBQVUsUUFBUSxTQUFDLE1BQUk7QUFDckIsYUFBSyxNQUFNLElBQUk7SUFDakIsQ0FBQztBQUVELGVBQVcsUUFBUSxTQUFDQSxNQUFHO0FBQ3JCLGFBQUssT0FBTyxJQUFJLE1BQU0sa0JBQWtCQSxNQUFLLFNBQVMsSUFBSSxHQUFHLE9BQU8sQ0FBQztJQUN2RSxDQUFDO0FBRUQsZUFBVyxRQUFRLFNBQUMsTUFBSTtBQUN0QixhQUFLLE9BQU8sSUFBSTtJQUNsQixDQUFDO0FBRUQsUUFBSSxRQUFRLGNBQWMsUUFBUTtBQUFTLGFBQUssTUFBTSxPQUFPO0FBQzdELFdBQU87O0FBR1QsTUFBTSxNQUFNLFVBQVUsQ0FBQyxLQUFLLENBQUE7QUFDNUIsU0FBTyxJQUFJLE1BQ1Qsa0JBQ0UsS0FDQSxJQUFJLFdBQVcsUUFBUSxXQUFXLFNBQ2xDLElBQUksUUFBUSxRQUFRLFFBQVEsSUFBSSxHQUVsQyxPQUFPO0FBRVg7QUFFTSxTQUFVLFNBQ2RELElBQ0EsU0FBc0M7QUFBdEMsTUFBQSxZQUFBLFFBQUE7QUFBQSxjQUFBLENBQUE7RUFBc0M7QUFFdEMsU0FBTyxVQUFVQSxJQUFHRSxtQkFBa0IsT0FBTyxDQUFDO0FBQ2hEO0FBRUEsU0FBUyxrQkFDUCxLQUNBLFNBQ0EsTUFBb0I7QUFFcEIsU0FBQSxTQUFBLFNBQUEsQ0FBQSxHQUNLLEdBQUcsR0FBQSxFQUNOLFNBQ0EsS0FBSSxDQUFBO0FBRVI7QUFFQSxTQUFTQSxtQkFBa0IsU0FBaUM7QUFDMUQsTUFBTSxVQUFvQixDQUFBO0FBQzFCLE1BQU0sT0FBTyxPQUFPLEtBQUssT0FBTztBQUNoQyxNQUFNQyxlQUFjLE9BQU8sS0FDekJKLGdCQUFlO0FBR2pCLE9BQUssUUFBUSxTQUFVLEtBQUc7QUFDeEIsUUFBSSxDQUFDLFNBQVNJLGNBQWEsR0FBRztBQUFHLGNBQVEsS0FBSyxHQUFHO0VBQ25ELENBQUM7QUFFRCxNQUFJLFFBQVEsUUFBUTtBQUNsQixVQUFNLElBQUksTUFBTSxzQkFBc0IsUUFBUSxLQUFLLElBQUksQ0FBQzs7QUFHMUQsU0FBQSxTQUFBLFNBQUEsQ0FBQSxHQUFZSixnQkFBZSxHQUFLLE9BQU87QUFDekM7QUFFQSxTQUFTLFlBQVksTUFBWTtBQUMvQixNQUFJLEtBQUssUUFBUSxHQUFHLE1BQU0sSUFBSTtBQUM1QixXQUFPO01BQ0wsTUFBTTtNQUNOLE9BQU87OztBQUlMLE1BQUEsS0FBZ0IsTUFBTSxNQUFNLEtBQUssQ0FBQyxHQUFqQyxPQUFJLEdBQUEsQ0FBQSxHQUFFLFFBQUssR0FBQSxDQUFBO0FBQ2xCLFNBQU87SUFDTDtJQUNBOztBQUVKO0FBRUEsU0FBUyxjQUFjLE1BQVk7QUFDM0IsTUFBQSxLQUFrQixZQUFZLElBQUksR0FBaEMsT0FBSSxHQUFBLE1BQUUsUUFBSyxHQUFBO0FBQ25CLE1BQU0sUUFBUSxLQUFLLE1BQU0sR0FBRztBQUM1QixNQUFJLENBQUM7QUFBTyxVQUFNLElBQUksTUFBTSxxQkFBcUI7QUFFakQsU0FBTztJQUNMLE1BQU0sTUFBTSxDQUFDLEVBQUUsWUFBVztJQUMxQixPQUFPLE1BQU0sTUFBTSxDQUFDO0lBQ3BCOztBQUVKO0FBRUEsU0FBUyxlQUFlQyxJQUFXLFFBQWM7QUFBZCxNQUFBLFdBQUEsUUFBQTtBQUFBLGFBQUE7RUFBYztBQUMvQyxFQUFBQSxLQUFJQSxNQUFLQSxHQUFFLEtBQUk7QUFDZixNQUFJLENBQUNBO0FBQUcsVUFBTSxJQUFJLE1BQU0sc0JBQXNCO0FBSTlDLE1BQUksQ0FBQyxRQUFRO0FBQ1gsV0FBT0EsR0FBRSxNQUFNLElBQUk7O0FBR3JCLE1BQU0sUUFBUUEsR0FBRSxNQUFNLElBQUk7QUFDMUIsTUFBSSxJQUFJO0FBQ1IsU0FBTyxJQUFJLE1BQU0sUUFBUTtBQUV2QixRQUFNLE9BQVEsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxTQUFTLEVBQUU7QUFDckQsUUFBSSxDQUFDLE1BQU07QUFDVCxZQUFNLE9BQU8sR0FBRyxDQUFDO2VBQ1IsSUFBSSxLQUFLLEtBQUssQ0FBQyxNQUFNLEtBQUs7QUFDbkMsWUFBTSxJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQztBQUM1QixZQUFNLE9BQU8sR0FBRyxDQUFDO1dBQ1o7QUFDTCxXQUFLOzs7QUFJVCxTQUFPO0FBQ1Q7QUFFQSxTQUFTLGlCQUFpQixPQUFlO0FBQ3ZDLFFBQU0sUUFBUSxTQUFDLE1BQUk7QUFDakIsUUFBSSxDQUFDLCtCQUErQixLQUFLLElBQUksR0FBRztBQUM5QyxZQUFNLElBQUksTUFBTSxvQ0FBb0MsSUFBSTs7RUFFNUQsQ0FBQztBQUNIO0FBRUEsU0FBUyxXQUFXLFVBQWtCLE9BQWU7QUFDbkQsbUJBQWlCLEtBQUs7QUFFdEIsU0FBTyxTQUFTLE1BQU0sR0FBRyxFQUFFLElBQUksU0FBQyxTQUFPO0FBQUssV0FBQSxrQkFBa0IsT0FBTztFQUF6QixDQUEwQjtBQUN4RTs7O0FDalBBLFNBQVMsbUJBQXNCLFdBQWlCO0FBQWhELE1BQUEsUUFBQTtBQUNFLFNBQU8sU0FBQyxPQUFTO0FBQ2YsUUFBSSxVQUFVLFFBQVc7QUFDdkIsWUFBSyxJQUFBLE9BQUksU0FBUyxDQUFFLElBQUk7O0FBRzFCLFFBQUksTUFBSyxJQUFBLE9BQUksU0FBUyxDQUFFLE1BQU0sUUFBVztBQUN2QyxhQUFPLE1BQUssSUFBQSxPQUFJLFNBQVMsQ0FBRTs7QUFHN0IsYUFBUyxJQUFJLEdBQUcsSUFBSSxNQUFLLE9BQU8sUUFBUSxLQUFLO0FBQzNDLFVBQU0sVUFBVyxNQUFLLE9BQU8sQ0FBQyxFQUFFLFlBQVksU0FBUztBQUNyRCxVQUFJLFNBQU87QUFDVCxlQUFPOzs7RUFHYjtBQUNGO0FBRUEsSUFBQTs7RUFBQSxTQUFBLFFBQUE7QUFBOEIsY0FBQUksV0FBQSxNQUFBO0FBZTVCLGFBQUFBLFVBQVksU0FBZTtBQUFmLFVBQUEsWUFBQSxRQUFBO0FBQUEsa0JBQUE7TUFBZTtBQUEzQixVQUFBLFFBQ0UsT0FBQSxLQUFBLE1BQU0sQ0FBQSxHQUFJLE9BQU8sS0FBQztBQVFwQixZQUFBLFVBQVUsbUJBQW1CLE1BQU0sT0FBTSxDQUFDLFNBQVMsQ0FBQztBQUNwRCxZQUFBLE9BQU8sbUJBQW1CLE1BQU0sT0FBTSxDQUFDLE1BQU0sQ0FBQztBQVA1QyxZQUFLLFNBQVMsQ0FBQTtBQUNkLFlBQUssU0FBUyxDQUFBO0FBQ2QsWUFBSyxVQUFVLENBQUE7QUFDZixZQUFLLFVBQVUsQ0FBQTs7SUFDakI7QUFLQSxJQUFBQSxVQUFBLFVBQUEsUUFBQSxTQUNFLFlBQXlCO0FBRXpCLGFBQU8sUUFDTCxZQUNBLEtBQUssUUFDTCxLQUFLLFNBQ0wsS0FBSyxRQUNMLEtBQUssU0FDTCxLQUFLLEtBQUksQ0FBRTtJQUVmO0FBT0EsSUFBQUEsVUFBQSxVQUFBLFFBQUEsU0FBTSxPQUFZO0FBQ2hCLGVBQVMsT0FBTyxLQUFLLE1BQU07SUFDN0I7QUFPQSxJQUFBQSxVQUFBLFVBQUEsU0FBQSxTQUFPLE9BQVk7QUFDakIsZUFBUyxPQUFPLEtBQUssT0FBTztJQUM5QjtBQU9BLElBQUFBLFVBQUEsVUFBQSxRQUFBLFNBQU0sTUFBVTtBQUNkLGVBQVMsTUFBTSxLQUFLLE1BQU07SUFDNUI7QUFPQSxJQUFBQSxVQUFBLFVBQUEsU0FBQSxTQUFPLE1BQVU7QUFDZixlQUFTLE1BQU0sS0FBSyxPQUFPO0lBQzdCO0FBT0EsSUFBQUEsVUFBQSxVQUFBLFNBQUEsV0FBQTtBQUNFLGFBQU8sS0FBSyxPQUFPLElBQUksU0FBQyxHQUFDO0FBQUssZUFBQSxTQUFTLEVBQUUsU0FBUSxDQUFFO01BQXJCLENBQXNCO0lBQ3REO0FBT0EsSUFBQUEsVUFBQSxVQUFBLFVBQUEsV0FBQTtBQUNFLGFBQU8sS0FBSyxRQUFRLElBQUksU0FBQyxHQUFDO0FBQUssZUFBQSxTQUFTLEVBQUUsU0FBUSxDQUFFO01BQXJCLENBQXNCO0lBQ3ZEO0FBT0EsSUFBQUEsVUFBQSxVQUFBLFNBQUEsV0FBQTtBQUNFLGFBQU8sS0FBSyxPQUFPLElBQUksU0FBQyxHQUFDO0FBQUssZUFBQSxJQUFJLEtBQUssRUFBRSxRQUFPLENBQUU7TUFBcEIsQ0FBcUI7SUFDckQ7QUFPQSxJQUFBQSxVQUFBLFVBQUEsVUFBQSxXQUFBO0FBQ0UsYUFBTyxLQUFLLFFBQVEsSUFBSSxTQUFDLEdBQUM7QUFBSyxlQUFBLElBQUksS0FBSyxFQUFFLFFBQU8sQ0FBRTtNQUFwQixDQUFxQjtJQUN0RDtBQUVBLElBQUFBLFVBQUEsVUFBQSxVQUFBLFdBQUE7QUFDRSxVQUFJLFNBQW1CLENBQUE7QUFFdkIsVUFBSSxDQUFDLEtBQUssT0FBTyxVQUFVLEtBQUssVUFBVTtBQUN4QyxpQkFBUyxPQUFPLE9BQU8sZ0JBQWdCLEVBQUUsU0FBUyxLQUFLLFNBQVEsQ0FBRSxDQUFDOztBQUdwRSxXQUFLLE9BQU8sUUFBUSxTQUFVLE9BQUs7QUFDakMsaUJBQVMsT0FBTyxPQUFPLE1BQU0sU0FBUSxFQUFHLE1BQU0sSUFBSSxDQUFDO01BQ3JELENBQUM7QUFFRCxXQUFLLFFBQVEsUUFBUSxTQUFVLFFBQU07QUFDbkMsaUJBQVMsT0FBTyxPQUNkLE9BQ0csU0FBUSxFQUNSLE1BQU0sSUFBSSxFQUNWLElBQUksU0FBQyxNQUFJO0FBQUssaUJBQUEsS0FBSyxRQUFRLFdBQVcsU0FBUztRQUFqQyxDQUFrQyxFQUNoRCxPQUFPLFNBQUMsTUFBSTtBQUFLLGlCQUFBLENBQUMsV0FBVyxLQUFLLElBQUk7UUFBckIsQ0FBc0IsQ0FBQztNQUUvQyxDQUFDO0FBRUQsVUFBSSxLQUFLLE9BQU8sUUFBUTtBQUN0QixlQUFPLEtBQUssZUFBZSxTQUFTLEtBQUssUUFBUSxLQUFLLEtBQUksQ0FBRSxDQUFDOztBQUcvRCxVQUFJLEtBQUssUUFBUSxRQUFRO0FBQ3ZCLGVBQU8sS0FBSyxlQUFlLFVBQVUsS0FBSyxTQUFTLEtBQUssS0FBSSxDQUFFLENBQUM7O0FBR2pFLGFBQU87SUFDVDtBQVFBLElBQUFBLFVBQUEsVUFBQSxXQUFBLFdBQUE7QUFDRSxhQUFPLEtBQUssUUFBTyxFQUFHLEtBQUssSUFBSTtJQUNqQztBQUtBLElBQUFBLFVBQUEsVUFBQSxRQUFBLFdBQUE7QUFDRSxVQUFNLE1BQU0sSUFBSUEsVUFBUyxDQUFDLENBQUMsS0FBSyxNQUFNO0FBRXRDLFdBQUssT0FBTyxRQUFRLFNBQUMsTUFBSTtBQUFLLGVBQUEsSUFBSSxNQUFNLEtBQUssTUFBSyxDQUFFO01BQXRCLENBQXVCO0FBQ3JELFdBQUssUUFBUSxRQUFRLFNBQUMsTUFBSTtBQUFLLGVBQUEsSUFBSSxPQUFPLEtBQUssTUFBSyxDQUFFO01BQXZCLENBQXdCO0FBQ3ZELFdBQUssT0FBTyxRQUFRLFNBQUMsTUFBSTtBQUFLLGVBQUEsSUFBSSxNQUFNLElBQUksS0FBSyxLQUFLLFFBQU8sQ0FBRSxDQUFDO01BQWxDLENBQW1DO0FBQ2pFLFdBQUssUUFBUSxRQUFRLFNBQUMsTUFBSTtBQUFLLGVBQUEsSUFBSSxPQUFPLElBQUksS0FBSyxLQUFLLFFBQU8sQ0FBRSxDQUFDO01BQW5DLENBQW9DO0FBRW5FLGFBQU87SUFDVDtBQUNGLFdBQUFBO0VBQUEsRUF2SzhCLEtBQUs7O0FBeUtuQyxTQUFTLFNBQVMsT0FBYyxZQUFtQjtBQUNqRCxNQUFJLEVBQUUsaUJBQWlCLFFBQVE7QUFDN0IsVUFBTSxJQUFJLFVBQVUsT0FBTyxLQUFLLElBQUksd0JBQXdCOztBQUc5RCxNQUFJLENBQUMsU0FBUyxXQUFXLElBQUksTUFBTSxHQUFHLE9BQU8sS0FBSyxDQUFDLEdBQUc7QUFDcEQsZUFBVyxLQUFLLEtBQUs7O0FBRXpCO0FBRUEsU0FBUyxTQUFTLE1BQVksWUFBa0I7QUFDOUMsTUFBSSxFQUFFLGdCQUFnQixPQUFPO0FBQzNCLFVBQU0sSUFBSSxVQUFVLE9BQU8sSUFBSSxJQUFJLHVCQUF1Qjs7QUFFNUQsTUFBSSxDQUFDLFNBQVMsV0FBVyxJQUFJLE1BQU0sR0FBRyxPQUFPLElBQUksQ0FBQyxHQUFHO0FBQ25ELGVBQVcsS0FBSyxJQUFJO0FBQ3BCLFNBQUssVUFBVTs7QUFFbkI7QUFFQSxTQUFTLGVBQ1AsT0FDQSxRQUNBLE1BQXdCO0FBRXhCLE1BQU0sUUFBUSxDQUFDLFFBQVEsS0FBSyxZQUFXLE1BQU87QUFDOUMsTUFBTSxTQUFTLFFBQVEsR0FBQSxPQUFHLE9BQUssR0FBQSxJQUFNLEdBQUEsT0FBRyxPQUFLLFFBQUEsRUFBQSxPQUFTLE1BQUksR0FBQTtBQUUxRCxNQUFNLGFBQWEsT0FDaEIsSUFBSSxTQUFDLE9BQUs7QUFBSyxXQUFBLGtCQUFrQixNQUFNLFFBQU8sR0FBSSxLQUFLO0VBQXhDLENBQXlDLEVBQ3hELEtBQUssR0FBRztBQUVYLFNBQU8sR0FBQSxPQUFHLE1BQU0sRUFBQSxPQUFHLFVBQVU7QUFDL0I7OztBQ2xPTyxJQUFNLGNBQU4sTUFBa0I7QUFBQSxFQStGdkIsWUFBb0IsTUFBWTtBQUFaO0FBOUZwQjtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBLG9DQUFnQyxDQUFDO0FBNERqQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdCQUFRO0FBQ1Isd0JBQVE7QUFLUix3QkFBaUIsZUFBYztBQUFBO0FBQUEsTUFFN0IsYUFBTSxFQUFFLE1BQU0sUUFBUSxVQUFVLFdBQVcsUUFBUSxhQUFhO0FBQUEsTUFDaEUsYUFBTSxFQUFFLE1BQU0sUUFBUSxVQUFVLGFBQWEsUUFBUSxhQUFhO0FBQUEsTUFDbEUsVUFBSyxFQUFFLE1BQU0sUUFBUSxVQUFVLGlCQUFpQixRQUFRLGFBQWE7QUFBQSxNQUNyRSxVQUFLLEVBQUUsTUFBTSxRQUFRLFVBQVUsWUFBWSxRQUFRLGFBQWE7QUFBQSxNQUNoRSxVQUFLLEVBQUUsTUFBTSxRQUFRLFVBQVUsaUJBQWlCLFFBQVEsYUFBYTtBQUFBLE1BQ3JFLFVBQUssRUFBRSxNQUFNLFFBQVEsVUFBVSxlQUFlLFFBQVEsYUFBYTtBQUFBO0FBQUEsTUFHbkUsVUFBSyxFQUFFLE1BQU0sWUFBWSxVQUFVLFlBQVksOEJBQWdDLE1BQU0sU0FBUztBQUFBLE1BQzlGLGFBQU0sRUFBRSxNQUFNLFlBQVksVUFBVSxZQUFZLDhCQUE2QixNQUFNLE1BQU07QUFBQSxNQUN6RixhQUFNLEVBQUUsTUFBTSxZQUFZLFVBQVUsWUFBWSxpQ0FBZ0MsTUFBTSxTQUFTO0FBQUEsTUFDL0YsVUFBSyxFQUFFLE1BQU0sWUFBWSxVQUFVLFlBQVksNEJBQThCLE1BQU0sT0FBTztBQUFBLE1BQzFGLGFBQU0sRUFBRSxNQUFNLFlBQVksVUFBVSxZQUFZLGtDQUFpQyxNQUFNLFVBQVU7QUFBQTtBQUFBLE1BR2pHLGFBQU0sRUFBRSxNQUFNLGNBQWMsVUFBVSxhQUFhO0FBQUEsTUFDbkQsYUFBTSxFQUFFLE1BQU0sTUFBTSxVQUFVLEtBQUs7QUFBQSxNQUNuQyxVQUFLLEVBQUUsTUFBTSxXQUFXLFVBQVUsWUFBWTtBQUFBLE1BQzlDLGFBQU07QUFBQSxRQUFFLE1BQU07QUFBQSxRQUFjLFVBQVU7QUFBQSxRQUM5QixRQUFRLHlDQUF1QztBQUFBLE1BQUU7QUFBQSxJQUMzRDtBQUlJLFNBQUssU0FBUztBQUNkLFNBQUssY0FBYztBQUNuQixTQUFLLGNBQWMsQ0FBQztBQUNwQixTQUFLLFlBQVk7QUFDakIsU0FBSyxjQUFjO0FBQ25CLFNBQUssWUFBWTtBQUNyQixjQUFXO0FBQUEsRUFFWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLE1BQW9CO0FBQzNCLFFBQUk7QUFDQSxXQUFLLFNBQVMsS0FBSyxjQUFjLElBQUk7QUFDckMsVUFBSSxnQkFBZ0IsS0FBSyxXQUFXLE1BQU0sS0FBSyxNQUFNO0FBQ3JELHNCQUFnQixLQUFLLGNBQWMsYUFBYTtBQUVoRCxXQUFLLGNBQWMsS0FBSyxtQkFBbUIsYUFBYTtBQUV4RCxzQkFBZ0IsS0FBSyxXQUFXLGVBQWUsS0FBSyxXQUFXO0FBQy9ELFlBQU0sU0FBUyxLQUFLLG1CQUFtQixhQUFhO0FBQ3BELFdBQUssY0FBYyxPQUFPO0FBQzFCLFdBQUssV0FBVyxPQUFPO0FBR3ZCLFVBQUksQ0FBQyxLQUFLLFNBQVMsWUFBWSxDQUFDLEtBQUssU0FBUyxnQkFBZ0I7QUFDNUQsYUFBSyxTQUFTLFdBQVc7QUFBQSxNQUMzQjtBQUVBLFdBQUssWUFBWSxLQUFLLGlCQUFpQixJQUFJO0FBQUEsSUFDL0MsU0FBUyxPQUFPO0FBRVosY0FBUSxLQUFLLEtBQUssS0FBSyxFQUFFLGdDQUFnQyxFQUFFLE9BQU8sTUFBTSxRQUFRLENBQUMsQ0FBQztBQUNsRixXQUFLLFNBQVM7QUFDZCxXQUFLLGNBQWM7QUFDbkIsV0FBSyxjQUFjLENBQUM7QUFDcEIsV0FBSyxZQUFZO0FBQUEsSUFDckI7QUFBQSxFQUNKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRUSxjQUFjLE1BQXNCO0FBQ3hDLFVBQU1DLFNBQVEsS0FBSyxNQUFNLEtBQUssV0FBVztBQUN6QyxRQUFJLENBQUNBLFFBQU87QUFDUixZQUFNLElBQUksTUFBTSx5REFBbUQ7QUFBQSxJQUN2RTtBQUNBLFdBQU9BLE9BQU0sQ0FBQyxFQUFFLEtBQUs7QUFBQSxFQUN6QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUVEsV0FBVyxNQUFjLFNBQXlCO0FBQ3RELFVBQU0sV0FBVyxLQUFLLFFBQVEsT0FBTyxJQUFJLFFBQVE7QUFDakQsV0FBTyxLQUFLLE1BQU0sUUFBUSxFQUFFLEtBQUs7QUFBQSxFQUNyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9RLGNBQWMsTUFBc0I7QUFFNUMsUUFBSSxrQkFBa0IsS0FBSyxRQUFRLHlCQUF5QixFQUFFO0FBRzlELHNCQUFrQixnQkFBZ0IsUUFBUSxRQUFRLEdBQUcsRUFBRSxLQUFLO0FBRTVELFdBQU87QUFBQSxFQUNQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT1EsbUJBQW1CLE1BQXNCO0FBQy9DLFFBQUksZ0JBQWdCLEtBQUs7QUFHekIsVUFBTSxVQUFVLEtBQUssU0FBUyxLQUFLLFNBQVM7QUFFNUMsZUFBV0EsVUFBUyxTQUFTO0FBQ3pCLFlBQU0sUUFBUUEsT0FBTTtBQUNwQixVQUFJLFFBQVEsZUFBZTtBQUN2Qix3QkFBZ0I7QUFBQSxNQUNwQjtBQUFBLElBQ0o7QUFHQSxRQUFJLGdCQUFnQixLQUFLLFFBQVE7QUFDN0IsYUFBTyxLQUFLLE1BQU0sR0FBRyxhQUFhLEVBQUUsS0FBSztBQUFBLElBQzdDO0FBR0EsV0FBTyxLQUFLLEtBQUs7QUFBQSxFQUNuQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9RLG1CQUFtQixNQUFtRTtBQUM1RixVQUFNLFNBQW1CLENBQUM7QUFDMUIsVUFBTSxXQUFnQyxDQUFDO0FBQ3ZDLFVBQU0sU0FBbUIsQ0FBQztBQUUxQixVQUFNLGdCQUFnQjtBQUN0QixVQUFNLGlCQUFpQjtBQUN2QixVQUFNLHNCQUFzQjtBQUM1QixVQUFNLG1CQUFtQjtBQUN6QixVQUFNLHNCQUFzQjtBQUM1QixVQUFNLGVBQWU7QUFFckIsVUFBTSxVQUFVLE1BQU0sS0FBSyxLQUFLLFNBQVMsS0FBSyxTQUFTLENBQUM7QUFFeEQsYUFBUyxJQUFJLEdBQUcsSUFBSSxRQUFRLFFBQVEsS0FBSztBQUN2QyxZQUFNQSxTQUFRLFFBQVEsQ0FBQztBQUN2QixZQUFNLGFBQWFBLE9BQU07QUFDekIsWUFBTSxpQkFBaUIsSUFBSSxJQUFJLFFBQVEsU0FBUyxRQUFRLElBQUksQ0FBQyxFQUFFLFFBQVMsS0FBSztBQUc3RSxVQUFJLFlBQVksS0FBSyxNQUFNLFlBQVksY0FBYyxFQUFFLEtBQUs7QUFFNUQsWUFBTSxPQUFPQSxPQUFNLENBQUM7QUFHcEIsWUFBTSxhQUFhLEtBQUssWUFBWSxJQUFJO0FBRXhDLFVBQUksWUFBWTtBQUNkLFlBQUksVUFBVTtBQUNkLFlBQUksaUJBQWdDO0FBQ3BDLFlBQUksZUFBZTtBQUVuQixnQkFBUSxXQUFXLE1BQU07QUFBQSxVQUN2QixLQUFLO0FBRUgsMEJBQWMsWUFBWTtBQUcxQixnQkFBSSxjQUFjLEtBQUssU0FBUyxHQUFHO0FBRWpDLG9CQUFNLFlBQVksVUFBVSxNQUFNLG1CQUFtQjtBQUNyRCxrQkFBSSxXQUFXO0FBQ2IsaUNBQWlCLFVBQVUsQ0FBQztBQUFBLGNBQzlCO0FBQUEsWUFDRixPQUFPO0FBQ0wsd0JBQVU7QUFDViw2QkFBZSxLQUFLLEtBQUssRUFBRSxzQkFBc0IsRUFBRSxLQUFXLENBQUM7QUFDL0QsMEJBQVksR0FBRyxTQUFTLEtBQUssWUFBWTtBQUFBLFlBQzNDO0FBQ0E7QUFBQSxVQUVGLEtBQUs7QUFFSCwyQkFBZSxZQUFZO0FBRzNCLGdCQUFJLGVBQWUsS0FBSyxTQUFTLEdBQUc7QUFDbEMsK0JBQWlCLFdBQVcsUUFBUTtBQUFBLFlBQ3RDLE9BQU87QUFDTCx3QkFBVTtBQUNWLDZCQUFlLEtBQUssS0FBSyxFQUFFLDBCQUEwQixFQUFFLEtBQVcsQ0FBQztBQUNuRSwwQkFBWSxHQUFHLFNBQVMsS0FBSyxZQUFZO0FBQUEsWUFDM0M7QUFDQTtBQUFBLFVBRUYsS0FBSztBQUVILGdDQUFvQixZQUFZO0FBR2hDLGdCQUFJLG9CQUFvQixLQUFLLFNBQVMsR0FBRztBQUN2QyxvQkFBTSxrQkFBa0IsVUFBVSxNQUFNLGNBQWM7QUFDdEQsa0JBQUksaUJBQWlCO0FBQ25CLGlDQUFpQixnQkFBZ0IsQ0FBQyxFQUFFLFlBQVk7QUFBQSxjQUNsRDtBQUFBLFlBQ0YsT0FBTztBQUNMLHdCQUFVO0FBQ1YsNkJBQWUsS0FBSyxLQUFLLEVBQUUsNEJBQTRCLEVBQUUsS0FBVyxDQUFDO0FBQUU7QUFDdkUsMEJBQVksR0FBRyxTQUFTLEtBQUssWUFBWTtBQUFBLFlBQzNDO0FBQ0E7QUFBQSxVQUNGLEtBQUs7QUFFSCw2QkFBaUIsWUFBWTtBQUU3QixnQkFBSSxpQkFBaUIsS0FBSyxTQUFTLEdBQUk7QUFDckMsK0JBQWlCLFVBQVUsVUFBVSxLQUFLLE1BQU0sRUFBRSxLQUFLO0FBQ3ZELG9CQUFNLGVBQWUsZUFBZSxNQUFNLEdBQUcsRUFBRSxJQUFJLFNBQU8sSUFBSSxLQUFLLENBQUMsRUFBRSxPQUFPLFNBQU8sSUFBSSxTQUFTLENBQUM7QUFHbEcsa0JBQUksYUFBYSxTQUFTLEdBQUc7QUFDM0IseUJBQVMsWUFBWTtBQUFBLGNBQ3ZCO0FBQUEsWUFDRixPQUFPO0FBQ0wsd0JBQVU7QUFDViw2QkFBZSxLQUFLLEtBQUssRUFBRSw0QkFBNEIsRUFBRSxLQUFXLENBQUM7QUFDckUsMEJBQVksR0FBRyxTQUFTLEtBQUssWUFBWTtBQUFBLFlBQzNDO0FBQ0E7QUFBQSxVQUNGLEtBQUs7QUFHSCxnQ0FBb0IsWUFBWTtBQUVoQyxnQkFBSSxvQkFBb0IsS0FBSyxTQUFTLEdBQUc7QUFDdkMsb0JBQU0saUJBQWlCLFVBQVUsVUFBVSxLQUFLLE1BQU0sRUFBRSxLQUFLO0FBRTdELGtCQUFJO0FBRUYsc0JBQU0sWUFBWSxLQUFLLHFCQUFxQixjQUFjO0FBRTFELG9CQUFJLFdBQVc7QUFFYix3QkFBTSxPQUFPLFNBQVMsU0FBUztBQUUvQixtQ0FBaUI7QUFBQSxnQkFDbkIsT0FBTztBQUNMLHdCQUFNLElBQUksTUFBTSx1Q0FBdUM7QUFBQSxnQkFDekQ7QUFBQSxjQUNGLFNBQVMsR0FBRztBQUNWLCtCQUFlLEtBQUssS0FBSyxFQUFFLG1DQUFtQyxFQUFFLEtBQUssQ0FBQztBQUN0RSw0QkFBWSxHQUFHLFNBQVMsS0FBSyxZQUFZO0FBQUEsY0FDM0M7QUFBQSxZQUNGLE9BQU87QUFDTCw2QkFBZSxLQUFLLEtBQUssRUFBRSw0QkFBNEIsRUFBRSxLQUFLLENBQUM7QUFDL0QsMEJBQVksR0FBRyxTQUFTLEtBQUssWUFBWTtBQUFBLFlBQzNDO0FBQ0E7QUFBQSxVQUNGLEtBQUs7QUFFSCx5QkFBYSxZQUFZO0FBR3pCLGtCQUFNLGFBQWEsYUFBYSxLQUFLLFNBQVM7QUFDOUMsZ0JBQUksY0FBYyxXQUFXLENBQUMsTUFBTSxRQUFXO0FBQzdDLCtCQUFpQixXQUFXLENBQUMsRUFBRSxLQUFLO0FBQUEsWUFDdEMsT0FBTztBQUNMLCtCQUFpQixVQUFVLFVBQVUsS0FBSyxNQUFNLEVBQUUsS0FBSztBQUFBLFlBQ3pEO0FBQ0E7QUFBQSxRQUNKO0FBR0EsWUFBSSxXQUFXLFdBQVcsVUFBVTtBQUNsQyxtQkFBUyxXQUFXLFFBQVEsSUFBSTtBQUFBLFFBQ2xDLFdBQVcsQ0FBQyxTQUFTO0FBRW5CLGdCQUFNLGdCQUFnQixHQUFHLFdBQVcsWUFBWSxPQUFPO0FBQ3ZELG1CQUFTLGFBQWEsSUFBSTtBQUMxQixpQkFBTyxLQUFLLFlBQVk7QUFBQSxRQUMxQjtBQUFBLE1BQ0Y7QUFHQSxhQUFPLEtBQUssU0FBUztBQUFBLElBQ3ZCO0FBR0EsUUFBSSxPQUFPLFNBQVMsR0FBRztBQUNyQixlQUFTLFNBQVM7QUFDbEIsZUFBUyxVQUFVO0FBQUEsSUFDckIsT0FBTztBQUNMLGVBQVMsVUFBVTtBQUFBLElBQ3JCO0FBRUEsV0FBTyxFQUFFLFFBQVEsU0FBUztBQUFBLEVBQzVCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT1EsaUJBQWlCLE1BQXNCO0FBRTdDLFVBQU0saUJBQWlCLEtBQUssTUFBTSxtQkFBbUI7QUFDckQsUUFBSSxnQkFBZ0I7QUFDbEIsYUFBTyxlQUFlLENBQUM7QUFBQSxJQUN6QjtBQUNBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT1EscUJBQXFCLGdCQUF1QztBQUdsRSxRQUFJO0FBQ0YsVUFBSSxZQUFZO0FBQ2hCLFVBQUksV0FBVztBQUNmLFVBQUksUUFBUTtBQUNaLFVBQUksUUFBUTtBQUNaLFVBQUksUUFBUTtBQUVaLFlBQU0sT0FBTyxlQUFlLFlBQVksRUFBRSxLQUFLO0FBRy9DLFVBQUksQ0FBQyxLQUFLLFdBQVcsT0FBTyxHQUFHO0FBQzdCLGdCQUFRLEtBQUssdURBQW9EO0FBQ2pFLGVBQU87QUFBQSxNQUNUO0FBR0EsWUFBTSxvQkFBb0I7QUFFMUIsVUFBSSxDQUFDLGtCQUFrQixLQUFLLElBQUksR0FBRztBQUNqQyxnQkFBUSxLQUFLLG9DQUFpQztBQUM5QyxlQUFPO0FBQUEsTUFDVDtBQUdBLFlBQU0sWUFBWTtBQUFBLFFBQ2hCLEtBQUs7QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLE9BQU87QUFBQSxRQUNQLE1BQU07QUFBQSxNQUNSO0FBRUEsVUFBSSxVQUFVLElBQUksS0FBSyxJQUFJLEVBQUcsYUFBWTtBQUFBLGVBQ2pDLFVBQVUsS0FBSyxLQUFLLElBQUksRUFBRyxhQUFZO0FBQUEsZUFDdkMsVUFBVSxNQUFNLEtBQUssSUFBSSxFQUFHLGFBQVk7QUFBQSxlQUN4QyxVQUFVLEtBQUssS0FBSyxJQUFJLEVBQUcsYUFBWTtBQUFBLFdBQzNDO0FBR0gsY0FBTSxXQUFXO0FBQ2pCLFlBQUksU0FBUyxLQUFLLElBQUksR0FBRztBQUN2QixzQkFBWTtBQUFBLFFBQ2QsT0FBTztBQUNMLGtCQUFRLEtBQUsseURBQXNEO0FBQ25FLGlCQUFPO0FBQUEsUUFDVDtBQUFBLE1BQ0Y7QUFHQSxZQUFNLGdCQUFnQixLQUFLLE1BQU0sa0JBQWtCO0FBQ25ELFVBQUksaUJBQWlCLGNBQWMsQ0FBQyxHQUFHO0FBQ3JDLG1CQUFXLFNBQVMsY0FBYyxDQUFDLEdBQUcsRUFBRTtBQUFBLE1BQzFDO0FBR0EsWUFBTSxhQUFhLEtBQUssTUFBTSxpQ0FBaUM7QUFDL0QsVUFBSSxjQUFjLFdBQVcsQ0FBQyxHQUFHO0FBQy9CLGNBQU0sVUFBVSxXQUFXLENBQUM7QUFDNUIsZ0JBQVEsU0FBUyxRQUFRLFFBQVEsTUFBTSxFQUFFLENBQUM7QUFBQSxNQUM1QztBQUdBLFlBQU0sYUFBYSxLQUFLLE1BQU0sbUJBQW1CO0FBQ2pELFVBQUksY0FBYyxXQUFXLENBQUMsR0FBRztBQUMvQixnQkFBUSxTQUFTLFdBQVcsQ0FBQyxHQUFHLEVBQUU7QUFBQSxNQUNwQztBQUdBLFlBQU1DLFlBQVc7QUFBQSxRQUNmLFFBQVE7QUFBQSxRQUNSLFNBQVM7QUFBQSxRQUNULFdBQVc7QUFBQSxRQUNYLFVBQVU7QUFBQSxRQUNWLFFBQVE7QUFBQSxRQUNSLFVBQVU7QUFBQSxRQUNWLFFBQVE7QUFBQSxRQUNSLFNBQVM7QUFBQSxRQUNULFNBQVM7QUFBQSxNQUNYO0FBRUEsaUJBQVcsQ0FBQyxLQUFLLElBQUksS0FBSyxPQUFPLFFBQVFBLFNBQVEsR0FBRztBQUVsRCxjQUFNLFdBQVcsSUFBSSxPQUFPLE1BQU0sR0FBRyxPQUFPLEdBQUc7QUFDL0MsWUFBSSxTQUFTLEtBQUssSUFBSSxHQUFHO0FBQ3ZCLGtCQUFRLFNBQVMsSUFBSTtBQUNyQjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBR0EsVUFBSSxPQUFPLGNBQWMsU0FBUztBQUNsQyxVQUFJLFdBQVcsRUFBRyxTQUFRLGFBQWEsUUFBUTtBQUMvQyxVQUFJLE1BQU8sU0FBUSxJQUFJLEtBQUs7QUFDNUIsVUFBSSxRQUFRLEVBQUcsU0FBUSxVQUFVLEtBQUs7QUFDdEMsVUFBSSxNQUFPLFNBQVEsSUFBSSxLQUFLO0FBRzVCLGFBQU87QUFBQSxJQUNULFNBQVMsT0FBTztBQUNkLGNBQVEsTUFBTSx1Q0FBdUMsS0FBSztBQUMxRCxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFDRjtBQUFBO0FBbmJFLGNBckVXLGFBcUVLLG1CQUEwQjs7O0FDbkVyQyxJQUFNLE9BQU4sTUFBNEI7QUFBQTtBQUFBLEVBcUNqQyxZQUFZLFVBQXlCO0FBcENyQztBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBR0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQSxvQ0FBZ0MsQ0FBQztBQUNqQztBQUNBO0FBR0UsU0FBSyxLQUFLLFNBQVMsTUFBTTtBQUN6QixTQUFLLFFBQVEsU0FBUyxTQUFTO0FBQy9CLFNBQUssT0FBTyxTQUFTLFFBQVE7QUFDN0IsU0FBSyxhQUFhLFNBQVMsY0FBYztBQUN6QyxTQUFLLFNBQVMsU0FBUyxVQUFVO0FBQ2pDLFNBQUssYUFBYSxTQUFTLGNBQWM7QUFDekMsU0FBSyxhQUFhLFNBQVMsY0FBYztBQUN6QyxTQUFLLFdBQVcsU0FBUyxZQUFZO0FBQ3JDLFNBQUssZ0JBQWdCLFNBQVMsaUJBQWlCO0FBQy9DLFNBQUssZUFBZSxTQUFTLGdCQUFnQjtBQUM3QyxTQUFLLGNBQWMsU0FBUyxlQUFlO0FBQzNDLFNBQUssWUFBWSxTQUFTLGFBQWE7QUFDdkMsU0FBSyxnQkFBZ0IsU0FBUyxpQkFBaUI7QUFDL0MsU0FBSyxVQUFVLFNBQVMsV0FBVztBQUNuQyxTQUFLLFdBQVcsU0FBUyxZQUFZO0FBQ3JDLFNBQUssYUFBYSxTQUFTLGNBQWM7QUFDekMsU0FBSyxZQUFZLFNBQVMsYUFBYSxDQUFDO0FBQ3hDLFNBQUssWUFBWSxTQUFTLGFBQWE7QUFDdkMsU0FBSywwQkFBMEIsU0FBUywyQkFBMkI7QUFDbkUsU0FBSyxXQUFXLFNBQVMsWUFBWTtBQUNyQyxTQUFLLFdBQVcsU0FBUyxZQUFZO0FBQ3JDLFNBQUssZUFBZSxTQUFTLGdCQUFnQjtBQUM3QyxTQUFLLGdCQUFnQixTQUFTLGlCQUFpQjtBQUMvQyxTQUFLLGFBQWEsU0FBUyxjQUFjO0FBQ3pDLFNBQUssU0FBUyxTQUFTLFVBQVU7QUFDakMsU0FBSyxjQUFjLFNBQVMsZUFBZTtBQUMzQyxTQUFLLGNBQWMsU0FBUyxlQUFlLENBQUM7QUFDNUMsU0FBSyxXQUFXLFNBQVMsWUFBWSxDQUFDO0FBQ3RDLFNBQUssYUFBYSxTQUFTLGNBQWM7QUFDekMsU0FBSyxVQUFVLFNBQVMsV0FBVztBQUNuQyxTQUFLLE9BQU8sU0FBUyxRQUFRLENBQUM7QUFBQSxFQUNoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sd0JBQXdCLFlBQW9DO0FBQ2pFLFVBQU0sY0FBYyxXQUFXLE1BQU0sU0FBUztBQUU5QyxRQUFJLGVBQWUsWUFBWSxDQUFDLEdBQUc7QUFDakMsWUFBTSxhQUFhLFlBQVksQ0FBQztBQUdoQyxVQUFJLE9BQU8sT0FBTyxjQUFjLEVBQUUsU0FBUyxVQUE0QixHQUFHO0FBQ3RFLGVBQU87QUFBQSxNQUNYO0FBQUEsSUFDRjtBQUdBO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sWUFBWSxNQUF3QjtBQUN6QyxVQUFNLFdBQVc7QUFDakIsVUFBTSxhQUFhLEtBQUssTUFBTSxRQUFRLEtBQUssQ0FBQztBQUM1QyxXQUFPLFdBQVcsSUFBSSxTQUFPLElBQUksS0FBSyxDQUFDO0FBQUEsRUFDekM7QUFDRjs7O0FDNUdBLG9CQUE2QjtBQUV0QixJQUFNLFlBQU4sTUFBTSxVQUFTO0FBQUEsRUFJcEIsY0FBYztBQUZkLHdCQUFRO0FBR04sU0FBSyxVQUFVLElBQUksMkJBQWE7QUFDaEMsU0FBSyxRQUFRLGdCQUFnQixFQUFFO0FBQUEsRUFDakM7QUFBQSxFQUVBLE9BQWMsY0FBd0I7QUFDcEMsUUFBSSxDQUFDLFVBQVMsVUFBVTtBQUN0QixnQkFBUyxXQUFXLElBQUksVUFBUztBQUFBLElBQ25DO0FBQ0EsV0FBTyxVQUFTO0FBQUEsRUFDbEI7QUFBQSxFQUVPLEdBQUcsT0FBZSxVQUEwQztBQUNqRSxTQUFLLFFBQVEsR0FBRyxPQUFPLFFBQVE7QUFBQSxFQUNqQztBQUFBLEVBRU8sSUFBSSxPQUFlLFVBQTBDO0FBQ2xFLFNBQUssUUFBUSxJQUFJLE9BQU8sUUFBUTtBQUFBLEVBQ2xDO0FBQUEsRUFFTyxLQUFLLFVBQWtCLE1BQXNCO0FBQ2xELFdBQU8sS0FBSyxRQUFRLEtBQUssT0FBTyxHQUFHLElBQUk7QUFBQSxFQUN6QztBQUNGO0FBMUJFLGNBRFcsV0FDSTtBQURWLElBQU0sV0FBTjtBQThCQSxJQUFNLFNBQVM7QUFBQSxFQUNwQixlQUFlO0FBQUEsRUFDZixZQUFZO0FBQUEsRUFDWixlQUFlO0FBQUEsRUFDZixjQUFjO0FBQUEsRUFDZCxpQkFBaUI7QUFDbkI7OztBaEM3Qk8sSUFBTSxjQUFOLE1BQWtCO0FBQUEsRUFVdkIsWUFBb0IsS0FBa0IsTUFBb0IsUUFBZ0I7QUFBdEQ7QUFBa0I7QUFBb0I7QUFUMUQsd0JBQVEsY0FBbUMsb0JBQUksSUFBSTtBQUNuRDtBQUFBLHdCQUFRLGlCQUFnQztBQUN4QztBQUFBLHdCQUFRLG1CQUEwQjtBQUNsQyx3QkFBaUIsYUFBWTtBQUM3QjtBQUFBLHdCQUFRLHFCQUE2QjtBQUNyQyx3QkFBUSxrQkFBMEM7QUFDbEQsd0JBQVE7QUFDUix3QkFBUSxvQkFBMEIsQ0FBQztBQUdqQyxTQUFLLFdBQVcsU0FBUyxZQUFZO0FBQUEsRUFDdkM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTU8sZUFBZSxRQUFzQjtBQUUxQyxZQUFRLElBQUksNERBQXlEO0FBQ3JFLFVBQU0sUUFBUSxLQUFLLE9BQU87QUFBQSxNQUN4QixLQUFLLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFjO0FBQ3pDLFlBQUksZ0JBQWdCLDBCQUFTLEtBQUssY0FBYyxNQUFNO0FBQ3BELGVBQUssb0JBQW9CLEtBQUssSUFBSTtBQUFBLFFBQ3BDO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUVBLFNBQUssaUJBQWlCLEtBQUssS0FBSztBQUdoQyxVQUFNLGNBQWMsS0FBSyxPQUFPO0FBQUEsTUFDOUIsS0FBSyxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsU0FBYztBQUN6QyxZQUFJLGdCQUFnQiwwQkFBUyxLQUFLLGNBQWMsTUFBTTtBQUNwRCxlQUFLLGdCQUFnQjtBQUFBLFFBQ3ZCO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUVBLFNBQUssaUJBQWlCLEtBQUssV0FBVztBQUd0QyxVQUFNLGNBQWMsS0FBSyxPQUFPO0FBQUEsTUFDOUIsS0FBSyxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsU0FBYztBQUN6QyxZQUFJLGdCQUFnQiwwQkFBUyxLQUFLLGNBQWMsTUFBTTtBQUNwRCxlQUFLLG9CQUFvQixLQUFLLElBQUk7QUFBQSxRQUNwQztBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0g7QUFFQSxTQUFLLGlCQUFpQixLQUFLLFdBQVc7QUFHdEMsVUFBTSxjQUFjLEtBQUssT0FBTztBQUFBLE1BQzlCLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQVcsWUFBb0I7QUFDMUQsWUFBSSxnQkFBZ0IsMEJBQVMsS0FBSyxjQUFjLE1BQU07QUFDcEQsZUFBSyxvQkFBb0IsT0FBTztBQUNoQyxlQUFLLG9CQUFvQixLQUFLLElBQUk7QUFBQSxRQUNwQztBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0g7QUFFQSxTQUFLLGlCQUFpQixLQUFLLFdBQVc7QUFBQSxFQUN4QztBQUFBLEVBRUEsbUJBQXlCO0FBR3ZCLFNBQUssaUJBQWlCLFFBQVEsV0FBUztBQUNyQyxZQUFNLFlBQVk7QUFBQSxJQUNwQixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS08sb0JBQW9CLFVBQXdCO0FBQ2pELFNBQUssV0FBVyxPQUFPLFFBQVE7QUFDL0IsU0FBSyxnQkFBZ0I7QUFDckIsU0FBSyxTQUFTLEtBQUssT0FBTyxlQUFlLFFBQVE7QUFDakQsbUJBQU8sTUFBTSwwQkFBMEIsUUFBUSxFQUFFO0FBQUEsRUFDbkQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtPLGtCQUF3QjtBQUM3QixTQUFLLFdBQVcsTUFBTTtBQUN0QixTQUFLLGdCQUFnQjtBQUNyQixTQUFLLGtCQUFrQjtBQUN2QixTQUFLLFNBQVMsS0FBSyxPQUFPLGFBQWE7QUFDdkMsbUJBQU8sTUFBTSwwQ0FBMEM7QUFBQSxFQUN6RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9PLFVBQWdCO0FBRXJCLFlBQVEsSUFBSSwyQkFBMkI7QUFDdkMsU0FBSyxnQkFBZ0I7QUFDckIsbUJBQU8sTUFBTSxxQ0FBcUM7QUFBQSxFQUNwRDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsTUFBYyx1QkFBeUM7QUFDckQsUUFBSTtBQUNGLFlBQU0sUUFBUSxLQUFLLElBQUksTUFBTSxpQkFBaUI7QUFDOUMsWUFBTSxZQUFZO0FBQ2xCLFlBQU0sV0FBb0IsQ0FBQztBQUczQixlQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sUUFBUSxLQUFLLFdBQVc7QUFDaEQsY0FBTSxRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksU0FBUztBQUcxQyxjQUFNLGdCQUFnQixNQUFNLElBQUksT0FBTSxTQUFRO0FBRTVDLGNBQUksS0FBSyxXQUFXLElBQUksS0FBSyxJQUFJLEdBQUc7QUFDbEMsbUJBQU8sS0FBSyxXQUFXLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQztBQUFBLFVBQzVDO0FBR0EsZ0JBQU0sWUFBWSxNQUFNLEtBQUssd0JBQXdCLElBQUk7QUFHekQsZUFBSyxXQUFXLElBQUksS0FBSyxNQUFNLFNBQVM7QUFFeEMsaUJBQU87QUFBQSxRQUNULENBQUM7QUFFRCxjQUFNLGVBQWUsTUFBTSxRQUFRLElBQUksYUFBYTtBQUNwRCxxQkFBYSxRQUFRLGVBQWE7QUFDaEMsbUJBQVMsS0FBSyxHQUFHLFNBQVM7QUFBQSxRQUM1QixDQUFDO0FBQUEsTUFDSDtBQUVBLHFCQUFPLE1BQU0sd0JBQXFCLFNBQVMsTUFBTSxPQUFPLE1BQU0sTUFBTSxXQUFXO0FBRy9FLFdBQUssZ0JBQWdCO0FBQ3JCLFdBQUssa0JBQWtCLEtBQUssSUFBSTtBQUloQyxhQUFPO0FBQUEsSUFDVCxTQUFTLE9BQU87QUFDZCxxQkFBTyxNQUFNLDRCQUE0QixLQUFLO0FBQzlDLGFBQU8sS0FBSyxpQkFBaUIsQ0FBQztBQUFBLElBQ2hDO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxNQUFNLG9CQUFzQztBQUMxQyxTQUFLLGdCQUFnQjtBQUNyQixXQUFPLEtBQUssWUFBWTtBQUFBLEVBQzFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLE1BQU0sY0FBZ0M7QUFFcEMsUUFBSSxLQUFLLHFCQUFxQixLQUFLLGdCQUFnQjtBQUNqRCxhQUFPLEtBQUs7QUFBQSxJQUNkO0FBRUEsWUFBUSxJQUFJLEtBQUssZUFBZSxLQUFLLGlCQUFpQixLQUFLLFNBQVM7QUFFcEUsVUFBTUMsT0FBTSxLQUFLLElBQUk7QUFFckIsUUFBSSxLQUFLLGlCQUFrQkEsT0FBTSxLQUFLLGtCQUFrQixLQUFLLFdBQVk7QUFDdkUscUJBQU8sTUFBTSwrQkFBK0I7QUFDNUMsYUFBTyxLQUFLO0FBQUEsSUFDZDtBQUdBLFNBQUssb0JBQW9CO0FBQ3pCLFNBQUssaUJBQWlCLEtBQUsscUJBQXFCO0FBRWhELFFBQUk7QUFDRixZQUFNLFFBQVEsTUFBTSxLQUFLO0FBQ3pCLGFBQU87QUFBQSxJQUNULFVBQUU7QUFDQSxXQUFLLG9CQUFvQjtBQUN6QixXQUFLLGlCQUFpQjtBQUFBLElBQ3hCO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdBLE1BQU0saUJBQWlCLFVBQWlEO0FBRXRFLFVBQU0sV0FBVyxNQUFNLEtBQUssWUFBWTtBQUd4QyxRQUFJLENBQUMsU0FBVSxRQUFPO0FBR3RCLFFBQUksZ0JBQWdCLFNBQVMsT0FBTyxVQUFRO0FBRTFDLGFBQU8sS0FBSyxxQkFBcUIsTUFBTSxRQUFRLEtBQ3ZDLEtBQUssbUJBQW1CLE1BQU0sUUFBUSxLQUN0QyxLQUFLLGtCQUFrQixNQUFNLFFBQVEsS0FDckMsS0FBSyx1QkFBdUIsTUFBTSxRQUFRLEtBQzFDLEtBQUssbUJBQW1CLE1BQU0sUUFBUSxLQUN0QyxLQUFLLHVCQUF1QixNQUFNLFFBQVEsS0FDMUMsS0FBSyx1QkFBdUIsTUFBTSxRQUFRO0FBQUEsSUFDcEQsQ0FBQztBQUdELFFBQUksU0FBUyxNQUFNO0FBQ2pCLHNCQUFnQixLQUFLO0FBQUEsUUFDbkI7QUFBQSxRQUNBLFNBQVMsS0FBSztBQUFBLFFBQ2QsU0FBUyxLQUFLO0FBQUEsTUFDaEI7QUFBQSxJQUNGO0FBR0EsUUFBSSxTQUFTLFNBQVMsU0FBUyxRQUFRLEdBQUc7QUFDeEMsc0JBQWdCLGNBQWMsTUFBTSxHQUFHLFNBQVMsS0FBSztBQUFBLElBQ3ZEO0FBR0EsUUFBSSxTQUFTLFNBQVM7QUFDcEIsYUFBTyxLQUFLLFdBQVcsZUFBZSxTQUFTLE9BQU87QUFBQSxJQUN4RDtBQUVBLG1CQUFPLE1BQU0sYUFBYSxjQUFjLE1BQU0sT0FBTyxTQUFTLE1BQU0scUNBQXFDO0FBQ3pHLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxNQUFNLGtCQUFvQztBQUN4QyxXQUFPLEtBQUssaUJBQWlCO0FBQUEsTUFDM0IsYUFBYTtBQUFBLElBQ2YsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE1BQU0sb0JBQXNDO0FBQzFDLFdBQU8sS0FBSyxpQkFBaUI7QUFBQSxNQUMzQixhQUFhO0FBQUEsSUFDZixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsTUFBTSxnQkFBa0M7QUFDdEMsV0FBTyxLQUFLLGlCQUFpQjtBQUFBLE1BQzNCLGFBQWE7QUFBQSxNQUNiLGlCQUFpQjtBQUFBLFFBQ2YsT0FBTztBQUFBLE1BQ1Q7QUFBQSxNQUNBLE1BQU07QUFBQSxRQUNKLElBQUksQ0FBQyxZQUFZLE1BQU07QUFBQSxRQUN2QixXQUFXLENBQUMsT0FBTyxLQUFLO0FBQUEsTUFDMUI7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxNQUFNLG1CQUFxQztBQUN6QyxXQUFPLEtBQUssaUJBQWlCO0FBQUEsTUFDM0IsYUFBYTtBQUFBLE1BQ2IsaUJBQWlCO0FBQUEsUUFDZixVQUFVO0FBQUEsTUFDWjtBQUFBLE1BQ0EsTUFBTTtBQUFBLFFBQ0osSUFBSSxDQUFDLFlBQVksTUFBTTtBQUFBLFFBQ3ZCLFdBQVcsQ0FBQyxPQUFPLEtBQUs7QUFBQSxNQUMxQjtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE1BQU0sa0JBQW9DO0FBQ3hDLFdBQU8sS0FBSyxpQkFBaUI7QUFBQSxNQUMzQixhQUFhO0FBQUEsTUFDYixpQkFBaUI7QUFBQSxRQUNmLFNBQVM7QUFBQSxNQUNYO0FBQUEsTUFDQSxNQUFNO0FBQUEsUUFDSixJQUFJLENBQUMsV0FBVyxVQUFVO0FBQUEsUUFDMUIsV0FBVyxDQUFDLE9BQU8sS0FBSztBQUFBLE1BQzFCO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsTUFBTSxtQkFBcUM7QUFDekMsV0FBTyxLQUFLLGlCQUFpQjtBQUFBLE1BQzNCLGFBQWE7QUFBQSxNQUNiLGlCQUFpQjtBQUFBLFFBQ2YsVUFBVTtBQUFBLE1BQ1o7QUFBQSxNQUNBLE1BQU07QUFBQSxRQUNKLElBQUksQ0FBQyxXQUFXLFVBQVU7QUFBQSxRQUMxQixXQUFXLENBQUMsT0FBTyxLQUFLO0FBQUEsTUFDMUI7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxNQUFNLG1CQUFxQztBQUN6QyxXQUFPLEtBQUssaUJBQWlCO0FBQUEsTUFDM0IsYUFBYTtBQUFBLE1BQ2IsaUJBQWlCO0FBQUEsUUFDZixVQUFVO0FBQUEsTUFDWjtBQUFBLE1BQ0EsTUFBTTtBQUFBLFFBQ0osSUFBSSxDQUFDLFdBQVcsVUFBVTtBQUFBLFFBQzFCLFdBQVcsQ0FBQyxPQUFPLEtBQUs7QUFBQSxNQUMxQjtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE1BQU0sMEJBQTBCLE9BQWUsR0FBcUI7QUFDbEUsV0FBTyxLQUFLLGlCQUFpQjtBQUFBLE1BQzNCLGFBQWE7QUFBQSxNQUNiLFVBQVU7QUFBQSxRQUNSLE9BQU8sSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLEtBQUssR0FBSTtBQUFBLE1BQ3pEO0FBQUEsTUFDQSxNQUFNO0FBQUEsUUFDSixJQUFJLENBQUMsVUFBVTtBQUFBLFFBQ2YsV0FBVyxDQUFDLE1BQU07QUFBQSxNQUNwQjtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE1BQU0sdUJBQXlDO0FBQzdDLFdBQU8sS0FBSyxpQkFBaUI7QUFBQSxNQUMzQixhQUFhO0FBQUEsTUFDYixVQUFVO0FBQUEsUUFDUixJQUFJLENBQUMsTUFBTTtBQUFBLE1BQ2I7QUFBQSxNQUNBLE1BQU07QUFBQSxRQUNKLElBQUksQ0FBQyxTQUFTO0FBQUEsUUFDZCxXQUFXLENBQUMsS0FBSztBQUFBLE1BQ25CO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxNQUFNLGdCQUFnQixVQUFvQztBQUV4RCxRQUFJLEtBQUssV0FBVyxJQUFJLFFBQVEsR0FBRztBQUNqQyxhQUFPLEtBQUssV0FBVyxJQUFJLFFBQVEsS0FBSyxDQUFDO0FBQUEsSUFDM0M7QUFHQSxVQUFNLE9BQU8sS0FBSyxJQUFJLE1BQU0sc0JBQXNCLFFBQVE7QUFDMUQsUUFBSSxnQkFBZ0Isd0JBQU87QUFDekIsWUFBTSxRQUFRLE1BQU0sS0FBSyx3QkFBd0IsSUFBSTtBQUNyRCxXQUFLLFdBQVcsSUFBSSxVQUFVLEtBQUs7QUFDbkMsYUFBTztBQUFBLElBQ1Q7QUFDQSxXQUFPLENBQUM7QUFBQSxFQUNWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBV0EsTUFBYyx3QkFBd0IsTUFBZ0M7QUFDcEUsUUFBSTtBQUNGLFlBQU0sVUFBVSxNQUFNLEtBQUssSUFBSSxNQUFNLEtBQUssSUFBSTtBQUM5QyxZQUFNLGlCQUFpQixLQUFLLElBQUksY0FBYyxhQUFhLElBQUk7QUFHL0QsVUFBSSxrQkFBa0IsZUFBZSxXQUFXO0FBQzlDLGNBQU0sUUFBUSxLQUFLLHNCQUFzQixNQUFNLGdCQUFnQixPQUFPO0FBQ3RFLFlBQUksTUFBTSxTQUFTLEdBQUc7QUFDcEIsaUJBQU87QUFBQSxRQUNUO0FBQUEsTUFFRjtBQUdBLGFBQU8sS0FBSywwQkFBMEIsTUFBTSxPQUFPO0FBQUEsSUFFckQsU0FBUyxPQUFPO0FBQ2QscUJBQU8sTUFBTSwwQ0FBMEMsS0FBSztBQUM1RCxhQUFPLENBQUM7QUFBQSxJQUNWO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1Esc0JBQXNCLE1BQWEsT0FBWSxTQUEwQjtBQUMvRSxVQUFNLFFBQWlCLENBQUM7QUFDeEIsVUFBTSxRQUFRLFFBQVEsTUFBTSxJQUFJO0FBSWhDLFFBQUksTUFBTSxXQUFXO0FBQ25CLGlCQUFXLFFBQVEsTUFBTSxXQUFXO0FBRWxDLFlBQUksS0FBSyxTQUFTLFFBQVc7QUFFM0IsZ0JBQU0sYUFBYSxLQUFLLFNBQVMsTUFBTTtBQUd2QyxnQkFBTSxPQUFPLE1BQU0sVUFBVTtBQUc3QixjQUFJLFFBQVEsS0FBSyxNQUFNLFlBQVksZUFBZSxHQUFHO0FBQ25ELGtCQUFNLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSxNQUFNLFlBQVksT0FBTztBQUNwRSxnQkFBSSxNQUFNO0FBQ1Isb0JBQU0sS0FBSyxJQUFJO0FBQUEsWUFDakI7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLDBCQUEwQixNQUFhLFNBQTBCO0FBRXZFLFVBQU0sUUFBUSxRQUFRLE1BQU0sSUFBSSxFQUFFLE9BQU8sVUFBUSxLQUFLLE1BQU0sWUFBWSxlQUFlLENBQUM7QUFDeEYsVUFBTSxRQUFpQixDQUFDO0FBRXhCLFVBQU0sUUFBUSxDQUFDLE1BQU0sZUFBZTtBQUNsQyxVQUFJLE1BQU07QUFDUixjQUFNLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSxNQUFNLFlBQVksT0FBTztBQUNwRSxZQUFJLE1BQU07QUFDUixnQkFBTSxLQUFLLElBQUk7QUFBQSxRQUNqQjtBQUFBLE1BQ0Y7QUFBQSxJQUNGLENBQUM7QUFHRCxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsbUJBQW1CLE1BQWEsTUFBYyxZQUFvQixTQUErQjtBQUN2RyxRQUFJO0FBQ0YsWUFBTSxjQUFjLElBQUksWUFBWSxLQUFLLElBQUk7QUFDN0Msa0JBQVksV0FBVyxJQUFJO0FBRTNCLFlBQU0sU0FBUyxLQUFLLHdCQUF3QixZQUFZLE1BQU07QUFDOUQsWUFBTSxPQUFPLEtBQUssWUFBWSxJQUFJO0FBRWxDLFlBQU0sYUFBYSxLQUFLLHNCQUFzQixNQUFNO0FBRXBELFlBQU0sYUFBYSxLQUFLLHNCQUFzQixNQUFNO0FBRXBELFlBQU0sYUFBYSxLQUFLLGNBQWMsS0FBSyxJQUFJO0FBRS9DLGFBQU87QUFBQSxRQUNMLElBQUksWUFBWSxTQUFTLE1BQU0sR0FBRyxLQUFLLElBQUksSUFBSSxhQUFhLENBQUM7QUFBQSxRQUM3RCxPQUFPO0FBQUEsUUFDUCxNQUFNLEtBQUssS0FBSztBQUFBLFFBQ2hCLE1BQU0sRUFBRSxNQUFNLEtBQUssS0FBSztBQUFBLFFBQ3hCLFlBQVksYUFBYTtBQUFBO0FBQUE7QUFBQSxRQUV6QjtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0EsVUFBVSxZQUFZLFNBQVMsWUFBWTtBQUFBLFFBQzNDLGFBQWEsWUFBWSxTQUFTLGVBQWU7QUFBQSxRQUNqRCxXQUFXLFlBQVksU0FBUyxhQUFhO0FBQUEsUUFDN0MsZUFBZSxZQUFZLFNBQVMsaUJBQWlCO0FBQUEsUUFDckQsU0FBUyxZQUFZLFNBQVMsV0FBVztBQUFBLFFBQ3pDLFVBQVUsWUFBWSxTQUFTLFlBQVk7QUFBQSxRQUMzQyxlQUFlLFlBQVksU0FBUyxpQkFBaUI7QUFBQSxRQUNyRCxZQUFZLFlBQVksU0FBUyxjQUFjO0FBQUEsUUFDL0MsY0FBYyxZQUFZLFNBQVM7QUFBQSxRQUNuQyxXQUFXLFlBQVksU0FBUztBQUFBLFFBQ2hDLFdBQVcsWUFBWTtBQUFBLFFBQ3ZCLHlCQUF5QjtBQUFBLFFBQ3pCLFVBQVUsS0FBSztBQUFBLFFBQ2YsVUFBVSxLQUFLO0FBQUEsUUFDZixjQUFjLEtBQUs7QUFBQSxRQUNuQixlQUFlLEtBQUs7QUFBQSxRQUNwQjtBQUFBLFFBQ0EsUUFBUSxZQUFZO0FBQUEsUUFDcEIsYUFBYSxZQUFZO0FBQUEsUUFDekIsYUFBYSxZQUFZO0FBQUEsUUFDekIsVUFBVSxZQUFZO0FBQUEsUUFDdEIsU0FBUyxZQUFZLFNBQVMsV0FBVztBQUFBLE1BQzNDO0FBQUEsSUFDRixTQUFTLE9BQU87QUFDZCxxQkFBTyxNQUFNLG1DQUFnQyxhQUFhLENBQUMsT0FBTyxLQUFLLElBQUksS0FBSyxLQUFLO0FBQ3JGLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRjtBQUFBLEVBRVEsY0FBYyxVQUEwQjtBQUM5QyxRQUFJLFVBQVU7QUFFWixZQUFNLFlBQVksU0FBUyxNQUFNLEdBQUc7QUFHcEMsVUFBSSxVQUFVLFNBQVMsR0FBRztBQUN4QixlQUFPLFVBQVUsQ0FBQztBQUFBLE1BQ3BCLE9BQU87QUFFTCxlQUFPO0FBQUEsTUFDVDtBQUFBLElBQ0YsT0FBTztBQUVMLGFBQVE7QUFBQSxJQUNWO0FBQUEsRUFDRjtBQUFBLEVBRVEsc0JBQXNCLFFBQXdCO0FBQ3BELFlBQVEsUUFBUTtBQUFBLE1BQ2Q7QUFDRSxlQUFPO0FBQUEsTUFDVDtBQUNFLGVBQU87QUFBQSxNQUNUO0FBQ0UsZUFBTztBQUFBLE1BQ1Q7QUFDRSxlQUFPO0FBQUEsTUFDVDtBQUNFLGVBQU87QUFBQSxNQUNUO0FBQ0UsZUFBTztBQUFBLElBQ1g7QUFBQSxFQUNGO0FBQUEsRUFFUSxzQkFBc0IsUUFBZ0M7QUFDNUQsWUFBUSxRQUFRO0FBQUEsTUFDZDtBQUNFO0FBQUEsTUFDRjtBQUNFO0FBQUEsTUFDRjtBQUNFO0FBQUEsTUFDRjtBQUNFO0FBQUEsTUFDRjtBQUNFO0FBQUEsTUFDRjtBQUNFO0FBQUEsSUFDSjtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRUSxxQkFBcUIsTUFBYSxVQUF1QztBQUUvRSxRQUFJLFNBQVMsVUFBVSxTQUFTLE9BQU8sU0FBUyxHQUFHO0FBQ2pELFVBQUksQ0FBQyxLQUFLLFVBQVUsQ0FBQyxTQUFTLE9BQU8sU0FBUyxLQUFLLE1BQU0sR0FBRztBQUMxRCxlQUFPO0FBQUEsTUFDVDtBQUFBLElBQ0Y7QUFHQSxRQUFJLFNBQVMsZ0JBQWdCLFFBQVc7QUFDdEMsWUFBTSxrQkFBa0IsS0FBSyxXQUFXLFVBQVUsS0FBSyxXQUFXO0FBQ2xFLFVBQUksb0JBQW9CLFNBQVMsYUFBYTtBQUM1QyxlQUFPO0FBQUEsTUFDVDtBQUFBLElBQ0Y7QUFFQSxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsbUJBQW1CLE1BQWEsVUFBdUM7QUFDN0UsUUFBSSxDQUFDLFNBQVMsS0FBTSxRQUFPO0FBRTNCLFVBQU0sV0FBVyxLQUFLLE1BQU0sWUFBWSxLQUFLO0FBRzdDLFFBQUksU0FBUyxLQUFLLFlBQVksU0FBUyxLQUFLLFNBQVMsU0FBUyxHQUFHO0FBQy9ELFVBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxNQUFNLFVBQzlCLFNBQVMsU0FBUyxLQUFLLFlBQVksQ0FBQyxDQUFDLEdBQUc7QUFDMUMsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBR0EsUUFBSSxTQUFTLEtBQUssWUFBWSxTQUFTLEtBQUssU0FBUyxTQUFTLEdBQUc7QUFDL0QsVUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFVBQzVCLFNBQVMsU0FBUyxLQUFLLFlBQVksQ0FBQyxDQUFDLEdBQUc7QUFDMUMsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBR0EsUUFBSSxTQUFTLEtBQUssT0FBTztBQUN2QixVQUFJO0FBQ0YsY0FBTSxRQUFRLElBQUksT0FBTyxTQUFTLEtBQUssT0FBTyxHQUFHO0FBQ2pELFlBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxHQUFHO0FBQ3pCLGlCQUFPO0FBQUEsUUFDVDtBQUFBLE1BQ0YsU0FBUyxPQUFPO0FBQ2QsdUJBQU8sTUFBTSxrQ0FBK0IsU0FBUyxLQUFLLEtBQUssSUFBSSxLQUFLO0FBQUEsTUFFMUU7QUFBQSxJQUNGO0FBRUEsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLGtCQUFrQixNQUFhLFVBQXVDO0FBQzVFLFFBQUksQ0FBQyxTQUFTLEtBQU0sUUFBTztBQUUzQixVQUFNLFdBQVcsS0FBSyxRQUFRLENBQUM7QUFHL0IsUUFBSSxTQUFTLEtBQUssWUFBWSxTQUFTLEtBQUssU0FBUyxTQUFTLEdBQUc7QUFFL0QsVUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLE1BQU0sU0FBTyxTQUFTLFNBQVMsR0FBRyxDQUFDLEdBQUc7QUFDaEUsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBR0EsUUFBSSxTQUFTLEtBQUssWUFBWSxTQUFTLEtBQUssU0FBUyxTQUFTLEdBQUc7QUFFL0QsVUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQU8sU0FBUyxTQUFTLEdBQUcsQ0FBQyxHQUFHO0FBQzlELGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUVBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSx1QkFBdUIsTUFBYSxVQUF1QztBQUNqRixRQUFJLENBQUMsU0FBUyxTQUFVLFFBQU87QUFFL0IsVUFBTSxlQUFlLEtBQUssWUFBWTtBQUd0QyxRQUFJLFNBQVMsU0FBUyxNQUFNLFNBQVMsU0FBUyxHQUFHLFNBQVMsR0FBRztBQUMzRCxVQUFJLENBQUMsU0FBUyxTQUFTLEdBQUcsU0FBUyxZQUFZLEdBQUc7QUFDaEQsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBR0EsUUFBSSxTQUFTLFNBQVMsT0FBTztBQUMzQixZQUFNLGFBQWEsQ0FBQyxRQUFRLFVBQVUsT0FBTyxXQUFXO0FBQ3hELFlBQU0sWUFBWSxXQUFXLFFBQVEsWUFBWTtBQUNqRCxZQUFNLGlCQUFpQixXQUFXLFFBQVEsU0FBUyxTQUFTLEtBQUs7QUFFakUsVUFBSSxjQUFjLE1BQU0sbUJBQW1CLE1BQU0sYUFBYSxnQkFBZ0I7QUFDNUUsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBR0EsUUFBSSxTQUFTLFNBQVMsT0FBTztBQUMzQixZQUFNLGFBQWEsQ0FBQyxRQUFRLFVBQVUsT0FBTyxXQUFXO0FBQ3hELFlBQU0sWUFBWSxXQUFXLFFBQVEsWUFBWTtBQUNqRCxZQUFNLGlCQUFpQixXQUFXLFFBQVEsU0FBUyxTQUFTLEtBQUs7QUFFakUsVUFBSSxjQUFjLE1BQU0sbUJBQW1CLE1BQU0sYUFBYSxnQkFBZ0I7QUFDNUUsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBRUEsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLG1CQUFtQixNQUFhLFVBQXVDO0FBRTdFLFFBQUksQ0FBQyxLQUFLLDBCQUEwQixLQUFLLFNBQVMsU0FBUyxPQUFPLEVBQUcsUUFBTztBQUM1RSxRQUFJLENBQUMsS0FBSywwQkFBMEIsS0FBSyxXQUFXLFNBQVMsU0FBUyxFQUFHLFFBQU87QUFDaEYsUUFBSSxDQUFDLEtBQUssMEJBQTBCLEtBQUssZUFBZSxTQUFTLGFBQWEsRUFBRyxRQUFPO0FBQ3hGLFFBQUksQ0FBQyxLQUFLLDBCQUEwQixLQUFLLFVBQVUsU0FBUyxRQUFRLEVBQUcsUUFBTztBQUM5RSxRQUFJLENBQUMsS0FBSywwQkFBMEIsS0FBSyxhQUFhLFNBQVMsV0FBVyxFQUFHLFFBQU87QUFHcEYsUUFBSSxTQUFTLGlCQUFpQjtBQUM1QixVQUFJLENBQUMsS0FBSywwQkFBMEIsS0FBSyxTQUFTLFNBQVMsZUFBZSxHQUFHO0FBQzNFLGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUVBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSwwQkFBMEIsVUFBZ0MsZ0JBQThCO0FBQzlGLFFBQUksQ0FBQyxlQUFnQixRQUFPO0FBRzVCLFFBQUksVUFBdUI7QUFDM0IsUUFBSSxVQUFVO0FBQ1osZ0JBQVUsT0FBTyxhQUFhLFdBQVcsSUFBSSxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFO0FBR0EsUUFBSSxlQUFlLFdBQVcsUUFBVztBQUN2QyxZQUFNLFVBQVUsWUFBWTtBQUM1QixVQUFJLFlBQVksZUFBZSxRQUFRO0FBQ3JDLGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUdBLFFBQUksQ0FBQyxRQUFTLFFBQU87QUFHckIsUUFBSSxlQUFlLFVBQVUsV0FBVyxlQUFlLE9BQVEsUUFBTztBQUN0RSxRQUFJLGVBQWUsSUFBSTtBQUNyQixZQUFNLFNBQVMsZUFBZTtBQUM5QixVQUFJLFFBQVEsWUFBWSxNQUFNLE9BQU8sWUFBWSxLQUM3QyxRQUFRLFNBQVMsTUFBTSxPQUFPLFNBQVMsS0FDdkMsUUFBUSxRQUFRLE1BQU0sT0FBTyxRQUFRLEdBQUc7QUFDMUMsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBQ0EsUUFBSSxlQUFlLFNBQVMsV0FBVyxlQUFlLE1BQU8sUUFBTztBQUVwRSxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsMEJBQTBCLFVBQWdDLGdCQUE4QjtBQUM5RixRQUFJLENBQUMsU0FBVSxRQUFPO0FBRXRCLFVBQU0sVUFBVSxPQUFPLGFBQWEsV0FBVyxJQUFJLEtBQUssUUFBUSxJQUFJO0FBQ3BFLFVBQU0sUUFBUSxvQkFBSSxLQUFLO0FBQ3ZCLFVBQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBR3pCLFFBQUksZUFBZSxTQUFTO0FBQzFCLFlBQU0sWUFBWSxVQUFVO0FBQzVCLFVBQUksQ0FBQyxVQUFXLFFBQU87QUFBQSxJQUN6QjtBQUdBLFFBQUksZUFBZSxPQUFPO0FBQ3hCLFlBQU0sVUFBVSxRQUFRLFlBQVksTUFBTSxNQUFNLFlBQVksS0FDOUMsUUFBUSxTQUFTLE1BQU0sTUFBTSxTQUFTLEtBQ3RDLFFBQVEsUUFBUSxNQUFNLE1BQU0sUUFBUTtBQUNsRCxVQUFJLENBQUMsUUFBUyxRQUFPO0FBQUEsSUFDdkI7QUFHQSxRQUFJLGVBQWUsVUFBVTtBQUMzQixZQUFNLFdBQVcsSUFBSSxLQUFLLEtBQUs7QUFDL0IsZUFBUyxRQUFRLFNBQVMsUUFBUSxJQUFJLENBQUM7QUFDdkMsWUFBTSxhQUFhLFFBQVEsWUFBWSxNQUFNLFNBQVMsWUFBWSxLQUNoRCxRQUFRLFNBQVMsTUFBTSxTQUFTLFNBQVMsS0FDekMsUUFBUSxRQUFRLE1BQU0sU0FBUyxRQUFRO0FBQ3pELFVBQUksQ0FBQyxXQUFZLFFBQU87QUFBQSxJQUMxQjtBQUdBLFFBQUksZUFBZSxVQUFVO0FBQzNCLFlBQU0sWUFBWSxJQUFJLEtBQUssS0FBSztBQUNoQyxZQUFNLHFCQUFxQixJQUFJLE1BQU0sT0FBTztBQUM1QyxnQkFBVSxRQUFRLFVBQVUsUUFBUSxJQUFJLGtCQUFrQjtBQUUxRCxZQUFNLGFBQWEsV0FBVyxTQUFTLFdBQVc7QUFDbEQsVUFBSSxDQUFDLFdBQVksUUFBTztBQUFBLElBQzFCO0FBR0EsUUFBSSxlQUFlLFVBQVU7QUFDM0IsWUFBTSxrQkFBa0IsSUFBSSxLQUFLLEtBQUs7QUFDdEMsWUFBTSxvQkFBb0IsSUFBSSxNQUFNLE9BQU8sSUFBSTtBQUMvQyxzQkFBZ0IsUUFBUSxnQkFBZ0IsUUFBUSxJQUFJLGlCQUFpQjtBQUVyRSxZQUFNLGdCQUFnQixJQUFJLEtBQUssZUFBZTtBQUM5QyxvQkFBYyxRQUFRLGNBQWMsUUFBUSxJQUFJLENBQUM7QUFFakQsWUFBTSxhQUFhLFdBQVcsbUJBQW1CLFdBQVc7QUFDNUQsVUFBSSxDQUFDLFdBQVksUUFBTztBQUFBLElBQzFCO0FBR0EsUUFBSSxlQUFlLGFBQWEsUUFBVztBQUN6QyxZQUFNLFdBQVcsSUFBSSxLQUFLLEtBQUs7QUFDL0IsZUFBUyxRQUFRLFNBQVMsUUFBUSxJQUFJLGVBQWUsUUFBUTtBQUU3RCxZQUFNLGVBQWUsV0FBVyxZQUFZLFVBQVU7QUFDdEQsVUFBSSxDQUFDLGFBQWMsUUFBTztBQUFBLElBQzVCO0FBR0EsUUFBSSxlQUFlLGVBQWUsUUFBVztBQUMzQyxZQUFNLGFBQWEsSUFBSSxLQUFLLEtBQUs7QUFDakMsaUJBQVcsUUFBUSxXQUFXLFFBQVEsSUFBSSxlQUFlLFVBQVU7QUFFbkUsWUFBTSxpQkFBaUIsV0FBVyxTQUFTLFdBQVc7QUFDdEQsVUFBSSxDQUFDLGVBQWdCLFFBQU87QUFBQSxJQUM5QjtBQUVBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSx1QkFBdUIsTUFBYSxVQUF1QztBQUNqRixRQUFJLENBQUMsU0FBUyxTQUFVLFFBQU87QUFHL0IsUUFBSSxTQUFTLFNBQVMsUUFBUTtBQUM1QixZQUFNLGFBQWEsS0FBSyxVQUFVLFVBQVUsR0FBRyxLQUFLLFNBQVMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLO0FBQ3RGLFVBQUksQ0FBQyxXQUFXLFdBQVcsU0FBUyxTQUFTLE1BQU0sR0FBRztBQUNwRCxlQUFPO0FBQUEsTUFDVDtBQUFBLElBQ0Y7QUFHQSxRQUFJLFNBQVMsU0FBUyxNQUFNO0FBQzFCLFVBQUksQ0FBQyxLQUFLLFVBQVUsU0FBUyxTQUFTLFNBQVMsSUFBSSxHQUFHO0FBQ3BELGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUVBLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSx1QkFBdUIsTUFBYSxVQUF1QztBQUVqRixRQUFJLFNBQVMsWUFBWTtBQUN2QixZQUFNLGdCQUFnQixDQUFDLENBQUMsS0FBSyxjQUFjLEtBQUssV0FBVyxTQUFTO0FBR3BFLFVBQUksU0FBUyxXQUFXLFFBQVEsVUFBYSxrQkFBa0IsU0FBUyxXQUFXLEtBQUs7QUFDdEYsZUFBTztBQUFBLE1BQ1Q7QUFHQSxVQUFJLFNBQVMsV0FBVyxXQUFXLEtBQUssWUFBWTtBQUNsRCxZQUFJLENBQUMsS0FBSyxXQUFXLFNBQVMsU0FBUyxXQUFXLE9BQU8sR0FBRztBQUMxRCxpQkFBTztBQUFBLFFBQ1Q7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUdBLFFBQUksU0FBUyxjQUFjO0FBQ3pCLFlBQU0sa0JBQWtCLENBQUMsQ0FBQyxLQUFLLGFBQWEsS0FBSyxVQUFVLFNBQVM7QUFHcEUsVUFBSSxTQUFTLGFBQWEsUUFBUSxVQUFhLG9CQUFvQixTQUFTLGFBQWEsS0FBSztBQUM1RixlQUFPO0FBQUEsTUFDVDtBQUFBLElBR0Y7QUFFQSxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsMEJBQ04sT0FDQSxZQUNBLFlBQ1M7QUFDVCxRQUFJLENBQUMsY0FBYyxXQUFXLFdBQVcsRUFBRyxRQUFPO0FBRW5ELFVBQU0sY0FBYyxDQUFDLEdBQUcsS0FBSztBQUU3QixnQkFBWSxLQUFLLENBQUMsR0FBRyxNQUFNO0FBQ3pCLGVBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDMUMsY0FBTSxRQUFRLFdBQVcsQ0FBQztBQUMxQixjQUFNLFlBQVksY0FBYyxXQUFXLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSTtBQUNoRSxjQUFNLFlBQVksY0FBYyxRQUFRLElBQUk7QUFDNUMsY0FBTSxnQkFBZ0IsS0FBSyxhQUFhLEdBQUcsR0FBRyxLQUFLLElBQUk7QUFFdkQsWUFBSSxrQkFBa0IsR0FBRztBQUN2QixpQkFBTztBQUFBLFFBQ1Q7QUFBQSxNQUNGO0FBQ0EsYUFBTztBQUFBLElBQ1QsQ0FBQztBQUNELFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSxhQUFhLEdBQVUsR0FBVSxPQUEwQjtBQUNqRSxZQUFRLE9BQU87QUFBQSxNQUNiLEtBQUs7QUFDSCxlQUFPLEtBQUssYUFBYSxFQUFFLFNBQVMsRUFBRSxPQUFPO0FBQUEsTUFDL0MsS0FBSztBQUNILGVBQU8sS0FBSyxhQUFhLEVBQUUsV0FBVyxFQUFFLFNBQVM7QUFBQSxNQUNuRCxLQUFLO0FBQ0gsZUFBTyxLQUFLLGFBQWEsRUFBRSxlQUFlLEVBQUUsYUFBYTtBQUFBLE1BQzNELEtBQUs7QUFDSCxlQUFPLEtBQUssYUFBYSxFQUFFLFVBQVUsRUFBRSxRQUFRO0FBQUEsTUFDakQsS0FBSztBQUNILGVBQU8sS0FBSyxhQUFhLEVBQUUsYUFBYSxFQUFFLFdBQVc7QUFBQSxNQUN2RCxLQUFLO0FBQ0gsY0FBTSxjQUF1QztBQUFBLFVBQzNDLFFBQVE7QUFBQSxVQUNSLFVBQVU7QUFBQSxVQUNWLE9BQU87QUFBQSxVQUNQLGFBQWE7QUFBQSxRQUNmO0FBQ0EsY0FBTSxZQUFZLFlBQVksRUFBRSxZQUFZLFdBQVcsS0FBSztBQUM1RCxjQUFNLFlBQVksWUFBWSxFQUFFLFlBQVksV0FBVyxLQUFLO0FBQzVELGVBQU8sWUFBWTtBQUFBLE1BQ3JCLEtBQUs7QUFDSCxjQUFNLFlBQXFDO0FBQUEsVUFDekMsUUFBUTtBQUFBLFVBQ1IsZUFBZTtBQUFBLFVBQ2YsV0FBVztBQUFBLFVBQ1gsUUFBUTtBQUFBLFVBQ1IsYUFBYTtBQUFBLFFBQ2Y7QUFDQSxjQUFNLFVBQVUsVUFBVSxFQUFFLFVBQVUsTUFBTSxLQUFLO0FBQ2pELGNBQU0sVUFBVSxVQUFVLEVBQUUsVUFBVSxNQUFNLEtBQUs7QUFDakQsZUFBTyxVQUFVO0FBQUEsTUFDbkIsS0FBSztBQUNILGdCQUFRLEVBQUUsUUFBUSxJQUFJLGNBQWMsRUFBRSxRQUFRLEVBQUU7QUFBQSxNQUNsRCxLQUFLO0FBQ0gsZ0JBQVEsRUFBRSxZQUFZLElBQUksY0FBYyxFQUFFLFlBQVksRUFBRTtBQUFBLE1BQzFEO0FBQ0UsZUFBTztBQUFBLElBQ1g7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLUSxhQUFhLE9BQTZCLE9BQXFDO0FBRXJGLFVBQU0sV0FBVyxRQUFTLE9BQU8sVUFBVSxXQUFXLElBQUksS0FBSyxLQUFLLElBQUksUUFBUztBQUNqRixVQUFNLFdBQVcsUUFBUyxPQUFPLFVBQVUsV0FBVyxJQUFJLEtBQUssS0FBSyxJQUFJLFFBQVM7QUFHakYsUUFBSSxhQUFhLFFBQVEsYUFBYSxLQUFNLFFBQU87QUFDbkQsUUFBSSxhQUFhLEtBQU0sUUFBTztBQUM5QixRQUFJLGFBQWEsS0FBTSxRQUFPO0FBRzlCLFdBQU8sU0FBUyxRQUFRLElBQUksU0FBUyxRQUFRO0FBQUEsRUFDL0M7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLFdBQVcsT0FBZ0IsWUFBaUM7QUFDbEUsVUFBTSxlQUFlLG9CQUFJLElBQXFCO0FBRzlDLFVBQU0sUUFBUSxVQUFRO0FBQ3BCLFVBQUksV0FBVztBQUVmLGNBQVEsWUFBWTtBQUFBLFFBQ2xCLEtBQUs7QUFDSCxxQkFBVyxLQUFLLFVBQVU7QUFDMUI7QUFBQSxRQUNGLEtBQUs7QUFDSCxxQkFBVyxLQUFLLFlBQVk7QUFDNUI7QUFBQSxRQUNGLEtBQUs7QUFDSCxjQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCLHVCQUFXO0FBQUEsVUFDYixPQUFPO0FBQ0wsa0JBQU0sVUFBVSxPQUFPLEtBQUssWUFBWSxXQUFXLElBQUksS0FBSyxLQUFLLE9BQU8sSUFBSSxLQUFLO0FBQ2pGLHVCQUFXLFFBQVEsWUFBWSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFBQSxVQUMvQztBQUNBO0FBQUEsUUFDRixLQUFLO0FBQ0gsY0FBSSxLQUFLLFVBQVU7QUFDakIsa0JBQU0saUJBQWlCLEtBQUssU0FBUyxZQUFZLEdBQUc7QUFDcEQsdUJBQVcsaUJBQWlCLElBQUksS0FBSyxTQUFTLFVBQVUsR0FBRyxjQUFjLElBQUk7QUFBQSxVQUMvRSxPQUFPO0FBQ0wsdUJBQVc7QUFBQSxVQUNiO0FBQ0E7QUFBQSxRQUNGLEtBQUs7QUFDSCxjQUFJLENBQUMsS0FBSyxRQUFRLEtBQUssS0FBSyxXQUFXLEdBQUc7QUFDeEMsdUJBQVc7QUFBQSxVQUNiLE9BQU87QUFFTCx1QkFBVyxLQUFLLEtBQUssQ0FBQztBQUFBLFVBQ3hCO0FBQ0E7QUFBQSxNQUNKO0FBRUEsVUFBSSxDQUFDLGFBQWEsSUFBSSxRQUFRLEdBQUc7QUFDL0IscUJBQWEsSUFBSSxVQUFVLENBQUMsQ0FBQztBQUFBLE1BQy9CO0FBRUEsbUJBQWEsSUFBSSxRQUFRLEdBQUcsS0FBSyxJQUFJO0FBQUEsSUFDdkMsQ0FBQztBQUdELFVBQU0sU0FBa0IsQ0FBQztBQUV6QixpQkFBYSxRQUFRLENBQUMsY0FBYyxhQUFhO0FBSy9DLG1CQUFhLFFBQVEsVUFBUTtBQUMzQixlQUFPLEtBQUs7QUFBQSxVQUNWLEdBQUc7QUFBQSxVQUNILFlBQVk7QUFBQTtBQUFBLFFBQ2QsQ0FBQztBQUFBLE1BQ0gsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUNELFdBQU87QUFBQSxFQUNUO0FBQ0Y7OztBaUMzakNBLElBQUFDLHFCQUF1QjtBQUdoQixJQUFNLGtCQUFrQjtBQUV4QixJQUFNLFlBQU4sY0FBd0IsU0FBUztBQUFBO0FBQUEsRUFLdEMsWUFBWSxNQUE2QixRQUFxQixNQUFvQixhQUEwQjtBQUMxRyxVQUFNLElBQUk7QUFENkI7QUFBcUI7QUFBb0I7QUFKbEYsd0JBQVEsU0FBaUIsQ0FBQztBQUMxQjtBQUFBLHdCQUFRLHFCQUE0QjtBQUNwQztBQUFBLHdCQUFRLHdCQUF1QztBQUk3QyxTQUFLLE9BQU87QUFBQSxFQUNkO0FBQUEsRUFFQSxjQUFzQjtBQUNwQixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsaUJBQXlCO0FBQ3ZCLFdBQU8sS0FBSyxLQUFLLEVBQUUsa0JBQWtCO0FBQUEsRUFDdkM7QUFBQSxFQUVBLFVBQWtCO0FBQ2hCLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxNQUFNLFNBQXdCO0FBQzVCLFNBQUssUUFBUSxNQUFNLEtBQUssWUFBWSxLQUFLLFdBQVc7QUFFcEQsVUFBTSxnQkFBZ0IsQ0FBQyxHQUFHLElBQUksSUFBSSxLQUFLLE1BQU0sSUFBSSxVQUFRLEtBQUssVUFBVSxDQUFDLENBQUMsRUFBRSxLQUFLO0FBRWpGLFVBQU0sS0FBSyxPQUFPLGlCQUFpQjtBQUFBLE1BQUUsT0FBTyxLQUFLO0FBQUEsTUFDakQ7QUFBQSxJQUE2QixHQUFHLEtBQUssTUFBTSxLQUFLLFFBQVEsS0FBSyxJQUFJO0FBQUEsRUFDbkU7QUFBQSxFQUVVLDRCQUE0QixNQUFpQjtBQUVyRCx1QkFBQUMsUUFBVyxlQUFlLFVBQVUsU0FBUyxNQUFNLE1BQU07QUFDdkQsYUFBTyxTQUFTO0FBQUEsSUFDbEIsQ0FBQztBQUdELHVCQUFBQSxRQUFXLGVBQWUsT0FBTyxTQUFTLEtBQUs7QUFDN0MsYUFBTyxDQUFDO0FBQUEsSUFDVixDQUFDO0FBRUQsdUJBQUFBLFFBQVcsZUFBZSxZQUFZLFNBQVMsS0FBSyxPQUFPO0FBQ3pELGFBQU8sTUFBTSxRQUFRLEdBQUcsS0FBSyxJQUFJLFNBQVMsS0FBSztBQUFBLElBQ2pELENBQUM7QUFHRCx1QkFBQUEsUUFBVyxlQUFlLFdBQVcsU0FBUyxPQUFPLEtBQUssS0FBSztBQUM3RCxhQUFPLFNBQVMsT0FBTyxTQUFTO0FBQUEsSUFDbEMsQ0FBQztBQUdELHVCQUFBQSxRQUFXLGVBQWUsZ0JBQWdCLFNBQVMsVUFBa0I7QUFDbkUsYUFBTyxhQUFhLFFBQXFDLEtBQUs7QUFBQSxJQUNoRSxDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRVUsZ0NBQWdDLFdBQXdCLE1BQWlCO0FBS2pGLFVBQU0sa0JBQWtCLFVBQVUsaUJBQWlCLGFBQWE7QUFDaEUsb0JBQWdCLFFBQVEsWUFBVTtBQUNoQyxhQUFPLGlCQUFpQixTQUFTLE1BQU07QUFDckMsYUFBSyxpQkFBaUIsTUFBcUI7QUFBQSxNQUM3QyxDQUFDO0FBQUEsSUFDSCxDQUFDO0FBSUQsVUFBTSxvQkFBb0IsVUFBVSxjQUFjLDBCQUEwQjtBQUM1RSxRQUFJLG1CQUFtQjtBQUNyQixXQUFLLGlCQUFpQixpQkFBZ0M7QUFFdEQsV0FBSyxpQkFBaUIsaUJBQWdDO0FBQUEsSUFDeEQ7QUFHQSxVQUFNLGNBQWMsVUFBVSxjQUFjLHFCQUFxQjtBQUNqRSxRQUFJLGFBQWE7QUFDZixrQkFBWSxpQkFBaUIsU0FBUyxNQUFNO0FBQzFDLGFBQUssWUFBWSxTQUFTO0FBQUEsTUFDNUIsQ0FBQztBQUFBLElBQ0g7QUFHQSxVQUFNLGtCQUFrQixVQUFVLGlCQUFpQix3QkFBd0I7QUFDM0Usb0JBQWdCLFFBQVEsY0FBWTtBQUNsQyxlQUFTLGlCQUFpQixVQUFVLE1BQU07QUFDeEMsYUFBSyxZQUFZLFNBQVM7QUFBQSxNQUM1QixDQUFDO0FBQUEsSUFDSCxDQUFDO0FBR0QsVUFBTSxvQkFBb0IsVUFBVSxjQUFjLHFCQUFxQjtBQUV2RSxRQUFJLGVBQWUsbUJBQW1CO0FBRXBDLGtCQUFZLGlCQUFpQixTQUFTLE1BQU07QUFDMUMsMEJBQWtCLE1BQU0sVUFBVSxZQUFZLFFBQVEsVUFBVTtBQUNoRSxhQUFLLFlBQVksU0FBUztBQUFBLE1BQzVCLENBQUM7QUFHRCx3QkFBa0IsaUJBQWlCLFNBQVMsTUFBTTtBQUNoRCxvQkFBWSxRQUFRO0FBQ3BCLDBCQUFrQixNQUFNLFVBQVU7QUFDbEMsb0JBQVksTUFBTTtBQUNsQixhQUFLLFlBQVksU0FBUztBQUFBLE1BQzVCLENBQUM7QUFHRCx3QkFBa0IsTUFBTSxVQUFVLFlBQVksUUFBUSxVQUFVO0FBQUEsSUFDbEU7QUFFQSxVQUFNLFlBQVksVUFBVSxpQkFBaUIsYUFBYTtBQUUxRCxjQUFVLFFBQVEsU0FBTztBQUV2QixVQUFJLFNBQVMsV0FBVztBQUd4QixVQUFJLGlCQUFpQixZQUFZLENBQUMsVUFBVTtBQUMxQyxjQUFNLFdBQVcsSUFBSSxhQUFhLGdCQUFnQjtBQUNsRCxjQUFNLGFBQWEsSUFBSSxhQUFhLGtCQUFrQjtBQUV0RCxZQUFJLFVBQVU7QUFDWixlQUFLLGFBQWEsVUFBVSxhQUFhLFNBQVMsVUFBVSxJQUFJLE1BQVM7QUFBQSxRQUMzRTtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUdELFNBQUssWUFBWSxTQUFTO0FBQUEsRUFDNUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTVEsY0FBYyxNQUFzQjtBQUMxQyxXQUFPLEtBQ0osVUFBVSxLQUFLLEVBQ2YsUUFBUSxvQkFBb0IsRUFBRSxFQUM5QixZQUFZO0FBQUEsRUFDakI7QUFBQSxFQUVRLFlBQVksV0FBOEI7QUFFaEQsVUFBTSxjQUFjLFVBQVUsY0FBYyxxQkFBcUI7QUFDakUsVUFBTSxpQkFBaUIsVUFBVSxjQUFjLHdCQUF3QjtBQUN2RSxVQUFNLGVBQWUsVUFBVSxjQUFjLHNCQUFzQjtBQUNuRSxVQUFNLGVBQWUsVUFBVSxjQUFjLHNCQUFzQjtBQUNuRSxVQUFNLFlBQVksVUFBVSxjQUFjLG1CQUFtQjtBQUc3RCxVQUFNLGdCQUFnQixhQUFhLE9BQU8sS0FBSyxLQUFLO0FBQ3BELFVBQU0sdUJBQXVCLEtBQUssY0FBYyxhQUFhO0FBQzdELFVBQU0sZ0JBQWdCLGdCQUFnQixTQUFTO0FBQy9DLFVBQU0sY0FBYyxjQUFjLFNBQVM7QUFDM0MsVUFBTSxjQUFjLGNBQWMsU0FBUztBQUMzQyxVQUFNLFdBQVcsV0FBVyxTQUFTO0FBR3JDLFVBQU0sWUFBWSxVQUFVLGlCQUFpQixhQUFhO0FBQzFELFFBQUksZUFBZTtBQUduQixVQUFNLFFBQVEsb0JBQUksS0FBSztBQUN2QixVQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUd6QixVQUFNLFlBQVksSUFBSSxLQUFLLEtBQUs7QUFDaEMsY0FBVSxRQUFRLE1BQU0sUUFBUSxJQUFJLENBQUM7QUFHckMsY0FBVSxRQUFRLFNBQU87QUFDdkIsVUFBSSxhQUFhO0FBR2pCLFVBQUksc0JBQXNCO0FBQ3hCLGNBQU0sa0JBQWtCLElBQUksY0FBYyxtQkFBbUIsR0FBRyxlQUFlO0FBQy9FLGNBQU0sd0JBQXdCLEtBQUssY0FBYyxlQUFlO0FBRWhFLGNBQU0sV0FBVyxNQUFNLEtBQUssSUFBSSxpQkFBaUIsV0FBVyxDQUFDLEVBQzFELElBQUksU0FBTyxJQUFJLGVBQWUsRUFBRSxFQUNoQyxLQUFLLEdBQUc7QUFDWCxjQUFNLGlCQUFpQixLQUFLLGNBQWMsUUFBUTtBQUVsRCxZQUFJLENBQUMsc0JBQXNCLFNBQVMsb0JBQW9CLEtBQ3BELENBQUMsZUFBZSxTQUFTLG9CQUFvQixHQUFHO0FBQ2xELHVCQUFhO0FBQUEsUUFDZjtBQUFBLE1BQ0Y7QUFHQSxVQUFJLGNBQWMsa0JBQWtCLE9BQU87QUFDekMsWUFBSSxrQkFBa0IsUUFBUTtBQUU1QixnQkFBTSxrQkFBa0IsSUFBSSxjQUFjLGdCQUFnQjtBQUMxRCxnQkFBTSxjQUFjLENBQUMsaUJBQWlCLFVBQVUsU0FBUyxlQUFlO0FBRXhFLGNBQUksYUFBYTtBQUNmLHlCQUFhO0FBQUEsVUFDZjtBQUFBLFFBQ0YsT0FBTztBQUVMLGdCQUFNLGNBQWMsSUFBSSxjQUFjLGFBQWEsY0FBYyxZQUFZLENBQUMsRUFBRTtBQUVoRixjQUFJLENBQUMsYUFBYTtBQUNoQix5QkFBYTtBQUFBLFVBQ2Y7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUdBLFVBQUksY0FBYyxnQkFBZ0IsT0FBTztBQUN2QyxjQUFNLGFBQWEsSUFBSSxjQUFjLGNBQWM7QUFDbkQsY0FBTSxnQkFBZ0IsWUFBWSxhQUFhLGFBQWEsS0FBSztBQUVqRSxZQUFJLGtCQUFrQixhQUFhO0FBQ2pDLHVCQUFhO0FBQUEsUUFDZjtBQUFBLE1BQ0Y7QUFHQSxVQUFJLGNBQWMsZ0JBQWdCLE9BQU87QUFDdkMsY0FBTSxhQUFhLElBQUksY0FBYyxjQUFjLEdBQUcsZUFBZTtBQUVyRSxZQUFJLGVBQWUsYUFBYTtBQUM5Qix1QkFBYTtBQUFBLFFBQ2Y7QUFBQSxNQUNGO0FBR0EsVUFBSSxjQUFjLGFBQWEsT0FBTztBQUVwQyxjQUFNLGVBQWUsSUFBSSxpQkFBaUIsWUFBWTtBQUN0RCxjQUFNLHFCQUFxQixNQUFNLEtBQUssWUFBWSxFQUFFLEtBQUssUUFBTTtBQUM3RCxnQkFBTSxXQUFXLEdBQUcsY0FBYyxZQUFZLEdBQUcsZUFBZTtBQUNoRSxpQkFBTyxTQUFTLEtBQUssRUFBRSxTQUFTO0FBQUEsUUFDbEMsQ0FBQztBQUdELFlBQUksYUFBYSxXQUFXO0FBRTFCLGNBQUksQ0FBQyxvQkFBb0I7QUFDdkIseUJBQWE7QUFBQSxVQUNmO0FBQUEsUUFDRixXQUFXLGFBQWEsVUFBVTtBQUVoQyxjQUFJLG9CQUFvQjtBQUN0Qix5QkFBYTtBQUFBLFVBQ2Y7QUFBQSxRQUNGLE9BQU87QUFFTCxnQkFBTSxpQkFBaUIsSUFBSSxjQUFjLHFCQUFxQjtBQUc5RCxjQUFJLENBQUMsZ0JBQWdCO0FBQ25CLHlCQUFhO0FBQUEsVUFDZixPQUFPO0FBRUwsa0JBQU0sV0FBVyxlQUFlLGNBQWMsWUFBWSxHQUFHLGVBQWU7QUFFNUUsa0JBQU0sVUFBVSxJQUFJLEtBQUssUUFBUTtBQUdqQyxnQkFBSSxDQUFDLE1BQU0sUUFBUSxRQUFRLENBQUMsR0FBRztBQUM3QixzQkFBUSxVQUFVO0FBQUEsZ0JBQ2hCLEtBQUs7QUFFSCxzQkFBSSxXQUFXLE9BQU87QUFDcEIsaUNBQWE7QUFBQSxrQkFDZjtBQUNBO0FBQUEsZ0JBRUYsS0FBSztBQUVILHdCQUFNLFVBQVUsUUFBUSxRQUFRLE1BQU0sTUFBTSxRQUFRLEtBQ3RDLFFBQVEsU0FBUyxNQUFNLE1BQU0sU0FBUyxLQUN0QyxRQUFRLFlBQVksTUFBTSxNQUFNLFlBQVk7QUFDMUQsc0JBQUksQ0FBQyxTQUFTO0FBQ1osaUNBQWE7QUFBQSxrQkFDZjtBQUNBO0FBQUEsZ0JBRUYsS0FBSztBQUVILHNCQUFJLFVBQVUsU0FBUyxVQUFVLFdBQVc7QUFDMUMsaUNBQWE7QUFBQSxrQkFDZjtBQUNBO0FBQUEsZ0JBRUYsS0FBSztBQUVILHNCQUFJLFdBQVcsV0FBVztBQUN4QixpQ0FBYTtBQUFBLGtCQUNmO0FBQ0E7QUFBQSxjQUNKO0FBQUEsWUFDRixPQUFPO0FBRUwsMkJBQWE7QUFBQSxZQUNmO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBR0EsVUFBSSxZQUFZO0FBQ2QsUUFBQyxJQUFvQixNQUFNLFVBQVU7QUFDckM7QUFBQSxNQUNGLE9BQU87QUFDTCxRQUFDLElBQW9CLE1BQU0sVUFBVTtBQUFBLE1BQ3ZDO0FBQUEsSUFDRixDQUFDO0FBR0QsUUFBSSxZQUFZO0FBQ2hCLGNBQVUsUUFBUSxTQUFPO0FBQ3ZCLFVBQUssSUFBb0IsTUFBTSxZQUFZLFFBQVE7QUFDakQsY0FBTSxtQkFBbUIsSUFBSSxjQUFjLGFBQWE7QUFDeEQsWUFBSSxrQkFBa0I7QUFDcEIsMkJBQWlCLGNBQWMsVUFBVSxTQUFTO0FBQ2xEO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxJQUNGLENBQUM7QUFHRCxVQUFNLHVCQUF1QixVQUFVLGNBQWMsa0JBQWtCO0FBQ3ZFLFFBQUksc0JBQXNCO0FBQ3hCLDJCQUFxQixjQUFjLElBQUksWUFBWTtBQUFBLElBQ3JEO0FBR0EsVUFBTSxlQUFlLFVBQVUsY0FBYyxzQkFBc0I7QUFDbkUsUUFBSSxjQUFjO0FBQ2hCLG1CQUFhLE1BQU0sVUFBVSxpQkFBaUIsSUFBSSxVQUFVO0FBQUEsSUFDOUQ7QUFBQSxFQUNGO0FBQUEsRUFFUSxpQkFBaUIsUUFBMkI7QUFDbEQsVUFBTSxTQUFTLE9BQU8sUUFBUTtBQUU5QixRQUFJLENBQUMsT0FBUTtBQUdiLFFBQUksS0FBSyxzQkFBc0IsUUFBUTtBQUNyQyxXQUFLLHVCQUF1QixLQUFLLHlCQUF5QixRQUFRLFNBQVM7QUFBQSxJQUM3RSxPQUFPO0FBRUwsV0FBSyxvQkFBb0I7QUFDekIsV0FBSyx1QkFBdUI7QUFBQSxJQUM5QjtBQUVBLFVBQU0sWUFBWSxPQUFPLFFBQVEsdUJBQXVCO0FBQ3hELFFBQUksQ0FBQyxVQUFXO0FBR2hCLFNBQUsscUJBQXFCLFNBQVM7QUFHbkMsVUFBTSxZQUFZLFVBQVUsY0FBYyxPQUFPO0FBQ2pELFFBQUksQ0FBQyxVQUFXO0FBRWhCLFVBQU0sT0FBTyxNQUFNLEtBQUssVUFBVSxpQkFBaUIsYUFBYSxDQUFDO0FBR2pFLFVBQU0sYUFBYSxLQUFLLFNBQVMsTUFBTSxRQUFRLEtBQUssb0JBQW9CO0FBR3hFLFNBQUssUUFBUSxTQUFPLElBQUksT0FBTyxDQUFDO0FBR2hDLGVBQVcsUUFBUSxTQUFPLFVBQVUsWUFBWSxHQUFHLENBQUM7QUFHcEQsU0FBSyxZQUFZLFNBQXdCO0FBQUEsRUFDM0M7QUFBQSxFQUVRLHFCQUFxQixXQUEwQjtBQUVyRCxVQUFNLG9CQUFvQixVQUFVLGlCQUFpQixpQkFBaUI7QUFDdEUsc0JBQWtCLFFBQVEsZUFBYTtBQUNyQyxnQkFBVSxVQUFVLE9BQU8sWUFBWSxXQUFXO0FBQUEsSUFDcEQsQ0FBQztBQUdELFVBQU0sZUFBZSxVQUFVLGNBQWMsZUFBZSxLQUFLLGlCQUFpQixJQUFJO0FBQ3RGLFFBQUksY0FBYztBQUNoQixZQUFNLFlBQVksYUFBYSxjQUFjLGlCQUFpQjtBQUM5RCxVQUFJLFdBQVc7QUFDYixrQkFBVSxVQUFVLElBQUksS0FBSyx5QkFBeUIsUUFBUSxhQUFhLFdBQVc7QUFBQSxNQUN4RjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFFUSxTQUFTLE1BQWlCLFFBQWdCLFdBQXNDO0FBQ3RGLFdBQU8sQ0FBQyxHQUFHLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxNQUFNO0FBQzlCLFVBQUk7QUFDSixVQUFJO0FBR0osY0FBTyxRQUFRO0FBQUEsUUFDYixLQUFLO0FBRUgsZ0JBQU0sY0FBc0M7QUFBQSxZQUMxQyxXQUFXO0FBQUEsWUFBRyxRQUFRO0FBQUEsWUFBRyxVQUFVO0FBQUEsWUFBRyxVQUFVO0FBQUEsWUFBRyxPQUFPO0FBQUEsWUFBRyxVQUFVO0FBQUEsWUFBRyxRQUFRO0FBQUEsVUFDcEY7QUFHQSxnQkFBTSxpQkFBaUIsRUFBRSxjQUFjLGdCQUFnQixHQUFHLFVBQVUsU0FBUyxLQUFLO0FBQ2xGLGdCQUFNLGlCQUFpQixFQUFFLGNBQWMsZ0JBQWdCLEdBQUcsVUFBVSxTQUFTLEtBQUs7QUFHbEYsZ0JBQU0sWUFBWSxPQUFPLEtBQUssV0FBVyxFQUFFLEtBQUssT0FBSyxlQUFlLFNBQVMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxLQUFLO0FBQ2xHLGdCQUFNLFlBQVksT0FBTyxLQUFLLFdBQVcsRUFBRSxLQUFLLE9BQUssZUFBZSxTQUFTLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSztBQUVsRyxtQkFBUyxZQUFZLFNBQVM7QUFDOUIsbUJBQVMsWUFBWSxTQUFTO0FBQzlCO0FBQUEsUUFFRixLQUFLO0FBRUgsZ0JBQU0sWUFBb0M7QUFBQSxZQUN4QyxRQUFRO0FBQUEsWUFBRyxjQUFjO0FBQUEsWUFBRyxRQUFRO0FBQUEsWUFBRyxhQUFhO0FBQUEsWUFBRyxXQUFXO0FBQUEsVUFDcEU7QUFFQSxnQkFBTSxVQUFVLEVBQUUsY0FBYyxjQUFjLEdBQUcsYUFBYSxhQUFhLEtBQUs7QUFDaEYsZ0JBQU0sVUFBVSxFQUFFLGNBQWMsY0FBYyxHQUFHLGFBQWEsYUFBYSxLQUFLO0FBRWhGLG1CQUFTLFVBQVUsT0FBTyxLQUFLO0FBQy9CLG1CQUFTLFVBQVUsT0FBTyxLQUFLO0FBQy9CO0FBQUEsUUFFRixLQUFLO0FBQ0gsbUJBQVMsRUFBRSxjQUFjLG1CQUFtQixHQUFHLGVBQWU7QUFDOUQsbUJBQVMsRUFBRSxjQUFjLG1CQUFtQixHQUFHLGVBQWU7QUFDOUQ7QUFBQSxRQUVGLEtBQUs7QUFDSCxtQkFBUyxFQUFFLGNBQWMsY0FBYyxHQUFHLGVBQWU7QUFDekQsbUJBQVMsRUFBRSxjQUFjLGNBQWMsR0FBRyxlQUFlO0FBQ3pEO0FBQUEsUUFFRixLQUFLO0FBQ0gsbUJBQVMsRUFBRSxjQUFjLFlBQVksR0FBRyxlQUFlO0FBQ3ZELG1CQUFTLEVBQUUsY0FBYyxZQUFZLEdBQUcsZUFBZTtBQUN2RDtBQUFBLFFBRUYsS0FBSztBQUVILGdCQUFNLGtCQUFrQixFQUFFLGNBQWMsZ0NBQWdDO0FBQ3hFLGdCQUFNLGtCQUFrQixFQUFFLGNBQWMsZ0NBQWdDO0FBR3hFLGNBQUksaUJBQWlCO0FBQ25CLHFCQUFTLElBQUksS0FBSyxnQkFBZ0IsZUFBZSxFQUFFLEVBQUUsUUFBUTtBQUFBLFVBQy9ELE9BQU87QUFDTCxxQkFBUyxjQUFjLFFBQVEsT0FBTyxtQkFBbUI7QUFBQSxVQUMzRDtBQUVBLGNBQUksaUJBQWlCO0FBQ25CLHFCQUFTLElBQUksS0FBSyxnQkFBZ0IsZUFBZSxFQUFFLEVBQUUsUUFBUTtBQUFBLFVBQy9ELE9BQU87QUFDTCxxQkFBUyxjQUFjLFFBQVEsT0FBTyxtQkFBbUI7QUFBQSxVQUMzRDtBQUNBO0FBQUEsUUFFRixLQUFLO0FBQ0gsbUJBQVMsTUFBTSxLQUFLLEVBQUUsaUJBQWlCLFdBQVcsQ0FBQyxFQUNoRCxJQUFJLFNBQU8sSUFBSSxXQUFXLEVBQzFCLEtBQUssR0FBRyxLQUFLO0FBQ2hCLG1CQUFTLE1BQU0sS0FBSyxFQUFFLGlCQUFpQixXQUFXLENBQUMsRUFDaEQsSUFBSSxTQUFPLElBQUksV0FBVyxFQUMxQixLQUFLLEdBQUcsS0FBSztBQUNoQjtBQUFBLFFBRUY7QUFDRSxtQkFBUztBQUNULG1CQUFTO0FBQUEsTUFDYjtBQUdBLFVBQUksT0FBTyxXQUFXLFlBQVksT0FBTyxXQUFXLFVBQVU7QUFDNUQsZUFBTyxjQUFjLFFBQ2pCLE9BQU8sY0FBYyxNQUFNLElBQzNCLE9BQU8sY0FBYyxNQUFNO0FBQUEsTUFDakMsT0FBTztBQUNMLGVBQU8sY0FBYyxRQUNoQixTQUFTLFNBQ1QsU0FBUztBQUFBLE1BQ2hCO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRUEsTUFBTSxVQUF5QjtBQUFBLEVBRS9CO0FBQ0Y7OztBQ3pmTyxJQUFNLGNBQU4sTUFBa0I7QUFBQSxFQUd2QixZQUFvQixRQUF3QixNQUFvQixhQUFrQjtBQUE5RDtBQUF3QjtBQUFvQjtBQUZoRSx3QkFBUSx1QkFBZ0MsQ0FBQztBQUFBLEVBRTRDO0FBQUE7QUFBQSxFQUc5RSxnQkFBc0I7QUFDM0IsU0FBSyxPQUFPLGFBQWEsb0JBQW9CLENBQUMsU0FBd0IsSUFBSSxhQUFhLE1BQU0sS0FBSyxRQUFRLEtBQUssTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUN0SSxTQUFLLG9CQUFvQixLQUFLLGtCQUFrQjtBQUNoRCxTQUFLLE9BQU8sYUFBYSwwQkFBMEIsQ0FBQyxTQUF3QixJQUFJLGtCQUFrQixNQUFNLEtBQUssUUFBUSxLQUFLLE1BQU0sS0FBSyxXQUFXLENBQUM7QUFDakosU0FBSyxvQkFBb0IsS0FBSyx3QkFBd0I7QUFDdEQsU0FBSyxPQUFPLGFBQWEseUJBQXlCLENBQUMsU0FBd0IsSUFBSSxpQkFBaUIsTUFBTSxLQUFLLFFBQVEsS0FBSyxNQUFNLEtBQUssV0FBVyxDQUFDO0FBQy9JLFNBQUssb0JBQW9CLEtBQUssdUJBQXVCO0FBQ3JELFNBQUssT0FBTyxhQUFhLDhCQUE4QixDQUFDLFNBQXdCLElBQUkscUJBQXFCLE1BQU0sS0FBSyxRQUFRLEtBQUssTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUN4SixTQUFLLG9CQUFvQixLQUFLLDRCQUE0QjtBQUMxRCxTQUFLLE9BQU8sYUFBYSx3QkFBd0IsQ0FBQyxTQUF3QixJQUFJLGdCQUFnQixNQUFNLEtBQUssUUFBUSxLQUFLLE1BQU0sS0FBSyxXQUFXLENBQUM7QUFDN0ksU0FBSyxvQkFBb0IsS0FBSyxzQkFBc0I7QUFDcEQsU0FBSyxPQUFPLGFBQWEsZ0JBQWdCLENBQUMsU0FBd0IsSUFBSSxTQUFTLE1BQU0sS0FBSyxRQUFRLEtBQUssTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUM5SCxTQUFLLG9CQUFvQixLQUFLLGNBQWM7QUFLNUMsU0FBSyxPQUFPLGFBQWEsaUJBQWlCLENBQUMsU0FBd0IsSUFBSSxVQUFVLE1BQU0sS0FBSyxRQUFRLEtBQUssTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUNoSSxTQUFLLG9CQUFvQixLQUFLLGVBQWU7QUFBQSxFQUcvQztBQUFBO0FBQUEsRUFHQSxNQUFhLGFBQWEsVUFBa0IsTUFBcUM7QUFDL0UsU0FBSyxPQUFPLElBQUksVUFBVSxtQkFBbUIsUUFBUTtBQUVyRCxRQUFJLENBQUMsTUFBTTtBQUNULGFBQU8sS0FBSyxPQUFPLElBQUksVUFBVSxRQUFRLElBQUk7QUFBQSxJQUMvQztBQUVBLFVBQU0sS0FBSyxhQUFhO0FBQUEsTUFDdEIsTUFBTTtBQUFBLE1BQ04sUUFBUTtBQUFBLElBQ1YsQ0FBQztBQUNELFNBQUssT0FBTyxJQUFJLFVBQVUsV0FBVyxJQUFJO0FBQUEsRUFDM0M7QUFBQSxFQUVBLGtCQUF3QjtBQUd0QixTQUFLLG9CQUFvQixRQUFRLGNBQVk7QUFDM0MsV0FBSyxPQUFPLElBQUksVUFBVSxtQkFBbUIsUUFBUTtBQUFBLElBQ3ZELENBQUM7QUFBQSxFQUNIO0FBQ0Y7OztBQzFETyxJQUFNLE9BQU4sTUFBVztBQUFBO0FBQUEsRUFLaEIsWUFBWSxLQUFVO0FBSnRCLHdCQUFRLGdCQUF1QyxDQUFDO0FBQ2hELHdCQUFRLG1CQUEwQjtBQUNsQyx3QkFBUTtBQUdOLFNBQUssTUFBTTtBQUFBLEVBQ2I7QUFBQSxFQUVBLE1BQU0sYUFBYSxVQUFpQztBQUNsRCxRQUFJO0FBRUYsWUFBTSxlQUFlLEtBQUssSUFBSSxNQUFNLFFBQVEsZ0JBQWdCLDZDQUE2QyxRQUFRLE9BQU87QUFDeEgsY0FBUSxJQUFJLHNDQUFzQyxZQUFZO0FBQzlELFlBQU0sV0FBVyxNQUFNLE1BQU0sWUFBWTtBQUN6QyxVQUFJLENBQUMsU0FBUyxJQUFJO0FBQ2hCLGNBQU0sSUFBSSxNQUFNLGdDQUFnQyxTQUFTLFVBQVUsRUFBRTtBQUFBLE1BQ3ZFO0FBQ0EsV0FBSyxlQUFlLE1BQU0sU0FBUyxLQUFLO0FBQ3hDLFdBQUssa0JBQWtCO0FBQUEsSUFDekIsU0FBUyxPQUFPO0FBQ2QsY0FBUSxNQUFNLCtCQUErQixLQUFLO0FBQUEsSUFDcEQ7QUFBQSxFQUNGO0FBQUEsRUFFQSxFQUFFLEtBQWEsUUFBc0M7QUFFckQsVUFBTSxPQUFPLElBQUksTUFBTSxHQUFHO0FBQzFCLFFBQUksU0FBYyxLQUFLO0FBR3ZCLGVBQVcsS0FBSyxNQUFNO0FBQ3BCLFVBQUksVUFBVSxPQUFPLENBQUMsTUFBTSxRQUFXO0FBQ3JDLGlCQUFTLE9BQU8sQ0FBQztBQUFBLE1BQ25CLE9BQU87QUFDTCxnQkFBUSxLQUFLLDhCQUE4QixHQUFHLEVBQUU7QUFDaEQsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBR0EsUUFBSSxPQUFPLFdBQVcsVUFBVTtBQUM5QixjQUFRLEtBQUssaURBQWlELEdBQUcsRUFBRTtBQUNuRSxhQUFPO0FBQUEsSUFDVDtBQUdBLFFBQUksY0FBYztBQUNsQixRQUFJLFFBQVE7QUFDVixpQkFBVyxDQUFDLFVBQVUsVUFBVSxLQUFLLE9BQU8sUUFBUSxNQUFNLEdBQUc7QUFDM0Qsc0JBQWMsWUFBWSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsS0FBSyxHQUFHLEdBQUcsT0FBTyxVQUFVLENBQUM7QUFBQSxNQUN4RjtBQUFBLElBQ0Y7QUFFQSxXQUFPO0FBQUEsRUFDUDtBQUNGOzs7QUN2REEsSUFBQUMsbUJBQStDO0FBR3hDLElBQU0sYUFBTixjQUF5QixrQ0FBaUI7QUFBQSxFQUkvQyxZQUFZLEtBQVUsUUFBOEIsTUFBWTtBQUM5RCxVQUFNLEtBQUssTUFBTTtBQURpQztBQUhwRDtBQUtFLFNBQUssU0FBUztBQUFBLEVBQ2hCO0FBQUEsRUFFQSxVQUFnQjtBQUNkLFFBQUksRUFBRSxZQUFZLElBQUk7QUFFdEIsZ0JBQVksTUFBTTtBQUVsQixRQUFJLHlCQUFRLFdBQVcsRUFBRSxRQUFRLEtBQUssS0FBSyxFQUFFLGtCQUFrQixDQUFDLEVBQUUsV0FBVztBQUU3RSxRQUFJLHlCQUFRLFdBQVcsRUFDcEIsUUFBUSxLQUFLLEtBQUssRUFBRSxVQUFVLENBQUMsRUFDL0IsUUFBUSxLQUFLLEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxFQUMzQztBQUFBLE1BQVksQ0FBQyxhQUNaLFNBQ0csVUFBVSxNQUFNLEtBQUssS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUN0QyxVQUFVLE1BQU0sS0FBSyxLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQ3RDLFVBQVUsTUFBTSxLQUFLLEtBQUssRUFBRSxRQUFRLENBQUMsRUFDckMsVUFBVSxNQUFNLEtBQUssS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUNyQyxVQUFVLE1BQU0sS0FBSyxLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQ3RDLFVBQVUsTUFBTSxLQUFLLEtBQUssRUFBRSxZQUFZLENBQUMsRUFDekMsU0FBUyxPQUFPLFVBQVU7QUFDekIsYUFBSyxPQUFPLFNBQVMsV0FBVztBQUNoQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDakMsQ0FBQztBQUFBLElBQ0w7QUFFRixRQUFJLHlCQUFRLFdBQVcsRUFDcEIsUUFBUSxLQUFLLEtBQUssRUFBRSxhQUFhLENBQUMsRUFDbEMsUUFBUSxLQUFLLEtBQUssRUFBRSx5QkFBeUIsQ0FBQyxFQUM5QztBQUFBLE1BQVksQ0FBQyxhQUNaLFNBQ0csVUFBVSxXQUFXLFNBQVMsRUFDOUIsVUFBVSxRQUFRLE1BQU0sRUFDeEIsVUFBVSxTQUFTLE9BQU8sRUFDMUIsU0FBUyxPQUFPLFVBQVU7QUFDekIsYUFBSyxPQUFPLFNBQVMsY0FBYztBQUNuQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDakMsQ0FBQztBQUFBLElBQ0w7QUFBQSxFQUNKO0FBQ0Y7OztBQzdDTyxJQUFNLG1CQUF5QztBQUFBLEVBQ3BELFVBQVU7QUFBQSxFQUNWLGFBQWE7QUFDZjs7O0F0RUVBLElBQXFCLGlCQUFyQixjQUE0Qyx3QkFBTztBQUFBO0FBQUEsRUFPakQsWUFBWSxLQUFVLFVBQWU7QUFDakMsVUFBTSxLQUFLLFFBQVE7QUFQdkI7QUFDQSx3QkFBUTtBQUNSLHdCQUFRO0FBQ1Isd0JBQVE7QUFLSixTQUFLLE9BQU8sSUFBSSxLQUFLLEdBQUc7QUFDeEIsU0FBSyxjQUFjLElBQUksWUFBWSxLQUFLLEtBQUssTUFBTSxJQUFJO0FBQ3ZELFNBQUssY0FBYyxJQUFJLFlBQVksTUFBTSxLQUFLLE1BQU0sS0FBSyxXQUFXO0FBQUEsRUFDeEU7QUFBQTtBQUFBLEVBR0EsTUFBTSxTQUF3QjtBQUM1QixtQkFBTyxLQUFLLHVDQUF1QztBQUNuRCxVQUFNQyxzQkFBcUI7QUFFM0IsUUFBSTtBQUNGLFlBQU0sS0FBSyxhQUFhO0FBR3hCLFlBQU0sS0FBSyxLQUFLLGFBQWEsS0FBSyxTQUFTLFFBQVE7QUFFbkQsV0FBSyxjQUFjLElBQUksV0FBVyxLQUFLLEtBQUssTUFBTSxLQUFLLElBQUksQ0FBQztBQUc1RCxZQUFNLEtBQUssV0FBVztBQUV0QixXQUFLLGNBQWMsa0JBQWtCLEtBQUssS0FBSyxFQUFFLGNBQWMsR0FBRyxZQUFZO0FBQzVFLGNBQU0sS0FBSyxZQUFZLGFBQWFBLG1CQUFrQjtBQUFBLE1BQ3hELENBQUM7QUFHRCxXQUFLLFlBQVksZUFBZSxJQUFJO0FBRXBDLFdBQUssWUFBWSxjQUFjO0FBQy9CLHFCQUFPLEtBQUssbUNBQW1DO0FBQUEsSUFDakQsU0FBUyxPQUFPO0FBQ2QscUJBQU8sTUFBTSxzQ0FBc0MsaUJBQWlCLFFBQVEsTUFBTSxVQUFVLE9BQU8sS0FBSyxDQUFDLEVBQUU7QUFBQSxJQUM3RztBQUFBLEVBQ0Y7QUFBQSxFQUVBLE1BQU0sZUFBOEI7QUFDbEMsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMzRTtBQUFBLEVBRUEsTUFBTSxlQUE4QjtBQUNsQyxVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNuQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxNQUFjLGFBQTRCO0FBQ3hDLFFBQUk7QUFDRixZQUFNLFVBQVUsS0FBSyxJQUFJLE1BQU0sUUFBUTtBQUFBLFFBQ3JDO0FBQUEsTUFDRjtBQUNBLFlBQU0sV0FBVyxNQUFNLE1BQU0sT0FBTztBQUVwQyxVQUFJLFNBQVMsSUFBSTtBQUNmLGNBQU0sYUFBYSxNQUFNLFNBQVMsS0FBSztBQUN2QyxjQUFNLFFBQVEsU0FBUyxjQUFjLE9BQU87QUFDNUMsY0FBTSxjQUFjO0FBQ3BCLGlCQUFTLEtBQUssWUFBWSxLQUFLO0FBQy9CLHVCQUFPLEtBQUssb0NBQW9DO0FBQUEsTUFDbEQsT0FBTztBQUNMLHVCQUFPLE1BQU0sbUNBQW1DLFNBQVMsVUFBVTtBQUFBLE1BQ3JFO0FBQUEsSUFDRixTQUFTLE9BQU87QUFDZCxxQkFBTyxNQUFNLGdDQUFnQyxpQkFBaUIsUUFBUSxNQUFNLFVBQVUsT0FBTyxLQUFLLENBQUMsRUFBRTtBQUFBLElBQ3ZHO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUNULFlBQVEsSUFBSSxvQ0FBb0M7QUFFaEQsUUFBSTtBQUVGLFVBQUksS0FBSyxhQUFhO0FBQ3BCLGFBQUssWUFBWSxnQkFBZ0I7QUFDakMsdUJBQU8sS0FBSyxxQ0FBcUM7QUFBQSxNQUNuRDtBQUdBLFVBQUksS0FBSyxhQUFhO0FBQ3BCLGFBQUssWUFBWSxpQkFBaUI7QUFDbEMsdUJBQU8sS0FBSyxzQ0FBc0M7QUFBQSxNQUNwRDtBQUdBLGVBQVMsaUJBQWlCLHNDQUFzQyxFQUFFLFFBQVEsYUFBVztBQUNuRixnQkFBUSxPQUFPO0FBQUEsTUFDakIsQ0FBQztBQVlELHFCQUFPLEtBQUssc0RBQW1EO0FBQUEsSUFDakUsU0FBUyxPQUFPO0FBQ2QscUJBQU8sTUFBTSx5Q0FBeUMsaUJBQWlCLFFBQVEsTUFBTSxVQUFVLE9BQU8sS0FBSyxDQUFDLEVBQUU7QUFBQSxJQUNoSDtBQUFBLEVBQ0Y7QUFDRjsiLAogICJuYW1lcyI6IFsiaXNGdW5jdGlvbiIsICJpc0FycmF5IiwgIm9wdGlvbnMiLCAicmV0IiwgImxvZ2dlciIsICJ3cmFwcGVyIiwgImwiLCAicmV0IiwgImNvbW1vbiIsICJjb250ZXh0IiwgIm9wdGlvbnMiLCAiSGFuZGxlYmFycyIsICJwYXJzZSIsICJzZWxmIiwgIm4iLCAibGV4ZXIiLCAibWF0Y2giLCAiUGFyc2VyIiwgImwiLCAibCIsICJsIiwgInBhcnNlIiwgImNvbXBpbGUiLCAibCIsICJtYXRjaCIsICJzIiwgInNvdXJjZUZpbGUiLCAicyIsICJvZmZzZXQiLCAibmVlZGxlIiwgInNlY3Rpb24iLCAiaXRlciIsICJlbXB0eSIsICJsIiwgIm1vZHVsZSIsICJvIiwgIm4iLCAiX3dyYXBOYXRpdmVTdXBlciIsICJ0IiwgIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCAiZSIsICJJbnZhbGlkRm9ybWF0RXJyb3IiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJyYW5nZSIsICJ0ZXh0IiwgIm9wdGlvbnMiLCAibCIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgInN0eWxpemUiLCAiYnVpbGRlciIsICJjb2xvcnMiLCAibWF0Y2giLCAic3R5bGUiLCAic2VxdWVuY2VyIiwgIm1hcCIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm8iLCAibiIsICJDb2xvcml6ZXIiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJmb3JtYXQiLCAibW9kdWxlIiwgIm8iLCAibiIsICJQYWRkZXIiLCAicmVxdWlyZV9jbGkiLCAibW9kdWxlIiwgIm8iLCAibiIsICJDbGlGb3JtYXQiLCAibW9kdWxlIiwgImZvcm1hdCIsICJtb2R1bGUiLCAibyIsICJmb3JtYXQiLCAibW9kdWxlIiwgImhhc093blByb3BlcnR5IiwgInNvcnQiLCAidmFsdWUiLCAidG1wIiwgImtleSIsICJyZXMiLCAiam9pbiIsICJzdHJpbmdpZnkiLCAibW9kdWxlIiwgImZvcm1hdCIsICJtb2R1bGUiLCAiZm9ybWF0IiwgIm1vZHVsZSIsICJmb3JtYXQiLCAibW9kdWxlIiwgIm8iLCAiZm9ybWF0IiwgIm1vZHVsZSIsICJzIiwgInBhcnNlIiwgIm1hdGNoIiwgIm4iLCAicmVxdWlyZV9tcyIsICJtb2R1bGUiLCAiZm9ybWF0IiwgIm1vZHVsZSIsICJmb3JtYXQiLCAibW9kdWxlIiwgIm8iLCAibiIsICJQcmludGYiLCAibW9kdWxlIiwgImZvcm1hdCIsICJtb2R1bGUiLCAibyIsICJuIiwgIlNwbGF0dGVyIiwgInYiLCAib2Zmc2V0IiwgIm5vdyIsICJmb3JtYXQiLCAicGFyc2UiLCAiZmllbGQiLCAibW9kdWxlIiwgImZvcm1hdCIsICJtb2R1bGUiLCAiZm9ybWF0IiwgImZvcm1hdCIsICJmb3JtYXQiLCAibW9kdWxlIiwgInJlcXVpcmVfYnJvd3NlciIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJlcnIiLCAic2VsZiIsICJtb2R1bGUiLCAiTm9kZUVycm9yIiwgIm9uZU9mIiwgImluY2x1ZGVzIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIkJ1ZmZlciIsICJvZmZzZXQiLCAicyIsICJuIiwgIm1vZHVsZSIsICJvbmxlZ2FjeWZpbmlzaCIsICJvbmZpbmlzaCIsICJvbmVuZCIsICJvbmVycm9yIiwgIm9uY2xvc2UiLCAib25yZXF1ZXN0IiwgIm1vZHVsZSIsICJpdGVyIiwgImNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciIsICJtb2R1bGUiLCAibW9kdWxlIiwgIkVFbGlzdGVuZXJDb3VudCIsICJCdWZmZXIiLCAiZGVidWciLCAibiIsICJzZWxmIiwgImwiLCAibW9kdWxlIiwgImtleXMiLCAic2VsZiIsICJtb2R1bGUiLCAiQnVmZmVyIiwgInJlYWxIYXNJbnN0YW5jZSIsICJsIiwgIm1vZHVsZSIsICJUcmFuc3BvcnRTdHJlYW0iLCAibG9nZ2VyIiwgIm1vZHVsZSIsICJMZWdhY3lUcmFuc3BvcnRTdHJlYW0iLCAibW9kdWxlIiwgIm1vZHVsZSIsICJvIiwgIm4iLCAidCIsICJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwgImUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAicmVxdWlyZV9lYWNoT2ZMaW1pdCIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibiIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibG9nZ2VyIiwgInByb2Nlc3MiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAic3dpenpsZSIsICJtb2R1bGUiLCAiaGFzT3duUHJvcGVydHkiLCAibWF0Y2giLCAicyIsICJsIiwgInJlcXVpcmVfY29sb3JfbmFtZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgInMiLCAibCIsICJuIiwgIm1hdGNoIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgInNlbGYiLCAicm91bmRUbyIsICJtb2R1bGUiLCAibW9kdWxlIiwgInNwbGl0IiwgImwiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJyZXF1aXJlX2NvbnNvbGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJyZXF1aXJlX2Jyb3dzZXIiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJpdGVyIiwgImwiLCAibW9kdWxlIiwgIm8iLCAibiIsICJ0IiwgIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCAiZSIsICJsIiwgImJ1ZmYiLCAib3B0aW9ucyIsICJzdHJlYW0iLCAic3RhdCIsICJtb2R1bGUiLCAibyIsICJyIiwgIm4iLCAidCIsICJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwgImUiLCAic3RyZWFtIiwgImwiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJvIiwgIm4iLCAidCIsICJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwgImUiLCAicmVxdWlyZV9jb25maWciLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJkdW1teU9iamVjdCIsICJ2OFN0YWNrVHJhY2UiLCAic2VsZiIsICJtb2R1bGUiLCAibyIsICJuIiwgInQiLCAiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsICJlIiwgIm1vZHVsZSIsICJvIiwgIm4iLCAibG9nZ2VyIiwgIm1vZHVsZSIsICJvIiwgIm4iLCAidCIsICJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwgImUiLCAibW9kdWxlIiwgIm8iLCAibiIsICJsb2dnZXIiLCAicmVxdWlyZV9tb2Rlcm4iLCAibW9kdWxlIiwgIlRyYW5zcG9ydFN0cmVhbSIsICJsb2dnZXIiLCAicmVxdWlyZV9sZWdhY3kiLCAibW9kdWxlIiwgIkxlZ2FjeVRyYW5zcG9ydFN0cmVhbSIsICJtb2R1bGUiLCAibyIsICJuIiwgIlByb2ZpbGVyIiwgImxvZ2dlciIsICJyZXF1aXJlX2Zvcm1hdCIsICJtb2R1bGUiLCAicmVxdWlyZV9qc29uIiwgIm1vZHVsZSIsICJmb3JtYXQiLCAicmVxdWlyZV9sb2dnZXIiLCAibW9kdWxlIiwgIm8iLCAibiIsICJ0IiwgIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCAiZSIsICJMb2dnZXIiLCAibG9nZ2VyIiwgImZvcm1hdCIsICJ0cmFuc3BvcnRzIiwgIm1hdGNoIiwgIm1vZHVsZSIsICJvIiwgIm4iLCAidCIsICJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwgImUiLCAiRGVyaXZlZExvZ2dlciIsICJsb2dnZXIiLCAic2VsZiIsICJtb2R1bGUiLCAibyIsICJuIiwgImNyZWF0ZUxvZ2dlciIsICJsb2dnZXIiLCAiaW1wb3J0X29ic2lkaWFuIiwgImZvcm1hdCIsICJmb3JtYXQiLCAicyIsICJmb3JtYXQiLCAiZm9ybWF0IiwgInNpbmdsZXRvbiIsICJvZmZzZXQiLCAicyIsICJmb3JtYXQiLCAiZGVmYXVsdFpvbmUiLCAib2Zmc2V0IiwgIm4iLCAibiIsICJvZmZzZXQiLCAiZm9ybWF0IiwgInMiLCAibiIsICJmb3JtYXRPZmZzZXQiLCAicyIsICJtYXRjaCIsICJvZmZzZXQiLCAibCIsICJuIiwgInMiLCAiSU5WQUxJRCIsICJzIiwgImUiLCAicyIsICJmb3JtYXQiLCAiSU5WQUxJRCIsICJjbG9uZSIsICJvZmZzZXQiLCAiZm9ybWF0IiwgIm9yZGVyZWRVbml0cyIsICJDb3JlVGFza1N0YXR1cyIsICJUYXNrUHJpb3JpdHlJY29uIiwgIlRhc2tEYXRlVHlwZSIsICJIYW5kbGViYXJzIiwgIm5vdyIsICJpbXBvcnRfaGFuZGxlYmFycyIsICJIYW5kbGViYXJzIiwgIndlZWtkYXlzIiwgImRheXNJbk1vbnRoIiwgImltcG9ydF9oYW5kbGViYXJzIiwgIkhhbmRsZWJhcnMiLCAiaW1wb3J0X29ic2lkaWFuIiwgIldlZWtkYXkiLCAibiIsICJzIiwgImlzTnVtYmVyIiwgInBhZFN0YXJ0IiwgInMiLCAiaXNMZWFwWWVhciIsICJpc0RhdGUiLCAiaXNMZWFwWWVhciIsICJjbG9uZSIsICJwYWRTdGFydCIsICJJdGVyUmVzdWx0IiwgImQiLCAiYiIsICJfX2Fzc2lnbiIsICJzIiwgIm4iLCAibCIsICJDYWxsYmFja0l0ZXJSZXN1bHQiLCAiVG9UZXh0IiwgIm4iLCAiaXNOdW1iZXIiLCAicyIsICJQYXJzZXIiLCAibWF0Y2giLCAibiIsICJGcmVxdWVuY3kiLCAiVGltZSIsICJEYXRlVGltZSIsICJtb250aHMiLCAiaXNEYXRlIiwgImlzTnVtYmVyIiwgIm4iLCAiRGF0ZVdpdGhab25lIiwgImRlZmF1bHRLZXlzIiwgImlzTnVtYmVyIiwgImtleSIsICJ2YWx1ZSIsICJDYWNoZSIsICJjbG9uZSIsICJpdGVtIiwgImkiLCAiaXNMZWFwWWVhciIsICJuIiwgIm4iLCAib2Zmc2V0IiwgImwiLCAiSXRlcmluZm8iLCAiRGF0ZVRpbWUiLCAiUlJ1bGUiLCAiem9uZWREYXRlIiwgIkRFRkFVTFRfT1BUSU9OUyIsICJzIiwgInZhbCIsICJpbml0aWFsaXplT3B0aW9ucyIsICJkZWZhdWx0S2V5cyIsICJSUnVsZVNldCIsICJtYXRjaCIsICJ3ZWVrZGF5cyIsICJub3ciLCAiaW1wb3J0X2hhbmRsZWJhcnMiLCAiSGFuZGxlYmFycyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiT1ZFUlZJRVdfVklFV19UWVBFIl0KfQo=
